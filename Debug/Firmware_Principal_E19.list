
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001731c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  080174ec  080174ec  000274ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a78  08017a78  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  08017a78  08017a78  00027a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a80  08017a80  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a80  08017a80  00027a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017a84  08017a84  00027a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08017a88  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005610  200001d8  08017c60  000301d8  2**2
                  ALLOC
 10 ._user_heap_stack 00008000  200057e8  08017c60  000357e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000422c1  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000077fe  00000000  00000000  000724c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002398  00000000  00000000  00079cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002080  00000000  00000000  0007c060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ec89  00000000  00000000  0007e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003654c  00000000  00000000  000acd69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f39f5  00000000  00000000  000e32b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d6caa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009730  00000000  00000000  001d6d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080174d4 	.word	0x080174d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	080174d4 	.word	0x080174d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <FT_CAN_FilterConfig>:
 */

#include "ft_can.h"

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b090      	sub	sp, #64	; 0x40
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	460b      	mov	r3, r1
 80005b4:	817b      	strh	r3, [r7, #10]
 80005b6:	4613      	mov	r3, r2
 80005b8:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 13, mask_id = 0x1FF80000;
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	035b      	lsls	r3, r3, #13
 80005be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005c0:	4b13      	ldr	r3, [pc, #76]	; (8000610 <FT_CAN_FilterConfig+0x68>)
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005c4:	7a7b      	ldrb	r3, [r7, #9]
 80005c6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005c8:	2300      	movs	r3, #0
 80005ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d2:	0b5b      	lsrs	r3, r3, #13
 80005d4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005d8:	00db      	lsls	r3, r3, #3
 80005da:	b29b      	uxth	r3, r3
 80005dc:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e0:	0b5b      	lsrs	r3, r3, #13
 80005e2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	b29b      	uxth	r3, r3
 80005ea:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 80005f4:	7a7b      	ldrb	r3, [r7, #9]
 80005f6:	330e      	adds	r3, #14
 80005f8:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80005fa:	f107 0310 	add.w	r3, r7, #16
 80005fe:	4619      	mov	r1, r3
 8000600:	68f8      	ldr	r0, [r7, #12]
 8000602:	f006 fd05 	bl	8007010 <HAL_CAN_ConfigFilter>
 8000606:	4603      	mov	r3, r0
}
 8000608:	4618      	mov	r0, r3
 800060a:	3740      	adds	r7, #64	; 0x40
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	1ff80000 	.word	0x1ff80000

08000614 <FT_CAN_ProcessData>:

#ifndef FT_CAN_SIMPLE

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b084      	sub	sp, #16
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000622:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800062a:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 800062c:	89fb      	ldrh	r3, [r7, #14]
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	2b00      	cmp	r3, #0
 8000634:	f040 823a 	bne.w	8000aac <FT_CAN_ProcessData+0x498>
	{
		return;
	}

	switch(id >> 1)
 8000638:	89fb      	ldrh	r3, [r7, #14]
 800063a:	085b      	lsrs	r3, r3, #1
 800063c:	b29b      	uxth	r3, r3
 800063e:	2b8d      	cmp	r3, #141	; 0x8d
 8000640:	f300 8166 	bgt.w	8000910 <FT_CAN_ProcessData+0x2fc>
 8000644:	2b00      	cmp	r3, #0
 8000646:	dc41      	bgt.n	80006cc <FT_CAN_ProcessData+0xb8>
 8000648:	e229      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
 800064a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800064e:	2b1b      	cmp	r3, #27
 8000650:	f200 8225 	bhi.w	8000a9e <FT_CAN_ProcessData+0x48a>
 8000654:	a201      	add	r2, pc, #4	; (adr r2, 800065c <FT_CAN_ProcessData+0x48>)
 8000656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800065a:	bf00      	nop
 800065c:	08000a63 	.word	0x08000a63
 8000660:	08000a9f 	.word	0x08000a9f
 8000664:	08000a9f 	.word	0x08000a9f
 8000668:	08000a9f 	.word	0x08000a9f
 800066c:	08000a9f 	.word	0x08000a9f
 8000670:	08000a9f 	.word	0x08000a9f
 8000674:	08000a9f 	.word	0x08000a9f
 8000678:	08000a9f 	.word	0x08000a9f
 800067c:	08000a9f 	.word	0x08000a9f
 8000680:	08000a9f 	.word	0x08000a9f
 8000684:	08000a9f 	.word	0x08000a9f
 8000688:	08000a9f 	.word	0x08000a9f
 800068c:	08000a9f 	.word	0x08000a9f
 8000690:	08000a9f 	.word	0x08000a9f
 8000694:	08000a9f 	.word	0x08000a9f
 8000698:	08000a9f 	.word	0x08000a9f
 800069c:	08000a9f 	.word	0x08000a9f
 80006a0:	08000a9f 	.word	0x08000a9f
 80006a4:	08000a6d 	.word	0x08000a6d
 80006a8:	08000a9f 	.word	0x08000a9f
 80006ac:	08000a9f 	.word	0x08000a9f
 80006b0:	08000a9f 	.word	0x08000a9f
 80006b4:	08000a9f 	.word	0x08000a9f
 80006b8:	08000a9f 	.word	0x08000a9f
 80006bc:	08000a77 	.word	0x08000a77
 80006c0:	08000a81 	.word	0x08000a81
 80006c4:	08000a8b 	.word	0x08000a8b
 80006c8:	08000a95 	.word	0x08000a95
 80006cc:	3b01      	subs	r3, #1
 80006ce:	2b8c      	cmp	r3, #140	; 0x8c
 80006d0:	f200 81e5 	bhi.w	8000a9e <FT_CAN_ProcessData+0x48a>
 80006d4:	a201      	add	r2, pc, #4	; (adr r2, 80006dc <FT_CAN_ProcessData+0xc8>)
 80006d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006da:	bf00      	nop
 80006dc:	08000923 	.word	0x08000923
 80006e0:	0800092f 	.word	0x0800092f
 80006e4:	08000939 	.word	0x08000939
 80006e8:	08000943 	.word	0x08000943
 80006ec:	0800094d 	.word	0x0800094d
 80006f0:	08000959 	.word	0x08000959
 80006f4:	08000963 	.word	0x08000963
 80006f8:	080009a5 	.word	0x080009a5
 80006fc:	080009af 	.word	0x080009af
 8000700:	080009b9 	.word	0x080009b9
 8000704:	080009c3 	.word	0x080009c3
 8000708:	080009cd 	.word	0x080009cd
 800070c:	080009d7 	.word	0x080009d7
 8000710:	080009e1 	.word	0x080009e1
 8000714:	080009eb 	.word	0x080009eb
 8000718:	080009f5 	.word	0x080009f5
 800071c:	0800096d 	.word	0x0800096d
 8000720:	08000a9f 	.word	0x08000a9f
 8000724:	08000a9f 	.word	0x08000a9f
 8000728:	08000a9f 	.word	0x08000a9f
 800072c:	08000a9f 	.word	0x08000a9f
 8000730:	08000a9f 	.word	0x08000a9f
 8000734:	08000a9f 	.word	0x08000a9f
 8000738:	08000a9f 	.word	0x08000a9f
 800073c:	08000a9f 	.word	0x08000a9f
 8000740:	08000a9f 	.word	0x08000a9f
 8000744:	08000a9f 	.word	0x08000a9f
 8000748:	08000a9f 	.word	0x08000a9f
 800074c:	08000a9f 	.word	0x08000a9f
 8000750:	08000a9f 	.word	0x08000a9f
 8000754:	08000a9f 	.word	0x08000a9f
 8000758:	08000a9f 	.word	0x08000a9f
 800075c:	08000a9f 	.word	0x08000a9f
 8000760:	08000a9f 	.word	0x08000a9f
 8000764:	08000a9f 	.word	0x08000a9f
 8000768:	08000a9f 	.word	0x08000a9f
 800076c:	08000a9f 	.word	0x08000a9f
 8000770:	08000a9f 	.word	0x08000a9f
 8000774:	08000977 	.word	0x08000977
 8000778:	08000a9f 	.word	0x08000a9f
 800077c:	08000a9f 	.word	0x08000a9f
 8000780:	08000a9f 	.word	0x08000a9f
 8000784:	08000a9f 	.word	0x08000a9f
 8000788:	08000a9f 	.word	0x08000a9f
 800078c:	08000a9f 	.word	0x08000a9f
 8000790:	08000a9f 	.word	0x08000a9f
 8000794:	08000a9f 	.word	0x08000a9f
 8000798:	08000a9f 	.word	0x08000a9f
 800079c:	08000a9f 	.word	0x08000a9f
 80007a0:	08000a9f 	.word	0x08000a9f
 80007a4:	08000a9f 	.word	0x08000a9f
 80007a8:	08000a9f 	.word	0x08000a9f
 80007ac:	08000a9f 	.word	0x08000a9f
 80007b0:	08000a9f 	.word	0x08000a9f
 80007b4:	08000a9f 	.word	0x08000a9f
 80007b8:	08000a9f 	.word	0x08000a9f
 80007bc:	08000a9f 	.word	0x08000a9f
 80007c0:	08000a9f 	.word	0x08000a9f
 80007c4:	08000a9f 	.word	0x08000a9f
 80007c8:	08000a9f 	.word	0x08000a9f
 80007cc:	08000a9f 	.word	0x08000a9f
 80007d0:	08000a9f 	.word	0x08000a9f
 80007d4:	08000a9f 	.word	0x08000a9f
 80007d8:	08000a9f 	.word	0x08000a9f
 80007dc:	08000a9f 	.word	0x08000a9f
 80007e0:	08000981 	.word	0x08000981
 80007e4:	08000a9f 	.word	0x08000a9f
 80007e8:	08000a9f 	.word	0x08000a9f
 80007ec:	08000a9f 	.word	0x08000a9f
 80007f0:	08000a9f 	.word	0x08000a9f
 80007f4:	08000a9f 	.word	0x08000a9f
 80007f8:	080009ff 	.word	0x080009ff
 80007fc:	08000a09 	.word	0x08000a09
 8000800:	08000a13 	.word	0x08000a13
 8000804:	08000a1d 	.word	0x08000a1d
 8000808:	08000a27 	.word	0x08000a27
 800080c:	08000a31 	.word	0x08000a31
 8000810:	08000a3b 	.word	0x08000a3b
 8000814:	08000a45 	.word	0x08000a45
 8000818:	08000a4f 	.word	0x08000a4f
 800081c:	08000a59 	.word	0x08000a59
 8000820:	08000a9f 	.word	0x08000a9f
 8000824:	08000a9f 	.word	0x08000a9f
 8000828:	08000a9f 	.word	0x08000a9f
 800082c:	08000a9f 	.word	0x08000a9f
 8000830:	08000a9f 	.word	0x08000a9f
 8000834:	08000a9f 	.word	0x08000a9f
 8000838:	08000a9f 	.word	0x08000a9f
 800083c:	08000a9f 	.word	0x08000a9f
 8000840:	08000a9f 	.word	0x08000a9f
 8000844:	08000a9f 	.word	0x08000a9f
 8000848:	08000a9f 	.word	0x08000a9f
 800084c:	08000a9f 	.word	0x08000a9f
 8000850:	08000a9f 	.word	0x08000a9f
 8000854:	08000a9f 	.word	0x08000a9f
 8000858:	08000a9f 	.word	0x08000a9f
 800085c:	08000a9f 	.word	0x08000a9f
 8000860:	08000a9f 	.word	0x08000a9f
 8000864:	08000a9f 	.word	0x08000a9f
 8000868:	08000a9f 	.word	0x08000a9f
 800086c:	08000a9f 	.word	0x08000a9f
 8000870:	08000a9f 	.word	0x08000a9f
 8000874:	08000a9f 	.word	0x08000a9f
 8000878:	08000a9f 	.word	0x08000a9f
 800087c:	08000a9f 	.word	0x08000a9f
 8000880:	08000a9f 	.word	0x08000a9f
 8000884:	08000a9f 	.word	0x08000a9f
 8000888:	08000a9f 	.word	0x08000a9f
 800088c:	08000a9f 	.word	0x08000a9f
 8000890:	08000a9f 	.word	0x08000a9f
 8000894:	08000a9f 	.word	0x08000a9f
 8000898:	08000a9f 	.word	0x08000a9f
 800089c:	08000a9f 	.word	0x08000a9f
 80008a0:	08000a9f 	.word	0x08000a9f
 80008a4:	08000a9f 	.word	0x08000a9f
 80008a8:	08000a9f 	.word	0x08000a9f
 80008ac:	08000a9f 	.word	0x08000a9f
 80008b0:	08000a9f 	.word	0x08000a9f
 80008b4:	08000a9f 	.word	0x08000a9f
 80008b8:	08000a9f 	.word	0x08000a9f
 80008bc:	08000a9f 	.word	0x08000a9f
 80008c0:	08000a9f 	.word	0x08000a9f
 80008c4:	08000a9f 	.word	0x08000a9f
 80008c8:	08000a9f 	.word	0x08000a9f
 80008cc:	08000a9f 	.word	0x08000a9f
 80008d0:	08000a9f 	.word	0x08000a9f
 80008d4:	08000a9f 	.word	0x08000a9f
 80008d8:	08000a9f 	.word	0x08000a9f
 80008dc:	08000a9f 	.word	0x08000a9f
 80008e0:	08000a9f 	.word	0x08000a9f
 80008e4:	08000a9f 	.word	0x08000a9f
 80008e8:	08000a9f 	.word	0x08000a9f
 80008ec:	08000a9f 	.word	0x08000a9f
 80008f0:	08000a9f 	.word	0x08000a9f
 80008f4:	08000a9f 	.word	0x08000a9f
 80008f8:	08000a9f 	.word	0x08000a9f
 80008fc:	08000a9f 	.word	0x08000a9f
 8000900:	08000a9f 	.word	0x08000a9f
 8000904:	08000a9f 	.word	0x08000a9f
 8000908:	0800098d 	.word	0x0800098d
 800090c:	08000999 	.word	0x08000999
 8000910:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8000914:	f280 80c3 	bge.w	8000a9e <FT_CAN_ProcessData+0x48a>
 8000918:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 800091c:	f6bf ae95 	bge.w	800064a <FT_CAN_ProcessData+0x36>
 8000920:	e0bd      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 8000922:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 800092c:	e0b7      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 800092e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 8000936:	e0b2      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8000938:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8000940:	e0ad      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 8000942:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 800094a:	e0a8      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 800094c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 8000956:	e0a2      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8000958:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8000960:	e09d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 8000962:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 800096a:	e098      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 800096c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8000974:	e093      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 8000976:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800097e:	e08e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 8000980:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 800098a:	e088      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 800098c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 8000996:	e082      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 8000998:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			break;
 80009a2:	e07c      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 80009a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	831a      	strh	r2, [r3, #24]
			break;
 80009ac:	e077      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 80009ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	805a      	strh	r2, [r3, #2]
			break;
 80009b6:	e072      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 80009b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 80009c0:	e06d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 80009c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	841a      	strh	r2, [r3, #32]
			break;
 80009ca:	e068      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 80009cc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 80009d4:	e063      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 80009d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 80009de:	e05e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 80009e0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 80009e8:	e059      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 80009ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 80009f2:	e054      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 80009f4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	821a      	strh	r2, [r3, #16]
			break;
 80009fc:	e04f      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 80009fe:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	839a      	strh	r2, [r3, #28]
			break;
 8000a06:	e04a      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 8000a08:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	83da      	strh	r2, [r3, #30]
			break;
 8000a10:	e045      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8000a12:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	835a      	strh	r2, [r3, #26]
			break;
 8000a1a:	e040      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 8000a1c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	819a      	strh	r2, [r3, #12]
			break;
 8000a24:	e03b      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 8000a26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	801a      	strh	r2, [r3, #0]
			break;
 8000a2e:	e036      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 8000a30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	811a      	strh	r2, [r3, #8]
			break;
 8000a38:	e031      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 8000a3a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	825a      	strh	r2, [r3, #18]
			break;
 8000a42:	e02c      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 8000a44:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	829a      	strh	r2, [r3, #20]
			break;
 8000a4c:	e027      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 8000a4e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	82da      	strh	r2, [r3, #22]
			break;
 8000a56:	e022      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 8000a58:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	815a      	strh	r2, [r3, #10]
			break;
 8000a60:	e01d      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 8000a62:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	809a      	strh	r2, [r3, #4]
			break;
 8000a6a:	e018      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 8000a6c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8000a74:	e013      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->total_fuel_flow = data;
 8000a76:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	81da      	strh	r2, [r3, #14]
			break;
 8000a7e:	e00e      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 8000a80:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	80da      	strh	r2, [r3, #6]
			break;
 8000a88:	e009      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 8000a8a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8000a92:	e004      	b.n	8000a9e <FT_CAN_ProcessData+0x48a>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 8000a94:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8000a9c:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8000a9e:	89ba      	ldrh	r2, [r7, #12]
 8000aa0:	89fb      	ldrh	r3, [r7, #14]
 8000aa2:	4611      	mov	r1, r2
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f000 f805 	bl	8000ab4 <FT_CAN_ProcessCustomData>
 8000aaa:	e000      	b.n	8000aae <FT_CAN_ProcessData+0x49a>
		return;
 8000aac:	bf00      	nop
}
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	80fb      	strh	r3, [r7, #6]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ace:	4770      	bx	lr

08000ad0 <FT_CAN_ReceiveData>:

#endif

void FT_CAN_ReceiveData(uint32_t RxID, uint32_t RxLength, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000ad0:	b5b0      	push	{r4, r5, r7, lr}
 8000ad2:	b088      	sub	sp, #32
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
 8000adc:	603b      	str	r3, [r7, #0]
 8000ade:	466b      	mov	r3, sp
 8000ae0:	461d      	mov	r5, r3
	uint32_t extid = (RxID & 0x1FF80000) >> 13;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	0b5a      	lsrs	r2, r3, #13
 8000ae6:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000aea:	4013      	ands	r3, r2
 8000aec:	61bb      	str	r3, [r7, #24]

	if(		   (extid != FT_Gear_Controller)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000af4:	d02d      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Knock_Meter)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	f240 1241 	movw	r2, #321	; 0x141
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d028      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Boost_Controller2)
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000b06:	d024      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Injector_Driver)
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8000b0e:	d020      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Nano)
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000b16:	d01c      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_WBO2_Slim)
 8000b18:	69bb      	ldr	r3, [r7, #24]
 8000b1a:	f240 2241 	movw	r2, #577	; 0x241
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d017      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Alcohol_O2)
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	f240 2242 	movw	r2, #578	; 0x242
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d012      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FTSpark)
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	f240 2243 	movw	r2, #579	; 0x243
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d00d      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT_Switchpad)
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000b3c:	d009      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT500)
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000b44:	d005      	beq.n	8000b52 <FT_CAN_ReceiveData+0x82>
			&& (extid != FT600))
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	f240 2281 	movw	r2, #641	; 0x281
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	f040 8381 	bne.w	8001254 <FT_CAN_ReceiveData+0x784>
		return;

	uint8_t buffer[RxLength];
 8000b52:	68bc      	ldr	r4, [r7, #8]
 8000b54:	4623      	mov	r3, r4
 8000b56:	3b01      	subs	r3, #1
 8000b58:	617b      	str	r3, [r7, #20]
 8000b5a:	4620      	mov	r0, r4
 8000b5c:	f04f 0100 	mov.w	r1, #0
 8000b60:	f04f 0200 	mov.w	r2, #0
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	00cb      	lsls	r3, r1, #3
 8000b6a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b6e:	00c2      	lsls	r2, r0, #3
 8000b70:	4620      	mov	r0, r4
 8000b72:	f04f 0100 	mov.w	r1, #0
 8000b76:	f04f 0200 	mov.w	r2, #0
 8000b7a:	f04f 0300 	mov.w	r3, #0
 8000b7e:	00cb      	lsls	r3, r1, #3
 8000b80:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000b84:	00c2      	lsls	r2, r0, #3
 8000b86:	1de3      	adds	r3, r4, #7
 8000b88:	08db      	lsrs	r3, r3, #3
 8000b8a:	00db      	lsls	r3, r3, #3
 8000b8c:	ebad 0d03 	sub.w	sp, sp, r3
 8000b90:	466b      	mov	r3, sp
 8000b92:	3300      	adds	r3, #0
 8000b94:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < RxLength; i++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	77fb      	strb	r3, [r7, #31]
 8000b9a:	e009      	b.n	8000bb0 <FT_CAN_ReceiveData+0xe0>
		buffer[i] = pData[i];
 8000b9c:	7ffb      	ldrb	r3, [r7, #31]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	441a      	add	r2, r3
 8000ba2:	7ffb      	ldrb	r3, [r7, #31]
 8000ba4:	7811      	ldrb	r1, [r2, #0]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < RxLength; i++)
 8000baa:	7ffb      	ldrb	r3, [r7, #31]
 8000bac:	3301      	adds	r3, #1
 8000bae:	77fb      	strb	r3, [r7, #31]
 8000bb0:	7ffb      	ldrb	r3, [r7, #31]
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d8f1      	bhi.n	8000b9c <FT_CAN_ReceiveData+0xcc>

	if((((RxID / 0x800) & 0x7) == 0x00) || (((RxID / 0x800) & 0x7) == 0x01))
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	0adb      	lsrs	r3, r3, #11
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d006      	beq.n	8000bd2 <FT_CAN_ReceiveData+0x102>
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	0adb      	lsrs	r3, r3, #11
 8000bc8:	f003 0307 	and.w	r3, r3, #7
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	f040 8139 	bne.w	8000e44 <FT_CAN_ReceiveData+0x374>
	{
		if((RxID & 0xFFF) == 0x600)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bd8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8000bdc:	d142      	bne.n	8000c64 <FT_CAN_ReceiveData+0x194>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	021b      	lsls	r3, r3, #8
 8000be4:	b21a      	sxth	r2, r3
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->tps |= buffer[1];
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	b21b      	sxth	r3, r3
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	b21a      	sxth	r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->map  = buffer[2] << 8;
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	789b      	ldrb	r3, [r3, #2]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->map |= buffer[3];
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	78db      	ldrb	r3, [r3, #3]
 8000c18:	b21b      	sxth	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b21a      	sxth	r2, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->iat  = buffer[4] << 8;
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	791b      	ldrb	r3, [r3, #4]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->iat |= buffer[5];
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	795b      	ldrb	r3, [r3, #5]
 8000c38:	b21b      	sxth	r3, r3
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	b21a      	sxth	r2, r3
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	799b      	ldrb	r3, [r3, #6]
 8000c46:	021b      	lsls	r3, r3, #8
 8000c48:	b21a      	sxth	r2, r3
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->ect |= buffer[7];
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	79db      	ldrb	r3, [r3, #7]
 8000c58:	b21b      	sxth	r3, r3
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	b21a      	sxth	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	865a      	strh	r2, [r3, #50]	; 0x32

			return;
 8000c62:	e2f8      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x601)
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c6a:	f240 6201 	movw	r2, #1537	; 0x601
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d142      	bne.n	8000cf8 <FT_CAN_ReceiveData+0x228>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	021b      	lsls	r3, r3, #8
 8000c78:	b21a      	sxth	r2, r3
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	b21b      	sxth	r3, r3
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	b21a      	sxth	r2, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000c96:	693b      	ldr	r3, [r7, #16]
 8000c98:	789b      	ldrb	r3, [r3, #2]
 8000c9a:	021b      	lsls	r3, r3, #8
 8000c9c:	b21a      	sxth	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	78db      	ldrb	r3, [r3, #3]
 8000cac:	b21b      	sxth	r3, r3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	791b      	ldrb	r3, [r3, #4]
 8000cba:	021b      	lsls	r3, r3, #8
 8000cbc:	b21a      	sxth	r2, r3
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->coolant_pressure |= buffer[5];
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	795b      	ldrb	r3, [r3, #5]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	b21a      	sxth	r2, r3
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	799b      	ldrb	r3, [r3, #6]
 8000cda:	021b      	lsls	r3, r3, #8
 8000cdc:	b21a      	sxth	r2, r3
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->gear 			 |= buffer[7];
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	79db      	ldrb	r3, [r3, #7]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	4313      	orrs	r3, r2
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	875a      	strh	r2, [r3, #58]	; 0x3a

			return;
 8000cf6:	e2ae      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		else if((RxID & 0xFFF) == 0x602)
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfe:	f240 6202 	movw	r2, #1538	; 0x602
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d146      	bne.n	8000d94 <FT_CAN_ReceiveData+0x2c4>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	021b      	lsls	r3, r3, #8
 8000d0c:	b21a      	sxth	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->lambda 			|= buffer[1];
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	785b      	ldrb	r3, [r3, #1]
 8000d1c:	b21b      	sxth	r3, r3
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	b21a      	sxth	r2, r3
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	021b      	lsls	r3, r3, #8
 8000d2c:	b21a      	sxth	r2, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->rpm 			|= buffer[3];
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	78db      	ldrb	r3, [r3, #3]
 8000d3e:	b21b      	sxth	r3, r3
 8000d40:	4313      	orrs	r3, r2
 8000d42:	b21a      	sxth	r2, r3
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	791b      	ldrb	r3, [r3, #4]
 8000d4e:	021b      	lsls	r3, r3, #8
 8000d50:	b21a      	sxth	r2, r3
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	795b      	ldrb	r3, [r3, #5]
 8000d62:	b21b      	sxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b21a      	sxth	r2, r3
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	799b      	ldrb	r3, [r3, #6]
 8000d72:	021b      	lsls	r3, r3, #8
 8000d74:	b21a      	sxth	r2, r3
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 8000d82:	693b      	ldr	r3, [r7, #16]
 8000d84:	79db      	ldrb	r3, [r3, #7]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			return;
 8000d92:	e260      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}

#ifndef FT_CAN_SIMPLE
		else if((RxID & 0xFF) == 0xFF)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2bff      	cmp	r3, #255	; 0xff
 8000d9a:	f040 8258 	bne.w	800124e <FT_CAN_ReceiveData+0x77e>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	021b      	lsls	r3, r3, #8
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[1];
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000db4:	693b      	ldr	r3, [r7, #16]
 8000db6:	785b      	ldrb	r3, [r3, #1]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	789b      	ldrb	r3, [r3, #2]
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[3];
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	78db      	ldrb	r3, [r3, #3]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000dea:	6838      	ldr	r0, [r7, #0]
 8000dec:	f7ff fc12 	bl	8000614 <FT_CAN_ProcessData>

			FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	791b      	ldrb	r3, [r3, #4]
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	021b      	lsls	r3, r3, #8
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[5];
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	795b      	ldrb	r3, [r3, #5]
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[6] << 8;
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	799b      	ldrb	r3, [r3, #6]
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	021b      	lsls	r3, r3, #8
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[7];
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	79db      	ldrb	r3, [r3, #7]
 8000e30:	b29b      	uxth	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000e3c:	6838      	ldr	r0, [r7, #0]
 8000e3e:	f7ff fbe9 	bl	8000614 <FT_CAN_ProcessData>

			return;
 8000e42:	e208      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
	}

	else if(buffer[0] == 0xFF)
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d129      	bne.n	8000ea0 <FT_CAN_ReceiveData+0x3d0>
	{
		FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	785b      	ldrb	r3, [r3, #1]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	021b      	lsls	r3, r3, #8
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_id 	 |= buffer[2];
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	789b      	ldrb	r3, [r3, #2]
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4313      	orrs	r3, r2
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
		FT_Data_Struct->data_content  = buffer[3] << 8;
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	78db      	ldrb	r3, [r3, #3]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	021b      	lsls	r3, r3, #8
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
		FT_Data_Struct->data_content |= buffer[4];
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	791b      	ldrb	r3, [r3, #4]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

		FT_CAN_ProcessData(FT_Data_Struct);
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f7ff fbbb 	bl	8000614 <FT_CAN_ProcessData>

		return;
 8000e9e:	e1da      	b.n	8001256 <FT_CAN_ReceiveData+0x786>

	//Segmented Messages
	else
	{
		//First Message
		if(buffer[0] == 0)
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d14b      	bne.n	8000f40 <FT_CAN_ReceiveData+0x470>
		{
			FT_Data_Struct->data_length   = buffer[1] << 8;
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	785b      	ldrb	r3, [r3, #1]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	021b      	lsls	r3, r3, #8
 8000eb0:	b29a      	uxth	r2, r3
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->data_length  |= buffer[2];
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	789b      	ldrb	r3, [r3, #2]
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

			FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	78db      	ldrb	r3, [r3, #3]
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_id 	 |= buffer[4];
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	791b      	ldrb	r3, [r3, #4]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4313      	orrs	r3, r2
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->data_content  = buffer[5] << 8;
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	795b      	ldrb	r3, [r3, #5]
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	021b      	lsls	r3, r3, #8
 8000efc:	b29a      	uxth	r2, r3
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->data_content |= buffer[6];
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	799b      	ldrb	r3, [r3, #6]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	4313      	orrs	r3, r2
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			FT_CAN_ProcessData(FT_Data_Struct);
 8000f1a:	6838      	ldr	r0, [r7, #0]
 8000f1c:	f7ff fb7a 	bl	8000614 <FT_CAN_ProcessData>

			if(RxLength == 8)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	2b08      	cmp	r3, #8
 8000f24:	d107      	bne.n	8000f36 <FT_CAN_ReceiveData+0x466>
				FT_Data_Struct->data_id   = buffer[7] << 8;
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	79db      	ldrb	r3, [r3, #7]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	021b      	lsls	r3, r3, #8
 8000f2e:	b29a      	uxth	r2, r3
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg = 0;
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8000f3e:	e18a      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 1, 5, etc
		else if((buffer[0]-1)%4 == 0)
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	f003 0303 	and.w	r3, r3, #3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d15c      	bne.n	8001008 <FT_CAN_ReceiveData+0x538>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d120      	bne.n	8000fa2 <FT_CAN_ReceiveData+0x4d2>
			{
				FT_Data_Struct->data_id 	 |= buffer[1];
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	785b      	ldrb	r3, [r3, #1]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[2] << 8;
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	789b      	ldrb	r3, [r3, #2]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b29a      	uxth	r2, r3
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[3];
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	78db      	ldrb	r3, [r3, #3]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	4313      	orrs	r3, r2
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f7ff fb39 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	2b08      	cmp	r3, #8
 8000fa6:	d128      	bne.n	8000ffa <FT_CAN_ReceiveData+0x52a>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	791b      	ldrb	r3, [r3, #4]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	b29a      	uxth	r2, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	795b      	ldrb	r3, [r3, #5]
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	799b      	ldrb	r3, [r3, #6]
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	b29a      	uxth	r2, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[7];
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	79db      	ldrb	r3, [r3, #7]
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f7ff fb0d 	bl	8000614 <FT_CAN_ProcessData>
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	b29a      	uxth	r2, r3
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001006:	e126      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//messages 2, 6, etc
		else if((buffer[0]-2)%4 == 0)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b02      	subs	r3, #2
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b00      	cmp	r3, #0
 8001014:	d150      	bne.n	80010b8 <FT_CAN_ReceiveData+0x5e8>
		{
			if(RxLength >= 5)
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b04      	cmp	r3, #4
 800101a:	d928      	bls.n	800106e <FT_CAN_ReceiveData+0x59e>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	785b      	ldrb	r3, [r3, #1]
 8001020:	b29b      	uxth	r3, r3
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b29a      	uxth	r2, r3
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[2];
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	789b      	ldrb	r3, [r3, #2]
 8001036:	b29b      	uxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b29a      	uxth	r2, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	b29b      	uxth	r3, r3
 8001048:	021b      	lsls	r3, r3, #8
 800104a:	b29a      	uxth	r2, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[4];
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	791b      	ldrb	r3, [r3, #4]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b29a      	uxth	r2, r3
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001068:	6838      	ldr	r0, [r7, #0]
 800106a:	f7ff fad3 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b08      	cmp	r3, #8
 8001072:	d11a      	bne.n	80010aa <FT_CAN_ReceiveData+0x5da>
			{
				FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	795b      	ldrb	r3, [r3, #5]
 8001078:	b29b      	uxth	r3, r3
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b29a      	uxth	r2, r3
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	|= buffer[6];
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	799b      	ldrb	r3, [r3, #6]
 800108e:	b29b      	uxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b29a      	uxth	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content = buffer[7] << 8;
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	79db      	ldrb	r3, [r3, #7]
 800109e:	b29b      	uxth	r3, r3
 80010a0:	021b      	lsls	r3, r3, #8
 80010a2:	b29a      	uxth	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			}

			FT_Data_Struct->data_last_seg 	 = buffer[0];
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 80010b6:	e0ce      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 3, 7, etc
		else if((buffer[0]-3)%4 == 0)
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	3b03      	subs	r3, #3
 80010be:	f003 0303 	and.w	r3, r3, #3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d15f      	bne.n	8001186 <FT_CAN_ReceiveData+0x6b6>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80010d2:	3301      	adds	r3, #1
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d10d      	bne.n	80010f4 <FT_CAN_ReceiveData+0x624>
			{
				FT_Data_Struct->data_content |= buffer[1];
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	b29b      	uxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80010ee:	6838      	ldr	r0, [r7, #0]
 80010f0:	f7ff fa90 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 6)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	2b05      	cmp	r3, #5
 80010f8:	d928      	bls.n	800114c <FT_CAN_ReceiveData+0x67c>
			{
				FT_Data_Struct->data_id  	  = buffer[2] << 8;
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	789b      	ldrb	r3, [r3, #2]
 80010fe:	b29b      	uxth	r3, r3
 8001100:	021b      	lsls	r3, r3, #8
 8001102:	b29a      	uxth	r2, r3
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[3];
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	78db      	ldrb	r3, [r3, #3]
 8001114:	b29b      	uxth	r3, r3
 8001116:	4313      	orrs	r3, r2
 8001118:	b29a      	uxth	r2, r3
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[4] << 8;
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	791b      	ldrb	r3, [r3, #4]
 8001124:	b29b      	uxth	r3, r3
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b29a      	uxth	r2, r3
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[5];
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	795b      	ldrb	r3, [r3, #5]
 800113a:	b29b      	uxth	r3, r3
 800113c:	4313      	orrs	r3, r2
 800113e:	b29a      	uxth	r2, r3
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001146:	6838      	ldr	r0, [r7, #0]
 8001148:	f7ff fa64 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	2b08      	cmp	r3, #8
 8001150:	d112      	bne.n	8001178 <FT_CAN_ReceiveData+0x6a8>
			{
				FT_Data_Struct->data_id 	  = buffer[6] << 8;
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	799b      	ldrb	r3, [r3, #6]
 8001156:	b29b      	uxth	r3, r3
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	b29a      	uxth	r2, r3
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[7];
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	79db      	ldrb	r3, [r3, #7]
 800116c:	b29b      	uxth	r3, r3
 800116e:	4313      	orrs	r3, r2
 8001170:	b29a      	uxth	r2, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			}

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29a      	uxth	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 8001184:	e067      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		}
		//Messages 4, 8, etc
		else if(buffer[0]%4 == 0)
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b00      	cmp	r3, #0
 8001192:	d15d      	bne.n	8001250 <FT_CAN_ReceiveData+0x780>
		{
			if(buffer[0] == FT_Data_Struct->data_last_seg + 1)
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80011a0:	3301      	adds	r3, #1
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d115      	bne.n	80011d2 <FT_CAN_ReceiveData+0x702>
			{
				FT_Data_Struct->data_content  = buffer[1] << 8;
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	785b      	ldrb	r3, [r3, #1]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	021b      	lsls	r3, r3, #8
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[2];
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	789b      	ldrb	r3, [r3, #2]
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f7ff fa21 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength >= 7)
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	2b06      	cmp	r3, #6
 80011d6:	d928      	bls.n	800122a <FT_CAN_ReceiveData+0x75a>
			{
				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	78db      	ldrb	r3, [r3, #3]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_id 	 |= buffer[4];
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	791b      	ldrb	r3, [r3, #4]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	4313      	orrs	r3, r2
 80011f6:	b29a      	uxth	r2, r3
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
				FT_Data_Struct->data_content  = buffer[5] << 8;
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	795b      	ldrb	r3, [r3, #5]
 8001202:	b29b      	uxth	r3, r3
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	b29a      	uxth	r2, r3
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
				FT_Data_Struct->data_content |= buffer[6];
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	799b      	ldrb	r3, [r3, #6]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4313      	orrs	r3, r2
 800121c:	b29a      	uxth	r2, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

				FT_CAN_ProcessData(FT_Data_Struct);
 8001224:	6838      	ldr	r0, [r7, #0]
 8001226:	f7ff f9f5 	bl	8000614 <FT_CAN_ProcessData>
			}

			if(RxLength == 8)
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d107      	bne.n	8001240 <FT_CAN_ReceiveData+0x770>
			FT_Data_Struct->data_id 	  	  = buffer[7] << 8;
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	79db      	ldrb	r3, [r3, #7]
 8001234:	b29b      	uxth	r3, r3
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	b29a      	uxth	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			FT_Data_Struct->data_last_seg 	  = buffer[0];
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b29a      	uxth	r2, r3
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

			return;
 800124c:	e003      	b.n	8001256 <FT_CAN_ReceiveData+0x786>
		if((RxID & 0xFFF) == 0x600)
 800124e:	bf00      	nop
 8001250:	46ad      	mov	sp, r5
 8001252:	e001      	b.n	8001258 <FT_CAN_ReceiveData+0x788>
		return;
 8001254:	bf00      	nop
 8001256:	46ad      	mov	sp, r5
		}
#endif
	}
}
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001266:	f005 f91f 	bl	80064a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800126a:	f000 f90b 	bl	8001484 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800126e:	f000 f981 	bl	8001574 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001272:	f000 fc21 	bl	8001ab8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001276:	f000 fbe7 	bl	8001a48 <MX_DMA_Init>
  MX_IWDG_Init();
 800127a:	f000 fb45 	bl	8001908 <MX_IWDG_Init>
  MX_SDIO_SD_Init();
 800127e:	f000 fb8d 	bl	800199c <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001282:	f000 f99f 	bl	80015c4 <MX_ADC1_Init>
  MX_RTC_Init();
 8001286:	f000 fb59 	bl	800193c <MX_RTC_Init>
  MX_FATFS_Init();
 800128a:	f00e fea1 	bl	800ffd0 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800128e:	f014 ff7b 	bl	8016188 <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001292:	f000 fa3d 	bl	8001710 <MX_ADC2_Init>
  MX_CAN1_Init();
 8001296:	f000 fad3 	bl	8001840 <MX_CAN1_Init>
  MX_I2C1_Init();
 800129a:	f000 fb07 	bl	80018ac <MX_I2C1_Init>
  MX_TIM7_Init();
 800129e:	f000 fb9d 	bl	80019dc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 80012a2:	4a67      	ldr	r2, [pc, #412]	; (8001440 <main+0x1e0>)
 80012a4:	4967      	ldr	r1, [pc, #412]	; (8001444 <main+0x1e4>)
 80012a6:	4868      	ldr	r0, [pc, #416]	; (8001448 <main+0x1e8>)
 80012a8:	f003 fd06 	bl	8004cb8 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks if data is being saved and starts saving if conditions are met
	  if(Flag_Datalogger == DL_No_Save)
 80012ac:	4b67      	ldr	r3, [pc, #412]	; (800144c <main+0x1ec>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d109      	bne.n	80012c8 <main+0x68>
		  Principal_Datalogger_Start(&Date, &Time, Dir_String, Log_String, &Dir_Struct, &File_Struct);
 80012b4:	4b66      	ldr	r3, [pc, #408]	; (8001450 <main+0x1f0>)
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	4b66      	ldr	r3, [pc, #408]	; (8001454 <main+0x1f4>)
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	4b66      	ldr	r3, [pc, #408]	; (8001458 <main+0x1f8>)
 80012be:	4a67      	ldr	r2, [pc, #412]	; (800145c <main+0x1fc>)
 80012c0:	4967      	ldr	r1, [pc, #412]	; (8001460 <main+0x200>)
 80012c2:	4868      	ldr	r0, [pc, #416]	; (8001464 <main+0x204>)
 80012c4:	f004 f94e 	bl	8005564 <Principal_Datalogger_Start>

	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection(&Fatfs_Struct, &Dir_Struct, &File_Struct);
 80012c8:	4a61      	ldr	r2, [pc, #388]	; (8001450 <main+0x1f0>)
 80012ca:	4962      	ldr	r1, [pc, #392]	; (8001454 <main+0x1f4>)
 80012cc:	4866      	ldr	r0, [pc, #408]	; (8001468 <main+0x208>)
 80012ce:	f004 fb37 	bl	8005940 <Principal_Card_Detection>

	  //Checks USB cable connection, if connected will disable logging
	  if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET) && (Flag_Datalogger != DL_Save))
 80012d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012d6:	4865      	ldr	r0, [pc, #404]	; (800146c <main+0x20c>)
 80012d8:	f007 fa7a 	bl	80087d0 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b01      	cmp	r3, #1
 80012e0:	d107      	bne.n	80012f2 <main+0x92>
 80012e2:	4b5a      	ldr	r3, [pc, #360]	; (800144c <main+0x1ec>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d003      	beq.n	80012f2 <main+0x92>
		  Principal_Datalogger_Finish(&Dir_Struct, &File_Struct);
 80012ea:	4959      	ldr	r1, [pc, #356]	; (8001450 <main+0x1f0>)
 80012ec:	4859      	ldr	r0, [pc, #356]	; (8001454 <main+0x1f4>)
 80012ee:	f004 fa03 	bl	80056f8 <Principal_Datalogger_Finish>

	  //Analog inputs 1-4 CAN message
	  if((Acc_Msg[Analog_1_4] >= Per_Msg[Analog_1_4]) && (Per_Msg[Analog_1_4] != 0))
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <main+0x210>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a5f      	ldr	r2, [pc, #380]	; (8001474 <main+0x214>)
 80012f8:	8812      	ldrh	r2, [r2, #0]
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d30e      	bcc.n	800131c <main+0xbc>
 80012fe:	4b5d      	ldr	r3, [pc, #372]	; (8001474 <main+0x214>)
 8001300:	881b      	ldrh	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d00a      	beq.n	800131c <main+0xbc>
	  {
		  Acc_Msg[Analog_1_4] -= Per_Msg[Analog_1_4];
 8001306:	4b5a      	ldr	r3, [pc, #360]	; (8001470 <main+0x210>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <main+0x214>)
 800130c:	8812      	ldrh	r2, [r2, #0]
 800130e:	1a9b      	subs	r3, r3, r2
 8001310:	4a57      	ldr	r2, [pc, #348]	; (8001470 <main+0x210>)
 8001312:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, Analog_1_4);
 8001314:	2100      	movs	r1, #0
 8001316:	484c      	ldr	r0, [pc, #304]	; (8001448 <main+0x1e8>)
 8001318:	f002 f968 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((Acc_Msg[Analog_5_8] >= Per_Msg[Analog_5_8]) && (Per_Msg[Analog_5_8] != 0))
 800131c:	4b54      	ldr	r3, [pc, #336]	; (8001470 <main+0x210>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a54      	ldr	r2, [pc, #336]	; (8001474 <main+0x214>)
 8001322:	8852      	ldrh	r2, [r2, #2]
 8001324:	4293      	cmp	r3, r2
 8001326:	d30e      	bcc.n	8001346 <main+0xe6>
 8001328:	4b52      	ldr	r3, [pc, #328]	; (8001474 <main+0x214>)
 800132a:	885b      	ldrh	r3, [r3, #2]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00a      	beq.n	8001346 <main+0xe6>
	  {
		  Acc_Msg[Analog_5_8] -= Per_Msg[Analog_5_8];
 8001330:	4b4f      	ldr	r3, [pc, #316]	; (8001470 <main+0x210>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <main+0x214>)
 8001336:	8852      	ldrh	r2, [r2, #2]
 8001338:	1a9b      	subs	r3, r3, r2
 800133a:	4a4d      	ldr	r2, [pc, #308]	; (8001470 <main+0x210>)
 800133c:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, Analog_5_8);
 800133e:	2101      	movs	r1, #1
 8001340:	4841      	ldr	r0, [pc, #260]	; (8001448 <main+0x1e8>)
 8001342:	f002 f953 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((Acc_Msg[Analog_9_12] >= Per_Msg[Analog_9_12]) && (Per_Msg[Analog_9_12] != 0))
 8001346:	4b4a      	ldr	r3, [pc, #296]	; (8001470 <main+0x210>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	4a4a      	ldr	r2, [pc, #296]	; (8001474 <main+0x214>)
 800134c:	8892      	ldrh	r2, [r2, #4]
 800134e:	4293      	cmp	r3, r2
 8001350:	d30e      	bcc.n	8001370 <main+0x110>
 8001352:	4b48      	ldr	r3, [pc, #288]	; (8001474 <main+0x214>)
 8001354:	889b      	ldrh	r3, [r3, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d00a      	beq.n	8001370 <main+0x110>
	  {
		  Acc_Msg[Analog_9_12] -= Per_Msg[Analog_9_12];
 800135a:	4b45      	ldr	r3, [pc, #276]	; (8001470 <main+0x210>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	4a45      	ldr	r2, [pc, #276]	; (8001474 <main+0x214>)
 8001360:	8892      	ldrh	r2, [r2, #4]
 8001362:	1a9b      	subs	r3, r3, r2
 8001364:	4a42      	ldr	r2, [pc, #264]	; (8001470 <main+0x210>)
 8001366:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, Analog_9_12);
 8001368:	2102      	movs	r1, #2
 800136a:	4837      	ldr	r0, [pc, #220]	; (8001448 <main+0x1e8>)
 800136c:	f002 f93e 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((Acc_Msg[RTC_Msg] >= Per_Msg[RTC_Msg]) && (Per_Msg[RTC_Msg] != 0))
 8001370:	4b3f      	ldr	r3, [pc, #252]	; (8001470 <main+0x210>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	4a3f      	ldr	r2, [pc, #252]	; (8001474 <main+0x214>)
 8001376:	88d2      	ldrh	r2, [r2, #6]
 8001378:	4293      	cmp	r3, r2
 800137a:	d30e      	bcc.n	800139a <main+0x13a>
 800137c:	4b3d      	ldr	r3, [pc, #244]	; (8001474 <main+0x214>)
 800137e:	88db      	ldrh	r3, [r3, #6]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00a      	beq.n	800139a <main+0x13a>
	  {
		  Acc_Msg[RTC_Msg] -= Per_Msg[RTC_Msg];
 8001384:	4b3a      	ldr	r3, [pc, #232]	; (8001470 <main+0x210>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a3a      	ldr	r2, [pc, #232]	; (8001474 <main+0x214>)
 800138a:	88d2      	ldrh	r2, [r2, #6]
 800138c:	1a9b      	subs	r3, r3, r2
 800138e:	4a38      	ldr	r2, [pc, #224]	; (8001470 <main+0x210>)
 8001390:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_Msg);
 8001392:	2103      	movs	r1, #3
 8001394:	482c      	ldr	r0, [pc, #176]	; (8001448 <main+0x1e8>)
 8001396:	f002 f929 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((Acc_Msg[Verify_Msg] >= Per_Msg[Verify_Msg]) && (Per_Msg[Verify_Msg] != 0))
 800139a:	4b35      	ldr	r3, [pc, #212]	; (8001470 <main+0x210>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	4a35      	ldr	r2, [pc, #212]	; (8001474 <main+0x214>)
 80013a0:	8912      	ldrh	r2, [r2, #8]
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d30e      	bcc.n	80013c4 <main+0x164>
 80013a6:	4b33      	ldr	r3, [pc, #204]	; (8001474 <main+0x214>)
 80013a8:	891b      	ldrh	r3, [r3, #8]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00a      	beq.n	80013c4 <main+0x164>
	  {
		  Acc_Msg[Verify_Msg] -= Per_Msg[Verify_Msg];
 80013ae:	4b30      	ldr	r3, [pc, #192]	; (8001470 <main+0x210>)
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	4a30      	ldr	r2, [pc, #192]	; (8001474 <main+0x214>)
 80013b4:	8912      	ldrh	r2, [r2, #8]
 80013b6:	1a9b      	subs	r3, r3, r2
 80013b8:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <main+0x210>)
 80013ba:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, Verify_Msg);
 80013bc:	2104      	movs	r1, #4
 80013be:	4822      	ldr	r0, [pc, #136]	; (8001448 <main+0x1e8>)
 80013c0:	f002 f914 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((Acc_Msg[ECU_Save] >= Per_Msg[ECU_Save]) && (Per_Msg[ECU_Save] != 0))
 80013c4:	4b2a      	ldr	r3, [pc, #168]	; (8001470 <main+0x210>)
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	4a2a      	ldr	r2, [pc, #168]	; (8001474 <main+0x214>)
 80013ca:	8952      	ldrh	r2, [r2, #10]
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d30e      	bcc.n	80013ee <main+0x18e>
 80013d0:	4b28      	ldr	r3, [pc, #160]	; (8001474 <main+0x214>)
 80013d2:	895b      	ldrh	r3, [r3, #10]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00a      	beq.n	80013ee <main+0x18e>
	  {
		  Acc_Msg[ECU_Save] -= Per_Msg[ECU_Save];
 80013d8:	4b25      	ldr	r3, [pc, #148]	; (8001470 <main+0x210>)
 80013da:	695b      	ldr	r3, [r3, #20]
 80013dc:	4a25      	ldr	r2, [pc, #148]	; (8001474 <main+0x214>)
 80013de:	8952      	ldrh	r2, [r2, #10]
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	4a23      	ldr	r2, [pc, #140]	; (8001470 <main+0x210>)
 80013e4:	6153      	str	r3, [r2, #20]
		  Principal_Transmit_Msg(&hcan1, ECU_Save);
 80013e6:	2105      	movs	r1, #5
 80013e8:	4817      	ldr	r0, [pc, #92]	; (8001448 <main+0x1e8>)
 80013ea:	f002 f8ff 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((Acc_Msg[PDM_Save] >= Per_Msg[PDM_Save]) && (Per_Msg[PDM_Save] != 0))
 80013ee:	4b20      	ldr	r3, [pc, #128]	; (8001470 <main+0x210>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	4a20      	ldr	r2, [pc, #128]	; (8001474 <main+0x214>)
 80013f4:	8992      	ldrh	r2, [r2, #12]
 80013f6:	4293      	cmp	r3, r2
 80013f8:	d30e      	bcc.n	8001418 <main+0x1b8>
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <main+0x214>)
 80013fc:	899b      	ldrh	r3, [r3, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d00a      	beq.n	8001418 <main+0x1b8>
	  {
		  Acc_Msg[PDM_Save] -= Per_Msg[PDM_Save];
 8001402:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <main+0x210>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	4a1b      	ldr	r2, [pc, #108]	; (8001474 <main+0x214>)
 8001408:	8992      	ldrh	r2, [r2, #12]
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	4a18      	ldr	r2, [pc, #96]	; (8001470 <main+0x210>)
 800140e:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, PDM_Save);
 8001410:	2106      	movs	r1, #6
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <main+0x1e8>)
 8001414:	f002 f8ea 	bl	80035ec <Principal_Transmit_Msg>
	  }

	  if((Verify != 0) && (Verify_CAN != 0) && (Flag_Datalogger != DL_Error))
 8001418:	4b17      	ldr	r3, [pc, #92]	; (8001478 <main+0x218>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f43f af45 	beq.w	80012ac <main+0x4c>
 8001422:	4b16      	ldr	r3, [pc, #88]	; (800147c <main+0x21c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	f43f af40 	beq.w	80012ac <main+0x4c>
 800142c:	4b07      	ldr	r3, [pc, #28]	; (800144c <main+0x1ec>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b04      	cmp	r3, #4
 8001432:	f43f af3b 	beq.w	80012ac <main+0x4c>
		  HAL_IWDG_Refresh(&hiwdg);
 8001436:	4812      	ldr	r0, [pc, #72]	; (8001480 <main+0x220>)
 8001438:	f008 fa05 	bl	8009846 <HAL_IWDG_Refresh>
	  if(Flag_Datalogger == DL_No_Save)
 800143c:	e736      	b.n	80012ac <main+0x4c>
 800143e:	bf00      	nop
 8001440:	20002dcc 	.word	0x20002dcc
 8001444:	20000768 	.word	0x20000768
 8001448:	20002d2c 	.word	0x20002d2c
 800144c:	20001bd0 	.word	0x20001bd0
 8001450:	20001c84 	.word	0x20001c84
 8001454:	20001a64 	.word	0x20001a64
 8001458:	20002d64 	.word	0x20002d64
 800145c:	200009cc 	.word	0x200009cc
 8001460:	20002cb0 	.word	0x20002cb0
 8001464:	20001a5c 	.word	0x20001a5c
 8001468:	200009d8 	.word	0x200009d8
 800146c:	40020000 	.word	0x40020000
 8001470:	20001c60 	.word	0x20001c60
 8001474:	20002e7c 	.word	0x20002e7c
 8001478:	20002e78 	.word	0x20002e78
 800147c:	20001a58 	.word	0x20001a58
 8001480:	200007c0 	.word	0x200007c0

08001484 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b094      	sub	sp, #80	; 0x50
 8001488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	2234      	movs	r2, #52	; 0x34
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f015 fbf6 	bl	8016c84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001498:	f107 0308 	add.w	r3, r7, #8
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a8:	2300      	movs	r3, #0
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <SystemClock_Config+0xe8>)
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	4a2e      	ldr	r2, [pc, #184]	; (800156c <SystemClock_Config+0xe8>)
 80014b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014b6:	6413      	str	r3, [r2, #64]	; 0x40
 80014b8:	4b2c      	ldr	r3, [pc, #176]	; (800156c <SystemClock_Config+0xe8>)
 80014ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c0:	607b      	str	r3, [r7, #4]
 80014c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014c4:	2300      	movs	r3, #0
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	4b29      	ldr	r3, [pc, #164]	; (8001570 <SystemClock_Config+0xec>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a28      	ldr	r2, [pc, #160]	; (8001570 <SystemClock_Config+0xec>)
 80014ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	4b26      	ldr	r3, [pc, #152]	; (8001570 <SystemClock_Config+0xec>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80014dc:	603b      	str	r3, [r7, #0]
 80014de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE
 80014e0:	230d      	movs	r3, #13
 80014e2:	61fb      	str	r3, [r7, #28]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014ea:	2301      	movs	r3, #1
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80014ee:	2301      	movs	r3, #1
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f2:	2302      	movs	r3, #2
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014fc:	2308      	movs	r3, #8
 80014fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001500:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8001504:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001506:	2302      	movs	r3, #2
 8001508:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 800150a:	2306      	movs	r3, #6
 800150c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800150e:	2302      	movs	r3, #2
 8001510:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001512:	f107 031c 	add.w	r3, r7, #28
 8001516:	4618      	mov	r0, r3
 8001518:	f00a f9d4 	bl	800b8c4 <HAL_RCC_OscConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001522:	f000 fb6f 	bl	8001c04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001526:	f009 fb9b 	bl	800ac60 <HAL_PWREx_EnableOverDrive>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001530:	f000 fb68 	bl	8001c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001540:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001544:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	2105      	movs	r1, #5
 8001552:	4618      	mov	r0, r3
 8001554:	f009 fbd4 	bl	800ad00 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xde>
  {
    Error_Handler();
 800155e:	f000 fb51 	bl	8001c04 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	; 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b098      	sub	sp, #96	; 0x60
 8001578:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800157a:	1d3b      	adds	r3, r7, #4
 800157c:	225c      	movs	r2, #92	; 0x5c
 800157e:	2100      	movs	r1, #0
 8001580:	4618      	mov	r0, r3
 8001582:	f015 fb7f 	bl	8016c84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001586:	f44f 7340 	mov.w	r3, #768	; 0x300
 800158a:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 800158c:	2308      	movs	r3, #8
 800158e:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001590:	23c0      	movs	r3, #192	; 0xc0
 8001592:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001594:	2302      	movs	r3, #2
 8001596:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001598:	2304      	movs	r3, #4
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 80015a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80015a4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80015a6:	2300      	movs	r3, #0
 80015a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	4618      	mov	r0, r3
 80015ae:	f009 fcad 	bl	800af0c <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 80015b8:	f000 fb24 	bl	8001c04 <Error_Handler>
  }
}
 80015bc:	bf00      	nop
 80015be:	3760      	adds	r7, #96	; 0x60
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ca:	463b      	mov	r3, r7
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015d6:	4b4b      	ldr	r3, [pc, #300]	; (8001704 <MX_ADC1_Init+0x140>)
 80015d8:	4a4b      	ldr	r2, [pc, #300]	; (8001708 <MX_ADC1_Init+0x144>)
 80015da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015dc:	4b49      	ldr	r3, [pc, #292]	; (8001704 <MX_ADC1_Init+0x140>)
 80015de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015e4:	4b47      	ldr	r3, [pc, #284]	; (8001704 <MX_ADC1_Init+0x140>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80015ea:	4b46      	ldr	r3, [pc, #280]	; (8001704 <MX_ADC1_Init+0x140>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80015f0:	4b44      	ldr	r3, [pc, #272]	; (8001704 <MX_ADC1_Init+0x140>)
 80015f2:	2201      	movs	r2, #1
 80015f4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f6:	4b43      	ldr	r3, [pc, #268]	; (8001704 <MX_ADC1_Init+0x140>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015fe:	4b41      	ldr	r3, [pc, #260]	; (8001704 <MX_ADC1_Init+0x140>)
 8001600:	2200      	movs	r2, #0
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001604:	4b3f      	ldr	r3, [pc, #252]	; (8001704 <MX_ADC1_Init+0x140>)
 8001606:	4a41      	ldr	r2, [pc, #260]	; (800170c <MX_ADC1_Init+0x148>)
 8001608:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800160a:	4b3e      	ldr	r3, [pc, #248]	; (8001704 <MX_ADC1_Init+0x140>)
 800160c:	2200      	movs	r2, #0
 800160e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8001610:	4b3c      	ldr	r3, [pc, #240]	; (8001704 <MX_ADC1_Init+0x140>)
 8001612:	2207      	movs	r2, #7
 8001614:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001616:	4b3b      	ldr	r3, [pc, #236]	; (8001704 <MX_ADC1_Init+0x140>)
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800161e:	4b39      	ldr	r3, [pc, #228]	; (8001704 <MX_ADC1_Init+0x140>)
 8001620:	2201      	movs	r2, #1
 8001622:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001624:	4837      	ldr	r0, [pc, #220]	; (8001704 <MX_ADC1_Init+0x140>)
 8001626:	f004 ffd5 	bl	80065d4 <HAL_ADC_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001630:	f000 fae8 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001634:	2306      	movs	r3, #6
 8001636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001638:	2301      	movs	r3, #1
 800163a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800163c:	2307      	movs	r3, #7
 800163e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	4619      	mov	r1, r3
 8001644:	482f      	ldr	r0, [pc, #188]	; (8001704 <MX_ADC1_Init+0x140>)
 8001646:	f005 f937 	bl	80068b8 <HAL_ADC_ConfigChannel>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001650:	f000 fad8 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001654:	2307      	movs	r3, #7
 8001656:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001658:	2302      	movs	r3, #2
 800165a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	4828      	ldr	r0, [pc, #160]	; (8001704 <MX_ADC1_Init+0x140>)
 8001662:	f005 f929 	bl	80068b8 <HAL_ADC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800166c:	f000 faca 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001670:	230e      	movs	r3, #14
 8001672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001674:	2303      	movs	r3, #3
 8001676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	4619      	mov	r1, r3
 800167c:	4821      	ldr	r0, [pc, #132]	; (8001704 <MX_ADC1_Init+0x140>)
 800167e:	f005 f91b 	bl	80068b8 <HAL_ADC_ConfigChannel>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001688:	f000 fabc 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800168c:	230f      	movs	r3, #15
 800168e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001690:	2304      	movs	r3, #4
 8001692:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	481a      	ldr	r0, [pc, #104]	; (8001704 <MX_ADC1_Init+0x140>)
 800169a:	f005 f90d 	bl	80068b8 <HAL_ADC_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80016a4:	f000 faae 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80016a8:	2308      	movs	r3, #8
 80016aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80016ac:	2305      	movs	r3, #5
 80016ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016b0:	463b      	mov	r3, r7
 80016b2:	4619      	mov	r1, r3
 80016b4:	4813      	ldr	r0, [pc, #76]	; (8001704 <MX_ADC1_Init+0x140>)
 80016b6:	f005 f8ff 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80016c0:	f000 faa0 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80016c4:	2309      	movs	r3, #9
 80016c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80016c8:	2306      	movs	r3, #6
 80016ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016cc:	463b      	mov	r3, r7
 80016ce:	4619      	mov	r1, r3
 80016d0:	480c      	ldr	r0, [pc, #48]	; (8001704 <MX_ADC1_Init+0x140>)
 80016d2:	f005 f8f1 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80016dc:	f000 fa92 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80016e0:	2312      	movs	r3, #18
 80016e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80016e4:	2307      	movs	r3, #7
 80016e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e8:	463b      	mov	r3, r7
 80016ea:	4619      	mov	r1, r3
 80016ec:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_ADC1_Init+0x140>)
 80016ee:	f005 f8e3 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80016f8:	f000 fa84 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	3710      	adds	r7, #16
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20001a94 	.word	0x20001a94
 8001708:	40012000 	.word	0x40012000
 800170c:	0f000001 	.word	0x0f000001

08001710 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001716:	463b      	mov	r3, r7
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001722:	4b44      	ldr	r3, [pc, #272]	; (8001834 <MX_ADC2_Init+0x124>)
 8001724:	4a44      	ldr	r2, [pc, #272]	; (8001838 <MX_ADC2_Init+0x128>)
 8001726:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001728:	4b42      	ldr	r3, [pc, #264]	; (8001834 <MX_ADC2_Init+0x124>)
 800172a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800172e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001730:	4b40      	ldr	r3, [pc, #256]	; (8001834 <MX_ADC2_Init+0x124>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001736:	4b3f      	ldr	r3, [pc, #252]	; (8001834 <MX_ADC2_Init+0x124>)
 8001738:	2201      	movs	r2, #1
 800173a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800173c:	4b3d      	ldr	r3, [pc, #244]	; (8001834 <MX_ADC2_Init+0x124>)
 800173e:	2201      	movs	r2, #1
 8001740:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001742:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <MX_ADC2_Init+0x124>)
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800174a:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <MX_ADC2_Init+0x124>)
 800174c:	2200      	movs	r2, #0
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001750:	4b38      	ldr	r3, [pc, #224]	; (8001834 <MX_ADC2_Init+0x124>)
 8001752:	4a3a      	ldr	r2, [pc, #232]	; (800183c <MX_ADC2_Init+0x12c>)
 8001754:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001756:	4b37      	ldr	r3, [pc, #220]	; (8001834 <MX_ADC2_Init+0x124>)
 8001758:	2200      	movs	r2, #0
 800175a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 800175c:	4b35      	ldr	r3, [pc, #212]	; (8001834 <MX_ADC2_Init+0x124>)
 800175e:	2206      	movs	r2, #6
 8001760:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001762:	4b34      	ldr	r3, [pc, #208]	; (8001834 <MX_ADC2_Init+0x124>)
 8001764:	2201      	movs	r2, #1
 8001766:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800176a:	4b32      	ldr	r3, [pc, #200]	; (8001834 <MX_ADC2_Init+0x124>)
 800176c:	2201      	movs	r2, #1
 800176e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001770:	4830      	ldr	r0, [pc, #192]	; (8001834 <MX_ADC2_Init+0x124>)
 8001772:	f004 ff2f 	bl	80065d4 <HAL_ADC_Init>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800177c:	f000 fa42 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001784:	2301      	movs	r3, #1
 8001786:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001788:	2307      	movs	r3, #7
 800178a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800178c:	463b      	mov	r3, r7
 800178e:	4619      	mov	r1, r3
 8001790:	4828      	ldr	r0, [pc, #160]	; (8001834 <MX_ADC2_Init+0x124>)
 8001792:	f005 f891 	bl	80068b8 <HAL_ADC_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800179c:	f000 fa32 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017a4:	2302      	movs	r3, #2
 80017a6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017a8:	463b      	mov	r3, r7
 80017aa:	4619      	mov	r1, r3
 80017ac:	4821      	ldr	r0, [pc, #132]	; (8001834 <MX_ADC2_Init+0x124>)
 80017ae:	f005 f883 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80017b8:	f000 fa24 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80017bc:	2302      	movs	r3, #2
 80017be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80017c0:	2303      	movs	r3, #3
 80017c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017c4:	463b      	mov	r3, r7
 80017c6:	4619      	mov	r1, r3
 80017c8:	481a      	ldr	r0, [pc, #104]	; (8001834 <MX_ADC2_Init+0x124>)
 80017ca:	f005 f875 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80017d4:	f000 fa16 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80017d8:	2303      	movs	r3, #3
 80017da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80017dc:	2304      	movs	r3, #4
 80017de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017e0:	463b      	mov	r3, r7
 80017e2:	4619      	mov	r1, r3
 80017e4:	4813      	ldr	r0, [pc, #76]	; (8001834 <MX_ADC2_Init+0x124>)
 80017e6:	f005 f867 	bl	80068b8 <HAL_ADC_ConfigChannel>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80017f0:	f000 fa08 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80017f4:	2304      	movs	r3, #4
 80017f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80017f8:	2305      	movs	r3, #5
 80017fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017fc:	463b      	mov	r3, r7
 80017fe:	4619      	mov	r1, r3
 8001800:	480c      	ldr	r0, [pc, #48]	; (8001834 <MX_ADC2_Init+0x124>)
 8001802:	f005 f859 	bl	80068b8 <HAL_ADC_ConfigChannel>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800180c:	f000 f9fa 	bl	8001c04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001810:	2305      	movs	r3, #5
 8001812:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001814:	2306      	movs	r3, #6
 8001816:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001818:	463b      	mov	r3, r7
 800181a:	4619      	mov	r1, r3
 800181c:	4805      	ldr	r0, [pc, #20]	; (8001834 <MX_ADC2_Init+0x124>)
 800181e:	f005 f84b 	bl	80068b8 <HAL_ADC_ConfigChannel>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001828:	f000 f9ec 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20000720 	.word	0x20000720
 8001838:	40012100 	.word	0x40012100
 800183c:	0f000001 	.word	0x0f000001

08001840 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001844:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001846:	4a18      	ldr	r2, [pc, #96]	; (80018a8 <MX_CAN1_Init+0x68>)
 8001848:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 800184a:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_CAN1_Init+0x64>)
 800184c:	2205      	movs	r2, #5
 800184e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001858:	2200      	movs	r2, #0
 800185a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_CAN1_Init+0x64>)
 800185e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001862:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001866:	2200      	movs	r2, #0
 8001868:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_CAN1_Init+0x64>)
 800186c:	2200      	movs	r2, #0
 800186e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001872:	2200      	movs	r2, #0
 8001874:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001878:	2200      	movs	r2, #0
 800187a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_CAN1_Init+0x64>)
 800187e:	2200      	movs	r2, #0
 8001880:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_CAN1_Init+0x64>)
 800188a:	2200      	movs	r2, #0
 800188c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_CAN1_Init+0x64>)
 8001890:	f005 fac2 	bl	8006e18 <HAL_CAN_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800189a:	f000 f9b3 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20002d2c 	.word	0x20002d2c
 80018a8:	40006400 	.word	0x40006400

080018ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b0:	4b12      	ldr	r3, [pc, #72]	; (80018fc <MX_I2C1_Init+0x50>)
 80018b2:	4a13      	ldr	r2, [pc, #76]	; (8001900 <MX_I2C1_Init+0x54>)
 80018b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80018b6:	4b11      	ldr	r3, [pc, #68]	; (80018fc <MX_I2C1_Init+0x50>)
 80018b8:	4a12      	ldr	r2, [pc, #72]	; (8001904 <MX_I2C1_Init+0x58>)
 80018ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018bc:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_I2C1_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018c2:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <MX_I2C1_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <MX_I2C1_Init+0x50>)
 80018ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d0:	4b0a      	ldr	r3, [pc, #40]	; (80018fc <MX_I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <MX_I2C1_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <MX_I2C1_Init+0x50>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018e2:	4b06      	ldr	r3, [pc, #24]	; (80018fc <MX_I2C1_Init+0x50>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018e8:	4804      	ldr	r0, [pc, #16]	; (80018fc <MX_I2C1_Init+0x50>)
 80018ea:	f006 ffd5 	bl	8008898 <HAL_I2C_Init>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018f4:	f000 f986 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018f8:	bf00      	nop
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000768 	.word	0x20000768
 8001900:	40005400 	.word	0x40005400
 8001904:	00061a80 	.word	0x00061a80

08001908 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <MX_IWDG_Init+0x2c>)
 800190e:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <MX_IWDG_Init+0x30>)
 8001910:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <MX_IWDG_Init+0x2c>)
 8001914:	2206      	movs	r2, #6
 8001916:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 59;
 8001918:	4b06      	ldr	r3, [pc, #24]	; (8001934 <MX_IWDG_Init+0x2c>)
 800191a:	223b      	movs	r2, #59	; 0x3b
 800191c:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 800191e:	4805      	ldr	r0, [pc, #20]	; (8001934 <MX_IWDG_Init+0x2c>)
 8001920:	f007 ff4f 	bl	80097c2 <HAL_IWDG_Init>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_IWDG_Init+0x26>
  {
    Error_Handler();
 800192a:	f000 f96b 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200007c0 	.word	0x200007c0
 8001938:	40003000 	.word	0x40003000

0800193c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001942:	1d3b      	adds	r3, r7, #4
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001950:	2300      	movs	r3, #0
 8001952:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001954:	4b0f      	ldr	r3, [pc, #60]	; (8001994 <MX_RTC_Init+0x58>)
 8001956:	4a10      	ldr	r2, [pc, #64]	; (8001998 <MX_RTC_Init+0x5c>)
 8001958:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800195a:	4b0e      	ldr	r3, [pc, #56]	; (8001994 <MX_RTC_Init+0x58>)
 800195c:	2200      	movs	r2, #0
 800195e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001960:	4b0c      	ldr	r3, [pc, #48]	; (8001994 <MX_RTC_Init+0x58>)
 8001962:	227f      	movs	r2, #127	; 0x7f
 8001964:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <MX_RTC_Init+0x58>)
 8001968:	22ff      	movs	r2, #255	; 0xff
 800196a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800196c:	4b09      	ldr	r3, [pc, #36]	; (8001994 <MX_RTC_Init+0x58>)
 800196e:	2200      	movs	r2, #0
 8001970:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001972:	4b08      	ldr	r3, [pc, #32]	; (8001994 <MX_RTC_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001978:	4b06      	ldr	r3, [pc, #24]	; (8001994 <MX_RTC_Init+0x58>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_RTC_Init+0x58>)
 8001980:	f00a fa3e 	bl	800be00 <HAL_RTC_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800198a:	f000 f93b 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20001b44 	.word	0x20001b44
 8001998:	40002800 	.word	0x40002800

0800199c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019a2:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <MX_SDIO_SD_Init+0x3c>)
 80019a4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019be:	4b05      	ldr	r3, [pc, #20]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <MX_SDIO_SD_Init+0x38>)
 80019c6:	2202      	movs	r2, #2
 80019c8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr
 80019d4:	20001bd4 	.word	0x20001bd4
 80019d8:	40012c00 	.word	0x40012c00

080019dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e2:	463b      	mov	r3, r7
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80019ea:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <MX_TIM7_Init+0x64>)
 80019ec:	4a15      	ldr	r2, [pc, #84]	; (8001a44 <MX_TIM7_Init+0x68>)
 80019ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_TIM7_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <MX_TIM7_Init+0x64>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_TIM7_Init+0x64>)
 80019fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a02:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_TIM7_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_TIM7_Init+0x64>)
 8001a0c:	f00b fed9 	bl	800d7c2 <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a16:	f000 f8f5 	bl	8001c04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a22:	463b      	mov	r3, r7
 8001a24:	4619      	mov	r1, r3
 8001a26:	4806      	ldr	r0, [pc, #24]	; (8001a40 <MX_TIM7_Init+0x64>)
 8001a28:	f00c f95a 	bl	800dce0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a32:	f000 f8e7 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20002dcc 	.word	0x20002dcc
 8001a44:	40001400 	.word	0x40001400

08001a48 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	607b      	str	r3, [r7, #4]
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <MX_DMA_Init+0x6c>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a17      	ldr	r2, [pc, #92]	; (8001ab4 <MX_DMA_Init+0x6c>)
 8001a58:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <MX_DMA_Init+0x6c>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a66:	607b      	str	r3, [r7, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2102      	movs	r1, #2
 8001a6e:	2038      	movs	r0, #56	; 0x38
 8001a70:	f006 f945 	bl	8007cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a74:	2038      	movs	r0, #56	; 0x38
 8001a76:	f006 f95e 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2102      	movs	r1, #2
 8001a7e:	203a      	movs	r0, #58	; 0x3a
 8001a80:	f006 f93d 	bl	8007cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a84:	203a      	movs	r0, #58	; 0x3a
 8001a86:	f006 f956 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	203b      	movs	r0, #59	; 0x3b
 8001a90:	f006 f935 	bl	8007cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001a94:	203b      	movs	r0, #59	; 0x3b
 8001a96:	f006 f94e 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2045      	movs	r0, #69	; 0x45
 8001aa0:	f006 f92d 	bl	8007cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001aa4:	2045      	movs	r0, #69	; 0x45
 8001aa6:	f006 f946 	bl	8007d36 <HAL_NVIC_EnableIRQ>

}
 8001aaa:	bf00      	nop
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	; 0x28
 8001abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abe:	f107 0314 	add.w	r3, r7, #20
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	601a      	str	r2, [r3, #0]
 8001ac6:	605a      	str	r2, [r3, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	60da      	str	r2, [r3, #12]
 8001acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b49      	ldr	r3, [pc, #292]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b46      	ldr	r3, [pc, #280]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b42      	ldr	r3, [pc, #264]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af2:	4a41      	ldr	r2, [pc, #260]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001af8:	6313      	str	r3, [r2, #48]	; 0x30
 8001afa:	4b3f      	ldr	r3, [pc, #252]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b3b      	ldr	r3, [pc, #236]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0e:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b10:	f043 0301 	orr.w	r3, r3, #1
 8001b14:	6313      	str	r3, [r2, #48]	; 0x30
 8001b16:	4b38      	ldr	r3, [pc, #224]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	4a33      	ldr	r2, [pc, #204]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b2c:	f043 0302 	orr.w	r3, r3, #2
 8001b30:	6313      	str	r3, [r2, #48]	; 0x30
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b36:	f003 0302 	and.w	r3, r3, #2
 8001b3a:	607b      	str	r3, [r7, #4]
 8001b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	603b      	str	r3, [r7, #0]
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b46:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b48:	f043 0308 	orr.w	r3, r3, #8
 8001b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <MX_GPIO_Init+0x140>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	210f      	movs	r1, #15
 8001b5e:	4827      	ldr	r0, [pc, #156]	; (8001bfc <MX_GPIO_Init+0x144>)
 8001b60:	f006 fe4e 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001b64:	2200      	movs	r2, #0
 8001b66:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b6a:	4825      	ldr	r0, [pc, #148]	; (8001c00 <MX_GPIO_Init+0x148>)
 8001b6c:	f006 fe48 	bl	8008800 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001b70:	230f      	movs	r3, #15
 8001b72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b74:	2301      	movs	r3, #1
 8001b76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	4619      	mov	r1, r3
 8001b86:	481d      	ldr	r0, [pc, #116]	; (8001bfc <MX_GPIO_Init+0x144>)
 8001b88:	f006 fc8e 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001b8c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b92:	2301      	movs	r3, #1
 8001b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4816      	ldr	r0, [pc, #88]	; (8001c00 <MX_GPIO_Init+0x148>)
 8001ba6:	f006 fc7f 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001baa:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001bb0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bba:	f107 0314 	add.w	r3, r7, #20
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	480f      	ldr	r0, [pc, #60]	; (8001c00 <MX_GPIO_Init+0x148>)
 8001bc2:	f006 fc71 	bl	80084a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001bc6:	2380      	movs	r3, #128	; 0x80
 8001bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4808      	ldr	r0, [pc, #32]	; (8001bfc <MX_GPIO_Init+0x144>)
 8001bda:	f006 fc65 	bl	80084a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2101      	movs	r1, #1
 8001be2:	2028      	movs	r0, #40	; 0x28
 8001be4:	f006 f88b 	bl	8007cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001be8:	2028      	movs	r0, #40	; 0x28
 8001bea:	f006 f8a4 	bl	8007d36 <HAL_NVIC_EnableIRQ>

}
 8001bee:	bf00      	nop
 8001bf0:	3728      	adds	r7, #40	; 0x28
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020400 	.word	0x40020400

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <Error_Handler+0x8>
	...

08001c10 <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	603a      	str	r2, [r7, #0]
 8001c1a:	80fb      	strh	r3, [r7, #6]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001c20:	88fb      	ldrh	r3, [r7, #6]
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	3b01      	subs	r3, #1
 8001c28:	2b1d      	cmp	r3, #29
 8001c2a:	f200 81f9 	bhi.w	8002020 <Process_Data+0x410>
 8001c2e:	a201      	add	r2, pc, #4	; (adr r2, 8001c34 <Process_Data+0x24>)
 8001c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c34:	08001cad 	.word	0x08001cad
 8001c38:	08001cdd 	.word	0x08001cdd
 8001c3c:	08001d0d 	.word	0x08001d0d
 8001c40:	08001d3d 	.word	0x08001d3d
 8001c44:	08001d6d 	.word	0x08001d6d
 8001c48:	08001d9d 	.word	0x08001d9d
 8001c4c:	08001dcd 	.word	0x08001dcd
 8001c50:	08001dfd 	.word	0x08001dfd
 8001c54:	08001e2d 	.word	0x08001e2d
 8001c58:	08001e5d 	.word	0x08001e5d
 8001c5c:	08001e8d 	.word	0x08001e8d
 8001c60:	08001ebd 	.word	0x08001ebd
 8001c64:	08001eed 	.word	0x08001eed
 8001c68:	08001f1d 	.word	0x08001f1d
 8001c6c:	08001f4d 	.word	0x08001f4d
 8001c70:	08001f7d 	.word	0x08001f7d
 8001c74:	08001fb1 	.word	0x08001fb1
 8001c78:	08001fb9 	.word	0x08001fb9
 8001c7c:	08001fc1 	.word	0x08001fc1
 8001c80:	08001fc9 	.word	0x08001fc9
 8001c84:	08001fd1 	.word	0x08001fd1
 8001c88:	08001fd9 	.word	0x08001fd9
 8001c8c:	08001fe1 	.word	0x08001fe1
 8001c90:	08001fe9 	.word	0x08001fe9
 8001c94:	08001ff1 	.word	0x08001ff1
 8001c98:	08001ff9 	.word	0x08001ff9
 8001c9c:	08002001 	.word	0x08002001
 8001ca0:	08002009 	.word	0x08002009
 8001ca4:	08002011 	.word	0x08002011
 8001ca8:	08002019 	.word	0x08002019
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	88ba      	ldrh	r2, [r7, #4]
 8001cb0:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001cb2:	88fb      	ldrh	r3, [r7, #6]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	885b      	ldrh	r3, [r3, #2]
 8001cc0:	f043 0301 	orr.w	r3, r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001cca:	e1aa      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	885b      	ldrh	r3, [r3, #2]
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	805a      	strh	r2, [r3, #2]
			break;
 8001cda:	e1a2      	b.n	8002022 <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	88ba      	ldrh	r2, [r7, #4]
 8001ce0:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d007      	beq.n	8001cfc <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	885b      	ldrh	r3, [r3, #2]
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001cfa:	e192      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	885b      	ldrh	r3, [r3, #2]
 8001d00:	f023 0302 	bic.w	r3, r3, #2
 8001d04:	b29a      	uxth	r2, r3
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	805a      	strh	r2, [r3, #2]
			break;
 8001d0a:	e18a      	b.n	8002022 <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	88ba      	ldrh	r2, [r7, #4]
 8001d10:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	f003 0301 	and.w	r3, r3, #1
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d007      	beq.n	8001d2c <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	885b      	ldrh	r3, [r3, #2]
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001d2a:	e17a      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	885b      	ldrh	r3, [r3, #2]
 8001d30:	f023 0304 	bic.w	r3, r3, #4
 8001d34:	b29a      	uxth	r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	805a      	strh	r2, [r3, #2]
			break;
 8001d3a:	e172      	b.n	8002022 <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	88ba      	ldrh	r2, [r7, #4]
 8001d40:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	885b      	ldrh	r3, [r3, #2]
 8001d50:	f043 0308 	orr.w	r3, r3, #8
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001d5a:	e162      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	885b      	ldrh	r3, [r3, #2]
 8001d60:	f023 0308 	bic.w	r3, r3, #8
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	805a      	strh	r2, [r3, #2]
			break;
 8001d6a:	e15a      	b.n	8002022 <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	88ba      	ldrh	r2, [r7, #4]
 8001d70:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001d72:	88fb      	ldrh	r3, [r7, #6]
 8001d74:	f003 0301 	and.w	r3, r3, #1
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	885b      	ldrh	r3, [r3, #2]
 8001d80:	f043 0310 	orr.w	r3, r3, #16
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001d8a:	e14a      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	885b      	ldrh	r3, [r3, #2]
 8001d90:	f023 0310 	bic.w	r3, r3, #16
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	805a      	strh	r2, [r3, #2]
			break;
 8001d9a:	e142      	b.n	8002022 <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	88ba      	ldrh	r2, [r7, #4]
 8001da0:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	f003 0301 	and.w	r3, r3, #1
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d007      	beq.n	8001dbc <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	885b      	ldrh	r3, [r3, #2]
 8001db0:	f043 0320 	orr.w	r3, r3, #32
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001dba:	e132      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	885b      	ldrh	r3, [r3, #2]
 8001dc0:	f023 0320 	bic.w	r3, r3, #32
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	805a      	strh	r2, [r3, #2]
			break;
 8001dca:	e12a      	b.n	8002022 <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	88ba      	ldrh	r2, [r7, #4]
 8001dd0:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001dd2:	88fb      	ldrh	r3, [r7, #6]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d007      	beq.n	8001dec <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	885b      	ldrh	r3, [r3, #2]
 8001de0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001dea:	e11a      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	885b      	ldrh	r3, [r3, #2]
 8001df0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	805a      	strh	r2, [r3, #2]
			break;
 8001dfa:	e112      	b.n	8002022 <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	88ba      	ldrh	r2, [r7, #4]
 8001e00:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001e02:	88fb      	ldrh	r3, [r7, #6]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	885b      	ldrh	r3, [r3, #2]
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001e1a:	e102      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	885b      	ldrh	r3, [r3, #2]
 8001e20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	805a      	strh	r2, [r3, #2]
			break;
 8001e2a:	e0fa      	b.n	8002022 <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	88ba      	ldrh	r2, [r7, #4]
 8001e30:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d007      	beq.n	8001e4c <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	885b      	ldrh	r3, [r3, #2]
 8001e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001e4a:	e0ea      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	885b      	ldrh	r3, [r3, #2]
 8001e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	805a      	strh	r2, [r3, #2]
			break;
 8001e5a:	e0e2      	b.n	8002022 <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	88ba      	ldrh	r2, [r7, #4]
 8001e60:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	f003 0301 	and.w	r3, r3, #1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	885b      	ldrh	r3, [r3, #2]
 8001e70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001e7a:	e0d2      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	885b      	ldrh	r3, [r3, #2]
 8001e80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	805a      	strh	r2, [r3, #2]
			break;
 8001e8a:	e0ca      	b.n	8002022 <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	88ba      	ldrh	r2, [r7, #4]
 8001e90:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001e92:	88fb      	ldrh	r3, [r7, #6]
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d007      	beq.n	8001eac <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	885b      	ldrh	r3, [r3, #2]
 8001ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001eaa:	e0ba      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	885b      	ldrh	r3, [r3, #2]
 8001eb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	805a      	strh	r2, [r3, #2]
			break;
 8001eba:	e0b2      	b.n	8002022 <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	88ba      	ldrh	r2, [r7, #4]
 8001ec0:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001ec2:	88fb      	ldrh	r3, [r7, #6]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	885b      	ldrh	r3, [r3, #2]
 8001ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001eda:	e0a2      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	885b      	ldrh	r3, [r3, #2]
 8001ee0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	805a      	strh	r2, [r3, #2]
			break;
 8001eea:	e09a      	b.n	8002022 <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	88ba      	ldrh	r2, [r7, #4]
 8001ef0:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001ef2:	88fb      	ldrh	r3, [r7, #6]
 8001ef4:	f003 0301 	and.w	r3, r3, #1
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d007      	beq.n	8001f0c <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	885b      	ldrh	r3, [r3, #2]
 8001f00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001f0a:	e08a      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	885b      	ldrh	r3, [r3, #2]
 8001f10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	805a      	strh	r2, [r3, #2]
			break;
 8001f1a:	e082      	b.n	8002022 <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	88ba      	ldrh	r2, [r7, #4]
 8001f20:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	f003 0301 	and.w	r3, r3, #1
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d007      	beq.n	8001f3c <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	885b      	ldrh	r3, [r3, #2]
 8001f30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f34:	b29a      	uxth	r2, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001f3a:	e072      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	885b      	ldrh	r3, [r3, #2]
 8001f40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	805a      	strh	r2, [r3, #2]
			break;
 8001f4a:	e06a      	b.n	8002022 <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	88ba      	ldrh	r2, [r7, #4]
 8001f50:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d007      	beq.n	8001f6c <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	885b      	ldrh	r3, [r3, #2]
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001f6a:	e05a      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	885b      	ldrh	r3, [r3, #2]
 8001f70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	805a      	strh	r2, [r3, #2]
			break;
 8001f7a:	e052      	b.n	8002022 <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	88ba      	ldrh	r2, [r7, #4]
 8001f80:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d009      	beq.n	8001fa0 <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001f9e:	e040      	b.n	8002022 <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	885b      	ldrh	r3, [r3, #2]
 8001fa4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fa8:	b29a      	uxth	r2, r3
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	805a      	strh	r2, [r3, #2]
			break;
 8001fae:	e038      	b.n	8002022 <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	88ba      	ldrh	r2, [r7, #4]
 8001fb4:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001fb6:	e034      	b.n	8002022 <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	88ba      	ldrh	r2, [r7, #4]
 8001fbc:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001fbe:	e030      	b.n	8002022 <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	88ba      	ldrh	r2, [r7, #4]
 8001fc4:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001fc6:	e02c      	b.n	8002022 <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	88ba      	ldrh	r2, [r7, #4]
 8001fcc:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8001fce:	e028      	b.n	8002022 <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	88ba      	ldrh	r2, [r7, #4]
 8001fd4:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8001fd6:	e024      	b.n	8002022 <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	88ba      	ldrh	r2, [r7, #4]
 8001fdc:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001fde:	e020      	b.n	8002022 <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	88ba      	ldrh	r2, [r7, #4]
 8001fe4:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001fe6:	e01c      	b.n	8002022 <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	88ba      	ldrh	r2, [r7, #4]
 8001fec:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8001fee:	e018      	b.n	8002022 <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	88ba      	ldrh	r2, [r7, #4]
 8001ff4:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 8001ff6:	e014      	b.n	8002022 <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	88ba      	ldrh	r2, [r7, #4]
 8001ffc:	801a      	strh	r2, [r3, #0]
			break;
 8001ffe:	e010      	b.n	8002022 <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	88ba      	ldrh	r2, [r7, #4]
 8002004:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8002006:	e00c      	b.n	8002022 <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	88ba      	ldrh	r2, [r7, #4]
 800200c:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 800200e:	e008      	b.n	8002022 <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	88ba      	ldrh	r2, [r7, #4]
 8002014:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8002016:	e004      	b.n	8002022 <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	88ba      	ldrh	r2, [r7, #4]
 800201c:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800201e:	e000      	b.n	8002022 <Process_Data+0x412>

		default:
			break;
 8002020:	bf00      	nop
	}

	return;
 8002022:	bf00      	nop
}
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop

08002030 <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b090      	sub	sp, #64	; 0x40
 8002034:	af00      	add	r7, sp, #0
 8002036:	60f8      	str	r0, [r7, #12]
 8002038:	60b9      	str	r1, [r7, #8]
 800203a:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <PDM_CAN_FilterConfig+0x5c>)
 800203e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002040:	4b13      	ldr	r3, [pc, #76]	; (8002090 <PDM_CAN_FilterConfig+0x60>)
 8002042:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002044:	2300      	movs	r3, #0
 8002046:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002048:	2301      	movs	r3, #1
 800204a:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 800204c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204e:	0b5b      	lsrs	r3, r3, #13
 8002050:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 8002052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	b29b      	uxth	r3, r3
 8002058:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 800205a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800205c:	0b5b      	lsrs	r3, r3, #13
 800205e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 8002060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	b29b      	uxth	r3, r3
 8002066:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 8002070:	2301      	movs	r3, #1
 8002072:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4619      	mov	r1, r3
 800207a:	68f8      	ldr	r0, [r7, #12]
 800207c:	f004 ffc8 	bl	8007010 <HAL_CAN_ConfigFilter>
 8002080:	4603      	mov	r3, r0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3740      	adds	r7, #64	; 0x40
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	1e35c000 	.word	0x1e35c000
 8002090:	1ffff000 	.word	0x1ffff000

08002094 <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(uint32_t data_id, uint8_t data_length, uint8_t* data_buffer, PDM_Data* data_struct)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	60f8      	str	r0, [r7, #12]
 800209c:	607a      	str	r2, [r7, #4]
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	460b      	mov	r3, r1
 80020a2:	72fb      	strb	r3, [r7, #11]
	uint16_t id = 0, data = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	82fb      	strh	r3, [r7, #22]
 80020a8:	2300      	movs	r3, #0
 80020aa:	82bb      	strh	r3, [r7, #20]

	if((data_id & 0x1FFFF000) != 0x1E35C000)
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4b26      	ldr	r3, [pc, #152]	; (8002148 <PDM_CAN_Process_Data+0xb4>)
 80020b0:	4013      	ands	r3, r2
 80020b2:	4a26      	ldr	r2, [pc, #152]	; (800214c <PDM_CAN_Process_Data+0xb8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d142      	bne.n	800213e <PDM_CAN_Process_Data+0xaa>
		return;

	id  = data_buffer[0] << 8;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	b29b      	uxth	r3, r3
 80020be:	021b      	lsls	r3, r3, #8
 80020c0:	82fb      	strh	r3, [r7, #22]
	id |= data_buffer[1] & 0xff;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3301      	adds	r3, #1
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	8afb      	ldrh	r3, [r7, #22]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	82fb      	strh	r3, [r7, #22]
	data  = data_buffer[2] << 8;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3302      	adds	r3, #2
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	021b      	lsls	r3, r3, #8
 80020da:	82bb      	strh	r3, [r7, #20]
	data |= data_buffer[3] & 0xff;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3303      	adds	r3, #3
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	8abb      	ldrh	r3, [r7, #20]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	82bb      	strh	r3, [r7, #20]

	Process_Data(id, data, data_struct);
 80020ea:	8ab9      	ldrh	r1, [r7, #20]
 80020ec:	8afb      	ldrh	r3, [r7, #22]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fd8d 	bl	8001c10 <Process_Data>

	if(data_length == 8)
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d121      	bne.n	8002140 <PDM_CAN_Process_Data+0xac>
	{
		id  = data_buffer[4] << 8;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	3304      	adds	r3, #4
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	82fb      	strh	r3, [r7, #22]
		id |= data_buffer[5] & 0xff;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3305      	adds	r3, #5
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b29a      	uxth	r2, r3
 8002110:	8afb      	ldrh	r3, [r7, #22]
 8002112:	4313      	orrs	r3, r2
 8002114:	82fb      	strh	r3, [r7, #22]
		data  = data_buffer[6] << 8;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3306      	adds	r3, #6
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	b29b      	uxth	r3, r3
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	82bb      	strh	r3, [r7, #20]
		data |= data_buffer[7] & 0xff;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3307      	adds	r3, #7
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	b29a      	uxth	r2, r3
 800212a:	8abb      	ldrh	r3, [r7, #20]
 800212c:	4313      	orrs	r3, r2
 800212e:	82bb      	strh	r3, [r7, #20]

		Process_Data(id, data, data_struct);
 8002130:	8ab9      	ldrh	r1, [r7, #20]
 8002132:	8afb      	ldrh	r3, [r7, #22]
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fd6a 	bl	8001c10 <Process_Data>
 800213c:	e000      	b.n	8002140 <PDM_CAN_Process_Data+0xac>
		return;
 800213e:	bf00      	nop
	}
}
 8002140:	3718      	adds	r7, #24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	1ffff000 	.word	0x1ffff000
 800214c:	1e35c000 	.word	0x1e35c000

08002150 <Verify_Data>:
 */

#include "principal.h"

static void Verify_Data()
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
	Verify = 0;
 8002156:	4b2b      	ldr	r3, [pc, #172]	; (8002204 <Verify_Data+0xb4>)
 8002158:	2200      	movs	r2, #0
 800215a:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 800215c:	2300      	movs	r3, #0
 800215e:	71fb      	strb	r3, [r7, #7]
 8002160:	e015      	b.n	800218e <Verify_Data+0x3e>
		if(ADC_Buffer[i] > ADC_THRESHOLD)
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	4a28      	ldr	r2, [pc, #160]	; (8002208 <Verify_Data+0xb8>)
 8002166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800216a:	2b1e      	cmp	r3, #30
 800216c:	d90c      	bls.n	8002188 <Verify_Data+0x38>
			Verify |= (1 << i);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	2201      	movs	r2, #1
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	b21a      	sxth	r2, r3
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <Verify_Data+0xb4>)
 800217a:	881b      	ldrh	r3, [r3, #0]
 800217c:	b21b      	sxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	b21b      	sxth	r3, r3
 8002182:	b29a      	uxth	r2, r3
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <Verify_Data+0xb4>)
 8002186:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	3301      	adds	r3, #1
 800218c:	71fb      	strb	r3, [r7, #7]
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2b0c      	cmp	r3, #12
 8002192:	d9e6      	bls.n	8002162 <Verify_Data+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 8002194:	2101      	movs	r1, #1
 8002196:	481d      	ldr	r0, [pc, #116]	; (800220c <Verify_Data+0xbc>)
 8002198:	f006 fb4b 	bl	8008832 <HAL_GPIO_TogglePin>

	if(Verify_Datalogger == 1)
 800219c:	4b1c      	ldr	r3, [pc, #112]	; (8002210 <Verify_Data+0xc0>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d105      	bne.n	80021b0 <Verify_Data+0x60>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 80021a4:	2201      	movs	r2, #1
 80021a6:	2102      	movs	r1, #2
 80021a8:	4818      	ldr	r0, [pc, #96]	; (800220c <Verify_Data+0xbc>)
 80021aa:	f006 fb29 	bl	8008800 <HAL_GPIO_WritePin>
 80021ae:	e004      	b.n	80021ba <Verify_Data+0x6a>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2102      	movs	r1, #2
 80021b4:	4815      	ldr	r0, [pc, #84]	; (800220c <Verify_Data+0xbc>)
 80021b6:	f006 fb23 	bl	8008800 <HAL_GPIO_WritePin>

	if((Verify_CAN & 1) == 1)
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <Verify_Data+0xc4>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d004      	beq.n	80021d0 <Verify_Data+0x80>
		HAL_GPIO_TogglePin(LED_CAN_TX);
 80021c6:	2104      	movs	r1, #4
 80021c8:	4810      	ldr	r0, [pc, #64]	; (800220c <Verify_Data+0xbc>)
 80021ca:	f006 fb32 	bl	8008832 <HAL_GPIO_TogglePin>
 80021ce:	e004      	b.n	80021da <Verify_Data+0x8a>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 80021d0:	2200      	movs	r2, #0
 80021d2:	2104      	movs	r1, #4
 80021d4:	480d      	ldr	r0, [pc, #52]	; (800220c <Verify_Data+0xbc>)
 80021d6:	f006 fb13 	bl	8008800 <HAL_GPIO_WritePin>

	if((Verify_CAN & 2) == 2)
 80021da:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <Verify_Data+0xc4>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <Verify_Data+0xa0>
		HAL_GPIO_TogglePin(LED_CAN_RX);
 80021e6:	2108      	movs	r1, #8
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <Verify_Data+0xbc>)
 80021ea:	f006 fb22 	bl	8008832 <HAL_GPIO_TogglePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
}
 80021ee:	e004      	b.n	80021fa <Verify_Data+0xaa>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 80021f0:	2200      	movs	r2, #0
 80021f2:	2108      	movs	r1, #8
 80021f4:	4805      	ldr	r0, [pc, #20]	; (800220c <Verify_Data+0xbc>)
 80021f6:	f006 fb03 	bl	8008800 <HAL_GPIO_WritePin>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20002e78 	.word	0x20002e78
 8002208:	20000704 	.word	0x20000704
 800220c:	40020800 	.word	0x40020800
 8002210:	20001a10 	.word	0x20001a10
 8002214:	20001a58 	.word	0x20001a58

08002218 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002220:	4b43      	ldr	r3, [pc, #268]	; (8002330 <Tx_Analog_1_4+0x118>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002226:	4b42      	ldr	r3, [pc, #264]	; (8002330 <Tx_Analog_1_4+0x118>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <Tx_Analog_1_4+0x118>)
 800222e:	2200      	movs	r2, #0
 8002230:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Analog_1_4;
 8002232:	4b3f      	ldr	r3, [pc, #252]	; (8002330 <Tx_Analog_1_4+0x118>)
 8002234:	2201      	movs	r2, #1
 8002236:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002238:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <Tx_Analog_1_4+0x118>)
 800223a:	2208      	movs	r2, #8
 800223c:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[0] >> 8;
 800223e:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	b29b      	uxth	r3, r3
 8002246:	b2da      	uxtb	r2, r3
 8002248:	4b3b      	ldr	r3, [pc, #236]	; (8002338 <Tx_Analog_1_4+0x120>)
 800224a:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[0] & 0xff;
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <Tx_Analog_1_4+0x11c>)
 800224e:	881b      	ldrh	r3, [r3, #0]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	4b39      	ldr	r3, [pc, #228]	; (8002338 <Tx_Analog_1_4+0x120>)
 8002254:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[1] >> 8;
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002258:	885b      	ldrh	r3, [r3, #2]
 800225a:	0a1b      	lsrs	r3, r3, #8
 800225c:	b29b      	uxth	r3, r3
 800225e:	b2da      	uxtb	r2, r3
 8002260:	4b35      	ldr	r3, [pc, #212]	; (8002338 <Tx_Analog_1_4+0x120>)
 8002262:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[1] & 0xff;
 8002264:	4b33      	ldr	r3, [pc, #204]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002266:	885b      	ldrh	r3, [r3, #2]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4b33      	ldr	r3, [pc, #204]	; (8002338 <Tx_Analog_1_4+0x120>)
 800226c:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[2] >> 8;
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002270:	889b      	ldrh	r3, [r3, #4]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29b      	uxth	r3, r3
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b2f      	ldr	r3, [pc, #188]	; (8002338 <Tx_Analog_1_4+0x120>)
 800227a:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[2] & 0xff;
 800227c:	4b2d      	ldr	r3, [pc, #180]	; (8002334 <Tx_Analog_1_4+0x11c>)
 800227e:	889b      	ldrh	r3, [r3, #4]
 8002280:	b2da      	uxtb	r2, r3
 8002282:	4b2d      	ldr	r3, [pc, #180]	; (8002338 <Tx_Analog_1_4+0x120>)
 8002284:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[3] >> 8;
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002288:	88db      	ldrh	r3, [r3, #6]
 800228a:	0a1b      	lsrs	r3, r3, #8
 800228c:	b29b      	uxth	r3, r3
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b29      	ldr	r3, [pc, #164]	; (8002338 <Tx_Analog_1_4+0x120>)
 8002292:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[3] & 0xff;
 8002294:	4b27      	ldr	r3, [pc, #156]	; (8002334 <Tx_Analog_1_4+0x11c>)
 8002296:	88db      	ldrh	r3, [r3, #6]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4b27      	ldr	r3, [pc, #156]	; (8002338 <Tx_Analog_1_4+0x120>)
 800229c:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 800229e:	4b27      	ldr	r3, [pc, #156]	; (800233c <Tx_Analog_1_4+0x124>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d108      	bne.n	80022b8 <Tx_Analog_1_4+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <Tx_Analog_1_4+0x118>)
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	4b21      	ldr	r3, [pc, #132]	; (8002330 <Tx_Analog_1_4+0x118>)
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	b2d9      	uxtb	r1, r3
 80022b0:	4b23      	ldr	r3, [pc, #140]	; (8002340 <Tx_Analog_1_4+0x128>)
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <Tx_Analog_1_4+0x120>)
 80022b4:	f003 fa5a 	bl	800576c <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_1_4] >= Per_CAN[Analog_1_4]) && (Per_CAN[Analog_1_4] != 0))
 80022b8:	4b22      	ldr	r3, [pc, #136]	; (8002344 <Tx_Analog_1_4+0x12c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a22      	ldr	r2, [pc, #136]	; (8002348 <Tx_Analog_1_4+0x130>)
 80022be:	8812      	ldrh	r2, [r2, #0]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d331      	bcc.n	8002328 <Tx_Analog_1_4+0x110>
 80022c4:	4b20      	ldr	r3, [pc, #128]	; (8002348 <Tx_Analog_1_4+0x130>)
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d02d      	beq.n	8002328 <Tx_Analog_1_4+0x110>
	{
		Acc_CAN[Analog_1_4] -= Per_CAN[Analog_1_4];
 80022cc:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <Tx_Analog_1_4+0x12c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <Tx_Analog_1_4+0x130>)
 80022d2:	8812      	ldrh	r2, [r2, #0]
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <Tx_Analog_1_4+0x12c>)
 80022d8:	6013      	str	r3, [r2, #0]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 80022da:	4b1c      	ldr	r3, [pc, #112]	; (800234c <Tx_Analog_1_4+0x134>)
 80022dc:	4a16      	ldr	r2, [pc, #88]	; (8002338 <Tx_Analog_1_4+0x120>)
 80022de:	4914      	ldr	r1, [pc, #80]	; (8002330 <Tx_Analog_1_4+0x118>)
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	f004 ffb9 	bl	8007258 <HAL_CAN_AddTxMessage>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d107      	bne.n	80022fc <Tx_Analog_1_4+0xe4>
			Verify_CAN |= 1;
 80022ec:	4b18      	ldr	r3, [pc, #96]	; (8002350 <Tx_Analog_1_4+0x138>)
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <Tx_Analog_1_4+0x138>)
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	e006      	b.n	800230a <Tx_Analog_1_4+0xf2>
		else
			Verify_CAN &= 0x02;
 80022fc:	4b14      	ldr	r3, [pc, #80]	; (8002350 <Tx_Analog_1_4+0x138>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <Tx_Analog_1_4+0x138>)
 8002308:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800230a:	2300      	movs	r3, #0
 800230c:	73fb      	strb	r3, [r7, #15]
 800230e:	e002      	b.n	8002316 <Tx_Analog_1_4+0xfe>
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f005 f879 	bl	800740e <HAL_CAN_GetTxMailboxesFreeLevel>
 800231c:	4603      	mov	r3, r0
 800231e:	2b03      	cmp	r3, #3
 8002320:	d002      	beq.n	8002328 <Tx_Analog_1_4+0x110>
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d9f3      	bls.n	8002310 <Tx_Analog_1_4+0xf8>
	}
}
 8002328:	bf00      	nop
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20002d98 	.word	0x20002d98
 8002334:	20000704 	.word	0x20000704
 8002338:	20001bc8 	.word	0x20001bc8
 800233c:	20001bd0 	.word	0x20001bd0
 8002340:	20001c84 	.word	0x20001c84
 8002344:	20002d54 	.word	0x20002d54
 8002348:	200006fc 	.word	0x200006fc
 800234c:	20001c58 	.word	0x20001c58
 8002350:	20001a58 	.word	0x20001a58

08002354 <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800235c:	4b43      	ldr	r3, [pc, #268]	; (800246c <Tx_Analog_5_8+0x118>)
 800235e:	2200      	movs	r2, #0
 8002360:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002362:	4b42      	ldr	r3, [pc, #264]	; (800246c <Tx_Analog_5_8+0x118>)
 8002364:	2200      	movs	r2, #0
 8002366:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 8002368:	4b40      	ldr	r3, [pc, #256]	; (800246c <Tx_Analog_5_8+0x118>)
 800236a:	2200      	movs	r2, #0
 800236c:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Analog_5_8;
 800236e:	4b3f      	ldr	r3, [pc, #252]	; (800246c <Tx_Analog_5_8+0x118>)
 8002370:	2202      	movs	r2, #2
 8002372:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002374:	4b3d      	ldr	r3, [pc, #244]	; (800246c <Tx_Analog_5_8+0x118>)
 8002376:	2208      	movs	r2, #8
 8002378:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[4] >> 8;
 800237a:	4b3d      	ldr	r3, [pc, #244]	; (8002470 <Tx_Analog_5_8+0x11c>)
 800237c:	891b      	ldrh	r3, [r3, #8]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29b      	uxth	r3, r3
 8002382:	b2da      	uxtb	r2, r3
 8002384:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <Tx_Analog_5_8+0x120>)
 8002386:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[4] & 0xff;
 8002388:	4b39      	ldr	r3, [pc, #228]	; (8002470 <Tx_Analog_5_8+0x11c>)
 800238a:	891b      	ldrh	r3, [r3, #8]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4b39      	ldr	r3, [pc, #228]	; (8002474 <Tx_Analog_5_8+0x120>)
 8002390:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[5] >> 8;
 8002392:	4b37      	ldr	r3, [pc, #220]	; (8002470 <Tx_Analog_5_8+0x11c>)
 8002394:	895b      	ldrh	r3, [r3, #10]
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	b29b      	uxth	r3, r3
 800239a:	b2da      	uxtb	r2, r3
 800239c:	4b35      	ldr	r3, [pc, #212]	; (8002474 <Tx_Analog_5_8+0x120>)
 800239e:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[5] & 0xff;
 80023a0:	4b33      	ldr	r3, [pc, #204]	; (8002470 <Tx_Analog_5_8+0x11c>)
 80023a2:	895b      	ldrh	r3, [r3, #10]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b33      	ldr	r3, [pc, #204]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023a8:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[6] >> 8;
 80023aa:	4b31      	ldr	r3, [pc, #196]	; (8002470 <Tx_Analog_5_8+0x11c>)
 80023ac:	899b      	ldrh	r3, [r3, #12]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023b6:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[6] & 0xff;
 80023b8:	4b2d      	ldr	r3, [pc, #180]	; (8002470 <Tx_Analog_5_8+0x11c>)
 80023ba:	899b      	ldrh	r3, [r3, #12]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	4b2d      	ldr	r3, [pc, #180]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023c0:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[7] >> 8;
 80023c2:	4b2b      	ldr	r3, [pc, #172]	; (8002470 <Tx_Analog_5_8+0x11c>)
 80023c4:	89db      	ldrh	r3, [r3, #14]
 80023c6:	0a1b      	lsrs	r3, r3, #8
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	4b29      	ldr	r3, [pc, #164]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023ce:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[7] & 0xff;
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <Tx_Analog_5_8+0x11c>)
 80023d2:	89db      	ldrh	r3, [r3, #14]
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	4b27      	ldr	r3, [pc, #156]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023d8:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <Tx_Analog_5_8+0x124>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d108      	bne.n	80023f4 <Tx_Analog_5_8+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80023e2:	4b22      	ldr	r3, [pc, #136]	; (800246c <Tx_Analog_5_8+0x118>)
 80023e4:	6818      	ldr	r0, [r3, #0]
 80023e6:	4b21      	ldr	r3, [pc, #132]	; (800246c <Tx_Analog_5_8+0x118>)
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	b2d9      	uxtb	r1, r3
 80023ec:	4b23      	ldr	r3, [pc, #140]	; (800247c <Tx_Analog_5_8+0x128>)
 80023ee:	4a21      	ldr	r2, [pc, #132]	; (8002474 <Tx_Analog_5_8+0x120>)
 80023f0:	f003 f9bc 	bl	800576c <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_5_8] >= Per_CAN[Analog_5_8]) && (Per_CAN[Analog_5_8] != 0))
 80023f4:	4b22      	ldr	r3, [pc, #136]	; (8002480 <Tx_Analog_5_8+0x12c>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	4a22      	ldr	r2, [pc, #136]	; (8002484 <Tx_Analog_5_8+0x130>)
 80023fa:	8852      	ldrh	r2, [r2, #2]
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d331      	bcc.n	8002464 <Tx_Analog_5_8+0x110>
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <Tx_Analog_5_8+0x130>)
 8002402:	885b      	ldrh	r3, [r3, #2]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d02d      	beq.n	8002464 <Tx_Analog_5_8+0x110>
	{
		Acc_CAN[Analog_5_8] -= Per_CAN[Analog_5_8];
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <Tx_Analog_5_8+0x12c>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <Tx_Analog_5_8+0x130>)
 800240e:	8852      	ldrh	r2, [r2, #2]
 8002410:	1a9b      	subs	r3, r3, r2
 8002412:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <Tx_Analog_5_8+0x12c>)
 8002414:	6053      	str	r3, [r2, #4]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002416:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <Tx_Analog_5_8+0x134>)
 8002418:	4a16      	ldr	r2, [pc, #88]	; (8002474 <Tx_Analog_5_8+0x120>)
 800241a:	4914      	ldr	r1, [pc, #80]	; (800246c <Tx_Analog_5_8+0x118>)
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f004 ff1b 	bl	8007258 <HAL_CAN_AddTxMessage>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <Tx_Analog_5_8+0xe4>
			Verify_CAN |= 1;
 8002428:	4b18      	ldr	r3, [pc, #96]	; (800248c <Tx_Analog_5_8+0x138>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	b2da      	uxtb	r2, r3
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <Tx_Analog_5_8+0x138>)
 8002434:	701a      	strb	r2, [r3, #0]
 8002436:	e006      	b.n	8002446 <Tx_Analog_5_8+0xf2>
		else
			Verify_CAN &= 0x02;
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <Tx_Analog_5_8+0x138>)
 800243a:	781b      	ldrb	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <Tx_Analog_5_8+0x138>)
 8002444:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002446:	2300      	movs	r3, #0
 8002448:	73fb      	strb	r3, [r7, #15]
 800244a:	e002      	b.n	8002452 <Tx_Analog_5_8+0xfe>
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	3301      	adds	r3, #1
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f004 ffdb 	bl	800740e <HAL_CAN_GetTxMailboxesFreeLevel>
 8002458:	4603      	mov	r3, r0
 800245a:	2b03      	cmp	r3, #3
 800245c:	d002      	beq.n	8002464 <Tx_Analog_5_8+0x110>
 800245e:	7bfb      	ldrb	r3, [r7, #15]
 8002460:	2b02      	cmp	r3, #2
 8002462:	d9f3      	bls.n	800244c <Tx_Analog_5_8+0xf8>
	}
}
 8002464:	bf00      	nop
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}
 800246c:	20002d98 	.word	0x20002d98
 8002470:	20000704 	.word	0x20000704
 8002474:	20001bc8 	.word	0x20001bc8
 8002478:	20001bd0 	.word	0x20001bd0
 800247c:	20001c84 	.word	0x20001c84
 8002480:	20002d54 	.word	0x20002d54
 8002484:	200006fc 	.word	0x200006fc
 8002488:	20001c58 	.word	0x20001c58
 800248c:	20001a58 	.word	0x20001a58

08002490 <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002498:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <Tx_Analog_9_12+0x118>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 800249e:	4b42      	ldr	r3, [pc, #264]	; (80025a8 <Tx_Analog_9_12+0x118>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80024a4:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <Tx_Analog_9_12+0x118>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Analog_9_12;
 80024aa:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <Tx_Analog_9_12+0x118>)
 80024ac:	2203      	movs	r2, #3
 80024ae:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 80024b0:	4b3d      	ldr	r3, [pc, #244]	; (80025a8 <Tx_Analog_9_12+0x118>)
 80024b2:	2208      	movs	r2, #8
 80024b4:	611a      	str	r2, [r3, #16]

	TxData[0] = ADC_Buffer[8] >> 8;
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024b8:	8a1b      	ldrh	r3, [r3, #16]
 80024ba:	0a1b      	lsrs	r3, r3, #8
 80024bc:	b29b      	uxth	r3, r3
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	4b3b      	ldr	r3, [pc, #236]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024c2:	701a      	strb	r2, [r3, #0]
	TxData[1] = ADC_Buffer[8] & 0xff;
 80024c4:	4b39      	ldr	r3, [pc, #228]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024c6:	8a1b      	ldrh	r3, [r3, #16]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	4b39      	ldr	r3, [pc, #228]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024cc:	705a      	strb	r2, [r3, #1]
	TxData[2] = ADC_Buffer[9] >> 8;
 80024ce:	4b37      	ldr	r3, [pc, #220]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024d0:	8a5b      	ldrh	r3, [r3, #18]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	4b35      	ldr	r3, [pc, #212]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024da:	709a      	strb	r2, [r3, #2]
	TxData[3] = ADC_Buffer[9] & 0xff;
 80024dc:	4b33      	ldr	r3, [pc, #204]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024de:	8a5b      	ldrh	r3, [r3, #18]
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024e4:	70da      	strb	r2, [r3, #3]
	TxData[4] = ADC_Buffer[10] >> 8;
 80024e6:	4b31      	ldr	r3, [pc, #196]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024e8:	8a9b      	ldrh	r3, [r3, #20]
 80024ea:	0a1b      	lsrs	r3, r3, #8
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	b2da      	uxtb	r2, r3
 80024f0:	4b2f      	ldr	r3, [pc, #188]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024f2:	711a      	strb	r2, [r3, #4]
	TxData[5] = ADC_Buffer[10] & 0xff;
 80024f4:	4b2d      	ldr	r3, [pc, #180]	; (80025ac <Tx_Analog_9_12+0x11c>)
 80024f6:	8a9b      	ldrh	r3, [r3, #20]
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b2d      	ldr	r3, [pc, #180]	; (80025b0 <Tx_Analog_9_12+0x120>)
 80024fc:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[11] >> 8;
 80024fe:	4b2b      	ldr	r3, [pc, #172]	; (80025ac <Tx_Analog_9_12+0x11c>)
 8002500:	8adb      	ldrh	r3, [r3, #22]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	b29b      	uxth	r3, r3
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b29      	ldr	r3, [pc, #164]	; (80025b0 <Tx_Analog_9_12+0x120>)
 800250a:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[11] & 0xff;
 800250c:	4b27      	ldr	r3, [pc, #156]	; (80025ac <Tx_Analog_9_12+0x11c>)
 800250e:	8adb      	ldrh	r3, [r3, #22]
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b27      	ldr	r3, [pc, #156]	; (80025b0 <Tx_Analog_9_12+0x120>)
 8002514:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 8002516:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <Tx_Analog_9_12+0x124>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <Tx_Analog_9_12+0xa0>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <Tx_Analog_9_12+0x118>)
 8002520:	6818      	ldr	r0, [r3, #0]
 8002522:	4b21      	ldr	r3, [pc, #132]	; (80025a8 <Tx_Analog_9_12+0x118>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	b2d9      	uxtb	r1, r3
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <Tx_Analog_9_12+0x128>)
 800252a:	4a21      	ldr	r2, [pc, #132]	; (80025b0 <Tx_Analog_9_12+0x120>)
 800252c:	f003 f91e 	bl	800576c <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[Analog_9_12] >= Per_CAN[Analog_9_12]) && (Per_CAN[Analog_9_12] != 0))
 8002530:	4b22      	ldr	r3, [pc, #136]	; (80025bc <Tx_Analog_9_12+0x12c>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	4a22      	ldr	r2, [pc, #136]	; (80025c0 <Tx_Analog_9_12+0x130>)
 8002536:	8892      	ldrh	r2, [r2, #4]
 8002538:	4293      	cmp	r3, r2
 800253a:	d331      	bcc.n	80025a0 <Tx_Analog_9_12+0x110>
 800253c:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <Tx_Analog_9_12+0x130>)
 800253e:	889b      	ldrh	r3, [r3, #4]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d02d      	beq.n	80025a0 <Tx_Analog_9_12+0x110>
	{
		Acc_CAN[Analog_9_12] -= Per_CAN[Analog_9_12];
 8002544:	4b1d      	ldr	r3, [pc, #116]	; (80025bc <Tx_Analog_9_12+0x12c>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	4a1d      	ldr	r2, [pc, #116]	; (80025c0 <Tx_Analog_9_12+0x130>)
 800254a:	8892      	ldrh	r2, [r2, #4]
 800254c:	1a9b      	subs	r3, r3, r2
 800254e:	4a1b      	ldr	r2, [pc, #108]	; (80025bc <Tx_Analog_9_12+0x12c>)
 8002550:	6093      	str	r3, [r2, #8]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002552:	4b1c      	ldr	r3, [pc, #112]	; (80025c4 <Tx_Analog_9_12+0x134>)
 8002554:	4a16      	ldr	r2, [pc, #88]	; (80025b0 <Tx_Analog_9_12+0x120>)
 8002556:	4914      	ldr	r1, [pc, #80]	; (80025a8 <Tx_Analog_9_12+0x118>)
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f004 fe7d 	bl	8007258 <HAL_CAN_AddTxMessage>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d107      	bne.n	8002574 <Tx_Analog_9_12+0xe4>
			Verify_CAN |= 1;
 8002564:	4b18      	ldr	r3, [pc, #96]	; (80025c8 <Tx_Analog_9_12+0x138>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	f043 0301 	orr.w	r3, r3, #1
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <Tx_Analog_9_12+0x138>)
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	e006      	b.n	8002582 <Tx_Analog_9_12+0xf2>
		else
			Verify_CAN &= 0x02;
 8002574:	4b14      	ldr	r3, [pc, #80]	; (80025c8 <Tx_Analog_9_12+0x138>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <Tx_Analog_9_12+0x138>)
 8002580:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002582:	2300      	movs	r3, #0
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e002      	b.n	800258e <Tx_Analog_9_12+0xfe>
 8002588:	7bfb      	ldrb	r3, [r7, #15]
 800258a:	3301      	adds	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f004 ff3d 	bl	800740e <HAL_CAN_GetTxMailboxesFreeLevel>
 8002594:	4603      	mov	r3, r0
 8002596:	2b03      	cmp	r3, #3
 8002598:	d002      	beq.n	80025a0 <Tx_Analog_9_12+0x110>
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d9f3      	bls.n	8002588 <Tx_Analog_9_12+0xf8>
	}
}
 80025a0:	bf00      	nop
 80025a2:	3710      	adds	r7, #16
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20002d98 	.word	0x20002d98
 80025ac:	20000704 	.word	0x20000704
 80025b0:	20001bc8 	.word	0x20001bc8
 80025b4:	20001bd0 	.word	0x20001bd0
 80025b8:	20001c84 	.word	0x20001c84
 80025bc:	20002d54 	.word	0x20002d54
 80025c0:	200006fc 	.word	0x200006fc
 80025c4:	20001c58 	.word	0x20001c58
 80025c8:	20001a58 	.word	0x20001a58

080025cc <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80025d4:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <Tx_RTC+0x100>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80025da:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <Tx_RTC+0x100>)
 80025dc:	2200      	movs	r2, #0
 80025de:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80025e0:	4b3a      	ldr	r3, [pc, #232]	; (80026cc <Tx_RTC+0x100>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + RTC_Msg;
 80025e6:	4b39      	ldr	r3, [pc, #228]	; (80026cc <Tx_RTC+0x100>)
 80025e8:	2204      	movs	r2, #4
 80025ea:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 80025ec:	4b37      	ldr	r3, [pc, #220]	; (80026cc <Tx_RTC+0x100>)
 80025ee:	2208      	movs	r2, #8
 80025f0:	611a      	str	r2, [r3, #16]

	TxData[0] = Date.Year;
 80025f2:	4b37      	ldr	r3, [pc, #220]	; (80026d0 <Tx_RTC+0x104>)
 80025f4:	78da      	ldrb	r2, [r3, #3]
 80025f6:	4b37      	ldr	r3, [pc, #220]	; (80026d4 <Tx_RTC+0x108>)
 80025f8:	701a      	strb	r2, [r3, #0]
	TxData[1] = Date.Month;
 80025fa:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <Tx_RTC+0x104>)
 80025fc:	785a      	ldrb	r2, [r3, #1]
 80025fe:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <Tx_RTC+0x108>)
 8002600:	705a      	strb	r2, [r3, #1]
	TxData[2] = Date.Date;
 8002602:	4b33      	ldr	r3, [pc, #204]	; (80026d0 <Tx_RTC+0x104>)
 8002604:	789a      	ldrb	r2, [r3, #2]
 8002606:	4b33      	ldr	r3, [pc, #204]	; (80026d4 <Tx_RTC+0x108>)
 8002608:	709a      	strb	r2, [r3, #2]
	TxData[3] = Time.Hours;
 800260a:	4b33      	ldr	r3, [pc, #204]	; (80026d8 <Tx_RTC+0x10c>)
 800260c:	781a      	ldrb	r2, [r3, #0]
 800260e:	4b31      	ldr	r3, [pc, #196]	; (80026d4 <Tx_RTC+0x108>)
 8002610:	70da      	strb	r2, [r3, #3]
	TxData[4] = Time.Minutes;
 8002612:	4b31      	ldr	r3, [pc, #196]	; (80026d8 <Tx_RTC+0x10c>)
 8002614:	785a      	ldrb	r2, [r3, #1]
 8002616:	4b2f      	ldr	r3, [pc, #188]	; (80026d4 <Tx_RTC+0x108>)
 8002618:	711a      	strb	r2, [r3, #4]
	TxData[5] = Time.Seconds;
 800261a:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <Tx_RTC+0x10c>)
 800261c:	789a      	ldrb	r2, [r3, #2]
 800261e:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <Tx_RTC+0x108>)
 8002620:	715a      	strb	r2, [r3, #5]
	TxData[6] = ADC_Buffer[12] >> 8;
 8002622:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <Tx_RTC+0x110>)
 8002624:	8b1b      	ldrh	r3, [r3, #24]
 8002626:	0a1b      	lsrs	r3, r3, #8
 8002628:	b29b      	uxth	r3, r3
 800262a:	b2da      	uxtb	r2, r3
 800262c:	4b29      	ldr	r3, [pc, #164]	; (80026d4 <Tx_RTC+0x108>)
 800262e:	719a      	strb	r2, [r3, #6]
	TxData[7] = ADC_Buffer[12] & 0xff;
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <Tx_RTC+0x110>)
 8002632:	8b1b      	ldrh	r3, [r3, #24]
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <Tx_RTC+0x108>)
 8002638:	71da      	strb	r2, [r3, #7]

	if(Flag_Datalogger == DL_Save)
 800263a:	4b29      	ldr	r3, [pc, #164]	; (80026e0 <Tx_RTC+0x114>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d108      	bne.n	8002654 <Tx_RTC+0x88>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 8002642:	4b22      	ldr	r3, [pc, #136]	; (80026cc <Tx_RTC+0x100>)
 8002644:	6818      	ldr	r0, [r3, #0]
 8002646:	4b21      	ldr	r3, [pc, #132]	; (80026cc <Tx_RTC+0x100>)
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	b2d9      	uxtb	r1, r3
 800264c:	4b25      	ldr	r3, [pc, #148]	; (80026e4 <Tx_RTC+0x118>)
 800264e:	4a21      	ldr	r2, [pc, #132]	; (80026d4 <Tx_RTC+0x108>)
 8002650:	f003 f88c 	bl	800576c <Principal_Datalogger_Save_Buffer>

	if((Acc_CAN[RTC_Msg] >= Per_CAN[RTC_Msg]) && (Per_CAN[RTC_Msg] != 0))
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <Tx_RTC+0x11c>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	4a24      	ldr	r2, [pc, #144]	; (80026ec <Tx_RTC+0x120>)
 800265a:	88d2      	ldrh	r2, [r2, #6]
 800265c:	4293      	cmp	r3, r2
 800265e:	d331      	bcc.n	80026c4 <Tx_RTC+0xf8>
 8002660:	4b22      	ldr	r3, [pc, #136]	; (80026ec <Tx_RTC+0x120>)
 8002662:	88db      	ldrh	r3, [r3, #6]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d02d      	beq.n	80026c4 <Tx_RTC+0xf8>
	{
		Acc_CAN[RTC_Msg] -= Per_CAN[RTC_Msg];
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <Tx_RTC+0x11c>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a1f      	ldr	r2, [pc, #124]	; (80026ec <Tx_RTC+0x120>)
 800266e:	88d2      	ldrh	r2, [r2, #6]
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	4a1d      	ldr	r2, [pc, #116]	; (80026e8 <Tx_RTC+0x11c>)
 8002674:	60d3      	str	r3, [r2, #12]
		if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <Tx_RTC+0x124>)
 8002678:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <Tx_RTC+0x108>)
 800267a:	4914      	ldr	r1, [pc, #80]	; (80026cc <Tx_RTC+0x100>)
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f004 fdeb 	bl	8007258 <HAL_CAN_AddTxMessage>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d107      	bne.n	8002698 <Tx_RTC+0xcc>
			Verify_CAN |= 1;
 8002688:	4b1a      	ldr	r3, [pc, #104]	; (80026f4 <Tx_RTC+0x128>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4b18      	ldr	r3, [pc, #96]	; (80026f4 <Tx_RTC+0x128>)
 8002694:	701a      	strb	r2, [r3, #0]
 8002696:	e006      	b.n	80026a6 <Tx_RTC+0xda>
		else
			Verify_CAN &= 0x02;
 8002698:	4b16      	ldr	r3, [pc, #88]	; (80026f4 <Tx_RTC+0x128>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b14      	ldr	r3, [pc, #80]	; (80026f4 <Tx_RTC+0x128>)
 80026a4:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80026a6:	2300      	movs	r3, #0
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	e002      	b.n	80026b2 <Tx_RTC+0xe6>
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	3301      	adds	r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f004 feab 	bl	800740e <HAL_CAN_GetTxMailboxesFreeLevel>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b03      	cmp	r3, #3
 80026bc:	d002      	beq.n	80026c4 <Tx_RTC+0xf8>
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d9f3      	bls.n	80026ac <Tx_RTC+0xe0>
	}
}
 80026c4:	bf00      	nop
 80026c6:	3710      	adds	r7, #16
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	20002d98 	.word	0x20002d98
 80026d0:	20001a5c 	.word	0x20001a5c
 80026d4:	20001bc8 	.word	0x20001bc8
 80026d8:	20002cb0 	.word	0x20002cb0
 80026dc:	20000704 	.word	0x20000704
 80026e0:	20001bd0 	.word	0x20001bd0
 80026e4:	20001c84 	.word	0x20001c84
 80026e8:	20002d54 	.word	0x20002d54
 80026ec:	200006fc 	.word	0x200006fc
 80026f0:	20001c58 	.word	0x20001c58
 80026f4:	20001a58 	.word	0x20001a58

080026f8 <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8002700:	4bcb      	ldr	r3, [pc, #812]	; (8002a30 <Tx_Verify+0x338>)
 8002702:	2200      	movs	r2, #0
 8002704:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 8002706:	4bca      	ldr	r3, [pc, #808]	; (8002a30 <Tx_Verify+0x338>)
 8002708:	2200      	movs	r2, #0
 800270a:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 800270c:	4bc8      	ldr	r3, [pc, #800]	; (8002a30 <Tx_Verify+0x338>)
 800270e:	2200      	movs	r2, #0
 8002710:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = FIRST_ID + Verify_Msg;
 8002712:	4bc7      	ldr	r3, [pc, #796]	; (8002a30 <Tx_Verify+0x338>)
 8002714:	2205      	movs	r2, #5
 8002716:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 8;
 8002718:	4bc5      	ldr	r3, [pc, #788]	; (8002a30 <Tx_Verify+0x338>)
 800271a:	2208      	movs	r2, #8
 800271c:	611a      	str	r2, [r3, #16]

	Verify_Data();
 800271e:	f7ff fd17 	bl	8002150 <Verify_Data>

	TxData[0]  = Verify >> 8;
 8002722:	4bc4      	ldr	r3, [pc, #784]	; (8002a34 <Tx_Verify+0x33c>)
 8002724:	881b      	ldrh	r3, [r3, #0]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	b29b      	uxth	r3, r3
 800272a:	b2da      	uxtb	r2, r3
 800272c:	4bc2      	ldr	r3, [pc, #776]	; (8002a38 <Tx_Verify+0x340>)
 800272e:	701a      	strb	r2, [r3, #0]
	TxData[1]  = Verify & 0x0f;
 8002730:	4bc0      	ldr	r3, [pc, #768]	; (8002a34 <Tx_Verify+0x33c>)
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f003 030f 	and.w	r3, r3, #15
 800273a:	b2da      	uxtb	r2, r3
 800273c:	4bbe      	ldr	r3, [pc, #760]	; (8002a38 <Tx_Verify+0x340>)
 800273e:	705a      	strb	r2, [r3, #1]
	TxData[1] |= Verify_Datalogger << 4;
 8002740:	4bbd      	ldr	r3, [pc, #756]	; (8002a38 <Tx_Verify+0x340>)
 8002742:	785b      	ldrb	r3, [r3, #1]
 8002744:	b25a      	sxtb	r2, r3
 8002746:	4bbd      	ldr	r3, [pc, #756]	; (8002a3c <Tx_Verify+0x344>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	b25b      	sxtb	r3, r3
 800274e:	4313      	orrs	r3, r2
 8002750:	b25b      	sxtb	r3, r3
 8002752:	b2da      	uxtb	r2, r3
 8002754:	4bb8      	ldr	r3, [pc, #736]	; (8002a38 <Tx_Verify+0x340>)
 8002756:	705a      	strb	r2, [r3, #1]

	__SAVE_FREQ(TxData[2], Per_Msg[Analog_1_4]);
 8002758:	4bb9      	ldr	r3, [pc, #740]	; (8002a40 <Tx_Verify+0x348>)
 800275a:	881b      	ldrh	r3, [r3, #0]
 800275c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002760:	f000 8081 	beq.w	8002866 <Tx_Verify+0x16e>
 8002764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002768:	f300 80a9 	bgt.w	80028be <Tx_Verify+0x1c6>
 800276c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002770:	d07d      	beq.n	800286e <Tx_Verify+0x176>
 8002772:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002776:	f300 80a2 	bgt.w	80028be <Tx_Verify+0x1c6>
 800277a:	2bc8      	cmp	r3, #200	; 0xc8
 800277c:	d07b      	beq.n	8002876 <Tx_Verify+0x17e>
 800277e:	2bc8      	cmp	r3, #200	; 0xc8
 8002780:	f300 809d 	bgt.w	80028be <Tx_Verify+0x1c6>
 8002784:	2b32      	cmp	r3, #50	; 0x32
 8002786:	dc6b      	bgt.n	8002860 <Tx_Verify+0x168>
 8002788:	2b02      	cmp	r3, #2
 800278a:	f2c0 8098 	blt.w	80028be <Tx_Verify+0x1c6>
 800278e:	3b02      	subs	r3, #2
 8002790:	2b30      	cmp	r3, #48	; 0x30
 8002792:	f200 8094 	bhi.w	80028be <Tx_Verify+0x1c6>
 8002796:	a201      	add	r2, pc, #4	; (adr r2, 800279c <Tx_Verify+0xa4>)
 8002798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800279c:	080028b7 	.word	0x080028b7
 80027a0:	080028af 	.word	0x080028af
 80027a4:	080028bf 	.word	0x080028bf
 80027a8:	080028a7 	.word	0x080028a7
 80027ac:	080028bf 	.word	0x080028bf
 80027b0:	080028bf 	.word	0x080028bf
 80027b4:	080028bf 	.word	0x080028bf
 80027b8:	080028bf 	.word	0x080028bf
 80027bc:	0800289f 	.word	0x0800289f
 80027c0:	080028bf 	.word	0x080028bf
 80027c4:	080028bf 	.word	0x080028bf
 80027c8:	080028bf 	.word	0x080028bf
 80027cc:	080028bf 	.word	0x080028bf
 80027d0:	080028bf 	.word	0x080028bf
 80027d4:	080028bf 	.word	0x080028bf
 80027d8:	080028bf 	.word	0x080028bf
 80027dc:	080028bf 	.word	0x080028bf
 80027e0:	080028bf 	.word	0x080028bf
 80027e4:	08002897 	.word	0x08002897
 80027e8:	080028bf 	.word	0x080028bf
 80027ec:	080028bf 	.word	0x080028bf
 80027f0:	080028bf 	.word	0x080028bf
 80027f4:	080028bf 	.word	0x080028bf
 80027f8:	080028bf 	.word	0x080028bf
 80027fc:	080028bf 	.word	0x080028bf
 8002800:	080028bf 	.word	0x080028bf
 8002804:	080028bf 	.word	0x080028bf
 8002808:	080028bf 	.word	0x080028bf
 800280c:	080028bf 	.word	0x080028bf
 8002810:	080028bf 	.word	0x080028bf
 8002814:	080028bf 	.word	0x080028bf
 8002818:	080028bf 	.word	0x080028bf
 800281c:	080028bf 	.word	0x080028bf
 8002820:	080028bf 	.word	0x080028bf
 8002824:	080028bf 	.word	0x080028bf
 8002828:	080028bf 	.word	0x080028bf
 800282c:	080028bf 	.word	0x080028bf
 8002830:	080028bf 	.word	0x080028bf
 8002834:	0800288f 	.word	0x0800288f
 8002838:	080028bf 	.word	0x080028bf
 800283c:	080028bf 	.word	0x080028bf
 8002840:	080028bf 	.word	0x080028bf
 8002844:	080028bf 	.word	0x080028bf
 8002848:	080028bf 	.word	0x080028bf
 800284c:	080028bf 	.word	0x080028bf
 8002850:	080028bf 	.word	0x080028bf
 8002854:	080028bf 	.word	0x080028bf
 8002858:	080028bf 	.word	0x080028bf
 800285c:	08002887 	.word	0x08002887
 8002860:	2b64      	cmp	r3, #100	; 0x64
 8002862:	d00c      	beq.n	800287e <Tx_Verify+0x186>
 8002864:	e02b      	b.n	80028be <Tx_Verify+0x1c6>
 8002866:	4b74      	ldr	r3, [pc, #464]	; (8002a38 <Tx_Verify+0x340>)
 8002868:	2201      	movs	r2, #1
 800286a:	709a      	strb	r2, [r3, #2]
 800286c:	e02a      	b.n	80028c4 <Tx_Verify+0x1cc>
 800286e:	4b72      	ldr	r3, [pc, #456]	; (8002a38 <Tx_Verify+0x340>)
 8002870:	2202      	movs	r2, #2
 8002872:	709a      	strb	r2, [r3, #2]
 8002874:	e026      	b.n	80028c4 <Tx_Verify+0x1cc>
 8002876:	4b70      	ldr	r3, [pc, #448]	; (8002a38 <Tx_Verify+0x340>)
 8002878:	2203      	movs	r2, #3
 800287a:	709a      	strb	r2, [r3, #2]
 800287c:	e022      	b.n	80028c4 <Tx_Verify+0x1cc>
 800287e:	4b6e      	ldr	r3, [pc, #440]	; (8002a38 <Tx_Verify+0x340>)
 8002880:	2204      	movs	r2, #4
 8002882:	709a      	strb	r2, [r3, #2]
 8002884:	e01e      	b.n	80028c4 <Tx_Verify+0x1cc>
 8002886:	4b6c      	ldr	r3, [pc, #432]	; (8002a38 <Tx_Verify+0x340>)
 8002888:	2205      	movs	r2, #5
 800288a:	709a      	strb	r2, [r3, #2]
 800288c:	e01a      	b.n	80028c4 <Tx_Verify+0x1cc>
 800288e:	4b6a      	ldr	r3, [pc, #424]	; (8002a38 <Tx_Verify+0x340>)
 8002890:	2206      	movs	r2, #6
 8002892:	709a      	strb	r2, [r3, #2]
 8002894:	e016      	b.n	80028c4 <Tx_Verify+0x1cc>
 8002896:	4b68      	ldr	r3, [pc, #416]	; (8002a38 <Tx_Verify+0x340>)
 8002898:	2207      	movs	r2, #7
 800289a:	709a      	strb	r2, [r3, #2]
 800289c:	e012      	b.n	80028c4 <Tx_Verify+0x1cc>
 800289e:	4b66      	ldr	r3, [pc, #408]	; (8002a38 <Tx_Verify+0x340>)
 80028a0:	2208      	movs	r2, #8
 80028a2:	709a      	strb	r2, [r3, #2]
 80028a4:	e00e      	b.n	80028c4 <Tx_Verify+0x1cc>
 80028a6:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <Tx_Verify+0x340>)
 80028a8:	2209      	movs	r2, #9
 80028aa:	709a      	strb	r2, [r3, #2]
 80028ac:	e00a      	b.n	80028c4 <Tx_Verify+0x1cc>
 80028ae:	4b62      	ldr	r3, [pc, #392]	; (8002a38 <Tx_Verify+0x340>)
 80028b0:	220a      	movs	r2, #10
 80028b2:	709a      	strb	r2, [r3, #2]
 80028b4:	e006      	b.n	80028c4 <Tx_Verify+0x1cc>
 80028b6:	4b60      	ldr	r3, [pc, #384]	; (8002a38 <Tx_Verify+0x340>)
 80028b8:	220b      	movs	r2, #11
 80028ba:	709a      	strb	r2, [r3, #2]
 80028bc:	e002      	b.n	80028c4 <Tx_Verify+0x1cc>
 80028be:	4b5e      	ldr	r3, [pc, #376]	; (8002a38 <Tx_Verify+0x340>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	709a      	strb	r2, [r3, #2]
 80028c4:	bf00      	nop
	__SAVE_FREQ(TxData[3], Per_Msg[Analog_5_8]);
 80028c6:	4b5e      	ldr	r3, [pc, #376]	; (8002a40 <Tx_Verify+0x348>)
 80028c8:	885b      	ldrh	r3, [r3, #2]
 80028ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ce:	f000 8082 	beq.w	80029d6 <Tx_Verify+0x2de>
 80028d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d6:	f300 80b5 	bgt.w	8002a44 <Tx_Verify+0x34c>
 80028da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028de:	d07e      	beq.n	80029de <Tx_Verify+0x2e6>
 80028e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80028e4:	f300 80ae 	bgt.w	8002a44 <Tx_Verify+0x34c>
 80028e8:	2bc8      	cmp	r3, #200	; 0xc8
 80028ea:	d07c      	beq.n	80029e6 <Tx_Verify+0x2ee>
 80028ec:	2bc8      	cmp	r3, #200	; 0xc8
 80028ee:	f300 80a9 	bgt.w	8002a44 <Tx_Verify+0x34c>
 80028f2:	2b32      	cmp	r3, #50	; 0x32
 80028f4:	dc6c      	bgt.n	80029d0 <Tx_Verify+0x2d8>
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	f2c0 80a4 	blt.w	8002a44 <Tx_Verify+0x34c>
 80028fc:	3b02      	subs	r3, #2
 80028fe:	2b30      	cmp	r3, #48	; 0x30
 8002900:	f200 80a0 	bhi.w	8002a44 <Tx_Verify+0x34c>
 8002904:	a201      	add	r2, pc, #4	; (adr r2, 800290c <Tx_Verify+0x214>)
 8002906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800290a:	bf00      	nop
 800290c:	08002a27 	.word	0x08002a27
 8002910:	08002a1f 	.word	0x08002a1f
 8002914:	08002a45 	.word	0x08002a45
 8002918:	08002a17 	.word	0x08002a17
 800291c:	08002a45 	.word	0x08002a45
 8002920:	08002a45 	.word	0x08002a45
 8002924:	08002a45 	.word	0x08002a45
 8002928:	08002a45 	.word	0x08002a45
 800292c:	08002a0f 	.word	0x08002a0f
 8002930:	08002a45 	.word	0x08002a45
 8002934:	08002a45 	.word	0x08002a45
 8002938:	08002a45 	.word	0x08002a45
 800293c:	08002a45 	.word	0x08002a45
 8002940:	08002a45 	.word	0x08002a45
 8002944:	08002a45 	.word	0x08002a45
 8002948:	08002a45 	.word	0x08002a45
 800294c:	08002a45 	.word	0x08002a45
 8002950:	08002a45 	.word	0x08002a45
 8002954:	08002a07 	.word	0x08002a07
 8002958:	08002a45 	.word	0x08002a45
 800295c:	08002a45 	.word	0x08002a45
 8002960:	08002a45 	.word	0x08002a45
 8002964:	08002a45 	.word	0x08002a45
 8002968:	08002a45 	.word	0x08002a45
 800296c:	08002a45 	.word	0x08002a45
 8002970:	08002a45 	.word	0x08002a45
 8002974:	08002a45 	.word	0x08002a45
 8002978:	08002a45 	.word	0x08002a45
 800297c:	08002a45 	.word	0x08002a45
 8002980:	08002a45 	.word	0x08002a45
 8002984:	08002a45 	.word	0x08002a45
 8002988:	08002a45 	.word	0x08002a45
 800298c:	08002a45 	.word	0x08002a45
 8002990:	08002a45 	.word	0x08002a45
 8002994:	08002a45 	.word	0x08002a45
 8002998:	08002a45 	.word	0x08002a45
 800299c:	08002a45 	.word	0x08002a45
 80029a0:	08002a45 	.word	0x08002a45
 80029a4:	080029ff 	.word	0x080029ff
 80029a8:	08002a45 	.word	0x08002a45
 80029ac:	08002a45 	.word	0x08002a45
 80029b0:	08002a45 	.word	0x08002a45
 80029b4:	08002a45 	.word	0x08002a45
 80029b8:	08002a45 	.word	0x08002a45
 80029bc:	08002a45 	.word	0x08002a45
 80029c0:	08002a45 	.word	0x08002a45
 80029c4:	08002a45 	.word	0x08002a45
 80029c8:	08002a45 	.word	0x08002a45
 80029cc:	080029f7 	.word	0x080029f7
 80029d0:	2b64      	cmp	r3, #100	; 0x64
 80029d2:	d00c      	beq.n	80029ee <Tx_Verify+0x2f6>
 80029d4:	e036      	b.n	8002a44 <Tx_Verify+0x34c>
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <Tx_Verify+0x340>)
 80029d8:	2201      	movs	r2, #1
 80029da:	70da      	strb	r2, [r3, #3]
 80029dc:	e035      	b.n	8002a4a <Tx_Verify+0x352>
 80029de:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <Tx_Verify+0x340>)
 80029e0:	2202      	movs	r2, #2
 80029e2:	70da      	strb	r2, [r3, #3]
 80029e4:	e031      	b.n	8002a4a <Tx_Verify+0x352>
 80029e6:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <Tx_Verify+0x340>)
 80029e8:	2203      	movs	r2, #3
 80029ea:	70da      	strb	r2, [r3, #3]
 80029ec:	e02d      	b.n	8002a4a <Tx_Verify+0x352>
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <Tx_Verify+0x340>)
 80029f0:	2204      	movs	r2, #4
 80029f2:	70da      	strb	r2, [r3, #3]
 80029f4:	e029      	b.n	8002a4a <Tx_Verify+0x352>
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <Tx_Verify+0x340>)
 80029f8:	2205      	movs	r2, #5
 80029fa:	70da      	strb	r2, [r3, #3]
 80029fc:	e025      	b.n	8002a4a <Tx_Verify+0x352>
 80029fe:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <Tx_Verify+0x340>)
 8002a00:	2206      	movs	r2, #6
 8002a02:	70da      	strb	r2, [r3, #3]
 8002a04:	e021      	b.n	8002a4a <Tx_Verify+0x352>
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <Tx_Verify+0x340>)
 8002a08:	2207      	movs	r2, #7
 8002a0a:	70da      	strb	r2, [r3, #3]
 8002a0c:	e01d      	b.n	8002a4a <Tx_Verify+0x352>
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <Tx_Verify+0x340>)
 8002a10:	2208      	movs	r2, #8
 8002a12:	70da      	strb	r2, [r3, #3]
 8002a14:	e019      	b.n	8002a4a <Tx_Verify+0x352>
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <Tx_Verify+0x340>)
 8002a18:	2209      	movs	r2, #9
 8002a1a:	70da      	strb	r2, [r3, #3]
 8002a1c:	e015      	b.n	8002a4a <Tx_Verify+0x352>
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <Tx_Verify+0x340>)
 8002a20:	220a      	movs	r2, #10
 8002a22:	70da      	strb	r2, [r3, #3]
 8002a24:	e011      	b.n	8002a4a <Tx_Verify+0x352>
 8002a26:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <Tx_Verify+0x340>)
 8002a28:	220b      	movs	r2, #11
 8002a2a:	70da      	strb	r2, [r3, #3]
 8002a2c:	e00d      	b.n	8002a4a <Tx_Verify+0x352>
 8002a2e:	bf00      	nop
 8002a30:	20002d98 	.word	0x20002d98
 8002a34:	20002e78 	.word	0x20002e78
 8002a38:	20001bc8 	.word	0x20001bc8
 8002a3c:	20001a10 	.word	0x20001a10
 8002a40:	20002e7c 	.word	0x20002e7c
 8002a44:	4bb7      	ldr	r3, [pc, #732]	; (8002d24 <Tx_Verify+0x62c>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	70da      	strb	r2, [r3, #3]
 8002a4a:	bf00      	nop
	__SAVE_FREQ(TxData[4], Per_Msg[Analog_9_12]);
 8002a4c:	4bb6      	ldr	r3, [pc, #728]	; (8002d28 <Tx_Verify+0x630>)
 8002a4e:	889b      	ldrh	r3, [r3, #4]
 8002a50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a54:	f000 8081 	beq.w	8002b5a <Tx_Verify+0x462>
 8002a58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a5c:	f300 80a9 	bgt.w	8002bb2 <Tx_Verify+0x4ba>
 8002a60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a64:	d07d      	beq.n	8002b62 <Tx_Verify+0x46a>
 8002a66:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a6a:	f300 80a2 	bgt.w	8002bb2 <Tx_Verify+0x4ba>
 8002a6e:	2bc8      	cmp	r3, #200	; 0xc8
 8002a70:	d07b      	beq.n	8002b6a <Tx_Verify+0x472>
 8002a72:	2bc8      	cmp	r3, #200	; 0xc8
 8002a74:	f300 809d 	bgt.w	8002bb2 <Tx_Verify+0x4ba>
 8002a78:	2b32      	cmp	r3, #50	; 0x32
 8002a7a:	dc6b      	bgt.n	8002b54 <Tx_Verify+0x45c>
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	f2c0 8098 	blt.w	8002bb2 <Tx_Verify+0x4ba>
 8002a82:	3b02      	subs	r3, #2
 8002a84:	2b30      	cmp	r3, #48	; 0x30
 8002a86:	f200 8094 	bhi.w	8002bb2 <Tx_Verify+0x4ba>
 8002a8a:	a201      	add	r2, pc, #4	; (adr r2, 8002a90 <Tx_Verify+0x398>)
 8002a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a90:	08002bab 	.word	0x08002bab
 8002a94:	08002ba3 	.word	0x08002ba3
 8002a98:	08002bb3 	.word	0x08002bb3
 8002a9c:	08002b9b 	.word	0x08002b9b
 8002aa0:	08002bb3 	.word	0x08002bb3
 8002aa4:	08002bb3 	.word	0x08002bb3
 8002aa8:	08002bb3 	.word	0x08002bb3
 8002aac:	08002bb3 	.word	0x08002bb3
 8002ab0:	08002b93 	.word	0x08002b93
 8002ab4:	08002bb3 	.word	0x08002bb3
 8002ab8:	08002bb3 	.word	0x08002bb3
 8002abc:	08002bb3 	.word	0x08002bb3
 8002ac0:	08002bb3 	.word	0x08002bb3
 8002ac4:	08002bb3 	.word	0x08002bb3
 8002ac8:	08002bb3 	.word	0x08002bb3
 8002acc:	08002bb3 	.word	0x08002bb3
 8002ad0:	08002bb3 	.word	0x08002bb3
 8002ad4:	08002bb3 	.word	0x08002bb3
 8002ad8:	08002b8b 	.word	0x08002b8b
 8002adc:	08002bb3 	.word	0x08002bb3
 8002ae0:	08002bb3 	.word	0x08002bb3
 8002ae4:	08002bb3 	.word	0x08002bb3
 8002ae8:	08002bb3 	.word	0x08002bb3
 8002aec:	08002bb3 	.word	0x08002bb3
 8002af0:	08002bb3 	.word	0x08002bb3
 8002af4:	08002bb3 	.word	0x08002bb3
 8002af8:	08002bb3 	.word	0x08002bb3
 8002afc:	08002bb3 	.word	0x08002bb3
 8002b00:	08002bb3 	.word	0x08002bb3
 8002b04:	08002bb3 	.word	0x08002bb3
 8002b08:	08002bb3 	.word	0x08002bb3
 8002b0c:	08002bb3 	.word	0x08002bb3
 8002b10:	08002bb3 	.word	0x08002bb3
 8002b14:	08002bb3 	.word	0x08002bb3
 8002b18:	08002bb3 	.word	0x08002bb3
 8002b1c:	08002bb3 	.word	0x08002bb3
 8002b20:	08002bb3 	.word	0x08002bb3
 8002b24:	08002bb3 	.word	0x08002bb3
 8002b28:	08002b83 	.word	0x08002b83
 8002b2c:	08002bb3 	.word	0x08002bb3
 8002b30:	08002bb3 	.word	0x08002bb3
 8002b34:	08002bb3 	.word	0x08002bb3
 8002b38:	08002bb3 	.word	0x08002bb3
 8002b3c:	08002bb3 	.word	0x08002bb3
 8002b40:	08002bb3 	.word	0x08002bb3
 8002b44:	08002bb3 	.word	0x08002bb3
 8002b48:	08002bb3 	.word	0x08002bb3
 8002b4c:	08002bb3 	.word	0x08002bb3
 8002b50:	08002b7b 	.word	0x08002b7b
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d00c      	beq.n	8002b72 <Tx_Verify+0x47a>
 8002b58:	e02b      	b.n	8002bb2 <Tx_Verify+0x4ba>
 8002b5a:	4b72      	ldr	r3, [pc, #456]	; (8002d24 <Tx_Verify+0x62c>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	711a      	strb	r2, [r3, #4]
 8002b60:	e02a      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b62:	4b70      	ldr	r3, [pc, #448]	; (8002d24 <Tx_Verify+0x62c>)
 8002b64:	2202      	movs	r2, #2
 8002b66:	711a      	strb	r2, [r3, #4]
 8002b68:	e026      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b6a:	4b6e      	ldr	r3, [pc, #440]	; (8002d24 <Tx_Verify+0x62c>)
 8002b6c:	2203      	movs	r2, #3
 8002b6e:	711a      	strb	r2, [r3, #4]
 8002b70:	e022      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b72:	4b6c      	ldr	r3, [pc, #432]	; (8002d24 <Tx_Verify+0x62c>)
 8002b74:	2204      	movs	r2, #4
 8002b76:	711a      	strb	r2, [r3, #4]
 8002b78:	e01e      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b7a:	4b6a      	ldr	r3, [pc, #424]	; (8002d24 <Tx_Verify+0x62c>)
 8002b7c:	2205      	movs	r2, #5
 8002b7e:	711a      	strb	r2, [r3, #4]
 8002b80:	e01a      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b82:	4b68      	ldr	r3, [pc, #416]	; (8002d24 <Tx_Verify+0x62c>)
 8002b84:	2206      	movs	r2, #6
 8002b86:	711a      	strb	r2, [r3, #4]
 8002b88:	e016      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b8a:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <Tx_Verify+0x62c>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	711a      	strb	r2, [r3, #4]
 8002b90:	e012      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b92:	4b64      	ldr	r3, [pc, #400]	; (8002d24 <Tx_Verify+0x62c>)
 8002b94:	2208      	movs	r2, #8
 8002b96:	711a      	strb	r2, [r3, #4]
 8002b98:	e00e      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002b9a:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <Tx_Verify+0x62c>)
 8002b9c:	2209      	movs	r2, #9
 8002b9e:	711a      	strb	r2, [r3, #4]
 8002ba0:	e00a      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002ba2:	4b60      	ldr	r3, [pc, #384]	; (8002d24 <Tx_Verify+0x62c>)
 8002ba4:	220a      	movs	r2, #10
 8002ba6:	711a      	strb	r2, [r3, #4]
 8002ba8:	e006      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002baa:	4b5e      	ldr	r3, [pc, #376]	; (8002d24 <Tx_Verify+0x62c>)
 8002bac:	220b      	movs	r2, #11
 8002bae:	711a      	strb	r2, [r3, #4]
 8002bb0:	e002      	b.n	8002bb8 <Tx_Verify+0x4c0>
 8002bb2:	4b5c      	ldr	r3, [pc, #368]	; (8002d24 <Tx_Verify+0x62c>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	711a      	strb	r2, [r3, #4]
 8002bb8:	bf00      	nop
	__SAVE_FREQ(TxData[5], Per_Msg[RTC_Msg]);
 8002bba:	4b5b      	ldr	r3, [pc, #364]	; (8002d28 <Tx_Verify+0x630>)
 8002bbc:	88db      	ldrh	r3, [r3, #6]
 8002bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc2:	f000 8082 	beq.w	8002cca <Tx_Verify+0x5d2>
 8002bc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bca:	f300 80af 	bgt.w	8002d2c <Tx_Verify+0x634>
 8002bce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bd2:	d07e      	beq.n	8002cd2 <Tx_Verify+0x5da>
 8002bd4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bd8:	f300 80a8 	bgt.w	8002d2c <Tx_Verify+0x634>
 8002bdc:	2bc8      	cmp	r3, #200	; 0xc8
 8002bde:	d07c      	beq.n	8002cda <Tx_Verify+0x5e2>
 8002be0:	2bc8      	cmp	r3, #200	; 0xc8
 8002be2:	f300 80a3 	bgt.w	8002d2c <Tx_Verify+0x634>
 8002be6:	2b32      	cmp	r3, #50	; 0x32
 8002be8:	dc6c      	bgt.n	8002cc4 <Tx_Verify+0x5cc>
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	f2c0 809e 	blt.w	8002d2c <Tx_Verify+0x634>
 8002bf0:	3b02      	subs	r3, #2
 8002bf2:	2b30      	cmp	r3, #48	; 0x30
 8002bf4:	f200 809a 	bhi.w	8002d2c <Tx_Verify+0x634>
 8002bf8:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <Tx_Verify+0x508>)
 8002bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bfe:	bf00      	nop
 8002c00:	08002d1b 	.word	0x08002d1b
 8002c04:	08002d13 	.word	0x08002d13
 8002c08:	08002d2d 	.word	0x08002d2d
 8002c0c:	08002d0b 	.word	0x08002d0b
 8002c10:	08002d2d 	.word	0x08002d2d
 8002c14:	08002d2d 	.word	0x08002d2d
 8002c18:	08002d2d 	.word	0x08002d2d
 8002c1c:	08002d2d 	.word	0x08002d2d
 8002c20:	08002d03 	.word	0x08002d03
 8002c24:	08002d2d 	.word	0x08002d2d
 8002c28:	08002d2d 	.word	0x08002d2d
 8002c2c:	08002d2d 	.word	0x08002d2d
 8002c30:	08002d2d 	.word	0x08002d2d
 8002c34:	08002d2d 	.word	0x08002d2d
 8002c38:	08002d2d 	.word	0x08002d2d
 8002c3c:	08002d2d 	.word	0x08002d2d
 8002c40:	08002d2d 	.word	0x08002d2d
 8002c44:	08002d2d 	.word	0x08002d2d
 8002c48:	08002cfb 	.word	0x08002cfb
 8002c4c:	08002d2d 	.word	0x08002d2d
 8002c50:	08002d2d 	.word	0x08002d2d
 8002c54:	08002d2d 	.word	0x08002d2d
 8002c58:	08002d2d 	.word	0x08002d2d
 8002c5c:	08002d2d 	.word	0x08002d2d
 8002c60:	08002d2d 	.word	0x08002d2d
 8002c64:	08002d2d 	.word	0x08002d2d
 8002c68:	08002d2d 	.word	0x08002d2d
 8002c6c:	08002d2d 	.word	0x08002d2d
 8002c70:	08002d2d 	.word	0x08002d2d
 8002c74:	08002d2d 	.word	0x08002d2d
 8002c78:	08002d2d 	.word	0x08002d2d
 8002c7c:	08002d2d 	.word	0x08002d2d
 8002c80:	08002d2d 	.word	0x08002d2d
 8002c84:	08002d2d 	.word	0x08002d2d
 8002c88:	08002d2d 	.word	0x08002d2d
 8002c8c:	08002d2d 	.word	0x08002d2d
 8002c90:	08002d2d 	.word	0x08002d2d
 8002c94:	08002d2d 	.word	0x08002d2d
 8002c98:	08002cf3 	.word	0x08002cf3
 8002c9c:	08002d2d 	.word	0x08002d2d
 8002ca0:	08002d2d 	.word	0x08002d2d
 8002ca4:	08002d2d 	.word	0x08002d2d
 8002ca8:	08002d2d 	.word	0x08002d2d
 8002cac:	08002d2d 	.word	0x08002d2d
 8002cb0:	08002d2d 	.word	0x08002d2d
 8002cb4:	08002d2d 	.word	0x08002d2d
 8002cb8:	08002d2d 	.word	0x08002d2d
 8002cbc:	08002d2d 	.word	0x08002d2d
 8002cc0:	08002ceb 	.word	0x08002ceb
 8002cc4:	2b64      	cmp	r3, #100	; 0x64
 8002cc6:	d00c      	beq.n	8002ce2 <Tx_Verify+0x5ea>
 8002cc8:	e030      	b.n	8002d2c <Tx_Verify+0x634>
 8002cca:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <Tx_Verify+0x62c>)
 8002ccc:	2201      	movs	r2, #1
 8002cce:	715a      	strb	r2, [r3, #5]
 8002cd0:	e02f      	b.n	8002d32 <Tx_Verify+0x63a>
 8002cd2:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <Tx_Verify+0x62c>)
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	715a      	strb	r2, [r3, #5]
 8002cd8:	e02b      	b.n	8002d32 <Tx_Verify+0x63a>
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <Tx_Verify+0x62c>)
 8002cdc:	2203      	movs	r2, #3
 8002cde:	715a      	strb	r2, [r3, #5]
 8002ce0:	e027      	b.n	8002d32 <Tx_Verify+0x63a>
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <Tx_Verify+0x62c>)
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	715a      	strb	r2, [r3, #5]
 8002ce8:	e023      	b.n	8002d32 <Tx_Verify+0x63a>
 8002cea:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <Tx_Verify+0x62c>)
 8002cec:	2205      	movs	r2, #5
 8002cee:	715a      	strb	r2, [r3, #5]
 8002cf0:	e01f      	b.n	8002d32 <Tx_Verify+0x63a>
 8002cf2:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <Tx_Verify+0x62c>)
 8002cf4:	2206      	movs	r2, #6
 8002cf6:	715a      	strb	r2, [r3, #5]
 8002cf8:	e01b      	b.n	8002d32 <Tx_Verify+0x63a>
 8002cfa:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <Tx_Verify+0x62c>)
 8002cfc:	2207      	movs	r2, #7
 8002cfe:	715a      	strb	r2, [r3, #5]
 8002d00:	e017      	b.n	8002d32 <Tx_Verify+0x63a>
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <Tx_Verify+0x62c>)
 8002d04:	2208      	movs	r2, #8
 8002d06:	715a      	strb	r2, [r3, #5]
 8002d08:	e013      	b.n	8002d32 <Tx_Verify+0x63a>
 8002d0a:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <Tx_Verify+0x62c>)
 8002d0c:	2209      	movs	r2, #9
 8002d0e:	715a      	strb	r2, [r3, #5]
 8002d10:	e00f      	b.n	8002d32 <Tx_Verify+0x63a>
 8002d12:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <Tx_Verify+0x62c>)
 8002d14:	220a      	movs	r2, #10
 8002d16:	715a      	strb	r2, [r3, #5]
 8002d18:	e00b      	b.n	8002d32 <Tx_Verify+0x63a>
 8002d1a:	4b02      	ldr	r3, [pc, #8]	; (8002d24 <Tx_Verify+0x62c>)
 8002d1c:	220b      	movs	r2, #11
 8002d1e:	715a      	strb	r2, [r3, #5]
 8002d20:	e007      	b.n	8002d32 <Tx_Verify+0x63a>
 8002d22:	bf00      	nop
 8002d24:	20001bc8 	.word	0x20001bc8
 8002d28:	20002e7c 	.word	0x20002e7c
 8002d2c:	4bcd      	ldr	r3, [pc, #820]	; (8003064 <Tx_Verify+0x96c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	715a      	strb	r2, [r3, #5]
 8002d32:	bf00      	nop
	__SAVE_FREQ(TxData[6], Per_Msg[PDM_Save]);
 8002d34:	4bcc      	ldr	r3, [pc, #816]	; (8003068 <Tx_Verify+0x970>)
 8002d36:	899b      	ldrh	r3, [r3, #12]
 8002d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d3c:	f000 8081 	beq.w	8002e42 <Tx_Verify+0x74a>
 8002d40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d44:	f300 80a9 	bgt.w	8002e9a <Tx_Verify+0x7a2>
 8002d48:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d4c:	d07d      	beq.n	8002e4a <Tx_Verify+0x752>
 8002d4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d52:	f300 80a2 	bgt.w	8002e9a <Tx_Verify+0x7a2>
 8002d56:	2bc8      	cmp	r3, #200	; 0xc8
 8002d58:	d07b      	beq.n	8002e52 <Tx_Verify+0x75a>
 8002d5a:	2bc8      	cmp	r3, #200	; 0xc8
 8002d5c:	f300 809d 	bgt.w	8002e9a <Tx_Verify+0x7a2>
 8002d60:	2b32      	cmp	r3, #50	; 0x32
 8002d62:	dc6b      	bgt.n	8002e3c <Tx_Verify+0x744>
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	f2c0 8098 	blt.w	8002e9a <Tx_Verify+0x7a2>
 8002d6a:	3b02      	subs	r3, #2
 8002d6c:	2b30      	cmp	r3, #48	; 0x30
 8002d6e:	f200 8094 	bhi.w	8002e9a <Tx_Verify+0x7a2>
 8002d72:	a201      	add	r2, pc, #4	; (adr r2, 8002d78 <Tx_Verify+0x680>)
 8002d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d78:	08002e93 	.word	0x08002e93
 8002d7c:	08002e8b 	.word	0x08002e8b
 8002d80:	08002e9b 	.word	0x08002e9b
 8002d84:	08002e83 	.word	0x08002e83
 8002d88:	08002e9b 	.word	0x08002e9b
 8002d8c:	08002e9b 	.word	0x08002e9b
 8002d90:	08002e9b 	.word	0x08002e9b
 8002d94:	08002e9b 	.word	0x08002e9b
 8002d98:	08002e7b 	.word	0x08002e7b
 8002d9c:	08002e9b 	.word	0x08002e9b
 8002da0:	08002e9b 	.word	0x08002e9b
 8002da4:	08002e9b 	.word	0x08002e9b
 8002da8:	08002e9b 	.word	0x08002e9b
 8002dac:	08002e9b 	.word	0x08002e9b
 8002db0:	08002e9b 	.word	0x08002e9b
 8002db4:	08002e9b 	.word	0x08002e9b
 8002db8:	08002e9b 	.word	0x08002e9b
 8002dbc:	08002e9b 	.word	0x08002e9b
 8002dc0:	08002e73 	.word	0x08002e73
 8002dc4:	08002e9b 	.word	0x08002e9b
 8002dc8:	08002e9b 	.word	0x08002e9b
 8002dcc:	08002e9b 	.word	0x08002e9b
 8002dd0:	08002e9b 	.word	0x08002e9b
 8002dd4:	08002e9b 	.word	0x08002e9b
 8002dd8:	08002e9b 	.word	0x08002e9b
 8002ddc:	08002e9b 	.word	0x08002e9b
 8002de0:	08002e9b 	.word	0x08002e9b
 8002de4:	08002e9b 	.word	0x08002e9b
 8002de8:	08002e9b 	.word	0x08002e9b
 8002dec:	08002e9b 	.word	0x08002e9b
 8002df0:	08002e9b 	.word	0x08002e9b
 8002df4:	08002e9b 	.word	0x08002e9b
 8002df8:	08002e9b 	.word	0x08002e9b
 8002dfc:	08002e9b 	.word	0x08002e9b
 8002e00:	08002e9b 	.word	0x08002e9b
 8002e04:	08002e9b 	.word	0x08002e9b
 8002e08:	08002e9b 	.word	0x08002e9b
 8002e0c:	08002e9b 	.word	0x08002e9b
 8002e10:	08002e6b 	.word	0x08002e6b
 8002e14:	08002e9b 	.word	0x08002e9b
 8002e18:	08002e9b 	.word	0x08002e9b
 8002e1c:	08002e9b 	.word	0x08002e9b
 8002e20:	08002e9b 	.word	0x08002e9b
 8002e24:	08002e9b 	.word	0x08002e9b
 8002e28:	08002e9b 	.word	0x08002e9b
 8002e2c:	08002e9b 	.word	0x08002e9b
 8002e30:	08002e9b 	.word	0x08002e9b
 8002e34:	08002e9b 	.word	0x08002e9b
 8002e38:	08002e63 	.word	0x08002e63
 8002e3c:	2b64      	cmp	r3, #100	; 0x64
 8002e3e:	d00c      	beq.n	8002e5a <Tx_Verify+0x762>
 8002e40:	e02b      	b.n	8002e9a <Tx_Verify+0x7a2>
 8002e42:	4b88      	ldr	r3, [pc, #544]	; (8003064 <Tx_Verify+0x96c>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	719a      	strb	r2, [r3, #6]
 8002e48:	e02a      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e4a:	4b86      	ldr	r3, [pc, #536]	; (8003064 <Tx_Verify+0x96c>)
 8002e4c:	2202      	movs	r2, #2
 8002e4e:	719a      	strb	r2, [r3, #6]
 8002e50:	e026      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e52:	4b84      	ldr	r3, [pc, #528]	; (8003064 <Tx_Verify+0x96c>)
 8002e54:	2203      	movs	r2, #3
 8002e56:	719a      	strb	r2, [r3, #6]
 8002e58:	e022      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <Tx_Verify+0x96c>)
 8002e5c:	2204      	movs	r2, #4
 8002e5e:	719a      	strb	r2, [r3, #6]
 8002e60:	e01e      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e62:	4b80      	ldr	r3, [pc, #512]	; (8003064 <Tx_Verify+0x96c>)
 8002e64:	2205      	movs	r2, #5
 8002e66:	719a      	strb	r2, [r3, #6]
 8002e68:	e01a      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e6a:	4b7e      	ldr	r3, [pc, #504]	; (8003064 <Tx_Verify+0x96c>)
 8002e6c:	2206      	movs	r2, #6
 8002e6e:	719a      	strb	r2, [r3, #6]
 8002e70:	e016      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e72:	4b7c      	ldr	r3, [pc, #496]	; (8003064 <Tx_Verify+0x96c>)
 8002e74:	2207      	movs	r2, #7
 8002e76:	719a      	strb	r2, [r3, #6]
 8002e78:	e012      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e7a:	4b7a      	ldr	r3, [pc, #488]	; (8003064 <Tx_Verify+0x96c>)
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	719a      	strb	r2, [r3, #6]
 8002e80:	e00e      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e82:	4b78      	ldr	r3, [pc, #480]	; (8003064 <Tx_Verify+0x96c>)
 8002e84:	2209      	movs	r2, #9
 8002e86:	719a      	strb	r2, [r3, #6]
 8002e88:	e00a      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <Tx_Verify+0x96c>)
 8002e8c:	220a      	movs	r2, #10
 8002e8e:	719a      	strb	r2, [r3, #6]
 8002e90:	e006      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e92:	4b74      	ldr	r3, [pc, #464]	; (8003064 <Tx_Verify+0x96c>)
 8002e94:	220b      	movs	r2, #11
 8002e96:	719a      	strb	r2, [r3, #6]
 8002e98:	e002      	b.n	8002ea0 <Tx_Verify+0x7a8>
 8002e9a:	4b72      	ldr	r3, [pc, #456]	; (8003064 <Tx_Verify+0x96c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	719a      	strb	r2, [r3, #6]
 8002ea0:	bf00      	nop
	__SAVE_FREQ(TxData[7], Per_Msg[ECU_Save]);
 8002ea2:	4b71      	ldr	r3, [pc, #452]	; (8003068 <Tx_Verify+0x970>)
 8002ea4:	895b      	ldrh	r3, [r3, #10]
 8002ea6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eaa:	f000 8082 	beq.w	8002fb2 <Tx_Verify+0x8ba>
 8002eae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002eb2:	f300 80aa 	bgt.w	800300a <Tx_Verify+0x912>
 8002eb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eba:	d07e      	beq.n	8002fba <Tx_Verify+0x8c2>
 8002ebc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ec0:	f300 80a3 	bgt.w	800300a <Tx_Verify+0x912>
 8002ec4:	2bc8      	cmp	r3, #200	; 0xc8
 8002ec6:	d07c      	beq.n	8002fc2 <Tx_Verify+0x8ca>
 8002ec8:	2bc8      	cmp	r3, #200	; 0xc8
 8002eca:	f300 809e 	bgt.w	800300a <Tx_Verify+0x912>
 8002ece:	2b32      	cmp	r3, #50	; 0x32
 8002ed0:	dc6c      	bgt.n	8002fac <Tx_Verify+0x8b4>
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	f2c0 8099 	blt.w	800300a <Tx_Verify+0x912>
 8002ed8:	3b02      	subs	r3, #2
 8002eda:	2b30      	cmp	r3, #48	; 0x30
 8002edc:	f200 8095 	bhi.w	800300a <Tx_Verify+0x912>
 8002ee0:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <Tx_Verify+0x7f0>)
 8002ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee6:	bf00      	nop
 8002ee8:	08003003 	.word	0x08003003
 8002eec:	08002ffb 	.word	0x08002ffb
 8002ef0:	0800300b 	.word	0x0800300b
 8002ef4:	08002ff3 	.word	0x08002ff3
 8002ef8:	0800300b 	.word	0x0800300b
 8002efc:	0800300b 	.word	0x0800300b
 8002f00:	0800300b 	.word	0x0800300b
 8002f04:	0800300b 	.word	0x0800300b
 8002f08:	08002feb 	.word	0x08002feb
 8002f0c:	0800300b 	.word	0x0800300b
 8002f10:	0800300b 	.word	0x0800300b
 8002f14:	0800300b 	.word	0x0800300b
 8002f18:	0800300b 	.word	0x0800300b
 8002f1c:	0800300b 	.word	0x0800300b
 8002f20:	0800300b 	.word	0x0800300b
 8002f24:	0800300b 	.word	0x0800300b
 8002f28:	0800300b 	.word	0x0800300b
 8002f2c:	0800300b 	.word	0x0800300b
 8002f30:	08002fe3 	.word	0x08002fe3
 8002f34:	0800300b 	.word	0x0800300b
 8002f38:	0800300b 	.word	0x0800300b
 8002f3c:	0800300b 	.word	0x0800300b
 8002f40:	0800300b 	.word	0x0800300b
 8002f44:	0800300b 	.word	0x0800300b
 8002f48:	0800300b 	.word	0x0800300b
 8002f4c:	0800300b 	.word	0x0800300b
 8002f50:	0800300b 	.word	0x0800300b
 8002f54:	0800300b 	.word	0x0800300b
 8002f58:	0800300b 	.word	0x0800300b
 8002f5c:	0800300b 	.word	0x0800300b
 8002f60:	0800300b 	.word	0x0800300b
 8002f64:	0800300b 	.word	0x0800300b
 8002f68:	0800300b 	.word	0x0800300b
 8002f6c:	0800300b 	.word	0x0800300b
 8002f70:	0800300b 	.word	0x0800300b
 8002f74:	0800300b 	.word	0x0800300b
 8002f78:	0800300b 	.word	0x0800300b
 8002f7c:	0800300b 	.word	0x0800300b
 8002f80:	08002fdb 	.word	0x08002fdb
 8002f84:	0800300b 	.word	0x0800300b
 8002f88:	0800300b 	.word	0x0800300b
 8002f8c:	0800300b 	.word	0x0800300b
 8002f90:	0800300b 	.word	0x0800300b
 8002f94:	0800300b 	.word	0x0800300b
 8002f98:	0800300b 	.word	0x0800300b
 8002f9c:	0800300b 	.word	0x0800300b
 8002fa0:	0800300b 	.word	0x0800300b
 8002fa4:	0800300b 	.word	0x0800300b
 8002fa8:	08002fd3 	.word	0x08002fd3
 8002fac:	2b64      	cmp	r3, #100	; 0x64
 8002fae:	d00c      	beq.n	8002fca <Tx_Verify+0x8d2>
 8002fb0:	e02b      	b.n	800300a <Tx_Verify+0x912>
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <Tx_Verify+0x96c>)
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	71da      	strb	r2, [r3, #7]
 8002fb8:	e02a      	b.n	8003010 <Tx_Verify+0x918>
 8002fba:	4b2a      	ldr	r3, [pc, #168]	; (8003064 <Tx_Verify+0x96c>)
 8002fbc:	2202      	movs	r2, #2
 8002fbe:	71da      	strb	r2, [r3, #7]
 8002fc0:	e026      	b.n	8003010 <Tx_Verify+0x918>
 8002fc2:	4b28      	ldr	r3, [pc, #160]	; (8003064 <Tx_Verify+0x96c>)
 8002fc4:	2203      	movs	r2, #3
 8002fc6:	71da      	strb	r2, [r3, #7]
 8002fc8:	e022      	b.n	8003010 <Tx_Verify+0x918>
 8002fca:	4b26      	ldr	r3, [pc, #152]	; (8003064 <Tx_Verify+0x96c>)
 8002fcc:	2204      	movs	r2, #4
 8002fce:	71da      	strb	r2, [r3, #7]
 8002fd0:	e01e      	b.n	8003010 <Tx_Verify+0x918>
 8002fd2:	4b24      	ldr	r3, [pc, #144]	; (8003064 <Tx_Verify+0x96c>)
 8002fd4:	2205      	movs	r2, #5
 8002fd6:	71da      	strb	r2, [r3, #7]
 8002fd8:	e01a      	b.n	8003010 <Tx_Verify+0x918>
 8002fda:	4b22      	ldr	r3, [pc, #136]	; (8003064 <Tx_Verify+0x96c>)
 8002fdc:	2206      	movs	r2, #6
 8002fde:	71da      	strb	r2, [r3, #7]
 8002fe0:	e016      	b.n	8003010 <Tx_Verify+0x918>
 8002fe2:	4b20      	ldr	r3, [pc, #128]	; (8003064 <Tx_Verify+0x96c>)
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	71da      	strb	r2, [r3, #7]
 8002fe8:	e012      	b.n	8003010 <Tx_Verify+0x918>
 8002fea:	4b1e      	ldr	r3, [pc, #120]	; (8003064 <Tx_Verify+0x96c>)
 8002fec:	2208      	movs	r2, #8
 8002fee:	71da      	strb	r2, [r3, #7]
 8002ff0:	e00e      	b.n	8003010 <Tx_Verify+0x918>
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <Tx_Verify+0x96c>)
 8002ff4:	2209      	movs	r2, #9
 8002ff6:	71da      	strb	r2, [r3, #7]
 8002ff8:	e00a      	b.n	8003010 <Tx_Verify+0x918>
 8002ffa:	4b1a      	ldr	r3, [pc, #104]	; (8003064 <Tx_Verify+0x96c>)
 8002ffc:	220a      	movs	r2, #10
 8002ffe:	71da      	strb	r2, [r3, #7]
 8003000:	e006      	b.n	8003010 <Tx_Verify+0x918>
 8003002:	4b18      	ldr	r3, [pc, #96]	; (8003064 <Tx_Verify+0x96c>)
 8003004:	220b      	movs	r2, #11
 8003006:	71da      	strb	r2, [r3, #7]
 8003008:	e002      	b.n	8003010 <Tx_Verify+0x918>
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <Tx_Verify+0x96c>)
 800300c:	2200      	movs	r2, #0
 800300e:	71da      	strb	r2, [r3, #7]
 8003010:	bf00      	nop

	if(Flag_Datalogger == DL_Save)
 8003012:	4b16      	ldr	r3, [pc, #88]	; (800306c <Tx_Verify+0x974>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d108      	bne.n	800302c <Tx_Verify+0x934>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <Tx_Verify+0x978>)
 800301c:	6818      	ldr	r0, [r3, #0]
 800301e:	4b14      	ldr	r3, [pc, #80]	; (8003070 <Tx_Verify+0x978>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	b2d9      	uxtb	r1, r3
 8003024:	4b13      	ldr	r3, [pc, #76]	; (8003074 <Tx_Verify+0x97c>)
 8003026:	4a0f      	ldr	r2, [pc, #60]	; (8003064 <Tx_Verify+0x96c>)
 8003028:	f002 fba0 	bl	800576c <Principal_Datalogger_Save_Buffer>

	if(HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <Tx_Verify+0x980>)
 800302e:	4a0d      	ldr	r2, [pc, #52]	; (8003064 <Tx_Verify+0x96c>)
 8003030:	490f      	ldr	r1, [pc, #60]	; (8003070 <Tx_Verify+0x978>)
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f004 f910 	bl	8007258 <HAL_CAN_AddTxMessage>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d107      	bne.n	800304e <Tx_Verify+0x956>
		Verify_CAN |= 1;
 800303e:	4b0f      	ldr	r3, [pc, #60]	; (800307c <Tx_Verify+0x984>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	b2da      	uxtb	r2, r3
 8003048:	4b0c      	ldr	r3, [pc, #48]	; (800307c <Tx_Verify+0x984>)
 800304a:	701a      	strb	r2, [r3, #0]
 800304c:	e006      	b.n	800305c <Tx_Verify+0x964>
	else
		Verify_CAN &= 0x02;
 800304e:	4b0b      	ldr	r3, [pc, #44]	; (800307c <Tx_Verify+0x984>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	b2da      	uxtb	r2, r3
 8003058:	4b08      	ldr	r3, [pc, #32]	; (800307c <Tx_Verify+0x984>)
 800305a:	701a      	strb	r2, [r3, #0]

	//Wait Transmission finish
	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 800305c:	2300      	movs	r3, #0
 800305e:	73fb      	strb	r3, [r7, #15]
 8003060:	e011      	b.n	8003086 <Tx_Verify+0x98e>
 8003062:	bf00      	nop
 8003064:	20001bc8 	.word	0x20001bc8
 8003068:	20002e7c 	.word	0x20002e7c
 800306c:	20001bd0 	.word	0x20001bd0
 8003070:	20002d98 	.word	0x20002d98
 8003074:	20001c84 	.word	0x20001c84
 8003078:	20001c58 	.word	0x20001c58
 800307c:	20001a58 	.word	0x20001a58
 8003080:	7bfb      	ldrb	r3, [r7, #15]
 8003082:	3301      	adds	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f004 f9c1 	bl	800740e <HAL_CAN_GetTxMailboxesFreeLevel>
 800308c:	4603      	mov	r3, r0
 800308e:	2b03      	cmp	r3, #3
 8003090:	d002      	beq.n	8003098 <Tx_Verify+0x9a0>
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d9f3      	bls.n	8003080 <Tx_Verify+0x988>
}
 8003098:	bf00      	nop
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80030a8:	4b11      	ldr	r3, [pc, #68]	; (80030f0 <Tx_Beacon+0x50>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
	TxHeader.RTR = CAN_RTR_DATA;
 80030ae:	4b10      	ldr	r3, [pc, #64]	; (80030f0 <Tx_Beacon+0x50>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	60da      	str	r2, [r3, #12]
	TxHeader.TransmitGlobalTime = DISABLE;
 80030b4:	4b0e      	ldr	r3, [pc, #56]	; (80030f0 <Tx_Beacon+0x50>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	751a      	strb	r2, [r3, #20]
	TxHeader.StdId = BEACON_ID;
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <Tx_Beacon+0x50>)
 80030bc:	2264      	movs	r2, #100	; 0x64
 80030be:	601a      	str	r2, [r3, #0]
	TxHeader.DLC = 1;
 80030c0:	4b0b      	ldr	r3, [pc, #44]	; (80030f0 <Tx_Beacon+0x50>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	611a      	str	r2, [r3, #16]

	TxData[0] = Lap_Number;
 80030c6:	4b0b      	ldr	r3, [pc, #44]	; (80030f4 <Tx_Beacon+0x54>)
 80030c8:	781a      	ldrb	r2, [r3, #0]
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <Tx_Beacon+0x58>)
 80030cc:	701a      	strb	r2, [r3, #0]

	if(Flag_Datalogger == DL_Save)
 80030ce:	4b0b      	ldr	r3, [pc, #44]	; (80030fc <Tx_Beacon+0x5c>)
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d108      	bne.n	80030e8 <Tx_Beacon+0x48>
		Principal_Datalogger_Save_Buffer(TxHeader.StdId, TxHeader.DLC, TxData, &File_Struct);
 80030d6:	4b06      	ldr	r3, [pc, #24]	; (80030f0 <Tx_Beacon+0x50>)
 80030d8:	6818      	ldr	r0, [r3, #0]
 80030da:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <Tx_Beacon+0x50>)
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	b2d9      	uxtb	r1, r3
 80030e0:	4b07      	ldr	r3, [pc, #28]	; (8003100 <Tx_Beacon+0x60>)
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <Tx_Beacon+0x58>)
 80030e4:	f002 fb42 	bl	800576c <Principal_Datalogger_Save_Buffer>
//	else
//		Verify_CAN &= 0x02;
//
//	//Wait Transmission finish
//	for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
}
 80030e8:	bf00      	nop
 80030ea:	3708      	adds	r7, #8
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20002d98 	.word	0x20002d98
 80030f4:	20002cc4 	.word	0x20002cc4
 80030f8:	20001bc8 	.word	0x20001bc8
 80030fc:	20001bd0 	.word	0x20001bd0
 8003100:	20001c84 	.word	0x20001c84

08003104 <Save_PDM>:

static void Save_PDM()
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 800310a:	2300      	movs	r3, #0
 800310c:	73fb      	strb	r3, [r7, #15]
 800310e:	2300      	movs	r3, #0
 8003110:	73bb      	strb	r3, [r7, #14]

	if(Flag_Datalogger == DL_Save)
 8003112:	4b87      	ldr	r3, [pc, #540]	; (8003330 <Save_PDM+0x22c>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b01      	cmp	r3, #1
 8003118:	f000 8105 	beq.w	8003326 <Save_PDM+0x222>
		return;

	id = PDM_FIRST_ID;
 800311c:	2332      	movs	r3, #50	; 0x32
 800311e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003120:	2308      	movs	r3, #8
 8003122:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[0] << 8;
 8003124:	2300      	movs	r3, #0
 8003126:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[0] & 0xff;
 8003128:	4b82      	ldr	r3, [pc, #520]	; (8003334 <Save_PDM+0x230>)
 800312a:	889b      	ldrh	r3, [r3, #4]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[1] << 8;
 8003130:	2300      	movs	r3, #0
 8003132:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[1] & 0xff;
 8003134:	4b7f      	ldr	r3, [pc, #508]	; (8003334 <Save_PDM+0x230>)
 8003136:	88db      	ldrh	r3, [r3, #6]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[2] << 8;
 800313c:	2300      	movs	r3, #0
 800313e:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[2] & 0xff;
 8003140:	4b7c      	ldr	r3, [pc, #496]	; (8003334 <Save_PDM+0x230>)
 8003142:	891b      	ldrh	r3, [r3, #8]
 8003144:	b2db      	uxtb	r3, r3
 8003146:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[3] << 8;
 8003148:	2300      	movs	r3, #0
 800314a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[3] & 0xff;
 800314c:	4b79      	ldr	r3, [pc, #484]	; (8003334 <Save_PDM+0x230>)
 800314e:	895b      	ldrh	r3, [r3, #10]
 8003150:	b2db      	uxtb	r3, r3
 8003152:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003154:	7bf8      	ldrb	r0, [r7, #15]
 8003156:	1d3a      	adds	r2, r7, #4
 8003158:	7bb9      	ldrb	r1, [r7, #14]
 800315a:	4b77      	ldr	r3, [pc, #476]	; (8003338 <Save_PDM+0x234>)
 800315c:	f002 fb06 	bl	800576c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 8003160:	2333      	movs	r3, #51	; 0x33
 8003162:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003164:	2308      	movs	r3, #8
 8003166:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[4] << 8;
 8003168:	2300      	movs	r3, #0
 800316a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[4] & 0xff;
 800316c:	4b71      	ldr	r3, [pc, #452]	; (8003334 <Save_PDM+0x230>)
 800316e:	899b      	ldrh	r3, [r3, #12]
 8003170:	b2db      	uxtb	r3, r3
 8003172:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[5] << 8;
 8003174:	2300      	movs	r3, #0
 8003176:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[5] & 0xff;
 8003178:	4b6e      	ldr	r3, [pc, #440]	; (8003334 <Save_PDM+0x230>)
 800317a:	89db      	ldrh	r3, [r3, #14]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[6] << 8;
 8003180:	2300      	movs	r3, #0
 8003182:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[6] & 0xff;
 8003184:	4b6b      	ldr	r3, [pc, #428]	; (8003334 <Save_PDM+0x230>)
 8003186:	8a1b      	ldrh	r3, [r3, #16]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[7] << 8;
 800318c:	2300      	movs	r3, #0
 800318e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[7] & 0xff;
 8003190:	4b68      	ldr	r3, [pc, #416]	; (8003334 <Save_PDM+0x230>)
 8003192:	8a5b      	ldrh	r3, [r3, #18]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003198:	7bf8      	ldrb	r0, [r7, #15]
 800319a:	1d3a      	adds	r2, r7, #4
 800319c:	7bb9      	ldrb	r1, [r7, #14]
 800319e:	4b66      	ldr	r3, [pc, #408]	; (8003338 <Save_PDM+0x234>)
 80031a0:	f002 fae4 	bl	800576c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 80031a4:	2334      	movs	r3, #52	; 0x34
 80031a6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80031a8:	2308      	movs	r3, #8
 80031aa:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[8] << 8;
 80031ac:	2300      	movs	r3, #0
 80031ae:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[8] & 0xff;
 80031b0:	4b60      	ldr	r3, [pc, #384]	; (8003334 <Save_PDM+0x230>)
 80031b2:	8a9b      	ldrh	r3, [r3, #20]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[9] << 8;
 80031b8:	2300      	movs	r3, #0
 80031ba:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[9] & 0xff;
 80031bc:	4b5d      	ldr	r3, [pc, #372]	; (8003334 <Save_PDM+0x230>)
 80031be:	8adb      	ldrh	r3, [r3, #22]
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[10] << 8;
 80031c4:	2300      	movs	r3, #0
 80031c6:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[10] & 0xff;
 80031c8:	4b5a      	ldr	r3, [pc, #360]	; (8003334 <Save_PDM+0x230>)
 80031ca:	8b1b      	ldrh	r3, [r3, #24]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[11] << 8;
 80031d0:	2300      	movs	r3, #0
 80031d2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[11] & 0xff;
 80031d4:	4b57      	ldr	r3, [pc, #348]	; (8003334 <Save_PDM+0x230>)
 80031d6:	8b5b      	ldrh	r3, [r3, #26]
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80031dc:	7bf8      	ldrb	r0, [r7, #15]
 80031de:	1d3a      	adds	r2, r7, #4
 80031e0:	7bb9      	ldrb	r1, [r7, #14]
 80031e2:	4b55      	ldr	r3, [pc, #340]	; (8003338 <Save_PDM+0x234>)
 80031e4:	f002 fac2 	bl	800576c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 80031e8:	2335      	movs	r3, #53	; 0x35
 80031ea:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80031ec:	2308      	movs	r3, #8
 80031ee:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Current_Buffer[12] << 8;
 80031f0:	2300      	movs	r3, #0
 80031f2:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Current_Buffer[12] & 0xff;
 80031f4:	4b4f      	ldr	r3, [pc, #316]	; (8003334 <Save_PDM+0x230>)
 80031f6:	8b9b      	ldrh	r3, [r3, #28]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Current_Buffer[13] << 8;
 80031fc:	2300      	movs	r3, #0
 80031fe:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Current_Buffer[13] & 0xff;
 8003200:	4b4c      	ldr	r3, [pc, #304]	; (8003334 <Save_PDM+0x230>)
 8003202:	8bdb      	ldrh	r3, [r3, #30]
 8003204:	b2db      	uxtb	r3, r3
 8003206:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Current_Buffer[14] << 8;
 8003208:	2300      	movs	r3, #0
 800320a:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Current_Buffer[14] & 0xff;
 800320c:	4b49      	ldr	r3, [pc, #292]	; (8003334 <Save_PDM+0x230>)
 800320e:	8c1b      	ldrh	r3, [r3, #32]
 8003210:	b2db      	uxtb	r3, r3
 8003212:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Current_Buffer[15] << 8;
 8003214:	2300      	movs	r3, #0
 8003216:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Current_Buffer[15] & 0xff;
 8003218:	4b46      	ldr	r3, [pc, #280]	; (8003334 <Save_PDM+0x230>)
 800321a:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800321c:	b2db      	uxtb	r3, r3
 800321e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003220:	7bf8      	ldrb	r0, [r7, #15]
 8003222:	1d3a      	adds	r2, r7, #4
 8003224:	7bb9      	ldrb	r1, [r7, #14]
 8003226:	4b44      	ldr	r3, [pc, #272]	; (8003338 <Save_PDM+0x234>)
 8003228:	f002 faa0 	bl	800576c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 800322c:	2336      	movs	r3, #54	; 0x36
 800322e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003230:	2308      	movs	r3, #8
 8003232:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Tempetature_Buffer[0] << 8;
 8003234:	2300      	movs	r3, #0
 8003236:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Tempetature_Buffer[0] & 0xff;
 8003238:	4b3e      	ldr	r3, [pc, #248]	; (8003334 <Save_PDM+0x230>)
 800323a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800323c:	b2db      	uxtb	r3, r3
 800323e:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Tempetature_Buffer[1] << 8;
 8003240:	2300      	movs	r3, #0
 8003242:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Tempetature_Buffer[1] & 0xff;
 8003244:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <Save_PDM+0x230>)
 8003246:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003248:	b2db      	uxtb	r3, r3
 800324a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Tempetature_Buffer[2] << 8;
 800324c:	2300      	movs	r3, #0
 800324e:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Tempetature_Buffer[2] & 0xff;
 8003250:	4b38      	ldr	r3, [pc, #224]	; (8003334 <Save_PDM+0x230>)
 8003252:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003254:	b2db      	uxtb	r3, r3
 8003256:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Tempetature_Buffer[3] << 8;
 8003258:	2300      	movs	r3, #0
 800325a:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Tempetature_Buffer[3] & 0xff;
 800325c:	4b35      	ldr	r3, [pc, #212]	; (8003334 <Save_PDM+0x230>)
 800325e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003260:	b2db      	uxtb	r3, r3
 8003262:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003264:	7bf8      	ldrb	r0, [r7, #15]
 8003266:	1d3a      	adds	r2, r7, #4
 8003268:	7bb9      	ldrb	r1, [r7, #14]
 800326a:	4b33      	ldr	r3, [pc, #204]	; (8003338 <Save_PDM+0x234>)
 800326c:	f002 fa7e 	bl	800576c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 8003270:	2337      	movs	r3, #55	; 0x37
 8003272:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003274:	2308      	movs	r3, #8
 8003276:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Tempetature_Buffer[4] << 8;
 8003278:	2300      	movs	r3, #0
 800327a:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Tempetature_Buffer[4] & 0xff;
 800327c:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <Save_PDM+0x230>)
 800327e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003280:	b2db      	uxtb	r3, r3
 8003282:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Tempetature_Buffer[5] << 8;
 8003284:	2300      	movs	r3, #0
 8003286:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Tempetature_Buffer[5] & 0xff;
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <Save_PDM+0x230>)
 800328a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800328c:	b2db      	uxtb	r3, r3
 800328e:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Tempetature_Buffer[6] << 8;
 8003290:	2300      	movs	r3, #0
 8003292:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Tempetature_Buffer[6] & 0xff;
 8003294:	4b27      	ldr	r3, [pc, #156]	; (8003334 <Save_PDM+0x230>)
 8003296:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003298:	b2db      	uxtb	r3, r3
 800329a:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Tempetature_Buffer[7] << 8;
 800329c:	2300      	movs	r3, #0
 800329e:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Tempetature_Buffer[7] & 0xff;
 80032a0:	4b24      	ldr	r3, [pc, #144]	; (8003334 <Save_PDM+0x230>)
 80032a2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80032a8:	7bf8      	ldrb	r0, [r7, #15]
 80032aa:	1d3a      	adds	r2, r7, #4
 80032ac:	7bb9      	ldrb	r1, [r7, #14]
 80032ae:	4b22      	ldr	r3, [pc, #136]	; (8003338 <Save_PDM+0x234>)
 80032b0:	f002 fa5c 	bl	800576c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 80032b4:	2338      	movs	r3, #56	; 0x38
 80032b6:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80032b8:	2308      	movs	r3, #8
 80032ba:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Duty_Cycle_Buffer[0] << 8;
 80032bc:	2300      	movs	r3, #0
 80032be:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Duty_Cycle_Buffer[0] & 0xff;
 80032c0:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <Save_PDM+0x230>)
 80032c2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Duty_Cycle_Buffer[1] << 8;
 80032c8:	2300      	movs	r3, #0
 80032ca:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Duty_Cycle_Buffer[1] & 0xff;
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <Save_PDM+0x230>)
 80032ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	71fb      	strb	r3, [r7, #7]
	buffer[4] = PDM_Readings.Duty_Cycle_Buffer[2] << 8;
 80032d4:	2300      	movs	r3, #0
 80032d6:	723b      	strb	r3, [r7, #8]
	buffer[5] = PDM_Readings.Duty_Cycle_Buffer[2] & 0xff;
 80032d8:	4b16      	ldr	r3, [pc, #88]	; (8003334 <Save_PDM+0x230>)
 80032da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	727b      	strb	r3, [r7, #9]
	buffer[6] = PDM_Readings.Duty_Cycle_Buffer[3] << 8;
 80032e0:	2300      	movs	r3, #0
 80032e2:	72bb      	strb	r3, [r7, #10]
	buffer[7] = PDM_Readings.Duty_Cycle_Buffer[3] & 0xff;
 80032e4:	4b13      	ldr	r3, [pc, #76]	; (8003334 <Save_PDM+0x230>)
 80032e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80032ec:	7bf8      	ldrb	r0, [r7, #15]
 80032ee:	1d3a      	adds	r2, r7, #4
 80032f0:	7bb9      	ldrb	r1, [r7, #14]
 80032f2:	4b11      	ldr	r3, [pc, #68]	; (8003338 <Save_PDM+0x234>)
 80032f4:	f002 fa3a 	bl	800576c <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 80032f8:	2339      	movs	r3, #57	; 0x39
 80032fa:	73fb      	strb	r3, [r7, #15]
	length = 4;
 80032fc:	2304      	movs	r3, #4
 80032fe:	73bb      	strb	r3, [r7, #14]

	buffer[0] = PDM_Readings.Input_Voltage << 8;
 8003300:	2300      	movs	r3, #0
 8003302:	713b      	strb	r3, [r7, #4]
	buffer[1] = PDM_Readings.Input_Voltage & 0xff;
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <Save_PDM+0x230>)
 8003306:	881b      	ldrh	r3, [r3, #0]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	717b      	strb	r3, [r7, #5]
	buffer[2] = PDM_Readings.Output_Verify << 8;
 800330c:	2300      	movs	r3, #0
 800330e:	71bb      	strb	r3, [r7, #6]
	buffer[3] = PDM_Readings.Output_Verify & 0xff;
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <Save_PDM+0x230>)
 8003312:	885b      	ldrh	r3, [r3, #2]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	71fb      	strb	r3, [r7, #7]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003318:	7bf8      	ldrb	r0, [r7, #15]
 800331a:	1d3a      	adds	r2, r7, #4
 800331c:	7bb9      	ldrb	r1, [r7, #14]
 800331e:	4b06      	ldr	r3, [pc, #24]	; (8003338 <Save_PDM+0x234>)
 8003320:	f002 fa24 	bl	800576c <Principal_Datalogger_Save_Buffer>
 8003324:	e000      	b.n	8003328 <Save_PDM+0x224>
		return;
 8003326:	bf00      	nop
}
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20001bd0 	.word	0x20001bd0
 8003334:	20001a14 	.word	0x20001a14
 8003338:	20001c84 	.word	0x20001c84

0800333c <Save_ECU>:

static void Save_ECU()
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
	uint8_t id = 0, length = 0, buffer[8];
 8003342:	2300      	movs	r3, #0
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	2300      	movs	r3, #0
 8003348:	73bb      	strb	r3, [r7, #14]

	if(Flag_Datalogger == DL_Save)
 800334a:	4b70      	ldr	r3, [pc, #448]	; (800350c <Save_ECU+0x1d0>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	2b01      	cmp	r3, #1
 8003350:	f000 80d7 	beq.w	8003502 <Save_ECU+0x1c6>
		return;

	id = ECU_FIRST_ID;
 8003354:	231a      	movs	r3, #26
 8003356:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003358:	2308      	movs	r3, #8
 800335a:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.rpm >> 8;
 800335c:	4b6c      	ldr	r3, [pc, #432]	; (8003510 <Save_ECU+0x1d4>)
 800335e:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003362:	121b      	asrs	r3, r3, #8
 8003364:	b21b      	sxth	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.rpm & 0xff;
 800336a:	4b69      	ldr	r3, [pc, #420]	; (8003510 <Save_ECU+0x1d4>)
 800336c:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 8003370:	b2db      	uxtb	r3, r3
 8003372:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.tps >> 8;
 8003374:	4b66      	ldr	r3, [pc, #408]	; (8003510 <Save_ECU+0x1d4>)
 8003376:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800337a:	121b      	asrs	r3, r3, #8
 800337c:	b21b      	sxth	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.tps & 0xff;
 8003382:	4b63      	ldr	r3, [pc, #396]	; (8003510 <Save_ECU+0x1d4>)
 8003384:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003388:	b2db      	uxtb	r3, r3
 800338a:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.iat >> 8;
 800338c:	4b60      	ldr	r3, [pc, #384]	; (8003510 <Save_ECU+0x1d4>)
 800338e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8003392:	121b      	asrs	r3, r3, #8
 8003394:	b21b      	sxth	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.iat & 0xff;
 800339a:	4b5d      	ldr	r3, [pc, #372]	; (8003510 <Save_ECU+0x1d4>)
 800339c:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.ect >> 8;
 80033a4:	4b5a      	ldr	r3, [pc, #360]	; (8003510 <Save_ECU+0x1d4>)
 80033a6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80033aa:	121b      	asrs	r3, r3, #8
 80033ac:	b21b      	sxth	r3, r3
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.ect & 0xff;
 80033b2:	4b57      	ldr	r3, [pc, #348]	; (8003510 <Save_ECU+0x1d4>)
 80033b4:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80033bc:	7bf8      	ldrb	r0, [r7, #15]
 80033be:	1d3a      	adds	r2, r7, #4
 80033c0:	7bb9      	ldrb	r1, [r7, #14]
 80033c2:	4b54      	ldr	r3, [pc, #336]	; (8003514 <Save_ECU+0x1d8>)
 80033c4:	f002 f9d2 	bl	800576c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 80033c8:	231b      	movs	r3, #27
 80033ca:	73fb      	strb	r3, [r7, #15]
	length = 8;
 80033cc:	2308      	movs	r3, #8
 80033ce:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.map >> 8;
 80033d0:	4b4f      	ldr	r3, [pc, #316]	; (8003510 <Save_ECU+0x1d4>)
 80033d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80033d6:	121b      	asrs	r3, r3, #8
 80033d8:	b21b      	sxth	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.map & 0xff;
 80033de:	4b4c      	ldr	r3, [pc, #304]	; (8003510 <Save_ECU+0x1d4>)
 80033e0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.fuel_pressure >> 8;
 80033e8:	4b49      	ldr	r3, [pc, #292]	; (8003510 <Save_ECU+0x1d4>)
 80033ea:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80033ee:	121b      	asrs	r3, r3, #8
 80033f0:	b21b      	sxth	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.fuel_pressure & 0xff;
 80033f6:	4b46      	ldr	r3, [pc, #280]	; (8003510 <Save_ECU+0x1d4>)
 80033f8:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.oil_pressure >> 8;
 8003400:	4b43      	ldr	r3, [pc, #268]	; (8003510 <Save_ECU+0x1d4>)
 8003402:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8003406:	121b      	asrs	r3, r3, #8
 8003408:	b21b      	sxth	r3, r3
 800340a:	b2db      	uxtb	r3, r3
 800340c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.oil_pressure & 0xff;
 800340e:	4b40      	ldr	r3, [pc, #256]	; (8003510 <Save_ECU+0x1d4>)
 8003410:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8003414:	b2db      	uxtb	r3, r3
 8003416:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.coolant_pressure >> 8;
 8003418:	4b3d      	ldr	r3, [pc, #244]	; (8003510 <Save_ECU+0x1d4>)
 800341a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800341e:	121b      	asrs	r3, r3, #8
 8003420:	b21b      	sxth	r3, r3
 8003422:	b2db      	uxtb	r3, r3
 8003424:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.coolant_pressure & 0xff;
 8003426:	4b3a      	ldr	r3, [pc, #232]	; (8003510 <Save_ECU+0x1d4>)
 8003428:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800342c:	b2db      	uxtb	r3, r3
 800342e:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 8003430:	7bf8      	ldrb	r0, [r7, #15]
 8003432:	1d3a      	adds	r2, r7, #4
 8003434:	7bb9      	ldrb	r1, [r7, #14]
 8003436:	4b37      	ldr	r3, [pc, #220]	; (8003514 <Save_ECU+0x1d8>)
 8003438:	f002 f998 	bl	800576c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 800343c:	231c      	movs	r3, #28
 800343e:	73fb      	strb	r3, [r7, #15]
	length = 8;
 8003440:	2308      	movs	r3, #8
 8003442:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.lambda >> 8;
 8003444:	4b32      	ldr	r3, [pc, #200]	; (8003510 <Save_ECU+0x1d4>)
 8003446:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800344a:	121b      	asrs	r3, r3, #8
 800344c:	b21b      	sxth	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.lambda & 0xff;
 8003452:	4b2f      	ldr	r3, [pc, #188]	; (8003510 <Save_ECU+0x1d4>)
 8003454:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8003458:	b2db      	uxtb	r3, r3
 800345a:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.oil_temperature >> 8;
 800345c:	4b2c      	ldr	r3, [pc, #176]	; (8003510 <Save_ECU+0x1d4>)
 800345e:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003462:	121b      	asrs	r3, r3, #8
 8003464:	b21b      	sxth	r3, r3
 8003466:	b2db      	uxtb	r3, r3
 8003468:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.oil_temperature & 0xff;
 800346a:	4b29      	ldr	r3, [pc, #164]	; (8003510 <Save_ECU+0x1d4>)
 800346c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003470:	b2db      	uxtb	r3, r3
 8003472:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.wheel_speed_fl;
 8003474:	4b26      	ldr	r3, [pc, #152]	; (8003510 <Save_ECU+0x1d4>)
 8003476:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800347a:	b2db      	uxtb	r3, r3
 800347c:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.wheel_speed_fr;
 800347e:	4b24      	ldr	r3, [pc, #144]	; (8003510 <Save_ECU+0x1d4>)
 8003480:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8003484:	b2db      	uxtb	r3, r3
 8003486:	727b      	strb	r3, [r7, #9]
	buffer[6] = ECU_Data.wheel_speed_rl;
 8003488:	4b21      	ldr	r3, [pc, #132]	; (8003510 <Save_ECU+0x1d4>)
 800348a:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800348e:	b2db      	uxtb	r3, r3
 8003490:	72bb      	strb	r3, [r7, #10]
	buffer[7] = ECU_Data.wheel_speed_rr;
 8003492:	4b1f      	ldr	r3, [pc, #124]	; (8003510 <Save_ECU+0x1d4>)
 8003494:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8003498:	b2db      	uxtb	r3, r3
 800349a:	72fb      	strb	r3, [r7, #11]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 800349c:	7bf8      	ldrb	r0, [r7, #15]
 800349e:	1d3a      	adds	r2, r7, #4
 80034a0:	7bb9      	ldrb	r1, [r7, #14]
 80034a2:	4b1c      	ldr	r3, [pc, #112]	; (8003514 <Save_ECU+0x1d8>)
 80034a4:	f002 f962 	bl	800576c <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 80034a8:	231d      	movs	r3, #29
 80034aa:	73fb      	strb	r3, [r7, #15]
	length = 6;
 80034ac:	2306      	movs	r3, #6
 80034ae:	73bb      	strb	r3, [r7, #14]

	buffer[0] = ECU_Data.battery_voltage >> 8;
 80034b0:	4b17      	ldr	r3, [pc, #92]	; (8003510 <Save_ECU+0x1d4>)
 80034b2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034b6:	121b      	asrs	r3, r3, #8
 80034b8:	b21b      	sxth	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	713b      	strb	r3, [r7, #4]
	buffer[1] = ECU_Data.battery_voltage & 0xff;
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <Save_ECU+0x1d4>)
 80034c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	717b      	strb	r3, [r7, #5]
	buffer[2] = ECU_Data.total_fuel_flow >> 8;
 80034c8:	4b11      	ldr	r3, [pc, #68]	; (8003510 <Save_ECU+0x1d4>)
 80034ca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034ce:	121b      	asrs	r3, r3, #8
 80034d0:	b21b      	sxth	r3, r3
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	71bb      	strb	r3, [r7, #6]
	buffer[3] = ECU_Data.total_fuel_flow & 0xff;
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <Save_ECU+0x1d4>)
 80034d8:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ECU_Data.gear & 0xff;
 80034e0:	4b0b      	ldr	r3, [pc, #44]	; (8003510 <Save_ECU+0x1d4>)
 80034e2:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	723b      	strb	r3, [r7, #8]
	buffer[5] = ECU_Data.electro_fan & 0xff;
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <Save_ECU+0x1d4>)
 80034ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	727b      	strb	r3, [r7, #9]

	Principal_Datalogger_Save_Buffer(id, length, buffer, &File_Struct);
 80034f4:	7bf8      	ldrb	r0, [r7, #15]
 80034f6:	1d3a      	adds	r2, r7, #4
 80034f8:	7bb9      	ldrb	r1, [r7, #14]
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <Save_ECU+0x1d8>)
 80034fc:	f002 f936 	bl	800576c <Principal_Datalogger_Save_Buffer>

	return;
 8003500:	e000      	b.n	8003504 <Save_ECU+0x1c8>
		return;
 8003502:	bf00      	nop
}
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	20001bd0 	.word	0x20001bd0
 8003510:	20002e24 	.word	0x20002e24
 8003514:	20001c84 	.word	0x20001c84

08003518 <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b08e      	sub	sp, #56	; 0x38
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 8003520:	2300      	movs	r3, #0
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
 8003524:	2300      	movs	r3, #0
 8003526:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 8003528:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 800352e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003532:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003534:	2300      	movs	r3, #0
 8003536:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003538:	2301      	movs	r3, #1
 800353a:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 800353c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353e:	0b5b      	lsrs	r3, r3, #13
 8003540:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 8003542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003544:	00db      	lsls	r3, r3, #3
 8003546:	b29b      	uxth	r3, r3
 8003548:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 800354a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354c:	0b5b      	lsrs	r3, r3, #13
 800354e:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8003550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	b29b      	uxth	r3, r3
 8003556:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 800355c:	2301      	movs	r3, #1
 800355e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 8003564:	230e      	movs	r3, #14
 8003566:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f003 fd4e 	bl	8007010 <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 8003574:	2300      	movs	r3, #0
 8003576:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 8003578:	2300      	movs	r3, #0
 800357a:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800357c:	2300      	movs	r3, #0
 800357e:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8003580:	2301      	movs	r3, #1
 8003582:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8003584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003586:	0b5b      	lsrs	r3, r3, #13
 8003588:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 800358a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	b29b      	uxth	r3, r3
 8003590:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 8003592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003594:	0b5b      	lsrs	r3, r3, #13
 8003596:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8003598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	b29b      	uxth	r3, r3
 800359e:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80035a4:	2301      	movs	r3, #1
 80035a6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 80035a8:	2301      	movs	r3, #1
 80035aa:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 80035ac:	230f      	movs	r3, #15
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80035b0:	f107 0308 	add.w	r3, r7, #8
 80035b4:	4619      	mov	r1, r3
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f003 fd2a 	bl	8007010 <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT600, 2, CAN_RX_FIFO0);
 80035bc:	2300      	movs	r3, #0
 80035be:	2202      	movs	r2, #2
 80035c0:	f240 2181 	movw	r1, #641	; 0x281
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7fc ffef 	bl	80005a8 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 3, CAN_RX_FIFO0);
 80035ca:	2200      	movs	r2, #0
 80035cc:	2103      	movs	r1, #3
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f7fe fd2e 	bl	8002030 <PDM_CAN_FilterConfig>

	HAL_CAN_Start(hcan);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f003 fdfb 	bl	80071d0 <HAL_CAN_Start>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80035da:	2102      	movs	r1, #2
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f004 f85d 	bl	800769c <HAL_CAN_ActivateNotification>
}
 80035e2:	bf00      	nop
 80035e4:	3738      	adds	r7, #56	; 0x38
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 80035f8:	78fb      	ldrb	r3, [r7, #3]
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	d830      	bhi.n	8003660 <Principal_Transmit_Msg+0x74>
 80035fe:	a201      	add	r2, pc, #4	; (adr r2, 8003604 <Principal_Transmit_Msg+0x18>)
 8003600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003604:	08003625 	.word	0x08003625
 8003608:	0800362d 	.word	0x0800362d
 800360c:	08003635 	.word	0x08003635
 8003610:	08003645 	.word	0x08003645
 8003614:	0800363d 	.word	0x0800363d
 8003618:	08003655 	.word	0x08003655
 800361c:	0800365b 	.word	0x0800365b
 8003620:	0800364d 	.word	0x0800364d
	{
		case Analog_1_4:
			Tx_Analog_1_4(hcan);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f7fe fdf7 	bl	8002218 <Tx_Analog_1_4>
			break;
 800362a:	e01a      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case Analog_5_8:
			Tx_Analog_5_8(hcan);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7fe fe91 	bl	8002354 <Tx_Analog_5_8>
			break;
 8003632:	e016      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case Analog_9_12:
			Tx_Analog_9_12(hcan);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7fe ff2b 	bl	8002490 <Tx_Analog_9_12>
			break;
 800363a:	e012      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case Verify_Msg:
			Tx_Verify(hcan);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff f85b 	bl	80026f8 <Tx_Verify>
			break;
 8003642:	e00e      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case RTC_Msg:
			Tx_RTC(hcan);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f7fe ffc1 	bl	80025cc <Tx_RTC>
			break;
 800364a:	e00a      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case Beacon_Msg:
			Tx_Beacon(hcan);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7ff fd27 	bl	80030a0 <Tx_Beacon>
			break;
 8003652:	e006      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case ECU_Save:
			Save_ECU();
 8003654:	f7ff fe72 	bl	800333c <Save_ECU>
			break;
 8003658:	e003      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		case PDM_Save:
			Save_PDM();
 800365a:	f7ff fd53 	bl	8003104 <Save_PDM>
			break;
 800365e:	e000      	b.n	8003662 <Principal_Transmit_Msg+0x76>

		default:
			return;
 8003660:	bf00      	nop
	}
}
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <Load_EEPROM>:
 */

#include "principal.h"

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b088      	sub	sp, #32
 800366c:	af02      	add	r7, sp, #8
 800366e:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];
	HAL_StatusTypeDef retVal;

	retVal = HAL_I2C_Master_Transmit(hi2c, 0xA0, 0x00, 1, 5);
 8003670:	2305      	movs	r3, #5
 8003672:	9300      	str	r3, [sp, #0]
 8003674:	2301      	movs	r3, #1
 8003676:	2200      	movs	r2, #0
 8003678:	21a0      	movs	r1, #160	; 0xa0
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f005 fa50 	bl	8008b20 <HAL_I2C_Master_Transmit>
 8003680:	4603      	mov	r3, r0
 8003682:	75fb      	strb	r3, [r7, #23]

	if(retVal == HAL_OK)
 8003684:	7dfb      	ldrb	r3, [r7, #23]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d128      	bne.n	80036dc <Load_EEPROM+0x74>
		retVal = HAL_I2C_Master_Receive(hi2c, 0xA1, buffer, EEPROM_BUFFER_SIZE, 5);
 800368a:	f107 020c 	add.w	r2, r7, #12
 800368e:	2305      	movs	r3, #5
 8003690:	9300      	str	r3, [sp, #0]
 8003692:	230b      	movs	r3, #11
 8003694:	21a1      	movs	r1, #161	; 0xa1
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f005 fb40 	bl	8008d1c <HAL_I2C_Master_Receive>
 800369c:	4603      	mov	r3, r0
 800369e:	75fb      	strb	r3, [r7, #23]
	else
		return retVal;

	__LOAD_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 80036a0:	7b3b      	ldrb	r3, [r7, #12]
 80036a2:	3b01      	subs	r3, #1
 80036a4:	2b0a      	cmp	r3, #10
 80036a6:	d849      	bhi.n	800373c <Load_EEPROM+0xd4>
 80036a8:	a201      	add	r2, pc, #4	; (adr r2, 80036b0 <Load_EEPROM+0x48>)
 80036aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ae:	bf00      	nop
 80036b0:	080036e1 	.word	0x080036e1
 80036b4:	080036eb 	.word	0x080036eb
 80036b8:	080036f5 	.word	0x080036f5
 80036bc:	080036fd 	.word	0x080036fd
 80036c0:	08003705 	.word	0x08003705
 80036c4:	0800370d 	.word	0x0800370d
 80036c8:	08003715 	.word	0x08003715
 80036cc:	0800371d 	.word	0x0800371d
 80036d0:	08003725 	.word	0x08003725
 80036d4:	0800372d 	.word	0x0800372d
 80036d8:	08003735 	.word	0x08003735
		return retVal;
 80036dc:	7dfb      	ldrb	r3, [r7, #23]
 80036de:	e35b      	b.n	8003d98 <Load_EEPROM+0x730>
	__LOAD_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 80036e0:	4ba8      	ldr	r3, [pc, #672]	; (8003984 <Load_EEPROM+0x31c>)
 80036e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036e6:	801a      	strh	r2, [r3, #0]
 80036e8:	e02b      	b.n	8003742 <Load_EEPROM+0xda>
 80036ea:	4ba6      	ldr	r3, [pc, #664]	; (8003984 <Load_EEPROM+0x31c>)
 80036ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80036f0:	801a      	strh	r2, [r3, #0]
 80036f2:	e026      	b.n	8003742 <Load_EEPROM+0xda>
 80036f4:	4ba3      	ldr	r3, [pc, #652]	; (8003984 <Load_EEPROM+0x31c>)
 80036f6:	22c8      	movs	r2, #200	; 0xc8
 80036f8:	801a      	strh	r2, [r3, #0]
 80036fa:	e022      	b.n	8003742 <Load_EEPROM+0xda>
 80036fc:	4ba1      	ldr	r3, [pc, #644]	; (8003984 <Load_EEPROM+0x31c>)
 80036fe:	2264      	movs	r2, #100	; 0x64
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	e01e      	b.n	8003742 <Load_EEPROM+0xda>
 8003704:	4b9f      	ldr	r3, [pc, #636]	; (8003984 <Load_EEPROM+0x31c>)
 8003706:	2232      	movs	r2, #50	; 0x32
 8003708:	801a      	strh	r2, [r3, #0]
 800370a:	e01a      	b.n	8003742 <Load_EEPROM+0xda>
 800370c:	4b9d      	ldr	r3, [pc, #628]	; (8003984 <Load_EEPROM+0x31c>)
 800370e:	2228      	movs	r2, #40	; 0x28
 8003710:	801a      	strh	r2, [r3, #0]
 8003712:	e016      	b.n	8003742 <Load_EEPROM+0xda>
 8003714:	4b9b      	ldr	r3, [pc, #620]	; (8003984 <Load_EEPROM+0x31c>)
 8003716:	2214      	movs	r2, #20
 8003718:	801a      	strh	r2, [r3, #0]
 800371a:	e012      	b.n	8003742 <Load_EEPROM+0xda>
 800371c:	4b99      	ldr	r3, [pc, #612]	; (8003984 <Load_EEPROM+0x31c>)
 800371e:	220a      	movs	r2, #10
 8003720:	801a      	strh	r2, [r3, #0]
 8003722:	e00e      	b.n	8003742 <Load_EEPROM+0xda>
 8003724:	4b97      	ldr	r3, [pc, #604]	; (8003984 <Load_EEPROM+0x31c>)
 8003726:	2205      	movs	r2, #5
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	e00a      	b.n	8003742 <Load_EEPROM+0xda>
 800372c:	4b95      	ldr	r3, [pc, #596]	; (8003984 <Load_EEPROM+0x31c>)
 800372e:	2203      	movs	r2, #3
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	e006      	b.n	8003742 <Load_EEPROM+0xda>
 8003734:	4b93      	ldr	r3, [pc, #588]	; (8003984 <Load_EEPROM+0x31c>)
 8003736:	2202      	movs	r2, #2
 8003738:	801a      	strh	r2, [r3, #0]
 800373a:	e002      	b.n	8003742 <Load_EEPROM+0xda>
 800373c:	4b91      	ldr	r3, [pc, #580]	; (8003984 <Load_EEPROM+0x31c>)
 800373e:	2200      	movs	r2, #0
 8003740:	801a      	strh	r2, [r3, #0]
 8003742:	bf00      	nop
	__LOAD_FREQ(buffer[1], Per_Msg[Analog_5_8]);
 8003744:	7b7b      	ldrb	r3, [r7, #13]
 8003746:	3b01      	subs	r3, #1
 8003748:	2b0a      	cmp	r3, #10
 800374a:	d847      	bhi.n	80037dc <Load_EEPROM+0x174>
 800374c:	a201      	add	r2, pc, #4	; (adr r2, 8003754 <Load_EEPROM+0xec>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003781 	.word	0x08003781
 8003758:	0800378b 	.word	0x0800378b
 800375c:	08003795 	.word	0x08003795
 8003760:	0800379d 	.word	0x0800379d
 8003764:	080037a5 	.word	0x080037a5
 8003768:	080037ad 	.word	0x080037ad
 800376c:	080037b5 	.word	0x080037b5
 8003770:	080037bd 	.word	0x080037bd
 8003774:	080037c5 	.word	0x080037c5
 8003778:	080037cd 	.word	0x080037cd
 800377c:	080037d5 	.word	0x080037d5
 8003780:	4b80      	ldr	r3, [pc, #512]	; (8003984 <Load_EEPROM+0x31c>)
 8003782:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003786:	805a      	strh	r2, [r3, #2]
 8003788:	e02b      	b.n	80037e2 <Load_EEPROM+0x17a>
 800378a:	4b7e      	ldr	r3, [pc, #504]	; (8003984 <Load_EEPROM+0x31c>)
 800378c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003790:	805a      	strh	r2, [r3, #2]
 8003792:	e026      	b.n	80037e2 <Load_EEPROM+0x17a>
 8003794:	4b7b      	ldr	r3, [pc, #492]	; (8003984 <Load_EEPROM+0x31c>)
 8003796:	22c8      	movs	r2, #200	; 0xc8
 8003798:	805a      	strh	r2, [r3, #2]
 800379a:	e022      	b.n	80037e2 <Load_EEPROM+0x17a>
 800379c:	4b79      	ldr	r3, [pc, #484]	; (8003984 <Load_EEPROM+0x31c>)
 800379e:	2264      	movs	r2, #100	; 0x64
 80037a0:	805a      	strh	r2, [r3, #2]
 80037a2:	e01e      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037a4:	4b77      	ldr	r3, [pc, #476]	; (8003984 <Load_EEPROM+0x31c>)
 80037a6:	2232      	movs	r2, #50	; 0x32
 80037a8:	805a      	strh	r2, [r3, #2]
 80037aa:	e01a      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037ac:	4b75      	ldr	r3, [pc, #468]	; (8003984 <Load_EEPROM+0x31c>)
 80037ae:	2228      	movs	r2, #40	; 0x28
 80037b0:	805a      	strh	r2, [r3, #2]
 80037b2:	e016      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037b4:	4b73      	ldr	r3, [pc, #460]	; (8003984 <Load_EEPROM+0x31c>)
 80037b6:	2214      	movs	r2, #20
 80037b8:	805a      	strh	r2, [r3, #2]
 80037ba:	e012      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037bc:	4b71      	ldr	r3, [pc, #452]	; (8003984 <Load_EEPROM+0x31c>)
 80037be:	220a      	movs	r2, #10
 80037c0:	805a      	strh	r2, [r3, #2]
 80037c2:	e00e      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037c4:	4b6f      	ldr	r3, [pc, #444]	; (8003984 <Load_EEPROM+0x31c>)
 80037c6:	2205      	movs	r2, #5
 80037c8:	805a      	strh	r2, [r3, #2]
 80037ca:	e00a      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037cc:	4b6d      	ldr	r3, [pc, #436]	; (8003984 <Load_EEPROM+0x31c>)
 80037ce:	2203      	movs	r2, #3
 80037d0:	805a      	strh	r2, [r3, #2]
 80037d2:	e006      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037d4:	4b6b      	ldr	r3, [pc, #428]	; (8003984 <Load_EEPROM+0x31c>)
 80037d6:	2202      	movs	r2, #2
 80037d8:	805a      	strh	r2, [r3, #2]
 80037da:	e002      	b.n	80037e2 <Load_EEPROM+0x17a>
 80037dc:	4b69      	ldr	r3, [pc, #420]	; (8003984 <Load_EEPROM+0x31c>)
 80037de:	2200      	movs	r2, #0
 80037e0:	805a      	strh	r2, [r3, #2]
 80037e2:	bf00      	nop
	__LOAD_FREQ(buffer[2], Per_Msg[Analog_9_12]);
 80037e4:	7bbb      	ldrb	r3, [r7, #14]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	2b0a      	cmp	r3, #10
 80037ea:	d847      	bhi.n	800387c <Load_EEPROM+0x214>
 80037ec:	a201      	add	r2, pc, #4	; (adr r2, 80037f4 <Load_EEPROM+0x18c>)
 80037ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f2:	bf00      	nop
 80037f4:	08003821 	.word	0x08003821
 80037f8:	0800382b 	.word	0x0800382b
 80037fc:	08003835 	.word	0x08003835
 8003800:	0800383d 	.word	0x0800383d
 8003804:	08003845 	.word	0x08003845
 8003808:	0800384d 	.word	0x0800384d
 800380c:	08003855 	.word	0x08003855
 8003810:	0800385d 	.word	0x0800385d
 8003814:	08003865 	.word	0x08003865
 8003818:	0800386d 	.word	0x0800386d
 800381c:	08003875 	.word	0x08003875
 8003820:	4b58      	ldr	r3, [pc, #352]	; (8003984 <Load_EEPROM+0x31c>)
 8003822:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003826:	809a      	strh	r2, [r3, #4]
 8003828:	e02b      	b.n	8003882 <Load_EEPROM+0x21a>
 800382a:	4b56      	ldr	r3, [pc, #344]	; (8003984 <Load_EEPROM+0x31c>)
 800382c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003830:	809a      	strh	r2, [r3, #4]
 8003832:	e026      	b.n	8003882 <Load_EEPROM+0x21a>
 8003834:	4b53      	ldr	r3, [pc, #332]	; (8003984 <Load_EEPROM+0x31c>)
 8003836:	22c8      	movs	r2, #200	; 0xc8
 8003838:	809a      	strh	r2, [r3, #4]
 800383a:	e022      	b.n	8003882 <Load_EEPROM+0x21a>
 800383c:	4b51      	ldr	r3, [pc, #324]	; (8003984 <Load_EEPROM+0x31c>)
 800383e:	2264      	movs	r2, #100	; 0x64
 8003840:	809a      	strh	r2, [r3, #4]
 8003842:	e01e      	b.n	8003882 <Load_EEPROM+0x21a>
 8003844:	4b4f      	ldr	r3, [pc, #316]	; (8003984 <Load_EEPROM+0x31c>)
 8003846:	2232      	movs	r2, #50	; 0x32
 8003848:	809a      	strh	r2, [r3, #4]
 800384a:	e01a      	b.n	8003882 <Load_EEPROM+0x21a>
 800384c:	4b4d      	ldr	r3, [pc, #308]	; (8003984 <Load_EEPROM+0x31c>)
 800384e:	2228      	movs	r2, #40	; 0x28
 8003850:	809a      	strh	r2, [r3, #4]
 8003852:	e016      	b.n	8003882 <Load_EEPROM+0x21a>
 8003854:	4b4b      	ldr	r3, [pc, #300]	; (8003984 <Load_EEPROM+0x31c>)
 8003856:	2214      	movs	r2, #20
 8003858:	809a      	strh	r2, [r3, #4]
 800385a:	e012      	b.n	8003882 <Load_EEPROM+0x21a>
 800385c:	4b49      	ldr	r3, [pc, #292]	; (8003984 <Load_EEPROM+0x31c>)
 800385e:	220a      	movs	r2, #10
 8003860:	809a      	strh	r2, [r3, #4]
 8003862:	e00e      	b.n	8003882 <Load_EEPROM+0x21a>
 8003864:	4b47      	ldr	r3, [pc, #284]	; (8003984 <Load_EEPROM+0x31c>)
 8003866:	2205      	movs	r2, #5
 8003868:	809a      	strh	r2, [r3, #4]
 800386a:	e00a      	b.n	8003882 <Load_EEPROM+0x21a>
 800386c:	4b45      	ldr	r3, [pc, #276]	; (8003984 <Load_EEPROM+0x31c>)
 800386e:	2203      	movs	r2, #3
 8003870:	809a      	strh	r2, [r3, #4]
 8003872:	e006      	b.n	8003882 <Load_EEPROM+0x21a>
 8003874:	4b43      	ldr	r3, [pc, #268]	; (8003984 <Load_EEPROM+0x31c>)
 8003876:	2202      	movs	r2, #2
 8003878:	809a      	strh	r2, [r3, #4]
 800387a:	e002      	b.n	8003882 <Load_EEPROM+0x21a>
 800387c:	4b41      	ldr	r3, [pc, #260]	; (8003984 <Load_EEPROM+0x31c>)
 800387e:	2200      	movs	r2, #0
 8003880:	809a      	strh	r2, [r3, #4]
 8003882:	bf00      	nop
	__LOAD_FREQ(buffer[3], Per_Msg[RTC_Msg]);
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	3b01      	subs	r3, #1
 8003888:	2b0a      	cmp	r3, #10
 800388a:	d847      	bhi.n	800391c <Load_EEPROM+0x2b4>
 800388c:	a201      	add	r2, pc, #4	; (adr r2, 8003894 <Load_EEPROM+0x22c>)
 800388e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	080038c1 	.word	0x080038c1
 8003898:	080038cb 	.word	0x080038cb
 800389c:	080038d5 	.word	0x080038d5
 80038a0:	080038dd 	.word	0x080038dd
 80038a4:	080038e5 	.word	0x080038e5
 80038a8:	080038ed 	.word	0x080038ed
 80038ac:	080038f5 	.word	0x080038f5
 80038b0:	080038fd 	.word	0x080038fd
 80038b4:	08003905 	.word	0x08003905
 80038b8:	0800390d 	.word	0x0800390d
 80038bc:	08003915 	.word	0x08003915
 80038c0:	4b30      	ldr	r3, [pc, #192]	; (8003984 <Load_EEPROM+0x31c>)
 80038c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038c6:	80da      	strh	r2, [r3, #6]
 80038c8:	e02b      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038ca:	4b2e      	ldr	r3, [pc, #184]	; (8003984 <Load_EEPROM+0x31c>)
 80038cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80038d0:	80da      	strh	r2, [r3, #6]
 80038d2:	e026      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038d4:	4b2b      	ldr	r3, [pc, #172]	; (8003984 <Load_EEPROM+0x31c>)
 80038d6:	22c8      	movs	r2, #200	; 0xc8
 80038d8:	80da      	strh	r2, [r3, #6]
 80038da:	e022      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038dc:	4b29      	ldr	r3, [pc, #164]	; (8003984 <Load_EEPROM+0x31c>)
 80038de:	2264      	movs	r2, #100	; 0x64
 80038e0:	80da      	strh	r2, [r3, #6]
 80038e2:	e01e      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038e4:	4b27      	ldr	r3, [pc, #156]	; (8003984 <Load_EEPROM+0x31c>)
 80038e6:	2232      	movs	r2, #50	; 0x32
 80038e8:	80da      	strh	r2, [r3, #6]
 80038ea:	e01a      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038ec:	4b25      	ldr	r3, [pc, #148]	; (8003984 <Load_EEPROM+0x31c>)
 80038ee:	2228      	movs	r2, #40	; 0x28
 80038f0:	80da      	strh	r2, [r3, #6]
 80038f2:	e016      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038f4:	4b23      	ldr	r3, [pc, #140]	; (8003984 <Load_EEPROM+0x31c>)
 80038f6:	2214      	movs	r2, #20
 80038f8:	80da      	strh	r2, [r3, #6]
 80038fa:	e012      	b.n	8003922 <Load_EEPROM+0x2ba>
 80038fc:	4b21      	ldr	r3, [pc, #132]	; (8003984 <Load_EEPROM+0x31c>)
 80038fe:	220a      	movs	r2, #10
 8003900:	80da      	strh	r2, [r3, #6]
 8003902:	e00e      	b.n	8003922 <Load_EEPROM+0x2ba>
 8003904:	4b1f      	ldr	r3, [pc, #124]	; (8003984 <Load_EEPROM+0x31c>)
 8003906:	2205      	movs	r2, #5
 8003908:	80da      	strh	r2, [r3, #6]
 800390a:	e00a      	b.n	8003922 <Load_EEPROM+0x2ba>
 800390c:	4b1d      	ldr	r3, [pc, #116]	; (8003984 <Load_EEPROM+0x31c>)
 800390e:	2203      	movs	r2, #3
 8003910:	80da      	strh	r2, [r3, #6]
 8003912:	e006      	b.n	8003922 <Load_EEPROM+0x2ba>
 8003914:	4b1b      	ldr	r3, [pc, #108]	; (8003984 <Load_EEPROM+0x31c>)
 8003916:	2202      	movs	r2, #2
 8003918:	80da      	strh	r2, [r3, #6]
 800391a:	e002      	b.n	8003922 <Load_EEPROM+0x2ba>
 800391c:	4b19      	ldr	r3, [pc, #100]	; (8003984 <Load_EEPROM+0x31c>)
 800391e:	2200      	movs	r2, #0
 8003920:	80da      	strh	r2, [r3, #6]
 8003922:	bf00      	nop
	__LOAD_FREQ(buffer[4], Per_Msg[Verify_Msg]);
 8003924:	7c3b      	ldrb	r3, [r7, #16]
 8003926:	3b01      	subs	r3, #1
 8003928:	2b0a      	cmp	r3, #10
 800392a:	d849      	bhi.n	80039c0 <Load_EEPROM+0x358>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <Load_EEPROM+0x2cc>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003961 	.word	0x08003961
 8003938:	0800396b 	.word	0x0800396b
 800393c:	08003975 	.word	0x08003975
 8003940:	0800397d 	.word	0x0800397d
 8003944:	08003989 	.word	0x08003989
 8003948:	08003991 	.word	0x08003991
 800394c:	08003999 	.word	0x08003999
 8003950:	080039a1 	.word	0x080039a1
 8003954:	080039a9 	.word	0x080039a9
 8003958:	080039b1 	.word	0x080039b1
 800395c:	080039b9 	.word	0x080039b9
 8003960:	4b08      	ldr	r3, [pc, #32]	; (8003984 <Load_EEPROM+0x31c>)
 8003962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003966:	811a      	strh	r2, [r3, #8]
 8003968:	e02d      	b.n	80039c6 <Load_EEPROM+0x35e>
 800396a:	4b06      	ldr	r3, [pc, #24]	; (8003984 <Load_EEPROM+0x31c>)
 800396c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003970:	811a      	strh	r2, [r3, #8]
 8003972:	e028      	b.n	80039c6 <Load_EEPROM+0x35e>
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <Load_EEPROM+0x31c>)
 8003976:	22c8      	movs	r2, #200	; 0xc8
 8003978:	811a      	strh	r2, [r3, #8]
 800397a:	e024      	b.n	80039c6 <Load_EEPROM+0x35e>
 800397c:	4b01      	ldr	r3, [pc, #4]	; (8003984 <Load_EEPROM+0x31c>)
 800397e:	2264      	movs	r2, #100	; 0x64
 8003980:	811a      	strh	r2, [r3, #8]
 8003982:	e020      	b.n	80039c6 <Load_EEPROM+0x35e>
 8003984:	20002e7c 	.word	0x20002e7c
 8003988:	4ba7      	ldr	r3, [pc, #668]	; (8003c28 <Load_EEPROM+0x5c0>)
 800398a:	2232      	movs	r2, #50	; 0x32
 800398c:	811a      	strh	r2, [r3, #8]
 800398e:	e01a      	b.n	80039c6 <Load_EEPROM+0x35e>
 8003990:	4ba5      	ldr	r3, [pc, #660]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003992:	2228      	movs	r2, #40	; 0x28
 8003994:	811a      	strh	r2, [r3, #8]
 8003996:	e016      	b.n	80039c6 <Load_EEPROM+0x35e>
 8003998:	4ba3      	ldr	r3, [pc, #652]	; (8003c28 <Load_EEPROM+0x5c0>)
 800399a:	2214      	movs	r2, #20
 800399c:	811a      	strh	r2, [r3, #8]
 800399e:	e012      	b.n	80039c6 <Load_EEPROM+0x35e>
 80039a0:	4ba1      	ldr	r3, [pc, #644]	; (8003c28 <Load_EEPROM+0x5c0>)
 80039a2:	220a      	movs	r2, #10
 80039a4:	811a      	strh	r2, [r3, #8]
 80039a6:	e00e      	b.n	80039c6 <Load_EEPROM+0x35e>
 80039a8:	4b9f      	ldr	r3, [pc, #636]	; (8003c28 <Load_EEPROM+0x5c0>)
 80039aa:	2205      	movs	r2, #5
 80039ac:	811a      	strh	r2, [r3, #8]
 80039ae:	e00a      	b.n	80039c6 <Load_EEPROM+0x35e>
 80039b0:	4b9d      	ldr	r3, [pc, #628]	; (8003c28 <Load_EEPROM+0x5c0>)
 80039b2:	2203      	movs	r2, #3
 80039b4:	811a      	strh	r2, [r3, #8]
 80039b6:	e006      	b.n	80039c6 <Load_EEPROM+0x35e>
 80039b8:	4b9b      	ldr	r3, [pc, #620]	; (8003c28 <Load_EEPROM+0x5c0>)
 80039ba:	2202      	movs	r2, #2
 80039bc:	811a      	strh	r2, [r3, #8]
 80039be:	e002      	b.n	80039c6 <Load_EEPROM+0x35e>
 80039c0:	4b99      	ldr	r3, [pc, #612]	; (8003c28 <Load_EEPROM+0x5c0>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	811a      	strh	r2, [r3, #8]
 80039c6:	bf00      	nop
	__LOAD_FREQ(buffer[5], Per_Msg[ECU_Save]);
 80039c8:	7c7b      	ldrb	r3, [r7, #17]
 80039ca:	3b01      	subs	r3, #1
 80039cc:	2b0a      	cmp	r3, #10
 80039ce:	d847      	bhi.n	8003a60 <Load_EEPROM+0x3f8>
 80039d0:	a201      	add	r2, pc, #4	; (adr r2, 80039d8 <Load_EEPROM+0x370>)
 80039d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d6:	bf00      	nop
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003a0f 	.word	0x08003a0f
 80039e0:	08003a19 	.word	0x08003a19
 80039e4:	08003a21 	.word	0x08003a21
 80039e8:	08003a29 	.word	0x08003a29
 80039ec:	08003a31 	.word	0x08003a31
 80039f0:	08003a39 	.word	0x08003a39
 80039f4:	08003a41 	.word	0x08003a41
 80039f8:	08003a49 	.word	0x08003a49
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	4b88      	ldr	r3, [pc, #544]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a0a:	815a      	strh	r2, [r3, #10]
 8003a0c:	e02b      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a0e:	4b86      	ldr	r3, [pc, #536]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a14:	815a      	strh	r2, [r3, #10]
 8003a16:	e026      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a18:	4b83      	ldr	r3, [pc, #524]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a1a:	22c8      	movs	r2, #200	; 0xc8
 8003a1c:	815a      	strh	r2, [r3, #10]
 8003a1e:	e022      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a20:	4b81      	ldr	r3, [pc, #516]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a22:	2264      	movs	r2, #100	; 0x64
 8003a24:	815a      	strh	r2, [r3, #10]
 8003a26:	e01e      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a28:	4b7f      	ldr	r3, [pc, #508]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a2a:	2232      	movs	r2, #50	; 0x32
 8003a2c:	815a      	strh	r2, [r3, #10]
 8003a2e:	e01a      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a30:	4b7d      	ldr	r3, [pc, #500]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a32:	2228      	movs	r2, #40	; 0x28
 8003a34:	815a      	strh	r2, [r3, #10]
 8003a36:	e016      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a38:	4b7b      	ldr	r3, [pc, #492]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a3a:	2214      	movs	r2, #20
 8003a3c:	815a      	strh	r2, [r3, #10]
 8003a3e:	e012      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a40:	4b79      	ldr	r3, [pc, #484]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a42:	220a      	movs	r2, #10
 8003a44:	815a      	strh	r2, [r3, #10]
 8003a46:	e00e      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a48:	4b77      	ldr	r3, [pc, #476]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a4a:	2205      	movs	r2, #5
 8003a4c:	815a      	strh	r2, [r3, #10]
 8003a4e:	e00a      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a50:	4b75      	ldr	r3, [pc, #468]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a52:	2203      	movs	r2, #3
 8003a54:	815a      	strh	r2, [r3, #10]
 8003a56:	e006      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a58:	4b73      	ldr	r3, [pc, #460]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	815a      	strh	r2, [r3, #10]
 8003a5e:	e002      	b.n	8003a66 <Load_EEPROM+0x3fe>
 8003a60:	4b71      	ldr	r3, [pc, #452]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	815a      	strh	r2, [r3, #10]
 8003a66:	bf00      	nop
	__LOAD_FREQ(buffer[6], Per_Msg[PDM_Save]);
 8003a68:	7cbb      	ldrb	r3, [r7, #18]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	2b0a      	cmp	r3, #10
 8003a6e:	d847      	bhi.n	8003b00 <Load_EEPROM+0x498>
 8003a70:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <Load_EEPROM+0x410>)
 8003a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a76:	bf00      	nop
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	08003aaf 	.word	0x08003aaf
 8003a80:	08003ab9 	.word	0x08003ab9
 8003a84:	08003ac1 	.word	0x08003ac1
 8003a88:	08003ac9 	.word	0x08003ac9
 8003a8c:	08003ad1 	.word	0x08003ad1
 8003a90:	08003ad9 	.word	0x08003ad9
 8003a94:	08003ae1 	.word	0x08003ae1
 8003a98:	08003ae9 	.word	0x08003ae9
 8003a9c:	08003af1 	.word	0x08003af1
 8003aa0:	08003af9 	.word	0x08003af9
 8003aa4:	4b60      	ldr	r3, [pc, #384]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003aa6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003aaa:	819a      	strh	r2, [r3, #12]
 8003aac:	e02b      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003aae:	4b5e      	ldr	r3, [pc, #376]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003ab0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ab4:	819a      	strh	r2, [r3, #12]
 8003ab6:	e026      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ab8:	4b5b      	ldr	r3, [pc, #364]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003aba:	22c8      	movs	r2, #200	; 0xc8
 8003abc:	819a      	strh	r2, [r3, #12]
 8003abe:	e022      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ac0:	4b59      	ldr	r3, [pc, #356]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003ac2:	2264      	movs	r2, #100	; 0x64
 8003ac4:	819a      	strh	r2, [r3, #12]
 8003ac6:	e01e      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ac8:	4b57      	ldr	r3, [pc, #348]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003aca:	2232      	movs	r2, #50	; 0x32
 8003acc:	819a      	strh	r2, [r3, #12]
 8003ace:	e01a      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ad0:	4b55      	ldr	r3, [pc, #340]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003ad2:	2228      	movs	r2, #40	; 0x28
 8003ad4:	819a      	strh	r2, [r3, #12]
 8003ad6:	e016      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ad8:	4b53      	ldr	r3, [pc, #332]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003ada:	2214      	movs	r2, #20
 8003adc:	819a      	strh	r2, [r3, #12]
 8003ade:	e012      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ae0:	4b51      	ldr	r3, [pc, #324]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003ae2:	220a      	movs	r2, #10
 8003ae4:	819a      	strh	r2, [r3, #12]
 8003ae6:	e00e      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003ae8:	4b4f      	ldr	r3, [pc, #316]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003aea:	2205      	movs	r2, #5
 8003aec:	819a      	strh	r2, [r3, #12]
 8003aee:	e00a      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003af0:	4b4d      	ldr	r3, [pc, #308]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003af2:	2203      	movs	r2, #3
 8003af4:	819a      	strh	r2, [r3, #12]
 8003af6:	e006      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003af8:	4b4b      	ldr	r3, [pc, #300]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003afa:	2202      	movs	r2, #2
 8003afc:	819a      	strh	r2, [r3, #12]
 8003afe:	e002      	b.n	8003b06 <Load_EEPROM+0x49e>
 8003b00:	4b49      	ldr	r3, [pc, #292]	; (8003c28 <Load_EEPROM+0x5c0>)
 8003b02:	2200      	movs	r2, #0
 8003b04:	819a      	strh	r2, [r3, #12]
 8003b06:	bf00      	nop

	__LOAD_FREQ(buffer[7], Per_CAN[Analog_1_4]);
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	2b0a      	cmp	r3, #10
 8003b0e:	d847      	bhi.n	8003ba0 <Load_EEPROM+0x538>
 8003b10:	a201      	add	r2, pc, #4	; (adr r2, 8003b18 <Load_EEPROM+0x4b0>)
 8003b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b16:	bf00      	nop
 8003b18:	08003b45 	.word	0x08003b45
 8003b1c:	08003b4f 	.word	0x08003b4f
 8003b20:	08003b59 	.word	0x08003b59
 8003b24:	08003b61 	.word	0x08003b61
 8003b28:	08003b69 	.word	0x08003b69
 8003b2c:	08003b71 	.word	0x08003b71
 8003b30:	08003b79 	.word	0x08003b79
 8003b34:	08003b81 	.word	0x08003b81
 8003b38:	08003b89 	.word	0x08003b89
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003b99 	.word	0x08003b99
 8003b44:	4b39      	ldr	r3, [pc, #228]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b4a:	801a      	strh	r2, [r3, #0]
 8003b4c:	e02b      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b4e:	4b37      	ldr	r3, [pc, #220]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b50:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b54:	801a      	strh	r2, [r3, #0]
 8003b56:	e026      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b58:	4b34      	ldr	r3, [pc, #208]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b5a:	22c8      	movs	r2, #200	; 0xc8
 8003b5c:	801a      	strh	r2, [r3, #0]
 8003b5e:	e022      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b60:	4b32      	ldr	r3, [pc, #200]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b62:	2264      	movs	r2, #100	; 0x64
 8003b64:	801a      	strh	r2, [r3, #0]
 8003b66:	e01e      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b68:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b6a:	2232      	movs	r2, #50	; 0x32
 8003b6c:	801a      	strh	r2, [r3, #0]
 8003b6e:	e01a      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b70:	4b2e      	ldr	r3, [pc, #184]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b72:	2228      	movs	r2, #40	; 0x28
 8003b74:	801a      	strh	r2, [r3, #0]
 8003b76:	e016      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b78:	4b2c      	ldr	r3, [pc, #176]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b7a:	2214      	movs	r2, #20
 8003b7c:	801a      	strh	r2, [r3, #0]
 8003b7e:	e012      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b80:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b82:	220a      	movs	r2, #10
 8003b84:	801a      	strh	r2, [r3, #0]
 8003b86:	e00e      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b88:	4b28      	ldr	r3, [pc, #160]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b8a:	2205      	movs	r2, #5
 8003b8c:	801a      	strh	r2, [r3, #0]
 8003b8e:	e00a      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b90:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b92:	2203      	movs	r2, #3
 8003b94:	801a      	strh	r2, [r3, #0]
 8003b96:	e006      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003b98:	4b24      	ldr	r3, [pc, #144]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003b9a:	2202      	movs	r2, #2
 8003b9c:	801a      	strh	r2, [r3, #0]
 8003b9e:	e002      	b.n	8003ba6 <Load_EEPROM+0x53e>
 8003ba0:	4b22      	ldr	r3, [pc, #136]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	bf00      	nop
	__LOAD_FREQ(buffer[8], Per_CAN[Analog_5_8]);
 8003ba8:	7d3b      	ldrb	r3, [r7, #20]
 8003baa:	3b01      	subs	r3, #1
 8003bac:	2b0a      	cmp	r3, #10
 8003bae:	d84b      	bhi.n	8003c48 <Load_EEPROM+0x5e0>
 8003bb0:	a201      	add	r2, pc, #4	; (adr r2, 8003bb8 <Load_EEPROM+0x550>)
 8003bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb6:	bf00      	nop
 8003bb8:	08003be5 	.word	0x08003be5
 8003bbc:	08003bef 	.word	0x08003bef
 8003bc0:	08003bf9 	.word	0x08003bf9
 8003bc4:	08003c01 	.word	0x08003c01
 8003bc8:	08003c09 	.word	0x08003c09
 8003bcc:	08003c11 	.word	0x08003c11
 8003bd0:	08003c19 	.word	0x08003c19
 8003bd4:	08003c21 	.word	0x08003c21
 8003bd8:	08003c31 	.word	0x08003c31
 8003bdc:	08003c39 	.word	0x08003c39
 8003be0:	08003c41 	.word	0x08003c41
 8003be4:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003be6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bea:	805a      	strh	r2, [r3, #2]
 8003bec:	e02f      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003bee:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003bf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bf4:	805a      	strh	r2, [r3, #2]
 8003bf6:	e02a      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003bfa:	22c8      	movs	r2, #200	; 0xc8
 8003bfc:	805a      	strh	r2, [r3, #2]
 8003bfe:	e026      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c00:	4b0a      	ldr	r3, [pc, #40]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003c02:	2264      	movs	r2, #100	; 0x64
 8003c04:	805a      	strh	r2, [r3, #2]
 8003c06:	e022      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c08:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003c0a:	2232      	movs	r2, #50	; 0x32
 8003c0c:	805a      	strh	r2, [r3, #2]
 8003c0e:	e01e      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003c12:	2228      	movs	r2, #40	; 0x28
 8003c14:	805a      	strh	r2, [r3, #2]
 8003c16:	e01a      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c18:	4b04      	ldr	r3, [pc, #16]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003c1a:	2214      	movs	r2, #20
 8003c1c:	805a      	strh	r2, [r3, #2]
 8003c1e:	e016      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c20:	4b02      	ldr	r3, [pc, #8]	; (8003c2c <Load_EEPROM+0x5c4>)
 8003c22:	220a      	movs	r2, #10
 8003c24:	805a      	strh	r2, [r3, #2]
 8003c26:	e012      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c28:	20002e7c 	.word	0x20002e7c
 8003c2c:	200006fc 	.word	0x200006fc
 8003c30:	4b5b      	ldr	r3, [pc, #364]	; (8003da0 <Load_EEPROM+0x738>)
 8003c32:	2205      	movs	r2, #5
 8003c34:	805a      	strh	r2, [r3, #2]
 8003c36:	e00a      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c38:	4b59      	ldr	r3, [pc, #356]	; (8003da0 <Load_EEPROM+0x738>)
 8003c3a:	2203      	movs	r2, #3
 8003c3c:	805a      	strh	r2, [r3, #2]
 8003c3e:	e006      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c40:	4b57      	ldr	r3, [pc, #348]	; (8003da0 <Load_EEPROM+0x738>)
 8003c42:	2202      	movs	r2, #2
 8003c44:	805a      	strh	r2, [r3, #2]
 8003c46:	e002      	b.n	8003c4e <Load_EEPROM+0x5e6>
 8003c48:	4b55      	ldr	r3, [pc, #340]	; (8003da0 <Load_EEPROM+0x738>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	805a      	strh	r2, [r3, #2]
 8003c4e:	bf00      	nop
	__LOAD_FREQ(buffer[9], Per_CAN[Analog_9_12]);
 8003c50:	7d7b      	ldrb	r3, [r7, #21]
 8003c52:	3b01      	subs	r3, #1
 8003c54:	2b0a      	cmp	r3, #10
 8003c56:	d847      	bhi.n	8003ce8 <Load_EEPROM+0x680>
 8003c58:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <Load_EEPROM+0x5f8>)
 8003c5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c5e:	bf00      	nop
 8003c60:	08003c8d 	.word	0x08003c8d
 8003c64:	08003c97 	.word	0x08003c97
 8003c68:	08003ca1 	.word	0x08003ca1
 8003c6c:	08003ca9 	.word	0x08003ca9
 8003c70:	08003cb1 	.word	0x08003cb1
 8003c74:	08003cb9 	.word	0x08003cb9
 8003c78:	08003cc1 	.word	0x08003cc1
 8003c7c:	08003cc9 	.word	0x08003cc9
 8003c80:	08003cd1 	.word	0x08003cd1
 8003c84:	08003cd9 	.word	0x08003cd9
 8003c88:	08003ce1 	.word	0x08003ce1
 8003c8c:	4b44      	ldr	r3, [pc, #272]	; (8003da0 <Load_EEPROM+0x738>)
 8003c8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c92:	809a      	strh	r2, [r3, #4]
 8003c94:	e02b      	b.n	8003cee <Load_EEPROM+0x686>
 8003c96:	4b42      	ldr	r3, [pc, #264]	; (8003da0 <Load_EEPROM+0x738>)
 8003c98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c9c:	809a      	strh	r2, [r3, #4]
 8003c9e:	e026      	b.n	8003cee <Load_EEPROM+0x686>
 8003ca0:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <Load_EEPROM+0x738>)
 8003ca2:	22c8      	movs	r2, #200	; 0xc8
 8003ca4:	809a      	strh	r2, [r3, #4]
 8003ca6:	e022      	b.n	8003cee <Load_EEPROM+0x686>
 8003ca8:	4b3d      	ldr	r3, [pc, #244]	; (8003da0 <Load_EEPROM+0x738>)
 8003caa:	2264      	movs	r2, #100	; 0x64
 8003cac:	809a      	strh	r2, [r3, #4]
 8003cae:	e01e      	b.n	8003cee <Load_EEPROM+0x686>
 8003cb0:	4b3b      	ldr	r3, [pc, #236]	; (8003da0 <Load_EEPROM+0x738>)
 8003cb2:	2232      	movs	r2, #50	; 0x32
 8003cb4:	809a      	strh	r2, [r3, #4]
 8003cb6:	e01a      	b.n	8003cee <Load_EEPROM+0x686>
 8003cb8:	4b39      	ldr	r3, [pc, #228]	; (8003da0 <Load_EEPROM+0x738>)
 8003cba:	2228      	movs	r2, #40	; 0x28
 8003cbc:	809a      	strh	r2, [r3, #4]
 8003cbe:	e016      	b.n	8003cee <Load_EEPROM+0x686>
 8003cc0:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <Load_EEPROM+0x738>)
 8003cc2:	2214      	movs	r2, #20
 8003cc4:	809a      	strh	r2, [r3, #4]
 8003cc6:	e012      	b.n	8003cee <Load_EEPROM+0x686>
 8003cc8:	4b35      	ldr	r3, [pc, #212]	; (8003da0 <Load_EEPROM+0x738>)
 8003cca:	220a      	movs	r2, #10
 8003ccc:	809a      	strh	r2, [r3, #4]
 8003cce:	e00e      	b.n	8003cee <Load_EEPROM+0x686>
 8003cd0:	4b33      	ldr	r3, [pc, #204]	; (8003da0 <Load_EEPROM+0x738>)
 8003cd2:	2205      	movs	r2, #5
 8003cd4:	809a      	strh	r2, [r3, #4]
 8003cd6:	e00a      	b.n	8003cee <Load_EEPROM+0x686>
 8003cd8:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <Load_EEPROM+0x738>)
 8003cda:	2203      	movs	r2, #3
 8003cdc:	809a      	strh	r2, [r3, #4]
 8003cde:	e006      	b.n	8003cee <Load_EEPROM+0x686>
 8003ce0:	4b2f      	ldr	r3, [pc, #188]	; (8003da0 <Load_EEPROM+0x738>)
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	809a      	strh	r2, [r3, #4]
 8003ce6:	e002      	b.n	8003cee <Load_EEPROM+0x686>
 8003ce8:	4b2d      	ldr	r3, [pc, #180]	; (8003da0 <Load_EEPROM+0x738>)
 8003cea:	2200      	movs	r2, #0
 8003cec:	809a      	strh	r2, [r3, #4]
 8003cee:	bf00      	nop
	__LOAD_FREQ(buffer[10], Per_CAN[RTC_Msg]);
 8003cf0:	7dbb      	ldrb	r3, [r7, #22]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	2b0a      	cmp	r3, #10
 8003cf6:	d847      	bhi.n	8003d88 <Load_EEPROM+0x720>
 8003cf8:	a201      	add	r2, pc, #4	; (adr r2, 8003d00 <Load_EEPROM+0x698>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d2d 	.word	0x08003d2d
 8003d04:	08003d37 	.word	0x08003d37
 8003d08:	08003d41 	.word	0x08003d41
 8003d0c:	08003d49 	.word	0x08003d49
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d59 	.word	0x08003d59
 8003d18:	08003d61 	.word	0x08003d61
 8003d1c:	08003d69 	.word	0x08003d69
 8003d20:	08003d71 	.word	0x08003d71
 8003d24:	08003d79 	.word	0x08003d79
 8003d28:	08003d81 	.word	0x08003d81
 8003d2c:	4b1c      	ldr	r3, [pc, #112]	; (8003da0 <Load_EEPROM+0x738>)
 8003d2e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d32:	80da      	strh	r2, [r3, #6]
 8003d34:	e02b      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d36:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <Load_EEPROM+0x738>)
 8003d38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d3c:	80da      	strh	r2, [r3, #6]
 8003d3e:	e026      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d40:	4b17      	ldr	r3, [pc, #92]	; (8003da0 <Load_EEPROM+0x738>)
 8003d42:	22c8      	movs	r2, #200	; 0xc8
 8003d44:	80da      	strh	r2, [r3, #6]
 8003d46:	e022      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d48:	4b15      	ldr	r3, [pc, #84]	; (8003da0 <Load_EEPROM+0x738>)
 8003d4a:	2264      	movs	r2, #100	; 0x64
 8003d4c:	80da      	strh	r2, [r3, #6]
 8003d4e:	e01e      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <Load_EEPROM+0x738>)
 8003d52:	2232      	movs	r2, #50	; 0x32
 8003d54:	80da      	strh	r2, [r3, #6]
 8003d56:	e01a      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d58:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <Load_EEPROM+0x738>)
 8003d5a:	2228      	movs	r2, #40	; 0x28
 8003d5c:	80da      	strh	r2, [r3, #6]
 8003d5e:	e016      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d60:	4b0f      	ldr	r3, [pc, #60]	; (8003da0 <Load_EEPROM+0x738>)
 8003d62:	2214      	movs	r2, #20
 8003d64:	80da      	strh	r2, [r3, #6]
 8003d66:	e012      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <Load_EEPROM+0x738>)
 8003d6a:	220a      	movs	r2, #10
 8003d6c:	80da      	strh	r2, [r3, #6]
 8003d6e:	e00e      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <Load_EEPROM+0x738>)
 8003d72:	2205      	movs	r2, #5
 8003d74:	80da      	strh	r2, [r3, #6]
 8003d76:	e00a      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d78:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <Load_EEPROM+0x738>)
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	80da      	strh	r2, [r3, #6]
 8003d7e:	e006      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d80:	4b07      	ldr	r3, [pc, #28]	; (8003da0 <Load_EEPROM+0x738>)
 8003d82:	2202      	movs	r2, #2
 8003d84:	80da      	strh	r2, [r3, #6]
 8003d86:	e002      	b.n	8003d8e <Load_EEPROM+0x726>
 8003d88:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <Load_EEPROM+0x738>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	80da      	strh	r2, [r3, #6]
 8003d8e:	bf00      	nop

	Input_Config = buffer[11];
 8003d90:	7dfa      	ldrb	r2, [r7, #23]
 8003d92:	4b04      	ldr	r3, [pc, #16]	; (8003da4 <Load_EEPROM+0x73c>)
 8003d94:	701a      	strb	r2, [r3, #0]

	return retVal;
 8003d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	200006fc 	.word	0x200006fc
 8003da4:	200006f8 	.word	0x200006f8

08003da8 <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b088      	sub	sp, #32
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE];

	__SAVE_FREQ(buffer[0], Per_Msg[Analog_1_4]);
 8003db0:	4ba9      	ldr	r3, [pc, #676]	; (8004058 <Save_EEPROM+0x2b0>)
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003db8:	f000 8081 	beq.w	8003ebe <Save_EEPROM+0x116>
 8003dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003dc0:	f300 809e 	bgt.w	8003f00 <Save_EEPROM+0x158>
 8003dc4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dc8:	d07c      	beq.n	8003ec4 <Save_EEPROM+0x11c>
 8003dca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003dce:	f300 8097 	bgt.w	8003f00 <Save_EEPROM+0x158>
 8003dd2:	2bc8      	cmp	r3, #200	; 0xc8
 8003dd4:	d079      	beq.n	8003eca <Save_EEPROM+0x122>
 8003dd6:	2bc8      	cmp	r3, #200	; 0xc8
 8003dd8:	f300 8092 	bgt.w	8003f00 <Save_EEPROM+0x158>
 8003ddc:	2b32      	cmp	r3, #50	; 0x32
 8003dde:	dc6b      	bgt.n	8003eb8 <Save_EEPROM+0x110>
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	f2c0 808d 	blt.w	8003f00 <Save_EEPROM+0x158>
 8003de6:	3b02      	subs	r3, #2
 8003de8:	2b30      	cmp	r3, #48	; 0x30
 8003dea:	f200 8089 	bhi.w	8003f00 <Save_EEPROM+0x158>
 8003dee:	a201      	add	r2, pc, #4	; (adr r2, 8003df4 <Save_EEPROM+0x4c>)
 8003df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df4:	08003efb 	.word	0x08003efb
 8003df8:	08003ef5 	.word	0x08003ef5
 8003dfc:	08003f01 	.word	0x08003f01
 8003e00:	08003eef 	.word	0x08003eef
 8003e04:	08003f01 	.word	0x08003f01
 8003e08:	08003f01 	.word	0x08003f01
 8003e0c:	08003f01 	.word	0x08003f01
 8003e10:	08003f01 	.word	0x08003f01
 8003e14:	08003ee9 	.word	0x08003ee9
 8003e18:	08003f01 	.word	0x08003f01
 8003e1c:	08003f01 	.word	0x08003f01
 8003e20:	08003f01 	.word	0x08003f01
 8003e24:	08003f01 	.word	0x08003f01
 8003e28:	08003f01 	.word	0x08003f01
 8003e2c:	08003f01 	.word	0x08003f01
 8003e30:	08003f01 	.word	0x08003f01
 8003e34:	08003f01 	.word	0x08003f01
 8003e38:	08003f01 	.word	0x08003f01
 8003e3c:	08003ee3 	.word	0x08003ee3
 8003e40:	08003f01 	.word	0x08003f01
 8003e44:	08003f01 	.word	0x08003f01
 8003e48:	08003f01 	.word	0x08003f01
 8003e4c:	08003f01 	.word	0x08003f01
 8003e50:	08003f01 	.word	0x08003f01
 8003e54:	08003f01 	.word	0x08003f01
 8003e58:	08003f01 	.word	0x08003f01
 8003e5c:	08003f01 	.word	0x08003f01
 8003e60:	08003f01 	.word	0x08003f01
 8003e64:	08003f01 	.word	0x08003f01
 8003e68:	08003f01 	.word	0x08003f01
 8003e6c:	08003f01 	.word	0x08003f01
 8003e70:	08003f01 	.word	0x08003f01
 8003e74:	08003f01 	.word	0x08003f01
 8003e78:	08003f01 	.word	0x08003f01
 8003e7c:	08003f01 	.word	0x08003f01
 8003e80:	08003f01 	.word	0x08003f01
 8003e84:	08003f01 	.word	0x08003f01
 8003e88:	08003f01 	.word	0x08003f01
 8003e8c:	08003edd 	.word	0x08003edd
 8003e90:	08003f01 	.word	0x08003f01
 8003e94:	08003f01 	.word	0x08003f01
 8003e98:	08003f01 	.word	0x08003f01
 8003e9c:	08003f01 	.word	0x08003f01
 8003ea0:	08003f01 	.word	0x08003f01
 8003ea4:	08003f01 	.word	0x08003f01
 8003ea8:	08003f01 	.word	0x08003f01
 8003eac:	08003f01 	.word	0x08003f01
 8003eb0:	08003f01 	.word	0x08003f01
 8003eb4:	08003ed7 	.word	0x08003ed7
 8003eb8:	2b64      	cmp	r3, #100	; 0x64
 8003eba:	d009      	beq.n	8003ed0 <Save_EEPROM+0x128>
 8003ebc:	e020      	b.n	8003f00 <Save_EEPROM+0x158>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	733b      	strb	r3, [r7, #12]
 8003ec2:	e01f      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	733b      	strb	r3, [r7, #12]
 8003ec8:	e01c      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	733b      	strb	r3, [r7, #12]
 8003ece:	e019      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ed0:	2304      	movs	r3, #4
 8003ed2:	733b      	strb	r3, [r7, #12]
 8003ed4:	e016      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ed6:	2305      	movs	r3, #5
 8003ed8:	733b      	strb	r3, [r7, #12]
 8003eda:	e013      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003edc:	2306      	movs	r3, #6
 8003ede:	733b      	strb	r3, [r7, #12]
 8003ee0:	e010      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ee2:	2307      	movs	r3, #7
 8003ee4:	733b      	strb	r3, [r7, #12]
 8003ee6:	e00d      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	733b      	strb	r3, [r7, #12]
 8003eec:	e00a      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003eee:	2309      	movs	r3, #9
 8003ef0:	733b      	strb	r3, [r7, #12]
 8003ef2:	e007      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003ef4:	230a      	movs	r3, #10
 8003ef6:	733b      	strb	r3, [r7, #12]
 8003ef8:	e004      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003efa:	230b      	movs	r3, #11
 8003efc:	733b      	strb	r3, [r7, #12]
 8003efe:	e001      	b.n	8003f04 <Save_EEPROM+0x15c>
 8003f00:	2300      	movs	r3, #0
 8003f02:	733b      	strb	r3, [r7, #12]
 8003f04:	bf00      	nop
	__SAVE_FREQ(buffer[1], Per_Msg[Analog_5_8]);
 8003f06:	4b54      	ldr	r3, [pc, #336]	; (8004058 <Save_EEPROM+0x2b0>)
 8003f08:	885b      	ldrh	r3, [r3, #2]
 8003f0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f0e:	f000 8082 	beq.w	8004016 <Save_EEPROM+0x26e>
 8003f12:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f16:	f300 80a1 	bgt.w	800405c <Save_EEPROM+0x2b4>
 8003f1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f1e:	d07d      	beq.n	800401c <Save_EEPROM+0x274>
 8003f20:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f24:	f300 809a 	bgt.w	800405c <Save_EEPROM+0x2b4>
 8003f28:	2bc8      	cmp	r3, #200	; 0xc8
 8003f2a:	d07a      	beq.n	8004022 <Save_EEPROM+0x27a>
 8003f2c:	2bc8      	cmp	r3, #200	; 0xc8
 8003f2e:	f300 8095 	bgt.w	800405c <Save_EEPROM+0x2b4>
 8003f32:	2b32      	cmp	r3, #50	; 0x32
 8003f34:	dc6c      	bgt.n	8004010 <Save_EEPROM+0x268>
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	f2c0 8090 	blt.w	800405c <Save_EEPROM+0x2b4>
 8003f3c:	3b02      	subs	r3, #2
 8003f3e:	2b30      	cmp	r3, #48	; 0x30
 8003f40:	f200 808c 	bhi.w	800405c <Save_EEPROM+0x2b4>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <Save_EEPROM+0x1a4>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08004053 	.word	0x08004053
 8003f50:	0800404d 	.word	0x0800404d
 8003f54:	0800405d 	.word	0x0800405d
 8003f58:	08004047 	.word	0x08004047
 8003f5c:	0800405d 	.word	0x0800405d
 8003f60:	0800405d 	.word	0x0800405d
 8003f64:	0800405d 	.word	0x0800405d
 8003f68:	0800405d 	.word	0x0800405d
 8003f6c:	08004041 	.word	0x08004041
 8003f70:	0800405d 	.word	0x0800405d
 8003f74:	0800405d 	.word	0x0800405d
 8003f78:	0800405d 	.word	0x0800405d
 8003f7c:	0800405d 	.word	0x0800405d
 8003f80:	0800405d 	.word	0x0800405d
 8003f84:	0800405d 	.word	0x0800405d
 8003f88:	0800405d 	.word	0x0800405d
 8003f8c:	0800405d 	.word	0x0800405d
 8003f90:	0800405d 	.word	0x0800405d
 8003f94:	0800403b 	.word	0x0800403b
 8003f98:	0800405d 	.word	0x0800405d
 8003f9c:	0800405d 	.word	0x0800405d
 8003fa0:	0800405d 	.word	0x0800405d
 8003fa4:	0800405d 	.word	0x0800405d
 8003fa8:	0800405d 	.word	0x0800405d
 8003fac:	0800405d 	.word	0x0800405d
 8003fb0:	0800405d 	.word	0x0800405d
 8003fb4:	0800405d 	.word	0x0800405d
 8003fb8:	0800405d 	.word	0x0800405d
 8003fbc:	0800405d 	.word	0x0800405d
 8003fc0:	0800405d 	.word	0x0800405d
 8003fc4:	0800405d 	.word	0x0800405d
 8003fc8:	0800405d 	.word	0x0800405d
 8003fcc:	0800405d 	.word	0x0800405d
 8003fd0:	0800405d 	.word	0x0800405d
 8003fd4:	0800405d 	.word	0x0800405d
 8003fd8:	0800405d 	.word	0x0800405d
 8003fdc:	0800405d 	.word	0x0800405d
 8003fe0:	0800405d 	.word	0x0800405d
 8003fe4:	08004035 	.word	0x08004035
 8003fe8:	0800405d 	.word	0x0800405d
 8003fec:	0800405d 	.word	0x0800405d
 8003ff0:	0800405d 	.word	0x0800405d
 8003ff4:	0800405d 	.word	0x0800405d
 8003ff8:	0800405d 	.word	0x0800405d
 8003ffc:	0800405d 	.word	0x0800405d
 8004000:	0800405d 	.word	0x0800405d
 8004004:	0800405d 	.word	0x0800405d
 8004008:	0800405d 	.word	0x0800405d
 800400c:	0800402f 	.word	0x0800402f
 8004010:	2b64      	cmp	r3, #100	; 0x64
 8004012:	d009      	beq.n	8004028 <Save_EEPROM+0x280>
 8004014:	e022      	b.n	800405c <Save_EEPROM+0x2b4>
 8004016:	2301      	movs	r3, #1
 8004018:	737b      	strb	r3, [r7, #13]
 800401a:	e021      	b.n	8004060 <Save_EEPROM+0x2b8>
 800401c:	2302      	movs	r3, #2
 800401e:	737b      	strb	r3, [r7, #13]
 8004020:	e01e      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004022:	2303      	movs	r3, #3
 8004024:	737b      	strb	r3, [r7, #13]
 8004026:	e01b      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004028:	2304      	movs	r3, #4
 800402a:	737b      	strb	r3, [r7, #13]
 800402c:	e018      	b.n	8004060 <Save_EEPROM+0x2b8>
 800402e:	2305      	movs	r3, #5
 8004030:	737b      	strb	r3, [r7, #13]
 8004032:	e015      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004034:	2306      	movs	r3, #6
 8004036:	737b      	strb	r3, [r7, #13]
 8004038:	e012      	b.n	8004060 <Save_EEPROM+0x2b8>
 800403a:	2307      	movs	r3, #7
 800403c:	737b      	strb	r3, [r7, #13]
 800403e:	e00f      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004040:	2308      	movs	r3, #8
 8004042:	737b      	strb	r3, [r7, #13]
 8004044:	e00c      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004046:	2309      	movs	r3, #9
 8004048:	737b      	strb	r3, [r7, #13]
 800404a:	e009      	b.n	8004060 <Save_EEPROM+0x2b8>
 800404c:	230a      	movs	r3, #10
 800404e:	737b      	strb	r3, [r7, #13]
 8004050:	e006      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004052:	230b      	movs	r3, #11
 8004054:	737b      	strb	r3, [r7, #13]
 8004056:	e003      	b.n	8004060 <Save_EEPROM+0x2b8>
 8004058:	20002e7c 	.word	0x20002e7c
 800405c:	2300      	movs	r3, #0
 800405e:	737b      	strb	r3, [r7, #13]
 8004060:	bf00      	nop
	__SAVE_FREQ(buffer[2], Per_Msg[Analog_9_12]);
 8004062:	4baa      	ldr	r3, [pc, #680]	; (800430c <Save_EEPROM+0x564>)
 8004064:	889b      	ldrh	r3, [r3, #4]
 8004066:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800406a:	f000 8082 	beq.w	8004172 <Save_EEPROM+0x3ca>
 800406e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004072:	f300 809f 	bgt.w	80041b4 <Save_EEPROM+0x40c>
 8004076:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800407a:	d07d      	beq.n	8004178 <Save_EEPROM+0x3d0>
 800407c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004080:	f300 8098 	bgt.w	80041b4 <Save_EEPROM+0x40c>
 8004084:	2bc8      	cmp	r3, #200	; 0xc8
 8004086:	d07a      	beq.n	800417e <Save_EEPROM+0x3d6>
 8004088:	2bc8      	cmp	r3, #200	; 0xc8
 800408a:	f300 8093 	bgt.w	80041b4 <Save_EEPROM+0x40c>
 800408e:	2b32      	cmp	r3, #50	; 0x32
 8004090:	dc6c      	bgt.n	800416c <Save_EEPROM+0x3c4>
 8004092:	2b02      	cmp	r3, #2
 8004094:	f2c0 808e 	blt.w	80041b4 <Save_EEPROM+0x40c>
 8004098:	3b02      	subs	r3, #2
 800409a:	2b30      	cmp	r3, #48	; 0x30
 800409c:	f200 808a 	bhi.w	80041b4 <Save_EEPROM+0x40c>
 80040a0:	a201      	add	r2, pc, #4	; (adr r2, 80040a8 <Save_EEPROM+0x300>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080041af 	.word	0x080041af
 80040ac:	080041a9 	.word	0x080041a9
 80040b0:	080041b5 	.word	0x080041b5
 80040b4:	080041a3 	.word	0x080041a3
 80040b8:	080041b5 	.word	0x080041b5
 80040bc:	080041b5 	.word	0x080041b5
 80040c0:	080041b5 	.word	0x080041b5
 80040c4:	080041b5 	.word	0x080041b5
 80040c8:	0800419d 	.word	0x0800419d
 80040cc:	080041b5 	.word	0x080041b5
 80040d0:	080041b5 	.word	0x080041b5
 80040d4:	080041b5 	.word	0x080041b5
 80040d8:	080041b5 	.word	0x080041b5
 80040dc:	080041b5 	.word	0x080041b5
 80040e0:	080041b5 	.word	0x080041b5
 80040e4:	080041b5 	.word	0x080041b5
 80040e8:	080041b5 	.word	0x080041b5
 80040ec:	080041b5 	.word	0x080041b5
 80040f0:	08004197 	.word	0x08004197
 80040f4:	080041b5 	.word	0x080041b5
 80040f8:	080041b5 	.word	0x080041b5
 80040fc:	080041b5 	.word	0x080041b5
 8004100:	080041b5 	.word	0x080041b5
 8004104:	080041b5 	.word	0x080041b5
 8004108:	080041b5 	.word	0x080041b5
 800410c:	080041b5 	.word	0x080041b5
 8004110:	080041b5 	.word	0x080041b5
 8004114:	080041b5 	.word	0x080041b5
 8004118:	080041b5 	.word	0x080041b5
 800411c:	080041b5 	.word	0x080041b5
 8004120:	080041b5 	.word	0x080041b5
 8004124:	080041b5 	.word	0x080041b5
 8004128:	080041b5 	.word	0x080041b5
 800412c:	080041b5 	.word	0x080041b5
 8004130:	080041b5 	.word	0x080041b5
 8004134:	080041b5 	.word	0x080041b5
 8004138:	080041b5 	.word	0x080041b5
 800413c:	080041b5 	.word	0x080041b5
 8004140:	08004191 	.word	0x08004191
 8004144:	080041b5 	.word	0x080041b5
 8004148:	080041b5 	.word	0x080041b5
 800414c:	080041b5 	.word	0x080041b5
 8004150:	080041b5 	.word	0x080041b5
 8004154:	080041b5 	.word	0x080041b5
 8004158:	080041b5 	.word	0x080041b5
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041b5 	.word	0x080041b5
 8004164:	080041b5 	.word	0x080041b5
 8004168:	0800418b 	.word	0x0800418b
 800416c:	2b64      	cmp	r3, #100	; 0x64
 800416e:	d009      	beq.n	8004184 <Save_EEPROM+0x3dc>
 8004170:	e020      	b.n	80041b4 <Save_EEPROM+0x40c>
 8004172:	2301      	movs	r3, #1
 8004174:	73bb      	strb	r3, [r7, #14]
 8004176:	e01f      	b.n	80041b8 <Save_EEPROM+0x410>
 8004178:	2302      	movs	r3, #2
 800417a:	73bb      	strb	r3, [r7, #14]
 800417c:	e01c      	b.n	80041b8 <Save_EEPROM+0x410>
 800417e:	2303      	movs	r3, #3
 8004180:	73bb      	strb	r3, [r7, #14]
 8004182:	e019      	b.n	80041b8 <Save_EEPROM+0x410>
 8004184:	2304      	movs	r3, #4
 8004186:	73bb      	strb	r3, [r7, #14]
 8004188:	e016      	b.n	80041b8 <Save_EEPROM+0x410>
 800418a:	2305      	movs	r3, #5
 800418c:	73bb      	strb	r3, [r7, #14]
 800418e:	e013      	b.n	80041b8 <Save_EEPROM+0x410>
 8004190:	2306      	movs	r3, #6
 8004192:	73bb      	strb	r3, [r7, #14]
 8004194:	e010      	b.n	80041b8 <Save_EEPROM+0x410>
 8004196:	2307      	movs	r3, #7
 8004198:	73bb      	strb	r3, [r7, #14]
 800419a:	e00d      	b.n	80041b8 <Save_EEPROM+0x410>
 800419c:	2308      	movs	r3, #8
 800419e:	73bb      	strb	r3, [r7, #14]
 80041a0:	e00a      	b.n	80041b8 <Save_EEPROM+0x410>
 80041a2:	2309      	movs	r3, #9
 80041a4:	73bb      	strb	r3, [r7, #14]
 80041a6:	e007      	b.n	80041b8 <Save_EEPROM+0x410>
 80041a8:	230a      	movs	r3, #10
 80041aa:	73bb      	strb	r3, [r7, #14]
 80041ac:	e004      	b.n	80041b8 <Save_EEPROM+0x410>
 80041ae:	230b      	movs	r3, #11
 80041b0:	73bb      	strb	r3, [r7, #14]
 80041b2:	e001      	b.n	80041b8 <Save_EEPROM+0x410>
 80041b4:	2300      	movs	r3, #0
 80041b6:	73bb      	strb	r3, [r7, #14]
 80041b8:	bf00      	nop
	__SAVE_FREQ(buffer[3], Per_Msg[RTC_Msg]);
 80041ba:	4b54      	ldr	r3, [pc, #336]	; (800430c <Save_EEPROM+0x564>)
 80041bc:	88db      	ldrh	r3, [r3, #6]
 80041be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041c2:	f000 8082 	beq.w	80042ca <Save_EEPROM+0x522>
 80041c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80041ca:	f300 80a1 	bgt.w	8004310 <Save_EEPROM+0x568>
 80041ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041d2:	d07d      	beq.n	80042d0 <Save_EEPROM+0x528>
 80041d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80041d8:	f300 809a 	bgt.w	8004310 <Save_EEPROM+0x568>
 80041dc:	2bc8      	cmp	r3, #200	; 0xc8
 80041de:	d07a      	beq.n	80042d6 <Save_EEPROM+0x52e>
 80041e0:	2bc8      	cmp	r3, #200	; 0xc8
 80041e2:	f300 8095 	bgt.w	8004310 <Save_EEPROM+0x568>
 80041e6:	2b32      	cmp	r3, #50	; 0x32
 80041e8:	dc6c      	bgt.n	80042c4 <Save_EEPROM+0x51c>
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	f2c0 8090 	blt.w	8004310 <Save_EEPROM+0x568>
 80041f0:	3b02      	subs	r3, #2
 80041f2:	2b30      	cmp	r3, #48	; 0x30
 80041f4:	f200 808c 	bhi.w	8004310 <Save_EEPROM+0x568>
 80041f8:	a201      	add	r2, pc, #4	; (adr r2, 8004200 <Save_EEPROM+0x458>)
 80041fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fe:	bf00      	nop
 8004200:	08004307 	.word	0x08004307
 8004204:	08004301 	.word	0x08004301
 8004208:	08004311 	.word	0x08004311
 800420c:	080042fb 	.word	0x080042fb
 8004210:	08004311 	.word	0x08004311
 8004214:	08004311 	.word	0x08004311
 8004218:	08004311 	.word	0x08004311
 800421c:	08004311 	.word	0x08004311
 8004220:	080042f5 	.word	0x080042f5
 8004224:	08004311 	.word	0x08004311
 8004228:	08004311 	.word	0x08004311
 800422c:	08004311 	.word	0x08004311
 8004230:	08004311 	.word	0x08004311
 8004234:	08004311 	.word	0x08004311
 8004238:	08004311 	.word	0x08004311
 800423c:	08004311 	.word	0x08004311
 8004240:	08004311 	.word	0x08004311
 8004244:	08004311 	.word	0x08004311
 8004248:	080042ef 	.word	0x080042ef
 800424c:	08004311 	.word	0x08004311
 8004250:	08004311 	.word	0x08004311
 8004254:	08004311 	.word	0x08004311
 8004258:	08004311 	.word	0x08004311
 800425c:	08004311 	.word	0x08004311
 8004260:	08004311 	.word	0x08004311
 8004264:	08004311 	.word	0x08004311
 8004268:	08004311 	.word	0x08004311
 800426c:	08004311 	.word	0x08004311
 8004270:	08004311 	.word	0x08004311
 8004274:	08004311 	.word	0x08004311
 8004278:	08004311 	.word	0x08004311
 800427c:	08004311 	.word	0x08004311
 8004280:	08004311 	.word	0x08004311
 8004284:	08004311 	.word	0x08004311
 8004288:	08004311 	.word	0x08004311
 800428c:	08004311 	.word	0x08004311
 8004290:	08004311 	.word	0x08004311
 8004294:	08004311 	.word	0x08004311
 8004298:	080042e9 	.word	0x080042e9
 800429c:	08004311 	.word	0x08004311
 80042a0:	08004311 	.word	0x08004311
 80042a4:	08004311 	.word	0x08004311
 80042a8:	08004311 	.word	0x08004311
 80042ac:	08004311 	.word	0x08004311
 80042b0:	08004311 	.word	0x08004311
 80042b4:	08004311 	.word	0x08004311
 80042b8:	08004311 	.word	0x08004311
 80042bc:	08004311 	.word	0x08004311
 80042c0:	080042e3 	.word	0x080042e3
 80042c4:	2b64      	cmp	r3, #100	; 0x64
 80042c6:	d009      	beq.n	80042dc <Save_EEPROM+0x534>
 80042c8:	e022      	b.n	8004310 <Save_EEPROM+0x568>
 80042ca:	2301      	movs	r3, #1
 80042cc:	73fb      	strb	r3, [r7, #15]
 80042ce:	e021      	b.n	8004314 <Save_EEPROM+0x56c>
 80042d0:	2302      	movs	r3, #2
 80042d2:	73fb      	strb	r3, [r7, #15]
 80042d4:	e01e      	b.n	8004314 <Save_EEPROM+0x56c>
 80042d6:	2303      	movs	r3, #3
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	e01b      	b.n	8004314 <Save_EEPROM+0x56c>
 80042dc:	2304      	movs	r3, #4
 80042de:	73fb      	strb	r3, [r7, #15]
 80042e0:	e018      	b.n	8004314 <Save_EEPROM+0x56c>
 80042e2:	2305      	movs	r3, #5
 80042e4:	73fb      	strb	r3, [r7, #15]
 80042e6:	e015      	b.n	8004314 <Save_EEPROM+0x56c>
 80042e8:	2306      	movs	r3, #6
 80042ea:	73fb      	strb	r3, [r7, #15]
 80042ec:	e012      	b.n	8004314 <Save_EEPROM+0x56c>
 80042ee:	2307      	movs	r3, #7
 80042f0:	73fb      	strb	r3, [r7, #15]
 80042f2:	e00f      	b.n	8004314 <Save_EEPROM+0x56c>
 80042f4:	2308      	movs	r3, #8
 80042f6:	73fb      	strb	r3, [r7, #15]
 80042f8:	e00c      	b.n	8004314 <Save_EEPROM+0x56c>
 80042fa:	2309      	movs	r3, #9
 80042fc:	73fb      	strb	r3, [r7, #15]
 80042fe:	e009      	b.n	8004314 <Save_EEPROM+0x56c>
 8004300:	230a      	movs	r3, #10
 8004302:	73fb      	strb	r3, [r7, #15]
 8004304:	e006      	b.n	8004314 <Save_EEPROM+0x56c>
 8004306:	230b      	movs	r3, #11
 8004308:	73fb      	strb	r3, [r7, #15]
 800430a:	e003      	b.n	8004314 <Save_EEPROM+0x56c>
 800430c:	20002e7c 	.word	0x20002e7c
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	bf00      	nop
	__SAVE_FREQ(buffer[4], Per_Msg[Verify_Msg]);
 8004316:	4baa      	ldr	r3, [pc, #680]	; (80045c0 <Save_EEPROM+0x818>)
 8004318:	891b      	ldrh	r3, [r3, #8]
 800431a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800431e:	f000 8082 	beq.w	8004426 <Save_EEPROM+0x67e>
 8004322:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004326:	f300 809f 	bgt.w	8004468 <Save_EEPROM+0x6c0>
 800432a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800432e:	d07d      	beq.n	800442c <Save_EEPROM+0x684>
 8004330:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004334:	f300 8098 	bgt.w	8004468 <Save_EEPROM+0x6c0>
 8004338:	2bc8      	cmp	r3, #200	; 0xc8
 800433a:	d07a      	beq.n	8004432 <Save_EEPROM+0x68a>
 800433c:	2bc8      	cmp	r3, #200	; 0xc8
 800433e:	f300 8093 	bgt.w	8004468 <Save_EEPROM+0x6c0>
 8004342:	2b32      	cmp	r3, #50	; 0x32
 8004344:	dc6c      	bgt.n	8004420 <Save_EEPROM+0x678>
 8004346:	2b02      	cmp	r3, #2
 8004348:	f2c0 808e 	blt.w	8004468 <Save_EEPROM+0x6c0>
 800434c:	3b02      	subs	r3, #2
 800434e:	2b30      	cmp	r3, #48	; 0x30
 8004350:	f200 808a 	bhi.w	8004468 <Save_EEPROM+0x6c0>
 8004354:	a201      	add	r2, pc, #4	; (adr r2, 800435c <Save_EEPROM+0x5b4>)
 8004356:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435a:	bf00      	nop
 800435c:	08004463 	.word	0x08004463
 8004360:	0800445d 	.word	0x0800445d
 8004364:	08004469 	.word	0x08004469
 8004368:	08004457 	.word	0x08004457
 800436c:	08004469 	.word	0x08004469
 8004370:	08004469 	.word	0x08004469
 8004374:	08004469 	.word	0x08004469
 8004378:	08004469 	.word	0x08004469
 800437c:	08004451 	.word	0x08004451
 8004380:	08004469 	.word	0x08004469
 8004384:	08004469 	.word	0x08004469
 8004388:	08004469 	.word	0x08004469
 800438c:	08004469 	.word	0x08004469
 8004390:	08004469 	.word	0x08004469
 8004394:	08004469 	.word	0x08004469
 8004398:	08004469 	.word	0x08004469
 800439c:	08004469 	.word	0x08004469
 80043a0:	08004469 	.word	0x08004469
 80043a4:	0800444b 	.word	0x0800444b
 80043a8:	08004469 	.word	0x08004469
 80043ac:	08004469 	.word	0x08004469
 80043b0:	08004469 	.word	0x08004469
 80043b4:	08004469 	.word	0x08004469
 80043b8:	08004469 	.word	0x08004469
 80043bc:	08004469 	.word	0x08004469
 80043c0:	08004469 	.word	0x08004469
 80043c4:	08004469 	.word	0x08004469
 80043c8:	08004469 	.word	0x08004469
 80043cc:	08004469 	.word	0x08004469
 80043d0:	08004469 	.word	0x08004469
 80043d4:	08004469 	.word	0x08004469
 80043d8:	08004469 	.word	0x08004469
 80043dc:	08004469 	.word	0x08004469
 80043e0:	08004469 	.word	0x08004469
 80043e4:	08004469 	.word	0x08004469
 80043e8:	08004469 	.word	0x08004469
 80043ec:	08004469 	.word	0x08004469
 80043f0:	08004469 	.word	0x08004469
 80043f4:	08004445 	.word	0x08004445
 80043f8:	08004469 	.word	0x08004469
 80043fc:	08004469 	.word	0x08004469
 8004400:	08004469 	.word	0x08004469
 8004404:	08004469 	.word	0x08004469
 8004408:	08004469 	.word	0x08004469
 800440c:	08004469 	.word	0x08004469
 8004410:	08004469 	.word	0x08004469
 8004414:	08004469 	.word	0x08004469
 8004418:	08004469 	.word	0x08004469
 800441c:	0800443f 	.word	0x0800443f
 8004420:	2b64      	cmp	r3, #100	; 0x64
 8004422:	d009      	beq.n	8004438 <Save_EEPROM+0x690>
 8004424:	e020      	b.n	8004468 <Save_EEPROM+0x6c0>
 8004426:	2301      	movs	r3, #1
 8004428:	743b      	strb	r3, [r7, #16]
 800442a:	e01f      	b.n	800446c <Save_EEPROM+0x6c4>
 800442c:	2302      	movs	r3, #2
 800442e:	743b      	strb	r3, [r7, #16]
 8004430:	e01c      	b.n	800446c <Save_EEPROM+0x6c4>
 8004432:	2303      	movs	r3, #3
 8004434:	743b      	strb	r3, [r7, #16]
 8004436:	e019      	b.n	800446c <Save_EEPROM+0x6c4>
 8004438:	2304      	movs	r3, #4
 800443a:	743b      	strb	r3, [r7, #16]
 800443c:	e016      	b.n	800446c <Save_EEPROM+0x6c4>
 800443e:	2305      	movs	r3, #5
 8004440:	743b      	strb	r3, [r7, #16]
 8004442:	e013      	b.n	800446c <Save_EEPROM+0x6c4>
 8004444:	2306      	movs	r3, #6
 8004446:	743b      	strb	r3, [r7, #16]
 8004448:	e010      	b.n	800446c <Save_EEPROM+0x6c4>
 800444a:	2307      	movs	r3, #7
 800444c:	743b      	strb	r3, [r7, #16]
 800444e:	e00d      	b.n	800446c <Save_EEPROM+0x6c4>
 8004450:	2308      	movs	r3, #8
 8004452:	743b      	strb	r3, [r7, #16]
 8004454:	e00a      	b.n	800446c <Save_EEPROM+0x6c4>
 8004456:	2309      	movs	r3, #9
 8004458:	743b      	strb	r3, [r7, #16]
 800445a:	e007      	b.n	800446c <Save_EEPROM+0x6c4>
 800445c:	230a      	movs	r3, #10
 800445e:	743b      	strb	r3, [r7, #16]
 8004460:	e004      	b.n	800446c <Save_EEPROM+0x6c4>
 8004462:	230b      	movs	r3, #11
 8004464:	743b      	strb	r3, [r7, #16]
 8004466:	e001      	b.n	800446c <Save_EEPROM+0x6c4>
 8004468:	2300      	movs	r3, #0
 800446a:	743b      	strb	r3, [r7, #16]
 800446c:	bf00      	nop
	__SAVE_FREQ(buffer[5], Per_Msg[ECU_Save]);
 800446e:	4b54      	ldr	r3, [pc, #336]	; (80045c0 <Save_EEPROM+0x818>)
 8004470:	895b      	ldrh	r3, [r3, #10]
 8004472:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004476:	f000 8082 	beq.w	800457e <Save_EEPROM+0x7d6>
 800447a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800447e:	f300 80a1 	bgt.w	80045c4 <Save_EEPROM+0x81c>
 8004482:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004486:	d07d      	beq.n	8004584 <Save_EEPROM+0x7dc>
 8004488:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800448c:	f300 809a 	bgt.w	80045c4 <Save_EEPROM+0x81c>
 8004490:	2bc8      	cmp	r3, #200	; 0xc8
 8004492:	d07a      	beq.n	800458a <Save_EEPROM+0x7e2>
 8004494:	2bc8      	cmp	r3, #200	; 0xc8
 8004496:	f300 8095 	bgt.w	80045c4 <Save_EEPROM+0x81c>
 800449a:	2b32      	cmp	r3, #50	; 0x32
 800449c:	dc6c      	bgt.n	8004578 <Save_EEPROM+0x7d0>
 800449e:	2b02      	cmp	r3, #2
 80044a0:	f2c0 8090 	blt.w	80045c4 <Save_EEPROM+0x81c>
 80044a4:	3b02      	subs	r3, #2
 80044a6:	2b30      	cmp	r3, #48	; 0x30
 80044a8:	f200 808c 	bhi.w	80045c4 <Save_EEPROM+0x81c>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <Save_EEPROM+0x70c>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080045bb 	.word	0x080045bb
 80044b8:	080045b5 	.word	0x080045b5
 80044bc:	080045c5 	.word	0x080045c5
 80044c0:	080045af 	.word	0x080045af
 80044c4:	080045c5 	.word	0x080045c5
 80044c8:	080045c5 	.word	0x080045c5
 80044cc:	080045c5 	.word	0x080045c5
 80044d0:	080045c5 	.word	0x080045c5
 80044d4:	080045a9 	.word	0x080045a9
 80044d8:	080045c5 	.word	0x080045c5
 80044dc:	080045c5 	.word	0x080045c5
 80044e0:	080045c5 	.word	0x080045c5
 80044e4:	080045c5 	.word	0x080045c5
 80044e8:	080045c5 	.word	0x080045c5
 80044ec:	080045c5 	.word	0x080045c5
 80044f0:	080045c5 	.word	0x080045c5
 80044f4:	080045c5 	.word	0x080045c5
 80044f8:	080045c5 	.word	0x080045c5
 80044fc:	080045a3 	.word	0x080045a3
 8004500:	080045c5 	.word	0x080045c5
 8004504:	080045c5 	.word	0x080045c5
 8004508:	080045c5 	.word	0x080045c5
 800450c:	080045c5 	.word	0x080045c5
 8004510:	080045c5 	.word	0x080045c5
 8004514:	080045c5 	.word	0x080045c5
 8004518:	080045c5 	.word	0x080045c5
 800451c:	080045c5 	.word	0x080045c5
 8004520:	080045c5 	.word	0x080045c5
 8004524:	080045c5 	.word	0x080045c5
 8004528:	080045c5 	.word	0x080045c5
 800452c:	080045c5 	.word	0x080045c5
 8004530:	080045c5 	.word	0x080045c5
 8004534:	080045c5 	.word	0x080045c5
 8004538:	080045c5 	.word	0x080045c5
 800453c:	080045c5 	.word	0x080045c5
 8004540:	080045c5 	.word	0x080045c5
 8004544:	080045c5 	.word	0x080045c5
 8004548:	080045c5 	.word	0x080045c5
 800454c:	0800459d 	.word	0x0800459d
 8004550:	080045c5 	.word	0x080045c5
 8004554:	080045c5 	.word	0x080045c5
 8004558:	080045c5 	.word	0x080045c5
 800455c:	080045c5 	.word	0x080045c5
 8004560:	080045c5 	.word	0x080045c5
 8004564:	080045c5 	.word	0x080045c5
 8004568:	080045c5 	.word	0x080045c5
 800456c:	080045c5 	.word	0x080045c5
 8004570:	080045c5 	.word	0x080045c5
 8004574:	08004597 	.word	0x08004597
 8004578:	2b64      	cmp	r3, #100	; 0x64
 800457a:	d009      	beq.n	8004590 <Save_EEPROM+0x7e8>
 800457c:	e022      	b.n	80045c4 <Save_EEPROM+0x81c>
 800457e:	2301      	movs	r3, #1
 8004580:	747b      	strb	r3, [r7, #17]
 8004582:	e021      	b.n	80045c8 <Save_EEPROM+0x820>
 8004584:	2302      	movs	r3, #2
 8004586:	747b      	strb	r3, [r7, #17]
 8004588:	e01e      	b.n	80045c8 <Save_EEPROM+0x820>
 800458a:	2303      	movs	r3, #3
 800458c:	747b      	strb	r3, [r7, #17]
 800458e:	e01b      	b.n	80045c8 <Save_EEPROM+0x820>
 8004590:	2304      	movs	r3, #4
 8004592:	747b      	strb	r3, [r7, #17]
 8004594:	e018      	b.n	80045c8 <Save_EEPROM+0x820>
 8004596:	2305      	movs	r3, #5
 8004598:	747b      	strb	r3, [r7, #17]
 800459a:	e015      	b.n	80045c8 <Save_EEPROM+0x820>
 800459c:	2306      	movs	r3, #6
 800459e:	747b      	strb	r3, [r7, #17]
 80045a0:	e012      	b.n	80045c8 <Save_EEPROM+0x820>
 80045a2:	2307      	movs	r3, #7
 80045a4:	747b      	strb	r3, [r7, #17]
 80045a6:	e00f      	b.n	80045c8 <Save_EEPROM+0x820>
 80045a8:	2308      	movs	r3, #8
 80045aa:	747b      	strb	r3, [r7, #17]
 80045ac:	e00c      	b.n	80045c8 <Save_EEPROM+0x820>
 80045ae:	2309      	movs	r3, #9
 80045b0:	747b      	strb	r3, [r7, #17]
 80045b2:	e009      	b.n	80045c8 <Save_EEPROM+0x820>
 80045b4:	230a      	movs	r3, #10
 80045b6:	747b      	strb	r3, [r7, #17]
 80045b8:	e006      	b.n	80045c8 <Save_EEPROM+0x820>
 80045ba:	230b      	movs	r3, #11
 80045bc:	747b      	strb	r3, [r7, #17]
 80045be:	e003      	b.n	80045c8 <Save_EEPROM+0x820>
 80045c0:	20002e7c 	.word	0x20002e7c
 80045c4:	2300      	movs	r3, #0
 80045c6:	747b      	strb	r3, [r7, #17]
 80045c8:	bf00      	nop
	__SAVE_FREQ(buffer[6], Per_Msg[PDM_Save]);
 80045ca:	4baa      	ldr	r3, [pc, #680]	; (8004874 <Save_EEPROM+0xacc>)
 80045cc:	899b      	ldrh	r3, [r3, #12]
 80045ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045d2:	f000 8082 	beq.w	80046da <Save_EEPROM+0x932>
 80045d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045da:	f300 809f 	bgt.w	800471c <Save_EEPROM+0x974>
 80045de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045e2:	d07d      	beq.n	80046e0 <Save_EEPROM+0x938>
 80045e4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045e8:	f300 8098 	bgt.w	800471c <Save_EEPROM+0x974>
 80045ec:	2bc8      	cmp	r3, #200	; 0xc8
 80045ee:	d07a      	beq.n	80046e6 <Save_EEPROM+0x93e>
 80045f0:	2bc8      	cmp	r3, #200	; 0xc8
 80045f2:	f300 8093 	bgt.w	800471c <Save_EEPROM+0x974>
 80045f6:	2b32      	cmp	r3, #50	; 0x32
 80045f8:	dc6c      	bgt.n	80046d4 <Save_EEPROM+0x92c>
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	f2c0 808e 	blt.w	800471c <Save_EEPROM+0x974>
 8004600:	3b02      	subs	r3, #2
 8004602:	2b30      	cmp	r3, #48	; 0x30
 8004604:	f200 808a 	bhi.w	800471c <Save_EEPROM+0x974>
 8004608:	a201      	add	r2, pc, #4	; (adr r2, 8004610 <Save_EEPROM+0x868>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004717 	.word	0x08004717
 8004614:	08004711 	.word	0x08004711
 8004618:	0800471d 	.word	0x0800471d
 800461c:	0800470b 	.word	0x0800470b
 8004620:	0800471d 	.word	0x0800471d
 8004624:	0800471d 	.word	0x0800471d
 8004628:	0800471d 	.word	0x0800471d
 800462c:	0800471d 	.word	0x0800471d
 8004630:	08004705 	.word	0x08004705
 8004634:	0800471d 	.word	0x0800471d
 8004638:	0800471d 	.word	0x0800471d
 800463c:	0800471d 	.word	0x0800471d
 8004640:	0800471d 	.word	0x0800471d
 8004644:	0800471d 	.word	0x0800471d
 8004648:	0800471d 	.word	0x0800471d
 800464c:	0800471d 	.word	0x0800471d
 8004650:	0800471d 	.word	0x0800471d
 8004654:	0800471d 	.word	0x0800471d
 8004658:	080046ff 	.word	0x080046ff
 800465c:	0800471d 	.word	0x0800471d
 8004660:	0800471d 	.word	0x0800471d
 8004664:	0800471d 	.word	0x0800471d
 8004668:	0800471d 	.word	0x0800471d
 800466c:	0800471d 	.word	0x0800471d
 8004670:	0800471d 	.word	0x0800471d
 8004674:	0800471d 	.word	0x0800471d
 8004678:	0800471d 	.word	0x0800471d
 800467c:	0800471d 	.word	0x0800471d
 8004680:	0800471d 	.word	0x0800471d
 8004684:	0800471d 	.word	0x0800471d
 8004688:	0800471d 	.word	0x0800471d
 800468c:	0800471d 	.word	0x0800471d
 8004690:	0800471d 	.word	0x0800471d
 8004694:	0800471d 	.word	0x0800471d
 8004698:	0800471d 	.word	0x0800471d
 800469c:	0800471d 	.word	0x0800471d
 80046a0:	0800471d 	.word	0x0800471d
 80046a4:	0800471d 	.word	0x0800471d
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	0800471d 	.word	0x0800471d
 80046b0:	0800471d 	.word	0x0800471d
 80046b4:	0800471d 	.word	0x0800471d
 80046b8:	0800471d 	.word	0x0800471d
 80046bc:	0800471d 	.word	0x0800471d
 80046c0:	0800471d 	.word	0x0800471d
 80046c4:	0800471d 	.word	0x0800471d
 80046c8:	0800471d 	.word	0x0800471d
 80046cc:	0800471d 	.word	0x0800471d
 80046d0:	080046f3 	.word	0x080046f3
 80046d4:	2b64      	cmp	r3, #100	; 0x64
 80046d6:	d009      	beq.n	80046ec <Save_EEPROM+0x944>
 80046d8:	e020      	b.n	800471c <Save_EEPROM+0x974>
 80046da:	2301      	movs	r3, #1
 80046dc:	74bb      	strb	r3, [r7, #18]
 80046de:	e01f      	b.n	8004720 <Save_EEPROM+0x978>
 80046e0:	2302      	movs	r3, #2
 80046e2:	74bb      	strb	r3, [r7, #18]
 80046e4:	e01c      	b.n	8004720 <Save_EEPROM+0x978>
 80046e6:	2303      	movs	r3, #3
 80046e8:	74bb      	strb	r3, [r7, #18]
 80046ea:	e019      	b.n	8004720 <Save_EEPROM+0x978>
 80046ec:	2304      	movs	r3, #4
 80046ee:	74bb      	strb	r3, [r7, #18]
 80046f0:	e016      	b.n	8004720 <Save_EEPROM+0x978>
 80046f2:	2305      	movs	r3, #5
 80046f4:	74bb      	strb	r3, [r7, #18]
 80046f6:	e013      	b.n	8004720 <Save_EEPROM+0x978>
 80046f8:	2306      	movs	r3, #6
 80046fa:	74bb      	strb	r3, [r7, #18]
 80046fc:	e010      	b.n	8004720 <Save_EEPROM+0x978>
 80046fe:	2307      	movs	r3, #7
 8004700:	74bb      	strb	r3, [r7, #18]
 8004702:	e00d      	b.n	8004720 <Save_EEPROM+0x978>
 8004704:	2308      	movs	r3, #8
 8004706:	74bb      	strb	r3, [r7, #18]
 8004708:	e00a      	b.n	8004720 <Save_EEPROM+0x978>
 800470a:	2309      	movs	r3, #9
 800470c:	74bb      	strb	r3, [r7, #18]
 800470e:	e007      	b.n	8004720 <Save_EEPROM+0x978>
 8004710:	230a      	movs	r3, #10
 8004712:	74bb      	strb	r3, [r7, #18]
 8004714:	e004      	b.n	8004720 <Save_EEPROM+0x978>
 8004716:	230b      	movs	r3, #11
 8004718:	74bb      	strb	r3, [r7, #18]
 800471a:	e001      	b.n	8004720 <Save_EEPROM+0x978>
 800471c:	2300      	movs	r3, #0
 800471e:	74bb      	strb	r3, [r7, #18]
 8004720:	bf00      	nop

	__SAVE_FREQ(buffer[7], Per_CAN[Analog_1_4]);
 8004722:	4b55      	ldr	r3, [pc, #340]	; (8004878 <Save_EEPROM+0xad0>)
 8004724:	881b      	ldrh	r3, [r3, #0]
 8004726:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800472a:	f000 8082 	beq.w	8004832 <Save_EEPROM+0xa8a>
 800472e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004732:	f300 80a3 	bgt.w	800487c <Save_EEPROM+0xad4>
 8004736:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800473a:	d07d      	beq.n	8004838 <Save_EEPROM+0xa90>
 800473c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004740:	f300 809c 	bgt.w	800487c <Save_EEPROM+0xad4>
 8004744:	2bc8      	cmp	r3, #200	; 0xc8
 8004746:	d07a      	beq.n	800483e <Save_EEPROM+0xa96>
 8004748:	2bc8      	cmp	r3, #200	; 0xc8
 800474a:	f300 8097 	bgt.w	800487c <Save_EEPROM+0xad4>
 800474e:	2b32      	cmp	r3, #50	; 0x32
 8004750:	dc6c      	bgt.n	800482c <Save_EEPROM+0xa84>
 8004752:	2b02      	cmp	r3, #2
 8004754:	f2c0 8092 	blt.w	800487c <Save_EEPROM+0xad4>
 8004758:	3b02      	subs	r3, #2
 800475a:	2b30      	cmp	r3, #48	; 0x30
 800475c:	f200 808e 	bhi.w	800487c <Save_EEPROM+0xad4>
 8004760:	a201      	add	r2, pc, #4	; (adr r2, 8004768 <Save_EEPROM+0x9c0>)
 8004762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004766:	bf00      	nop
 8004768:	0800486f 	.word	0x0800486f
 800476c:	08004869 	.word	0x08004869
 8004770:	0800487d 	.word	0x0800487d
 8004774:	08004863 	.word	0x08004863
 8004778:	0800487d 	.word	0x0800487d
 800477c:	0800487d 	.word	0x0800487d
 8004780:	0800487d 	.word	0x0800487d
 8004784:	0800487d 	.word	0x0800487d
 8004788:	0800485d 	.word	0x0800485d
 800478c:	0800487d 	.word	0x0800487d
 8004790:	0800487d 	.word	0x0800487d
 8004794:	0800487d 	.word	0x0800487d
 8004798:	0800487d 	.word	0x0800487d
 800479c:	0800487d 	.word	0x0800487d
 80047a0:	0800487d 	.word	0x0800487d
 80047a4:	0800487d 	.word	0x0800487d
 80047a8:	0800487d 	.word	0x0800487d
 80047ac:	0800487d 	.word	0x0800487d
 80047b0:	08004857 	.word	0x08004857
 80047b4:	0800487d 	.word	0x0800487d
 80047b8:	0800487d 	.word	0x0800487d
 80047bc:	0800487d 	.word	0x0800487d
 80047c0:	0800487d 	.word	0x0800487d
 80047c4:	0800487d 	.word	0x0800487d
 80047c8:	0800487d 	.word	0x0800487d
 80047cc:	0800487d 	.word	0x0800487d
 80047d0:	0800487d 	.word	0x0800487d
 80047d4:	0800487d 	.word	0x0800487d
 80047d8:	0800487d 	.word	0x0800487d
 80047dc:	0800487d 	.word	0x0800487d
 80047e0:	0800487d 	.word	0x0800487d
 80047e4:	0800487d 	.word	0x0800487d
 80047e8:	0800487d 	.word	0x0800487d
 80047ec:	0800487d 	.word	0x0800487d
 80047f0:	0800487d 	.word	0x0800487d
 80047f4:	0800487d 	.word	0x0800487d
 80047f8:	0800487d 	.word	0x0800487d
 80047fc:	0800487d 	.word	0x0800487d
 8004800:	08004851 	.word	0x08004851
 8004804:	0800487d 	.word	0x0800487d
 8004808:	0800487d 	.word	0x0800487d
 800480c:	0800487d 	.word	0x0800487d
 8004810:	0800487d 	.word	0x0800487d
 8004814:	0800487d 	.word	0x0800487d
 8004818:	0800487d 	.word	0x0800487d
 800481c:	0800487d 	.word	0x0800487d
 8004820:	0800487d 	.word	0x0800487d
 8004824:	0800487d 	.word	0x0800487d
 8004828:	0800484b 	.word	0x0800484b
 800482c:	2b64      	cmp	r3, #100	; 0x64
 800482e:	d009      	beq.n	8004844 <Save_EEPROM+0xa9c>
 8004830:	e024      	b.n	800487c <Save_EEPROM+0xad4>
 8004832:	2301      	movs	r3, #1
 8004834:	74fb      	strb	r3, [r7, #19]
 8004836:	e023      	b.n	8004880 <Save_EEPROM+0xad8>
 8004838:	2302      	movs	r3, #2
 800483a:	74fb      	strb	r3, [r7, #19]
 800483c:	e020      	b.n	8004880 <Save_EEPROM+0xad8>
 800483e:	2303      	movs	r3, #3
 8004840:	74fb      	strb	r3, [r7, #19]
 8004842:	e01d      	b.n	8004880 <Save_EEPROM+0xad8>
 8004844:	2304      	movs	r3, #4
 8004846:	74fb      	strb	r3, [r7, #19]
 8004848:	e01a      	b.n	8004880 <Save_EEPROM+0xad8>
 800484a:	2305      	movs	r3, #5
 800484c:	74fb      	strb	r3, [r7, #19]
 800484e:	e017      	b.n	8004880 <Save_EEPROM+0xad8>
 8004850:	2306      	movs	r3, #6
 8004852:	74fb      	strb	r3, [r7, #19]
 8004854:	e014      	b.n	8004880 <Save_EEPROM+0xad8>
 8004856:	2307      	movs	r3, #7
 8004858:	74fb      	strb	r3, [r7, #19]
 800485a:	e011      	b.n	8004880 <Save_EEPROM+0xad8>
 800485c:	2308      	movs	r3, #8
 800485e:	74fb      	strb	r3, [r7, #19]
 8004860:	e00e      	b.n	8004880 <Save_EEPROM+0xad8>
 8004862:	2309      	movs	r3, #9
 8004864:	74fb      	strb	r3, [r7, #19]
 8004866:	e00b      	b.n	8004880 <Save_EEPROM+0xad8>
 8004868:	230a      	movs	r3, #10
 800486a:	74fb      	strb	r3, [r7, #19]
 800486c:	e008      	b.n	8004880 <Save_EEPROM+0xad8>
 800486e:	230b      	movs	r3, #11
 8004870:	74fb      	strb	r3, [r7, #19]
 8004872:	e005      	b.n	8004880 <Save_EEPROM+0xad8>
 8004874:	20002e7c 	.word	0x20002e7c
 8004878:	200006fc 	.word	0x200006fc
 800487c:	2300      	movs	r3, #0
 800487e:	74fb      	strb	r3, [r7, #19]
 8004880:	bf00      	nop
	__SAVE_FREQ(buffer[8], Per_CAN[Analog_5_8]);
 8004882:	4baa      	ldr	r3, [pc, #680]	; (8004b2c <Save_EEPROM+0xd84>)
 8004884:	885b      	ldrh	r3, [r3, #2]
 8004886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800488a:	f000 8082 	beq.w	8004992 <Save_EEPROM+0xbea>
 800488e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004892:	f300 809f 	bgt.w	80049d4 <Save_EEPROM+0xc2c>
 8004896:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800489a:	d07d      	beq.n	8004998 <Save_EEPROM+0xbf0>
 800489c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80048a0:	f300 8098 	bgt.w	80049d4 <Save_EEPROM+0xc2c>
 80048a4:	2bc8      	cmp	r3, #200	; 0xc8
 80048a6:	d07a      	beq.n	800499e <Save_EEPROM+0xbf6>
 80048a8:	2bc8      	cmp	r3, #200	; 0xc8
 80048aa:	f300 8093 	bgt.w	80049d4 <Save_EEPROM+0xc2c>
 80048ae:	2b32      	cmp	r3, #50	; 0x32
 80048b0:	dc6c      	bgt.n	800498c <Save_EEPROM+0xbe4>
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	f2c0 808e 	blt.w	80049d4 <Save_EEPROM+0xc2c>
 80048b8:	3b02      	subs	r3, #2
 80048ba:	2b30      	cmp	r3, #48	; 0x30
 80048bc:	f200 808a 	bhi.w	80049d4 <Save_EEPROM+0xc2c>
 80048c0:	a201      	add	r2, pc, #4	; (adr r2, 80048c8 <Save_EEPROM+0xb20>)
 80048c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c6:	bf00      	nop
 80048c8:	080049cf 	.word	0x080049cf
 80048cc:	080049c9 	.word	0x080049c9
 80048d0:	080049d5 	.word	0x080049d5
 80048d4:	080049c3 	.word	0x080049c3
 80048d8:	080049d5 	.word	0x080049d5
 80048dc:	080049d5 	.word	0x080049d5
 80048e0:	080049d5 	.word	0x080049d5
 80048e4:	080049d5 	.word	0x080049d5
 80048e8:	080049bd 	.word	0x080049bd
 80048ec:	080049d5 	.word	0x080049d5
 80048f0:	080049d5 	.word	0x080049d5
 80048f4:	080049d5 	.word	0x080049d5
 80048f8:	080049d5 	.word	0x080049d5
 80048fc:	080049d5 	.word	0x080049d5
 8004900:	080049d5 	.word	0x080049d5
 8004904:	080049d5 	.word	0x080049d5
 8004908:	080049d5 	.word	0x080049d5
 800490c:	080049d5 	.word	0x080049d5
 8004910:	080049b7 	.word	0x080049b7
 8004914:	080049d5 	.word	0x080049d5
 8004918:	080049d5 	.word	0x080049d5
 800491c:	080049d5 	.word	0x080049d5
 8004920:	080049d5 	.word	0x080049d5
 8004924:	080049d5 	.word	0x080049d5
 8004928:	080049d5 	.word	0x080049d5
 800492c:	080049d5 	.word	0x080049d5
 8004930:	080049d5 	.word	0x080049d5
 8004934:	080049d5 	.word	0x080049d5
 8004938:	080049d5 	.word	0x080049d5
 800493c:	080049d5 	.word	0x080049d5
 8004940:	080049d5 	.word	0x080049d5
 8004944:	080049d5 	.word	0x080049d5
 8004948:	080049d5 	.word	0x080049d5
 800494c:	080049d5 	.word	0x080049d5
 8004950:	080049d5 	.word	0x080049d5
 8004954:	080049d5 	.word	0x080049d5
 8004958:	080049d5 	.word	0x080049d5
 800495c:	080049d5 	.word	0x080049d5
 8004960:	080049b1 	.word	0x080049b1
 8004964:	080049d5 	.word	0x080049d5
 8004968:	080049d5 	.word	0x080049d5
 800496c:	080049d5 	.word	0x080049d5
 8004970:	080049d5 	.word	0x080049d5
 8004974:	080049d5 	.word	0x080049d5
 8004978:	080049d5 	.word	0x080049d5
 800497c:	080049d5 	.word	0x080049d5
 8004980:	080049d5 	.word	0x080049d5
 8004984:	080049d5 	.word	0x080049d5
 8004988:	080049ab 	.word	0x080049ab
 800498c:	2b64      	cmp	r3, #100	; 0x64
 800498e:	d009      	beq.n	80049a4 <Save_EEPROM+0xbfc>
 8004990:	e020      	b.n	80049d4 <Save_EEPROM+0xc2c>
 8004992:	2301      	movs	r3, #1
 8004994:	753b      	strb	r3, [r7, #20]
 8004996:	e01f      	b.n	80049d8 <Save_EEPROM+0xc30>
 8004998:	2302      	movs	r3, #2
 800499a:	753b      	strb	r3, [r7, #20]
 800499c:	e01c      	b.n	80049d8 <Save_EEPROM+0xc30>
 800499e:	2303      	movs	r3, #3
 80049a0:	753b      	strb	r3, [r7, #20]
 80049a2:	e019      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049a4:	2304      	movs	r3, #4
 80049a6:	753b      	strb	r3, [r7, #20]
 80049a8:	e016      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049aa:	2305      	movs	r3, #5
 80049ac:	753b      	strb	r3, [r7, #20]
 80049ae:	e013      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049b0:	2306      	movs	r3, #6
 80049b2:	753b      	strb	r3, [r7, #20]
 80049b4:	e010      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049b6:	2307      	movs	r3, #7
 80049b8:	753b      	strb	r3, [r7, #20]
 80049ba:	e00d      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049bc:	2308      	movs	r3, #8
 80049be:	753b      	strb	r3, [r7, #20]
 80049c0:	e00a      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049c2:	2309      	movs	r3, #9
 80049c4:	753b      	strb	r3, [r7, #20]
 80049c6:	e007      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049c8:	230a      	movs	r3, #10
 80049ca:	753b      	strb	r3, [r7, #20]
 80049cc:	e004      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049ce:	230b      	movs	r3, #11
 80049d0:	753b      	strb	r3, [r7, #20]
 80049d2:	e001      	b.n	80049d8 <Save_EEPROM+0xc30>
 80049d4:	2300      	movs	r3, #0
 80049d6:	753b      	strb	r3, [r7, #20]
 80049d8:	bf00      	nop
	__SAVE_FREQ(buffer[9], Per_CAN[Analog_9_12]);
 80049da:	4b54      	ldr	r3, [pc, #336]	; (8004b2c <Save_EEPROM+0xd84>)
 80049dc:	889b      	ldrh	r3, [r3, #4]
 80049de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049e2:	f000 8082 	beq.w	8004aea <Save_EEPROM+0xd42>
 80049e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049ea:	f300 80a1 	bgt.w	8004b30 <Save_EEPROM+0xd88>
 80049ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049f2:	d07d      	beq.n	8004af0 <Save_EEPROM+0xd48>
 80049f4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049f8:	f300 809a 	bgt.w	8004b30 <Save_EEPROM+0xd88>
 80049fc:	2bc8      	cmp	r3, #200	; 0xc8
 80049fe:	d07a      	beq.n	8004af6 <Save_EEPROM+0xd4e>
 8004a00:	2bc8      	cmp	r3, #200	; 0xc8
 8004a02:	f300 8095 	bgt.w	8004b30 <Save_EEPROM+0xd88>
 8004a06:	2b32      	cmp	r3, #50	; 0x32
 8004a08:	dc6c      	bgt.n	8004ae4 <Save_EEPROM+0xd3c>
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	f2c0 8090 	blt.w	8004b30 <Save_EEPROM+0xd88>
 8004a10:	3b02      	subs	r3, #2
 8004a12:	2b30      	cmp	r3, #48	; 0x30
 8004a14:	f200 808c 	bhi.w	8004b30 <Save_EEPROM+0xd88>
 8004a18:	a201      	add	r2, pc, #4	; (adr r2, 8004a20 <Save_EEPROM+0xc78>)
 8004a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1e:	bf00      	nop
 8004a20:	08004b27 	.word	0x08004b27
 8004a24:	08004b21 	.word	0x08004b21
 8004a28:	08004b31 	.word	0x08004b31
 8004a2c:	08004b1b 	.word	0x08004b1b
 8004a30:	08004b31 	.word	0x08004b31
 8004a34:	08004b31 	.word	0x08004b31
 8004a38:	08004b31 	.word	0x08004b31
 8004a3c:	08004b31 	.word	0x08004b31
 8004a40:	08004b15 	.word	0x08004b15
 8004a44:	08004b31 	.word	0x08004b31
 8004a48:	08004b31 	.word	0x08004b31
 8004a4c:	08004b31 	.word	0x08004b31
 8004a50:	08004b31 	.word	0x08004b31
 8004a54:	08004b31 	.word	0x08004b31
 8004a58:	08004b31 	.word	0x08004b31
 8004a5c:	08004b31 	.word	0x08004b31
 8004a60:	08004b31 	.word	0x08004b31
 8004a64:	08004b31 	.word	0x08004b31
 8004a68:	08004b0f 	.word	0x08004b0f
 8004a6c:	08004b31 	.word	0x08004b31
 8004a70:	08004b31 	.word	0x08004b31
 8004a74:	08004b31 	.word	0x08004b31
 8004a78:	08004b31 	.word	0x08004b31
 8004a7c:	08004b31 	.word	0x08004b31
 8004a80:	08004b31 	.word	0x08004b31
 8004a84:	08004b31 	.word	0x08004b31
 8004a88:	08004b31 	.word	0x08004b31
 8004a8c:	08004b31 	.word	0x08004b31
 8004a90:	08004b31 	.word	0x08004b31
 8004a94:	08004b31 	.word	0x08004b31
 8004a98:	08004b31 	.word	0x08004b31
 8004a9c:	08004b31 	.word	0x08004b31
 8004aa0:	08004b31 	.word	0x08004b31
 8004aa4:	08004b31 	.word	0x08004b31
 8004aa8:	08004b31 	.word	0x08004b31
 8004aac:	08004b31 	.word	0x08004b31
 8004ab0:	08004b31 	.word	0x08004b31
 8004ab4:	08004b31 	.word	0x08004b31
 8004ab8:	08004b09 	.word	0x08004b09
 8004abc:	08004b31 	.word	0x08004b31
 8004ac0:	08004b31 	.word	0x08004b31
 8004ac4:	08004b31 	.word	0x08004b31
 8004ac8:	08004b31 	.word	0x08004b31
 8004acc:	08004b31 	.word	0x08004b31
 8004ad0:	08004b31 	.word	0x08004b31
 8004ad4:	08004b31 	.word	0x08004b31
 8004ad8:	08004b31 	.word	0x08004b31
 8004adc:	08004b31 	.word	0x08004b31
 8004ae0:	08004b03 	.word	0x08004b03
 8004ae4:	2b64      	cmp	r3, #100	; 0x64
 8004ae6:	d009      	beq.n	8004afc <Save_EEPROM+0xd54>
 8004ae8:	e022      	b.n	8004b30 <Save_EEPROM+0xd88>
 8004aea:	2301      	movs	r3, #1
 8004aec:	757b      	strb	r3, [r7, #21]
 8004aee:	e021      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004af0:	2302      	movs	r3, #2
 8004af2:	757b      	strb	r3, [r7, #21]
 8004af4:	e01e      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004af6:	2303      	movs	r3, #3
 8004af8:	757b      	strb	r3, [r7, #21]
 8004afa:	e01b      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004afc:	2304      	movs	r3, #4
 8004afe:	757b      	strb	r3, [r7, #21]
 8004b00:	e018      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b02:	2305      	movs	r3, #5
 8004b04:	757b      	strb	r3, [r7, #21]
 8004b06:	e015      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b08:	2306      	movs	r3, #6
 8004b0a:	757b      	strb	r3, [r7, #21]
 8004b0c:	e012      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b0e:	2307      	movs	r3, #7
 8004b10:	757b      	strb	r3, [r7, #21]
 8004b12:	e00f      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b14:	2308      	movs	r3, #8
 8004b16:	757b      	strb	r3, [r7, #21]
 8004b18:	e00c      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b1a:	2309      	movs	r3, #9
 8004b1c:	757b      	strb	r3, [r7, #21]
 8004b1e:	e009      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b20:	230a      	movs	r3, #10
 8004b22:	757b      	strb	r3, [r7, #21]
 8004b24:	e006      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b26:	230b      	movs	r3, #11
 8004b28:	757b      	strb	r3, [r7, #21]
 8004b2a:	e003      	b.n	8004b34 <Save_EEPROM+0xd8c>
 8004b2c:	200006fc 	.word	0x200006fc
 8004b30:	2300      	movs	r3, #0
 8004b32:	757b      	strb	r3, [r7, #21]
 8004b34:	bf00      	nop
	__SAVE_FREQ(buffer[10], Per_CAN[RTC_Msg]);
 8004b36:	4b5e      	ldr	r3, [pc, #376]	; (8004cb0 <Save_EEPROM+0xf08>)
 8004b38:	88db      	ldrh	r3, [r3, #6]
 8004b3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b3e:	f000 8082 	beq.w	8004c46 <Save_EEPROM+0xe9e>
 8004b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b46:	f300 809f 	bgt.w	8004c88 <Save_EEPROM+0xee0>
 8004b4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b4e:	d07d      	beq.n	8004c4c <Save_EEPROM+0xea4>
 8004b50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b54:	f300 8098 	bgt.w	8004c88 <Save_EEPROM+0xee0>
 8004b58:	2bc8      	cmp	r3, #200	; 0xc8
 8004b5a:	d07a      	beq.n	8004c52 <Save_EEPROM+0xeaa>
 8004b5c:	2bc8      	cmp	r3, #200	; 0xc8
 8004b5e:	f300 8093 	bgt.w	8004c88 <Save_EEPROM+0xee0>
 8004b62:	2b32      	cmp	r3, #50	; 0x32
 8004b64:	dc6c      	bgt.n	8004c40 <Save_EEPROM+0xe98>
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	f2c0 808e 	blt.w	8004c88 <Save_EEPROM+0xee0>
 8004b6c:	3b02      	subs	r3, #2
 8004b6e:	2b30      	cmp	r3, #48	; 0x30
 8004b70:	f200 808a 	bhi.w	8004c88 <Save_EEPROM+0xee0>
 8004b74:	a201      	add	r2, pc, #4	; (adr r2, 8004b7c <Save_EEPROM+0xdd4>)
 8004b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b7a:	bf00      	nop
 8004b7c:	08004c83 	.word	0x08004c83
 8004b80:	08004c7d 	.word	0x08004c7d
 8004b84:	08004c89 	.word	0x08004c89
 8004b88:	08004c77 	.word	0x08004c77
 8004b8c:	08004c89 	.word	0x08004c89
 8004b90:	08004c89 	.word	0x08004c89
 8004b94:	08004c89 	.word	0x08004c89
 8004b98:	08004c89 	.word	0x08004c89
 8004b9c:	08004c71 	.word	0x08004c71
 8004ba0:	08004c89 	.word	0x08004c89
 8004ba4:	08004c89 	.word	0x08004c89
 8004ba8:	08004c89 	.word	0x08004c89
 8004bac:	08004c89 	.word	0x08004c89
 8004bb0:	08004c89 	.word	0x08004c89
 8004bb4:	08004c89 	.word	0x08004c89
 8004bb8:	08004c89 	.word	0x08004c89
 8004bbc:	08004c89 	.word	0x08004c89
 8004bc0:	08004c89 	.word	0x08004c89
 8004bc4:	08004c6b 	.word	0x08004c6b
 8004bc8:	08004c89 	.word	0x08004c89
 8004bcc:	08004c89 	.word	0x08004c89
 8004bd0:	08004c89 	.word	0x08004c89
 8004bd4:	08004c89 	.word	0x08004c89
 8004bd8:	08004c89 	.word	0x08004c89
 8004bdc:	08004c89 	.word	0x08004c89
 8004be0:	08004c89 	.word	0x08004c89
 8004be4:	08004c89 	.word	0x08004c89
 8004be8:	08004c89 	.word	0x08004c89
 8004bec:	08004c89 	.word	0x08004c89
 8004bf0:	08004c89 	.word	0x08004c89
 8004bf4:	08004c89 	.word	0x08004c89
 8004bf8:	08004c89 	.word	0x08004c89
 8004bfc:	08004c89 	.word	0x08004c89
 8004c00:	08004c89 	.word	0x08004c89
 8004c04:	08004c89 	.word	0x08004c89
 8004c08:	08004c89 	.word	0x08004c89
 8004c0c:	08004c89 	.word	0x08004c89
 8004c10:	08004c89 	.word	0x08004c89
 8004c14:	08004c65 	.word	0x08004c65
 8004c18:	08004c89 	.word	0x08004c89
 8004c1c:	08004c89 	.word	0x08004c89
 8004c20:	08004c89 	.word	0x08004c89
 8004c24:	08004c89 	.word	0x08004c89
 8004c28:	08004c89 	.word	0x08004c89
 8004c2c:	08004c89 	.word	0x08004c89
 8004c30:	08004c89 	.word	0x08004c89
 8004c34:	08004c89 	.word	0x08004c89
 8004c38:	08004c89 	.word	0x08004c89
 8004c3c:	08004c5f 	.word	0x08004c5f
 8004c40:	2b64      	cmp	r3, #100	; 0x64
 8004c42:	d009      	beq.n	8004c58 <Save_EEPROM+0xeb0>
 8004c44:	e020      	b.n	8004c88 <Save_EEPROM+0xee0>
 8004c46:	2301      	movs	r3, #1
 8004c48:	75bb      	strb	r3, [r7, #22]
 8004c4a:	e01f      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c4c:	2302      	movs	r3, #2
 8004c4e:	75bb      	strb	r3, [r7, #22]
 8004c50:	e01c      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c52:	2303      	movs	r3, #3
 8004c54:	75bb      	strb	r3, [r7, #22]
 8004c56:	e019      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c58:	2304      	movs	r3, #4
 8004c5a:	75bb      	strb	r3, [r7, #22]
 8004c5c:	e016      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c5e:	2305      	movs	r3, #5
 8004c60:	75bb      	strb	r3, [r7, #22]
 8004c62:	e013      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c64:	2306      	movs	r3, #6
 8004c66:	75bb      	strb	r3, [r7, #22]
 8004c68:	e010      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	75bb      	strb	r3, [r7, #22]
 8004c6e:	e00d      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c70:	2308      	movs	r3, #8
 8004c72:	75bb      	strb	r3, [r7, #22]
 8004c74:	e00a      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c76:	2309      	movs	r3, #9
 8004c78:	75bb      	strb	r3, [r7, #22]
 8004c7a:	e007      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c7c:	230a      	movs	r3, #10
 8004c7e:	75bb      	strb	r3, [r7, #22]
 8004c80:	e004      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c82:	230b      	movs	r3, #11
 8004c84:	75bb      	strb	r3, [r7, #22]
 8004c86:	e001      	b.n	8004c8c <Save_EEPROM+0xee4>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75bb      	strb	r3, [r7, #22]
 8004c8c:	bf00      	nop

	buffer[11] = Input_Config;
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <Save_EEPROM+0xf0c>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	75fb      	strb	r3, [r7, #23]

	return HAL_I2C_Master_Transmit(hi2c, 0xA0, buffer, EEPROM_BUFFER_SIZE, 5);
 8004c94:	f107 020c 	add.w	r2, r7, #12
 8004c98:	2305      	movs	r3, #5
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	230b      	movs	r3, #11
 8004c9e:	21a0      	movs	r1, #160	; 0xa0
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f003 ff3d 	bl	8008b20 <HAL_I2C_Master_Transmit>
 8004ca6:	4603      	mov	r3, r0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3718      	adds	r7, #24
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	200006fc 	.word	0x200006fc
 8004cb4:	200006f8 	.word	0x200006f8

08004cb8 <Principal_Init>:

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 8004cc4:	68b8      	ldr	r0, [r7, #8]
 8004cc6:	f7fe fccf 	bl	8003668 <Load_EEPROM>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 8004cd0:	f000 fbfc 	bl	80054cc <Principal_Hard_Code_Config>

	Principal_RTC_Reg_Check(&Date, &Time);
 8004cd4:	490d      	ldr	r1, [pc, #52]	; (8004d0c <Principal_Init+0x54>)
 8004cd6:	480e      	ldr	r0, [pc, #56]	; (8004d10 <Principal_Init+0x58>)
 8004cd8:	f000 ff94 	bl	8005c04 <Principal_RTC_Reg_Check>

	Principal_Datalogger_Init(&Fatfs_Struct);
 8004cdc:	480d      	ldr	r0, [pc, #52]	; (8004d14 <Principal_Init+0x5c>)
 8004cde:	f000 fc0d 	bl	80054fc <Principal_Datalogger_Init>

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &ADC_Buffer[6], 7);
 8004ce2:	2207      	movs	r2, #7
 8004ce4:	490c      	ldr	r1, [pc, #48]	; (8004d18 <Principal_Init+0x60>)
 8004ce6:	480d      	ldr	r0, [pc, #52]	; (8004d1c <Principal_Init+0x64>)
 8004ce8:	f001 fcb8 	bl	800665c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &ADC_Buffer[0], 6);
 8004cec:	2206      	movs	r2, #6
 8004cee:	490c      	ldr	r1, [pc, #48]	; (8004d20 <Principal_Init+0x68>)
 8004cf0:	480c      	ldr	r0, [pc, #48]	; (8004d24 <Principal_Init+0x6c>)
 8004cf2:	f001 fcb3 	bl	800665c <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f008 fdb2 	bl	800d860 <HAL_TIM_Base_Start_IT>

	Principal_CAN_Start(hcan);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7fe fc0b 	bl	8003518 <Principal_CAN_Start>
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20002cb0 	.word	0x20002cb0
 8004d10:	20001a5c 	.word	0x20001a5c
 8004d14:	200009d8 	.word	0x200009d8
 8004d18:	20000710 	.word	0x20000710
 8004d1c:	20001a94 	.word	0x20001a94
 8004d20:	20000704 	.word	0x20000704
 8004d24:	20000720 	.word	0x20000720

08004d28 <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
	switch(data[0])
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	f000 8399 	beq.w	800546e <Principal_Receive_Config+0x746>
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	f300 83b3 	bgt.w	80054a8 <Principal_Receive_Config+0x780>
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d003      	beq.n	8004d4e <Principal_Receive_Config+0x26>
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	f000 8241 	beq.w	80051ce <Principal_Receive_Config+0x4a6>
 8004d4c:	e3ac      	b.n	80054a8 <Principal_Receive_Config+0x780>
	{
		case 0:
			__LOAD_FREQ(data[1], Per_Msg[Analog_1_4]);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	3b01      	subs	r3, #1
 8004d56:	2b0a      	cmp	r3, #10
 8004d58:	d846      	bhi.n	8004de8 <Principal_Receive_Config+0xc0>
 8004d5a:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <Principal_Receive_Config+0x38>)
 8004d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004d97 	.word	0x08004d97
 8004d68:	08004da1 	.word	0x08004da1
 8004d6c:	08004da9 	.word	0x08004da9
 8004d70:	08004db1 	.word	0x08004db1
 8004d74:	08004db9 	.word	0x08004db9
 8004d78:	08004dc1 	.word	0x08004dc1
 8004d7c:	08004dc9 	.word	0x08004dc9
 8004d80:	08004dd1 	.word	0x08004dd1
 8004d84:	08004dd9 	.word	0x08004dd9
 8004d88:	08004de1 	.word	0x08004de1
 8004d8c:	4ba8      	ldr	r3, [pc, #672]	; (8005030 <Principal_Receive_Config+0x308>)
 8004d8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d92:	801a      	strh	r2, [r3, #0]
 8004d94:	e02b      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004d96:	4ba6      	ldr	r3, [pc, #664]	; (8005030 <Principal_Receive_Config+0x308>)
 8004d98:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d9c:	801a      	strh	r2, [r3, #0]
 8004d9e:	e026      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004da0:	4ba3      	ldr	r3, [pc, #652]	; (8005030 <Principal_Receive_Config+0x308>)
 8004da2:	22c8      	movs	r2, #200	; 0xc8
 8004da4:	801a      	strh	r2, [r3, #0]
 8004da6:	e022      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004da8:	4ba1      	ldr	r3, [pc, #644]	; (8005030 <Principal_Receive_Config+0x308>)
 8004daa:	2264      	movs	r2, #100	; 0x64
 8004dac:	801a      	strh	r2, [r3, #0]
 8004dae:	e01e      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004db0:	4b9f      	ldr	r3, [pc, #636]	; (8005030 <Principal_Receive_Config+0x308>)
 8004db2:	2232      	movs	r2, #50	; 0x32
 8004db4:	801a      	strh	r2, [r3, #0]
 8004db6:	e01a      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004db8:	4b9d      	ldr	r3, [pc, #628]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dba:	2228      	movs	r2, #40	; 0x28
 8004dbc:	801a      	strh	r2, [r3, #0]
 8004dbe:	e016      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004dc0:	4b9b      	ldr	r3, [pc, #620]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dc2:	2214      	movs	r2, #20
 8004dc4:	801a      	strh	r2, [r3, #0]
 8004dc6:	e012      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004dc8:	4b99      	ldr	r3, [pc, #612]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dca:	220a      	movs	r2, #10
 8004dcc:	801a      	strh	r2, [r3, #0]
 8004dce:	e00e      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004dd0:	4b97      	ldr	r3, [pc, #604]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dd2:	2205      	movs	r2, #5
 8004dd4:	801a      	strh	r2, [r3, #0]
 8004dd6:	e00a      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004dd8:	4b95      	ldr	r3, [pc, #596]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dda:	2203      	movs	r2, #3
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	e006      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004de0:	4b93      	ldr	r3, [pc, #588]	; (8005030 <Principal_Receive_Config+0x308>)
 8004de2:	2202      	movs	r2, #2
 8004de4:	801a      	strh	r2, [r3, #0]
 8004de6:	e002      	b.n	8004dee <Principal_Receive_Config+0xc6>
 8004de8:	4b91      	ldr	r3, [pc, #580]	; (8005030 <Principal_Receive_Config+0x308>)
 8004dea:	2200      	movs	r2, #0
 8004dec:	801a      	strh	r2, [r3, #0]
 8004dee:	bf00      	nop
			__LOAD_FREQ(data[2], Per_Msg[Analog_5_8]);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	3302      	adds	r3, #2
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	3b01      	subs	r3, #1
 8004df8:	2b0a      	cmp	r3, #10
 8004dfa:	d847      	bhi.n	8004e8c <Principal_Receive_Config+0x164>
 8004dfc:	a201      	add	r2, pc, #4	; (adr r2, 8004e04 <Principal_Receive_Config+0xdc>)
 8004dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e02:	bf00      	nop
 8004e04:	08004e31 	.word	0x08004e31
 8004e08:	08004e3b 	.word	0x08004e3b
 8004e0c:	08004e45 	.word	0x08004e45
 8004e10:	08004e4d 	.word	0x08004e4d
 8004e14:	08004e55 	.word	0x08004e55
 8004e18:	08004e5d 	.word	0x08004e5d
 8004e1c:	08004e65 	.word	0x08004e65
 8004e20:	08004e6d 	.word	0x08004e6d
 8004e24:	08004e75 	.word	0x08004e75
 8004e28:	08004e7d 	.word	0x08004e7d
 8004e2c:	08004e85 	.word	0x08004e85
 8004e30:	4b7f      	ldr	r3, [pc, #508]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e32:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e36:	805a      	strh	r2, [r3, #2]
 8004e38:	e02b      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e3a:	4b7d      	ldr	r3, [pc, #500]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e3c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004e40:	805a      	strh	r2, [r3, #2]
 8004e42:	e026      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e44:	4b7a      	ldr	r3, [pc, #488]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e46:	22c8      	movs	r2, #200	; 0xc8
 8004e48:	805a      	strh	r2, [r3, #2]
 8004e4a:	e022      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e4c:	4b78      	ldr	r3, [pc, #480]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e4e:	2264      	movs	r2, #100	; 0x64
 8004e50:	805a      	strh	r2, [r3, #2]
 8004e52:	e01e      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e54:	4b76      	ldr	r3, [pc, #472]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e56:	2232      	movs	r2, #50	; 0x32
 8004e58:	805a      	strh	r2, [r3, #2]
 8004e5a:	e01a      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e5c:	4b74      	ldr	r3, [pc, #464]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e5e:	2228      	movs	r2, #40	; 0x28
 8004e60:	805a      	strh	r2, [r3, #2]
 8004e62:	e016      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e64:	4b72      	ldr	r3, [pc, #456]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e66:	2214      	movs	r2, #20
 8004e68:	805a      	strh	r2, [r3, #2]
 8004e6a:	e012      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e6c:	4b70      	ldr	r3, [pc, #448]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e6e:	220a      	movs	r2, #10
 8004e70:	805a      	strh	r2, [r3, #2]
 8004e72:	e00e      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e74:	4b6e      	ldr	r3, [pc, #440]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e76:	2205      	movs	r2, #5
 8004e78:	805a      	strh	r2, [r3, #2]
 8004e7a:	e00a      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e7c:	4b6c      	ldr	r3, [pc, #432]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e7e:	2203      	movs	r2, #3
 8004e80:	805a      	strh	r2, [r3, #2]
 8004e82:	e006      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e84:	4b6a      	ldr	r3, [pc, #424]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e86:	2202      	movs	r2, #2
 8004e88:	805a      	strh	r2, [r3, #2]
 8004e8a:	e002      	b.n	8004e92 <Principal_Receive_Config+0x16a>
 8004e8c:	4b68      	ldr	r3, [pc, #416]	; (8005030 <Principal_Receive_Config+0x308>)
 8004e8e:	2200      	movs	r2, #0
 8004e90:	805a      	strh	r2, [r3, #2]
 8004e92:	bf00      	nop
			__LOAD_FREQ(data[3], Per_Msg[Analog_9_12]);
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	3303      	adds	r3, #3
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	2b0a      	cmp	r3, #10
 8004e9e:	d847      	bhi.n	8004f30 <Principal_Receive_Config+0x208>
 8004ea0:	a201      	add	r2, pc, #4	; (adr r2, 8004ea8 <Principal_Receive_Config+0x180>)
 8004ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea6:	bf00      	nop
 8004ea8:	08004ed5 	.word	0x08004ed5
 8004eac:	08004edf 	.word	0x08004edf
 8004eb0:	08004ee9 	.word	0x08004ee9
 8004eb4:	08004ef1 	.word	0x08004ef1
 8004eb8:	08004ef9 	.word	0x08004ef9
 8004ebc:	08004f01 	.word	0x08004f01
 8004ec0:	08004f09 	.word	0x08004f09
 8004ec4:	08004f11 	.word	0x08004f11
 8004ec8:	08004f19 	.word	0x08004f19
 8004ecc:	08004f21 	.word	0x08004f21
 8004ed0:	08004f29 	.word	0x08004f29
 8004ed4:	4b56      	ldr	r3, [pc, #344]	; (8005030 <Principal_Receive_Config+0x308>)
 8004ed6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004eda:	809a      	strh	r2, [r3, #4]
 8004edc:	e02b      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004ede:	4b54      	ldr	r3, [pc, #336]	; (8005030 <Principal_Receive_Config+0x308>)
 8004ee0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004ee4:	809a      	strh	r2, [r3, #4]
 8004ee6:	e026      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004ee8:	4b51      	ldr	r3, [pc, #324]	; (8005030 <Principal_Receive_Config+0x308>)
 8004eea:	22c8      	movs	r2, #200	; 0xc8
 8004eec:	809a      	strh	r2, [r3, #4]
 8004eee:	e022      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004ef0:	4b4f      	ldr	r3, [pc, #316]	; (8005030 <Principal_Receive_Config+0x308>)
 8004ef2:	2264      	movs	r2, #100	; 0x64
 8004ef4:	809a      	strh	r2, [r3, #4]
 8004ef6:	e01e      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004ef8:	4b4d      	ldr	r3, [pc, #308]	; (8005030 <Principal_Receive_Config+0x308>)
 8004efa:	2232      	movs	r2, #50	; 0x32
 8004efc:	809a      	strh	r2, [r3, #4]
 8004efe:	e01a      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f00:	4b4b      	ldr	r3, [pc, #300]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f02:	2228      	movs	r2, #40	; 0x28
 8004f04:	809a      	strh	r2, [r3, #4]
 8004f06:	e016      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f08:	4b49      	ldr	r3, [pc, #292]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f0a:	2214      	movs	r2, #20
 8004f0c:	809a      	strh	r2, [r3, #4]
 8004f0e:	e012      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f10:	4b47      	ldr	r3, [pc, #284]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f12:	220a      	movs	r2, #10
 8004f14:	809a      	strh	r2, [r3, #4]
 8004f16:	e00e      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f18:	4b45      	ldr	r3, [pc, #276]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f1a:	2205      	movs	r2, #5
 8004f1c:	809a      	strh	r2, [r3, #4]
 8004f1e:	e00a      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f20:	4b43      	ldr	r3, [pc, #268]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f22:	2203      	movs	r2, #3
 8004f24:	809a      	strh	r2, [r3, #4]
 8004f26:	e006      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f28:	4b41      	ldr	r3, [pc, #260]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	809a      	strh	r2, [r3, #4]
 8004f2e:	e002      	b.n	8004f36 <Principal_Receive_Config+0x20e>
 8004f30:	4b3f      	ldr	r3, [pc, #252]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	809a      	strh	r2, [r3, #4]
 8004f36:	bf00      	nop
			__LOAD_FREQ(data[4], Per_Msg[RTC_Msg]);
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	3b01      	subs	r3, #1
 8004f40:	2b0a      	cmp	r3, #10
 8004f42:	d847      	bhi.n	8004fd4 <Principal_Receive_Config+0x2ac>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <Principal_Receive_Config+0x224>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f79 	.word	0x08004f79
 8004f50:	08004f83 	.word	0x08004f83
 8004f54:	08004f8d 	.word	0x08004f8d
 8004f58:	08004f95 	.word	0x08004f95
 8004f5c:	08004f9d 	.word	0x08004f9d
 8004f60:	08004fa5 	.word	0x08004fa5
 8004f64:	08004fad 	.word	0x08004fad
 8004f68:	08004fb5 	.word	0x08004fb5
 8004f6c:	08004fbd 	.word	0x08004fbd
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	08004fcd 	.word	0x08004fcd
 8004f78:	4b2d      	ldr	r3, [pc, #180]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f7e:	80da      	strh	r2, [r3, #6]
 8004f80:	e02b      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004f82:	4b2b      	ldr	r3, [pc, #172]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f84:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f88:	80da      	strh	r2, [r3, #6]
 8004f8a:	e026      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004f8c:	4b28      	ldr	r3, [pc, #160]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f8e:	22c8      	movs	r2, #200	; 0xc8
 8004f90:	80da      	strh	r2, [r3, #6]
 8004f92:	e022      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004f94:	4b26      	ldr	r3, [pc, #152]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f96:	2264      	movs	r2, #100	; 0x64
 8004f98:	80da      	strh	r2, [r3, #6]
 8004f9a:	e01e      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004f9c:	4b24      	ldr	r3, [pc, #144]	; (8005030 <Principal_Receive_Config+0x308>)
 8004f9e:	2232      	movs	r2, #50	; 0x32
 8004fa0:	80da      	strh	r2, [r3, #6]
 8004fa2:	e01a      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fa4:	4b22      	ldr	r3, [pc, #136]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fa6:	2228      	movs	r2, #40	; 0x28
 8004fa8:	80da      	strh	r2, [r3, #6]
 8004faa:	e016      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fac:	4b20      	ldr	r3, [pc, #128]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fae:	2214      	movs	r2, #20
 8004fb0:	80da      	strh	r2, [r3, #6]
 8004fb2:	e012      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fb4:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fb6:	220a      	movs	r2, #10
 8004fb8:	80da      	strh	r2, [r3, #6]
 8004fba:	e00e      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fbc:	4b1c      	ldr	r3, [pc, #112]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fbe:	2205      	movs	r2, #5
 8004fc0:	80da      	strh	r2, [r3, #6]
 8004fc2:	e00a      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fc4:	4b1a      	ldr	r3, [pc, #104]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	80da      	strh	r2, [r3, #6]
 8004fca:	e006      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fcc:	4b18      	ldr	r3, [pc, #96]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fce:	2202      	movs	r2, #2
 8004fd0:	80da      	strh	r2, [r3, #6]
 8004fd2:	e002      	b.n	8004fda <Principal_Receive_Config+0x2b2>
 8004fd4:	4b16      	ldr	r3, [pc, #88]	; (8005030 <Principal_Receive_Config+0x308>)
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	80da      	strh	r2, [r3, #6]
 8004fda:	bf00      	nop
			__LOAD_FREQ(data[5], Per_Msg[Verify_Msg]);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	3305      	adds	r3, #5
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	2b0a      	cmp	r3, #10
 8004fe6:	d849      	bhi.n	800507c <Principal_Receive_Config+0x354>
 8004fe8:	a201      	add	r2, pc, #4	; (adr r2, 8004ff0 <Principal_Receive_Config+0x2c8>)
 8004fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fee:	bf00      	nop
 8004ff0:	0800501d 	.word	0x0800501d
 8004ff4:	08005027 	.word	0x08005027
 8004ff8:	08005035 	.word	0x08005035
 8004ffc:	0800503d 	.word	0x0800503d
 8005000:	08005045 	.word	0x08005045
 8005004:	0800504d 	.word	0x0800504d
 8005008:	08005055 	.word	0x08005055
 800500c:	0800505d 	.word	0x0800505d
 8005010:	08005065 	.word	0x08005065
 8005014:	0800506d 	.word	0x0800506d
 8005018:	08005075 	.word	0x08005075
 800501c:	4b04      	ldr	r3, [pc, #16]	; (8005030 <Principal_Receive_Config+0x308>)
 800501e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005022:	811a      	strh	r2, [r3, #8]
 8005024:	e02d      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005026:	4b02      	ldr	r3, [pc, #8]	; (8005030 <Principal_Receive_Config+0x308>)
 8005028:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800502c:	811a      	strh	r2, [r3, #8]
 800502e:	e028      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005030:	20002e7c 	.word	0x20002e7c
 8005034:	4ba7      	ldr	r3, [pc, #668]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005036:	22c8      	movs	r2, #200	; 0xc8
 8005038:	811a      	strh	r2, [r3, #8]
 800503a:	e022      	b.n	8005082 <Principal_Receive_Config+0x35a>
 800503c:	4ba5      	ldr	r3, [pc, #660]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800503e:	2264      	movs	r2, #100	; 0x64
 8005040:	811a      	strh	r2, [r3, #8]
 8005042:	e01e      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005044:	4ba3      	ldr	r3, [pc, #652]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005046:	2232      	movs	r2, #50	; 0x32
 8005048:	811a      	strh	r2, [r3, #8]
 800504a:	e01a      	b.n	8005082 <Principal_Receive_Config+0x35a>
 800504c:	4ba1      	ldr	r3, [pc, #644]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800504e:	2228      	movs	r2, #40	; 0x28
 8005050:	811a      	strh	r2, [r3, #8]
 8005052:	e016      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005054:	4b9f      	ldr	r3, [pc, #636]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005056:	2214      	movs	r2, #20
 8005058:	811a      	strh	r2, [r3, #8]
 800505a:	e012      	b.n	8005082 <Principal_Receive_Config+0x35a>
 800505c:	4b9d      	ldr	r3, [pc, #628]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800505e:	220a      	movs	r2, #10
 8005060:	811a      	strh	r2, [r3, #8]
 8005062:	e00e      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005064:	4b9b      	ldr	r3, [pc, #620]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005066:	2205      	movs	r2, #5
 8005068:	811a      	strh	r2, [r3, #8]
 800506a:	e00a      	b.n	8005082 <Principal_Receive_Config+0x35a>
 800506c:	4b99      	ldr	r3, [pc, #612]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800506e:	2203      	movs	r2, #3
 8005070:	811a      	strh	r2, [r3, #8]
 8005072:	e006      	b.n	8005082 <Principal_Receive_Config+0x35a>
 8005074:	4b97      	ldr	r3, [pc, #604]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005076:	2202      	movs	r2, #2
 8005078:	811a      	strh	r2, [r3, #8]
 800507a:	e002      	b.n	8005082 <Principal_Receive_Config+0x35a>
 800507c:	4b95      	ldr	r3, [pc, #596]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800507e:	2200      	movs	r2, #0
 8005080:	811a      	strh	r2, [r3, #8]
 8005082:	bf00      	nop
			__LOAD_FREQ(data[6], Per_Msg[ECU_Save]);
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	3306      	adds	r3, #6
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	3b01      	subs	r3, #1
 800508c:	2b0a      	cmp	r3, #10
 800508e:	d847      	bhi.n	8005120 <Principal_Receive_Config+0x3f8>
 8005090:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <Principal_Receive_Config+0x370>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050c5 	.word	0x080050c5
 800509c:	080050cf 	.word	0x080050cf
 80050a0:	080050d9 	.word	0x080050d9
 80050a4:	080050e1 	.word	0x080050e1
 80050a8:	080050e9 	.word	0x080050e9
 80050ac:	080050f1 	.word	0x080050f1
 80050b0:	080050f9 	.word	0x080050f9
 80050b4:	08005101 	.word	0x08005101
 80050b8:	08005109 	.word	0x08005109
 80050bc:	08005111 	.word	0x08005111
 80050c0:	08005119 	.word	0x08005119
 80050c4:	4b83      	ldr	r3, [pc, #524]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80050ca:	815a      	strh	r2, [r3, #10]
 80050cc:	e02b      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050ce:	4b81      	ldr	r3, [pc, #516]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80050d4:	815a      	strh	r2, [r3, #10]
 80050d6:	e026      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050d8:	4b7e      	ldr	r3, [pc, #504]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050da:	22c8      	movs	r2, #200	; 0xc8
 80050dc:	815a      	strh	r2, [r3, #10]
 80050de:	e022      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050e0:	4b7c      	ldr	r3, [pc, #496]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050e2:	2264      	movs	r2, #100	; 0x64
 80050e4:	815a      	strh	r2, [r3, #10]
 80050e6:	e01e      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050e8:	4b7a      	ldr	r3, [pc, #488]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050ea:	2232      	movs	r2, #50	; 0x32
 80050ec:	815a      	strh	r2, [r3, #10]
 80050ee:	e01a      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050f0:	4b78      	ldr	r3, [pc, #480]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050f2:	2228      	movs	r2, #40	; 0x28
 80050f4:	815a      	strh	r2, [r3, #10]
 80050f6:	e016      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 80050f8:	4b76      	ldr	r3, [pc, #472]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80050fa:	2214      	movs	r2, #20
 80050fc:	815a      	strh	r2, [r3, #10]
 80050fe:	e012      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 8005100:	4b74      	ldr	r3, [pc, #464]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005102:	220a      	movs	r2, #10
 8005104:	815a      	strh	r2, [r3, #10]
 8005106:	e00e      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 8005108:	4b72      	ldr	r3, [pc, #456]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800510a:	2205      	movs	r2, #5
 800510c:	815a      	strh	r2, [r3, #10]
 800510e:	e00a      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 8005110:	4b70      	ldr	r3, [pc, #448]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005112:	2203      	movs	r2, #3
 8005114:	815a      	strh	r2, [r3, #10]
 8005116:	e006      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 8005118:	4b6e      	ldr	r3, [pc, #440]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800511a:	2202      	movs	r2, #2
 800511c:	815a      	strh	r2, [r3, #10]
 800511e:	e002      	b.n	8005126 <Principal_Receive_Config+0x3fe>
 8005120:	4b6c      	ldr	r3, [pc, #432]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005122:	2200      	movs	r2, #0
 8005124:	815a      	strh	r2, [r3, #10]
 8005126:	bf00      	nop
			__LOAD_FREQ(data[7], Per_Msg[PDM_Save]);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	3307      	adds	r3, #7
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	3b01      	subs	r3, #1
 8005130:	2b0a      	cmp	r3, #10
 8005132:	d847      	bhi.n	80051c4 <Principal_Receive_Config+0x49c>
 8005134:	a201      	add	r2, pc, #4	; (adr r2, 800513c <Principal_Receive_Config+0x414>)
 8005136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513a:	bf00      	nop
 800513c:	08005169 	.word	0x08005169
 8005140:	08005173 	.word	0x08005173
 8005144:	0800517d 	.word	0x0800517d
 8005148:	08005185 	.word	0x08005185
 800514c:	0800518d 	.word	0x0800518d
 8005150:	08005195 	.word	0x08005195
 8005154:	0800519d 	.word	0x0800519d
 8005158:	080051a5 	.word	0x080051a5
 800515c:	080051ad 	.word	0x080051ad
 8005160:	080051b5 	.word	0x080051b5
 8005164:	080051bd 	.word	0x080051bd
 8005168:	4b5a      	ldr	r3, [pc, #360]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800516a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800516e:	819a      	strh	r2, [r3, #12]
 8005170:	e02b      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 8005172:	4b58      	ldr	r3, [pc, #352]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005174:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005178:	819a      	strh	r2, [r3, #12]
 800517a:	e026      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 800517c:	4b55      	ldr	r3, [pc, #340]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800517e:	22c8      	movs	r2, #200	; 0xc8
 8005180:	819a      	strh	r2, [r3, #12]
 8005182:	e022      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 8005184:	4b53      	ldr	r3, [pc, #332]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005186:	2264      	movs	r2, #100	; 0x64
 8005188:	819a      	strh	r2, [r3, #12]
 800518a:	e01e      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 800518c:	4b51      	ldr	r3, [pc, #324]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800518e:	2232      	movs	r2, #50	; 0x32
 8005190:	819a      	strh	r2, [r3, #12]
 8005192:	e01a      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 8005194:	4b4f      	ldr	r3, [pc, #316]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 8005196:	2228      	movs	r2, #40	; 0x28
 8005198:	819a      	strh	r2, [r3, #12]
 800519a:	e016      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 800519c:	4b4d      	ldr	r3, [pc, #308]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 800519e:	2214      	movs	r2, #20
 80051a0:	819a      	strh	r2, [r3, #12]
 80051a2:	e012      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 80051a4:	4b4b      	ldr	r3, [pc, #300]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80051a6:	220a      	movs	r2, #10
 80051a8:	819a      	strh	r2, [r3, #12]
 80051aa:	e00e      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 80051ac:	4b49      	ldr	r3, [pc, #292]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80051ae:	2205      	movs	r2, #5
 80051b0:	819a      	strh	r2, [r3, #12]
 80051b2:	e00a      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 80051b4:	4b47      	ldr	r3, [pc, #284]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80051b6:	2203      	movs	r2, #3
 80051b8:	819a      	strh	r2, [r3, #12]
 80051ba:	e006      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 80051bc:	4b45      	ldr	r3, [pc, #276]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80051be:	2202      	movs	r2, #2
 80051c0:	819a      	strh	r2, [r3, #12]
 80051c2:	e002      	b.n	80051ca <Principal_Receive_Config+0x4a2>
 80051c4:	4b43      	ldr	r3, [pc, #268]	; (80052d4 <Principal_Receive_Config+0x5ac>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	819a      	strh	r2, [r3, #12]
 80051ca:	bf00      	nop
			break;
 80051cc:	e16e      	b.n	80054ac <Principal_Receive_Config+0x784>

		case 1:
			__LOAD_FREQ(data[1], Per_CAN[Analog_1_4]);
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	3301      	adds	r3, #1
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	3b01      	subs	r3, #1
 80051d6:	2b0a      	cmp	r3, #10
 80051d8:	d846      	bhi.n	8005268 <Principal_Receive_Config+0x540>
 80051da:	a201      	add	r2, pc, #4	; (adr r2, 80051e0 <Principal_Receive_Config+0x4b8>)
 80051dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	08005217 	.word	0x08005217
 80051e8:	08005221 	.word	0x08005221
 80051ec:	08005229 	.word	0x08005229
 80051f0:	08005231 	.word	0x08005231
 80051f4:	08005239 	.word	0x08005239
 80051f8:	08005241 	.word	0x08005241
 80051fc:	08005249 	.word	0x08005249
 8005200:	08005251 	.word	0x08005251
 8005204:	08005259 	.word	0x08005259
 8005208:	08005261 	.word	0x08005261
 800520c:	4b32      	ldr	r3, [pc, #200]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800520e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005212:	801a      	strh	r2, [r3, #0]
 8005214:	e02b      	b.n	800526e <Principal_Receive_Config+0x546>
 8005216:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005218:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800521c:	801a      	strh	r2, [r3, #0]
 800521e:	e026      	b.n	800526e <Principal_Receive_Config+0x546>
 8005220:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005222:	22c8      	movs	r2, #200	; 0xc8
 8005224:	801a      	strh	r2, [r3, #0]
 8005226:	e022      	b.n	800526e <Principal_Receive_Config+0x546>
 8005228:	4b2b      	ldr	r3, [pc, #172]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800522a:	2264      	movs	r2, #100	; 0x64
 800522c:	801a      	strh	r2, [r3, #0]
 800522e:	e01e      	b.n	800526e <Principal_Receive_Config+0x546>
 8005230:	4b29      	ldr	r3, [pc, #164]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005232:	2232      	movs	r2, #50	; 0x32
 8005234:	801a      	strh	r2, [r3, #0]
 8005236:	e01a      	b.n	800526e <Principal_Receive_Config+0x546>
 8005238:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800523a:	2228      	movs	r2, #40	; 0x28
 800523c:	801a      	strh	r2, [r3, #0]
 800523e:	e016      	b.n	800526e <Principal_Receive_Config+0x546>
 8005240:	4b25      	ldr	r3, [pc, #148]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005242:	2214      	movs	r2, #20
 8005244:	801a      	strh	r2, [r3, #0]
 8005246:	e012      	b.n	800526e <Principal_Receive_Config+0x546>
 8005248:	4b23      	ldr	r3, [pc, #140]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800524a:	220a      	movs	r2, #10
 800524c:	801a      	strh	r2, [r3, #0]
 800524e:	e00e      	b.n	800526e <Principal_Receive_Config+0x546>
 8005250:	4b21      	ldr	r3, [pc, #132]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005252:	2205      	movs	r2, #5
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	e00a      	b.n	800526e <Principal_Receive_Config+0x546>
 8005258:	4b1f      	ldr	r3, [pc, #124]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800525a:	2203      	movs	r2, #3
 800525c:	801a      	strh	r2, [r3, #0]
 800525e:	e006      	b.n	800526e <Principal_Receive_Config+0x546>
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 8005262:	2202      	movs	r2, #2
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	e002      	b.n	800526e <Principal_Receive_Config+0x546>
 8005268:	4b1b      	ldr	r3, [pc, #108]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 800526a:	2200      	movs	r2, #0
 800526c:	801a      	strh	r2, [r3, #0]
 800526e:	bf00      	nop
			__LOAD_FREQ(data[2], Per_CAN[Analog_5_8]);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	3302      	adds	r3, #2
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	3b01      	subs	r3, #1
 8005278:	2b0a      	cmp	r3, #10
 800527a:	d84b      	bhi.n	8005314 <Principal_Receive_Config+0x5ec>
 800527c:	a201      	add	r2, pc, #4	; (adr r2, 8005284 <Principal_Receive_Config+0x55c>)
 800527e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005282:	bf00      	nop
 8005284:	080052b1 	.word	0x080052b1
 8005288:	080052bb 	.word	0x080052bb
 800528c:	080052c5 	.word	0x080052c5
 8005290:	080052cd 	.word	0x080052cd
 8005294:	080052dd 	.word	0x080052dd
 8005298:	080052e5 	.word	0x080052e5
 800529c:	080052ed 	.word	0x080052ed
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	080052fd 	.word	0x080052fd
 80052a8:	08005305 	.word	0x08005305
 80052ac:	0800530d 	.word	0x0800530d
 80052b0:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 80052b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80052b6:	805a      	strh	r2, [r3, #2]
 80052b8:	e02f      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052ba:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 80052bc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80052c0:	805a      	strh	r2, [r3, #2]
 80052c2:	e02a      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052c4:	4b04      	ldr	r3, [pc, #16]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 80052c6:	22c8      	movs	r2, #200	; 0xc8
 80052c8:	805a      	strh	r2, [r3, #2]
 80052ca:	e026      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052cc:	4b02      	ldr	r3, [pc, #8]	; (80052d8 <Principal_Receive_Config+0x5b0>)
 80052ce:	2264      	movs	r2, #100	; 0x64
 80052d0:	805a      	strh	r2, [r3, #2]
 80052d2:	e022      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052d4:	20002e7c 	.word	0x20002e7c
 80052d8:	200006fc 	.word	0x200006fc
 80052dc:	4b77      	ldr	r3, [pc, #476]	; (80054bc <Principal_Receive_Config+0x794>)
 80052de:	2232      	movs	r2, #50	; 0x32
 80052e0:	805a      	strh	r2, [r3, #2]
 80052e2:	e01a      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052e4:	4b75      	ldr	r3, [pc, #468]	; (80054bc <Principal_Receive_Config+0x794>)
 80052e6:	2228      	movs	r2, #40	; 0x28
 80052e8:	805a      	strh	r2, [r3, #2]
 80052ea:	e016      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052ec:	4b73      	ldr	r3, [pc, #460]	; (80054bc <Principal_Receive_Config+0x794>)
 80052ee:	2214      	movs	r2, #20
 80052f0:	805a      	strh	r2, [r3, #2]
 80052f2:	e012      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052f4:	4b71      	ldr	r3, [pc, #452]	; (80054bc <Principal_Receive_Config+0x794>)
 80052f6:	220a      	movs	r2, #10
 80052f8:	805a      	strh	r2, [r3, #2]
 80052fa:	e00e      	b.n	800531a <Principal_Receive_Config+0x5f2>
 80052fc:	4b6f      	ldr	r3, [pc, #444]	; (80054bc <Principal_Receive_Config+0x794>)
 80052fe:	2205      	movs	r2, #5
 8005300:	805a      	strh	r2, [r3, #2]
 8005302:	e00a      	b.n	800531a <Principal_Receive_Config+0x5f2>
 8005304:	4b6d      	ldr	r3, [pc, #436]	; (80054bc <Principal_Receive_Config+0x794>)
 8005306:	2203      	movs	r2, #3
 8005308:	805a      	strh	r2, [r3, #2]
 800530a:	e006      	b.n	800531a <Principal_Receive_Config+0x5f2>
 800530c:	4b6b      	ldr	r3, [pc, #428]	; (80054bc <Principal_Receive_Config+0x794>)
 800530e:	2202      	movs	r2, #2
 8005310:	805a      	strh	r2, [r3, #2]
 8005312:	e002      	b.n	800531a <Principal_Receive_Config+0x5f2>
 8005314:	4b69      	ldr	r3, [pc, #420]	; (80054bc <Principal_Receive_Config+0x794>)
 8005316:	2200      	movs	r2, #0
 8005318:	805a      	strh	r2, [r3, #2]
 800531a:	bf00      	nop
			__LOAD_FREQ(data[3], Per_CAN[Analog_9_12]);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	3303      	adds	r3, #3
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	3b01      	subs	r3, #1
 8005324:	2b0a      	cmp	r3, #10
 8005326:	d847      	bhi.n	80053b8 <Principal_Receive_Config+0x690>
 8005328:	a201      	add	r2, pc, #4	; (adr r2, 8005330 <Principal_Receive_Config+0x608>)
 800532a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532e:	bf00      	nop
 8005330:	0800535d 	.word	0x0800535d
 8005334:	08005367 	.word	0x08005367
 8005338:	08005371 	.word	0x08005371
 800533c:	08005379 	.word	0x08005379
 8005340:	08005381 	.word	0x08005381
 8005344:	08005389 	.word	0x08005389
 8005348:	08005391 	.word	0x08005391
 800534c:	08005399 	.word	0x08005399
 8005350:	080053a1 	.word	0x080053a1
 8005354:	080053a9 	.word	0x080053a9
 8005358:	080053b1 	.word	0x080053b1
 800535c:	4b57      	ldr	r3, [pc, #348]	; (80054bc <Principal_Receive_Config+0x794>)
 800535e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005362:	809a      	strh	r2, [r3, #4]
 8005364:	e02b      	b.n	80053be <Principal_Receive_Config+0x696>
 8005366:	4b55      	ldr	r3, [pc, #340]	; (80054bc <Principal_Receive_Config+0x794>)
 8005368:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800536c:	809a      	strh	r2, [r3, #4]
 800536e:	e026      	b.n	80053be <Principal_Receive_Config+0x696>
 8005370:	4b52      	ldr	r3, [pc, #328]	; (80054bc <Principal_Receive_Config+0x794>)
 8005372:	22c8      	movs	r2, #200	; 0xc8
 8005374:	809a      	strh	r2, [r3, #4]
 8005376:	e022      	b.n	80053be <Principal_Receive_Config+0x696>
 8005378:	4b50      	ldr	r3, [pc, #320]	; (80054bc <Principal_Receive_Config+0x794>)
 800537a:	2264      	movs	r2, #100	; 0x64
 800537c:	809a      	strh	r2, [r3, #4]
 800537e:	e01e      	b.n	80053be <Principal_Receive_Config+0x696>
 8005380:	4b4e      	ldr	r3, [pc, #312]	; (80054bc <Principal_Receive_Config+0x794>)
 8005382:	2232      	movs	r2, #50	; 0x32
 8005384:	809a      	strh	r2, [r3, #4]
 8005386:	e01a      	b.n	80053be <Principal_Receive_Config+0x696>
 8005388:	4b4c      	ldr	r3, [pc, #304]	; (80054bc <Principal_Receive_Config+0x794>)
 800538a:	2228      	movs	r2, #40	; 0x28
 800538c:	809a      	strh	r2, [r3, #4]
 800538e:	e016      	b.n	80053be <Principal_Receive_Config+0x696>
 8005390:	4b4a      	ldr	r3, [pc, #296]	; (80054bc <Principal_Receive_Config+0x794>)
 8005392:	2214      	movs	r2, #20
 8005394:	809a      	strh	r2, [r3, #4]
 8005396:	e012      	b.n	80053be <Principal_Receive_Config+0x696>
 8005398:	4b48      	ldr	r3, [pc, #288]	; (80054bc <Principal_Receive_Config+0x794>)
 800539a:	220a      	movs	r2, #10
 800539c:	809a      	strh	r2, [r3, #4]
 800539e:	e00e      	b.n	80053be <Principal_Receive_Config+0x696>
 80053a0:	4b46      	ldr	r3, [pc, #280]	; (80054bc <Principal_Receive_Config+0x794>)
 80053a2:	2205      	movs	r2, #5
 80053a4:	809a      	strh	r2, [r3, #4]
 80053a6:	e00a      	b.n	80053be <Principal_Receive_Config+0x696>
 80053a8:	4b44      	ldr	r3, [pc, #272]	; (80054bc <Principal_Receive_Config+0x794>)
 80053aa:	2203      	movs	r2, #3
 80053ac:	809a      	strh	r2, [r3, #4]
 80053ae:	e006      	b.n	80053be <Principal_Receive_Config+0x696>
 80053b0:	4b42      	ldr	r3, [pc, #264]	; (80054bc <Principal_Receive_Config+0x794>)
 80053b2:	2202      	movs	r2, #2
 80053b4:	809a      	strh	r2, [r3, #4]
 80053b6:	e002      	b.n	80053be <Principal_Receive_Config+0x696>
 80053b8:	4b40      	ldr	r3, [pc, #256]	; (80054bc <Principal_Receive_Config+0x794>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	809a      	strh	r2, [r3, #4]
 80053be:	bf00      	nop
			__LOAD_FREQ(data[4], Per_CAN[RTC_Msg]);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	3304      	adds	r3, #4
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	3b01      	subs	r3, #1
 80053c8:	2b0a      	cmp	r3, #10
 80053ca:	d847      	bhi.n	800545c <Principal_Receive_Config+0x734>
 80053cc:	a201      	add	r2, pc, #4	; (adr r2, 80053d4 <Principal_Receive_Config+0x6ac>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	08005401 	.word	0x08005401
 80053d8:	0800540b 	.word	0x0800540b
 80053dc:	08005415 	.word	0x08005415
 80053e0:	0800541d 	.word	0x0800541d
 80053e4:	08005425 	.word	0x08005425
 80053e8:	0800542d 	.word	0x0800542d
 80053ec:	08005435 	.word	0x08005435
 80053f0:	0800543d 	.word	0x0800543d
 80053f4:	08005445 	.word	0x08005445
 80053f8:	0800544d 	.word	0x0800544d
 80053fc:	08005455 	.word	0x08005455
 8005400:	4b2e      	ldr	r3, [pc, #184]	; (80054bc <Principal_Receive_Config+0x794>)
 8005402:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005406:	80da      	strh	r2, [r3, #6]
 8005408:	e02b      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800540a:	4b2c      	ldr	r3, [pc, #176]	; (80054bc <Principal_Receive_Config+0x794>)
 800540c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8005410:	80da      	strh	r2, [r3, #6]
 8005412:	e026      	b.n	8005462 <Principal_Receive_Config+0x73a>
 8005414:	4b29      	ldr	r3, [pc, #164]	; (80054bc <Principal_Receive_Config+0x794>)
 8005416:	22c8      	movs	r2, #200	; 0xc8
 8005418:	80da      	strh	r2, [r3, #6]
 800541a:	e022      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800541c:	4b27      	ldr	r3, [pc, #156]	; (80054bc <Principal_Receive_Config+0x794>)
 800541e:	2264      	movs	r2, #100	; 0x64
 8005420:	80da      	strh	r2, [r3, #6]
 8005422:	e01e      	b.n	8005462 <Principal_Receive_Config+0x73a>
 8005424:	4b25      	ldr	r3, [pc, #148]	; (80054bc <Principal_Receive_Config+0x794>)
 8005426:	2232      	movs	r2, #50	; 0x32
 8005428:	80da      	strh	r2, [r3, #6]
 800542a:	e01a      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800542c:	4b23      	ldr	r3, [pc, #140]	; (80054bc <Principal_Receive_Config+0x794>)
 800542e:	2228      	movs	r2, #40	; 0x28
 8005430:	80da      	strh	r2, [r3, #6]
 8005432:	e016      	b.n	8005462 <Principal_Receive_Config+0x73a>
 8005434:	4b21      	ldr	r3, [pc, #132]	; (80054bc <Principal_Receive_Config+0x794>)
 8005436:	2214      	movs	r2, #20
 8005438:	80da      	strh	r2, [r3, #6]
 800543a:	e012      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800543c:	4b1f      	ldr	r3, [pc, #124]	; (80054bc <Principal_Receive_Config+0x794>)
 800543e:	220a      	movs	r2, #10
 8005440:	80da      	strh	r2, [r3, #6]
 8005442:	e00e      	b.n	8005462 <Principal_Receive_Config+0x73a>
 8005444:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <Principal_Receive_Config+0x794>)
 8005446:	2205      	movs	r2, #5
 8005448:	80da      	strh	r2, [r3, #6]
 800544a:	e00a      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800544c:	4b1b      	ldr	r3, [pc, #108]	; (80054bc <Principal_Receive_Config+0x794>)
 800544e:	2203      	movs	r2, #3
 8005450:	80da      	strh	r2, [r3, #6]
 8005452:	e006      	b.n	8005462 <Principal_Receive_Config+0x73a>
 8005454:	4b19      	ldr	r3, [pc, #100]	; (80054bc <Principal_Receive_Config+0x794>)
 8005456:	2202      	movs	r2, #2
 8005458:	80da      	strh	r2, [r3, #6]
 800545a:	e002      	b.n	8005462 <Principal_Receive_Config+0x73a>
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <Principal_Receive_Config+0x794>)
 800545e:	2200      	movs	r2, #0
 8005460:	80da      	strh	r2, [r3, #6]
 8005462:	bf00      	nop
			Input_Config = data[5];
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	795a      	ldrb	r2, [r3, #5]
 8005468:	4b15      	ldr	r3, [pc, #84]	; (80054c0 <Principal_Receive_Config+0x798>)
 800546a:	701a      	strb	r2, [r3, #0]
			break;
 800546c:	e01e      	b.n	80054ac <Principal_Receive_Config+0x784>

		case 2:
			Date.Year = data[1];
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	785a      	ldrb	r2, [r3, #1]
 8005472:	4b14      	ldr	r3, [pc, #80]	; (80054c4 <Principal_Receive_Config+0x79c>)
 8005474:	70da      	strb	r2, [r3, #3]
			Date.Month = data[2];
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	789a      	ldrb	r2, [r3, #2]
 800547a:	4b12      	ldr	r3, [pc, #72]	; (80054c4 <Principal_Receive_Config+0x79c>)
 800547c:	705a      	strb	r2, [r3, #1]
			Date.Date = data[3];
 800547e:	683b      	ldr	r3, [r7, #0]
 8005480:	78da      	ldrb	r2, [r3, #3]
 8005482:	4b10      	ldr	r3, [pc, #64]	; (80054c4 <Principal_Receive_Config+0x79c>)
 8005484:	709a      	strb	r2, [r3, #2]
			Time.Hours = data[4];
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	791a      	ldrb	r2, [r3, #4]
 800548a:	4b0f      	ldr	r3, [pc, #60]	; (80054c8 <Principal_Receive_Config+0x7a0>)
 800548c:	701a      	strb	r2, [r3, #0]
			Time.Minutes = data[5];
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	795a      	ldrb	r2, [r3, #5]
 8005492:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <Principal_Receive_Config+0x7a0>)
 8005494:	705a      	strb	r2, [r3, #1]
			Time.Seconds = data[6];
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	799a      	ldrb	r2, [r3, #6]
 800549a:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <Principal_Receive_Config+0x7a0>)
 800549c:	709a      	strb	r2, [r3, #2]
			Principal_RTC_Get_Date(&Date, &Time);
 800549e:	490a      	ldr	r1, [pc, #40]	; (80054c8 <Principal_Receive_Config+0x7a0>)
 80054a0:	4808      	ldr	r0, [pc, #32]	; (80054c4 <Principal_Receive_Config+0x79c>)
 80054a2:	f000 fbdb 	bl	8005c5c <Principal_RTC_Get_Date>
			break;
 80054a6:	e001      	b.n	80054ac <Principal_Receive_Config+0x784>

		default:
			return HAL_OK;
 80054a8:	2300      	movs	r3, #0
 80054aa:	e003      	b.n	80054b4 <Principal_Receive_Config+0x78c>
	}

	return Save_EEPROM(hi2c);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fe fc7b 	bl	8003da8 <Save_EEPROM>
 80054b2:	4603      	mov	r3, r0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	200006fc 	.word	0x200006fc
 80054c0:	200006f8 	.word	0x200006f8
 80054c4:	20001a5c 	.word	0x20001a5c
 80054c8:	20002cb0 	.word	0x20002cb0

080054cc <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 80054cc:	b480      	push	{r7}
 80054ce:	af00      	add	r7, sp, #0
	Per_Msg[Analog_1_4] = MSG_FREQ_20HZ;
 80054d0:	4b07      	ldr	r3, [pc, #28]	; (80054f0 <Principal_Hard_Code_Config+0x24>)
 80054d2:	2232      	movs	r2, #50	; 0x32
 80054d4:	801a      	strh	r2, [r3, #0]
	Threshold_RPM = 7000;
 80054d6:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <Principal_Hard_Code_Config+0x28>)
 80054d8:	f641 3258 	movw	r2, #7000	; 0x1b58
 80054dc:	801a      	strh	r2, [r3, #0]
	Threshold_Speed = 1;
 80054de:	4b06      	ldr	r3, [pc, #24]	; (80054f8 <Principal_Hard_Code_Config+0x2c>)
 80054e0:	2201      	movs	r2, #1
 80054e2:	801a      	strh	r2, [r3, #0]
}
 80054e4:	bf00      	nop
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	20002e7c 	.word	0x20002e7c
 80054f4:	20001c5c 	.word	0x20001c5c
 80054f8:	20001a60 	.word	0x20001a60

080054fc <Principal_Datalogger_Init>:
#include "string.h"

FRESULT res[3];

FRESULT Principal_Datalogger_Init(FATFS* fatfs_struct)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
	FRESULT retVal = FR_OK;
 8005504:	2300      	movs	r3, #0
 8005506:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005508:	2180      	movs	r1, #128	; 0x80
 800550a:	4813      	ldr	r0, [pc, #76]	; (8005558 <Principal_Datalogger_Init+0x5c>)
 800550c:	f003 f960 	bl	80087d0 <HAL_GPIO_ReadPin>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d104      	bne.n	8005520 <Principal_Datalogger_Init+0x24>
	{
		Flag_Datalogger = DL_No_Card;
 8005516:	4b11      	ldr	r3, [pc, #68]	; (800555c <Principal_Datalogger_Init+0x60>)
 8005518:	2202      	movs	r2, #2
 800551a:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 800551c:	2301      	movs	r3, #1
 800551e:	e017      	b.n	8005550 <Principal_Datalogger_Init+0x54>
	}

	BSP_SD_Init();
 8005520:	f00a fd70 	bl	8010004 <BSP_SD_Init>

	retVal = f_mount(fatfs_struct, SDPath, 1);
 8005524:	2201      	movs	r2, #1
 8005526:	490e      	ldr	r1, [pc, #56]	; (8005560 <Principal_Datalogger_Init+0x64>)
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f00f ff7b 	bl	8015424 <f_mount>
 800552e:	4603      	mov	r3, r0
 8005530:	73fb      	strb	r3, [r7, #15]

	Flag_Datalogger = DL_No_Save;
 8005532:	4b0a      	ldr	r3, [pc, #40]	; (800555c <Principal_Datalogger_Init+0x60>)
 8005534:	2200      	movs	r2, #0
 8005536:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 8005538:	7bfb      	ldrb	r3, [r7, #15]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <Principal_Datalogger_Init+0x52>
	{
		Flag_Datalogger = DL_Error;
 800553e:	4b07      	ldr	r3, [pc, #28]	; (800555c <Principal_Datalogger_Init+0x60>)
 8005540:	2204      	movs	r2, #4
 8005542:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 8005544:	2200      	movs	r2, #0
 8005546:	4906      	ldr	r1, [pc, #24]	; (8005560 <Principal_Datalogger_Init+0x64>)
 8005548:	2000      	movs	r0, #0
 800554a:	f00f ff6b 	bl	8015424 <f_mount>
	}

	return retVal;
 800554e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}
 8005558:	40020800 	.word	0x40020800
 800555c:	20001bd0 	.word	0x20001bd0
 8005560:	20002e98 	.word	0x20002e98

08005564 <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start(RTC_DateTypeDef* sDate, RTC_TimeTypeDef* sTime, char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 8005564:	b5b0      	push	{r4, r5, r7, lr}
 8005566:	b08c      	sub	sp, #48	; 0x30
 8005568:	af06      	add	r7, sp, #24
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
	FRESULT retVal = FR_OK;
 8005572:	2300      	movs	r3, #0
 8005574:	75fb      	strb	r3, [r7, #23]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005576:	2180      	movs	r1, #128	; 0x80
 8005578:	4856      	ldr	r0, [pc, #344]	; (80056d4 <Principal_Datalogger_Start+0x170>)
 800557a:	f003 f929 	bl	80087d0 <HAL_GPIO_ReadPin>
 800557e:	4603      	mov	r3, r0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d104      	bne.n	800558e <Principal_Datalogger_Start+0x2a>
	{
		Flag_Datalogger = DL_No_Card;
 8005584:	4b54      	ldr	r3, [pc, #336]	; (80056d8 <Principal_Datalogger_Start+0x174>)
 8005586:	2202      	movs	r2, #2
 8005588:	701a      	strb	r2, [r3, #0]
		return FR_DISK_ERR;
 800558a:	2301      	movs	r3, #1
 800558c:	e09e      	b.n	80056cc <Principal_Datalogger_Start+0x168>
	}

	if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET)
 800558e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005592:	4852      	ldr	r0, [pc, #328]	; (80056dc <Principal_Datalogger_Start+0x178>)
 8005594:	f003 f91c 	bl	80087d0 <HAL_GPIO_ReadPin>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d135      	bne.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.rpm < Threshold_RPM)
 800559e:	4b50      	ldr	r3, [pc, #320]	; (80056e0 <Principal_Datalogger_Start+0x17c>)
 80055a0:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 80055a4:	4b4f      	ldr	r3, [pc, #316]	; (80056e4 <Principal_Datalogger_Start+0x180>)
 80055a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	da2d      	bge.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_fl < Threshold_Speed)
 80055ae:	4b4c      	ldr	r3, [pc, #304]	; (80056e0 <Principal_Datalogger_Start+0x17c>)
 80055b0:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80055b4:	4b4c      	ldr	r3, [pc, #304]	; (80056e8 <Principal_Datalogger_Start+0x184>)
 80055b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	da25      	bge.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_fr < Threshold_Speed)
 80055be:	4b48      	ldr	r3, [pc, #288]	; (80056e0 <Principal_Datalogger_Start+0x17c>)
 80055c0:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80055c4:	4b48      	ldr	r3, [pc, #288]	; (80056e8 <Principal_Datalogger_Start+0x184>)
 80055c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	da1d      	bge.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_rl < Threshold_Speed)
 80055ce:	4b44      	ldr	r3, [pc, #272]	; (80056e0 <Principal_Datalogger_Start+0x17c>)
 80055d0:	f9b3 2028 	ldrsh.w	r2, [r3, #40]	; 0x28
 80055d4:	4b44      	ldr	r3, [pc, #272]	; (80056e8 <Principal_Datalogger_Start+0x184>)
 80055d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055da:	429a      	cmp	r2, r3
 80055dc:	da15      	bge.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (ECU_Data.wheel_speed_rr < Threshold_Speed)
 80055de:	4b40      	ldr	r3, [pc, #256]	; (80056e0 <Principal_Datalogger_Start+0x17c>)
 80055e0:	f9b3 202a 	ldrsh.w	r2, [r3, #42]	; 0x2a
 80055e4:	4b40      	ldr	r3, [pc, #256]	; (80056e8 <Principal_Datalogger_Start+0x184>)
 80055e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	da0d      	bge.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (Flag_Datalogger != DL_But_Press)
 80055ee:	4b3a      	ldr	r3, [pc, #232]	; (80056d8 <Principal_Datalogger_Start+0x174>)
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	2b03      	cmp	r3, #3
 80055f4:	d009      	beq.n	800560a <Principal_Datalogger_Start+0xa6>
			&& (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET))
 80055f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80055fa:	4838      	ldr	r0, [pc, #224]	; (80056dc <Principal_Datalogger_Start+0x178>)
 80055fc:	f003 f8e8 	bl	80087d0 <HAL_GPIO_ReadPin>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <Principal_Datalogger_Start+0xa6>
		return FR_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e060      	b.n	80056cc <Principal_Datalogger_Start+0x168>

	Datalogger_Buffer_Position = 0;
 800560a:	4b38      	ldr	r3, [pc, #224]	; (80056ec <Principal_Datalogger_Start+0x188>)
 800560c:	2200      	movs	r2, #0
 800560e:	801a      	strh	r2, [r3, #0]

	Principal_RTC_Get_Date(sDate, sTime);
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 fb22 	bl	8005c5c <Principal_RTC_Get_Date>
	sprintf(dir, "%02d_%02d_%02d", sDate->Year, sDate->Month, sDate->Date);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	78db      	ldrb	r3, [r3, #3]
 800561c:	461a      	mov	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	785b      	ldrb	r3, [r3, #1]
 8005622:	4619      	mov	r1, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	789b      	ldrb	r3, [r3, #2]
 8005628:	9300      	str	r3, [sp, #0]
 800562a:	460b      	mov	r3, r1
 800562c:	4930      	ldr	r1, [pc, #192]	; (80056f0 <Principal_Datalogger_Start+0x18c>)
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f011 fb30 	bl	8016c94 <siprintf>

	retVal = f_mkdir(dir);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f010 fb77 	bl	8015d28 <f_mkdir>
 800563a:	4603      	mov	r3, r0
 800563c:	75fb      	strb	r3, [r7, #23]

	if((retVal != FR_OK) && (retVal != FR_EXIST))
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <Principal_Datalogger_Start+0xf0>
 8005644:	7dfb      	ldrb	r3, [r7, #23]
 8005646:	2b08      	cmp	r3, #8
 8005648:	d004      	beq.n	8005654 <Principal_Datalogger_Start+0xf0>
	{
		Flag_Datalogger = DL_Error;
 800564a:	4b23      	ldr	r3, [pc, #140]	; (80056d8 <Principal_Datalogger_Start+0x174>)
 800564c:	2204      	movs	r2, #4
 800564e:	701a      	strb	r2, [r3, #0]
		return retVal;
 8005650:	7dfb      	ldrb	r3, [r7, #23]
 8005652:	e03b      	b.n	80056cc <Principal_Datalogger_Start+0x168>
	}

	retVal = f_opendir(dir_struct, dir);
 8005654:	6879      	ldr	r1, [r7, #4]
 8005656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005658:	f010 faf3 	bl	8015c42 <f_opendir>
 800565c:	4603      	mov	r3, r0
 800565e:	75fb      	strb	r3, [r7, #23]

	if(retVal != FR_OK)
 8005660:	7dfb      	ldrb	r3, [r7, #23]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d004      	beq.n	8005670 <Principal_Datalogger_Start+0x10c>
	{
		Flag_Datalogger = DL_Error;
 8005666:	4b1c      	ldr	r3, [pc, #112]	; (80056d8 <Principal_Datalogger_Start+0x174>)
 8005668:	2204      	movs	r2, #4
 800566a:	701a      	strb	r2, [r3, #0]
		return retVal;
 800566c:	7dfb      	ldrb	r3, [r7, #23]
 800566e:	e02d      	b.n	80056cc <Principal_Datalogger_Start+0x168>
	}

	sprintf(file, "%s/%02d_%02d_%02d_%02d_%02d_%02d.sd", dir, sDate->Year, sDate->Month, sDate->Date, sTime->Hours, sTime->Minutes, sTime->Seconds);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	78db      	ldrb	r3, [r3, #3]
 8005674:	461d      	mov	r5, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	785b      	ldrb	r3, [r3, #1]
 800567a:	461a      	mov	r2, r3
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	789b      	ldrb	r3, [r3, #2]
 8005680:	4619      	mov	r1, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	785b      	ldrb	r3, [r3, #1]
 800568c:	461c      	mov	r4, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	789b      	ldrb	r3, [r3, #2]
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	9403      	str	r4, [sp, #12]
 8005696:	9002      	str	r0, [sp, #8]
 8005698:	9101      	str	r1, [sp, #4]
 800569a:	9200      	str	r2, [sp, #0]
 800569c:	462b      	mov	r3, r5
 800569e:	687a      	ldr	r2, [r7, #4]
 80056a0:	4914      	ldr	r1, [pc, #80]	; (80056f4 <Principal_Datalogger_Start+0x190>)
 80056a2:	6838      	ldr	r0, [r7, #0]
 80056a4:	f011 faf6 	bl	8016c94 <siprintf>
//	sprintf(file, "%s/%02d_%02d_%02d.sd", dir, sTime->Hours, sTime->Minutes, sTime->Seconds);

	retVal = f_open(file_struct, file, FA_WRITE | FA_CREATE_ALWAYS);
 80056a8:	220a      	movs	r2, #10
 80056aa:	6839      	ldr	r1, [r7, #0]
 80056ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056ae:	f00f fefd 	bl	80154ac <f_open>
 80056b2:	4603      	mov	r3, r0
 80056b4:	75fb      	strb	r3, [r7, #23]

	if(retVal == FR_OK)
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d103      	bne.n	80056c4 <Principal_Datalogger_Start+0x160>
		Flag_Datalogger = DL_Save;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <Principal_Datalogger_Start+0x174>)
 80056be:	2201      	movs	r2, #1
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	e002      	b.n	80056ca <Principal_Datalogger_Start+0x166>
	else
		Flag_Datalogger = DL_Error;
 80056c4:	4b04      	ldr	r3, [pc, #16]	; (80056d8 <Principal_Datalogger_Start+0x174>)
 80056c6:	2204      	movs	r2, #4
 80056c8:	701a      	strb	r2, [r3, #0]

	return retVal;
 80056ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bdb0      	pop	{r4, r5, r7, pc}
 80056d4:	40020800 	.word	0x40020800
 80056d8:	20001bd0 	.word	0x20001bd0
 80056dc:	40020000 	.word	0x40020000
 80056e0:	20002e24 	.word	0x20002e24
 80056e4:	20001c5c 	.word	0x20001c5c
 80056e8:	20001a60 	.word	0x20001a60
 80056ec:	200007bc 	.word	0x200007bc
 80056f0:	080174ec 	.word	0x080174ec
 80056f4:	080174fc 	.word	0x080174fc

080056f8 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish(DIR* dir_struct, FIL* file_struct)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
	FRESULT retVal = FR_OK;
 8005702:	2300      	movs	r3, #0
 8005704:	73fb      	strb	r3, [r7, #15]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005706:	2180      	movs	r1, #128	; 0x80
 8005708:	4814      	ldr	r0, [pc, #80]	; (800575c <Principal_Datalogger_Finish+0x64>)
 800570a:	f003 f861 	bl	80087d0 <HAL_GPIO_ReadPin>
 800570e:	4603      	mov	r3, r0
 8005710:	2b01      	cmp	r3, #1
 8005712:	d110      	bne.n	8005736 <Principal_Datalogger_Finish+0x3e>
	{
		f_close(file_struct);
 8005714:	6838      	ldr	r0, [r7, #0]
 8005716:	f010 fa74 	bl	8015c02 <f_close>
		f_closedir(dir_struct);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f010 faec 	bl	8015cf8 <f_closedir>
		retVal = f_mount(0, SDPath, 0);
 8005720:	2200      	movs	r2, #0
 8005722:	490f      	ldr	r1, [pc, #60]	; (8005760 <Principal_Datalogger_Finish+0x68>)
 8005724:	2000      	movs	r0, #0
 8005726:	f00f fe7d 	bl	8015424 <f_mount>
 800572a:	4603      	mov	r3, r0
 800572c:	73fb      	strb	r3, [r7, #15]
		Flag_Datalogger = DL_No_Card;
 800572e:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <Principal_Datalogger_Finish+0x6c>)
 8005730:	2202      	movs	r2, #2
 8005732:	701a      	strb	r2, [r3, #0]
 8005734:	e00a      	b.n	800574c <Principal_Datalogger_Finish+0x54>
	}

	else
	{
		retVal = f_close(file_struct);
 8005736:	6838      	ldr	r0, [r7, #0]
 8005738:	f010 fa63 	bl	8015c02 <f_close>
 800573c:	4603      	mov	r3, r0
 800573e:	73fb      	strb	r3, [r7, #15]
		f_closedir(dir_struct);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f010 fad9 	bl	8015cf8 <f_closedir>
		Flag_Datalogger = DL_No_Save;
 8005746:	4b07      	ldr	r3, [pc, #28]	; (8005764 <Principal_Datalogger_Finish+0x6c>)
 8005748:	2200      	movs	r2, #0
 800574a:	701a      	strb	r2, [r3, #0]
	}

	Verify_Datalogger = 0;
 800574c:	4b06      	ldr	r3, [pc, #24]	; (8005768 <Principal_Datalogger_Finish+0x70>)
 800574e:	2200      	movs	r2, #0
 8005750:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005752:	7bfb      	ldrb	r3, [r7, #15]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40020800 	.word	0x40020800
 8005760:	20002e98 	.word	0x20002e98
 8005764:	20001bd0 	.word	0x20001bd0
 8005768:	20001a10 	.word	0x20001a10

0800576c <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(uint32_t Data_ID, uint8_t Data_Length, uint8_t* Data_Buffer, FIL* file_struct)
{
 800576c:	b5b0      	push	{r4, r5, r7, lr}
 800576e:	b08a      	sub	sp, #40	; 0x28
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	607a      	str	r2, [r7, #4]
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	460b      	mov	r3, r1
 800577a:	72fb      	strb	r3, [r7, #11]
 800577c:	466b      	mov	r3, sp
 800577e:	461d      	mov	r5, r3
	uint8_t buffer[5 + Data_Length];
 8005780:	7afb      	ldrb	r3, [r7, #11]
 8005782:	1d5c      	adds	r4, r3, #5
 8005784:	1e63      	subs	r3, r4, #1
 8005786:	623b      	str	r3, [r7, #32]
 8005788:	4623      	mov	r3, r4
 800578a:	4618      	mov	r0, r3
 800578c:	f04f 0100 	mov.w	r1, #0
 8005790:	f04f 0200 	mov.w	r2, #0
 8005794:	f04f 0300 	mov.w	r3, #0
 8005798:	00cb      	lsls	r3, r1, #3
 800579a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800579e:	00c2      	lsls	r2, r0, #3
 80057a0:	4623      	mov	r3, r4
 80057a2:	4618      	mov	r0, r3
 80057a4:	f04f 0100 	mov.w	r1, #0
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	f04f 0300 	mov.w	r3, #0
 80057b0:	00cb      	lsls	r3, r1, #3
 80057b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80057b6:	00c2      	lsls	r2, r0, #3
 80057b8:	4623      	mov	r3, r4
 80057ba:	3307      	adds	r3, #7
 80057bc:	08db      	lsrs	r3, r3, #3
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	ebad 0d03 	sub.w	sp, sp, r3
 80057c4:	466b      	mov	r3, sp
 80057c6:	3300      	adds	r3, #0
 80057c8:	61fb      	str	r3, [r7, #28]
	UINT byte;
	FRESULT verify[2];

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 80057ca:	2180      	movs	r1, #128	; 0x80
 80057cc:	4845      	ldr	r0, [pc, #276]	; (80058e4 <Principal_Datalogger_Save_Buffer+0x178>)
 80057ce:	f002 ffff 	bl	80087d0 <HAL_GPIO_ReadPin>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d07d      	beq.n	80058d4 <Principal_Datalogger_Save_Buffer+0x168>
		return;

	else if(HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 80057d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80057dc:	4842      	ldr	r0, [pc, #264]	; (80058e8 <Principal_Datalogger_Save_Buffer+0x17c>)
 80057de:	f002 fff7 	bl	80087d0 <HAL_GPIO_ReadPin>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d077      	beq.n	80058d8 <Principal_Datalogger_Save_Buffer+0x16c>
		return;

	buffer[0] = 'D';
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	2244      	movs	r2, #68	; 0x44
 80057ec:	701a      	strb	r2, [r3, #0]
	buffer[1] = 'L';
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	224c      	movs	r2, #76	; 0x4c
 80057f2:	705a      	strb	r2, [r3, #1]
	buffer[2] = Data_ID & 0xff;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	69fb      	ldr	r3, [r7, #28]
 80057fa:	709a      	strb	r2, [r3, #2]
	buffer[3] = Data_Length;
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	7afa      	ldrb	r2, [r7, #11]
 8005800:	70da      	strb	r2, [r3, #3]
	buffer[4] = Acc_Datalogger[0];
 8005802:	4b3a      	ldr	r3, [pc, #232]	; (80058ec <Principal_Datalogger_Save_Buffer+0x180>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	b2da      	uxtb	r2, r3
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	711a      	strb	r2, [r3, #4]

	Acc_Datalogger[0] = 0;
 800580c:	4b37      	ldr	r3, [pc, #220]	; (80058ec <Principal_Datalogger_Save_Buffer+0x180>)
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]

	for(uint8_t i = 0; i < Data_Length; i++)
 8005812:	2300      	movs	r3, #0
 8005814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005818:	e00e      	b.n	8005838 <Principal_Datalogger_Save_Buffer+0xcc>
		buffer[5 + i] = Data_Buffer[i];
 800581a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	441a      	add	r2, r3
 8005822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005826:	3305      	adds	r3, #5
 8005828:	7811      	ldrb	r1, [r2, #0]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Data_Length; i++)
 800582e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005832:	3301      	adds	r3, #1
 8005834:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005838:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800583c:	7afb      	ldrb	r3, [r7, #11]
 800583e:	429a      	cmp	r2, r3
 8005840:	d3eb      	bcc.n	800581a <Principal_Datalogger_Save_Buffer+0xae>

	memcpy(Datalogger_Buffer + Datalogger_Buffer_Position, buffer, 5 + Data_Length);
 8005842:	4b2b      	ldr	r3, [pc, #172]	; (80058f0 <Principal_Datalogger_Save_Buffer+0x184>)
 8005844:	881b      	ldrh	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	4b2a      	ldr	r3, [pc, #168]	; (80058f4 <Principal_Datalogger_Save_Buffer+0x188>)
 800584a:	18d0      	adds	r0, r2, r3
 800584c:	69f9      	ldr	r1, [r7, #28]
 800584e:	7afb      	ldrb	r3, [r7, #11]
 8005850:	3305      	adds	r3, #5
 8005852:	461a      	mov	r2, r3
 8005854:	f011 fa08 	bl	8016c68 <memcpy>

	Datalogger_Buffer_Position += (5 + Data_Length);
 8005858:	7afb      	ldrb	r3, [r7, #11]
 800585a:	b29a      	uxth	r2, r3
 800585c:	4b24      	ldr	r3, [pc, #144]	; (80058f0 <Principal_Datalogger_Save_Buffer+0x184>)
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	4413      	add	r3, r2
 8005862:	b29b      	uxth	r3, r3
 8005864:	3305      	adds	r3, #5
 8005866:	b29a      	uxth	r2, r3
 8005868:	4b21      	ldr	r3, [pc, #132]	; (80058f0 <Principal_Datalogger_Save_Buffer+0x184>)
 800586a:	801a      	strh	r2, [r3, #0]

	if(Datalogger_Buffer_Position > DATALOGGER_SAVE_THR)
 800586c:	4b20      	ldr	r3, [pc, #128]	; (80058f0 <Principal_Datalogger_Save_Buffer+0x184>)
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005874:	d32c      	bcc.n	80058d0 <Principal_Datalogger_Save_Buffer+0x164>
	{
		verify[0] = f_write(file_struct, Datalogger_Buffer, Datalogger_Buffer_Position, &byte);
 8005876:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <Principal_Datalogger_Save_Buffer+0x184>)
 8005878:	881b      	ldrh	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	f107 0318 	add.w	r3, r7, #24
 8005880:	491c      	ldr	r1, [pc, #112]	; (80058f4 <Principal_Datalogger_Save_Buffer+0x188>)
 8005882:	6838      	ldr	r0, [r7, #0]
 8005884:	f00f ffab 	bl	80157de <f_write>
 8005888:	4603      	mov	r3, r0
 800588a:	753b      	strb	r3, [r7, #20]

		verify[1] = f_sync(file_struct);
 800588c:	6838      	ldr	r0, [r7, #0]
 800588e:	f010 f93a 	bl	8015b06 <f_sync>
 8005892:	4603      	mov	r3, r0
 8005894:	757b      	strb	r3, [r7, #21]

		res[0] = verify[0];
 8005896:	7d3a      	ldrb	r2, [r7, #20]
 8005898:	4b17      	ldr	r3, [pc, #92]	; (80058f8 <Principal_Datalogger_Save_Buffer+0x18c>)
 800589a:	701a      	strb	r2, [r3, #0]
		res[1] = verify[1];
 800589c:	7d7a      	ldrb	r2, [r7, #21]
 800589e:	4b16      	ldr	r3, [pc, #88]	; (80058f8 <Principal_Datalogger_Save_Buffer+0x18c>)
 80058a0:	705a      	strb	r2, [r3, #1]

		if((verify[0] == FR_OK) && (verify[1] == FR_OK) && ((Datalogger_Buffer_Position + 1) == byte))
 80058a2:	7d3b      	ldrb	r3, [r7, #20]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10d      	bne.n	80058c4 <Principal_Datalogger_Save_Buffer+0x158>
 80058a8:	7d7b      	ldrb	r3, [r7, #21]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10a      	bne.n	80058c4 <Principal_Datalogger_Save_Buffer+0x158>
 80058ae:	4b10      	ldr	r3, [pc, #64]	; (80058f0 <Principal_Datalogger_Save_Buffer+0x184>)
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	3301      	adds	r3, #1
 80058b4:	461a      	mov	r2, r3
 80058b6:	69bb      	ldr	r3, [r7, #24]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d103      	bne.n	80058c4 <Principal_Datalogger_Save_Buffer+0x158>
			Verify_Datalogger = 1;
 80058bc:	4b0f      	ldr	r3, [pc, #60]	; (80058fc <Principal_Datalogger_Save_Buffer+0x190>)
 80058be:	2201      	movs	r2, #1
 80058c0:	701a      	strb	r2, [r3, #0]
 80058c2:	e002      	b.n	80058ca <Principal_Datalogger_Save_Buffer+0x15e>
		else
			Verify_Datalogger = 0;
 80058c4:	4b0d      	ldr	r3, [pc, #52]	; (80058fc <Principal_Datalogger_Save_Buffer+0x190>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	701a      	strb	r2, [r3, #0]

		Datalogger_Buffer_Position = 0;
 80058ca:	4b09      	ldr	r3, [pc, #36]	; (80058f0 <Principal_Datalogger_Save_Buffer+0x184>)
 80058cc:	2200      	movs	r2, #0
 80058ce:	801a      	strh	r2, [r3, #0]
 80058d0:	46ad      	mov	sp, r5
 80058d2:	e003      	b.n	80058dc <Principal_Datalogger_Save_Buffer+0x170>
		return;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <Principal_Datalogger_Save_Buffer+0x16e>
		return;
 80058d8:	bf00      	nop
 80058da:	46ad      	mov	sp, r5
	}
}
 80058dc:	3728      	adds	r7, #40	; 0x28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bdb0      	pop	{r4, r5, r7, pc}
 80058e2:	bf00      	nop
 80058e4:	40020800 	.word	0x40020800
 80058e8:	40020000 	.word	0x40020000
 80058ec:	20002e1c 	.word	0x20002e1c
 80058f0:	200007bc 	.word	0x200007bc
 80058f4:	200007cc 	.word	0x200007cc
 80058f8:	20002e8c 	.word	0x20002e8c
 80058fc:	20001a10 	.word	0x20001a10

08005900 <Principal_Datalogger_Button>:

void Principal_Datalogger_Button(RTC_DateTypeDef* sDate, RTC_TimeTypeDef* sTime, char* dir, char* file, DIR* dir_struct, FIL* file_struct)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
	if(Acc_Datalogger[1] == 0)
 800590e:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <Principal_Datalogger_Button+0x38>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10a      	bne.n	800592c <Principal_Datalogger_Button+0x2c>
	{
		Acc_Datalogger[1] = BUTTON_COOLDOWN;
 8005916:	4b08      	ldr	r3, [pc, #32]	; (8005938 <Principal_Datalogger_Button+0x38>)
 8005918:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800591c:	605a      	str	r2, [r3, #4]

		if(Flag_Datalogger == DL_No_Save)
 800591e:	4b07      	ldr	r3, [pc, #28]	; (800593c <Principal_Datalogger_Button+0x3c>)
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d102      	bne.n	800592c <Principal_Datalogger_Button+0x2c>
			Flag_Datalogger = DL_But_Press;
 8005926:	4b05      	ldr	r3, [pc, #20]	; (800593c <Principal_Datalogger_Button+0x3c>)
 8005928:	2203      	movs	r2, #3
 800592a:	701a      	strb	r2, [r3, #0]
	}
}
 800592c:	bf00      	nop
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	20002e1c 	.word	0x20002e1c
 800593c:	20001bd0 	.word	0x20001bd0

08005940 <Principal_Card_Detection>:

void Principal_Card_Detection(FATFS* fatfs_struct, DIR* dir_struct, FIL* file_struct)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b086      	sub	sp, #24
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin);
 800594c:	2180      	movs	r1, #128	; 0x80
 800594e:	4812      	ldr	r0, [pc, #72]	; (8005998 <Principal_Card_Detection+0x58>)
 8005950:	f002 ff3e 	bl	80087d0 <HAL_GPIO_ReadPin>
 8005954:	4603      	mov	r3, r0
 8005956:	75fb      	strb	r3, [r7, #23]

	if(cd_pin == GPIO_PIN_SET)
 8005958:	7dfb      	ldrb	r3, [r7, #23]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d10b      	bne.n	8005976 <Principal_Card_Detection+0x36>
	{
		Datalogger_CD = GPIO_PIN_SET;
 800595e:	4b0f      	ldr	r3, [pc, #60]	; (800599c <Principal_Card_Detection+0x5c>)
 8005960:	2201      	movs	r2, #1
 8005962:	701a      	strb	r2, [r3, #0]
		if(Flag_Datalogger == DL_Save)
 8005964:	4b0e      	ldr	r3, [pc, #56]	; (80059a0 <Principal_Card_Detection+0x60>)
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d111      	bne.n	8005990 <Principal_Card_Detection+0x50>
			Principal_Datalogger_Finish(dir_struct, file_struct);
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	68b8      	ldr	r0, [r7, #8]
 8005970:	f7ff fec2 	bl	80056f8 <Principal_Datalogger_Finish>
	else if((cd_pin == GPIO_PIN_RESET) && (Datalogger_CD == GPIO_PIN_SET))
	{
		Datalogger_CD = GPIO_PIN_RESET;
		Principal_Datalogger_Init(fatfs_struct);
	}
}
 8005974:	e00c      	b.n	8005990 <Principal_Card_Detection+0x50>
	else if((cd_pin == GPIO_PIN_RESET) && (Datalogger_CD == GPIO_PIN_SET))
 8005976:	7dfb      	ldrb	r3, [r7, #23]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d109      	bne.n	8005990 <Principal_Card_Detection+0x50>
 800597c:	4b07      	ldr	r3, [pc, #28]	; (800599c <Principal_Card_Detection+0x5c>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d105      	bne.n	8005990 <Principal_Card_Detection+0x50>
		Datalogger_CD = GPIO_PIN_RESET;
 8005984:	4b05      	ldr	r3, [pc, #20]	; (800599c <Principal_Card_Detection+0x5c>)
 8005986:	2200      	movs	r2, #0
 8005988:	701a      	strb	r2, [r3, #0]
		Principal_Datalogger_Init(fatfs_struct);
 800598a:	68f8      	ldr	r0, [r7, #12]
 800598c:	f7ff fdb6 	bl	80054fc <Principal_Datalogger_Init>
}
 8005990:	bf00      	nop
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	40020800 	.word	0x40020800
 800599c:	20001b64 	.word	0x20001b64
 80059a0:	20001bd0 	.word	0x20001bd0

080059a4 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	af00      	add	r7, sp, #0
	Lap_Number++;
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <Principal_Beacon_Detect+0x1c>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	3301      	adds	r3, #1
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	4b03      	ldr	r3, [pc, #12]	; (80059c0 <Principal_Beacon_Detect+0x1c>)
 80059b2:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, Beacon_Msg);
 80059b4:	2107      	movs	r1, #7
 80059b6:	4803      	ldr	r0, [pc, #12]	; (80059c4 <Principal_Beacon_Detect+0x20>)
 80059b8:	f7fd fe18 	bl	80035ec <Principal_Transmit_Msg>
}
 80059bc:	bf00      	nop
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	20002cc4 	.word	0x20002cc4
 80059c4:	20002d2c 	.word	0x20002d2c

080059c8 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 80059d0:	4b2c      	ldr	r3, [pc, #176]	; (8005a84 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80059d2:	4a2d      	ldr	r2, [pc, #180]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059d4:	2100      	movs	r1, #0
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 fd4e 	bl	8007478 <HAL_CAN_GetRxMessage>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d143      	bne.n	8005a6a <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
	{
		Verify_CAN |= 2;
 80059e2:	4b2a      	ldr	r3, [pc, #168]	; (8005a8c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f043 0302 	orr.w	r3, r3, #2
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	4b27      	ldr	r3, [pc, #156]	; (8005a8c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 80059ee:	701a      	strb	r2, [r3, #0]

		if((RxHeader.IDE == CAN_ID_STD) && (Flag_Datalogger == DL_Save))
 80059f0:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d10d      	bne.n	8005a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 80059f8:	4b25      	ldr	r3, [pc, #148]	; (8005a90 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d109      	bne.n	8005a14 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
			Principal_Datalogger_Save_Buffer(RxHeader.StdId, RxHeader.DLC, RxData, &File_Struct);
 8005a00:	4b21      	ldr	r3, [pc, #132]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a02:	6818      	ldr	r0, [r3, #0]
 8005a04:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	b2d9      	uxtb	r1, r3
 8005a0a:	4b22      	ldr	r3, [pc, #136]	; (8005a94 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8005a0c:	4a1d      	ldr	r2, [pc, #116]	; (8005a84 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005a0e:	f7ff fead 	bl	800576c <Principal_Datalogger_Save_Buffer>
 8005a12:	e032      	b.n	8005a7a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>

		else if(((RxHeader.ExtId & 0x1FFFF000) == 0x1E35C000) && (RxHeader.IDE == CAN_ID_EXT))
 8005a14:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a16:	685a      	ldr	r2, [r3, #4]
 8005a18:	4b1f      	ldr	r3, [pc, #124]	; (8005a98 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	4a1f      	ldr	r2, [pc, #124]	; (8005a9c <HAL_CAN_RxFifo0MsgPendingCallback+0xd4>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d10d      	bne.n	8005a3e <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
 8005a22:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	2b04      	cmp	r3, #4
 8005a28:	d109      	bne.n	8005a3e <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
			PDM_CAN_Process_Data(RxHeader.ExtId, RxHeader.DLC, RxData, &PDM_Readings);
 8005a2a:	4b17      	ldr	r3, [pc, #92]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a2c:	6858      	ldr	r0, [r3, #4]
 8005a2e:	4b16      	ldr	r3, [pc, #88]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	b2d9      	uxtb	r1, r3
 8005a34:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <HAL_CAN_RxFifo0MsgPendingCallback+0xd8>)
 8005a36:	4a13      	ldr	r2, [pc, #76]	; (8005a84 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005a38:	f7fc fb2c 	bl	8002094 <PDM_CAN_Process_Data>
 8005a3c:	e01d      	b.n	8005a7a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>

		else if((RxHeader.ExtId == CONFIG_ID) && (RxHeader.IDE == CAN_ID_EXT))
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d108      	bne.n	8005a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
 8005a46:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d104      	bne.n	8005a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x90>
			Principal_Receive_Config(&hi2c1, RxData);
 8005a4e:	490d      	ldr	r1, [pc, #52]	; (8005a84 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005a50:	4814      	ldr	r0, [pc, #80]	; (8005aa4 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8005a52:	f7ff f969 	bl	8004d28 <Principal_Receive_Config>
 8005a56:	e010      	b.n	8005a7a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>

		else
			FT_CAN_ReceiveData(RxHeader.ExtId, RxHeader.DLC, RxData, &ECU_Data);
 8005a58:	4b0b      	ldr	r3, [pc, #44]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a5a:	6858      	ldr	r0, [r3, #4]
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	; (8005a88 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8005a5e:	6919      	ldr	r1, [r3, #16]
 8005a60:	4b11      	ldr	r3, [pc, #68]	; (8005aa8 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8005a62:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8005a64:	f7fb f834 	bl	8000ad0 <FT_CAN_ReceiveData>
	}

	else
		Verify_CAN &= 1;
}
 8005a68:	e007      	b.n	8005a7a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
		Verify_CAN &= 1;
 8005a6a:	4b08      	ldr	r3, [pc, #32]	; (8005a8c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	b2da      	uxtb	r2, r3
 8005a74:	4b05      	ldr	r3, [pc, #20]	; (8005a8c <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8005a76:	701a      	strb	r2, [r3, #0]
}
 8005a78:	e7ff      	b.n	8005a7a <HAL_CAN_RxFifo0MsgPendingCallback+0xb2>
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20001c7c 	.word	0x20001c7c
 8005a88:	20002db0 	.word	0x20002db0
 8005a8c:	20001a58 	.word	0x20001a58
 8005a90:	20001bd0 	.word	0x20001bd0
 8005a94:	20001c84 	.word	0x20001c84
 8005a98:	1ffff000 	.word	0x1ffff000
 8005a9c:	1e35c000 	.word	0x1e35c000
 8005aa0:	20001a14 	.word	0x20001a14
 8005aa4:	20000768 	.word	0x20000768
 8005aa8:	20002e24 	.word	0x20002e24

08005aac <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af02      	add	r7, sp, #8
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == EXTI0_Pin)
 8005ab6:	88fb      	ldrh	r3, [r7, #6]
 8005ab8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005abc:	d117      	bne.n	8005aee <HAL_GPIO_EXTI_Callback+0x42>
	{
		if((Input_Config & 0x01) == 0)
 8005abe:	4b1c      	ldr	r3, [pc, #112]	; (8005b30 <HAL_GPIO_EXTI_Callback+0x84>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_GPIO_EXTI_Callback+0x22>
			Principal_Beacon_Detect();
 8005aca:	f7ff ff6b 	bl	80059a4 <Principal_Beacon_Detect>

		if((Input_Config & 0x02) == 0)
 8005ace:	4b18      	ldr	r3, [pc, #96]	; (8005b30 <HAL_GPIO_EXTI_Callback+0x84>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f003 0302 	and.w	r3, r3, #2
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d109      	bne.n	8005aee <HAL_GPIO_EXTI_Callback+0x42>
			Principal_Datalogger_Button(&Date, &Time, Dir_String, Log_String, &Dir_Struct, &File_Struct);
 8005ada:	4b16      	ldr	r3, [pc, #88]	; (8005b34 <HAL_GPIO_EXTI_Callback+0x88>)
 8005adc:	9301      	str	r3, [sp, #4]
 8005ade:	4b16      	ldr	r3, [pc, #88]	; (8005b38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005ae0:	9300      	str	r3, [sp, #0]
 8005ae2:	4b16      	ldr	r3, [pc, #88]	; (8005b3c <HAL_GPIO_EXTI_Callback+0x90>)
 8005ae4:	4a16      	ldr	r2, [pc, #88]	; (8005b40 <HAL_GPIO_EXTI_Callback+0x94>)
 8005ae6:	4917      	ldr	r1, [pc, #92]	; (8005b44 <HAL_GPIO_EXTI_Callback+0x98>)
 8005ae8:	4817      	ldr	r0, [pc, #92]	; (8005b48 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005aea:	f7ff ff09 	bl	8005900 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 8005aee:	88fb      	ldrh	r3, [r7, #6]
 8005af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af4:	d117      	bne.n	8005b26 <HAL_GPIO_EXTI_Callback+0x7a>
	{
		if((Input_Config & 0x01) == 1)
 8005af6:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <HAL_GPIO_EXTI_Callback+0x84>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	f003 0301 	and.w	r3, r3, #1
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <HAL_GPIO_EXTI_Callback+0x5a>
			Principal_Beacon_Detect();
 8005b02:	f7ff ff4f 	bl	80059a4 <Principal_Beacon_Detect>

		if((Input_Config & 0x02) == 2)
 8005b06:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <HAL_GPIO_EXTI_Callback+0x84>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_GPIO_EXTI_Callback+0x7a>
			Principal_Datalogger_Button(&Date, &Time, Dir_String, Log_String, &Dir_Struct, &File_Struct);
 8005b12:	4b08      	ldr	r3, [pc, #32]	; (8005b34 <HAL_GPIO_EXTI_Callback+0x88>)
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	4b08      	ldr	r3, [pc, #32]	; (8005b38 <HAL_GPIO_EXTI_Callback+0x8c>)
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	4b08      	ldr	r3, [pc, #32]	; (8005b3c <HAL_GPIO_EXTI_Callback+0x90>)
 8005b1c:	4a08      	ldr	r2, [pc, #32]	; (8005b40 <HAL_GPIO_EXTI_Callback+0x94>)
 8005b1e:	4909      	ldr	r1, [pc, #36]	; (8005b44 <HAL_GPIO_EXTI_Callback+0x98>)
 8005b20:	4809      	ldr	r0, [pc, #36]	; (8005b48 <HAL_GPIO_EXTI_Callback+0x9c>)
 8005b22:	f7ff feed 	bl	8005900 <Principal_Datalogger_Button>
	}
}
 8005b26:	bf00      	nop
 8005b28:	3708      	adds	r7, #8
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	200006f8 	.word	0x200006f8
 8005b34:	20001c84 	.word	0x20001c84
 8005b38:	20001a64 	.word	0x20001a64
 8005b3c:	20002d64 	.word	0x20002d64
 8005b40:	200009cc 	.word	0x200009cc
 8005b44:	20002cb0 	.word	0x20002cb0
 8005b48:	20001a5c 	.word	0x20001a5c

08005b4c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b083      	sub	sp, #12
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a26      	ldr	r2, [pc, #152]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d144      	bne.n	8005be8 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		Acc_Datalogger[0]++;
 8005b5e:	4b26      	ldr	r3, [pc, #152]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3301      	adds	r3, #1
 8005b64:	4a24      	ldr	r2, [pc, #144]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b66:	6013      	str	r3, [r2, #0]
		if(Acc_Datalogger[1] > 0) Acc_Datalogger[1]--;
 8005b68:	4b23      	ldr	r3, [pc, #140]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d004      	beq.n	8005b7a <HAL_TIM_PeriodElapsedCallback+0x2e>
 8005b70:	4b21      	ldr	r3, [pc, #132]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	3b01      	subs	r3, #1
 8005b76:	4a20      	ldr	r2, [pc, #128]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8005b78:	6053      	str	r3, [r2, #4]

		Acc_CAN[Analog_1_4]++;
 8005b7a:	4b20      	ldr	r3, [pc, #128]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	4a1e      	ldr	r2, [pc, #120]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b82:	6013      	str	r3, [r2, #0]
		Acc_CAN[Analog_5_8]++;
 8005b84:	4b1d      	ldr	r3, [pc, #116]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	4a1c      	ldr	r2, [pc, #112]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b8c:	6053      	str	r3, [r2, #4]
		Acc_CAN[Analog_9_12]++;
 8005b8e:	4b1b      	ldr	r3, [pc, #108]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	3301      	adds	r3, #1
 8005b94:	4a19      	ldr	r2, [pc, #100]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b96:	6093      	str	r3, [r2, #8]
		Acc_CAN[RTC_Msg]++;
 8005b98:	4b18      	ldr	r3, [pc, #96]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8005ba0:	60d3      	str	r3, [r2, #12]

		Acc_Msg[Analog_1_4]++;
 8005ba2:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005baa:	6013      	str	r3, [r2, #0]
		Acc_Msg[Analog_5_8]++;
 8005bac:	4b14      	ldr	r3, [pc, #80]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	4a13      	ldr	r2, [pc, #76]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bb4:	6053      	str	r3, [r2, #4]
		Acc_Msg[Analog_9_12]++;
 8005bb6:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	4a10      	ldr	r2, [pc, #64]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bbe:	6093      	str	r3, [r2, #8]
		Acc_Msg[RTC_Msg]++;
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	4a0e      	ldr	r2, [pc, #56]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bc8:	60d3      	str	r3, [r2, #12]
		Acc_Msg[Verify_Msg]++;
 8005bca:	4b0d      	ldr	r3, [pc, #52]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	4a0b      	ldr	r2, [pc, #44]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bd2:	6113      	str	r3, [r2, #16]
		Acc_Msg[ECU_Save]++;
 8005bd4:	4b0a      	ldr	r3, [pc, #40]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	4a09      	ldr	r2, [pc, #36]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005bdc:	6153      	str	r3, [r2, #20]
		Acc_Msg[PDM_Save]++;
 8005bde:	4b08      	ldr	r3, [pc, #32]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	3301      	adds	r3, #1
 8005be4:	4a06      	ldr	r2, [pc, #24]	; (8005c00 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8005be6:	6193      	str	r3, [r2, #24]
	}
}
 8005be8:	bf00      	nop
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	40001400 	.word	0x40001400
 8005bf8:	20002e1c 	.word	0x20002e1c
 8005bfc:	20002d54 	.word	0x20002d54
 8005c00:	20001c60 	.word	0x20001c60

08005c04 <Principal_RTC_Reg_Check>:
 */

#include "principal.h"

void Principal_RTC_Reg_Check(RTC_DateTypeDef *sDate, RTC_TimeTypeDef *sTime)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 8005c0e:	2101      	movs	r1, #1
 8005c10:	480e      	ldr	r0, [pc, #56]	; (8005c4c <Principal_RTC_Reg_Check+0x48>)
 8005c12:	f006 faa5 	bl	800c160 <HAL_RTCEx_BKUPRead>
 8005c16:	4603      	mov	r3, r0
 8005c18:	f24e 325c 	movw	r2, #58204	; 0xe35c
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d103      	bne.n	8005c28 <Principal_RTC_Reg_Check+0x24>
		Flag_RTC = RTC_OK;
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <Principal_RTC_Reg_Check+0x4c>)
 8005c22:	2200      	movs	r2, #0
 8005c24:	701a      	strb	r2, [r3, #0]
 8005c26:	e002      	b.n	8005c2e <Principal_RTC_Reg_Check+0x2a>

	else
		Flag_RTC = RTC_Lost;
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <Principal_RTC_Reg_Check+0x4c>)
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	701a      	strb	r2, [r3, #0]

	HAL_RTC_GetDate(&hrtc, &Date, RTC_FORMAT_BIN);
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4908      	ldr	r1, [pc, #32]	; (8005c54 <Principal_RTC_Reg_Check+0x50>)
 8005c32:	4806      	ldr	r0, [pc, #24]	; (8005c4c <Principal_RTC_Reg_Check+0x48>)
 8005c34:	f006 f9d3 	bl	800bfde <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, &Time, RTC_FORMAT_BIN);
 8005c38:	2200      	movs	r2, #0
 8005c3a:	4907      	ldr	r1, [pc, #28]	; (8005c58 <Principal_RTC_Reg_Check+0x54>)
 8005c3c:	4803      	ldr	r0, [pc, #12]	; (8005c4c <Principal_RTC_Reg_Check+0x48>)
 8005c3e:	f006 f970 	bl	800bf22 <HAL_RTC_GetTime>
}
 8005c42:	bf00      	nop
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20001b44 	.word	0x20001b44
 8005c50:	20001a52 	.word	0x20001a52
 8005c54:	20001a5c 	.word	0x20001a5c
 8005c58:	20002cb0 	.word	0x20002cb0

08005c5c <Principal_RTC_Get_Date>:

void Principal_RTC_Get_Date(RTC_DateTypeDef *sDate, RTC_TimeTypeDef *sTime)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
	HAL_RTC_GetDate(&hrtc, sDate, RTC_FORMAT_BIN);
 8005c66:	2200      	movs	r2, #0
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4806      	ldr	r0, [pc, #24]	; (8005c84 <Principal_RTC_Get_Date+0x28>)
 8005c6c:	f006 f9b7 	bl	800bfde <HAL_RTC_GetDate>
	HAL_RTC_GetTime(&hrtc, sTime, RTC_FORMAT_BIN);
 8005c70:	2200      	movs	r2, #0
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	4803      	ldr	r0, [pc, #12]	; (8005c84 <Principal_RTC_Get_Date+0x28>)
 8005c76:	f006 f954 	bl	800bf22 <HAL_RTC_GetTime>
}
 8005c7a:	bf00      	nop
 8005c7c:	3708      	adds	r7, #8
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20001b44 	.word	0x20001b44

08005c88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c8e:	2300      	movs	r3, #0
 8005c90:	607b      	str	r3, [r7, #4]
 8005c92:	4b10      	ldr	r3, [pc, #64]	; (8005cd4 <HAL_MspInit+0x4c>)
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	4a0f      	ldr	r2, [pc, #60]	; (8005cd4 <HAL_MspInit+0x4c>)
 8005c98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c9c:	6453      	str	r3, [r2, #68]	; 0x44
 8005c9e:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <HAL_MspInit+0x4c>)
 8005ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ca6:	607b      	str	r3, [r7, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005caa:	2300      	movs	r3, #0
 8005cac:	603b      	str	r3, [r7, #0]
 8005cae:	4b09      	ldr	r3, [pc, #36]	; (8005cd4 <HAL_MspInit+0x4c>)
 8005cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb2:	4a08      	ldr	r2, [pc, #32]	; (8005cd4 <HAL_MspInit+0x4c>)
 8005cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005cba:	4b06      	ldr	r3, [pc, #24]	; (8005cd4 <HAL_MspInit+0x4c>)
 8005cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc2:	603b      	str	r3, [r7, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
 8005cd2:	bf00      	nop
 8005cd4:	40023800 	.word	0x40023800

08005cd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08e      	sub	sp, #56	; 0x38
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a79      	ldr	r2, [pc, #484]	; (8005edc <HAL_ADC_MspInit+0x204>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	f040 808d 	bne.w	8005e16 <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	623b      	str	r3, [r7, #32]
 8005d00:	4b77      	ldr	r3, [pc, #476]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d04:	4a76      	ldr	r2, [pc, #472]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d0a:	6453      	str	r3, [r2, #68]	; 0x44
 8005d0c:	4b74      	ldr	r3, [pc, #464]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d14:	623b      	str	r3, [r7, #32]
 8005d16:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61fb      	str	r3, [r7, #28]
 8005d1c:	4b70      	ldr	r3, [pc, #448]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	4a6f      	ldr	r2, [pc, #444]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d22:	f043 0301 	orr.w	r3, r3, #1
 8005d26:	6313      	str	r3, [r2, #48]	; 0x30
 8005d28:	4b6d      	ldr	r3, [pc, #436]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	61fb      	str	r3, [r7, #28]
 8005d32:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d34:	2300      	movs	r3, #0
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	4b69      	ldr	r3, [pc, #420]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3c:	4a68      	ldr	r2, [pc, #416]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d3e:	f043 0304 	orr.w	r3, r3, #4
 8005d42:	6313      	str	r3, [r2, #48]	; 0x30
 8005d44:	4b66      	ldr	r3, [pc, #408]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d50:	2300      	movs	r3, #0
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	4b62      	ldr	r3, [pc, #392]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	4a61      	ldr	r2, [pc, #388]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d5a:	f043 0302 	orr.w	r3, r3, #2
 8005d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d60:	4b5f      	ldr	r3, [pc, #380]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d6c:	23c0      	movs	r3, #192	; 0xc0
 8005d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d70:	2303      	movs	r3, #3
 8005d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d7c:	4619      	mov	r1, r3
 8005d7e:	4859      	ldr	r0, [pc, #356]	; (8005ee4 <HAL_ADC_MspInit+0x20c>)
 8005d80:	f002 fb92 	bl	80084a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005d84:	2330      	movs	r3, #48	; 0x30
 8005d86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d94:	4619      	mov	r1, r3
 8005d96:	4854      	ldr	r0, [pc, #336]	; (8005ee8 <HAL_ADC_MspInit+0x210>)
 8005d98:	f002 fb86 	bl	80084a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005da0:	2303      	movs	r3, #3
 8005da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dac:	4619      	mov	r1, r3
 8005dae:	484f      	ldr	r0, [pc, #316]	; (8005eec <HAL_ADC_MspInit+0x214>)
 8005db0:	f002 fb7a 	bl	80084a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8005db4:	4b4e      	ldr	r3, [pc, #312]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005db6:	4a4f      	ldr	r2, [pc, #316]	; (8005ef4 <HAL_ADC_MspInit+0x21c>)
 8005db8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005dba:	4b4d      	ldr	r3, [pc, #308]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005dc0:	4b4b      	ldr	r3, [pc, #300]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005dc6:	4b4a      	ldr	r3, [pc, #296]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005dc8:	2200      	movs	r2, #0
 8005dca:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005dcc:	4b48      	ldr	r3, [pc, #288]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005dce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005dd2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005dd4:	4b46      	ldr	r3, [pc, #280]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005dd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005dda:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005ddc:	4b44      	ldr	r3, [pc, #272]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005de2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005de4:	4b42      	ldr	r3, [pc, #264]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005dea:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005dec:	4b40      	ldr	r3, [pc, #256]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005df2:	4b3f      	ldr	r3, [pc, #252]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005df8:	483d      	ldr	r0, [pc, #244]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005dfa:	f001 ffb7 	bl	8007d6c <HAL_DMA_Init>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8005e04:	f7fb fefe 	bl	8001c04 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a39      	ldr	r2, [pc, #228]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005e0c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e0e:	4a38      	ldr	r2, [pc, #224]	; (8005ef0 <HAL_ADC_MspInit+0x218>)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005e14:	e05d      	b.n	8005ed2 <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a37      	ldr	r2, [pc, #220]	; (8005ef8 <HAL_ADC_MspInit+0x220>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d158      	bne.n	8005ed2 <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005e20:	2300      	movs	r3, #0
 8005e22:	613b      	str	r3, [r7, #16]
 8005e24:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e28:	4a2d      	ldr	r2, [pc, #180]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8005e30:	4b2b      	ldr	r3, [pc, #172]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e38:	613b      	str	r3, [r7, #16]
 8005e3a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	4a26      	ldr	r2, [pc, #152]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005e46:	f043 0301 	orr.w	r3, r3, #1
 8005e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8005e4c:	4b24      	ldr	r3, [pc, #144]	; (8005ee0 <HAL_ADC_MspInit+0x208>)
 8005e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	60fb      	str	r3, [r7, #12]
 8005e56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8005e58:	233f      	movs	r3, #63	; 0x3f
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e60:	2300      	movs	r3, #0
 8005e62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e68:	4619      	mov	r1, r3
 8005e6a:	481e      	ldr	r0, [pc, #120]	; (8005ee4 <HAL_ADC_MspInit+0x20c>)
 8005e6c:	f002 fb1c 	bl	80084a8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8005e70:	4b22      	ldr	r3, [pc, #136]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005e72:	4a23      	ldr	r2, [pc, #140]	; (8005f00 <HAL_ADC_MspInit+0x228>)
 8005e74:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8005e76:	4b21      	ldr	r3, [pc, #132]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005e78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005e7c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e7e:	4b1f      	ldr	r3, [pc, #124]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e84:	4b1d      	ldr	r3, [pc, #116]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8005e8a:	4b1c      	ldr	r3, [pc, #112]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005e8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005e90:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e92:	4b1a      	ldr	r3, [pc, #104]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005e94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e98:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8005e9a:	4b18      	ldr	r3, [pc, #96]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ea0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8005ea2:	4b16      	ldr	r3, [pc, #88]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005ea4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ea8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8005eaa:	4b14      	ldr	r3, [pc, #80]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005eb0:	4b12      	ldr	r3, [pc, #72]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8005eb6:	4811      	ldr	r0, [pc, #68]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005eb8:	f001 ff58 	bl	8007d6c <HAL_DMA_Init>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 8005ec2:	f7fb fe9f 	bl	8001c04 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a0c      	ldr	r2, [pc, #48]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005eca:	639a      	str	r2, [r3, #56]	; 0x38
 8005ecc:	4a0b      	ldr	r2, [pc, #44]	; (8005efc <HAL_ADC_MspInit+0x224>)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005ed2:	bf00      	nop
 8005ed4:	3738      	adds	r7, #56	; 0x38
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	40012000 	.word	0x40012000
 8005ee0:	40023800 	.word	0x40023800
 8005ee4:	40020000 	.word	0x40020000
 8005ee8:	40020800 	.word	0x40020800
 8005eec:	40020400 	.word	0x40020400
 8005ef0:	20001ae4 	.word	0x20001ae4
 8005ef4:	40026410 	.word	0x40026410
 8005ef8:	40012100 	.word	0x40012100
 8005efc:	20002ccc 	.word	0x20002ccc
 8005f00:	40026440 	.word	0x40026440

08005f04 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	; 0x28
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f0c:	f107 0314 	add.w	r3, r7, #20
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
 8005f14:	605a      	str	r2, [r3, #4]
 8005f16:	609a      	str	r2, [r3, #8]
 8005f18:	60da      	str	r2, [r3, #12]
 8005f1a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4a1d      	ldr	r2, [pc, #116]	; (8005f98 <HAL_CAN_MspInit+0x94>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d134      	bne.n	8005f90 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8005f26:	2300      	movs	r3, #0
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	4b1c      	ldr	r3, [pc, #112]	; (8005f9c <HAL_CAN_MspInit+0x98>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	4a1b      	ldr	r2, [pc, #108]	; (8005f9c <HAL_CAN_MspInit+0x98>)
 8005f30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f34:	6413      	str	r3, [r2, #64]	; 0x40
 8005f36:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <HAL_CAN_MspInit+0x98>)
 8005f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f3e:	613b      	str	r3, [r7, #16]
 8005f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	4b15      	ldr	r3, [pc, #84]	; (8005f9c <HAL_CAN_MspInit+0x98>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	4a14      	ldr	r2, [pc, #80]	; (8005f9c <HAL_CAN_MspInit+0x98>)
 8005f4c:	f043 0302 	orr.w	r3, r3, #2
 8005f50:	6313      	str	r3, [r2, #48]	; 0x30
 8005f52:	4b12      	ldr	r3, [pc, #72]	; (8005f9c <HAL_CAN_MspInit+0x98>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	f003 0302 	and.w	r3, r3, #2
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f64:	2302      	movs	r3, #2
 8005f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8005f70:	2309      	movs	r3, #9
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f74:	f107 0314 	add.w	r3, r7, #20
 8005f78:	4619      	mov	r1, r3
 8005f7a:	4809      	ldr	r0, [pc, #36]	; (8005fa0 <HAL_CAN_MspInit+0x9c>)
 8005f7c:	f002 fa94 	bl	80084a8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 2, 0);
 8005f80:	2200      	movs	r2, #0
 8005f82:	2102      	movs	r1, #2
 8005f84:	2014      	movs	r0, #20
 8005f86:	f001 feba 	bl	8007cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8005f8a:	2014      	movs	r0, #20
 8005f8c:	f001 fed3 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8005f90:	bf00      	nop
 8005f92:	3728      	adds	r7, #40	; 0x28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	40006400 	.word	0x40006400
 8005f9c:	40023800 	.word	0x40023800
 8005fa0:	40020400 	.word	0x40020400

08005fa4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	; 0x28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fac:	f107 0314 	add.w	r3, r7, #20
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	605a      	str	r2, [r3, #4]
 8005fb6:	609a      	str	r2, [r3, #8]
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a19      	ldr	r2, [pc, #100]	; (8006028 <HAL_I2C_MspInit+0x84>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d12b      	bne.n	800601e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	613b      	str	r3, [r7, #16]
 8005fca:	4b18      	ldr	r3, [pc, #96]	; (800602c <HAL_I2C_MspInit+0x88>)
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	4a17      	ldr	r2, [pc, #92]	; (800602c <HAL_I2C_MspInit+0x88>)
 8005fd0:	f043 0302 	orr.w	r3, r3, #2
 8005fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fd6:	4b15      	ldr	r3, [pc, #84]	; (800602c <HAL_I2C_MspInit+0x88>)
 8005fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	613b      	str	r3, [r7, #16]
 8005fe0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005fe2:	23c0      	movs	r3, #192	; 0xc0
 8005fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005fe6:	2312      	movs	r3, #18
 8005fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005ff2:	2304      	movs	r3, #4
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005ff6:	f107 0314 	add.w	r3, r7, #20
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	480c      	ldr	r0, [pc, #48]	; (8006030 <HAL_I2C_MspInit+0x8c>)
 8005ffe:	f002 fa53 	bl	80084a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	4b09      	ldr	r3, [pc, #36]	; (800602c <HAL_I2C_MspInit+0x88>)
 8006008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600a:	4a08      	ldr	r2, [pc, #32]	; (800602c <HAL_I2C_MspInit+0x88>)
 800600c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006010:	6413      	str	r3, [r2, #64]	; 0x40
 8006012:	4b06      	ldr	r3, [pc, #24]	; (800602c <HAL_I2C_MspInit+0x88>)
 8006014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006016:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800601e:	bf00      	nop
 8006020:	3728      	adds	r7, #40	; 0x28
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40005400 	.word	0x40005400
 800602c:	40023800 	.word	0x40023800
 8006030:	40020400 	.word	0x40020400

08006034 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b09a      	sub	sp, #104	; 0x68
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800603c:	f107 030c 	add.w	r3, r7, #12
 8006040:	225c      	movs	r2, #92	; 0x5c
 8006042:	2100      	movs	r1, #0
 8006044:	4618      	mov	r0, r3
 8006046:	f010 fe1d 	bl	8016c84 <memset>
  if(hrtc->Instance==RTC)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a0c      	ldr	r2, [pc, #48]	; (8006080 <HAL_RTC_MspInit+0x4c>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d111      	bne.n	8006078 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8006054:	2320      	movs	r3, #32
 8006056:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800605c:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800605e:	f107 030c 	add.w	r3, r7, #12
 8006062:	4618      	mov	r0, r3
 8006064:	f004 ff52 	bl	800af0c <HAL_RCCEx_PeriphCLKConfig>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800606e:	f7fb fdc9 	bl	8001c04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8006072:	4b04      	ldr	r3, [pc, #16]	; (8006084 <HAL_RTC_MspInit+0x50>)
 8006074:	2201      	movs	r2, #1
 8006076:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006078:	bf00      	nop
 800607a:	3768      	adds	r7, #104	; 0x68
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	40002800 	.word	0x40002800
 8006084:	42470e3c 	.word	0x42470e3c

08006088 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	; 0x28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006090:	f107 0314 	add.w	r3, r7, #20
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a68      	ldr	r2, [pc, #416]	; (8006248 <HAL_SD_MspInit+0x1c0>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	f040 80c9 	bne.w	800623e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80060ac:	2300      	movs	r3, #0
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	4b66      	ldr	r3, [pc, #408]	; (800624c <HAL_SD_MspInit+0x1c4>)
 80060b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b4:	4a65      	ldr	r2, [pc, #404]	; (800624c <HAL_SD_MspInit+0x1c4>)
 80060b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060ba:	6453      	str	r3, [r2, #68]	; 0x44
 80060bc:	4b63      	ldr	r3, [pc, #396]	; (800624c <HAL_SD_MspInit+0x1c4>)
 80060be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c4:	613b      	str	r3, [r7, #16]
 80060c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80060c8:	2300      	movs	r3, #0
 80060ca:	60fb      	str	r3, [r7, #12]
 80060cc:	4b5f      	ldr	r3, [pc, #380]	; (800624c <HAL_SD_MspInit+0x1c4>)
 80060ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d0:	4a5e      	ldr	r2, [pc, #376]	; (800624c <HAL_SD_MspInit+0x1c4>)
 80060d2:	f043 0304 	orr.w	r3, r3, #4
 80060d6:	6313      	str	r3, [r2, #48]	; 0x30
 80060d8:	4b5c      	ldr	r3, [pc, #368]	; (800624c <HAL_SD_MspInit+0x1c4>)
 80060da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	60fb      	str	r3, [r7, #12]
 80060e2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80060e4:	2300      	movs	r3, #0
 80060e6:	60bb      	str	r3, [r7, #8]
 80060e8:	4b58      	ldr	r3, [pc, #352]	; (800624c <HAL_SD_MspInit+0x1c4>)
 80060ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ec:	4a57      	ldr	r2, [pc, #348]	; (800624c <HAL_SD_MspInit+0x1c4>)
 80060ee:	f043 0308 	orr.w	r3, r3, #8
 80060f2:	6313      	str	r3, [r2, #48]	; 0x30
 80060f4:	4b55      	ldr	r3, [pc, #340]	; (800624c <HAL_SD_MspInit+0x1c4>)
 80060f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	60bb      	str	r3, [r7, #8]
 80060fe:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006100:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006104:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006106:	2302      	movs	r3, #2
 8006108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800610a:	2300      	movs	r3, #0
 800610c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800610e:	2303      	movs	r3, #3
 8006110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006112:	230c      	movs	r3, #12
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006116:	f107 0314 	add.w	r3, r7, #20
 800611a:	4619      	mov	r1, r3
 800611c:	484c      	ldr	r0, [pc, #304]	; (8006250 <HAL_SD_MspInit+0x1c8>)
 800611e:	f002 f9c3 	bl	80084a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006122:	2304      	movs	r3, #4
 8006124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006126:	2302      	movs	r3, #2
 8006128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612a:	2300      	movs	r3, #0
 800612c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800612e:	2303      	movs	r3, #3
 8006130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006132:	230c      	movs	r3, #12
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006136:	f107 0314 	add.w	r3, r7, #20
 800613a:	4619      	mov	r1, r3
 800613c:	4845      	ldr	r0, [pc, #276]	; (8006254 <HAL_SD_MspInit+0x1cc>)
 800613e:	f002 f9b3 	bl	80084a8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006142:	4b45      	ldr	r3, [pc, #276]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 8006144:	4a45      	ldr	r2, [pc, #276]	; (800625c <HAL_SD_MspInit+0x1d4>)
 8006146:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006148:	4b43      	ldr	r3, [pc, #268]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 800614a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800614e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006150:	4b41      	ldr	r3, [pc, #260]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 8006152:	2200      	movs	r2, #0
 8006154:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006156:	4b40      	ldr	r3, [pc, #256]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 8006158:	2200      	movs	r2, #0
 800615a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800615c:	4b3e      	ldr	r3, [pc, #248]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 800615e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006162:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006164:	4b3c      	ldr	r3, [pc, #240]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 8006166:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800616a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800616c:	4b3a      	ldr	r3, [pc, #232]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 800616e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006172:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006174:	4b38      	ldr	r3, [pc, #224]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 8006176:	2220      	movs	r2, #32
 8006178:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800617a:	4b37      	ldr	r3, [pc, #220]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 800617c:	2200      	movs	r2, #0
 800617e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006180:	4b35      	ldr	r3, [pc, #212]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 8006182:	2204      	movs	r2, #4
 8006184:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006186:	4b34      	ldr	r3, [pc, #208]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 8006188:	2203      	movs	r2, #3
 800618a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800618c:	4b32      	ldr	r3, [pc, #200]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 800618e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006192:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006194:	4b30      	ldr	r3, [pc, #192]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 8006196:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800619a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800619c:	482e      	ldr	r0, [pc, #184]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 800619e:	f001 fde5 	bl	8007d6c <HAL_DMA_Init>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d001      	beq.n	80061ac <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 80061a8:	f7fb fd2c 	bl	8001c04 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a2a      	ldr	r2, [pc, #168]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 80061b0:	641a      	str	r2, [r3, #64]	; 0x40
 80061b2:	4a29      	ldr	r2, [pc, #164]	; (8006258 <HAL_SD_MspInit+0x1d0>)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80061b8:	4b29      	ldr	r3, [pc, #164]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061ba:	4a2a      	ldr	r2, [pc, #168]	; (8006264 <HAL_SD_MspInit+0x1dc>)
 80061bc:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80061be:	4b28      	ldr	r3, [pc, #160]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80061c4:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80061c6:	4b26      	ldr	r3, [pc, #152]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061c8:	2240      	movs	r2, #64	; 0x40
 80061ca:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80061cc:	4b24      	ldr	r3, [pc, #144]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80061d2:	4b23      	ldr	r3, [pc, #140]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061d8:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80061da:	4b21      	ldr	r3, [pc, #132]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061e0:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80061e2:	4b1f      	ldr	r3, [pc, #124]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061e8:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80061ea:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061ec:	2220      	movs	r2, #32
 80061ee:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80061f0:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061f2:	2200      	movs	r2, #0
 80061f4:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80061f6:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061f8:	2204      	movs	r2, #4
 80061fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80061fc:	4b18      	ldr	r3, [pc, #96]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 80061fe:	2203      	movs	r2, #3
 8006200:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006202:	4b17      	ldr	r3, [pc, #92]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 8006204:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006208:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800620a:	4b15      	ldr	r3, [pc, #84]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 800620c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006212:	4813      	ldr	r0, [pc, #76]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 8006214:	f001 fdaa 	bl	8007d6c <HAL_DMA_Init>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d001      	beq.n	8006222 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 800621e:	f7fb fcf1 	bl	8001c04 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a0e      	ldr	r2, [pc, #56]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 8006226:	63da      	str	r2, [r3, #60]	; 0x3c
 8006228:	4a0d      	ldr	r2, [pc, #52]	; (8006260 <HAL_SD_MspInit+0x1d8>)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800622e:	2200      	movs	r2, #0
 8006230:	2100      	movs	r1, #0
 8006232:	2031      	movs	r0, #49	; 0x31
 8006234:	f001 fd63 	bl	8007cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006238:	2031      	movs	r0, #49	; 0x31
 800623a:	f001 fd7c 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800623e:	bf00      	nop
 8006240:	3728      	adds	r7, #40	; 0x28
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40023800 	.word	0x40023800
 8006250:	40020800 	.word	0x40020800
 8006254:	40020c00 	.word	0x40020c00
 8006258:	20000698 	.word	0x20000698
 800625c:	40026458 	.word	0x40026458
 8006260:	20001b68 	.word	0x20001b68
 8006264:	400264a0 	.word	0x400264a0

08006268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a0e      	ldr	r2, [pc, #56]	; (80062b0 <HAL_TIM_Base_MspInit+0x48>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d115      	bne.n	80062a6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800627a:	2300      	movs	r3, #0
 800627c:	60fb      	str	r3, [r7, #12]
 800627e:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <HAL_TIM_Base_MspInit+0x4c>)
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	4a0c      	ldr	r2, [pc, #48]	; (80062b4 <HAL_TIM_Base_MspInit+0x4c>)
 8006284:	f043 0320 	orr.w	r3, r3, #32
 8006288:	6413      	str	r3, [r2, #64]	; 0x40
 800628a:	4b0a      	ldr	r3, [pc, #40]	; (80062b4 <HAL_TIM_Base_MspInit+0x4c>)
 800628c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	60fb      	str	r3, [r7, #12]
 8006294:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006296:	2200      	movs	r2, #0
 8006298:	2100      	movs	r1, #0
 800629a:	2037      	movs	r0, #55	; 0x37
 800629c:	f001 fd2f 	bl	8007cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80062a0:	2037      	movs	r0, #55	; 0x37
 80062a2:	f001 fd48 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	40001400 	.word	0x40001400
 80062b4:	40023800 	.word	0x40023800

080062b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80062b8:	b480      	push	{r7}
 80062ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80062bc:	e7fe      	b.n	80062bc <NMI_Handler+0x4>

080062be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80062be:	b480      	push	{r7}
 80062c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80062c2:	e7fe      	b.n	80062c2 <HardFault_Handler+0x4>

080062c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80062c4:	b480      	push	{r7}
 80062c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80062c8:	e7fe      	b.n	80062c8 <MemManage_Handler+0x4>

080062ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80062ca:	b480      	push	{r7}
 80062cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80062ce:	e7fe      	b.n	80062ce <BusFault_Handler+0x4>

080062d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80062d0:	b480      	push	{r7}
 80062d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80062d4:	e7fe      	b.n	80062d4 <UsageFault_Handler+0x4>

080062d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80062d6:	b480      	push	{r7}
 80062d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80062da:	bf00      	nop
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062e8:	bf00      	nop
 80062ea:	46bd      	mov	sp, r7
 80062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f0:	4770      	bx	lr

080062f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062f2:	b480      	push	{r7}
 80062f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062f6:	bf00      	nop
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006304:	f000 f922 	bl	800654c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006308:	bf00      	nop
 800630a:	bd80      	pop	{r7, pc}

0800630c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006310:	4802      	ldr	r0, [pc, #8]	; (800631c <CAN1_RX0_IRQHandler+0x10>)
 8006312:	f001 f9e9 	bl	80076e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006316:	bf00      	nop
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	20002d2c 	.word	0x20002d2c

08006320 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8006324:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006328:	f002 fa9e 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 800632c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006330:	f002 fa9a 	bl	8008868 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006334:	bf00      	nop
 8006336:	bd80      	pop	{r7, pc}

08006338 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800633c:	4802      	ldr	r0, [pc, #8]	; (8006348 <SDIO_IRQHandler+0x10>)
 800633e:	f006 f997 	bl	800c670 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006342:	bf00      	nop
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20001bd4 	.word	0x20001bd4

0800634c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006350:	4802      	ldr	r0, [pc, #8]	; (800635c <TIM7_IRQHandler+0x10>)
 8006352:	f007 faf5 	bl	800d940 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006356:	bf00      	nop
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	20002dcc 	.word	0x20002dcc

08006360 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006364:	4802      	ldr	r0, [pc, #8]	; (8006370 <DMA2_Stream0_IRQHandler+0x10>)
 8006366:	f001 fe29 	bl	8007fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800636a:	bf00      	nop
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20001ae4 	.word	0x20001ae4

08006374 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006378:	4802      	ldr	r0, [pc, #8]	; (8006384 <DMA2_Stream2_IRQHandler+0x10>)
 800637a:	f001 fe1f 	bl	8007fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800637e:	bf00      	nop
 8006380:	bd80      	pop	{r7, pc}
 8006382:	bf00      	nop
 8006384:	20002ccc 	.word	0x20002ccc

08006388 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800638c:	4802      	ldr	r0, [pc, #8]	; (8006398 <DMA2_Stream3_IRQHandler+0x10>)
 800638e:	f001 fe15 	bl	8007fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006392:	bf00      	nop
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000698 	.word	0x20000698

0800639c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80063a0:	4802      	ldr	r0, [pc, #8]	; (80063ac <OTG_FS_IRQHandler+0x10>)
 80063a2:	f003 fbb7 	bl	8009b14 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80063a6:	bf00      	nop
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	200053d0 	.word	0x200053d0

080063b0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80063b4:	4802      	ldr	r0, [pc, #8]	; (80063c0 <DMA2_Stream6_IRQHandler+0x10>)
 80063b6:	f001 fe01 	bl	8007fbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80063ba:	bf00      	nop
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20001b68 	.word	0x20001b68

080063c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80063cc:	4a14      	ldr	r2, [pc, #80]	; (8006420 <_sbrk+0x5c>)
 80063ce:	4b15      	ldr	r3, [pc, #84]	; (8006424 <_sbrk+0x60>)
 80063d0:	1ad3      	subs	r3, r2, r3
 80063d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80063d8:	4b13      	ldr	r3, [pc, #76]	; (8006428 <_sbrk+0x64>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d102      	bne.n	80063e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80063e0:	4b11      	ldr	r3, [pc, #68]	; (8006428 <_sbrk+0x64>)
 80063e2:	4a12      	ldr	r2, [pc, #72]	; (800642c <_sbrk+0x68>)
 80063e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80063e6:	4b10      	ldr	r3, [pc, #64]	; (8006428 <_sbrk+0x64>)
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4413      	add	r3, r2
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d207      	bcs.n	8006404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80063f4:	f010 fc0e 	bl	8016c14 <__errno>
 80063f8:	4603      	mov	r3, r0
 80063fa:	220c      	movs	r2, #12
 80063fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80063fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006402:	e009      	b.n	8006418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006404:	4b08      	ldr	r3, [pc, #32]	; (8006428 <_sbrk+0x64>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800640a:	4b07      	ldr	r3, [pc, #28]	; (8006428 <_sbrk+0x64>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4413      	add	r3, r2
 8006412:	4a05      	ldr	r2, [pc, #20]	; (8006428 <_sbrk+0x64>)
 8006414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006416:	68fb      	ldr	r3, [r7, #12]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20020000 	.word	0x20020000
 8006424:	00006000 	.word	0x00006000
 8006428:	200001f4 	.word	0x200001f4
 800642c:	200057e8 	.word	0x200057e8

08006430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <SystemInit+0x20>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643a:	4a05      	ldr	r2, [pc, #20]	; (8006450 <SystemInit+0x20>)
 800643c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006444:	bf00      	nop
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr
 800644e:	bf00      	nop
 8006450:	e000ed00 	.word	0xe000ed00

08006454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800648c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006458:	480d      	ldr	r0, [pc, #52]	; (8006490 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800645a:	490e      	ldr	r1, [pc, #56]	; (8006494 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800645c:	4a0e      	ldr	r2, [pc, #56]	; (8006498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800645e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006460:	e002      	b.n	8006468 <LoopCopyDataInit>

08006462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006466:	3304      	adds	r3, #4

08006468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800646a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800646c:	d3f9      	bcc.n	8006462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800646e:	4a0b      	ldr	r2, [pc, #44]	; (800649c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006470:	4c0b      	ldr	r4, [pc, #44]	; (80064a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006474:	e001      	b.n	800647a <LoopFillZerobss>

08006476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006478:	3204      	adds	r2, #4

0800647a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800647a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800647c:	d3fb      	bcc.n	8006476 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800647e:	f7ff ffd7 	bl	8006430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006482:	f010 fbcd 	bl	8016c20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006486:	f7fa feeb 	bl	8001260 <main>
  bx  lr    
 800648a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800648c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006494:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8006498:	08017a88 	.word	0x08017a88
  ldr r2, =_sbss
 800649c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80064a0:	200057e8 	.word	0x200057e8

080064a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80064a4:	e7fe      	b.n	80064a4 <ADC_IRQHandler>
	...

080064a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80064ac:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <HAL_Init+0x40>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a0d      	ldr	r2, [pc, #52]	; (80064e8 <HAL_Init+0x40>)
 80064b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80064b8:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <HAL_Init+0x40>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a0a      	ldr	r2, [pc, #40]	; (80064e8 <HAL_Init+0x40>)
 80064be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80064c4:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <HAL_Init+0x40>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a07      	ldr	r2, [pc, #28]	; (80064e8 <HAL_Init+0x40>)
 80064ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064d0:	2003      	movs	r0, #3
 80064d2:	f001 fc09 	bl	8007ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80064d6:	200f      	movs	r0, #15
 80064d8:	f000 f808 	bl	80064ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80064dc:	f7ff fbd4 	bl	8005c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	40023c00 	.word	0x40023c00

080064ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b082      	sub	sp, #8
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80064f4:	4b12      	ldr	r3, [pc, #72]	; (8006540 <HAL_InitTick+0x54>)
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	4b12      	ldr	r3, [pc, #72]	; (8006544 <HAL_InitTick+0x58>)
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	4619      	mov	r1, r3
 80064fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006502:	fbb3 f3f1 	udiv	r3, r3, r1
 8006506:	fbb2 f3f3 	udiv	r3, r2, r3
 800650a:	4618      	mov	r0, r3
 800650c:	f001 fc21 	bl	8007d52 <HAL_SYSTICK_Config>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e00e      	b.n	8006538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b0f      	cmp	r3, #15
 800651e:	d80a      	bhi.n	8006536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006520:	2200      	movs	r2, #0
 8006522:	6879      	ldr	r1, [r7, #4]
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	f001 fbe9 	bl	8007cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800652c:	4a06      	ldr	r2, [pc, #24]	; (8006548 <HAL_InitTick+0x5c>)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	e000      	b.n	8006538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
}
 8006538:	4618      	mov	r0, r3
 800653a:	3708      	adds	r7, #8
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}
 8006540:	20000000 	.word	0x20000000
 8006544:	20000008 	.word	0x20000008
 8006548:	20000004 	.word	0x20000004

0800654c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006550:	4b06      	ldr	r3, [pc, #24]	; (800656c <HAL_IncTick+0x20>)
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	461a      	mov	r2, r3
 8006556:	4b06      	ldr	r3, [pc, #24]	; (8006570 <HAL_IncTick+0x24>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4413      	add	r3, r2
 800655c:	4a04      	ldr	r2, [pc, #16]	; (8006570 <HAL_IncTick+0x24>)
 800655e:	6013      	str	r3, [r2, #0]
}
 8006560:	bf00      	nop
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	20000008 	.word	0x20000008
 8006570:	20002e90 	.word	0x20002e90

08006574 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  return uwTick;
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <HAL_GetTick+0x14>)
 800657a:	681b      	ldr	r3, [r3, #0]
}
 800657c:	4618      	mov	r0, r3
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	20002e90 	.word	0x20002e90

0800658c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006594:	f7ff ffee 	bl	8006574 <HAL_GetTick>
 8006598:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a4:	d005      	beq.n	80065b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065a6:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <HAL_Delay+0x44>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	4413      	add	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065b2:	bf00      	nop
 80065b4:	f7ff ffde 	bl	8006574 <HAL_GetTick>
 80065b8:	4602      	mov	r2, r0
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d8f7      	bhi.n	80065b4 <HAL_Delay+0x28>
  {
  }
}
 80065c4:	bf00      	nop
 80065c6:	bf00      	nop
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000008 	.word	0x20000008

080065d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d101      	bne.n	80065ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80065e6:	2301      	movs	r3, #1
 80065e8:	e033      	b.n	8006652 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7ff fb70 	bl	8005cd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	2b00      	cmp	r3, #0
 8006610:	d118      	bne.n	8006644 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006616:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800661a:	f023 0302 	bic.w	r3, r3, #2
 800661e:	f043 0202 	orr.w	r2, r3, #2
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa78 	bl	8006b1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006636:	f023 0303 	bic.w	r3, r3, #3
 800663a:	f043 0201 	orr.w	r2, r3, #1
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
 8006642:	e001      	b.n	8006648 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006644:	2301      	movs	r3, #1
 8006646:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006650:	7bfb      	ldrb	r3, [r7, #15]
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
	...

0800665c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006672:	2b01      	cmp	r3, #1
 8006674:	d101      	bne.n	800667a <HAL_ADC_Start_DMA+0x1e>
 8006676:	2302      	movs	r3, #2
 8006678:	e0e9      	b.n	800684e <HAL_ADC_Start_DMA+0x1f2>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2201      	movs	r2, #1
 800667e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	f003 0301 	and.w	r3, r3, #1
 800668c:	2b01      	cmp	r3, #1
 800668e:	d018      	beq.n	80066c2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689a      	ldr	r2, [r3, #8]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f042 0201 	orr.w	r2, r2, #1
 800669e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80066a0:	4b6d      	ldr	r3, [pc, #436]	; (8006858 <HAL_ADC_Start_DMA+0x1fc>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a6d      	ldr	r2, [pc, #436]	; (800685c <HAL_ADC_Start_DMA+0x200>)
 80066a6:	fba2 2303 	umull	r2, r3, r2, r3
 80066aa:	0c9a      	lsrs	r2, r3, #18
 80066ac:	4613      	mov	r3, r2
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	4413      	add	r3, r2
 80066b2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80066b4:	e002      	b.n	80066bc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d1f9      	bne.n	80066b6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d0:	d107      	bne.n	80066e2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689a      	ldr	r2, [r3, #8]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 0301 	and.w	r3, r3, #1
 80066ec:	2b01      	cmp	r3, #1
 80066ee:	f040 80a1 	bne.w	8006834 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80066fa:	f023 0301 	bic.w	r3, r3, #1
 80066fe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006710:	2b00      	cmp	r3, #0
 8006712:	d007      	beq.n	8006724 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800671c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006728:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800672c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006730:	d106      	bne.n	8006740 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006736:	f023 0206 	bic.w	r2, r3, #6
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	645a      	str	r2, [r3, #68]	; 0x44
 800673e:	e002      	b.n	8006746 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800674e:	4b44      	ldr	r3, [pc, #272]	; (8006860 <HAL_ADC_Start_DMA+0x204>)
 8006750:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	4a43      	ldr	r2, [pc, #268]	; (8006864 <HAL_ADC_Start_DMA+0x208>)
 8006758:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675e:	4a42      	ldr	r2, [pc, #264]	; (8006868 <HAL_ADC_Start_DMA+0x20c>)
 8006760:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	4a41      	ldr	r2, [pc, #260]	; (800686c <HAL_ADC_Start_DMA+0x210>)
 8006768:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006772:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006782:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006792:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	334c      	adds	r3, #76	; 0x4c
 800679e:	4619      	mov	r1, r3
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f001 fb90 	bl	8007ec8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d12a      	bne.n	800680a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a2d      	ldr	r2, [pc, #180]	; (8006870 <HAL_ADC_Start_DMA+0x214>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d015      	beq.n	80067ea <HAL_ADC_Start_DMA+0x18e>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a2c      	ldr	r2, [pc, #176]	; (8006874 <HAL_ADC_Start_DMA+0x218>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d105      	bne.n	80067d4 <HAL_ADC_Start_DMA+0x178>
 80067c8:	4b25      	ldr	r3, [pc, #148]	; (8006860 <HAL_ADC_Start_DMA+0x204>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	f003 031f 	and.w	r3, r3, #31
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a27      	ldr	r2, [pc, #156]	; (8006878 <HAL_ADC_Start_DMA+0x21c>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d136      	bne.n	800684c <HAL_ADC_Start_DMA+0x1f0>
 80067de:	4b20      	ldr	r3, [pc, #128]	; (8006860 <HAL_ADC_Start_DMA+0x204>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f003 0310 	and.w	r3, r3, #16
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d130      	bne.n	800684c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d129      	bne.n	800684c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006806:	609a      	str	r2, [r3, #8]
 8006808:	e020      	b.n	800684c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a18      	ldr	r2, [pc, #96]	; (8006870 <HAL_ADC_Start_DMA+0x214>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d11b      	bne.n	800684c <HAL_ADC_Start_DMA+0x1f0>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800681e:	2b00      	cmp	r3, #0
 8006820:	d114      	bne.n	800684c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	689a      	ldr	r2, [r3, #8]
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006830:	609a      	str	r2, [r3, #8]
 8006832:	e00b      	b.n	800684c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006838:	f043 0210 	orr.w	r2, r3, #16
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006844:	f043 0201 	orr.w	r2, r3, #1
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800684c:	2300      	movs	r3, #0
}
 800684e:	4618      	mov	r0, r3
 8006850:	3718      	adds	r7, #24
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
 8006856:	bf00      	nop
 8006858:	20000000 	.word	0x20000000
 800685c:	431bde83 	.word	0x431bde83
 8006860:	40012300 	.word	0x40012300
 8006864:	08006d15 	.word	0x08006d15
 8006868:	08006dcf 	.word	0x08006dcf
 800686c:	08006deb 	.word	0x08006deb
 8006870:	40012000 	.word	0x40012000
 8006874:	40012100 	.word	0x40012100
 8006878:	40012200 	.word	0x40012200

0800687c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d101      	bne.n	80068d4 <HAL_ADC_ConfigChannel+0x1c>
 80068d0:	2302      	movs	r3, #2
 80068d2:	e113      	b.n	8006afc <HAL_ADC_ConfigChannel+0x244>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b09      	cmp	r3, #9
 80068e2:	d925      	bls.n	8006930 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68d9      	ldr	r1, [r3, #12]
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	b29b      	uxth	r3, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	4613      	mov	r3, r2
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	4413      	add	r3, r2
 80068f8:	3b1e      	subs	r3, #30
 80068fa:	2207      	movs	r2, #7
 80068fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006900:	43da      	mvns	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	400a      	ands	r2, r1
 8006908:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	68d9      	ldr	r1, [r3, #12]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	689a      	ldr	r2, [r3, #8]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	b29b      	uxth	r3, r3
 800691a:	4618      	mov	r0, r3
 800691c:	4603      	mov	r3, r0
 800691e:	005b      	lsls	r3, r3, #1
 8006920:	4403      	add	r3, r0
 8006922:	3b1e      	subs	r3, #30
 8006924:	409a      	lsls	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	60da      	str	r2, [r3, #12]
 800692e:	e022      	b.n	8006976 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6919      	ldr	r1, [r3, #16]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	b29b      	uxth	r3, r3
 800693c:	461a      	mov	r2, r3
 800693e:	4613      	mov	r3, r2
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	4413      	add	r3, r2
 8006944:	2207      	movs	r2, #7
 8006946:	fa02 f303 	lsl.w	r3, r2, r3
 800694a:	43da      	mvns	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	400a      	ands	r2, r1
 8006952:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6919      	ldr	r1, [r3, #16]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689a      	ldr	r2, [r3, #8]
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	4618      	mov	r0, r3
 8006966:	4603      	mov	r3, r0
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	4403      	add	r3, r0
 800696c:	409a      	lsls	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	430a      	orrs	r2, r1
 8006974:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b06      	cmp	r3, #6
 800697c:	d824      	bhi.n	80069c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	4613      	mov	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	4413      	add	r3, r2
 800698e:	3b05      	subs	r3, #5
 8006990:	221f      	movs	r2, #31
 8006992:	fa02 f303 	lsl.w	r3, r2, r3
 8006996:	43da      	mvns	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	400a      	ands	r2, r1
 800699e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	4618      	mov	r0, r3
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	685a      	ldr	r2, [r3, #4]
 80069b2:	4613      	mov	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4413      	add	r3, r2
 80069b8:	3b05      	subs	r3, #5
 80069ba:	fa00 f203 	lsl.w	r2, r0, r3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	430a      	orrs	r2, r1
 80069c4:	635a      	str	r2, [r3, #52]	; 0x34
 80069c6:	e04c      	b.n	8006a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	2b0c      	cmp	r3, #12
 80069ce:	d824      	bhi.n	8006a1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	4613      	mov	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4413      	add	r3, r2
 80069e0:	3b23      	subs	r3, #35	; 0x23
 80069e2:	221f      	movs	r2, #31
 80069e4:	fa02 f303 	lsl.w	r3, r2, r3
 80069e8:	43da      	mvns	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	400a      	ands	r2, r1
 80069f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	4618      	mov	r0, r3
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	685a      	ldr	r2, [r3, #4]
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	3b23      	subs	r3, #35	; 0x23
 8006a0c:	fa00 f203 	lsl.w	r2, r0, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	631a      	str	r2, [r3, #48]	; 0x30
 8006a18:	e023      	b.n	8006a62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	4613      	mov	r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	4413      	add	r3, r2
 8006a2a:	3b41      	subs	r3, #65	; 0x41
 8006a2c:	221f      	movs	r2, #31
 8006a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a32:	43da      	mvns	r2, r3
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	400a      	ands	r2, r1
 8006a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	4618      	mov	r0, r3
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	3b41      	subs	r3, #65	; 0x41
 8006a56:	fa00 f203 	lsl.w	r2, r0, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006a62:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <HAL_ADC_ConfigChannel+0x250>)
 8006a64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a28      	ldr	r2, [pc, #160]	; (8006b0c <HAL_ADC_ConfigChannel+0x254>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10f      	bne.n	8006a90 <HAL_ADC_ConfigChannel+0x1d8>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b12      	cmp	r3, #18
 8006a76:	d10b      	bne.n	8006a90 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a1d      	ldr	r2, [pc, #116]	; (8006b0c <HAL_ADC_ConfigChannel+0x254>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d12b      	bne.n	8006af2 <HAL_ADC_ConfigChannel+0x23a>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <HAL_ADC_ConfigChannel+0x258>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <HAL_ADC_ConfigChannel+0x1f4>
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b11      	cmp	r3, #17
 8006aaa:	d122      	bne.n	8006af2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a11      	ldr	r2, [pc, #68]	; (8006b10 <HAL_ADC_ConfigChannel+0x258>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d111      	bne.n	8006af2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006ace:	4b11      	ldr	r3, [pc, #68]	; (8006b14 <HAL_ADC_ConfigChannel+0x25c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a11      	ldr	r2, [pc, #68]	; (8006b18 <HAL_ADC_ConfigChannel+0x260>)
 8006ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad8:	0c9a      	lsrs	r2, r3, #18
 8006ada:	4613      	mov	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	005b      	lsls	r3, r3, #1
 8006ae2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006ae4:	e002      	b.n	8006aec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	3b01      	subs	r3, #1
 8006aea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d1f9      	bne.n	8006ae6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3714      	adds	r7, #20
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	40012300 	.word	0x40012300
 8006b0c:	40012000 	.word	0x40012000
 8006b10:	10000012 	.word	0x10000012
 8006b14:	20000000 	.word	0x20000000
 8006b18:	431bde83 	.word	0x431bde83

08006b1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006b24:	4b79      	ldr	r3, [pc, #484]	; (8006d0c <ADC_Init+0x1f0>)
 8006b26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	6859      	ldr	r1, [r3, #4]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	021a      	lsls	r2, r3, #8
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685a      	ldr	r2, [r3, #4]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006b74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	6859      	ldr	r1, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	689a      	ldr	r2, [r3, #8]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	430a      	orrs	r2, r1
 8006b86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689a      	ldr	r2, [r3, #8]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6899      	ldr	r1, [r3, #8]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68da      	ldr	r2, [r3, #12]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bae:	4a58      	ldr	r2, [pc, #352]	; (8006d10 <ADC_Init+0x1f4>)
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	d022      	beq.n	8006bfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	689a      	ldr	r2, [r3, #8]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006bc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6899      	ldr	r1, [r3, #8]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	689a      	ldr	r2, [r3, #8]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	6899      	ldr	r1, [r3, #8]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	e00f      	b.n	8006c1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	689a      	ldr	r2, [r3, #8]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006c18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	689a      	ldr	r2, [r3, #8]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0202 	bic.w	r2, r2, #2
 8006c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6899      	ldr	r1, [r3, #8]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	7e1b      	ldrb	r3, [r3, #24]
 8006c34:	005a      	lsls	r2, r3, #1
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	430a      	orrs	r2, r1
 8006c3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01b      	beq.n	8006c80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685a      	ldr	r2, [r3, #4]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006c66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6859      	ldr	r1, [r3, #4]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c72:	3b01      	subs	r3, #1
 8006c74:	035a      	lsls	r2, r3, #13
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
 8006c7e:	e007      	b.n	8006c90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685a      	ldr	r2, [r3, #4]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	051a      	lsls	r2, r3, #20
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	689a      	ldr	r2, [r3, #8]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	6899      	ldr	r1, [r3, #8]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006cd2:	025a      	lsls	r2, r3, #9
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	689a      	ldr	r2, [r3, #8]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006cea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6899      	ldr	r1, [r3, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	029a      	lsls	r2, r3, #10
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	430a      	orrs	r2, r1
 8006cfe:	609a      	str	r2, [r3, #8]
}
 8006d00:	bf00      	nop
 8006d02:	3714      	adds	r7, #20
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr
 8006d0c:	40012300 	.word	0x40012300
 8006d10:	0f000001 	.word	0x0f000001

08006d14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b084      	sub	sp, #16
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d13c      	bne.n	8006da8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d12b      	bne.n	8006da0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d127      	bne.n	8006da0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d006      	beq.n	8006d6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d119      	bne.n	8006da0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685a      	ldr	r2, [r3, #4]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f022 0220 	bic.w	r2, r2, #32
 8006d7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d105      	bne.n	8006da0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	f043 0201 	orr.w	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f7ff fd6b 	bl	800687c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006da6:	e00e      	b.n	8006dc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dac:	f003 0310 	and.w	r3, r3, #16
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff fd75 	bl	80068a4 <HAL_ADC_ErrorCallback>
}
 8006dba:	e004      	b.n	8006dc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	4798      	blx	r3
}
 8006dc6:	bf00      	nop
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}

08006dce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	f7ff fd57 	bl	8006890 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b084      	sub	sp, #16
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006df6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2240      	movs	r2, #64	; 0x40
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e02:	f043 0204 	orr.w	r2, r3, #4
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff fd4a 	bl	80068a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e10:	bf00      	nop
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d101      	bne.n	8006e2a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	e0ed      	b.n	8007006 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e30:	b2db      	uxtb	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d102      	bne.n	8006e3c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f7ff f864 	bl	8005f04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e4c:	f7ff fb92 	bl	8006574 <HAL_GetTick>
 8006e50:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e52:	e012      	b.n	8006e7a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006e54:	f7ff fb8e 	bl	8006574 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b0a      	cmp	r3, #10
 8006e60:	d90b      	bls.n	8006e7a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2205      	movs	r2, #5
 8006e72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e0c5      	b.n	8007006 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0e5      	beq.n	8006e54 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0202 	bic.w	r2, r2, #2
 8006e96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e98:	f7ff fb6c 	bl	8006574 <HAL_GetTick>
 8006e9c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006e9e:	e012      	b.n	8006ec6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006ea0:	f7ff fb68 	bl	8006574 <HAL_GetTick>
 8006ea4:	4602      	mov	r2, r0
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	1ad3      	subs	r3, r2, r3
 8006eaa:	2b0a      	cmp	r3, #10
 8006eac:	d90b      	bls.n	8006ec6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2205      	movs	r2, #5
 8006ebe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e09f      	b.n	8007006 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f003 0302 	and.w	r3, r3, #2
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e5      	bne.n	8006ea0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	7e1b      	ldrb	r3, [r3, #24]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d108      	bne.n	8006eee <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	e007      	b.n	8006efe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006efc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	7e5b      	ldrb	r3, [r3, #25]
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d108      	bne.n	8006f18 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e007      	b.n	8006f28 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	7e9b      	ldrb	r3, [r3, #26]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d108      	bne.n	8006f42 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f042 0220 	orr.w	r2, r2, #32
 8006f3e:	601a      	str	r2, [r3, #0]
 8006f40:	e007      	b.n	8006f52 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f022 0220 	bic.w	r2, r2, #32
 8006f50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	7edb      	ldrb	r3, [r3, #27]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d108      	bne.n	8006f6c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f022 0210 	bic.w	r2, r2, #16
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	e007      	b.n	8006f7c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f042 0210 	orr.w	r2, r2, #16
 8006f7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	7f1b      	ldrb	r3, [r3, #28]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d108      	bne.n	8006f96 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	681a      	ldr	r2, [r3, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f042 0208 	orr.w	r2, r2, #8
 8006f92:	601a      	str	r2, [r3, #0]
 8006f94:	e007      	b.n	8006fa6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f022 0208 	bic.w	r2, r2, #8
 8006fa4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	7f5b      	ldrb	r3, [r3, #29]
 8006faa:	2b01      	cmp	r3, #1
 8006fac:	d108      	bne.n	8006fc0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f042 0204 	orr.w	r2, r2, #4
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e007      	b.n	8006fd0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0204 	bic.w	r2, r2, #4
 8006fce:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	431a      	orrs	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	431a      	orrs	r2, r3
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	ea42 0103 	orr.w	r1, r2, r3
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	1e5a      	subs	r2, r3, #1
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	430a      	orrs	r2, r1
 8006ff4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	3710      	adds	r7, #16
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8007010:	b480      	push	{r7}
 8007012:	b087      	sub	sp, #28
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007026:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007028:	7cfb      	ldrb	r3, [r7, #19]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d003      	beq.n	8007036 <HAL_CAN_ConfigFilter+0x26>
 800702e:	7cfb      	ldrb	r3, [r7, #19]
 8007030:	2b02      	cmp	r3, #2
 8007032:	f040 80be 	bne.w	80071b2 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007036:	4b65      	ldr	r3, [pc, #404]	; (80071cc <HAL_CAN_ConfigFilter+0x1bc>)
 8007038:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007040:	f043 0201 	orr.w	r2, r3, #1
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007050:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	021b      	lsls	r3, r3, #8
 8007066:	431a      	orrs	r2, r3
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	f003 031f 	and.w	r3, r3, #31
 8007076:	2201      	movs	r2, #1
 8007078:	fa02 f303 	lsl.w	r3, r2, r3
 800707c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	43db      	mvns	r3, r3
 8007088:	401a      	ands	r2, r3
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	69db      	ldr	r3, [r3, #28]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d123      	bne.n	80070e0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	43db      	mvns	r3, r3
 80070a2:	401a      	ands	r2, r3
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80070ba:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	3248      	adds	r2, #72	; 0x48
 80070c0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80070d4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80070d6:	6979      	ldr	r1, [r7, #20]
 80070d8:	3348      	adds	r3, #72	; 0x48
 80070da:	00db      	lsls	r3, r3, #3
 80070dc:	440b      	add	r3, r1
 80070de:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d122      	bne.n	800712e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	431a      	orrs	r2, r3
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80070f8:	683b      	ldr	r3, [r7, #0]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8007108:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	3248      	adds	r2, #72	; 0x48
 800710e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007122:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007124:	6979      	ldr	r1, [r7, #20]
 8007126:	3348      	adds	r3, #72	; 0x48
 8007128:	00db      	lsls	r3, r3, #3
 800712a:	440b      	add	r3, r1
 800712c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d109      	bne.n	800714a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	43db      	mvns	r3, r3
 8007140:	401a      	ands	r2, r3
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007148:	e007      	b.n	800715a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	431a      	orrs	r2, r3
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	43db      	mvns	r3, r3
 800716c:	401a      	ands	r2, r3
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007174:	e007      	b.n	8007186 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	431a      	orrs	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d107      	bne.n	800719e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	431a      	orrs	r2, r3
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80071a4:	f023 0201 	bic.w	r2, r3, #1
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80071ae:	2300      	movs	r3, #0
 80071b0:	e006      	b.n	80071c0 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80071be:	2301      	movs	r3, #1
  }
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	371c      	adds	r7, #28
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	40006400 	.word	0x40006400

080071d0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d12e      	bne.n	8007242 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f022 0201 	bic.w	r2, r2, #1
 80071fa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071fc:	f7ff f9ba 	bl	8006574 <HAL_GetTick>
 8007200:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007202:	e012      	b.n	800722a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007204:	f7ff f9b6 	bl	8006574 <HAL_GetTick>
 8007208:	4602      	mov	r2, r0
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	2b0a      	cmp	r3, #10
 8007210:	d90b      	bls.n	800722a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007216:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2205      	movs	r2, #5
 8007222:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	e012      	b.n	8007250 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b00      	cmp	r3, #0
 8007236:	d1e5      	bne.n	8007204 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800723e:	2300      	movs	r3, #0
 8007240:	e006      	b.n	8007250 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007246:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
  }
}
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007258:	b480      	push	{r7}
 800725a:	b089      	sub	sp, #36	; 0x24
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	607a      	str	r2, [r7, #4]
 8007264:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800726c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	689b      	ldr	r3, [r3, #8]
 8007274:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007276:	7ffb      	ldrb	r3, [r7, #31]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d003      	beq.n	8007284 <HAL_CAN_AddTxMessage+0x2c>
 800727c:	7ffb      	ldrb	r3, [r7, #31]
 800727e:	2b02      	cmp	r3, #2
 8007280:	f040 80b8 	bne.w	80073f4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800728e:	69bb      	ldr	r3, [r7, #24]
 8007290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007294:	2b00      	cmp	r3, #0
 8007296:	d105      	bne.n	80072a4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800729e:	2b00      	cmp	r3, #0
 80072a0:	f000 80a0 	beq.w	80073e4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	0e1b      	lsrs	r3, r3, #24
 80072a8:	f003 0303 	and.w	r3, r3, #3
 80072ac:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d907      	bls.n	80072c4 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80072c0:	2301      	movs	r3, #1
 80072c2:	e09e      	b.n	8007402 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80072c4:	2201      	movs	r2, #1
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	409a      	lsls	r2, r3
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10d      	bne.n	80072f2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80072e0:	68f9      	ldr	r1, [r7, #12]
 80072e2:	6809      	ldr	r1, [r1, #0]
 80072e4:	431a      	orrs	r2, r3
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	3318      	adds	r3, #24
 80072ea:	011b      	lsls	r3, r3, #4
 80072ec:	440b      	add	r3, r1
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	e00f      	b.n	8007312 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80072fc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007302:	68f9      	ldr	r1, [r7, #12]
 8007304:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007306:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	3318      	adds	r3, #24
 800730c:	011b      	lsls	r3, r3, #4
 800730e:	440b      	add	r3, r1
 8007310:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	6819      	ldr	r1, [r3, #0]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	691a      	ldr	r2, [r3, #16]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	3318      	adds	r3, #24
 800731e:	011b      	lsls	r3, r3, #4
 8007320:	440b      	add	r3, r1
 8007322:	3304      	adds	r3, #4
 8007324:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	7d1b      	ldrb	r3, [r3, #20]
 800732a:	2b01      	cmp	r3, #1
 800732c:	d111      	bne.n	8007352 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	3318      	adds	r3, #24
 8007336:	011b      	lsls	r3, r3, #4
 8007338:	4413      	add	r3, r2
 800733a:	3304      	adds	r3, #4
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	6811      	ldr	r1, [r2, #0]
 8007342:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	3318      	adds	r3, #24
 800734a:	011b      	lsls	r3, r3, #4
 800734c:	440b      	add	r3, r1
 800734e:	3304      	adds	r3, #4
 8007350:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	3307      	adds	r3, #7
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	061a      	lsls	r2, r3, #24
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	3306      	adds	r3, #6
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	041b      	lsls	r3, r3, #16
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3305      	adds	r3, #5
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	021b      	lsls	r3, r3, #8
 800736c:	4313      	orrs	r3, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	3204      	adds	r2, #4
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	4610      	mov	r0, r2
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	6811      	ldr	r1, [r2, #0]
 800737a:	ea43 0200 	orr.w	r2, r3, r0
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	011b      	lsls	r3, r3, #4
 8007382:	440b      	add	r3, r1
 8007384:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007388:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	3303      	adds	r3, #3
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	061a      	lsls	r2, r3, #24
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3302      	adds	r3, #2
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	041b      	lsls	r3, r3, #16
 800739a:	431a      	orrs	r2, r3
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	3301      	adds	r3, #1
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	021b      	lsls	r3, r3, #8
 80073a4:	4313      	orrs	r3, r2
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	4610      	mov	r0, r2
 80073ac:	68fa      	ldr	r2, [r7, #12]
 80073ae:	6811      	ldr	r1, [r2, #0]
 80073b0:	ea43 0200 	orr.w	r2, r3, r0
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	011b      	lsls	r3, r3, #4
 80073b8:	440b      	add	r3, r1
 80073ba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80073be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	3318      	adds	r3, #24
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	4413      	add	r3, r2
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	6811      	ldr	r1, [r2, #0]
 80073d2:	f043 0201 	orr.w	r2, r3, #1
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	3318      	adds	r3, #24
 80073da:	011b      	lsls	r3, r3, #4
 80073dc:	440b      	add	r3, r1
 80073de:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80073e0:	2300      	movs	r3, #0
 80073e2:	e00e      	b.n	8007402 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e006      	b.n	8007402 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007400:	2301      	movs	r3, #1
  }
}
 8007402:	4618      	mov	r0, r3
 8007404:	3724      	adds	r7, #36	; 0x24
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800740e:	b480      	push	{r7}
 8007410:	b085      	sub	sp, #20
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007420:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007422:	7afb      	ldrb	r3, [r7, #11]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d002      	beq.n	800742e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007428:	7afb      	ldrb	r3, [r7, #11]
 800742a:	2b02      	cmp	r3, #2
 800742c:	d11d      	bne.n	800746a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	689b      	ldr	r3, [r3, #8]
 8007434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d002      	beq.n	8007442 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3301      	adds	r3, #1
 8007440:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800744c:	2b00      	cmp	r3, #0
 800744e:	d002      	beq.n	8007456 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	3301      	adds	r3, #1
 8007454:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d002      	beq.n	800746a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3301      	adds	r3, #1
 8007468:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800746a:	68fb      	ldr	r3, [r7, #12]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3714      	adds	r7, #20
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
 8007484:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f893 3020 	ldrb.w	r3, [r3, #32]
 800748c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800748e:	7dfb      	ldrb	r3, [r7, #23]
 8007490:	2b01      	cmp	r3, #1
 8007492:	d003      	beq.n	800749c <HAL_CAN_GetRxMessage+0x24>
 8007494:	7dfb      	ldrb	r3, [r7, #23]
 8007496:	2b02      	cmp	r3, #2
 8007498:	f040 80f3 	bne.w	8007682 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10e      	bne.n	80074c0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	f003 0303 	and.w	r3, r3, #3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d116      	bne.n	80074de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	e0e7      	b.n	8007690 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	691b      	ldr	r3, [r3, #16]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d107      	bne.n	80074de <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80074da:	2301      	movs	r3, #1
 80074dc:	e0d8      	b.n	8007690 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	331b      	adds	r3, #27
 80074e6:	011b      	lsls	r3, r3, #4
 80074e8:	4413      	add	r3, r2
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0204 	and.w	r2, r3, #4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d10c      	bne.n	8007516 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681a      	ldr	r2, [r3, #0]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	331b      	adds	r3, #27
 8007504:	011b      	lsls	r3, r3, #4
 8007506:	4413      	add	r3, r2
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	0d5b      	lsrs	r3, r3, #21
 800750c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	601a      	str	r2, [r3, #0]
 8007514:	e00b      	b.n	800752e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	331b      	adds	r3, #27
 800751e:	011b      	lsls	r3, r3, #4
 8007520:	4413      	add	r3, r2
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	08db      	lsrs	r3, r3, #3
 8007526:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	331b      	adds	r3, #27
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	4413      	add	r3, r2
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0202 	and.w	r2, r3, #2
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	331b      	adds	r3, #27
 800754c:	011b      	lsls	r3, r3, #4
 800754e:	4413      	add	r3, r2
 8007550:	3304      	adds	r3, #4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 020f 	and.w	r2, r3, #15
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	331b      	adds	r3, #27
 8007564:	011b      	lsls	r3, r3, #4
 8007566:	4413      	add	r3, r2
 8007568:	3304      	adds	r3, #4
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	0a1b      	lsrs	r3, r3, #8
 800756e:	b2da      	uxtb	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681a      	ldr	r2, [r3, #0]
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	331b      	adds	r3, #27
 800757c:	011b      	lsls	r3, r3, #4
 800757e:	4413      	add	r3, r2
 8007580:	3304      	adds	r3, #4
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	0c1b      	lsrs	r3, r3, #16
 8007586:	b29a      	uxth	r2, r3
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	011b      	lsls	r3, r3, #4
 8007594:	4413      	add	r3, r2
 8007596:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	b2da      	uxtb	r2, r3
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	011b      	lsls	r3, r3, #4
 80075aa:	4413      	add	r3, r2
 80075ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	0a1a      	lsrs	r2, r3, #8
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	3301      	adds	r3, #1
 80075b8:	b2d2      	uxtb	r2, r2
 80075ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	011b      	lsls	r3, r3, #4
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	0c1a      	lsrs	r2, r3, #16
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	3302      	adds	r3, #2
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	4413      	add	r3, r2
 80075e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	0e1a      	lsrs	r2, r3, #24
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	3303      	adds	r3, #3
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	3304      	adds	r3, #4
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	011b      	lsls	r3, r3, #4
 8007610:	4413      	add	r3, r2
 8007612:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	0a1a      	lsrs	r2, r3, #8
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	3305      	adds	r3, #5
 800761e:	b2d2      	uxtb	r2, r2
 8007620:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	4413      	add	r3, r2
 800762c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	0c1a      	lsrs	r2, r3, #16
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	3306      	adds	r3, #6
 8007638:	b2d2      	uxtb	r2, r2
 800763a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	4413      	add	r3, r2
 8007646:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	0e1a      	lsrs	r2, r3, #24
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	3307      	adds	r3, #7
 8007652:	b2d2      	uxtb	r2, r2
 8007654:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d108      	bne.n	800766e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f042 0220 	orr.w	r2, r2, #32
 800766a:	60da      	str	r2, [r3, #12]
 800766c:	e007      	b.n	800767e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f042 0220 	orr.w	r2, r2, #32
 800767c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	e006      	b.n	8007690 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
  }
}
 8007690:	4618      	mov	r0, r3
 8007692:	371c      	adds	r7, #28
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800769c:	b480      	push	{r7}
 800769e:	b085      	sub	sp, #20
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80076ae:	7bfb      	ldrb	r3, [r7, #15]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d002      	beq.n	80076ba <HAL_CAN_ActivateNotification+0x1e>
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d109      	bne.n	80076ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6959      	ldr	r1, [r3, #20]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	430a      	orrs	r2, r1
 80076c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	e006      	b.n	80076dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80076da:	2301      	movs	r3, #1
  }
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3714      	adds	r7, #20
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b08a      	sub	sp, #40	; 0x28
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80076f0:	2300      	movs	r3, #0
 80076f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	695b      	ldr	r3, [r3, #20]
 80076fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	f003 0301 	and.w	r3, r3, #1
 800772a:	2b00      	cmp	r3, #0
 800772c:	d07c      	beq.n	8007828 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800772e:	69bb      	ldr	r3, [r7, #24]
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d023      	beq.n	8007780 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2201      	movs	r2, #1
 800773e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	f003 0302 	and.w	r3, r3, #2
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f983 	bl	8007a56 <HAL_CAN_TxMailbox0CompleteCallback>
 8007750:	e016      	b.n	8007780 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007752:	69bb      	ldr	r3, [r7, #24]
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b00      	cmp	r3, #0
 800775a:	d004      	beq.n	8007766 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
 8007764:	e00c      	b.n	8007780 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d004      	beq.n	800777a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007772:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007776:	627b      	str	r3, [r7, #36]	; 0x24
 8007778:	e002      	b.n	8007780 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f989 	bl	8007a92 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007786:	2b00      	cmp	r3, #0
 8007788:	d024      	beq.n	80077d4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007792:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f963 	bl	8007a6a <HAL_CAN_TxMailbox1CompleteCallback>
 80077a4:	e016      	b.n	80077d4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d004      	beq.n	80077ba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80077b6:	627b      	str	r3, [r7, #36]	; 0x24
 80077b8:	e00c      	b.n	80077d4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077ca:	627b      	str	r3, [r7, #36]	; 0x24
 80077cc:	e002      	b.n	80077d4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f969 	bl	8007aa6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d024      	beq.n	8007828 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80077e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f943 	bl	8007a7e <HAL_CAN_TxMailbox2CompleteCallback>
 80077f8:	e016      	b.n	8007828 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007800:	2b00      	cmp	r3, #0
 8007802:	d004      	beq.n	800780e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
 800780c:	e00c      	b.n	8007828 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d004      	beq.n	8007822 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800781e:	627b      	str	r3, [r7, #36]	; 0x24
 8007820:	e002      	b.n	8007828 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f949 	bl	8007aba <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	f003 0308 	and.w	r3, r3, #8
 800782e:	2b00      	cmp	r3, #0
 8007830:	d00c      	beq.n	800784c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	f003 0310 	and.w	r3, r3, #16
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007842:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	2210      	movs	r2, #16
 800784a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	f003 0304 	and.w	r3, r3, #4
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	f003 0308 	and.w	r3, r3, #8
 800785c:	2b00      	cmp	r3, #0
 800785e:	d006      	beq.n	800786e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2208      	movs	r2, #8
 8007866:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007868:	6878      	ldr	r0, [r7, #4]
 800786a:	f000 f930 	bl	8007ace <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	f003 0302 	and.w	r3, r3, #2
 8007874:	2b00      	cmp	r3, #0
 8007876:	d009      	beq.n	800788c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68db      	ldr	r3, [r3, #12]
 800787e:	f003 0303 	and.w	r3, r3, #3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d002      	beq.n	800788c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fe f89e 	bl	80059c8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800788c:	6a3b      	ldr	r3, [r7, #32]
 800788e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00c      	beq.n	80078b0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f003 0310 	and.w	r3, r3, #16
 800789c:	2b00      	cmp	r3, #0
 800789e:	d007      	beq.n	80078b0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80078a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2210      	movs	r2, #16
 80078ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	f003 0320 	and.w	r3, r3, #32
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d00b      	beq.n	80078d2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f003 0308 	and.w	r3, r3, #8
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d006      	beq.n	80078d2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2208      	movs	r2, #8
 80078ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 f912 	bl	8007af6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	f003 0310 	and.w	r3, r3, #16
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d009      	beq.n	80078f0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f003 0303 	and.w	r3, r3, #3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f000 f8f9 	bl	8007ae2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00b      	beq.n	8007912 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	d006      	beq.n	8007912 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2210      	movs	r2, #16
 800790a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f8fc 	bl	8007b0a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00b      	beq.n	8007934 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	f003 0308 	and.w	r3, r3, #8
 8007922:	2b00      	cmp	r3, #0
 8007924:	d006      	beq.n	8007934 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2208      	movs	r2, #8
 800792c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f8f5 	bl	8007b1e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007934:	6a3b      	ldr	r3, [r7, #32]
 8007936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d07b      	beq.n	8007a36 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	f003 0304 	and.w	r3, r3, #4
 8007944:	2b00      	cmp	r3, #0
 8007946:	d072      	beq.n	8007a2e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007948:	6a3b      	ldr	r3, [r7, #32]
 800794a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794e:	2b00      	cmp	r3, #0
 8007950:	d008      	beq.n	8007964 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	f043 0301 	orr.w	r3, r3, #1
 8007962:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800796a:	2b00      	cmp	r3, #0
 800796c:	d008      	beq.n	8007980 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007974:	2b00      	cmp	r3, #0
 8007976:	d003      	beq.n	8007980 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	f043 0302 	orr.w	r3, r3, #2
 800797e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007986:	2b00      	cmp	r3, #0
 8007988:	d008      	beq.n	800799c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007990:	2b00      	cmp	r3, #0
 8007992:	d003      	beq.n	800799c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007996:	f043 0304 	orr.w	r3, r3, #4
 800799a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d043      	beq.n	8007a2e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d03e      	beq.n	8007a2e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80079b6:	2b60      	cmp	r3, #96	; 0x60
 80079b8:	d02b      	beq.n	8007a12 <HAL_CAN_IRQHandler+0x32a>
 80079ba:	2b60      	cmp	r3, #96	; 0x60
 80079bc:	d82e      	bhi.n	8007a1c <HAL_CAN_IRQHandler+0x334>
 80079be:	2b50      	cmp	r3, #80	; 0x50
 80079c0:	d022      	beq.n	8007a08 <HAL_CAN_IRQHandler+0x320>
 80079c2:	2b50      	cmp	r3, #80	; 0x50
 80079c4:	d82a      	bhi.n	8007a1c <HAL_CAN_IRQHandler+0x334>
 80079c6:	2b40      	cmp	r3, #64	; 0x40
 80079c8:	d019      	beq.n	80079fe <HAL_CAN_IRQHandler+0x316>
 80079ca:	2b40      	cmp	r3, #64	; 0x40
 80079cc:	d826      	bhi.n	8007a1c <HAL_CAN_IRQHandler+0x334>
 80079ce:	2b30      	cmp	r3, #48	; 0x30
 80079d0:	d010      	beq.n	80079f4 <HAL_CAN_IRQHandler+0x30c>
 80079d2:	2b30      	cmp	r3, #48	; 0x30
 80079d4:	d822      	bhi.n	8007a1c <HAL_CAN_IRQHandler+0x334>
 80079d6:	2b10      	cmp	r3, #16
 80079d8:	d002      	beq.n	80079e0 <HAL_CAN_IRQHandler+0x2f8>
 80079da:	2b20      	cmp	r3, #32
 80079dc:	d005      	beq.n	80079ea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80079de:	e01d      	b.n	8007a1c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	f043 0308 	orr.w	r3, r3, #8
 80079e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079e8:	e019      	b.n	8007a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80079ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ec:	f043 0310 	orr.w	r3, r3, #16
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079f2:	e014      	b.n	8007a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80079f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f6:	f043 0320 	orr.w	r3, r3, #32
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80079fc:	e00f      	b.n	8007a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a04:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a06:	e00a      	b.n	8007a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a10:	e005      	b.n	8007a1e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a18:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007a1a:	e000      	b.n	8007a1e <HAL_CAN_IRQHandler+0x336>
            break;
 8007a1c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	699a      	ldr	r2, [r3, #24]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007a2c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	2204      	movs	r2, #4
 8007a34:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d008      	beq.n	8007a4e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f000 f872 	bl	8007b32 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007a4e:	bf00      	nop
 8007a50:	3728      	adds	r7, #40	; 0x28
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007a56:	b480      	push	{r7}
 8007a58:	b083      	sub	sp, #12
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr

08007a6a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007a6a:	b480      	push	{r7}
 8007a6c:	b083      	sub	sp, #12
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007a72:	bf00      	nop
 8007a74:	370c      	adds	r7, #12
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b083      	sub	sp, #12
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007a92:	b480      	push	{r7}
 8007a94:	b083      	sub	sp, #12
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007a9a:	bf00      	nop
 8007a9c:	370c      	adds	r7, #12
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b083      	sub	sp, #12
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b083      	sub	sp, #12
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007ac2:	bf00      	nop
 8007ac4:	370c      	adds	r7, #12
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr

08007ace <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007ace:	b480      	push	{r7}
 8007ad0:	b083      	sub	sp, #12
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007ad6:	bf00      	nop
 8007ad8:	370c      	adds	r7, #12
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr

08007ae2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007ae2:	b480      	push	{r7}
 8007ae4:	b083      	sub	sp, #12
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr

08007af6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
	...

08007b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007b58:	4b0c      	ldr	r3, [pc, #48]	; (8007b8c <__NVIC_SetPriorityGrouping+0x44>)
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007b64:	4013      	ands	r3, r2
 8007b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007b70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007b7a:	4a04      	ldr	r2, [pc, #16]	; (8007b8c <__NVIC_SetPriorityGrouping+0x44>)
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	60d3      	str	r3, [r2, #12]
}
 8007b80:	bf00      	nop
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	e000ed00 	.word	0xe000ed00

08007b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007b90:	b480      	push	{r7}
 8007b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007b94:	4b04      	ldr	r3, [pc, #16]	; (8007ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	0a1b      	lsrs	r3, r3, #8
 8007b9a:	f003 0307 	and.w	r3, r3, #7
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	46bd      	mov	sp, r7
 8007ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba6:	4770      	bx	lr
 8007ba8:	e000ed00 	.word	0xe000ed00

08007bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	db0b      	blt.n	8007bd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	f003 021f 	and.w	r2, r3, #31
 8007bc4:	4907      	ldr	r1, [pc, #28]	; (8007be4 <__NVIC_EnableIRQ+0x38>)
 8007bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bca:	095b      	lsrs	r3, r3, #5
 8007bcc:	2001      	movs	r0, #1
 8007bce:	fa00 f202 	lsl.w	r2, r0, r2
 8007bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007bd6:	bf00      	nop
 8007bd8:	370c      	adds	r7, #12
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	e000e100 	.word	0xe000e100

08007be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	4603      	mov	r3, r0
 8007bf0:	6039      	str	r1, [r7, #0]
 8007bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	db0a      	blt.n	8007c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	b2da      	uxtb	r2, r3
 8007c00:	490c      	ldr	r1, [pc, #48]	; (8007c34 <__NVIC_SetPriority+0x4c>)
 8007c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c06:	0112      	lsls	r2, r2, #4
 8007c08:	b2d2      	uxtb	r2, r2
 8007c0a:	440b      	add	r3, r1
 8007c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007c10:	e00a      	b.n	8007c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	4908      	ldr	r1, [pc, #32]	; (8007c38 <__NVIC_SetPriority+0x50>)
 8007c18:	79fb      	ldrb	r3, [r7, #7]
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	3b04      	subs	r3, #4
 8007c20:	0112      	lsls	r2, r2, #4
 8007c22:	b2d2      	uxtb	r2, r2
 8007c24:	440b      	add	r3, r1
 8007c26:	761a      	strb	r2, [r3, #24]
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	e000e100 	.word	0xe000e100
 8007c38:	e000ed00 	.word	0xe000ed00

08007c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b089      	sub	sp, #36	; 0x24
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	60f8      	str	r0, [r7, #12]
 8007c44:	60b9      	str	r1, [r7, #8]
 8007c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	f003 0307 	and.w	r3, r3, #7
 8007c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	f1c3 0307 	rsb	r3, r3, #7
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	bf28      	it	cs
 8007c5a:	2304      	movcs	r3, #4
 8007c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007c5e:	69fb      	ldr	r3, [r7, #28]
 8007c60:	3304      	adds	r3, #4
 8007c62:	2b06      	cmp	r3, #6
 8007c64:	d902      	bls.n	8007c6c <NVIC_EncodePriority+0x30>
 8007c66:	69fb      	ldr	r3, [r7, #28]
 8007c68:	3b03      	subs	r3, #3
 8007c6a:	e000      	b.n	8007c6e <NVIC_EncodePriority+0x32>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c70:	f04f 32ff 	mov.w	r2, #4294967295
 8007c74:	69bb      	ldr	r3, [r7, #24]
 8007c76:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7a:	43da      	mvns	r2, r3
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	401a      	ands	r2, r3
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007c84:	f04f 31ff 	mov.w	r1, #4294967295
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8007c8e:	43d9      	mvns	r1, r3
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007c94:	4313      	orrs	r3, r2
         );
}
 8007c96:	4618      	mov	r0, r3
 8007c98:	3724      	adds	r7, #36	; 0x24
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca0:	4770      	bx	lr
	...

08007ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3b01      	subs	r3, #1
 8007cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007cb4:	d301      	bcc.n	8007cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e00f      	b.n	8007cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007cba:	4a0a      	ldr	r2, [pc, #40]	; (8007ce4 <SysTick_Config+0x40>)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007cc2:	210f      	movs	r1, #15
 8007cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc8:	f7ff ff8e 	bl	8007be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ccc:	4b05      	ldr	r3, [pc, #20]	; (8007ce4 <SysTick_Config+0x40>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007cd2:	4b04      	ldr	r3, [pc, #16]	; (8007ce4 <SysTick_Config+0x40>)
 8007cd4:	2207      	movs	r2, #7
 8007cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	e000e010 	.word	0xe000e010

08007ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f7ff ff29 	bl	8007b48 <__NVIC_SetPriorityGrouping>
}
 8007cf6:	bf00      	nop
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b086      	sub	sp, #24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	4603      	mov	r3, r0
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
 8007d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007d10:	f7ff ff3e 	bl	8007b90 <__NVIC_GetPriorityGrouping>
 8007d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	68b9      	ldr	r1, [r7, #8]
 8007d1a:	6978      	ldr	r0, [r7, #20]
 8007d1c:	f7ff ff8e 	bl	8007c3c <NVIC_EncodePriority>
 8007d20:	4602      	mov	r2, r0
 8007d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d26:	4611      	mov	r1, r2
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff ff5d 	bl	8007be8 <__NVIC_SetPriority>
}
 8007d2e:	bf00      	nop
 8007d30:	3718      	adds	r7, #24
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}

08007d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007d36:	b580      	push	{r7, lr}
 8007d38:	b082      	sub	sp, #8
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff ff31 	bl	8007bac <__NVIC_EnableIRQ>
}
 8007d4a:	bf00      	nop
 8007d4c:	3708      	adds	r7, #8
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}

08007d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007d52:	b580      	push	{r7, lr}
 8007d54:	b082      	sub	sp, #8
 8007d56:	af00      	add	r7, sp, #0
 8007d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7ff ffa2 	bl	8007ca4 <SysTick_Config>
 8007d60:	4603      	mov	r3, r0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3708      	adds	r7, #8
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b086      	sub	sp, #24
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007d74:	2300      	movs	r3, #0
 8007d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007d78:	f7fe fbfc 	bl	8006574 <HAL_GetTick>
 8007d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e099      	b.n	8007ebc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2202      	movs	r2, #2
 8007d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f022 0201 	bic.w	r2, r2, #1
 8007da6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007da8:	e00f      	b.n	8007dca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007daa:	f7fe fbe3 	bl	8006574 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b05      	cmp	r3, #5
 8007db6:	d908      	bls.n	8007dca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2203      	movs	r2, #3
 8007dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e078      	b.n	8007ebc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0301 	and.w	r3, r3, #1
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e8      	bne.n	8007daa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	4b38      	ldr	r3, [pc, #224]	; (8007ec4 <HAL_DMA_Init+0x158>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	691b      	ldr	r3, [r3, #16]
 8007dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6a1b      	ldr	r3, [r3, #32]
 8007e14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d107      	bne.n	8007e34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	697a      	ldr	r2, [r7, #20]
 8007e3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	695b      	ldr	r3, [r3, #20]
 8007e42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f023 0307 	bic.w	r3, r3, #7
 8007e4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	4313      	orrs	r3, r2
 8007e54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5a:	2b04      	cmp	r3, #4
 8007e5c:	d117      	bne.n	8007e8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00e      	beq.n	8007e8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fa9d 	bl	80083b0 <DMA_CheckFifoParam>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2240      	movs	r2, #64	; 0x40
 8007e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e016      	b.n	8007ebc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fa54 	bl	8008344 <DMA_CalcBaseAndBitshift>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea4:	223f      	movs	r2, #63	; 0x3f
 8007ea6:	409a      	lsls	r2, r3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2201      	movs	r2, #1
 8007eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3718      	adds	r7, #24
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}
 8007ec4:	f010803f 	.word	0xf010803f

08007ec8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	60b9      	str	r1, [r7, #8]
 8007ed2:	607a      	str	r2, [r7, #4]
 8007ed4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ede:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d101      	bne.n	8007eee <HAL_DMA_Start_IT+0x26>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e040      	b.n	8007f70 <HAL_DMA_Start_IT+0xa8>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d12f      	bne.n	8007f62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2202      	movs	r2, #2
 8007f06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	68b9      	ldr	r1, [r7, #8]
 8007f16:	68f8      	ldr	r0, [r7, #12]
 8007f18:	f000 f9e6 	bl	80082e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f20:	223f      	movs	r2, #63	; 0x3f
 8007f22:	409a      	lsls	r2, r3
 8007f24:	693b      	ldr	r3, [r7, #16]
 8007f26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681a      	ldr	r2, [r3, #0]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f042 0216 	orr.w	r2, r2, #22
 8007f36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d007      	beq.n	8007f50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f042 0208 	orr.w	r2, r2, #8
 8007f4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	681a      	ldr	r2, [r3, #0]
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f042 0201 	orr.w	r2, r2, #1
 8007f5e:	601a      	str	r2, [r3, #0]
 8007f60:	e005      	b.n	8007f6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007f6a:	2302      	movs	r3, #2
 8007f6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d004      	beq.n	8007f96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2280      	movs	r2, #128	; 0x80
 8007f90:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e00c      	b.n	8007fb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2205      	movs	r2, #5
 8007f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 0201 	bic.w	r2, r2, #1
 8007fac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b086      	sub	sp, #24
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007fc8:	4b92      	ldr	r3, [pc, #584]	; (8008214 <HAL_DMA_IRQHandler+0x258>)
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a92      	ldr	r2, [pc, #584]	; (8008218 <HAL_DMA_IRQHandler+0x25c>)
 8007fce:	fba2 2303 	umull	r2, r3, r2, r3
 8007fd2:	0a9b      	lsrs	r3, r3, #10
 8007fd4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fe6:	2208      	movs	r2, #8
 8007fe8:	409a      	lsls	r2, r3
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	4013      	ands	r3, r2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d01a      	beq.n	8008028 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f003 0304 	and.w	r3, r3, #4
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d013      	beq.n	8008028 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f022 0204 	bic.w	r2, r2, #4
 800800e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008014:	2208      	movs	r2, #8
 8008016:	409a      	lsls	r2, r3
 8008018:	693b      	ldr	r3, [r7, #16]
 800801a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008020:	f043 0201 	orr.w	r2, r3, #1
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800802c:	2201      	movs	r2, #1
 800802e:	409a      	lsls	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4013      	ands	r3, r2
 8008034:	2b00      	cmp	r3, #0
 8008036:	d012      	beq.n	800805e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	695b      	ldr	r3, [r3, #20]
 800803e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00b      	beq.n	800805e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804a:	2201      	movs	r2, #1
 800804c:	409a      	lsls	r2, r3
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008056:	f043 0202 	orr.w	r2, r3, #2
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008062:	2204      	movs	r2, #4
 8008064:	409a      	lsls	r2, r3
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	4013      	ands	r3, r2
 800806a:	2b00      	cmp	r3, #0
 800806c:	d012      	beq.n	8008094 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0302 	and.w	r3, r3, #2
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00b      	beq.n	8008094 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008080:	2204      	movs	r2, #4
 8008082:	409a      	lsls	r2, r3
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808c:	f043 0204 	orr.w	r2, r3, #4
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008098:	2210      	movs	r2, #16
 800809a:	409a      	lsls	r2, r3
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4013      	ands	r3, r2
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d043      	beq.n	800812c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f003 0308 	and.w	r3, r3, #8
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d03c      	beq.n	800812c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b6:	2210      	movs	r2, #16
 80080b8:	409a      	lsls	r2, r3
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d018      	beq.n	80080fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d108      	bne.n	80080ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d024      	beq.n	800812c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	4798      	blx	r3
 80080ea:	e01f      	b.n	800812c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d01b      	beq.n	800812c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	4798      	blx	r3
 80080fc:	e016      	b.n	800812c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008108:	2b00      	cmp	r3, #0
 800810a:	d107      	bne.n	800811c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0208 	bic.w	r2, r2, #8
 800811a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008120:	2b00      	cmp	r3, #0
 8008122:	d003      	beq.n	800812c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008130:	2220      	movs	r2, #32
 8008132:	409a      	lsls	r2, r3
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	4013      	ands	r3, r2
 8008138:	2b00      	cmp	r3, #0
 800813a:	f000 808e 	beq.w	800825a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0310 	and.w	r3, r3, #16
 8008148:	2b00      	cmp	r3, #0
 800814a:	f000 8086 	beq.w	800825a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008152:	2220      	movs	r2, #32
 8008154:	409a      	lsls	r2, r3
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008160:	b2db      	uxtb	r3, r3
 8008162:	2b05      	cmp	r3, #5
 8008164:	d136      	bne.n	80081d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f022 0216 	bic.w	r2, r2, #22
 8008174:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	695a      	ldr	r2, [r3, #20]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008184:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818a:	2b00      	cmp	r3, #0
 800818c:	d103      	bne.n	8008196 <HAL_DMA_IRQHandler+0x1da>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008192:	2b00      	cmp	r3, #0
 8008194:	d007      	beq.n	80081a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0208 	bic.w	r2, r2, #8
 80081a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081aa:	223f      	movs	r2, #63	; 0x3f
 80081ac:	409a      	lsls	r2, r3
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	2201      	movs	r2, #1
 80081b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d07d      	beq.n	80082c6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	4798      	blx	r3
        }
        return;
 80081d2:	e078      	b.n	80082c6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d01c      	beq.n	800821c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d108      	bne.n	8008202 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d030      	beq.n	800825a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	4798      	blx	r3
 8008200:	e02b      	b.n	800825a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008206:	2b00      	cmp	r3, #0
 8008208:	d027      	beq.n	800825a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	4798      	blx	r3
 8008212:	e022      	b.n	800825a <HAL_DMA_IRQHandler+0x29e>
 8008214:	20000000 	.word	0x20000000
 8008218:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10f      	bne.n	800824a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0210 	bic.w	r2, r2, #16
 8008238:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800825e:	2b00      	cmp	r3, #0
 8008260:	d032      	beq.n	80082c8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b00      	cmp	r3, #0
 800826c:	d022      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2205      	movs	r2, #5
 8008272:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 0201 	bic.w	r2, r2, #1
 8008284:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	3301      	adds	r3, #1
 800828a:	60bb      	str	r3, [r7, #8]
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	429a      	cmp	r2, r3
 8008290:	d307      	bcc.n	80082a2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f003 0301 	and.w	r3, r3, #1
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1f2      	bne.n	8008286 <HAL_DMA_IRQHandler+0x2ca>
 80082a0:	e000      	b.n	80082a4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80082a2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2201      	movs	r2, #1
 80082a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d005      	beq.n	80082c8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	4798      	blx	r3
 80082c4:	e000      	b.n	80082c8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80082c6:	bf00      	nop
    }
  }
}
 80082c8:	3718      	adds	r7, #24
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	bf00      	nop

080082d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80082dc:	4618      	mov	r0, r3
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b085      	sub	sp, #20
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
 80082f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	681a      	ldr	r2, [r3, #0]
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008304:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	683a      	ldr	r2, [r7, #0]
 800830c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	689b      	ldr	r3, [r3, #8]
 8008312:	2b40      	cmp	r3, #64	; 0x40
 8008314:	d108      	bne.n	8008328 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008326:	e007      	b.n	8008338 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	687a      	ldr	r2, [r7, #4]
 8008336:	60da      	str	r2, [r3, #12]
}
 8008338:	bf00      	nop
 800833a:	3714      	adds	r7, #20
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008344:	b480      	push	{r7}
 8008346:	b085      	sub	sp, #20
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	b2db      	uxtb	r3, r3
 8008352:	3b10      	subs	r3, #16
 8008354:	4a14      	ldr	r2, [pc, #80]	; (80083a8 <DMA_CalcBaseAndBitshift+0x64>)
 8008356:	fba2 2303 	umull	r2, r3, r2, r3
 800835a:	091b      	lsrs	r3, r3, #4
 800835c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800835e:	4a13      	ldr	r2, [pc, #76]	; (80083ac <DMA_CalcBaseAndBitshift+0x68>)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	4413      	add	r3, r2
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	461a      	mov	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2b03      	cmp	r3, #3
 8008370:	d909      	bls.n	8008386 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800837a:	f023 0303 	bic.w	r3, r3, #3
 800837e:	1d1a      	adds	r2, r3, #4
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	659a      	str	r2, [r3, #88]	; 0x58
 8008384:	e007      	b.n	8008396 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800838e:	f023 0303 	bic.w	r3, r3, #3
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800839a:	4618      	mov	r0, r3
 800839c:	3714      	adds	r7, #20
 800839e:	46bd      	mov	sp, r7
 80083a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a4:	4770      	bx	lr
 80083a6:	bf00      	nop
 80083a8:	aaaaaaab 	.word	0xaaaaaaab
 80083ac:	080175c4 	.word	0x080175c4

080083b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083b8:	2300      	movs	r3, #0
 80083ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	699b      	ldr	r3, [r3, #24]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d11f      	bne.n	800840a <DMA_CheckFifoParam+0x5a>
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d856      	bhi.n	800847e <DMA_CheckFifoParam+0xce>
 80083d0:	a201      	add	r2, pc, #4	; (adr r2, 80083d8 <DMA_CheckFifoParam+0x28>)
 80083d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d6:	bf00      	nop
 80083d8:	080083e9 	.word	0x080083e9
 80083dc:	080083fb 	.word	0x080083fb
 80083e0:	080083e9 	.word	0x080083e9
 80083e4:	0800847f 	.word	0x0800847f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d046      	beq.n	8008482 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80083f4:	2301      	movs	r3, #1
 80083f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80083f8:	e043      	b.n	8008482 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008402:	d140      	bne.n	8008486 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008404:	2301      	movs	r3, #1
 8008406:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008408:	e03d      	b.n	8008486 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008412:	d121      	bne.n	8008458 <DMA_CheckFifoParam+0xa8>
 8008414:	68bb      	ldr	r3, [r7, #8]
 8008416:	2b03      	cmp	r3, #3
 8008418:	d837      	bhi.n	800848a <DMA_CheckFifoParam+0xda>
 800841a:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <DMA_CheckFifoParam+0x70>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	08008431 	.word	0x08008431
 8008424:	08008437 	.word	0x08008437
 8008428:	08008431 	.word	0x08008431
 800842c:	08008449 	.word	0x08008449
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	73fb      	strb	r3, [r7, #15]
      break;
 8008434:	e030      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800843e:	2b00      	cmp	r3, #0
 8008440:	d025      	beq.n	800848e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008446:	e022      	b.n	800848e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800844c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008450:	d11f      	bne.n	8008492 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008452:	2301      	movs	r3, #1
 8008454:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008456:	e01c      	b.n	8008492 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d903      	bls.n	8008466 <DMA_CheckFifoParam+0xb6>
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	2b03      	cmp	r3, #3
 8008462:	d003      	beq.n	800846c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008464:	e018      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	73fb      	strb	r3, [r7, #15]
      break;
 800846a:	e015      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008470:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00e      	beq.n	8008496 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008478:	2301      	movs	r3, #1
 800847a:	73fb      	strb	r3, [r7, #15]
      break;
 800847c:	e00b      	b.n	8008496 <DMA_CheckFifoParam+0xe6>
      break;
 800847e:	bf00      	nop
 8008480:	e00a      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;
 8008482:	bf00      	nop
 8008484:	e008      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;
 8008486:	bf00      	nop
 8008488:	e006      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;
 800848a:	bf00      	nop
 800848c:	e004      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;
 800848e:	bf00      	nop
 8008490:	e002      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;   
 8008492:	bf00      	nop
 8008494:	e000      	b.n	8008498 <DMA_CheckFifoParam+0xe8>
      break;
 8008496:	bf00      	nop
    }
  } 
  
  return status; 
 8008498:	7bfb      	ldrb	r3, [r7, #15]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop

080084a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b089      	sub	sp, #36	; 0x24
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80084b2:	2300      	movs	r3, #0
 80084b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80084b6:	2300      	movs	r3, #0
 80084b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80084ba:	2300      	movs	r3, #0
 80084bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80084be:	2300      	movs	r3, #0
 80084c0:	61fb      	str	r3, [r7, #28]
 80084c2:	e165      	b.n	8008790 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80084c4:	2201      	movs	r2, #1
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	fa02 f303 	lsl.w	r3, r2, r3
 80084cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	4013      	ands	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	429a      	cmp	r2, r3
 80084de:	f040 8154 	bne.w	800878a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	f003 0303 	and.w	r3, r3, #3
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d005      	beq.n	80084fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80084f6:	2b02      	cmp	r3, #2
 80084f8:	d130      	bne.n	800855c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	005b      	lsls	r3, r3, #1
 8008504:	2203      	movs	r2, #3
 8008506:	fa02 f303 	lsl.w	r3, r2, r3
 800850a:	43db      	mvns	r3, r3
 800850c:	69ba      	ldr	r2, [r7, #24]
 800850e:	4013      	ands	r3, r2
 8008510:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	69fb      	ldr	r3, [r7, #28]
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	fa02 f303 	lsl.w	r3, r2, r3
 800851e:	69ba      	ldr	r2, [r7, #24]
 8008520:	4313      	orrs	r3, r2
 8008522:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008530:	2201      	movs	r2, #1
 8008532:	69fb      	ldr	r3, [r7, #28]
 8008534:	fa02 f303 	lsl.w	r3, r2, r3
 8008538:	43db      	mvns	r3, r3
 800853a:	69ba      	ldr	r2, [r7, #24]
 800853c:	4013      	ands	r3, r2
 800853e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	091b      	lsrs	r3, r3, #4
 8008546:	f003 0201 	and.w	r2, r3, #1
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	fa02 f303 	lsl.w	r3, r2, r3
 8008550:	69ba      	ldr	r2, [r7, #24]
 8008552:	4313      	orrs	r3, r2
 8008554:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	69ba      	ldr	r2, [r7, #24]
 800855a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800855c:	683b      	ldr	r3, [r7, #0]
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	f003 0303 	and.w	r3, r3, #3
 8008564:	2b03      	cmp	r3, #3
 8008566:	d017      	beq.n	8008598 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	005b      	lsls	r3, r3, #1
 8008572:	2203      	movs	r2, #3
 8008574:	fa02 f303 	lsl.w	r3, r2, r3
 8008578:	43db      	mvns	r3, r3
 800857a:	69ba      	ldr	r2, [r7, #24]
 800857c:	4013      	ands	r3, r2
 800857e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	005b      	lsls	r3, r3, #1
 8008588:	fa02 f303 	lsl.w	r3, r2, r3
 800858c:	69ba      	ldr	r2, [r7, #24]
 800858e:	4313      	orrs	r3, r2
 8008590:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685b      	ldr	r3, [r3, #4]
 800859c:	f003 0303 	and.w	r3, r3, #3
 80085a0:	2b02      	cmp	r3, #2
 80085a2:	d123      	bne.n	80085ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	08da      	lsrs	r2, r3, #3
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	3208      	adds	r2, #8
 80085ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	f003 0307 	and.w	r3, r3, #7
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	220f      	movs	r2, #15
 80085bc:	fa02 f303 	lsl.w	r3, r2, r3
 80085c0:	43db      	mvns	r3, r3
 80085c2:	69ba      	ldr	r2, [r7, #24]
 80085c4:	4013      	ands	r3, r2
 80085c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	691a      	ldr	r2, [r3, #16]
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	f003 0307 	and.w	r3, r3, #7
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	fa02 f303 	lsl.w	r3, r2, r3
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	4313      	orrs	r3, r2
 80085dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	08da      	lsrs	r2, r3, #3
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3208      	adds	r2, #8
 80085e6:	69b9      	ldr	r1, [r7, #24]
 80085e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80085f2:	69fb      	ldr	r3, [r7, #28]
 80085f4:	005b      	lsls	r3, r3, #1
 80085f6:	2203      	movs	r2, #3
 80085f8:	fa02 f303 	lsl.w	r3, r2, r3
 80085fc:	43db      	mvns	r3, r3
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	4013      	ands	r3, r2
 8008602:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f003 0203 	and.w	r2, r3, #3
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	005b      	lsls	r3, r3, #1
 8008610:	fa02 f303 	lsl.w	r3, r2, r3
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	4313      	orrs	r3, r2
 8008618:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	69ba      	ldr	r2, [r7, #24]
 800861e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008628:	2b00      	cmp	r3, #0
 800862a:	f000 80ae 	beq.w	800878a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800862e:	2300      	movs	r3, #0
 8008630:	60fb      	str	r3, [r7, #12]
 8008632:	4b5d      	ldr	r3, [pc, #372]	; (80087a8 <HAL_GPIO_Init+0x300>)
 8008634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008636:	4a5c      	ldr	r2, [pc, #368]	; (80087a8 <HAL_GPIO_Init+0x300>)
 8008638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800863c:	6453      	str	r3, [r2, #68]	; 0x44
 800863e:	4b5a      	ldr	r3, [pc, #360]	; (80087a8 <HAL_GPIO_Init+0x300>)
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800864a:	4a58      	ldr	r2, [pc, #352]	; (80087ac <HAL_GPIO_Init+0x304>)
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	089b      	lsrs	r3, r3, #2
 8008650:	3302      	adds	r3, #2
 8008652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	220f      	movs	r2, #15
 8008662:	fa02 f303 	lsl.w	r3, r2, r3
 8008666:	43db      	mvns	r3, r3
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	4013      	ands	r3, r2
 800866c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a4f      	ldr	r2, [pc, #316]	; (80087b0 <HAL_GPIO_Init+0x308>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d025      	beq.n	80086c2 <HAL_GPIO_Init+0x21a>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a4e      	ldr	r2, [pc, #312]	; (80087b4 <HAL_GPIO_Init+0x30c>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d01f      	beq.n	80086be <HAL_GPIO_Init+0x216>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a4d      	ldr	r2, [pc, #308]	; (80087b8 <HAL_GPIO_Init+0x310>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d019      	beq.n	80086ba <HAL_GPIO_Init+0x212>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a4c      	ldr	r2, [pc, #304]	; (80087bc <HAL_GPIO_Init+0x314>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d013      	beq.n	80086b6 <HAL_GPIO_Init+0x20e>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a4b      	ldr	r2, [pc, #300]	; (80087c0 <HAL_GPIO_Init+0x318>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d00d      	beq.n	80086b2 <HAL_GPIO_Init+0x20a>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a4a      	ldr	r2, [pc, #296]	; (80087c4 <HAL_GPIO_Init+0x31c>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d007      	beq.n	80086ae <HAL_GPIO_Init+0x206>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a49      	ldr	r2, [pc, #292]	; (80087c8 <HAL_GPIO_Init+0x320>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d101      	bne.n	80086aa <HAL_GPIO_Init+0x202>
 80086a6:	2306      	movs	r3, #6
 80086a8:	e00c      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086aa:	2307      	movs	r3, #7
 80086ac:	e00a      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086ae:	2305      	movs	r3, #5
 80086b0:	e008      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086b2:	2304      	movs	r3, #4
 80086b4:	e006      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086b6:	2303      	movs	r3, #3
 80086b8:	e004      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e002      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086be:	2301      	movs	r3, #1
 80086c0:	e000      	b.n	80086c4 <HAL_GPIO_Init+0x21c>
 80086c2:	2300      	movs	r3, #0
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	f002 0203 	and.w	r2, r2, #3
 80086ca:	0092      	lsls	r2, r2, #2
 80086cc:	4093      	lsls	r3, r2
 80086ce:	69ba      	ldr	r2, [r7, #24]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80086d4:	4935      	ldr	r1, [pc, #212]	; (80087ac <HAL_GPIO_Init+0x304>)
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	089b      	lsrs	r3, r3, #2
 80086da:	3302      	adds	r3, #2
 80086dc:	69ba      	ldr	r2, [r7, #24]
 80086de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80086e2:	4b3a      	ldr	r3, [pc, #232]	; (80087cc <HAL_GPIO_Init+0x324>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	43db      	mvns	r3, r3
 80086ec:	69ba      	ldr	r2, [r7, #24]
 80086ee:	4013      	ands	r3, r2
 80086f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d003      	beq.n	8008706 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80086fe:	69ba      	ldr	r2, [r7, #24]
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	4313      	orrs	r3, r2
 8008704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008706:	4a31      	ldr	r2, [pc, #196]	; (80087cc <HAL_GPIO_Init+0x324>)
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800870c:	4b2f      	ldr	r3, [pc, #188]	; (80087cc <HAL_GPIO_Init+0x324>)
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	43db      	mvns	r3, r3
 8008716:	69ba      	ldr	r2, [r7, #24]
 8008718:	4013      	ands	r3, r2
 800871a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008724:	2b00      	cmp	r3, #0
 8008726:	d003      	beq.n	8008730 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	4313      	orrs	r3, r2
 800872e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008730:	4a26      	ldr	r2, [pc, #152]	; (80087cc <HAL_GPIO_Init+0x324>)
 8008732:	69bb      	ldr	r3, [r7, #24]
 8008734:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008736:	4b25      	ldr	r3, [pc, #148]	; (80087cc <HAL_GPIO_Init+0x324>)
 8008738:	689b      	ldr	r3, [r3, #8]
 800873a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	43db      	mvns	r3, r3
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	4013      	ands	r3, r2
 8008744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	4313      	orrs	r3, r2
 8008758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800875a:	4a1c      	ldr	r2, [pc, #112]	; (80087cc <HAL_GPIO_Init+0x324>)
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008760:	4b1a      	ldr	r3, [pc, #104]	; (80087cc <HAL_GPIO_Init+0x324>)
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	43db      	mvns	r3, r3
 800876a:	69ba      	ldr	r2, [r7, #24]
 800876c:	4013      	ands	r3, r2
 800876e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d003      	beq.n	8008784 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800877c:	69ba      	ldr	r2, [r7, #24]
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	4313      	orrs	r3, r2
 8008782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008784:	4a11      	ldr	r2, [pc, #68]	; (80087cc <HAL_GPIO_Init+0x324>)
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	3301      	adds	r3, #1
 800878e:	61fb      	str	r3, [r7, #28]
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	2b0f      	cmp	r3, #15
 8008794:	f67f ae96 	bls.w	80084c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	3724      	adds	r7, #36	; 0x24
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr
 80087a6:	bf00      	nop
 80087a8:	40023800 	.word	0x40023800
 80087ac:	40013800 	.word	0x40013800
 80087b0:	40020000 	.word	0x40020000
 80087b4:	40020400 	.word	0x40020400
 80087b8:	40020800 	.word	0x40020800
 80087bc:	40020c00 	.word	0x40020c00
 80087c0:	40021000 	.word	0x40021000
 80087c4:	40021400 	.word	0x40021400
 80087c8:	40021800 	.word	0x40021800
 80087cc:	40013c00 	.word	0x40013c00

080087d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b085      	sub	sp, #20
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
 80087d8:	460b      	mov	r3, r1
 80087da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	691a      	ldr	r2, [r3, #16]
 80087e0:	887b      	ldrh	r3, [r7, #2]
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d002      	beq.n	80087ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80087e8:	2301      	movs	r3, #1
 80087ea:	73fb      	strb	r3, [r7, #15]
 80087ec:	e001      	b.n	80087f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80087ee:	2300      	movs	r3, #0
 80087f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80087f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	807b      	strh	r3, [r7, #2]
 800880c:	4613      	mov	r3, r2
 800880e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008810:	787b      	ldrb	r3, [r7, #1]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008816:	887a      	ldrh	r2, [r7, #2]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800881c:	e003      	b.n	8008826 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800881e:	887b      	ldrh	r3, [r7, #2]
 8008820:	041a      	lsls	r2, r3, #16
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	619a      	str	r2, [r3, #24]
}
 8008826:	bf00      	nop
 8008828:	370c      	adds	r7, #12
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008832:	b480      	push	{r7}
 8008834:	b085      	sub	sp, #20
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
 800883a:	460b      	mov	r3, r1
 800883c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	695b      	ldr	r3, [r3, #20]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008844:	887a      	ldrh	r2, [r7, #2]
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	4013      	ands	r3, r2
 800884a:	041a      	lsls	r2, r3, #16
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	43d9      	mvns	r1, r3
 8008850:	887b      	ldrh	r3, [r7, #2]
 8008852:	400b      	ands	r3, r1
 8008854:	431a      	orrs	r2, r3
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	619a      	str	r2, [r3, #24]
}
 800885a:	bf00      	nop
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr
	...

08008868 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	4603      	mov	r3, r0
 8008870:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8008872:	4b08      	ldr	r3, [pc, #32]	; (8008894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008874:	695a      	ldr	r2, [r3, #20]
 8008876:	88fb      	ldrh	r3, [r7, #6]
 8008878:	4013      	ands	r3, r2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800887e:	4a05      	ldr	r2, [pc, #20]	; (8008894 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8008880:	88fb      	ldrh	r3, [r7, #6]
 8008882:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008884:	88fb      	ldrh	r3, [r7, #6]
 8008886:	4618      	mov	r0, r3
 8008888:	f7fd f910 	bl	8005aac <HAL_GPIO_EXTI_Callback>
  }
}
 800888c:	bf00      	nop
 800888e:	3708      	adds	r7, #8
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	40013c00 	.word	0x40013c00

08008898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d101      	bne.n	80088aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80088a6:	2301      	movs	r3, #1
 80088a8:	e12b      	b.n	8008b02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d106      	bne.n	80088c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80088be:	6878      	ldr	r0, [r7, #4]
 80088c0:	f7fd fb70 	bl	8005fa4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2224      	movs	r2, #36	; 0x24
 80088c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	681a      	ldr	r2, [r3, #0]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f022 0201 	bic.w	r2, r2, #1
 80088da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80088fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80088fc:	f002 faf2 	bl	800aee4 <HAL_RCC_GetPCLK1Freq>
 8008900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	4a81      	ldr	r2, [pc, #516]	; (8008b0c <HAL_I2C_Init+0x274>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d807      	bhi.n	800891c <HAL_I2C_Init+0x84>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4a80      	ldr	r2, [pc, #512]	; (8008b10 <HAL_I2C_Init+0x278>)
 8008910:	4293      	cmp	r3, r2
 8008912:	bf94      	ite	ls
 8008914:	2301      	movls	r3, #1
 8008916:	2300      	movhi	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	e006      	b.n	800892a <HAL_I2C_Init+0x92>
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4a7d      	ldr	r2, [pc, #500]	; (8008b14 <HAL_I2C_Init+0x27c>)
 8008920:	4293      	cmp	r3, r2
 8008922:	bf94      	ite	ls
 8008924:	2301      	movls	r3, #1
 8008926:	2300      	movhi	r3, #0
 8008928:	b2db      	uxtb	r3, r3
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e0e7      	b.n	8008b02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	4a78      	ldr	r2, [pc, #480]	; (8008b18 <HAL_I2C_Init+0x280>)
 8008936:	fba2 2303 	umull	r2, r3, r2, r3
 800893a:	0c9b      	lsrs	r3, r3, #18
 800893c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68ba      	ldr	r2, [r7, #8]
 800894e:	430a      	orrs	r2, r1
 8008950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6a1b      	ldr	r3, [r3, #32]
 8008958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	4a6a      	ldr	r2, [pc, #424]	; (8008b0c <HAL_I2C_Init+0x274>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d802      	bhi.n	800896c <HAL_I2C_Init+0xd4>
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	3301      	adds	r3, #1
 800896a:	e009      	b.n	8008980 <HAL_I2C_Init+0xe8>
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008972:	fb02 f303 	mul.w	r3, r2, r3
 8008976:	4a69      	ldr	r2, [pc, #420]	; (8008b1c <HAL_I2C_Init+0x284>)
 8008978:	fba2 2303 	umull	r2, r3, r2, r3
 800897c:	099b      	lsrs	r3, r3, #6
 800897e:	3301      	adds	r3, #1
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	6812      	ldr	r2, [r2, #0]
 8008984:	430b      	orrs	r3, r1
 8008986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	69db      	ldr	r3, [r3, #28]
 800898e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	495c      	ldr	r1, [pc, #368]	; (8008b0c <HAL_I2C_Init+0x274>)
 800899c:	428b      	cmp	r3, r1
 800899e:	d819      	bhi.n	80089d4 <HAL_I2C_Init+0x13c>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	1e59      	subs	r1, r3, #1
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	005b      	lsls	r3, r3, #1
 80089aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80089ae:	1c59      	adds	r1, r3, #1
 80089b0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80089b4:	400b      	ands	r3, r1
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d00a      	beq.n	80089d0 <HAL_I2C_Init+0x138>
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	1e59      	subs	r1, r3, #1
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	005b      	lsls	r3, r3, #1
 80089c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80089c8:	3301      	adds	r3, #1
 80089ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089ce:	e051      	b.n	8008a74 <HAL_I2C_Init+0x1dc>
 80089d0:	2304      	movs	r3, #4
 80089d2:	e04f      	b.n	8008a74 <HAL_I2C_Init+0x1dc>
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d111      	bne.n	8008a00 <HAL_I2C_Init+0x168>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	1e58      	subs	r0, r3, #1
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6859      	ldr	r1, [r3, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	005b      	lsls	r3, r3, #1
 80089e8:	440b      	add	r3, r1
 80089ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80089ee:	3301      	adds	r3, #1
 80089f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	bf0c      	ite	eq
 80089f8:	2301      	moveq	r3, #1
 80089fa:	2300      	movne	r3, #0
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	e012      	b.n	8008a26 <HAL_I2C_Init+0x18e>
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	1e58      	subs	r0, r3, #1
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6859      	ldr	r1, [r3, #4]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	0099      	lsls	r1, r3, #2
 8008a10:	440b      	add	r3, r1
 8008a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a16:	3301      	adds	r3, #1
 8008a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	bf0c      	ite	eq
 8008a20:	2301      	moveq	r3, #1
 8008a22:	2300      	movne	r3, #0
 8008a24:	b2db      	uxtb	r3, r3
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d001      	beq.n	8008a2e <HAL_I2C_Init+0x196>
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e022      	b.n	8008a74 <HAL_I2C_Init+0x1dc>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10e      	bne.n	8008a54 <HAL_I2C_Init+0x1bc>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	1e58      	subs	r0, r3, #1
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6859      	ldr	r1, [r3, #4]
 8008a3e:	460b      	mov	r3, r1
 8008a40:	005b      	lsls	r3, r3, #1
 8008a42:	440b      	add	r3, r1
 8008a44:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a48:	3301      	adds	r3, #1
 8008a4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a52:	e00f      	b.n	8008a74 <HAL_I2C_Init+0x1dc>
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	1e58      	subs	r0, r3, #1
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6859      	ldr	r1, [r3, #4]
 8008a5c:	460b      	mov	r3, r1
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	0099      	lsls	r1, r3, #2
 8008a64:	440b      	add	r3, r1
 8008a66:	fbb0 f3f3 	udiv	r3, r0, r3
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008a70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a74:	6879      	ldr	r1, [r7, #4]
 8008a76:	6809      	ldr	r1, [r1, #0]
 8008a78:	4313      	orrs	r3, r2
 8008a7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	69da      	ldr	r2, [r3, #28]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a1b      	ldr	r3, [r3, #32]
 8008a8e:	431a      	orrs	r2, r3
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	6911      	ldr	r1, [r2, #16]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	68d2      	ldr	r2, [r2, #12]
 8008aae:	4311      	orrs	r1, r2
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	6812      	ldr	r2, [r2, #0]
 8008ab4:	430b      	orrs	r3, r1
 8008ab6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695a      	ldr	r2, [r3, #20]
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	431a      	orrs	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	430a      	orrs	r2, r1
 8008ad2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	681a      	ldr	r2, [r3, #0]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f042 0201 	orr.w	r2, r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2200      	movs	r2, #0
 8008afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008b00:	2300      	movs	r3, #0
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	000186a0 	.word	0x000186a0
 8008b10:	001e847f 	.word	0x001e847f
 8008b14:	003d08ff 	.word	0x003d08ff
 8008b18:	431bde83 	.word	0x431bde83
 8008b1c:	10624dd3 	.word	0x10624dd3

08008b20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	607a      	str	r2, [r7, #4]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	460b      	mov	r3, r1
 8008b2e:	817b      	strh	r3, [r7, #10]
 8008b30:	4613      	mov	r3, r2
 8008b32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008b34:	f7fd fd1e 	bl	8006574 <HAL_GetTick>
 8008b38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b40:	b2db      	uxtb	r3, r3
 8008b42:	2b20      	cmp	r3, #32
 8008b44:	f040 80e0 	bne.w	8008d08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008b48:	697b      	ldr	r3, [r7, #20]
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	2319      	movs	r3, #25
 8008b4e:	2201      	movs	r2, #1
 8008b50:	4970      	ldr	r1, [pc, #448]	; (8008d14 <HAL_I2C_Master_Transmit+0x1f4>)
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f000 fc58 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d001      	beq.n	8008b62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008b5e:	2302      	movs	r3, #2
 8008b60:	e0d3      	b.n	8008d0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d101      	bne.n	8008b70 <HAL_I2C_Master_Transmit+0x50>
 8008b6c:	2302      	movs	r3, #2
 8008b6e:	e0cc      	b.n	8008d0a <HAL_I2C_Master_Transmit+0x1ea>
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2201      	movs	r2, #1
 8008b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d007      	beq.n	8008b96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	681a      	ldr	r2, [r3, #0]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f042 0201 	orr.w	r2, r2, #1
 8008b94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	681a      	ldr	r2, [r3, #0]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008ba4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2221      	movs	r2, #33	; 0x21
 8008baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	2210      	movs	r2, #16
 8008bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	687a      	ldr	r2, [r7, #4]
 8008bc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	893a      	ldrh	r2, [r7, #8]
 8008bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4a50      	ldr	r2, [pc, #320]	; (8008d18 <HAL_I2C_Master_Transmit+0x1f8>)
 8008bd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008bd8:	8979      	ldrh	r1, [r7, #10]
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	68f8      	ldr	r0, [r7, #12]
 8008be0:	f000 fac2 	bl	8009168 <I2C_MasterRequestWrite>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e08d      	b.n	8008d0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008bee:	2300      	movs	r3, #0
 8008bf0:	613b      	str	r3, [r7, #16]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	613b      	str	r3, [r7, #16]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	699b      	ldr	r3, [r3, #24]
 8008c00:	613b      	str	r3, [r7, #16]
 8008c02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008c04:	e066      	b.n	8008cd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	6a39      	ldr	r1, [r7, #32]
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fcd2 	bl	80095b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d00d      	beq.n	8008c32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1a:	2b04      	cmp	r3, #4
 8008c1c:	d107      	bne.n	8008c2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	681a      	ldr	r2, [r3, #0]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	e06b      	b.n	8008d0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	781a      	ldrb	r2, [r3, #0]
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	3b01      	subs	r3, #1
 8008c50:	b29a      	uxth	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c5a:	3b01      	subs	r3, #1
 8008c5c:	b29a      	uxth	r2, r3
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	695b      	ldr	r3, [r3, #20]
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b04      	cmp	r3, #4
 8008c6e:	d11b      	bne.n	8008ca8 <HAL_I2C_Master_Transmit+0x188>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d017      	beq.n	8008ca8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c7c:	781a      	ldrb	r2, [r3, #0]
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	3b01      	subs	r3, #1
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ca0:	3b01      	subs	r3, #1
 8008ca2:	b29a      	uxth	r2, r3
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	6a39      	ldr	r1, [r7, #32]
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fcc2 	bl	8009636 <I2C_WaitOnBTFFlagUntilTimeout>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00d      	beq.n	8008cd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d107      	bne.n	8008cd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e01a      	b.n	8008d0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d194      	bne.n	8008c06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2220      	movs	r2, #32
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	e000      	b.n	8008d0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008d08:	2302      	movs	r3, #2
  }
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3718      	adds	r7, #24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	00100002 	.word	0x00100002
 8008d18:	ffff0000 	.word	0xffff0000

08008d1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08c      	sub	sp, #48	; 0x30
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	607a      	str	r2, [r7, #4]
 8008d26:	461a      	mov	r2, r3
 8008d28:	460b      	mov	r3, r1
 8008d2a:	817b      	strh	r3, [r7, #10]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d30:	f7fd fc20 	bl	8006574 <HAL_GetTick>
 8008d34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b20      	cmp	r3, #32
 8008d40:	f040 820b 	bne.w	800915a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	2319      	movs	r3, #25
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	497c      	ldr	r1, [pc, #496]	; (8008f40 <HAL_I2C_Master_Receive+0x224>)
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 fb5a 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d001      	beq.n	8008d5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8008d5a:	2302      	movs	r3, #2
 8008d5c:	e1fe      	b.n	800915c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_I2C_Master_Receive+0x50>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e1f7      	b.n	800915c <HAL_I2C_Master_Receive+0x440>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f003 0301 	and.w	r3, r3, #1
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d007      	beq.n	8008d92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f042 0201 	orr.w	r2, r2, #1
 8008d90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008da0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2222      	movs	r2, #34	; 0x22
 8008da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2210      	movs	r2, #16
 8008dae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	893a      	ldrh	r2, [r7, #8]
 8008dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dc8:	b29a      	uxth	r2, r3
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4a5c      	ldr	r2, [pc, #368]	; (8008f44 <HAL_I2C_Master_Receive+0x228>)
 8008dd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008dd4:	8979      	ldrh	r1, [r7, #10]
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fa46 	bl	800926c <I2C_MasterRequestRead>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e1b8      	b.n	800915c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d113      	bne.n	8008e1a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008df2:	2300      	movs	r3, #0
 8008df4:	623b      	str	r3, [r7, #32]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	695b      	ldr	r3, [r3, #20]
 8008dfc:	623b      	str	r3, [r7, #32]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	623b      	str	r3, [r7, #32]
 8008e06:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	e18c      	b.n	8009134 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d11b      	bne.n	8008e5a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e32:	2300      	movs	r3, #0
 8008e34:	61fb      	str	r3, [r7, #28]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	61fb      	str	r3, [r7, #28]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	e16c      	b.n	8009134 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	d11b      	bne.n	8008e9a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681a      	ldr	r2, [r3, #0]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e70:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e80:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e82:	2300      	movs	r3, #0
 8008e84:	61bb      	str	r3, [r7, #24]
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	61bb      	str	r3, [r7, #24]
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	61bb      	str	r3, [r7, #24]
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	e14c      	b.n	8009134 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008ea8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008eaa:	2300      	movs	r3, #0
 8008eac:	617b      	str	r3, [r7, #20]
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	617b      	str	r3, [r7, #20]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	699b      	ldr	r3, [r3, #24]
 8008ebc:	617b      	str	r3, [r7, #20]
 8008ebe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8008ec0:	e138      	b.n	8009134 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec6:	2b03      	cmp	r3, #3
 8008ec8:	f200 80f1 	bhi.w	80090ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d123      	bne.n	8008f1c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f000 fbed 	bl	80096b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	e139      	b.n	800915c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	691a      	ldr	r2, [r3, #16]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef2:	b2d2      	uxtb	r2, r2
 8008ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efa:	1c5a      	adds	r2, r3, #1
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f04:	3b01      	subs	r3, #1
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f10:	b29b      	uxth	r3, r3
 8008f12:	3b01      	subs	r3, #1
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008f1a:	e10b      	b.n	8009134 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d14e      	bne.n	8008fc2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	9300      	str	r3, [sp, #0]
 8008f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	4906      	ldr	r1, [pc, #24]	; (8008f48 <HAL_I2C_Master_Receive+0x22c>)
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 fa6a 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008f34:	4603      	mov	r3, r0
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d008      	beq.n	8008f4c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e10e      	b.n	800915c <HAL_I2C_Master_Receive+0x440>
 8008f3e:	bf00      	nop
 8008f40:	00100002 	.word	0x00100002
 8008f44:	ffff0000 	.word	0xffff0000
 8008f48:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	691a      	ldr	r2, [r3, #16]
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6e:	1c5a      	adds	r2, r3, #1
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f78:	3b01      	subs	r3, #1
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	3b01      	subs	r3, #1
 8008f88:	b29a      	uxth	r2, r3
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	691a      	ldr	r2, [r3, #16]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	b2d2      	uxtb	r2, r2
 8008f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008faa:	3b01      	subs	r3, #1
 8008fac:	b29a      	uxth	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fb6:	b29b      	uxth	r3, r3
 8008fb8:	3b01      	subs	r3, #1
 8008fba:	b29a      	uxth	r2, r3
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008fc0:	e0b8      	b.n	8009134 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4966      	ldr	r1, [pc, #408]	; (8009164 <HAL_I2C_Master_Receive+0x448>)
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 fa1b 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e0bf      	b.n	800915c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	691a      	ldr	r2, [r3, #16]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	b2d2      	uxtb	r2, r2
 8008ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	1c5a      	adds	r2, r3, #1
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009008:	3b01      	subs	r3, #1
 800900a:	b29a      	uxth	r2, r3
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009014:	b29b      	uxth	r3, r3
 8009016:	3b01      	subs	r3, #1
 8009018:	b29a      	uxth	r2, r3
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800901e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009024:	2200      	movs	r2, #0
 8009026:	494f      	ldr	r1, [pc, #316]	; (8009164 <HAL_I2C_Master_Receive+0x448>)
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 f9ed 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d001      	beq.n	8009038 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8009034:	2301      	movs	r3, #1
 8009036:	e091      	b.n	800915c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009046:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	691a      	ldr	r2, [r3, #16]
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	b2d2      	uxtb	r2, r2
 8009054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009064:	3b01      	subs	r3, #1
 8009066:	b29a      	uxth	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009070:	b29b      	uxth	r3, r3
 8009072:	3b01      	subs	r3, #1
 8009074:	b29a      	uxth	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	691a      	ldr	r2, [r3, #16]
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009084:	b2d2      	uxtb	r2, r2
 8009086:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908c:	1c5a      	adds	r2, r3, #1
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009096:	3b01      	subs	r3, #1
 8009098:	b29a      	uxth	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a2:	b29b      	uxth	r3, r3
 80090a4:	3b01      	subs	r3, #1
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80090ac:	e042      	b.n	8009134 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090b2:	68f8      	ldr	r0, [r7, #12]
 80090b4:	f000 fb00 	bl	80096b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d001      	beq.n	80090c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80090be:	2301      	movs	r3, #1
 80090c0:	e04c      	b.n	800915c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	691a      	ldr	r2, [r3, #16]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090de:	3b01      	subs	r3, #1
 80090e0:	b29a      	uxth	r2, r3
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	3b01      	subs	r3, #1
 80090ee:	b29a      	uxth	r2, r3
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	695b      	ldr	r3, [r3, #20]
 80090fa:	f003 0304 	and.w	r3, r3, #4
 80090fe:	2b04      	cmp	r3, #4
 8009100:	d118      	bne.n	8009134 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	691a      	ldr	r2, [r3, #16]
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910c:	b2d2      	uxtb	r2, r2
 800910e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911e:	3b01      	subs	r3, #1
 8009120:	b29a      	uxth	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800912a:	b29b      	uxth	r3, r3
 800912c:	3b01      	subs	r3, #1
 800912e:	b29a      	uxth	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009138:	2b00      	cmp	r3, #0
 800913a:	f47f aec2 	bne.w	8008ec2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	2220      	movs	r2, #32
 8009142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2200      	movs	r2, #0
 800914a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	e000      	b.n	800915c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800915a:	2302      	movs	r3, #2
  }
}
 800915c:	4618      	mov	r0, r3
 800915e:	3728      	adds	r7, #40	; 0x28
 8009160:	46bd      	mov	sp, r7
 8009162:	bd80      	pop	{r7, pc}
 8009164:	00010004 	.word	0x00010004

08009168 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b088      	sub	sp, #32
 800916c:	af02      	add	r7, sp, #8
 800916e:	60f8      	str	r0, [r7, #12]
 8009170:	607a      	str	r2, [r7, #4]
 8009172:	603b      	str	r3, [r7, #0]
 8009174:	460b      	mov	r3, r1
 8009176:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800917c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2b08      	cmp	r3, #8
 8009182:	d006      	beq.n	8009192 <I2C_MasterRequestWrite+0x2a>
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d003      	beq.n	8009192 <I2C_MasterRequestWrite+0x2a>
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009190:	d108      	bne.n	80091a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091a0:	601a      	str	r2, [r3, #0]
 80091a2:	e00b      	b.n	80091bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091a8:	2b12      	cmp	r3, #18
 80091aa:	d107      	bne.n	80091bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80091ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	9300      	str	r3, [sp, #0]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80091c8:	68f8      	ldr	r0, [r7, #12]
 80091ca:	f000 f91d 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 80091ce:	4603      	mov	r3, r0
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00d      	beq.n	80091f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80091e2:	d103      	bne.n	80091ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80091ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80091ec:	2303      	movs	r3, #3
 80091ee:	e035      	b.n	800925c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80091f8:	d108      	bne.n	800920c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80091fa:	897b      	ldrh	r3, [r7, #10]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009208:	611a      	str	r2, [r3, #16]
 800920a:	e01b      	b.n	8009244 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800920c:	897b      	ldrh	r3, [r7, #10]
 800920e:	11db      	asrs	r3, r3, #7
 8009210:	b2db      	uxtb	r3, r3
 8009212:	f003 0306 	and.w	r3, r3, #6
 8009216:	b2db      	uxtb	r3, r3
 8009218:	f063 030f 	orn	r3, r3, #15
 800921c:	b2da      	uxtb	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	490e      	ldr	r1, [pc, #56]	; (8009264 <I2C_MasterRequestWrite+0xfc>)
 800922a:	68f8      	ldr	r0, [r7, #12]
 800922c:	f000 f943 	bl	80094b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009230:	4603      	mov	r3, r0
 8009232:	2b00      	cmp	r3, #0
 8009234:	d001      	beq.n	800923a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e010      	b.n	800925c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800923a:	897b      	ldrh	r3, [r7, #10]
 800923c:	b2da      	uxtb	r2, r3
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	687a      	ldr	r2, [r7, #4]
 8009248:	4907      	ldr	r1, [pc, #28]	; (8009268 <I2C_MasterRequestWrite+0x100>)
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 f933 	bl	80094b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009250:	4603      	mov	r3, r0
 8009252:	2b00      	cmp	r3, #0
 8009254:	d001      	beq.n	800925a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009256:	2301      	movs	r3, #1
 8009258:	e000      	b.n	800925c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	3718      	adds	r7, #24
 8009260:	46bd      	mov	sp, r7
 8009262:	bd80      	pop	{r7, pc}
 8009264:	00010008 	.word	0x00010008
 8009268:	00010002 	.word	0x00010002

0800926c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b088      	sub	sp, #32
 8009270:	af02      	add	r7, sp, #8
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	607a      	str	r2, [r7, #4]
 8009276:	603b      	str	r3, [r7, #0]
 8009278:	460b      	mov	r3, r1
 800927a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009280:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681a      	ldr	r2, [r3, #0]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009290:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009292:	697b      	ldr	r3, [r7, #20]
 8009294:	2b08      	cmp	r3, #8
 8009296:	d006      	beq.n	80092a6 <I2C_MasterRequestRead+0x3a>
 8009298:	697b      	ldr	r3, [r7, #20]
 800929a:	2b01      	cmp	r3, #1
 800929c:	d003      	beq.n	80092a6 <I2C_MasterRequestRead+0x3a>
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80092a4:	d108      	bne.n	80092b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	e00b      	b.n	80092d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092bc:	2b11      	cmp	r3, #17
 80092be:	d107      	bne.n	80092d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80092ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80092dc:	68f8      	ldr	r0, [r7, #12]
 80092de:	f000 f893 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d00d      	beq.n	8009304 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092f6:	d103      	bne.n	8009300 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009300:	2303      	movs	r3, #3
 8009302:	e079      	b.n	80093f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	691b      	ldr	r3, [r3, #16]
 8009308:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800930c:	d108      	bne.n	8009320 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800930e:	897b      	ldrh	r3, [r7, #10]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	f043 0301 	orr.w	r3, r3, #1
 8009316:	b2da      	uxtb	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	611a      	str	r2, [r3, #16]
 800931e:	e05f      	b.n	80093e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009320:	897b      	ldrh	r3, [r7, #10]
 8009322:	11db      	asrs	r3, r3, #7
 8009324:	b2db      	uxtb	r3, r3
 8009326:	f003 0306 	and.w	r3, r3, #6
 800932a:	b2db      	uxtb	r3, r3
 800932c:	f063 030f 	orn	r3, r3, #15
 8009330:	b2da      	uxtb	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	687a      	ldr	r2, [r7, #4]
 800933c:	4930      	ldr	r1, [pc, #192]	; (8009400 <I2C_MasterRequestRead+0x194>)
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	f000 f8b9 	bl	80094b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009344:	4603      	mov	r3, r0
 8009346:	2b00      	cmp	r3, #0
 8009348:	d001      	beq.n	800934e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800934a:	2301      	movs	r3, #1
 800934c:	e054      	b.n	80093f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800934e:	897b      	ldrh	r3, [r7, #10]
 8009350:	b2da      	uxtb	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	4929      	ldr	r1, [pc, #164]	; (8009404 <I2C_MasterRequestRead+0x198>)
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	f000 f8a9 	bl	80094b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009364:	4603      	mov	r3, r0
 8009366:	2b00      	cmp	r3, #0
 8009368:	d001      	beq.n	800936e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800936a:	2301      	movs	r3, #1
 800936c:	e044      	b.n	80093f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800936e:	2300      	movs	r3, #0
 8009370:	613b      	str	r3, [r7, #16]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	613b      	str	r3, [r7, #16]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	613b      	str	r3, [r7, #16]
 8009382:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009392:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	9300      	str	r3, [sp, #0]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 f831 	bl	8009408 <I2C_WaitOnFlagUntilTimeout>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00d      	beq.n	80093c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ba:	d103      	bne.n	80093c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e017      	b.n	80093f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80093c8:	897b      	ldrh	r3, [r7, #10]
 80093ca:	11db      	asrs	r3, r3, #7
 80093cc:	b2db      	uxtb	r3, r3
 80093ce:	f003 0306 	and.w	r3, r3, #6
 80093d2:	b2db      	uxtb	r3, r3
 80093d4:	f063 030e 	orn	r3, r3, #14
 80093d8:	b2da      	uxtb	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	4907      	ldr	r1, [pc, #28]	; (8009404 <I2C_MasterRequestRead+0x198>)
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	f000 f865 	bl	80094b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d001      	beq.n	80093f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80093f2:	2301      	movs	r3, #1
 80093f4:	e000      	b.n	80093f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80093f6:	2300      	movs	r3, #0
}
 80093f8:	4618      	mov	r0, r3
 80093fa:	3718      	adds	r7, #24
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	00010008 	.word	0x00010008
 8009404:	00010002 	.word	0x00010002

08009408 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b084      	sub	sp, #16
 800940c:	af00      	add	r7, sp, #0
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	603b      	str	r3, [r7, #0]
 8009414:	4613      	mov	r3, r2
 8009416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009418:	e025      	b.n	8009466 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009420:	d021      	beq.n	8009466 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009422:	f7fd f8a7 	bl	8006574 <HAL_GetTick>
 8009426:	4602      	mov	r2, r0
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	683a      	ldr	r2, [r7, #0]
 800942e:	429a      	cmp	r2, r3
 8009430:	d302      	bcc.n	8009438 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d116      	bne.n	8009466 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2220      	movs	r2, #32
 8009442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009452:	f043 0220 	orr.w	r2, r3, #32
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e023      	b.n	80094ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	0c1b      	lsrs	r3, r3, #16
 800946a:	b2db      	uxtb	r3, r3
 800946c:	2b01      	cmp	r3, #1
 800946e:	d10d      	bne.n	800948c <I2C_WaitOnFlagUntilTimeout+0x84>
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	43da      	mvns	r2, r3
 8009478:	68bb      	ldr	r3, [r7, #8]
 800947a:	4013      	ands	r3, r2
 800947c:	b29b      	uxth	r3, r3
 800947e:	2b00      	cmp	r3, #0
 8009480:	bf0c      	ite	eq
 8009482:	2301      	moveq	r3, #1
 8009484:	2300      	movne	r3, #0
 8009486:	b2db      	uxtb	r3, r3
 8009488:	461a      	mov	r2, r3
 800948a:	e00c      	b.n	80094a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	699b      	ldr	r3, [r3, #24]
 8009492:	43da      	mvns	r2, r3
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	4013      	ands	r3, r2
 8009498:	b29b      	uxth	r3, r3
 800949a:	2b00      	cmp	r3, #0
 800949c:	bf0c      	ite	eq
 800949e:	2301      	moveq	r3, #1
 80094a0:	2300      	movne	r3, #0
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	461a      	mov	r2, r3
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d0b6      	beq.n	800941a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80094ac:	2300      	movs	r3, #0
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	3710      	adds	r7, #16
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b084      	sub	sp, #16
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	60f8      	str	r0, [r7, #12]
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
 80094c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80094c4:	e051      	b.n	800956a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80094d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d4:	d123      	bne.n	800951e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80094ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2220      	movs	r2, #32
 80094fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2200      	movs	r2, #0
 8009502:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950a:	f043 0204 	orr.w	r2, r3, #4
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e046      	b.n	80095ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009524:	d021      	beq.n	800956a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009526:	f7fd f825 	bl	8006574 <HAL_GetTick>
 800952a:	4602      	mov	r2, r0
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	429a      	cmp	r2, r3
 8009534:	d302      	bcc.n	800953c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d116      	bne.n	800956a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009556:	f043 0220 	orr.w	r2, r3, #32
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	e020      	b.n	80095ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	0c1b      	lsrs	r3, r3, #16
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b01      	cmp	r3, #1
 8009572:	d10c      	bne.n	800958e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	43da      	mvns	r2, r3
 800957c:	68bb      	ldr	r3, [r7, #8]
 800957e:	4013      	ands	r3, r2
 8009580:	b29b      	uxth	r3, r3
 8009582:	2b00      	cmp	r3, #0
 8009584:	bf14      	ite	ne
 8009586:	2301      	movne	r3, #1
 8009588:	2300      	moveq	r3, #0
 800958a:	b2db      	uxtb	r3, r3
 800958c:	e00b      	b.n	80095a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	43da      	mvns	r2, r3
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	4013      	ands	r3, r2
 800959a:	b29b      	uxth	r3, r3
 800959c:	2b00      	cmp	r3, #0
 800959e:	bf14      	ite	ne
 80095a0:	2301      	movne	r3, #1
 80095a2:	2300      	moveq	r3, #0
 80095a4:	b2db      	uxtb	r3, r3
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d18d      	bne.n	80094c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b084      	sub	sp, #16
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80095c0:	e02d      	b.n	800961e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80095c2:	68f8      	ldr	r0, [r7, #12]
 80095c4:	f000 f8ce 	bl	8009764 <I2C_IsAcknowledgeFailed>
 80095c8:	4603      	mov	r3, r0
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d001      	beq.n	80095d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80095ce:	2301      	movs	r3, #1
 80095d0:	e02d      	b.n	800962e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d8:	d021      	beq.n	800961e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095da:	f7fc ffcb 	bl	8006574 <HAL_GetTick>
 80095de:	4602      	mov	r2, r0
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	1ad3      	subs	r3, r2, r3
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	429a      	cmp	r2, r3
 80095e8:	d302      	bcc.n	80095f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d116      	bne.n	800961e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2200      	movs	r2, #0
 80095f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2220      	movs	r2, #32
 80095fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960a:	f043 0220 	orr.w	r2, r3, #32
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800961a:	2301      	movs	r3, #1
 800961c:	e007      	b.n	800962e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009628:	2b80      	cmp	r3, #128	; 0x80
 800962a:	d1ca      	bne.n	80095c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3710      	adds	r7, #16
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b084      	sub	sp, #16
 800963a:	af00      	add	r7, sp, #0
 800963c:	60f8      	str	r0, [r7, #12]
 800963e:	60b9      	str	r1, [r7, #8]
 8009640:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009642:	e02d      	b.n	80096a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 f88d 	bl	8009764 <I2C_IsAcknowledgeFailed>
 800964a:	4603      	mov	r3, r0
 800964c:	2b00      	cmp	r3, #0
 800964e:	d001      	beq.n	8009654 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009650:	2301      	movs	r3, #1
 8009652:	e02d      	b.n	80096b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009654:	68bb      	ldr	r3, [r7, #8]
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800965a:	d021      	beq.n	80096a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800965c:	f7fc ff8a 	bl	8006574 <HAL_GetTick>
 8009660:	4602      	mov	r2, r0
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	68ba      	ldr	r2, [r7, #8]
 8009668:	429a      	cmp	r2, r3
 800966a:	d302      	bcc.n	8009672 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d116      	bne.n	80096a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2200      	movs	r2, #0
 8009676:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	2220      	movs	r2, #32
 800967c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800968c:	f043 0220 	orr.w	r2, r3, #32
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	2200      	movs	r2, #0
 8009698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e007      	b.n	80096b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	f003 0304 	and.w	r3, r3, #4
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	d1ca      	bne.n	8009644 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3710      	adds	r7, #16
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b084      	sub	sp, #16
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80096c4:	e042      	b.n	800974c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	695b      	ldr	r3, [r3, #20]
 80096cc:	f003 0310 	and.w	r3, r3, #16
 80096d0:	2b10      	cmp	r3, #16
 80096d2:	d119      	bne.n	8009708 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f06f 0210 	mvn.w	r2, #16
 80096dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2220      	movs	r2, #32
 80096e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2200      	movs	r2, #0
 80096f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2200      	movs	r2, #0
 8009700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e029      	b.n	800975c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009708:	f7fc ff34 	bl	8006574 <HAL_GetTick>
 800970c:	4602      	mov	r2, r0
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	1ad3      	subs	r3, r2, r3
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	429a      	cmp	r2, r3
 8009716:	d302      	bcc.n	800971e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d116      	bne.n	800974c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	2220      	movs	r2, #32
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009738:	f043 0220 	orr.w	r2, r3, #32
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	2200      	movs	r2, #0
 8009744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	e007      	b.n	800975c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	695b      	ldr	r3, [r3, #20]
 8009752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009756:	2b40      	cmp	r3, #64	; 0x40
 8009758:	d1b5      	bne.n	80096c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	695b      	ldr	r3, [r3, #20]
 8009772:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009776:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800977a:	d11b      	bne.n	80097b4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009784:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2200      	movs	r2, #0
 8009798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	f043 0204 	orr.w	r2, r3, #4
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80097b0:	2301      	movs	r3, #1
 80097b2:	e000      	b.n	80097b6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	370c      	adds	r7, #12
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80097c2:	b580      	push	{r7, lr}
 80097c4:	b084      	sub	sp, #16
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d101      	bne.n	80097d4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80097d0:	2301      	movs	r3, #1
 80097d2:	e034      	b.n	800983e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80097dc:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f245 5255 	movw	r2, #21845	; 0x5555
 80097e6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	687a      	ldr	r2, [r7, #4]
 80097ee:	6852      	ldr	r2, [r2, #4]
 80097f0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	6892      	ldr	r2, [r2, #8]
 80097fa:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 80097fc:	f7fc feba 	bl	8006574 <HAL_GetTick>
 8009800:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009802:	e00f      	b.n	8009824 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8009804:	f7fc feb6 	bl	8006574 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	2b31      	cmp	r3, #49	; 0x31
 8009810:	d908      	bls.n	8009824 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	f003 0303 	and.w	r3, r3, #3
 800981c:	2b00      	cmp	r3, #0
 800981e:	d001      	beq.n	8009824 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8009820:	2303      	movs	r3, #3
 8009822:	e00c      	b.n	800983e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d1e8      	bne.n	8009804 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800983a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800983c:	2300      	movs	r3, #0
}
 800983e:	4618      	mov	r0, r3
 8009840:	3710      	adds	r7, #16
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}

08009846 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8009846:	b480      	push	{r7}
 8009848:	b083      	sub	sp, #12
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8009856:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	370c      	adds	r7, #12
 800985e:	46bd      	mov	sp, r7
 8009860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009864:	4770      	bx	lr

08009866 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009866:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009868:	b08f      	sub	sp, #60	; 0x3c
 800986a:	af0a      	add	r7, sp, #40	; 0x28
 800986c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d101      	bne.n	8009878 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e116      	b.n	8009aa6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b00      	cmp	r3, #0
 8009888:	d106      	bne.n	8009898 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f00c fe2e 	bl	80164f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2203      	movs	r2, #3
 800989c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d102      	bne.n	80098b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	4618      	mov	r0, r3
 80098b8:	f005 f92b 	bl	800eb12 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	603b      	str	r3, [r7, #0]
 80098c2:	687e      	ldr	r6, [r7, #4]
 80098c4:	466d      	mov	r5, sp
 80098c6:	f106 0410 	add.w	r4, r6, #16
 80098ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80098d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80098d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80098d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80098da:	1d33      	adds	r3, r6, #4
 80098dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80098de:	6838      	ldr	r0, [r7, #0]
 80098e0:	f005 f802 	bl	800e8e8 <USB_CoreInit>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d005      	beq.n	80098f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2202      	movs	r2, #2
 80098ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e0d7      	b.n	8009aa6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	2100      	movs	r1, #0
 80098fc:	4618      	mov	r0, r3
 80098fe:	f005 f919 	bl	800eb34 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009902:	2300      	movs	r3, #0
 8009904:	73fb      	strb	r3, [r7, #15]
 8009906:	e04a      	b.n	800999e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009908:	7bfa      	ldrb	r2, [r7, #15]
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	4613      	mov	r3, r2
 800990e:	00db      	lsls	r3, r3, #3
 8009910:	1a9b      	subs	r3, r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	440b      	add	r3, r1
 8009916:	333d      	adds	r3, #61	; 0x3d
 8009918:	2201      	movs	r2, #1
 800991a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800991c:	7bfa      	ldrb	r2, [r7, #15]
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	4613      	mov	r3, r2
 8009922:	00db      	lsls	r3, r3, #3
 8009924:	1a9b      	subs	r3, r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	440b      	add	r3, r1
 800992a:	333c      	adds	r3, #60	; 0x3c
 800992c:	7bfa      	ldrb	r2, [r7, #15]
 800992e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009930:	7bfa      	ldrb	r2, [r7, #15]
 8009932:	7bfb      	ldrb	r3, [r7, #15]
 8009934:	b298      	uxth	r0, r3
 8009936:	6879      	ldr	r1, [r7, #4]
 8009938:	4613      	mov	r3, r2
 800993a:	00db      	lsls	r3, r3, #3
 800993c:	1a9b      	subs	r3, r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	440b      	add	r3, r1
 8009942:	3342      	adds	r3, #66	; 0x42
 8009944:	4602      	mov	r2, r0
 8009946:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009948:	7bfa      	ldrb	r2, [r7, #15]
 800994a:	6879      	ldr	r1, [r7, #4]
 800994c:	4613      	mov	r3, r2
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	1a9b      	subs	r3, r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	440b      	add	r3, r1
 8009956:	333f      	adds	r3, #63	; 0x3f
 8009958:	2200      	movs	r2, #0
 800995a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800995c:	7bfa      	ldrb	r2, [r7, #15]
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	4613      	mov	r3, r2
 8009962:	00db      	lsls	r3, r3, #3
 8009964:	1a9b      	subs	r3, r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	440b      	add	r3, r1
 800996a:	3344      	adds	r3, #68	; 0x44
 800996c:	2200      	movs	r2, #0
 800996e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009970:	7bfa      	ldrb	r2, [r7, #15]
 8009972:	6879      	ldr	r1, [r7, #4]
 8009974:	4613      	mov	r3, r2
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	1a9b      	subs	r3, r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	440b      	add	r3, r1
 800997e:	3348      	adds	r3, #72	; 0x48
 8009980:	2200      	movs	r2, #0
 8009982:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009984:	7bfa      	ldrb	r2, [r7, #15]
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4613      	mov	r3, r2
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	440b      	add	r3, r1
 8009992:	3350      	adds	r3, #80	; 0x50
 8009994:	2200      	movs	r2, #0
 8009996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	3301      	adds	r3, #1
 800999c:	73fb      	strb	r3, [r7, #15]
 800999e:	7bfa      	ldrb	r2, [r7, #15]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d3af      	bcc.n	8009908 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80099a8:	2300      	movs	r3, #0
 80099aa:	73fb      	strb	r3, [r7, #15]
 80099ac:	e044      	b.n	8009a38 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80099ae:	7bfa      	ldrb	r2, [r7, #15]
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	4613      	mov	r3, r2
 80099b4:	00db      	lsls	r3, r3, #3
 80099b6:	1a9b      	subs	r3, r3, r2
 80099b8:	009b      	lsls	r3, r3, #2
 80099ba:	440b      	add	r3, r1
 80099bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80099c0:	2200      	movs	r2, #0
 80099c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80099c4:	7bfa      	ldrb	r2, [r7, #15]
 80099c6:	6879      	ldr	r1, [r7, #4]
 80099c8:	4613      	mov	r3, r2
 80099ca:	00db      	lsls	r3, r3, #3
 80099cc:	1a9b      	subs	r3, r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	440b      	add	r3, r1
 80099d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80099d6:	7bfa      	ldrb	r2, [r7, #15]
 80099d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80099da:	7bfa      	ldrb	r2, [r7, #15]
 80099dc:	6879      	ldr	r1, [r7, #4]
 80099de:	4613      	mov	r3, r2
 80099e0:	00db      	lsls	r3, r3, #3
 80099e2:	1a9b      	subs	r3, r3, r2
 80099e4:	009b      	lsls	r3, r3, #2
 80099e6:	440b      	add	r3, r1
 80099e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80099ec:	2200      	movs	r2, #0
 80099ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80099f0:	7bfa      	ldrb	r2, [r7, #15]
 80099f2:	6879      	ldr	r1, [r7, #4]
 80099f4:	4613      	mov	r3, r2
 80099f6:	00db      	lsls	r3, r3, #3
 80099f8:	1a9b      	subs	r3, r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	440b      	add	r3, r1
 80099fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a02:	2200      	movs	r2, #0
 8009a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009a06:	7bfa      	ldrb	r2, [r7, #15]
 8009a08:	6879      	ldr	r1, [r7, #4]
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	1a9b      	subs	r3, r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	440b      	add	r3, r1
 8009a14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a18:	2200      	movs	r2, #0
 8009a1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009a1c:	7bfa      	ldrb	r2, [r7, #15]
 8009a1e:	6879      	ldr	r1, [r7, #4]
 8009a20:	4613      	mov	r3, r2
 8009a22:	00db      	lsls	r3, r3, #3
 8009a24:	1a9b      	subs	r3, r3, r2
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	440b      	add	r3, r1
 8009a2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009a2e:	2200      	movs	r2, #0
 8009a30:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009a32:	7bfb      	ldrb	r3, [r7, #15]
 8009a34:	3301      	adds	r3, #1
 8009a36:	73fb      	strb	r3, [r7, #15]
 8009a38:	7bfa      	ldrb	r2, [r7, #15]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	685b      	ldr	r3, [r3, #4]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d3b5      	bcc.n	80099ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	603b      	str	r3, [r7, #0]
 8009a48:	687e      	ldr	r6, [r7, #4]
 8009a4a:	466d      	mov	r5, sp
 8009a4c:	f106 0410 	add.w	r4, r6, #16
 8009a50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a52:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a54:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a56:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009a58:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009a5c:	e885 0003 	stmia.w	r5, {r0, r1}
 8009a60:	1d33      	adds	r3, r6, #4
 8009a62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009a64:	6838      	ldr	r0, [r7, #0]
 8009a66:	f005 f8b1 	bl	800ebcc <USB_DevInit>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d005      	beq.n	8009a7c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e014      	b.n	8009aa6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d102      	bne.n	8009a9a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f001 f8bf 	bl	800ac18 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f006 f920 	bl	800fce4 <USB_DevDisconnect>

  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009aae <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b084      	sub	sp, #16
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d101      	bne.n	8009aca <HAL_PCD_Start+0x1c>
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	e020      	b.n	8009b0c <HAL_PCD_Start+0x5e>
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d109      	bne.n	8009aee <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	d005      	beq.n	8009aee <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ae6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f004 fffc 	bl	800eaf0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	4618      	mov	r0, r3
 8009afe:	f006 f8d0 	bl	800fca2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009b0a:	2300      	movs	r3, #0
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009b14:	b590      	push	{r4, r7, lr}
 8009b16:	b08d      	sub	sp, #52	; 0x34
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b22:	6a3b      	ldr	r3, [r7, #32]
 8009b24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f006 f98e 	bl	800fe4c <USB_GetMode>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f040 83ca 	bne.w	800a2cc <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f006 f8f2 	bl	800fd26 <USB_ReadInterrupts>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 83c0 	beq.w	800a2ca <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f006 f8e9 	bl	800fd26 <USB_ReadInterrupts>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f003 0302 	and.w	r3, r3, #2
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d107      	bne.n	8009b6e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	695a      	ldr	r2, [r3, #20]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f002 0202 	and.w	r2, r2, #2
 8009b6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4618      	mov	r0, r3
 8009b74:	f006 f8d7 	bl	800fd26 <USB_ReadInterrupts>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	f003 0310 	and.w	r3, r3, #16
 8009b7e:	2b10      	cmp	r3, #16
 8009b80:	d161      	bne.n	8009c46 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	699a      	ldr	r2, [r3, #24]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f022 0210 	bic.w	r2, r2, #16
 8009b90:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8009b92:	6a3b      	ldr	r3, [r7, #32]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	f003 020f 	and.w	r2, r3, #15
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	00db      	lsls	r3, r3, #3
 8009ba2:	1a9b      	subs	r3, r3, r2
 8009ba4:	009b      	lsls	r3, r3, #2
 8009ba6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	4413      	add	r3, r2
 8009bae:	3304      	adds	r3, #4
 8009bb0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009bb2:	69bb      	ldr	r3, [r7, #24]
 8009bb4:	0c5b      	lsrs	r3, r3, #17
 8009bb6:	f003 030f 	and.w	r3, r3, #15
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d124      	bne.n	8009c08 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009bbe:	69ba      	ldr	r2, [r7, #24]
 8009bc0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d035      	beq.n	8009c36 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009bce:	69bb      	ldr	r3, [r7, #24]
 8009bd0:	091b      	lsrs	r3, r3, #4
 8009bd2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009bd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	461a      	mov	r2, r3
 8009bdc:	6a38      	ldr	r0, [r7, #32]
 8009bde:	f005 ff0e 	bl	800f9fe <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009be2:	697b      	ldr	r3, [r7, #20]
 8009be4:	68da      	ldr	r2, [r3, #12]
 8009be6:	69bb      	ldr	r3, [r7, #24]
 8009be8:	091b      	lsrs	r3, r3, #4
 8009bea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009bee:	441a      	add	r2, r3
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	699a      	ldr	r2, [r3, #24]
 8009bf8:	69bb      	ldr	r3, [r7, #24]
 8009bfa:	091b      	lsrs	r3, r3, #4
 8009bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c00:	441a      	add	r2, r3
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	619a      	str	r2, [r3, #24]
 8009c06:	e016      	b.n	8009c36 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	0c5b      	lsrs	r3, r3, #17
 8009c0c:	f003 030f 	and.w	r3, r3, #15
 8009c10:	2b06      	cmp	r3, #6
 8009c12:	d110      	bne.n	8009c36 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c1a:	2208      	movs	r2, #8
 8009c1c:	4619      	mov	r1, r3
 8009c1e:	6a38      	ldr	r0, [r7, #32]
 8009c20:	f005 feed 	bl	800f9fe <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	699a      	ldr	r2, [r3, #24]
 8009c28:	69bb      	ldr	r3, [r7, #24]
 8009c2a:	091b      	lsrs	r3, r3, #4
 8009c2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009c30:	441a      	add	r2, r3
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	699a      	ldr	r2, [r3, #24]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 0210 	orr.w	r2, r2, #16
 8009c44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	f006 f86b 	bl	800fd26 <USB_ReadInterrupts>
 8009c50:	4603      	mov	r3, r0
 8009c52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009c5a:	d16e      	bne.n	8009d3a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f006 f871 	bl	800fd4c <USB_ReadDevAllOutEpInterrupt>
 8009c6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8009c6c:	e062      	b.n	8009d34 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c70:	f003 0301 	and.w	r3, r3, #1
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d057      	beq.n	8009d28 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	4611      	mov	r1, r2
 8009c82:	4618      	mov	r0, r3
 8009c84:	f006 f896 	bl	800fdb4 <USB_ReadDevOutEPInterrupt>
 8009c88:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009c8a:	693b      	ldr	r3, [r7, #16]
 8009c8c:	f003 0301 	and.w	r3, r3, #1
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00c      	beq.n	8009cae <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009ca6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fe0b 	bl	800a8c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00c      	beq.n	8009cd2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc4:	461a      	mov	r2, r3
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009cca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 ff05 	bl	800aadc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f003 0310 	and.w	r3, r3, #16
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d008      	beq.n	8009cee <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	015a      	lsls	r2, r3, #5
 8009ce0:	69fb      	ldr	r3, [r7, #28]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ce8:	461a      	mov	r2, r3
 8009cea:	2310      	movs	r3, #16
 8009cec:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	f003 0320 	and.w	r3, r3, #32
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d008      	beq.n	8009d0a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d04:	461a      	mov	r2, r3
 8009d06:	2320      	movs	r3, #32
 8009d08:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009d0a:	693b      	ldr	r3, [r7, #16]
 8009d0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d009      	beq.n	8009d28 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d20:	461a      	mov	r2, r3
 8009d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d26:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009d2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d30:	085b      	lsrs	r3, r3, #1
 8009d32:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d199      	bne.n	8009c6e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f005 fff1 	bl	800fd26 <USB_ReadInterrupts>
 8009d44:	4603      	mov	r3, r0
 8009d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d4e:	f040 80c0 	bne.w	8009ed2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f006 f812 	bl	800fd80 <USB_ReadDevAllInEpInterrupt>
 8009d5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009d62:	e0b2      	b.n	8009eca <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d66:	f003 0301 	and.w	r3, r3, #1
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 80a7 	beq.w	8009ebe <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	4611      	mov	r1, r2
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f006 f838 	bl	800fdf0 <USB_ReadDevInEPInterrupt>
 8009d80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	f003 0301 	and.w	r3, r3, #1
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d057      	beq.n	8009e3c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	f003 030f 	and.w	r3, r3, #15
 8009d92:	2201      	movs	r2, #1
 8009d94:	fa02 f303 	lsl.w	r3, r2, r3
 8009d98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009d9a:	69fb      	ldr	r3, [r7, #28]
 8009d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009da0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	43db      	mvns	r3, r3
 8009da6:	69f9      	ldr	r1, [r7, #28]
 8009da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dac:	4013      	ands	r3, r2
 8009dae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	69fb      	ldr	r3, [r7, #28]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	691b      	ldr	r3, [r3, #16]
 8009dc6:	2b01      	cmp	r3, #1
 8009dc8:	d132      	bne.n	8009e30 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009dca:	6879      	ldr	r1, [r7, #4]
 8009dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009dce:	4613      	mov	r3, r2
 8009dd0:	00db      	lsls	r3, r3, #3
 8009dd2:	1a9b      	subs	r3, r3, r2
 8009dd4:	009b      	lsls	r3, r3, #2
 8009dd6:	440b      	add	r3, r1
 8009dd8:	3348      	adds	r3, #72	; 0x48
 8009dda:	6819      	ldr	r1, [r3, #0]
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009de0:	4613      	mov	r3, r2
 8009de2:	00db      	lsls	r3, r3, #3
 8009de4:	1a9b      	subs	r3, r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	4403      	add	r3, r0
 8009dea:	3344      	adds	r3, #68	; 0x44
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4419      	add	r1, r3
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009df4:	4613      	mov	r3, r2
 8009df6:	00db      	lsls	r3, r3, #3
 8009df8:	1a9b      	subs	r3, r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4403      	add	r3, r0
 8009dfe:	3348      	adds	r3, #72	; 0x48
 8009e00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d113      	bne.n	8009e30 <HAL_PCD_IRQHandler+0x31c>
 8009e08:	6879      	ldr	r1, [r7, #4]
 8009e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e0c:	4613      	mov	r3, r2
 8009e0e:	00db      	lsls	r3, r3, #3
 8009e10:	1a9b      	subs	r3, r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	440b      	add	r3, r1
 8009e16:	3350      	adds	r3, #80	; 0x50
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d108      	bne.n	8009e30 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009e28:	461a      	mov	r2, r3
 8009e2a:	2101      	movs	r1, #1
 8009e2c:	f006 f840 	bl	800feb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	b2db      	uxtb	r3, r3
 8009e34:	4619      	mov	r1, r3
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f00c fbeb 	bl	8016612 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	f003 0308 	and.w	r3, r3, #8
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d008      	beq.n	8009e58 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	015a      	lsls	r2, r3, #5
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	4413      	add	r3, r2
 8009e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e52:	461a      	mov	r2, r3
 8009e54:	2308      	movs	r3, #8
 8009e56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f003 0310 	and.w	r3, r3, #16
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d008      	beq.n	8009e74 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	015a      	lsls	r2, r3, #5
 8009e66:	69fb      	ldr	r3, [r7, #28]
 8009e68:	4413      	add	r3, r2
 8009e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e6e:	461a      	mov	r2, r3
 8009e70:	2310      	movs	r3, #16
 8009e72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009e74:	693b      	ldr	r3, [r7, #16]
 8009e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d008      	beq.n	8009e90 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	015a      	lsls	r2, r3, #5
 8009e82:	69fb      	ldr	r3, [r7, #28]
 8009e84:	4413      	add	r3, r2
 8009e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	2340      	movs	r3, #64	; 0x40
 8009e8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d008      	beq.n	8009eac <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	015a      	lsls	r2, r3, #5
 8009e9e:	69fb      	ldr	r3, [r7, #28]
 8009ea0:	4413      	add	r3, r2
 8009ea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	2302      	movs	r3, #2
 8009eaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d003      	beq.n	8009ebe <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fc75 	bl	800a7a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	3301      	adds	r3, #1
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec6:	085b      	lsrs	r3, r3, #1
 8009ec8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f47f af49 	bne.w	8009d64 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f005 ff25 	bl	800fd26 <USB_ReadInterrupts>
 8009edc:	4603      	mov	r3, r0
 8009ede:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ee2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ee6:	d122      	bne.n	8009f2e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009ee8:	69fb      	ldr	r3, [r7, #28]
 8009eea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	69fa      	ldr	r2, [r7, #28]
 8009ef2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009ef6:	f023 0301 	bic.w	r3, r3, #1
 8009efa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d108      	bne.n	8009f18 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009f0e:	2100      	movs	r1, #0
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f00c fded 	bl	8016af0 <HAL_PCDEx_LPM_Callback>
 8009f16:	e002      	b.n	8009f1e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009f18:	6878      	ldr	r0, [r7, #4]
 8009f1a:	f00c fbf1 	bl	8016700 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	695a      	ldr	r2, [r3, #20]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009f2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f005 fef7 	bl	800fd26 <USB_ReadInterrupts>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f42:	d112      	bne.n	8009f6a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f4a:	689b      	ldr	r3, [r3, #8]
 8009f4c:	f003 0301 	and.w	r3, r3, #1
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d102      	bne.n	8009f5a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f00c fbad 	bl	80166b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	695a      	ldr	r2, [r3, #20]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8009f68:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f005 fed9 	bl	800fd26 <USB_ReadInterrupts>
 8009f74:	4603      	mov	r3, r0
 8009f76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009f7e:	d121      	bne.n	8009fc4 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	695a      	ldr	r2, [r3, #20]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009f8e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d111      	bne.n	8009fbe <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fa8:	089b      	lsrs	r3, r3, #2
 8009faa:	f003 020f 	and.w	r2, r3, #15
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f00c fd9a 	bl	8016af0 <HAL_PCDEx_LPM_Callback>
 8009fbc:	e002      	b.n	8009fc4 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f00c fb78 	bl	80166b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f005 feac 	bl	800fd26 <USB_ReadInterrupts>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009fd8:	f040 80c7 	bne.w	800a16a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
 8009fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe2:	685b      	ldr	r3, [r3, #4]
 8009fe4:	69fa      	ldr	r2, [r7, #28]
 8009fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fea:	f023 0301 	bic.w	r3, r3, #1
 8009fee:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2110      	movs	r1, #16
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	f004 ff46 	bl	800ee88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a000:	e056      	b.n	800a0b0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	69fb      	ldr	r3, [r7, #28]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a00e:	461a      	mov	r2, r3
 800a010:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a014:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a018:	015a      	lsls	r2, r3, #5
 800a01a:	69fb      	ldr	r3, [r7, #28]
 800a01c:	4413      	add	r3, r2
 800a01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a026:	0151      	lsls	r1, r2, #5
 800a028:	69fa      	ldr	r2, [r7, #28]
 800a02a:	440a      	add	r2, r1
 800a02c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a030:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a034:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a038:	015a      	lsls	r2, r3, #5
 800a03a:	69fb      	ldr	r3, [r7, #28]
 800a03c:	4413      	add	r3, r2
 800a03e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a046:	0151      	lsls	r1, r2, #5
 800a048:	69fa      	ldr	r2, [r7, #28]
 800a04a:	440a      	add	r2, r1
 800a04c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a050:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a054:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a058:	015a      	lsls	r2, r3, #5
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	4413      	add	r3, r2
 800a05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a062:	461a      	mov	r2, r3
 800a064:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a068:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	4413      	add	r3, r2
 800a072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a07a:	0151      	lsls	r1, r2, #5
 800a07c:	69fa      	ldr	r2, [r7, #28]
 800a07e:	440a      	add	r2, r1
 800a080:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a084:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a088:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a08a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	69fb      	ldr	r3, [r7, #28]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a09a:	0151      	lsls	r1, r2, #5
 800a09c:	69fa      	ldr	r2, [r7, #28]
 800a09e:	440a      	add	r2, r1
 800a0a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0a4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a0a8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d3a3      	bcc.n	800a002 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a0ba:	69fb      	ldr	r3, [r7, #28]
 800a0bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0c0:	69db      	ldr	r3, [r3, #28]
 800a0c2:	69fa      	ldr	r2, [r7, #28]
 800a0c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a0cc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d016      	beq.n	800a104 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a0d6:	69fb      	ldr	r3, [r7, #28]
 800a0d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a0e0:	69fa      	ldr	r2, [r7, #28]
 800a0e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0e6:	f043 030b 	orr.w	r3, r3, #11
 800a0ea:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0f6:	69fa      	ldr	r2, [r7, #28]
 800a0f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0fc:	f043 030b 	orr.w	r3, r3, #11
 800a100:	6453      	str	r3, [r2, #68]	; 0x44
 800a102:	e015      	b.n	800a130 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a10a:	695b      	ldr	r3, [r3, #20]
 800a10c:	69fa      	ldr	r2, [r7, #28]
 800a10e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a112:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a116:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a11a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a11c:	69fb      	ldr	r3, [r7, #28]
 800a11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	69fa      	ldr	r2, [r7, #28]
 800a126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a12a:	f043 030b 	orr.w	r3, r3, #11
 800a12e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a130:	69fb      	ldr	r3, [r7, #28]
 800a132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	69fa      	ldr	r2, [r7, #28]
 800a13a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a13e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a142:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6818      	ldr	r0, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a154:	461a      	mov	r2, r3
 800a156:	f005 feab 	bl	800feb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	695a      	ldr	r2, [r3, #20]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a168:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4618      	mov	r0, r3
 800a170:	f005 fdd9 	bl	800fd26 <USB_ReadInterrupts>
 800a174:	4603      	mov	r3, r0
 800a176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a17a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a17e:	d124      	bne.n	800a1ca <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	4618      	mov	r0, r3
 800a186:	f005 fe6f 	bl	800fe68 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	4618      	mov	r0, r3
 800a190:	f004 fed7 	bl	800ef42 <USB_GetDevSpeed>
 800a194:	4603      	mov	r3, r0
 800a196:	461a      	mov	r2, r3
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681c      	ldr	r4, [r3, #0]
 800a1a0:	f000 fe94 	bl	800aecc <HAL_RCC_GetHCLKFreq>
 800a1a4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	461a      	mov	r2, r3
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f004 fbfc 	bl	800e9ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f00c fa54 	bl	8016662 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	695a      	ldr	r2, [r3, #20]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a1c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f005 fda9 	bl	800fd26 <USB_ReadInterrupts>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	f003 0308 	and.w	r3, r3, #8
 800a1da:	2b08      	cmp	r3, #8
 800a1dc:	d10a      	bne.n	800a1f4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f00c fa31 	bl	8016646 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	695a      	ldr	r2, [r3, #20]
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f002 0208 	and.w	r2, r2, #8
 800a1f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f005 fd94 	bl	800fd26 <USB_ReadInterrupts>
 800a1fe:	4603      	mov	r3, r0
 800a200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a204:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a208:	d10f      	bne.n	800a22a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a20a:	2300      	movs	r3, #0
 800a20c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a20e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a210:	b2db      	uxtb	r3, r3
 800a212:	4619      	mov	r1, r3
 800a214:	6878      	ldr	r0, [r7, #4]
 800a216:	f00c fa93 	bl	8016740 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	695a      	ldr	r2, [r3, #20]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800a228:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4618      	mov	r0, r3
 800a230:	f005 fd79 	bl	800fd26 <USB_ReadInterrupts>
 800a234:	4603      	mov	r3, r0
 800a236:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a23a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a23e:	d10f      	bne.n	800a260 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800a240:	2300      	movs	r3, #0
 800a242:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a246:	b2db      	uxtb	r3, r3
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f00c fa66 	bl	801671c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	695a      	ldr	r2, [r3, #20]
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800a25e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4618      	mov	r0, r3
 800a266:	f005 fd5e 	bl	800fd26 <USB_ReadInterrupts>
 800a26a:	4603      	mov	r3, r0
 800a26c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a274:	d10a      	bne.n	800a28c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f00c fa74 	bl	8016764 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	695a      	ldr	r2, [r3, #20]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800a28a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4618      	mov	r0, r3
 800a292:	f005 fd48 	bl	800fd26 <USB_ReadInterrupts>
 800a296:	4603      	mov	r3, r0
 800a298:	f003 0304 	and.w	r3, r3, #4
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d115      	bne.n	800a2cc <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	685b      	ldr	r3, [r3, #4]
 800a2a6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	f003 0304 	and.w	r3, r3, #4
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d002      	beq.n	800a2b8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f00c fa64 	bl	8016780 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	6859      	ldr	r1, [r3, #4]
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	69ba      	ldr	r2, [r7, #24]
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	605a      	str	r2, [r3, #4]
 800a2c8:	e000      	b.n	800a2cc <HAL_PCD_IRQHandler+0x7b8>
      return;
 800a2ca:	bf00      	nop
    }
  }
}
 800a2cc:	3734      	adds	r7, #52	; 0x34
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	bd90      	pop	{r4, r7, pc}

0800a2d2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b082      	sub	sp, #8
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	460b      	mov	r3, r1
 800a2dc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d101      	bne.n	800a2ec <HAL_PCD_SetAddress+0x1a>
 800a2e8:	2302      	movs	r3, #2
 800a2ea:	e013      	b.n	800a314 <HAL_PCD_SetAddress+0x42>
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	78fa      	ldrb	r2, [r7, #3]
 800a2f8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	78fa      	ldrb	r2, [r7, #3]
 800a302:	4611      	mov	r1, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f005 fca6 	bl	800fc56 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3708      	adds	r7, #8
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	4608      	mov	r0, r1
 800a326:	4611      	mov	r1, r2
 800a328:	461a      	mov	r2, r3
 800a32a:	4603      	mov	r3, r0
 800a32c:	70fb      	strb	r3, [r7, #3]
 800a32e:	460b      	mov	r3, r1
 800a330:	803b      	strh	r3, [r7, #0]
 800a332:	4613      	mov	r3, r2
 800a334:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a336:	2300      	movs	r3, #0
 800a338:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a33a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	da0f      	bge.n	800a362 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a342:	78fb      	ldrb	r3, [r7, #3]
 800a344:	f003 020f 	and.w	r2, r3, #15
 800a348:	4613      	mov	r3, r2
 800a34a:	00db      	lsls	r3, r3, #3
 800a34c:	1a9b      	subs	r3, r3, r2
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	3338      	adds	r3, #56	; 0x38
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	4413      	add	r3, r2
 800a356:	3304      	adds	r3, #4
 800a358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	2201      	movs	r2, #1
 800a35e:	705a      	strb	r2, [r3, #1]
 800a360:	e00f      	b.n	800a382 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a362:	78fb      	ldrb	r3, [r7, #3]
 800a364:	f003 020f 	and.w	r2, r3, #15
 800a368:	4613      	mov	r3, r2
 800a36a:	00db      	lsls	r3, r3, #3
 800a36c:	1a9b      	subs	r3, r3, r2
 800a36e:	009b      	lsls	r3, r3, #2
 800a370:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	4413      	add	r3, r2
 800a378:	3304      	adds	r3, #4
 800a37a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a382:	78fb      	ldrb	r3, [r7, #3]
 800a384:	f003 030f 	and.w	r3, r3, #15
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a38e:	883a      	ldrh	r2, [r7, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	78ba      	ldrb	r2, [r7, #2]
 800a398:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	785b      	ldrb	r3, [r3, #1]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d004      	beq.n	800a3ac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	781b      	ldrb	r3, [r3, #0]
 800a3a6:	b29a      	uxth	r2, r3
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a3ac:	78bb      	ldrb	r3, [r7, #2]
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	d102      	bne.n	800a3b8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d101      	bne.n	800a3c6 <HAL_PCD_EP_Open+0xaa>
 800a3c2:	2302      	movs	r3, #2
 800a3c4:	e00e      	b.n	800a3e4 <HAL_PCD_EP_Open+0xc8>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68f9      	ldr	r1, [r7, #12]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f004 fdd9 	bl	800ef8c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2200      	movs	r2, #0
 800a3de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800a3e2:	7afb      	ldrb	r3, [r7, #11]
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3710      	adds	r7, #16
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	bd80      	pop	{r7, pc}

0800a3ec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
 800a3f4:	460b      	mov	r3, r1
 800a3f6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a3f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	da0f      	bge.n	800a420 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a400:	78fb      	ldrb	r3, [r7, #3]
 800a402:	f003 020f 	and.w	r2, r3, #15
 800a406:	4613      	mov	r3, r2
 800a408:	00db      	lsls	r3, r3, #3
 800a40a:	1a9b      	subs	r3, r3, r2
 800a40c:	009b      	lsls	r3, r3, #2
 800a40e:	3338      	adds	r3, #56	; 0x38
 800a410:	687a      	ldr	r2, [r7, #4]
 800a412:	4413      	add	r3, r2
 800a414:	3304      	adds	r3, #4
 800a416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	2201      	movs	r2, #1
 800a41c:	705a      	strb	r2, [r3, #1]
 800a41e:	e00f      	b.n	800a440 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a420:	78fb      	ldrb	r3, [r7, #3]
 800a422:	f003 020f 	and.w	r2, r3, #15
 800a426:	4613      	mov	r3, r2
 800a428:	00db      	lsls	r3, r3, #3
 800a42a:	1a9b      	subs	r3, r3, r2
 800a42c:	009b      	lsls	r3, r3, #2
 800a42e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a432:	687a      	ldr	r2, [r7, #4]
 800a434:	4413      	add	r3, r2
 800a436:	3304      	adds	r3, #4
 800a438:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2200      	movs	r2, #0
 800a43e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	f003 030f 	and.w	r3, r3, #15
 800a446:	b2da      	uxtb	r2, r3
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a452:	2b01      	cmp	r3, #1
 800a454:	d101      	bne.n	800a45a <HAL_PCD_EP_Close+0x6e>
 800a456:	2302      	movs	r3, #2
 800a458:	e00e      	b.n	800a478 <HAL_PCD_EP_Close+0x8c>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2201      	movs	r2, #1
 800a45e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	68f9      	ldr	r1, [r7, #12]
 800a468:	4618      	mov	r0, r3
 800a46a:	f004 fe17 	bl	800f09c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b086      	sub	sp, #24
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	607a      	str	r2, [r7, #4]
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	460b      	mov	r3, r1
 800a48e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a490:	7afb      	ldrb	r3, [r7, #11]
 800a492:	f003 020f 	and.w	r2, r3, #15
 800a496:	4613      	mov	r3, r2
 800a498:	00db      	lsls	r3, r3, #3
 800a49a:	1a9b      	subs	r3, r3, r2
 800a49c:	009b      	lsls	r3, r3, #2
 800a49e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	3304      	adds	r3, #4
 800a4a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a4aa:	697b      	ldr	r3, [r7, #20]
 800a4ac:	687a      	ldr	r2, [r7, #4]
 800a4ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	683a      	ldr	r2, [r7, #0]
 800a4b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a4c2:	7afb      	ldrb	r3, [r7, #11]
 800a4c4:	f003 030f 	and.w	r3, r3, #15
 800a4c8:	b2da      	uxtb	r2, r3
 800a4ca:	697b      	ldr	r3, [r7, #20]
 800a4cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d102      	bne.n	800a4dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a4dc:	7afb      	ldrb	r3, [r7, #11]
 800a4de:	f003 030f 	and.w	r3, r3, #15
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d109      	bne.n	800a4fa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6818      	ldr	r0, [r3, #0]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	b2db      	uxtb	r3, r3
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	6979      	ldr	r1, [r7, #20]
 800a4f4:	f005 f8f2 	bl	800f6dc <USB_EP0StartXfer>
 800a4f8:	e008      	b.n	800a50c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6818      	ldr	r0, [r3, #0]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	b2db      	uxtb	r3, r3
 800a504:	461a      	mov	r2, r3
 800a506:	6979      	ldr	r1, [r7, #20]
 800a508:	f004 fea4 	bl	800f254 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a50c:	2300      	movs	r3, #0
}
 800a50e:	4618      	mov	r0, r3
 800a510:	3718      	adds	r7, #24
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}

0800a516 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
 800a51e:	460b      	mov	r3, r1
 800a520:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a522:	78fb      	ldrb	r3, [r7, #3]
 800a524:	f003 020f 	and.w	r2, r3, #15
 800a528:	6879      	ldr	r1, [r7, #4]
 800a52a:	4613      	mov	r3, r2
 800a52c:	00db      	lsls	r3, r3, #3
 800a52e:	1a9b      	subs	r3, r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	440b      	add	r3, r1
 800a534:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a538:	681b      	ldr	r3, [r3, #0]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	370c      	adds	r7, #12
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr

0800a546 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b086      	sub	sp, #24
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	60f8      	str	r0, [r7, #12]
 800a54e:	607a      	str	r2, [r7, #4]
 800a550:	603b      	str	r3, [r7, #0]
 800a552:	460b      	mov	r3, r1
 800a554:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a556:	7afb      	ldrb	r3, [r7, #11]
 800a558:	f003 020f 	and.w	r2, r3, #15
 800a55c:	4613      	mov	r3, r2
 800a55e:	00db      	lsls	r3, r3, #3
 800a560:	1a9b      	subs	r3, r3, r2
 800a562:	009b      	lsls	r3, r3, #2
 800a564:	3338      	adds	r3, #56	; 0x38
 800a566:	68fa      	ldr	r2, [r7, #12]
 800a568:	4413      	add	r3, r2
 800a56a:	3304      	adds	r3, #4
 800a56c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a56e:	697b      	ldr	r3, [r7, #20]
 800a570:	687a      	ldr	r2, [r7, #4]
 800a572:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	683a      	ldr	r2, [r7, #0]
 800a578:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	2200      	movs	r2, #0
 800a57e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	2201      	movs	r2, #1
 800a584:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a586:	7afb      	ldrb	r3, [r7, #11]
 800a588:	f003 030f 	and.w	r3, r3, #15
 800a58c:	b2da      	uxtb	r2, r3
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	691b      	ldr	r3, [r3, #16]
 800a596:	2b01      	cmp	r3, #1
 800a598:	d102      	bne.n	800a5a0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a5a0:	7afb      	ldrb	r3, [r7, #11]
 800a5a2:	f003 030f 	and.w	r3, r3, #15
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d109      	bne.n	800a5be <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6818      	ldr	r0, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	461a      	mov	r2, r3
 800a5b6:	6979      	ldr	r1, [r7, #20]
 800a5b8:	f005 f890 	bl	800f6dc <USB_EP0StartXfer>
 800a5bc:	e008      	b.n	800a5d0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6818      	ldr	r0, [r3, #0]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	6979      	ldr	r1, [r7, #20]
 800a5cc:	f004 fe42 	bl	800f254 <USB_EPStartXfer>
  }

  return HAL_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3718      	adds	r7, #24
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}

0800a5da <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b084      	sub	sp, #16
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	460b      	mov	r3, r1
 800a5e4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a5e6:	78fb      	ldrb	r3, [r7, #3]
 800a5e8:	f003 020f 	and.w	r2, r3, #15
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d901      	bls.n	800a5f8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e050      	b.n	800a69a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a5f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	da0f      	bge.n	800a620 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	f003 020f 	and.w	r2, r3, #15
 800a606:	4613      	mov	r3, r2
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	1a9b      	subs	r3, r3, r2
 800a60c:	009b      	lsls	r3, r3, #2
 800a60e:	3338      	adds	r3, #56	; 0x38
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	4413      	add	r3, r2
 800a614:	3304      	adds	r3, #4
 800a616:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2201      	movs	r2, #1
 800a61c:	705a      	strb	r2, [r3, #1]
 800a61e:	e00d      	b.n	800a63c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a620:	78fa      	ldrb	r2, [r7, #3]
 800a622:	4613      	mov	r3, r2
 800a624:	00db      	lsls	r3, r3, #3
 800a626:	1a9b      	subs	r3, r3, r2
 800a628:	009b      	lsls	r3, r3, #2
 800a62a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a62e:	687a      	ldr	r2, [r7, #4]
 800a630:	4413      	add	r3, r2
 800a632:	3304      	adds	r3, #4
 800a634:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2200      	movs	r2, #0
 800a63a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2201      	movs	r2, #1
 800a640:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a642:	78fb      	ldrb	r3, [r7, #3]
 800a644:	f003 030f 	and.w	r3, r3, #15
 800a648:	b2da      	uxtb	r2, r3
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a654:	2b01      	cmp	r3, #1
 800a656:	d101      	bne.n	800a65c <HAL_PCD_EP_SetStall+0x82>
 800a658:	2302      	movs	r3, #2
 800a65a:	e01e      	b.n	800a69a <HAL_PCD_EP_SetStall+0xc0>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2201      	movs	r2, #1
 800a660:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	68f9      	ldr	r1, [r7, #12]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f005 fa1f 	bl	800faae <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a670:	78fb      	ldrb	r3, [r7, #3]
 800a672:	f003 030f 	and.w	r3, r3, #15
 800a676:	2b00      	cmp	r3, #0
 800a678:	d10a      	bne.n	800a690 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6818      	ldr	r0, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	691b      	ldr	r3, [r3, #16]
 800a682:	b2d9      	uxtb	r1, r3
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a68a:	461a      	mov	r2, r3
 800a68c:	f005 fc10 	bl	800feb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2200      	movs	r2, #0
 800a694:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}

0800a6a2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a6a2:	b580      	push	{r7, lr}
 800a6a4:	b084      	sub	sp, #16
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
 800a6aa:	460b      	mov	r3, r1
 800a6ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a6ae:	78fb      	ldrb	r3, [r7, #3]
 800a6b0:	f003 020f 	and.w	r2, r3, #15
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	429a      	cmp	r2, r3
 800a6ba:	d901      	bls.n	800a6c0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	e042      	b.n	800a746 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a6c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	da0f      	bge.n	800a6e8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a6c8:	78fb      	ldrb	r3, [r7, #3]
 800a6ca:	f003 020f 	and.w	r2, r3, #15
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	00db      	lsls	r3, r3, #3
 800a6d2:	1a9b      	subs	r3, r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	3338      	adds	r3, #56	; 0x38
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	4413      	add	r3, r2
 800a6dc:	3304      	adds	r3, #4
 800a6de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	2201      	movs	r2, #1
 800a6e4:	705a      	strb	r2, [r3, #1]
 800a6e6:	e00f      	b.n	800a708 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	f003 020f 	and.w	r2, r3, #15
 800a6ee:	4613      	mov	r3, r2
 800a6f0:	00db      	lsls	r3, r3, #3
 800a6f2:	1a9b      	subs	r3, r3, r2
 800a6f4:	009b      	lsls	r3, r3, #2
 800a6f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	3304      	adds	r3, #4
 800a700:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2200      	movs	r2, #0
 800a706:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	2200      	movs	r2, #0
 800a70c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a70e:	78fb      	ldrb	r3, [r7, #3]
 800a710:	f003 030f 	and.w	r3, r3, #15
 800a714:	b2da      	uxtb	r2, r3
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_PCD_EP_ClrStall+0x86>
 800a724:	2302      	movs	r3, #2
 800a726:	e00e      	b.n	800a746 <HAL_PCD_EP_ClrStall+0xa4>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	68f9      	ldr	r1, [r7, #12]
 800a736:	4618      	mov	r0, r3
 800a738:	f005 fa27 	bl	800fb8a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a744:	2300      	movs	r3, #0
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}

0800a74e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a74e:	b580      	push	{r7, lr}
 800a750:	b082      	sub	sp, #8
 800a752:	af00      	add	r7, sp, #0
 800a754:	6078      	str	r0, [r7, #4]
 800a756:	460b      	mov	r3, r1
 800a758:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800a760:	2b01      	cmp	r3, #1
 800a762:	d101      	bne.n	800a768 <HAL_PCD_EP_Flush+0x1a>
 800a764:	2302      	movs	r3, #2
 800a766:	e01b      	b.n	800a7a0 <HAL_PCD_EP_Flush+0x52>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800a770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a774:	2b00      	cmp	r3, #0
 800a776:	da09      	bge.n	800a78c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	78fb      	ldrb	r3, [r7, #3]
 800a77e:	f003 030f 	and.w	r3, r3, #15
 800a782:	4619      	mov	r1, r3
 800a784:	4610      	mov	r0, r2
 800a786:	f004 fb7f 	bl	800ee88 <USB_FlushTxFifo>
 800a78a:	e004      	b.n	800a796 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	4618      	mov	r0, r3
 800a792:	f004 fb9d 	bl	800eed0 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2200      	movs	r2, #0
 800a79a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800a79e:	2300      	movs	r3, #0
}
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	3708      	adds	r7, #8
 800a7a4:	46bd      	mov	sp, r7
 800a7a6:	bd80      	pop	{r7, pc}

0800a7a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b08a      	sub	sp, #40	; 0x28
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b8:	697b      	ldr	r3, [r7, #20]
 800a7ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	4613      	mov	r3, r2
 800a7c0:	00db      	lsls	r3, r3, #3
 800a7c2:	1a9b      	subs	r3, r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	3338      	adds	r3, #56	; 0x38
 800a7c8:	687a      	ldr	r2, [r7, #4]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	699a      	ldr	r2, [r3, #24]
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	695b      	ldr	r3, [r3, #20]
 800a7d8:	429a      	cmp	r2, r3
 800a7da:	d901      	bls.n	800a7e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	e06c      	b.n	800a8ba <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	695a      	ldr	r2, [r3, #20]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	699b      	ldr	r3, [r3, #24]
 800a7e8:	1ad3      	subs	r3, r2, r3
 800a7ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	69fa      	ldr	r2, [r7, #28]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d902      	bls.n	800a7fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	3303      	adds	r3, #3
 800a800:	089b      	lsrs	r3, r3, #2
 800a802:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a804:	e02b      	b.n	800a85e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	695a      	ldr	r2, [r3, #20]
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	699b      	ldr	r3, [r3, #24]
 800a80e:	1ad3      	subs	r3, r2, r3
 800a810:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	69fa      	ldr	r2, [r7, #28]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d902      	bls.n	800a822 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	3303      	adds	r3, #3
 800a826:	089b      	lsrs	r3, r3, #2
 800a828:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	68d9      	ldr	r1, [r3, #12]
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	b2da      	uxtb	r2, r3
 800a832:	69fb      	ldr	r3, [r7, #28]
 800a834:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a83a:	b2db      	uxtb	r3, r3
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	4603      	mov	r3, r0
 800a840:	6978      	ldr	r0, [r7, #20]
 800a842:	f005 f89e 	bl	800f982 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	68da      	ldr	r2, [r3, #12]
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	441a      	add	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	699a      	ldr	r2, [r3, #24]
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	441a      	add	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	4413      	add	r3, r2
 800a866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	b29b      	uxth	r3, r3
 800a86e:	69ba      	ldr	r2, [r7, #24]
 800a870:	429a      	cmp	r2, r3
 800a872:	d809      	bhi.n	800a888 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	699a      	ldr	r2, [r3, #24]
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a87c:	429a      	cmp	r2, r3
 800a87e:	d203      	bcs.n	800a888 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	695b      	ldr	r3, [r3, #20]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d1be      	bne.n	800a806 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	695a      	ldr	r2, [r3, #20]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	429a      	cmp	r2, r3
 800a892:	d811      	bhi.n	800a8b8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	f003 030f 	and.w	r3, r3, #15
 800a89a:	2201      	movs	r2, #1
 800a89c:	fa02 f303 	lsl.w	r3, r2, r3
 800a8a0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	43db      	mvns	r3, r3
 800a8ae:	6939      	ldr	r1, [r7, #16]
 800a8b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800a8b8:	2300      	movs	r3, #0
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3720      	adds	r7, #32
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
	...

0800a8c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
 800a8cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	333c      	adds	r3, #60	; 0x3c
 800a8dc:	3304      	adds	r3, #4
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	015a      	lsls	r2, r3, #5
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	4413      	add	r3, r2
 800a8ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	2b01      	cmp	r3, #1
 800a8f8:	f040 80a0 	bne.w	800aa3c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f003 0308 	and.w	r3, r3, #8
 800a902:	2b00      	cmp	r3, #0
 800a904:	d015      	beq.n	800a932 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	4a72      	ldr	r2, [pc, #456]	; (800aad4 <PCD_EP_OutXfrComplete_int+0x210>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	f240 80dd 	bls.w	800aaca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 80d7 	beq.w	800aaca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a928:	461a      	mov	r2, r3
 800a92a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a92e:	6093      	str	r3, [r2, #8]
 800a930:	e0cb      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	f003 0320 	and.w	r3, r3, #32
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d009      	beq.n	800a950 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a948:	461a      	mov	r2, r3
 800a94a:	2320      	movs	r3, #32
 800a94c:	6093      	str	r3, [r2, #8]
 800a94e:	e0bc      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800a956:	2b00      	cmp	r3, #0
 800a958:	f040 80b7 	bne.w	800aaca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	4a5d      	ldr	r2, [pc, #372]	; (800aad4 <PCD_EP_OutXfrComplete_int+0x210>)
 800a960:	4293      	cmp	r3, r2
 800a962:	d90f      	bls.n	800a984 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d00a      	beq.n	800a984 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	015a      	lsls	r2, r3, #5
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	4413      	add	r3, r2
 800a976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a97a:	461a      	mov	r2, r3
 800a97c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a980:	6093      	str	r3, [r2, #8]
 800a982:	e0a2      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800a984:	6879      	ldr	r1, [r7, #4]
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	4613      	mov	r3, r2
 800a98a:	00db      	lsls	r3, r3, #3
 800a98c:	1a9b      	subs	r3, r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	440b      	add	r3, r1
 800a992:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a996:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	0159      	lsls	r1, r3, #5
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	440b      	add	r3, r1
 800a9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800a9aa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800a9ac:	6878      	ldr	r0, [r7, #4]
 800a9ae:	683a      	ldr	r2, [r7, #0]
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	00db      	lsls	r3, r3, #3
 800a9b4:	1a9b      	subs	r3, r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4403      	add	r3, r0
 800a9ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800a9be:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800a9c0:	6879      	ldr	r1, [r7, #4]
 800a9c2:	683a      	ldr	r2, [r7, #0]
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	00db      	lsls	r3, r3, #3
 800a9c8:	1a9b      	subs	r3, r3, r2
 800a9ca:	009b      	lsls	r3, r3, #2
 800a9cc:	440b      	add	r3, r1
 800a9ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a9d2:	6819      	ldr	r1, [r3, #0]
 800a9d4:	6878      	ldr	r0, [r7, #4]
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	4613      	mov	r3, r2
 800a9da:	00db      	lsls	r3, r3, #3
 800a9dc:	1a9b      	subs	r3, r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4403      	add	r3, r0
 800a9e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	4419      	add	r1, r3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	683a      	ldr	r2, [r7, #0]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	00db      	lsls	r3, r3, #3
 800a9f2:	1a9b      	subs	r3, r3, r2
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	4403      	add	r3, r0
 800a9f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800a9fc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d114      	bne.n	800aa2e <PCD_EP_OutXfrComplete_int+0x16a>
 800aa04:	6879      	ldr	r1, [r7, #4]
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	4613      	mov	r3, r2
 800aa0a:	00db      	lsls	r3, r3, #3
 800aa0c:	1a9b      	subs	r3, r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	440b      	add	r3, r1
 800aa12:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d108      	bne.n	800aa2e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6818      	ldr	r0, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aa26:	461a      	mov	r2, r3
 800aa28:	2101      	movs	r1, #1
 800aa2a:	f005 fa41 	bl	800feb0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f00b fdd1 	bl	80165dc <HAL_PCD_DataOutStageCallback>
 800aa3a:	e046      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4a26      	ldr	r2, [pc, #152]	; (800aad8 <PCD_EP_OutXfrComplete_int+0x214>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d124      	bne.n	800aa8e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00a      	beq.n	800aa64 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa60:	6093      	str	r3, [r2, #8]
 800aa62:	e032      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	f003 0320 	and.w	r3, r3, #32
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d008      	beq.n	800aa80 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	015a      	lsls	r2, r3, #5
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	4413      	add	r3, r2
 800aa76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	4619      	mov	r1, r3
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f00b fda8 	bl	80165dc <HAL_PCD_DataOutStageCallback>
 800aa8c:	e01d      	b.n	800aaca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d114      	bne.n	800aabe <PCD_EP_OutXfrComplete_int+0x1fa>
 800aa94:	6879      	ldr	r1, [r7, #4]
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	00db      	lsls	r3, r3, #3
 800aa9c:	1a9b      	subs	r3, r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d108      	bne.n	800aabe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6818      	ldr	r0, [r3, #0]
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800aab6:	461a      	mov	r2, r3
 800aab8:	2100      	movs	r1, #0
 800aaba:	f005 f9f9 	bl	800feb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	b2db      	uxtb	r3, r3
 800aac2:	4619      	mov	r1, r3
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f00b fd89 	bl	80165dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	4f54300a 	.word	0x4f54300a
 800aad8:	4f54310a 	.word	0x4f54310a

0800aadc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	333c      	adds	r3, #60	; 0x3c
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab06:	689b      	ldr	r3, [r3, #8]
 800ab08:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4a15      	ldr	r2, [pc, #84]	; (800ab64 <PCD_EP_OutSetupPacket_int+0x88>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d90e      	bls.n	800ab30 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d009      	beq.n	800ab30 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab28:	461a      	mov	r2, r3
 800ab2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab2e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f00b fd41 	bl	80165b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	4a0a      	ldr	r2, [pc, #40]	; (800ab64 <PCD_EP_OutSetupPacket_int+0x88>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d90c      	bls.n	800ab58 <PCD_EP_OutSetupPacket_int+0x7c>
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d108      	bne.n	800ab58 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6818      	ldr	r0, [r3, #0]
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ab50:	461a      	mov	r2, r3
 800ab52:	2101      	movs	r1, #1
 800ab54:	f005 f9ac 	bl	800feb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800ab58:	2300      	movs	r3, #0
}
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	3718      	adds	r7, #24
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	bd80      	pop	{r7, pc}
 800ab62:	bf00      	nop
 800ab64:	4f54300a 	.word	0x4f54300a

0800ab68 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b085      	sub	sp, #20
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
 800ab70:	460b      	mov	r3, r1
 800ab72:	70fb      	strb	r3, [r7, #3]
 800ab74:	4613      	mov	r3, r2
 800ab76:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800ab80:	78fb      	ldrb	r3, [r7, #3]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d107      	bne.n	800ab96 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800ab86:	883b      	ldrh	r3, [r7, #0]
 800ab88:	0419      	lsls	r1, r3, #16
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68ba      	ldr	r2, [r7, #8]
 800ab90:	430a      	orrs	r2, r1
 800ab92:	629a      	str	r2, [r3, #40]	; 0x28
 800ab94:	e028      	b.n	800abe8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9c:	0c1b      	lsrs	r3, r3, #16
 800ab9e:	68ba      	ldr	r2, [r7, #8]
 800aba0:	4413      	add	r3, r2
 800aba2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800aba4:	2300      	movs	r3, #0
 800aba6:	73fb      	strb	r3, [r7, #15]
 800aba8:	e00d      	b.n	800abc6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	7bfb      	ldrb	r3, [r7, #15]
 800abb0:	3340      	adds	r3, #64	; 0x40
 800abb2:	009b      	lsls	r3, r3, #2
 800abb4:	4413      	add	r3, r2
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	0c1b      	lsrs	r3, r3, #16
 800abba:	68ba      	ldr	r2, [r7, #8]
 800abbc:	4413      	add	r3, r2
 800abbe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800abc0:	7bfb      	ldrb	r3, [r7, #15]
 800abc2:	3301      	adds	r3, #1
 800abc4:	73fb      	strb	r3, [r7, #15]
 800abc6:	7bfa      	ldrb	r2, [r7, #15]
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	3b01      	subs	r3, #1
 800abcc:	429a      	cmp	r2, r3
 800abce:	d3ec      	bcc.n	800abaa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800abd0:	883b      	ldrh	r3, [r7, #0]
 800abd2:	0418      	lsls	r0, r3, #16
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6819      	ldr	r1, [r3, #0]
 800abd8:	78fb      	ldrb	r3, [r7, #3]
 800abda:	3b01      	subs	r3, #1
 800abdc:	68ba      	ldr	r2, [r7, #8]
 800abde:	4302      	orrs	r2, r0
 800abe0:	3340      	adds	r3, #64	; 0x40
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	440b      	add	r3, r1
 800abe6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3714      	adds	r7, #20
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr

0800abf6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800abf6:	b480      	push	{r7}
 800abf8:	b083      	sub	sp, #12
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	6078      	str	r0, [r7, #4]
 800abfe:	460b      	mov	r3, r1
 800ac00:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	887a      	ldrh	r2, [r7, #2]
 800ac08:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ac0a:	2300      	movs	r3, #0
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	370c      	adds	r7, #12
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr

0800ac18 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b085      	sub	sp, #20
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2201      	movs	r2, #1
 800ac2a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac4a:	f043 0303 	orr.w	r3, r3, #3
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b082      	sub	sp, #8
 800ac64:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800ac66:	2300      	movs	r3, #0
 800ac68:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	603b      	str	r3, [r7, #0]
 800ac6e:	4b20      	ldr	r3, [pc, #128]	; (800acf0 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac72:	4a1f      	ldr	r2, [pc, #124]	; (800acf0 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac78:	6413      	str	r3, [r2, #64]	; 0x40
 800ac7a:	4b1d      	ldr	r3, [pc, #116]	; (800acf0 <HAL_PWREx_EnableOverDrive+0x90>)
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac82:	603b      	str	r3, [r7, #0]
 800ac84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800ac86:	4b1b      	ldr	r3, [pc, #108]	; (800acf4 <HAL_PWREx_EnableOverDrive+0x94>)
 800ac88:	2201      	movs	r2, #1
 800ac8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ac8c:	f7fb fc72 	bl	8006574 <HAL_GetTick>
 800ac90:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800ac92:	e009      	b.n	800aca8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800ac94:	f7fb fc6e 	bl	8006574 <HAL_GetTick>
 800ac98:	4602      	mov	r2, r0
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	1ad3      	subs	r3, r2, r3
 800ac9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800aca2:	d901      	bls.n	800aca8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800aca4:	2303      	movs	r3, #3
 800aca6:	e01f      	b.n	800ace8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800aca8:	4b13      	ldr	r3, [pc, #76]	; (800acf8 <HAL_PWREx_EnableOverDrive+0x98>)
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acb4:	d1ee      	bne.n	800ac94 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800acb6:	4b11      	ldr	r3, [pc, #68]	; (800acfc <HAL_PWREx_EnableOverDrive+0x9c>)
 800acb8:	2201      	movs	r2, #1
 800acba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800acbc:	f7fb fc5a 	bl	8006574 <HAL_GetTick>
 800acc0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acc2:	e009      	b.n	800acd8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800acc4:	f7fb fc56 	bl	8006574 <HAL_GetTick>
 800acc8:	4602      	mov	r2, r0
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	1ad3      	subs	r3, r2, r3
 800acce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acd2:	d901      	bls.n	800acd8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800acd4:	2303      	movs	r3, #3
 800acd6:	e007      	b.n	800ace8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800acd8:	4b07      	ldr	r3, [pc, #28]	; (800acf8 <HAL_PWREx_EnableOverDrive+0x98>)
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ace0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ace4:	d1ee      	bne.n	800acc4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	40023800 	.word	0x40023800
 800acf4:	420e0040 	.word	0x420e0040
 800acf8:	40007000 	.word	0x40007000
 800acfc:	420e0044 	.word	0x420e0044

0800ad00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	e0cc      	b.n	800aeae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ad14:	4b68      	ldr	r3, [pc, #416]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b8>)
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	f003 030f 	and.w	r3, r3, #15
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d90c      	bls.n	800ad3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ad22:	4b65      	ldr	r3, [pc, #404]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b8>)
 800ad24:	683a      	ldr	r2, [r7, #0]
 800ad26:	b2d2      	uxtb	r2, r2
 800ad28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ad2a:	4b63      	ldr	r3, [pc, #396]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b8>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f003 030f 	and.w	r3, r3, #15
 800ad32:	683a      	ldr	r2, [r7, #0]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d001      	beq.n	800ad3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	e0b8      	b.n	800aeae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f003 0302 	and.w	r3, r3, #2
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d020      	beq.n	800ad8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f003 0304 	and.w	r3, r3, #4
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d005      	beq.n	800ad60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ad54:	4b59      	ldr	r3, [pc, #356]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ad56:	689b      	ldr	r3, [r3, #8]
 800ad58:	4a58      	ldr	r2, [pc, #352]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ad5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ad5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f003 0308 	and.w	r3, r3, #8
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d005      	beq.n	800ad78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ad6c:	4b53      	ldr	r3, [pc, #332]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ad6e:	689b      	ldr	r3, [r3, #8]
 800ad70:	4a52      	ldr	r2, [pc, #328]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ad72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ad76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ad78:	4b50      	ldr	r3, [pc, #320]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ad7a:	689b      	ldr	r3, [r3, #8]
 800ad7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	689b      	ldr	r3, [r3, #8]
 800ad84:	494d      	ldr	r1, [pc, #308]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ad86:	4313      	orrs	r3, r2
 800ad88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 0301 	and.w	r3, r3, #1
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d044      	beq.n	800ae20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d107      	bne.n	800adae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ad9e:	4b47      	ldr	r3, [pc, #284]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d119      	bne.n	800adde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e07f      	b.n	800aeae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	685b      	ldr	r3, [r3, #4]
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d003      	beq.n	800adbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d107      	bne.n	800adce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800adbe:	4b3f      	ldr	r3, [pc, #252]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d109      	bne.n	800adde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	e06f      	b.n	800aeae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800adce:	4b3b      	ldr	r3, [pc, #236]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 0302 	and.w	r3, r3, #2
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e067      	b.n	800aeae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800adde:	4b37      	ldr	r3, [pc, #220]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	f023 0203 	bic.w	r2, r3, #3
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	4934      	ldr	r1, [pc, #208]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800adec:	4313      	orrs	r3, r2
 800adee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800adf0:	f7fb fbc0 	bl	8006574 <HAL_GetTick>
 800adf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800adf6:	e00a      	b.n	800ae0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800adf8:	f7fb fbbc 	bl	8006574 <HAL_GetTick>
 800adfc:	4602      	mov	r2, r0
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	1ad3      	subs	r3, r2, r3
 800ae02:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae06:	4293      	cmp	r3, r2
 800ae08:	d901      	bls.n	800ae0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800ae0a:	2303      	movs	r3, #3
 800ae0c:	e04f      	b.n	800aeae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae0e:	4b2b      	ldr	r3, [pc, #172]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ae10:	689b      	ldr	r3, [r3, #8]
 800ae12:	f003 020c 	and.w	r2, r3, #12
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	009b      	lsls	r3, r3, #2
 800ae1c:	429a      	cmp	r2, r3
 800ae1e:	d1eb      	bne.n	800adf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ae20:	4b25      	ldr	r3, [pc, #148]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	f003 030f 	and.w	r3, r3, #15
 800ae28:	683a      	ldr	r2, [r7, #0]
 800ae2a:	429a      	cmp	r2, r3
 800ae2c:	d20c      	bcs.n	800ae48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ae2e:	4b22      	ldr	r3, [pc, #136]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae30:	683a      	ldr	r2, [r7, #0]
 800ae32:	b2d2      	uxtb	r2, r2
 800ae34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ae36:	4b20      	ldr	r3, [pc, #128]	; (800aeb8 <HAL_RCC_ClockConfig+0x1b8>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 030f 	and.w	r3, r3, #15
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d001      	beq.n	800ae48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800ae44:	2301      	movs	r3, #1
 800ae46:	e032      	b.n	800aeae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f003 0304 	and.w	r3, r3, #4
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d008      	beq.n	800ae66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ae54:	4b19      	ldr	r3, [pc, #100]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ae56:	689b      	ldr	r3, [r3, #8]
 800ae58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	4916      	ldr	r1, [pc, #88]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 0308 	and.w	r3, r3, #8
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d009      	beq.n	800ae86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ae72:	4b12      	ldr	r3, [pc, #72]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	00db      	lsls	r3, r3, #3
 800ae80:	490e      	ldr	r1, [pc, #56]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ae82:	4313      	orrs	r3, r2
 800ae84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ae86:	f000 fb6b 	bl	800b560 <HAL_RCC_GetSysClockFreq>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	4b0b      	ldr	r3, [pc, #44]	; (800aebc <HAL_RCC_ClockConfig+0x1bc>)
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	091b      	lsrs	r3, r3, #4
 800ae92:	f003 030f 	and.w	r3, r3, #15
 800ae96:	490a      	ldr	r1, [pc, #40]	; (800aec0 <HAL_RCC_ClockConfig+0x1c0>)
 800ae98:	5ccb      	ldrb	r3, [r1, r3]
 800ae9a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae9e:	4a09      	ldr	r2, [pc, #36]	; (800aec4 <HAL_RCC_ClockConfig+0x1c4>)
 800aea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aea2:	4b09      	ldr	r3, [pc, #36]	; (800aec8 <HAL_RCC_ClockConfig+0x1c8>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7fb fb20 	bl	80064ec <HAL_InitTick>

  return HAL_OK;
 800aeac:	2300      	movs	r3, #0
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}
 800aeb6:	bf00      	nop
 800aeb8:	40023c00 	.word	0x40023c00
 800aebc:	40023800 	.word	0x40023800
 800aec0:	080175ac 	.word	0x080175ac
 800aec4:	20000000 	.word	0x20000000
 800aec8:	20000004 	.word	0x20000004

0800aecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aecc:	b480      	push	{r7}
 800aece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aed0:	4b03      	ldr	r3, [pc, #12]	; (800aee0 <HAL_RCC_GetHCLKFreq+0x14>)
 800aed2:	681b      	ldr	r3, [r3, #0]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	20000000 	.word	0x20000000

0800aee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800aee8:	f7ff fff0 	bl	800aecc <HAL_RCC_GetHCLKFreq>
 800aeec:	4602      	mov	r2, r0
 800aeee:	4b05      	ldr	r3, [pc, #20]	; (800af04 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aef0:	689b      	ldr	r3, [r3, #8]
 800aef2:	0a9b      	lsrs	r3, r3, #10
 800aef4:	f003 0307 	and.w	r3, r3, #7
 800aef8:	4903      	ldr	r1, [pc, #12]	; (800af08 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aefa:	5ccb      	ldrb	r3, [r1, r3]
 800aefc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800af00:	4618      	mov	r0, r3
 800af02:	bd80      	pop	{r7, pc}
 800af04:	40023800 	.word	0x40023800
 800af08:	080175bc 	.word	0x080175bc

0800af0c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08c      	sub	sp, #48	; 0x30
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800af14:	2300      	movs	r3, #0
 800af16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800af18:	2300      	movs	r3, #0
 800af1a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800af1c:	2300      	movs	r3, #0
 800af1e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800af24:	2300      	movs	r3, #0
 800af26:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800af28:	2300      	movs	r3, #0
 800af2a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800af2c:	2300      	movs	r3, #0
 800af2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800af34:	2300      	movs	r3, #0
 800af36:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b00      	cmp	r3, #0
 800af42:	d010      	beq.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800af44:	4b6f      	ldr	r3, [pc, #444]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af4a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af52:	496c      	ldr	r1, [pc, #432]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af54:	4313      	orrs	r3, r2
 800af56:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d101      	bne.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800af62:	2301      	movs	r3, #1
 800af64:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f003 0302 	and.w	r3, r3, #2
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d010      	beq.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800af72:	4b64      	ldr	r3, [pc, #400]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af78:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af80:	4960      	ldr	r1, [pc, #384]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800af82:	4313      	orrs	r3, r2
 800af84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d101      	bne.n	800af94 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800af90:	2301      	movs	r3, #1
 800af92:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f003 0304 	and.w	r3, r3, #4
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d017      	beq.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800afa0:	4b58      	ldr	r3, [pc, #352]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afa6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afae:	4955      	ldr	r1, [pc, #340]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afb0:	4313      	orrs	r3, r2
 800afb2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afbe:	d101      	bne.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800afc0:	2301      	movs	r3, #1
 800afc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800afcc:	2301      	movs	r3, #1
 800afce:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f003 0308 	and.w	r3, r3, #8
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d017      	beq.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800afdc:	4b49      	ldr	r3, [pc, #292]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afea:	4946      	ldr	r1, [pc, #280]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800afec:	4313      	orrs	r3, r2
 800afee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800affa:	d101      	bne.n	800b000 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800affc:	2301      	movs	r3, #1
 800affe:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b004:	2b00      	cmp	r3, #0
 800b006:	d101      	bne.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800b008:	2301      	movs	r3, #1
 800b00a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 0320 	and.w	r3, r3, #32
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 808a 	beq.w	800b12e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b01a:	2300      	movs	r3, #0
 800b01c:	60bb      	str	r3, [r7, #8]
 800b01e:	4b39      	ldr	r3, [pc, #228]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b022:	4a38      	ldr	r2, [pc, #224]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b028:	6413      	str	r3, [r2, #64]	; 0x40
 800b02a:	4b36      	ldr	r3, [pc, #216]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b02e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b032:	60bb      	str	r3, [r7, #8]
 800b034:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b036:	4b34      	ldr	r3, [pc, #208]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a33      	ldr	r2, [pc, #204]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b03c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b040:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b042:	f7fb fa97 	bl	8006574 <HAL_GetTick>
 800b046:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b048:	e008      	b.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b04a:	f7fb fa93 	bl	8006574 <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	2b02      	cmp	r3, #2
 800b056:	d901      	bls.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e278      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b05c:	4b2a      	ldr	r3, [pc, #168]	; (800b108 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b064:	2b00      	cmp	r3, #0
 800b066:	d0f0      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b068:	4b26      	ldr	r3, [pc, #152]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b06c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b070:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d02f      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b07c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b080:	6a3a      	ldr	r2, [r7, #32]
 800b082:	429a      	cmp	r2, r3
 800b084:	d028      	beq.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b086:	4b1f      	ldr	r3, [pc, #124]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b08a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b08e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b090:	4b1e      	ldr	r3, [pc, #120]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b092:	2201      	movs	r2, #1
 800b094:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b096:	4b1d      	ldr	r3, [pc, #116]	; (800b10c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b09c:	4a19      	ldr	r2, [pc, #100]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b09e:	6a3b      	ldr	r3, [r7, #32]
 800b0a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b0a2:	4b18      	ldr	r3, [pc, #96]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0a6:	f003 0301 	and.w	r3, r3, #1
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d114      	bne.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b0ae:	f7fb fa61 	bl	8006574 <HAL_GetTick>
 800b0b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0b4:	e00a      	b.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b0b6:	f7fb fa5d 	bl	8006574 <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0c4:	4293      	cmp	r3, r2
 800b0c6:	d901      	bls.n	800b0cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e240      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b0cc:	4b0d      	ldr	r3, [pc, #52]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d0:	f003 0302 	and.w	r3, r3, #2
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d0ee      	beq.n	800b0b6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b0e4:	d114      	bne.n	800b110 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800b0e6:	4b07      	ldr	r3, [pc, #28]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0f2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b0f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0fa:	4902      	ldr	r1, [pc, #8]	; (800b104 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	608b      	str	r3, [r1, #8]
 800b100:	e00c      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x210>
 800b102:	bf00      	nop
 800b104:	40023800 	.word	0x40023800
 800b108:	40007000 	.word	0x40007000
 800b10c:	42470e40 	.word	0x42470e40
 800b110:	4b4a      	ldr	r3, [pc, #296]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	4a49      	ldr	r2, [pc, #292]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b116:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b11a:	6093      	str	r3, [r2, #8]
 800b11c:	4b47      	ldr	r3, [pc, #284]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b11e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b124:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b128:	4944      	ldr	r1, [pc, #272]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b12a:	4313      	orrs	r3, r2
 800b12c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	f003 0310 	and.w	r3, r3, #16
 800b136:	2b00      	cmp	r3, #0
 800b138:	d004      	beq.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800b140:	4b3f      	ldr	r3, [pc, #252]	; (800b240 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800b142:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00a      	beq.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800b150:	4b3a      	ldr	r3, [pc, #232]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b156:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b15e:	4937      	ldr	r1, [pc, #220]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b160:	4313      	orrs	r3, r2
 800b162:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00a      	beq.n	800b188 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b172:	4b32      	ldr	r3, [pc, #200]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b178:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b180:	492e      	ldr	r1, [pc, #184]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b182:	4313      	orrs	r3, r2
 800b184:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b190:	2b00      	cmp	r3, #0
 800b192:	d011      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800b194:	4b29      	ldr	r3, [pc, #164]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b19a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1a2:	4926      	ldr	r1, [pc, #152]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1b2:	d101      	bne.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00a      	beq.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800b1c4:	4b1d      	ldr	r3, [pc, #116]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1d2:	491a      	ldr	r1, [pc, #104]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d011      	beq.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800b1e6:	4b15      	ldr	r3, [pc, #84]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1ec:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f4:	4911      	ldr	r1, [pc, #68]	; (800b23c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b200:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b204:	d101      	bne.n	800b20a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800b206:	2301      	movs	r3, #1
 800b208:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800b20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b20c:	2b01      	cmp	r3, #1
 800b20e:	d005      	beq.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0x310>
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b218:	f040 80ff 	bne.w	800b41a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b21c:	4b09      	ldr	r3, [pc, #36]	; (800b244 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b21e:	2200      	movs	r2, #0
 800b220:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b222:	f7fb f9a7 	bl	8006574 <HAL_GetTick>
 800b226:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b228:	e00e      	b.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b22a:	f7fb f9a3 	bl	8006574 <HAL_GetTick>
 800b22e:	4602      	mov	r2, r0
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	2b02      	cmp	r3, #2
 800b236:	d907      	bls.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b238:	2303      	movs	r3, #3
 800b23a:	e188      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b23c:	40023800 	.word	0x40023800
 800b240:	424711e0 	.word	0x424711e0
 800b244:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b248:	4b7e      	ldr	r3, [pc, #504]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1ea      	bne.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f003 0301 	and.w	r3, r3, #1
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d003      	beq.n	800b268 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b264:	2b00      	cmp	r3, #0
 800b266:	d009      	beq.n	800b27c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800b270:	2b00      	cmp	r3, #0
 800b272:	d028      	beq.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d124      	bne.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b27c:	4b71      	ldr	r3, [pc, #452]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b27e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b282:	0c1b      	lsrs	r3, r3, #16
 800b284:	f003 0303 	and.w	r3, r3, #3
 800b288:	3301      	adds	r3, #1
 800b28a:	005b      	lsls	r3, r3, #1
 800b28c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b28e:	4b6d      	ldr	r3, [pc, #436]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b294:	0e1b      	lsrs	r3, r3, #24
 800b296:	f003 030f 	and.w	r3, r3, #15
 800b29a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	685a      	ldr	r2, [r3, #4]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	689b      	ldr	r3, [r3, #8]
 800b2a4:	019b      	lsls	r3, r3, #6
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	085b      	lsrs	r3, r3, #1
 800b2ac:	3b01      	subs	r3, #1
 800b2ae:	041b      	lsls	r3, r3, #16
 800b2b0:	431a      	orrs	r2, r3
 800b2b2:	69bb      	ldr	r3, [r7, #24]
 800b2b4:	061b      	lsls	r3, r3, #24
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	695b      	ldr	r3, [r3, #20]
 800b2bc:	071b      	lsls	r3, r3, #28
 800b2be:	4961      	ldr	r1, [pc, #388]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f003 0304 	and.w	r3, r3, #4
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d004      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b2da:	d00a      	beq.n	800b2f2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d035      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b2f0:	d130      	bne.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b2f2:	4b54      	ldr	r3, [pc, #336]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2f8:	0c1b      	lsrs	r3, r3, #16
 800b2fa:	f003 0303 	and.w	r3, r3, #3
 800b2fe:	3301      	adds	r3, #1
 800b300:	005b      	lsls	r3, r3, #1
 800b302:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b304:	4b4f      	ldr	r3, [pc, #316]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b30a:	0f1b      	lsrs	r3, r3, #28
 800b30c:	f003 0307 	and.w	r3, r3, #7
 800b310:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	019b      	lsls	r3, r3, #6
 800b31c:	431a      	orrs	r2, r3
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	085b      	lsrs	r3, r3, #1
 800b322:	3b01      	subs	r3, #1
 800b324:	041b      	lsls	r3, r3, #16
 800b326:	431a      	orrs	r2, r3
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	061b      	lsls	r3, r3, #24
 800b32e:	431a      	orrs	r2, r3
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	071b      	lsls	r3, r3, #28
 800b334:	4943      	ldr	r1, [pc, #268]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b336:	4313      	orrs	r3, r2
 800b338:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b33c:	4b41      	ldr	r3, [pc, #260]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b33e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b342:	f023 021f 	bic.w	r2, r3, #31
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b34a:	3b01      	subs	r3, #1
 800b34c:	493d      	ldr	r1, [pc, #244]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b34e:	4313      	orrs	r3, r2
 800b350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d029      	beq.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b368:	d124      	bne.n	800b3b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800b36a:	4b36      	ldr	r3, [pc, #216]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b36c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b370:	0c1b      	lsrs	r3, r3, #16
 800b372:	f003 0303 	and.w	r3, r3, #3
 800b376:	3301      	adds	r3, #1
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b37c:	4b31      	ldr	r3, [pc, #196]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b37e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b382:	0f1b      	lsrs	r3, r3, #28
 800b384:	f003 0307 	and.w	r3, r3, #7
 800b388:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685a      	ldr	r2, [r3, #4]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	689b      	ldr	r3, [r3, #8]
 800b392:	019b      	lsls	r3, r3, #6
 800b394:	431a      	orrs	r2, r3
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	68db      	ldr	r3, [r3, #12]
 800b39a:	085b      	lsrs	r3, r3, #1
 800b39c:	3b01      	subs	r3, #1
 800b39e:	041b      	lsls	r3, r3, #16
 800b3a0:	431a      	orrs	r2, r3
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	061b      	lsls	r3, r3, #24
 800b3a6:	431a      	orrs	r2, r3
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	071b      	lsls	r3, r3, #28
 800b3ac:	4925      	ldr	r1, [pc, #148]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3ae:	4313      	orrs	r3, r2
 800b3b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d016      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	685a      	ldr	r2, [r3, #4]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	019b      	lsls	r3, r3, #6
 800b3ca:	431a      	orrs	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	085b      	lsrs	r3, r3, #1
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	041b      	lsls	r3, r3, #16
 800b3d6:	431a      	orrs	r2, r3
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	061b      	lsls	r3, r3, #24
 800b3de:	431a      	orrs	r2, r3
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	695b      	ldr	r3, [r3, #20]
 800b3e4:	071b      	lsls	r3, r3, #28
 800b3e6:	4917      	ldr	r1, [pc, #92]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b3e8:	4313      	orrs	r3, r2
 800b3ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b3ee:	4b16      	ldr	r3, [pc, #88]	; (800b448 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800b3f0:	2201      	movs	r2, #1
 800b3f2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b3f4:	f7fb f8be 	bl	8006574 <HAL_GetTick>
 800b3f8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b3fa:	e008      	b.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800b3fc:	f7fb f8ba 	bl	8006574 <HAL_GetTick>
 800b400:	4602      	mov	r2, r0
 800b402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b404:	1ad3      	subs	r3, r2, r3
 800b406:	2b02      	cmp	r3, #2
 800b408:	d901      	bls.n	800b40e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b40a:	2303      	movs	r3, #3
 800b40c:	e09f      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b40e:	4b0d      	ldr	r3, [pc, #52]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b416:	2b00      	cmp	r3, #0
 800b418:	d0f0      	beq.n	800b3fc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800b41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41c:	2b01      	cmp	r3, #1
 800b41e:	f040 8095 	bne.w	800b54c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b422:	4b0a      	ldr	r3, [pc, #40]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800b424:	2200      	movs	r2, #0
 800b426:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b428:	f7fb f8a4 	bl	8006574 <HAL_GetTick>
 800b42c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b42e:	e00f      	b.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b430:	f7fb f8a0 	bl	8006574 <HAL_GetTick>
 800b434:	4602      	mov	r2, r0
 800b436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b438:	1ad3      	subs	r3, r2, r3
 800b43a:	2b02      	cmp	r3, #2
 800b43c:	d908      	bls.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b43e:	2303      	movs	r3, #3
 800b440:	e085      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800b442:	bf00      	nop
 800b444:	40023800 	.word	0x40023800
 800b448:	42470068 	.word	0x42470068
 800b44c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b450:	4b41      	ldr	r3, [pc, #260]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b458:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b45c:	d0e8      	beq.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 0304 	and.w	r3, r3, #4
 800b466:	2b00      	cmp	r3, #0
 800b468:	d003      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d009      	beq.n	800b486 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d02b      	beq.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b482:	2b00      	cmp	r3, #0
 800b484:	d127      	bne.n	800b4d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800b486:	4b34      	ldr	r3, [pc, #208]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b48c:	0c1b      	lsrs	r3, r3, #16
 800b48e:	f003 0303 	and.w	r3, r3, #3
 800b492:	3301      	adds	r3, #1
 800b494:	005b      	lsls	r3, r3, #1
 800b496:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	699a      	ldr	r2, [r3, #24]
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	69db      	ldr	r3, [r3, #28]
 800b4a0:	019b      	lsls	r3, r3, #6
 800b4a2:	431a      	orrs	r2, r3
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	085b      	lsrs	r3, r3, #1
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	041b      	lsls	r3, r3, #16
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b2:	061b      	lsls	r3, r3, #24
 800b4b4:	4928      	ldr	r1, [pc, #160]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b4bc:	4b26      	ldr	r3, [pc, #152]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b4be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4c2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	021b      	lsls	r3, r3, #8
 800b4ce:	4922      	ldr	r1, [pc, #136]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d01d      	beq.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x612>
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b4ea:	d118      	bne.n	800b51e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b4ec:	4b1a      	ldr	r3, [pc, #104]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b4ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4f2:	0e1b      	lsrs	r3, r3, #24
 800b4f4:	f003 030f 	and.w	r3, r3, #15
 800b4f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	699a      	ldr	r2, [r3, #24]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	69db      	ldr	r3, [r3, #28]
 800b502:	019b      	lsls	r3, r3, #6
 800b504:	431a      	orrs	r2, r3
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	6a1b      	ldr	r3, [r3, #32]
 800b50a:	085b      	lsrs	r3, r3, #1
 800b50c:	3b01      	subs	r3, #1
 800b50e:	041b      	lsls	r3, r3, #16
 800b510:	431a      	orrs	r2, r3
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	061b      	lsls	r3, r3, #24
 800b516:	4910      	ldr	r1, [pc, #64]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b518:	4313      	orrs	r3, r2
 800b51a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b51e:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800b520:	2201      	movs	r2, #1
 800b522:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b524:	f7fb f826 	bl	8006574 <HAL_GetTick>
 800b528:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b52a:	e008      	b.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800b52c:	f7fb f822 	bl	8006574 <HAL_GetTick>
 800b530:	4602      	mov	r2, r0
 800b532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	2b02      	cmp	r3, #2
 800b538:	d901      	bls.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b53a:	2303      	movs	r3, #3
 800b53c:	e007      	b.n	800b54e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b53e:	4b06      	ldr	r3, [pc, #24]	; (800b558 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b546:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b54a:	d1ef      	bne.n	800b52c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800b54c:	2300      	movs	r3, #0
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3730      	adds	r7, #48	; 0x30
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	40023800 	.word	0x40023800
 800b55c:	42470070 	.word	0x42470070

0800b560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b564:	b088      	sub	sp, #32
 800b566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b568:	2300      	movs	r3, #0
 800b56a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 800b56c:	2300      	movs	r3, #0
 800b56e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800b570:	2300      	movs	r3, #0
 800b572:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800b574:	2300      	movs	r3, #0
 800b576:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800b578:	2300      	movs	r3, #0
 800b57a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b57c:	4bce      	ldr	r3, [pc, #824]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b57e:	689b      	ldr	r3, [r3, #8]
 800b580:	f003 030c 	and.w	r3, r3, #12
 800b584:	2b0c      	cmp	r3, #12
 800b586:	f200 818d 	bhi.w	800b8a4 <HAL_RCC_GetSysClockFreq+0x344>
 800b58a:	a201      	add	r2, pc, #4	; (adr r2, 800b590 <HAL_RCC_GetSysClockFreq+0x30>)
 800b58c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b590:	0800b5c5 	.word	0x0800b5c5
 800b594:	0800b8a5 	.word	0x0800b8a5
 800b598:	0800b8a5 	.word	0x0800b8a5
 800b59c:	0800b8a5 	.word	0x0800b8a5
 800b5a0:	0800b5cb 	.word	0x0800b5cb
 800b5a4:	0800b8a5 	.word	0x0800b8a5
 800b5a8:	0800b8a5 	.word	0x0800b8a5
 800b5ac:	0800b8a5 	.word	0x0800b8a5
 800b5b0:	0800b5d1 	.word	0x0800b5d1
 800b5b4:	0800b8a5 	.word	0x0800b8a5
 800b5b8:	0800b8a5 	.word	0x0800b8a5
 800b5bc:	0800b8a5 	.word	0x0800b8a5
 800b5c0:	0800b745 	.word	0x0800b745
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b5c4:	4bbd      	ldr	r3, [pc, #756]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x35c>)
 800b5c6:	61bb      	str	r3, [r7, #24]
       break;
 800b5c8:	e16f      	b.n	800b8aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b5ca:	4bbd      	ldr	r3, [pc, #756]	; (800b8c0 <HAL_RCC_GetSysClockFreq+0x360>)
 800b5cc:	61bb      	str	r3, [r7, #24]
      break;
 800b5ce:	e16c      	b.n	800b8aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b5d0:	4bb9      	ldr	r3, [pc, #740]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5d8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b5da:	4bb7      	ldr	r3, [pc, #732]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b5dc:	685b      	ldr	r3, [r3, #4]
 800b5de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d053      	beq.n	800b68e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5e6:	4bb4      	ldr	r3, [pc, #720]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b5e8:	685b      	ldr	r3, [r3, #4]
 800b5ea:	099b      	lsrs	r3, r3, #6
 800b5ec:	461a      	mov	r2, r3
 800b5ee:	f04f 0300 	mov.w	r3, #0
 800b5f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b5f6:	f04f 0100 	mov.w	r1, #0
 800b5fa:	ea02 0400 	and.w	r4, r2, r0
 800b5fe:	603c      	str	r4, [r7, #0]
 800b600:	400b      	ands	r3, r1
 800b602:	607b      	str	r3, [r7, #4]
 800b604:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b608:	4620      	mov	r0, r4
 800b60a:	4629      	mov	r1, r5
 800b60c:	f04f 0200 	mov.w	r2, #0
 800b610:	f04f 0300 	mov.w	r3, #0
 800b614:	014b      	lsls	r3, r1, #5
 800b616:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b61a:	0142      	lsls	r2, r0, #5
 800b61c:	4610      	mov	r0, r2
 800b61e:	4619      	mov	r1, r3
 800b620:	4623      	mov	r3, r4
 800b622:	1ac0      	subs	r0, r0, r3
 800b624:	462b      	mov	r3, r5
 800b626:	eb61 0103 	sbc.w	r1, r1, r3
 800b62a:	f04f 0200 	mov.w	r2, #0
 800b62e:	f04f 0300 	mov.w	r3, #0
 800b632:	018b      	lsls	r3, r1, #6
 800b634:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b638:	0182      	lsls	r2, r0, #6
 800b63a:	1a12      	subs	r2, r2, r0
 800b63c:	eb63 0301 	sbc.w	r3, r3, r1
 800b640:	f04f 0000 	mov.w	r0, #0
 800b644:	f04f 0100 	mov.w	r1, #0
 800b648:	00d9      	lsls	r1, r3, #3
 800b64a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b64e:	00d0      	lsls	r0, r2, #3
 800b650:	4602      	mov	r2, r0
 800b652:	460b      	mov	r3, r1
 800b654:	4621      	mov	r1, r4
 800b656:	1852      	adds	r2, r2, r1
 800b658:	4629      	mov	r1, r5
 800b65a:	eb43 0101 	adc.w	r1, r3, r1
 800b65e:	460b      	mov	r3, r1
 800b660:	f04f 0000 	mov.w	r0, #0
 800b664:	f04f 0100 	mov.w	r1, #0
 800b668:	0259      	lsls	r1, r3, #9
 800b66a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b66e:	0250      	lsls	r0, r2, #9
 800b670:	4602      	mov	r2, r0
 800b672:	460b      	mov	r3, r1
 800b674:	4610      	mov	r0, r2
 800b676:	4619      	mov	r1, r3
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	461a      	mov	r2, r3
 800b67c:	f04f 0300 	mov.w	r3, #0
 800b680:	f7f4 fe16 	bl	80002b0 <__aeabi_uldivmod>
 800b684:	4602      	mov	r2, r0
 800b686:	460b      	mov	r3, r1
 800b688:	4613      	mov	r3, r2
 800b68a:	61fb      	str	r3, [r7, #28]
 800b68c:	e04c      	b.n	800b728 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b68e:	4b8a      	ldr	r3, [pc, #552]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	099b      	lsrs	r3, r3, #6
 800b694:	461a      	mov	r2, r3
 800b696:	f04f 0300 	mov.w	r3, #0
 800b69a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b69e:	f04f 0100 	mov.w	r1, #0
 800b6a2:	ea02 0a00 	and.w	sl, r2, r0
 800b6a6:	ea03 0b01 	and.w	fp, r3, r1
 800b6aa:	4650      	mov	r0, sl
 800b6ac:	4659      	mov	r1, fp
 800b6ae:	f04f 0200 	mov.w	r2, #0
 800b6b2:	f04f 0300 	mov.w	r3, #0
 800b6b6:	014b      	lsls	r3, r1, #5
 800b6b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b6bc:	0142      	lsls	r2, r0, #5
 800b6be:	4610      	mov	r0, r2
 800b6c0:	4619      	mov	r1, r3
 800b6c2:	ebb0 000a 	subs.w	r0, r0, sl
 800b6c6:	eb61 010b 	sbc.w	r1, r1, fp
 800b6ca:	f04f 0200 	mov.w	r2, #0
 800b6ce:	f04f 0300 	mov.w	r3, #0
 800b6d2:	018b      	lsls	r3, r1, #6
 800b6d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b6d8:	0182      	lsls	r2, r0, #6
 800b6da:	1a12      	subs	r2, r2, r0
 800b6dc:	eb63 0301 	sbc.w	r3, r3, r1
 800b6e0:	f04f 0000 	mov.w	r0, #0
 800b6e4:	f04f 0100 	mov.w	r1, #0
 800b6e8:	00d9      	lsls	r1, r3, #3
 800b6ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b6ee:	00d0      	lsls	r0, r2, #3
 800b6f0:	4602      	mov	r2, r0
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	eb12 020a 	adds.w	r2, r2, sl
 800b6f8:	eb43 030b 	adc.w	r3, r3, fp
 800b6fc:	f04f 0000 	mov.w	r0, #0
 800b700:	f04f 0100 	mov.w	r1, #0
 800b704:	0299      	lsls	r1, r3, #10
 800b706:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b70a:	0290      	lsls	r0, r2, #10
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4610      	mov	r0, r2
 800b712:	4619      	mov	r1, r3
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	461a      	mov	r2, r3
 800b718:	f04f 0300 	mov.w	r3, #0
 800b71c:	f7f4 fdc8 	bl	80002b0 <__aeabi_uldivmod>
 800b720:	4602      	mov	r2, r0
 800b722:	460b      	mov	r3, r1
 800b724:	4613      	mov	r3, r2
 800b726:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b728:	4b63      	ldr	r3, [pc, #396]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b72a:	685b      	ldr	r3, [r3, #4]
 800b72c:	0c1b      	lsrs	r3, r3, #16
 800b72e:	f003 0303 	and.w	r3, r3, #3
 800b732:	3301      	adds	r3, #1
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 800b738:	69fa      	ldr	r2, [r7, #28]
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b740:	61bb      	str	r3, [r7, #24]
      break;
 800b742:	e0b2      	b.n	800b8aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b744:	4b5c      	ldr	r3, [pc, #368]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b74c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b74e:	4b5a      	ldr	r3, [pc, #360]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b756:	2b00      	cmp	r3, #0
 800b758:	d04d      	beq.n	800b7f6 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b75a:	4b57      	ldr	r3, [pc, #348]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b75c:	685b      	ldr	r3, [r3, #4]
 800b75e:	099b      	lsrs	r3, r3, #6
 800b760:	461a      	mov	r2, r3
 800b762:	f04f 0300 	mov.w	r3, #0
 800b766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b76a:	f04f 0100 	mov.w	r1, #0
 800b76e:	ea02 0800 	and.w	r8, r2, r0
 800b772:	ea03 0901 	and.w	r9, r3, r1
 800b776:	4640      	mov	r0, r8
 800b778:	4649      	mov	r1, r9
 800b77a:	f04f 0200 	mov.w	r2, #0
 800b77e:	f04f 0300 	mov.w	r3, #0
 800b782:	014b      	lsls	r3, r1, #5
 800b784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b788:	0142      	lsls	r2, r0, #5
 800b78a:	4610      	mov	r0, r2
 800b78c:	4619      	mov	r1, r3
 800b78e:	ebb0 0008 	subs.w	r0, r0, r8
 800b792:	eb61 0109 	sbc.w	r1, r1, r9
 800b796:	f04f 0200 	mov.w	r2, #0
 800b79a:	f04f 0300 	mov.w	r3, #0
 800b79e:	018b      	lsls	r3, r1, #6
 800b7a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b7a4:	0182      	lsls	r2, r0, #6
 800b7a6:	1a12      	subs	r2, r2, r0
 800b7a8:	eb63 0301 	sbc.w	r3, r3, r1
 800b7ac:	f04f 0000 	mov.w	r0, #0
 800b7b0:	f04f 0100 	mov.w	r1, #0
 800b7b4:	00d9      	lsls	r1, r3, #3
 800b7b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b7ba:	00d0      	lsls	r0, r2, #3
 800b7bc:	4602      	mov	r2, r0
 800b7be:	460b      	mov	r3, r1
 800b7c0:	eb12 0208 	adds.w	r2, r2, r8
 800b7c4:	eb43 0309 	adc.w	r3, r3, r9
 800b7c8:	f04f 0000 	mov.w	r0, #0
 800b7cc:	f04f 0100 	mov.w	r1, #0
 800b7d0:	0259      	lsls	r1, r3, #9
 800b7d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800b7d6:	0250      	lsls	r0, r2, #9
 800b7d8:	4602      	mov	r2, r0
 800b7da:	460b      	mov	r3, r1
 800b7dc:	4610      	mov	r0, r2
 800b7de:	4619      	mov	r1, r3
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	f04f 0300 	mov.w	r3, #0
 800b7e8:	f7f4 fd62 	bl	80002b0 <__aeabi_uldivmod>
 800b7ec:	4602      	mov	r2, r0
 800b7ee:	460b      	mov	r3, r1
 800b7f0:	4613      	mov	r3, r2
 800b7f2:	61fb      	str	r3, [r7, #28]
 800b7f4:	e04a      	b.n	800b88c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7f6:	4b30      	ldr	r3, [pc, #192]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	099b      	lsrs	r3, r3, #6
 800b7fc:	461a      	mov	r2, r3
 800b7fe:	f04f 0300 	mov.w	r3, #0
 800b802:	f240 10ff 	movw	r0, #511	; 0x1ff
 800b806:	f04f 0100 	mov.w	r1, #0
 800b80a:	ea02 0400 	and.w	r4, r2, r0
 800b80e:	ea03 0501 	and.w	r5, r3, r1
 800b812:	4620      	mov	r0, r4
 800b814:	4629      	mov	r1, r5
 800b816:	f04f 0200 	mov.w	r2, #0
 800b81a:	f04f 0300 	mov.w	r3, #0
 800b81e:	014b      	lsls	r3, r1, #5
 800b820:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800b824:	0142      	lsls	r2, r0, #5
 800b826:	4610      	mov	r0, r2
 800b828:	4619      	mov	r1, r3
 800b82a:	1b00      	subs	r0, r0, r4
 800b82c:	eb61 0105 	sbc.w	r1, r1, r5
 800b830:	f04f 0200 	mov.w	r2, #0
 800b834:	f04f 0300 	mov.w	r3, #0
 800b838:	018b      	lsls	r3, r1, #6
 800b83a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800b83e:	0182      	lsls	r2, r0, #6
 800b840:	1a12      	subs	r2, r2, r0
 800b842:	eb63 0301 	sbc.w	r3, r3, r1
 800b846:	f04f 0000 	mov.w	r0, #0
 800b84a:	f04f 0100 	mov.w	r1, #0
 800b84e:	00d9      	lsls	r1, r3, #3
 800b850:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800b854:	00d0      	lsls	r0, r2, #3
 800b856:	4602      	mov	r2, r0
 800b858:	460b      	mov	r3, r1
 800b85a:	1912      	adds	r2, r2, r4
 800b85c:	eb45 0303 	adc.w	r3, r5, r3
 800b860:	f04f 0000 	mov.w	r0, #0
 800b864:	f04f 0100 	mov.w	r1, #0
 800b868:	0299      	lsls	r1, r3, #10
 800b86a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800b86e:	0290      	lsls	r0, r2, #10
 800b870:	4602      	mov	r2, r0
 800b872:	460b      	mov	r3, r1
 800b874:	4610      	mov	r0, r2
 800b876:	4619      	mov	r1, r3
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	461a      	mov	r2, r3
 800b87c:	f04f 0300 	mov.w	r3, #0
 800b880:	f7f4 fd16 	bl	80002b0 <__aeabi_uldivmod>
 800b884:	4602      	mov	r2, r0
 800b886:	460b      	mov	r3, r1
 800b888:	4613      	mov	r3, r2
 800b88a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b88c:	4b0a      	ldr	r3, [pc, #40]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0x358>)
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	0f1b      	lsrs	r3, r3, #28
 800b892:	f003 0307 	and.w	r3, r3, #7
 800b896:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800b898:	69fa      	ldr	r2, [r7, #28]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8a0:	61bb      	str	r3, [r7, #24]
      break;
 800b8a2:	e002      	b.n	800b8aa <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b8a4:	4b05      	ldr	r3, [pc, #20]	; (800b8bc <HAL_RCC_GetSysClockFreq+0x35c>)
 800b8a6:	61bb      	str	r3, [r7, #24]
      break;
 800b8a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b8aa:	69bb      	ldr	r3, [r7, #24]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3720      	adds	r7, #32
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b8b6:	bf00      	nop
 800b8b8:	40023800 	.word	0x40023800
 800b8bc:	00f42400 	.word	0x00f42400
 800b8c0:	007a1200 	.word	0x007a1200

0800b8c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b086      	sub	sp, #24
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d101      	bne.n	800b8d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e28d      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f003 0301 	and.w	r3, r3, #1
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	f000 8083 	beq.w	800b9ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b8e4:	4b94      	ldr	r3, [pc, #592]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	f003 030c 	and.w	r3, r3, #12
 800b8ec:	2b04      	cmp	r3, #4
 800b8ee:	d019      	beq.n	800b924 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b8f0:	4b91      	ldr	r3, [pc, #580]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b8f8:	2b08      	cmp	r3, #8
 800b8fa:	d106      	bne.n	800b90a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b8fc:	4b8e      	ldr	r3, [pc, #568]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b908:	d00c      	beq.n	800b924 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b90a:	4b8b      	ldr	r3, [pc, #556]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b912:	2b0c      	cmp	r3, #12
 800b914:	d112      	bne.n	800b93c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b916:	4b88      	ldr	r3, [pc, #544]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b918:	685b      	ldr	r3, [r3, #4]
 800b91a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b91e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b922:	d10b      	bne.n	800b93c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b924:	4b84      	ldr	r3, [pc, #528]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d05b      	beq.n	800b9e8 <HAL_RCC_OscConfig+0x124>
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	685b      	ldr	r3, [r3, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d157      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800b938:	2301      	movs	r3, #1
 800b93a:	e25a      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b944:	d106      	bne.n	800b954 <HAL_RCC_OscConfig+0x90>
 800b946:	4b7c      	ldr	r3, [pc, #496]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	4a7b      	ldr	r2, [pc, #492]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b94c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b950:	6013      	str	r3, [r2, #0]
 800b952:	e01d      	b.n	800b990 <HAL_RCC_OscConfig+0xcc>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b95c:	d10c      	bne.n	800b978 <HAL_RCC_OscConfig+0xb4>
 800b95e:	4b76      	ldr	r3, [pc, #472]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4a75      	ldr	r2, [pc, #468]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b968:	6013      	str	r3, [r2, #0]
 800b96a:	4b73      	ldr	r3, [pc, #460]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	4a72      	ldr	r2, [pc, #456]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b974:	6013      	str	r3, [r2, #0]
 800b976:	e00b      	b.n	800b990 <HAL_RCC_OscConfig+0xcc>
 800b978:	4b6f      	ldr	r3, [pc, #444]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a6e      	ldr	r2, [pc, #440]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b97e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b982:	6013      	str	r3, [r2, #0]
 800b984:	4b6c      	ldr	r3, [pc, #432]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	4a6b      	ldr	r2, [pc, #428]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b98a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b98e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	685b      	ldr	r3, [r3, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d013      	beq.n	800b9c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b998:	f7fa fdec 	bl	8006574 <HAL_GetTick>
 800b99c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b99e:	e008      	b.n	800b9b2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b9a0:	f7fa fde8 	bl	8006574 <HAL_GetTick>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	2b64      	cmp	r3, #100	; 0x64
 800b9ac:	d901      	bls.n	800b9b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	e21f      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b9b2:	4b61      	ldr	r3, [pc, #388]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0f0      	beq.n	800b9a0 <HAL_RCC_OscConfig+0xdc>
 800b9be:	e014      	b.n	800b9ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9c0:	f7fa fdd8 	bl	8006574 <HAL_GetTick>
 800b9c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b9c6:	e008      	b.n	800b9da <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b9c8:	f7fa fdd4 	bl	8006574 <HAL_GetTick>
 800b9cc:	4602      	mov	r2, r0
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	1ad3      	subs	r3, r2, r3
 800b9d2:	2b64      	cmp	r3, #100	; 0x64
 800b9d4:	d901      	bls.n	800b9da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800b9d6:	2303      	movs	r3, #3
 800b9d8:	e20b      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b9da:	4b57      	ldr	r3, [pc, #348]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1f0      	bne.n	800b9c8 <HAL_RCC_OscConfig+0x104>
 800b9e6:	e000      	b.n	800b9ea <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f003 0302 	and.w	r3, r3, #2
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d06f      	beq.n	800bad6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b9f6:	4b50      	ldr	r3, [pc, #320]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	f003 030c 	and.w	r3, r3, #12
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d017      	beq.n	800ba32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba02:	4b4d      	ldr	r3, [pc, #308]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba0a:	2b08      	cmp	r3, #8
 800ba0c:	d105      	bne.n	800ba1a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba0e:	4b4a      	ldr	r3, [pc, #296]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d00b      	beq.n	800ba32 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba1a:	4b47      	ldr	r3, [pc, #284]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800ba22:	2b0c      	cmp	r3, #12
 800ba24:	d11c      	bne.n	800ba60 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ba26:	4b44      	ldr	r3, [pc, #272]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d116      	bne.n	800ba60 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ba32:	4b41      	ldr	r3, [pc, #260]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	f003 0302 	and.w	r3, r3, #2
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d005      	beq.n	800ba4a <HAL_RCC_OscConfig+0x186>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d001      	beq.n	800ba4a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800ba46:	2301      	movs	r3, #1
 800ba48:	e1d3      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba4a:	4b3b      	ldr	r3, [pc, #236]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	691b      	ldr	r3, [r3, #16]
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	4937      	ldr	r1, [pc, #220]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ba5e:	e03a      	b.n	800bad6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	68db      	ldr	r3, [r3, #12]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d020      	beq.n	800baaa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ba68:	4b34      	ldr	r3, [pc, #208]	; (800bb3c <HAL_RCC_OscConfig+0x278>)
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba6e:	f7fa fd81 	bl	8006574 <HAL_GetTick>
 800ba72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba74:	e008      	b.n	800ba88 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800ba76:	f7fa fd7d 	bl	8006574 <HAL_GetTick>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	1ad3      	subs	r3, r2, r3
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d901      	bls.n	800ba88 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800ba84:	2303      	movs	r3, #3
 800ba86:	e1b4      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba88:	4b2b      	ldr	r3, [pc, #172]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d0f0      	beq.n	800ba76 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba94:	4b28      	ldr	r3, [pc, #160]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	691b      	ldr	r3, [r3, #16]
 800baa0:	00db      	lsls	r3, r3, #3
 800baa2:	4925      	ldr	r1, [pc, #148]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800baa4:	4313      	orrs	r3, r2
 800baa6:	600b      	str	r3, [r1, #0]
 800baa8:	e015      	b.n	800bad6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800baaa:	4b24      	ldr	r3, [pc, #144]	; (800bb3c <HAL_RCC_OscConfig+0x278>)
 800baac:	2200      	movs	r2, #0
 800baae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bab0:	f7fa fd60 	bl	8006574 <HAL_GetTick>
 800bab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bab6:	e008      	b.n	800baca <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bab8:	f7fa fd5c 	bl	8006574 <HAL_GetTick>
 800babc:	4602      	mov	r2, r0
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	1ad3      	subs	r3, r2, r3
 800bac2:	2b02      	cmp	r3, #2
 800bac4:	d901      	bls.n	800baca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	e193      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800baca:	4b1b      	ldr	r3, [pc, #108]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	f003 0302 	and.w	r3, r3, #2
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1f0      	bne.n	800bab8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	f003 0308 	and.w	r3, r3, #8
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d036      	beq.n	800bb50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	695b      	ldr	r3, [r3, #20]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d016      	beq.n	800bb18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800baea:	4b15      	ldr	r3, [pc, #84]	; (800bb40 <HAL_RCC_OscConfig+0x27c>)
 800baec:	2201      	movs	r2, #1
 800baee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baf0:	f7fa fd40 	bl	8006574 <HAL_GetTick>
 800baf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800baf6:	e008      	b.n	800bb0a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800baf8:	f7fa fd3c 	bl	8006574 <HAL_GetTick>
 800bafc:	4602      	mov	r2, r0
 800bafe:	693b      	ldr	r3, [r7, #16]
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	2b02      	cmp	r3, #2
 800bb04:	d901      	bls.n	800bb0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800bb06:	2303      	movs	r3, #3
 800bb08:	e173      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb0a:	4b0b      	ldr	r3, [pc, #44]	; (800bb38 <HAL_RCC_OscConfig+0x274>)
 800bb0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb0e:	f003 0302 	and.w	r3, r3, #2
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d0f0      	beq.n	800baf8 <HAL_RCC_OscConfig+0x234>
 800bb16:	e01b      	b.n	800bb50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bb18:	4b09      	ldr	r3, [pc, #36]	; (800bb40 <HAL_RCC_OscConfig+0x27c>)
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb1e:	f7fa fd29 	bl	8006574 <HAL_GetTick>
 800bb22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bb24:	e00e      	b.n	800bb44 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb26:	f7fa fd25 	bl	8006574 <HAL_GetTick>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	1ad3      	subs	r3, r2, r3
 800bb30:	2b02      	cmp	r3, #2
 800bb32:	d907      	bls.n	800bb44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800bb34:	2303      	movs	r3, #3
 800bb36:	e15c      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
 800bb38:	40023800 	.word	0x40023800
 800bb3c:	42470000 	.word	0x42470000
 800bb40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bb44:	4b8a      	ldr	r3, [pc, #552]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bb46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb48:	f003 0302 	and.w	r3, r3, #2
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d1ea      	bne.n	800bb26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f003 0304 	and.w	r3, r3, #4
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f000 8097 	beq.w	800bc8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bb62:	4b83      	ldr	r3, [pc, #524]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bb64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10f      	bne.n	800bb8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bb6e:	2300      	movs	r3, #0
 800bb70:	60bb      	str	r3, [r7, #8]
 800bb72:	4b7f      	ldr	r3, [pc, #508]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bb74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb76:	4a7e      	ldr	r2, [pc, #504]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bb78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb7c:	6413      	str	r3, [r2, #64]	; 0x40
 800bb7e:	4b7c      	ldr	r3, [pc, #496]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bb80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bb86:	60bb      	str	r3, [r7, #8]
 800bb88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bb8e:	4b79      	ldr	r3, [pc, #484]	; (800bd74 <HAL_RCC_OscConfig+0x4b0>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d118      	bne.n	800bbcc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bb9a:	4b76      	ldr	r3, [pc, #472]	; (800bd74 <HAL_RCC_OscConfig+0x4b0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	4a75      	ldr	r2, [pc, #468]	; (800bd74 <HAL_RCC_OscConfig+0x4b0>)
 800bba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bba6:	f7fa fce5 	bl	8006574 <HAL_GetTick>
 800bbaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bbac:	e008      	b.n	800bbc0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bbae:	f7fa fce1 	bl	8006574 <HAL_GetTick>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d901      	bls.n	800bbc0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	e118      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bbc0:	4b6c      	ldr	r3, [pc, #432]	; (800bd74 <HAL_RCC_OscConfig+0x4b0>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d0f0      	beq.n	800bbae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	689b      	ldr	r3, [r3, #8]
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d106      	bne.n	800bbe2 <HAL_RCC_OscConfig+0x31e>
 800bbd4:	4b66      	ldr	r3, [pc, #408]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bbd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbd8:	4a65      	ldr	r2, [pc, #404]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bbda:	f043 0301 	orr.w	r3, r3, #1
 800bbde:	6713      	str	r3, [r2, #112]	; 0x70
 800bbe0:	e01c      	b.n	800bc1c <HAL_RCC_OscConfig+0x358>
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	689b      	ldr	r3, [r3, #8]
 800bbe6:	2b05      	cmp	r3, #5
 800bbe8:	d10c      	bne.n	800bc04 <HAL_RCC_OscConfig+0x340>
 800bbea:	4b61      	ldr	r3, [pc, #388]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bbec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbee:	4a60      	ldr	r2, [pc, #384]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bbf0:	f043 0304 	orr.w	r3, r3, #4
 800bbf4:	6713      	str	r3, [r2, #112]	; 0x70
 800bbf6:	4b5e      	ldr	r3, [pc, #376]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bbf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbfa:	4a5d      	ldr	r2, [pc, #372]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bbfc:	f043 0301 	orr.w	r3, r3, #1
 800bc00:	6713      	str	r3, [r2, #112]	; 0x70
 800bc02:	e00b      	b.n	800bc1c <HAL_RCC_OscConfig+0x358>
 800bc04:	4b5a      	ldr	r3, [pc, #360]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bc06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc08:	4a59      	ldr	r2, [pc, #356]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bc0a:	f023 0301 	bic.w	r3, r3, #1
 800bc0e:	6713      	str	r3, [r2, #112]	; 0x70
 800bc10:	4b57      	ldr	r3, [pc, #348]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bc12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc14:	4a56      	ldr	r2, [pc, #344]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bc16:	f023 0304 	bic.w	r3, r3, #4
 800bc1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	689b      	ldr	r3, [r3, #8]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d015      	beq.n	800bc50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc24:	f7fa fca6 	bl	8006574 <HAL_GetTick>
 800bc28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc2a:	e00a      	b.n	800bc42 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc2c:	f7fa fca2 	bl	8006574 <HAL_GetTick>
 800bc30:	4602      	mov	r2, r0
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	1ad3      	subs	r3, r2, r3
 800bc36:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d901      	bls.n	800bc42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800bc3e:	2303      	movs	r3, #3
 800bc40:	e0d7      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bc42:	4b4b      	ldr	r3, [pc, #300]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bc44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc46:	f003 0302 	and.w	r3, r3, #2
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d0ee      	beq.n	800bc2c <HAL_RCC_OscConfig+0x368>
 800bc4e:	e014      	b.n	800bc7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc50:	f7fa fc90 	bl	8006574 <HAL_GetTick>
 800bc54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bc56:	e00a      	b.n	800bc6e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bc58:	f7fa fc8c 	bl	8006574 <HAL_GetTick>
 800bc5c:	4602      	mov	r2, r0
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d901      	bls.n	800bc6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800bc6a:	2303      	movs	r3, #3
 800bc6c:	e0c1      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bc6e:	4b40      	ldr	r3, [pc, #256]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bc70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc72:	f003 0302 	and.w	r3, r3, #2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1ee      	bne.n	800bc58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bc7a:	7dfb      	ldrb	r3, [r7, #23]
 800bc7c:	2b01      	cmp	r3, #1
 800bc7e:	d105      	bne.n	800bc8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bc80:	4b3b      	ldr	r3, [pc, #236]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc84:	4a3a      	ldr	r2, [pc, #232]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bc86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	699b      	ldr	r3, [r3, #24]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 80ad 	beq.w	800bdf0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bc96:	4b36      	ldr	r3, [pc, #216]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	f003 030c 	and.w	r3, r3, #12
 800bc9e:	2b08      	cmp	r3, #8
 800bca0:	d060      	beq.n	800bd64 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	699b      	ldr	r3, [r3, #24]
 800bca6:	2b02      	cmp	r3, #2
 800bca8:	d145      	bne.n	800bd36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bcaa:	4b33      	ldr	r3, [pc, #204]	; (800bd78 <HAL_RCC_OscConfig+0x4b4>)
 800bcac:	2200      	movs	r2, #0
 800bcae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bcb0:	f7fa fc60 	bl	8006574 <HAL_GetTick>
 800bcb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcb6:	e008      	b.n	800bcca <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bcb8:	f7fa fc5c 	bl	8006574 <HAL_GetTick>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	693b      	ldr	r3, [r7, #16]
 800bcc0:	1ad3      	subs	r3, r2, r3
 800bcc2:	2b02      	cmp	r3, #2
 800bcc4:	d901      	bls.n	800bcca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800bcc6:	2303      	movs	r3, #3
 800bcc8:	e093      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bcca:	4b29      	ldr	r3, [pc, #164]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1f0      	bne.n	800bcb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	69da      	ldr	r2, [r3, #28]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6a1b      	ldr	r3, [r3, #32]
 800bcde:	431a      	orrs	r2, r3
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce4:	019b      	lsls	r3, r3, #6
 800bce6:	431a      	orrs	r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcec:	085b      	lsrs	r3, r3, #1
 800bcee:	3b01      	subs	r3, #1
 800bcf0:	041b      	lsls	r3, r3, #16
 800bcf2:	431a      	orrs	r2, r3
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcf8:	061b      	lsls	r3, r3, #24
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd00:	071b      	lsls	r3, r3, #28
 800bd02:	491b      	ldr	r1, [pc, #108]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bd04:	4313      	orrs	r3, r2
 800bd06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd08:	4b1b      	ldr	r3, [pc, #108]	; (800bd78 <HAL_RCC_OscConfig+0x4b4>)
 800bd0a:	2201      	movs	r2, #1
 800bd0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd0e:	f7fa fc31 	bl	8006574 <HAL_GetTick>
 800bd12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd14:	e008      	b.n	800bd28 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd16:	f7fa fc2d 	bl	8006574 <HAL_GetTick>
 800bd1a:	4602      	mov	r2, r0
 800bd1c:	693b      	ldr	r3, [r7, #16]
 800bd1e:	1ad3      	subs	r3, r2, r3
 800bd20:	2b02      	cmp	r3, #2
 800bd22:	d901      	bls.n	800bd28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800bd24:	2303      	movs	r3, #3
 800bd26:	e064      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd28:	4b11      	ldr	r3, [pc, #68]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d0f0      	beq.n	800bd16 <HAL_RCC_OscConfig+0x452>
 800bd34:	e05c      	b.n	800bdf0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd36:	4b10      	ldr	r3, [pc, #64]	; (800bd78 <HAL_RCC_OscConfig+0x4b4>)
 800bd38:	2200      	movs	r2, #0
 800bd3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd3c:	f7fa fc1a 	bl	8006574 <HAL_GetTick>
 800bd40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd42:	e008      	b.n	800bd56 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd44:	f7fa fc16 	bl	8006574 <HAL_GetTick>
 800bd48:	4602      	mov	r2, r0
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	1ad3      	subs	r3, r2, r3
 800bd4e:	2b02      	cmp	r3, #2
 800bd50:	d901      	bls.n	800bd56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800bd52:	2303      	movs	r3, #3
 800bd54:	e04d      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd56:	4b06      	ldr	r3, [pc, #24]	; (800bd70 <HAL_RCC_OscConfig+0x4ac>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d1f0      	bne.n	800bd44 <HAL_RCC_OscConfig+0x480>
 800bd62:	e045      	b.n	800bdf0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	699b      	ldr	r3, [r3, #24]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d107      	bne.n	800bd7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e040      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
 800bd70:	40023800 	.word	0x40023800
 800bd74:	40007000 	.word	0x40007000
 800bd78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800bd7c:	4b1f      	ldr	r3, [pc, #124]	; (800bdfc <HAL_RCC_OscConfig+0x538>)
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	699b      	ldr	r3, [r3, #24]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d030      	beq.n	800bdec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d129      	bne.n	800bdec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d122      	bne.n	800bdec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bdac:	4013      	ands	r3, r2
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bdb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d119      	bne.n	800bdec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdc2:	085b      	lsrs	r3, r3, #1
 800bdc4:	3b01      	subs	r3, #1
 800bdc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d10f      	bne.n	800bdec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d107      	bne.n	800bdec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d001      	beq.n	800bdf0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800bdec:	2301      	movs	r3, #1
 800bdee:	e000      	b.n	800bdf2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800bdf0:	2300      	movs	r3, #0
}
 800bdf2:	4618      	mov	r0, r3
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	40023800 	.word	0x40023800

0800be00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b082      	sub	sp, #8
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d101      	bne.n	800be12 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800be0e:	2301      	movs	r3, #1
 800be10:	e083      	b.n	800bf1a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	7f5b      	ldrb	r3, [r3, #29]
 800be16:	b2db      	uxtb	r3, r3
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d105      	bne.n	800be28 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7fa f906 	bl	8006034 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2202      	movs	r2, #2
 800be2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	22ca      	movs	r2, #202	; 0xca
 800be34:	625a      	str	r2, [r3, #36]	; 0x24
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2253      	movs	r2, #83	; 0x53
 800be3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 f944 	bl	800c0cc <RTC_EnterInitMode>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d008      	beq.n	800be5c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	22ff      	movs	r2, #255	; 0xff
 800be50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2204      	movs	r2, #4
 800be56:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800be58:	2301      	movs	r3, #1
 800be5a:	e05e      	b.n	800bf1a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	689b      	ldr	r3, [r3, #8]
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	6812      	ldr	r2, [r2, #0]
 800be66:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800be6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be6e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	6899      	ldr	r1, [r3, #8]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	685a      	ldr	r2, [r3, #4]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	691b      	ldr	r3, [r3, #16]
 800be7e:	431a      	orrs	r2, r3
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	695b      	ldr	r3, [r3, #20]
 800be84:	431a      	orrs	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	430a      	orrs	r2, r1
 800be8c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	68d2      	ldr	r2, [r2, #12]
 800be96:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	6919      	ldr	r1, [r3, #16]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	041a      	lsls	r2, r3, #16
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	430a      	orrs	r2, r1
 800beaa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	68da      	ldr	r2, [r3, #12]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800beba:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	f003 0320 	and.w	r3, r3, #32
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d10e      	bne.n	800bee8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f8d6 	bl	800c07c <HAL_RTC_WaitForSynchro>
 800bed0:	4603      	mov	r3, r0
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d008      	beq.n	800bee8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	22ff      	movs	r2, #255	; 0xff
 800bedc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	2204      	movs	r2, #4
 800bee2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800bee4:	2301      	movs	r3, #1
 800bee6:	e018      	b.n	800bf1a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bef6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	699a      	ldr	r2, [r3, #24]
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	430a      	orrs	r2, r1
 800bf08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	22ff      	movs	r2, #255	; 0xff
 800bf10:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	2201      	movs	r2, #1
 800bf16:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800bf18:	2300      	movs	r3, #0
  }
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3708      	adds	r7, #8
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b086      	sub	sp, #24
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	60f8      	str	r0, [r7, #12]
 800bf2a:	60b9      	str	r1, [r7, #8]
 800bf2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	691b      	ldr	r3, [r3, #16]
 800bf42:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800bf46:	68bb      	ldr	r3, [r7, #8]
 800bf48:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800bf54:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800bf58:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800bf5a:	697b      	ldr	r3, [r7, #20]
 800bf5c:	0c1b      	lsrs	r3, r3, #16
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800bf6a:	697b      	ldr	r3, [r7, #20]
 800bf6c:	0a1b      	lsrs	r3, r3, #8
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	68bb      	ldr	r3, [r7, #8]
 800bf78:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf82:	b2da      	uxtb	r2, r3
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800bf88:	697b      	ldr	r3, [r7, #20]
 800bf8a:	0c1b      	lsrs	r3, r3, #16
 800bf8c:	b2db      	uxtb	r3, r3
 800bf8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	68bb      	ldr	r3, [r7, #8]
 800bf96:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d11a      	bne.n	800bfd4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 f8be 	bl	800c124 <RTC_Bcd2ToByte>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	461a      	mov	r2, r3
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	785b      	ldrb	r3, [r3, #1]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f000 f8b5 	bl	800c124 <RTC_Bcd2ToByte>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	789b      	ldrb	r3, [r3, #2]
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	f000 f8ac 	bl	800c124 <RTC_Bcd2ToByte>
 800bfcc:	4603      	mov	r3, r0
 800bfce:	461a      	mov	r2, r3
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800bfd4:	2300      	movs	r3, #0
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b086      	sub	sp, #24
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	60f8      	str	r0, [r7, #12]
 800bfe6:	60b9      	str	r1, [r7, #8]
 800bfe8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800bfea:	2300      	movs	r3, #0
 800bfec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	685b      	ldr	r3, [r3, #4]
 800bff4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bff8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bffc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	0c1b      	lsrs	r3, r3, #16
 800c002:	b2da      	uxtb	r2, r3
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	0a1b      	lsrs	r3, r3, #8
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	f003 031f 	and.w	r3, r3, #31
 800c012:	b2da      	uxtb	r2, r3
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c020:	b2da      	uxtb	r2, r3
 800c022:	68bb      	ldr	r3, [r7, #8]
 800c024:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	0b5b      	lsrs	r3, r3, #13
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	f003 0307 	and.w	r3, r3, #7
 800c030:	b2da      	uxtb	r2, r3
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d11a      	bne.n	800c072 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	78db      	ldrb	r3, [r3, #3]
 800c040:	4618      	mov	r0, r3
 800c042:	f000 f86f 	bl	800c124 <RTC_Bcd2ToByte>
 800c046:	4603      	mov	r3, r0
 800c048:	461a      	mov	r2, r3
 800c04a:	68bb      	ldr	r3, [r7, #8]
 800c04c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	785b      	ldrb	r3, [r3, #1]
 800c052:	4618      	mov	r0, r3
 800c054:	f000 f866 	bl	800c124 <RTC_Bcd2ToByte>
 800c058:	4603      	mov	r3, r0
 800c05a:	461a      	mov	r2, r3
 800c05c:	68bb      	ldr	r3, [r7, #8]
 800c05e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	789b      	ldrb	r3, [r3, #2]
 800c064:	4618      	mov	r0, r3
 800c066:	f000 f85d 	bl	800c124 <RTC_Bcd2ToByte>
 800c06a:	4603      	mov	r3, r0
 800c06c:	461a      	mov	r2, r3
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c072:	2300      	movs	r3, #0
}
 800c074:	4618      	mov	r0, r3
 800c076:	3718      	adds	r7, #24
 800c078:	46bd      	mov	sp, r7
 800c07a:	bd80      	pop	{r7, pc}

0800c07c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800c07c:	b580      	push	{r7, lr}
 800c07e:	b084      	sub	sp, #16
 800c080:	af00      	add	r7, sp, #0
 800c082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c084:	2300      	movs	r3, #0
 800c086:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	68da      	ldr	r2, [r3, #12]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c096:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c098:	f7fa fa6c 	bl	8006574 <HAL_GetTick>
 800c09c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c09e:	e009      	b.n	800c0b4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c0a0:	f7fa fa68 	bl	8006574 <HAL_GetTick>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	1ad3      	subs	r3, r2, r3
 800c0aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0ae:	d901      	bls.n	800c0b4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	e007      	b.n	800c0c4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	68db      	ldr	r3, [r3, #12]
 800c0ba:	f003 0320 	and.w	r3, r3, #32
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d0ee      	beq.n	800c0a0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3710      	adds	r7, #16
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	bd80      	pop	{r7, pc}

0800c0cc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d119      	bne.n	800c11a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ee:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c0f0:	f7fa fa40 	bl	8006574 <HAL_GetTick>
 800c0f4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c0f6:	e009      	b.n	800c10c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800c0f8:	f7fa fa3c 	bl	8006574 <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c106:	d901      	bls.n	800c10c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800c108:	2303      	movs	r3, #3
 800c10a:	e007      	b.n	800c11c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c116:	2b00      	cmp	r3, #0
 800c118:	d0ee      	beq.n	800c0f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3710      	adds	r7, #16
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	4603      	mov	r3, r0
 800c12c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800c12e:	2300      	movs	r3, #0
 800c130:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800c132:	79fb      	ldrb	r3, [r7, #7]
 800c134:	091b      	lsrs	r3, r3, #4
 800c136:	b2db      	uxtb	r3, r3
 800c138:	461a      	mov	r2, r3
 800c13a:	4613      	mov	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	4413      	add	r3, r2
 800c140:	005b      	lsls	r3, r3, #1
 800c142:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800c144:	79fb      	ldrb	r3, [r7, #7]
 800c146:	f003 030f 	and.w	r3, r3, #15
 800c14a:	b2da      	uxtb	r2, r3
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	b2db      	uxtb	r3, r3
 800c150:	4413      	add	r3, r2
 800c152:	b2db      	uxtb	r3, r3
}
 800c154:	4618      	mov	r0, r3
 800c156:	3714      	adds	r7, #20
 800c158:	46bd      	mov	sp, r7
 800c15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c15e:	4770      	bx	lr

0800c160 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx where x can be from 0 to 19 to
  *                                 specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800c160:	b480      	push	{r7}
 800c162:	b085      	sub	sp, #20
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
 800c168:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800c16a:	2300      	movs	r3, #0
 800c16c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t)&(hrtc->Instance->BKP0R);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	3350      	adds	r3, #80	; 0x50
 800c174:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	009b      	lsls	r3, r3, #2
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	4413      	add	r3, r2
 800c17e:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	681b      	ldr	r3, [r3, #0]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3714      	adds	r7, #20
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d101      	bne.n	800c1a2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c19e:	2301      	movs	r3, #1
 800c1a0:	e022      	b.n	800c1e8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d105      	bne.n	800c1ba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f7f9 ff67 	bl	8006088 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2203      	movs	r2, #3
 800c1be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f814 	bl	800c1f0 <HAL_SD_InitCard>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d001      	beq.n	800c1d2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e00a      	b.n	800c1e8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}

0800c1f0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c1f0:	b5b0      	push	{r4, r5, r7, lr}
 800c1f2:	b08e      	sub	sp, #56	; 0x38
 800c1f4:	af04      	add	r7, sp, #16
 800c1f6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c200:	2300      	movs	r3, #0
 800c202:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c204:	2300      	movs	r3, #0
 800c206:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c208:	2300      	movs	r3, #0
 800c20a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c20c:	2376      	movs	r3, #118	; 0x76
 800c20e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681d      	ldr	r5, [r3, #0]
 800c214:	466c      	mov	r4, sp
 800c216:	f107 0314 	add.w	r3, r7, #20
 800c21a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c21e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c222:	f107 0308 	add.w	r3, r7, #8
 800c226:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c228:	4628      	mov	r0, r5
 800c22a:	f001 fde9 	bl	800de00 <SDIO_Init>
 800c22e:	4603      	mov	r3, r0
 800c230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d001      	beq.n	800c240 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c23c:	2301      	movs	r3, #1
 800c23e:	e04c      	b.n	800c2da <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c240:	4b28      	ldr	r3, [pc, #160]	; (800c2e4 <HAL_SD_InitCard+0xf4>)
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	4618      	mov	r0, r3
 800c24c:	f001 fe21 	bl	800de92 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c250:	4b24      	ldr	r3, [pc, #144]	; (800c2e4 <HAL_SD_InitCard+0xf4>)
 800c252:	2201      	movs	r2, #1
 800c254:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 ffee 	bl	800d238 <SD_PowerON>
 800c25c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c25e:	6a3b      	ldr	r3, [r7, #32]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d00b      	beq.n	800c27c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2201      	movs	r2, #1
 800c268:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c270:	6a3b      	ldr	r3, [r7, #32]
 800c272:	431a      	orrs	r2, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	e02e      	b.n	800c2da <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 ff0f 	bl	800d0a0 <SD_InitCard>
 800c282:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c284:	6a3b      	ldr	r3, [r7, #32]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d00b      	beq.n	800c2a2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2201      	movs	r2, #1
 800c28e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c296:	6a3b      	ldr	r3, [r7, #32]
 800c298:	431a      	orrs	r2, r3
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e01b      	b.n	800c2da <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f001 fe84 	bl	800dfb8 <SDMMC_CmdBlockLength>
 800c2b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2b2:	6a3b      	ldr	r3, [r7, #32]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00f      	beq.n	800c2d8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	4a0a      	ldr	r2, [pc, #40]	; (800c2e8 <HAL_SD_InitCard+0xf8>)
 800c2be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c2c4:	6a3b      	ldr	r3, [r7, #32]
 800c2c6:	431a      	orrs	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2201      	movs	r2, #1
 800c2d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	e000      	b.n	800c2da <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3728      	adds	r7, #40	; 0x28
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bdb0      	pop	{r4, r5, r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	422580a0 	.word	0x422580a0
 800c2e8:	004005ff 	.word	0x004005ff

0800c2ec <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b08c      	sub	sp, #48	; 0x30
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	60f8      	str	r0, [r7, #12]
 800c2f4:	60b9      	str	r1, [r7, #8]
 800c2f6:	607a      	str	r2, [r7, #4]
 800c2f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d107      	bne.n	800c314 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c308:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c310:	2301      	movs	r3, #1
 800c312:	e0be      	b.n	800c492 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c31a:	b2db      	uxtb	r3, r3
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	f040 80b7 	bne.w	800c490 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	2200      	movs	r2, #0
 800c326:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c328:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	441a      	add	r2, r3
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c332:	429a      	cmp	r2, r3
 800c334:	d907      	bls.n	800c346 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c33a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	e0a5      	b.n	800c492 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	2203      	movs	r2, #3
 800c34a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	2200      	movs	r2, #0
 800c354:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c364:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c36a:	4a4c      	ldr	r2, [pc, #304]	; (800c49c <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800c36c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c372:	4a4b      	ldr	r2, [pc, #300]	; (800c4a0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800c374:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c37a:	2200      	movs	r2, #0
 800c37c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c382:	2200      	movs	r2, #0
 800c384:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c396:	689a      	ldr	r2, [r3, #8]
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	430a      	orrs	r2, r1
 800c3a0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	3380      	adds	r3, #128	; 0x80
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	025b      	lsls	r3, r3, #9
 800c3b4:	089b      	lsrs	r3, r3, #2
 800c3b6:	f7fb fd87 	bl	8007ec8 <HAL_DMA_Start_IT>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d017      	beq.n	800c3f0 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c3ce:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	4a33      	ldr	r2, [pc, #204]	; (800c4a4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c3d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e050      	b.n	800c492 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c3f0:	4b2d      	ldr	r3, [pc, #180]	; (800c4a8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800c3f2:	2201      	movs	r2, #1
 800c3f4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3fa:	2b01      	cmp	r3, #1
 800c3fc:	d002      	beq.n	800c404 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800c3fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c400:	025b      	lsls	r3, r3, #9
 800c402:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c404:	f04f 33ff 	mov.w	r3, #4294967295
 800c408:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	025b      	lsls	r3, r3, #9
 800c40e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c410:	2390      	movs	r3, #144	; 0x90
 800c412:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c414:	2302      	movs	r3, #2
 800c416:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c418:	2300      	movs	r3, #0
 800c41a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c41c:	2301      	movs	r3, #1
 800c41e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f107 0210 	add.w	r2, r7, #16
 800c428:	4611      	mov	r1, r2
 800c42a:	4618      	mov	r0, r3
 800c42c:	f001 fd98 	bl	800df60 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	2b01      	cmp	r3, #1
 800c434:	d90a      	bls.n	800c44c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2282      	movs	r2, #130	; 0x82
 800c43a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c442:	4618      	mov	r0, r3
 800c444:	f001 fdfc 	bl	800e040 <SDMMC_CmdReadMultiBlock>
 800c448:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c44a:	e009      	b.n	800c460 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2281      	movs	r2, #129	; 0x81
 800c450:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c458:	4618      	mov	r0, r3
 800c45a:	f001 fdcf 	bl	800dffc <SDMMC_CmdReadSingleBlock>
 800c45e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c462:	2b00      	cmp	r3, #0
 800c464:	d012      	beq.n	800c48c <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4a0e      	ldr	r2, [pc, #56]	; (800c4a4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800c46c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c474:	431a      	orrs	r2, r3
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	2201      	movs	r2, #1
 800c47e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2200      	movs	r2, #0
 800c486:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c488:	2301      	movs	r3, #1
 800c48a:	e002      	b.n	800c492 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800c48c:	2300      	movs	r3, #0
 800c48e:	e000      	b.n	800c492 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800c490:	2302      	movs	r3, #2
  }
}
 800c492:	4618      	mov	r0, r3
 800c494:	3730      	adds	r7, #48	; 0x30
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	0800ceaf 	.word	0x0800ceaf
 800c4a0:	0800cf21 	.word	0x0800cf21
 800c4a4:	004005ff 	.word	0x004005ff
 800c4a8:	4225858c 	.word	0x4225858c

0800c4ac <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b08c      	sub	sp, #48	; 0x30
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	60f8      	str	r0, [r7, #12]
 800c4b4:	60b9      	str	r1, [r7, #8]
 800c4b6:	607a      	str	r2, [r7, #4]
 800c4b8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d107      	bne.n	800c4d4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	e0c1      	b.n	800c658 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c4da:	b2db      	uxtb	r3, r3
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	f040 80ba 	bne.w	800c656 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c4e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	441a      	add	r2, r3
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c4f2:	429a      	cmp	r2, r3
 800c4f4:	d907      	bls.n	800c506 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4fa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c502:	2301      	movs	r3, #1
 800c504:	e0a8      	b.n	800c658 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2203      	movs	r2, #3
 800c50a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	2200      	movs	r2, #0
 800c514:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f042 021a 	orr.w	r2, r2, #26
 800c524:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c52a:	4a4d      	ldr	r2, [pc, #308]	; (800c660 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800c52c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c532:	4a4c      	ldr	r2, [pc, #304]	; (800c664 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800c534:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c53a:	2200      	movs	r2, #0
 800c53c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c542:	2b01      	cmp	r3, #1
 800c544:	d002      	beq.n	800c54c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800c546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c548:	025b      	lsls	r3, r3, #9
 800c54a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	2b01      	cmp	r3, #1
 800c550:	d90a      	bls.n	800c568 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	22a0      	movs	r2, #160	; 0xa0
 800c556:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c55e:	4618      	mov	r0, r3
 800c560:	f001 fdb2 	bl	800e0c8 <SDMMC_CmdWriteMultiBlock>
 800c564:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c566:	e009      	b.n	800c57c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	2290      	movs	r2, #144	; 0x90
 800c56c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c574:	4618      	mov	r0, r3
 800c576:	f001 fd85 	bl	800e084 <SDMMC_CmdWriteSingleBlock>
 800c57a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800c57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d012      	beq.n	800c5a8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	4a38      	ldr	r2, [pc, #224]	; (800c668 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800c588:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c590:	431a      	orrs	r2, r3
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2201      	movs	r2, #1
 800c59a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	e057      	b.n	800c658 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800c5a8:	4b30      	ldr	r3, [pc, #192]	; (800c66c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5b2:	2240      	movs	r2, #64	; 0x40
 800c5b4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5c6:	689a      	ldr	r2, [r3, #8]
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	430a      	orrs	r2, r1
 800c5d0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c5d6:	68b9      	ldr	r1, [r7, #8]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	3380      	adds	r3, #128	; 0x80
 800c5de:	461a      	mov	r2, r3
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	025b      	lsls	r3, r3, #9
 800c5e4:	089b      	lsrs	r3, r3, #2
 800c5e6:	f7fb fc6f 	bl	8007ec8 <HAL_DMA_Start_IT>
 800c5ea:	4603      	mov	r3, r0
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d01a      	beq.n	800c626 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f022 021a 	bic.w	r2, r2, #26
 800c5fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	4a18      	ldr	r2, [pc, #96]	; (800c668 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800c606:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c60c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2201      	movs	r2, #1
 800c618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2200      	movs	r2, #0
 800c620:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800c622:	2301      	movs	r3, #1
 800c624:	e018      	b.n	800c658 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c626:	f04f 33ff 	mov.w	r3, #4294967295
 800c62a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	025b      	lsls	r3, r3, #9
 800c630:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c632:	2390      	movs	r3, #144	; 0x90
 800c634:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800c636:	2300      	movs	r3, #0
 800c638:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c63e:	2301      	movs	r3, #1
 800c640:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	f107 0210 	add.w	r2, r7, #16
 800c64a:	4611      	mov	r1, r2
 800c64c:	4618      	mov	r0, r3
 800c64e:	f001 fc87 	bl	800df60 <SDIO_ConfigData>

      return HAL_OK;
 800c652:	2300      	movs	r3, #0
 800c654:	e000      	b.n	800c658 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800c656:	2302      	movs	r3, #2
  }
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3730      	adds	r7, #48	; 0x30
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}
 800c660:	0800ce85 	.word	0x0800ce85
 800c664:	0800cf21 	.word	0x0800cf21
 800c668:	004005ff 	.word	0x004005ff
 800c66c:	4225858c 	.word	0x4225858c

0800c670 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b084      	sub	sp, #16
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c67c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d008      	beq.n	800c69e <HAL_SD_IRQHandler+0x2e>
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f003 0308 	and.w	r3, r3, #8
 800c692:	2b00      	cmp	r3, #0
 800c694:	d003      	beq.n	800c69e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f000 ffed 	bl	800d676 <SD_Read_IT>
 800c69c:	e155      	b.n	800c94a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f000 808f 	beq.w	800c7cc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	6812      	ldr	r2, [r2, #0]
 800c6c2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800c6c6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800c6ca:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f022 0201 	bic.w	r2, r2, #1
 800c6da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f003 0308 	and.w	r3, r3, #8
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d039      	beq.n	800c75a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	f003 0302 	and.w	r3, r3, #2
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d104      	bne.n	800c6fa <HAL_SD_IRQHandler+0x8a>
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	f003 0320 	and.w	r3, r3, #32
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d011      	beq.n	800c71e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	4618      	mov	r0, r3
 800c700:	f001 fd04 	bl	800e10c <SDMMC_CmdStopTransfer>
 800c704:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d008      	beq.n	800c71e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	431a      	orrs	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f000 f91f 	bl	800c95c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f240 523a 	movw	r2, #1338	; 0x53a
 800c726:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2201      	movs	r2, #1
 800c72c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2200      	movs	r2, #0
 800c734:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f003 0301 	and.w	r3, r3, #1
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d104      	bne.n	800c74a <HAL_SD_IRQHandler+0xda>
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f003 0302 	and.w	r3, r3, #2
 800c746:	2b00      	cmp	r3, #0
 800c748:	d003      	beq.n	800c752 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f003 fce6 	bl	801011c <HAL_SD_RxCpltCallback>
 800c750:	e0fb      	b.n	800c94a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800c752:	6878      	ldr	r0, [r7, #4]
 800c754:	f003 fcd8 	bl	8010108 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800c758:	e0f7      	b.n	800c94a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c760:	2b00      	cmp	r3, #0
 800c762:	f000 80f2 	beq.w	800c94a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f003 0320 	and.w	r3, r3, #32
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d011      	beq.n	800c794 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4618      	mov	r0, r3
 800c776:	f001 fcc9 	bl	800e10c <SDMMC_CmdStopTransfer>
 800c77a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d008      	beq.n	800c794 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c786:	68bb      	ldr	r3, [r7, #8]
 800c788:	431a      	orrs	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f8e4 	bl	800c95c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f003 0301 	and.w	r3, r3, #1
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f040 80d5 	bne.w	800c94a <HAL_SD_IRQHandler+0x2da>
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f003 0302 	and.w	r3, r3, #2
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	f040 80cf 	bne.w	800c94a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f022 0208 	bic.w	r2, r2, #8
 800c7ba:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f003 fc9f 	bl	8010108 <HAL_SD_TxCpltCallback>
}
 800c7ca:	e0be      	b.n	800c94a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d008      	beq.n	800c7ec <HAL_SD_IRQHandler+0x17c>
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f003 0308 	and.w	r3, r3, #8
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d003      	beq.n	800c7ec <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 ff97 	bl	800d718 <SD_Write_IT>
 800c7ea:	e0ae      	b.n	800c94a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7f2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	f000 80a7 	beq.w	800c94a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c802:	f003 0302 	and.w	r3, r3, #2
 800c806:	2b00      	cmp	r3, #0
 800c808:	d005      	beq.n	800c816 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c80e:	f043 0202 	orr.w	r2, r3, #2
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c81c:	f003 0308 	and.w	r3, r3, #8
 800c820:	2b00      	cmp	r3, #0
 800c822:	d005      	beq.n	800c830 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c828:	f043 0208 	orr.w	r2, r3, #8
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c836:	f003 0320 	and.w	r3, r3, #32
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d005      	beq.n	800c84a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c842:	f043 0220 	orr.w	r2, r3, #32
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c850:	f003 0310 	and.w	r3, r3, #16
 800c854:	2b00      	cmp	r3, #0
 800c856:	d005      	beq.n	800c864 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85c:	f043 0210 	orr.w	r2, r3, #16
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f240 523a 	movw	r2, #1338	; 0x53a
 800c86c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c87c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	4618      	mov	r0, r3
 800c884:	f001 fc42 	bl	800e10c <SDMMC_CmdStopTransfer>
 800c888:	4602      	mov	r2, r0
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88e:	431a      	orrs	r2, r3
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	f003 0308 	and.w	r3, r3, #8
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d00a      	beq.n	800c8b4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2201      	movs	r2, #1
 800c8a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800c8ac:	6878      	ldr	r0, [r7, #4]
 800c8ae:	f000 f855 	bl	800c95c <HAL_SD_ErrorCallback>
}
 800c8b2:	e04a      	b.n	800c94a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d045      	beq.n	800c94a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f003 0310 	and.w	r3, r3, #16
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d104      	bne.n	800c8d2 <HAL_SD_IRQHandler+0x262>
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	f003 0320 	and.w	r3, r3, #32
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d011      	beq.n	800c8f6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8d6:	4a1f      	ldr	r2, [pc, #124]	; (800c954 <HAL_SD_IRQHandler+0x2e4>)
 800c8d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f7fb fb4a 	bl	8007f78 <HAL_DMA_Abort_IT>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d02f      	beq.n	800c94a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f000 fb68 	bl	800cfc4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800c8f4:	e029      	b.n	800c94a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	f003 0301 	and.w	r3, r3, #1
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d104      	bne.n	800c90a <HAL_SD_IRQHandler+0x29a>
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	f003 0302 	and.w	r3, r3, #2
 800c906:	2b00      	cmp	r3, #0
 800c908:	d011      	beq.n	800c92e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c90e:	4a12      	ldr	r2, [pc, #72]	; (800c958 <HAL_SD_IRQHandler+0x2e8>)
 800c910:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c916:	4618      	mov	r0, r3
 800c918:	f7fb fb2e 	bl	8007f78 <HAL_DMA_Abort_IT>
 800c91c:	4603      	mov	r3, r0
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d013      	beq.n	800c94a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c926:	4618      	mov	r0, r3
 800c928:	f000 fb83 	bl	800d032 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800c92c:	e00d      	b.n	800c94a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2200      	movs	r2, #0
 800c932:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2200      	movs	r2, #0
 800c940:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f003 fbd6 	bl	80100f4 <HAL_SD_AbortCallback>
}
 800c948:	e7ff      	b.n	800c94a <HAL_SD_IRQHandler+0x2da>
 800c94a:	bf00      	nop
 800c94c:	3710      	adds	r7, #16
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	0800cfc5 	.word	0x0800cfc5
 800c958:	0800d033 	.word	0x0800d033

0800c95c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800c95c:	b480      	push	{r7}
 800c95e:	b083      	sub	sp, #12
 800c960:	af00      	add	r7, sp, #0
 800c962:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800c964:	bf00      	nop
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800c970:	b480      	push	{r7}
 800c972:	b083      	sub	sp, #12
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c97e:	0f9b      	lsrs	r3, r3, #30
 800c980:	b2da      	uxtb	r2, r3
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c98a:	0e9b      	lsrs	r3, r3, #26
 800c98c:	b2db      	uxtb	r3, r3
 800c98e:	f003 030f 	and.w	r3, r3, #15
 800c992:	b2da      	uxtb	r2, r3
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c99c:	0e1b      	lsrs	r3, r3, #24
 800c99e:	b2db      	uxtb	r3, r3
 800c9a0:	f003 0303 	and.w	r3, r3, #3
 800c9a4:	b2da      	uxtb	r2, r3
 800c9a6:	683b      	ldr	r3, [r7, #0]
 800c9a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9ae:	0c1b      	lsrs	r3, r3, #16
 800c9b0:	b2da      	uxtb	r2, r3
 800c9b2:	683b      	ldr	r3, [r7, #0]
 800c9b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9ba:	0a1b      	lsrs	r3, r3, #8
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9d0:	0d1b      	lsrs	r3, r3, #20
 800c9d2:	b29a      	uxth	r2, r3
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9dc:	0c1b      	lsrs	r3, r3, #16
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	f003 030f 	and.w	r3, r3, #15
 800c9e4:	b2da      	uxtb	r2, r3
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c9ee:	0bdb      	lsrs	r3, r3, #15
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	f003 0301 	and.w	r3, r3, #1
 800c9f6:	b2da      	uxtb	r2, r3
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca00:	0b9b      	lsrs	r3, r3, #14
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	b2da      	uxtb	r2, r3
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca12:	0b5b      	lsrs	r3, r3, #13
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	f003 0301 	and.w	r3, r3, #1
 800ca1a:	b2da      	uxtb	r2, r3
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca24:	0b1b      	lsrs	r3, r3, #12
 800ca26:	b2db      	uxtb	r3, r3
 800ca28:	f003 0301 	and.w	r3, r3, #1
 800ca2c:	b2da      	uxtb	r2, r3
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	2200      	movs	r2, #0
 800ca36:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d163      	bne.n	800cb08 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca44:	009a      	lsls	r2, r3, #2
 800ca46:	f640 73fc 	movw	r3, #4092	; 0xffc
 800ca4a:	4013      	ands	r3, r2
 800ca4c:	687a      	ldr	r2, [r7, #4]
 800ca4e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ca50:	0f92      	lsrs	r2, r2, #30
 800ca52:	431a      	orrs	r2, r3
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca5c:	0edb      	lsrs	r3, r3, #27
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	f003 0307 	and.w	r3, r3, #7
 800ca64:	b2da      	uxtb	r2, r3
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca6e:	0e1b      	lsrs	r3, r3, #24
 800ca70:	b2db      	uxtb	r3, r3
 800ca72:	f003 0307 	and.w	r3, r3, #7
 800ca76:	b2da      	uxtb	r2, r3
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca80:	0d5b      	lsrs	r3, r3, #21
 800ca82:	b2db      	uxtb	r3, r3
 800ca84:	f003 0307 	and.w	r3, r3, #7
 800ca88:	b2da      	uxtb	r2, r3
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca92:	0c9b      	lsrs	r3, r3, #18
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	f003 0307 	and.w	r3, r3, #7
 800ca9a:	b2da      	uxtb	r2, r3
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800caa4:	0bdb      	lsrs	r3, r3, #15
 800caa6:	b2db      	uxtb	r3, r3
 800caa8:	f003 0307 	and.w	r3, r3, #7
 800caac:	b2da      	uxtb	r2, r3
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	1c5a      	adds	r2, r3, #1
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cabc:	683b      	ldr	r3, [r7, #0]
 800cabe:	7e1b      	ldrb	r3, [r3, #24]
 800cac0:	b2db      	uxtb	r3, r3
 800cac2:	f003 0307 	and.w	r3, r3, #7
 800cac6:	3302      	adds	r3, #2
 800cac8:	2201      	movs	r2, #1
 800caca:	fa02 f303 	lsl.w	r3, r2, r3
 800cace:	687a      	ldr	r2, [r7, #4]
 800cad0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800cad2:	fb02 f203 	mul.w	r2, r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	7a1b      	ldrb	r3, [r3, #8]
 800cade:	b2db      	uxtb	r3, r3
 800cae0:	f003 030f 	and.w	r3, r3, #15
 800cae4:	2201      	movs	r2, #1
 800cae6:	409a      	lsls	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caf0:	687a      	ldr	r2, [r7, #4]
 800caf2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800caf4:	0a52      	lsrs	r2, r2, #9
 800caf6:	fb02 f203 	mul.w	r2, r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb04:	661a      	str	r2, [r3, #96]	; 0x60
 800cb06:	e031      	b.n	800cb6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	d11d      	bne.n	800cb4c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb14:	041b      	lsls	r3, r3, #16
 800cb16:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb1e:	0c1b      	lsrs	r3, r3, #16
 800cb20:	431a      	orrs	r2, r3
 800cb22:	683b      	ldr	r3, [r7, #0]
 800cb24:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	691b      	ldr	r3, [r3, #16]
 800cb2a:	3301      	adds	r3, #1
 800cb2c:	029a      	lsls	r2, r3, #10
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cb40:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	661a      	str	r2, [r3, #96]	; 0x60
 800cb4a:	e00f      	b.n	800cb6c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a58      	ldr	r2, [pc, #352]	; (800ccb4 <HAL_SD_GetCardCSD+0x344>)
 800cb52:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e09d      	b.n	800cca8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb70:	0b9b      	lsrs	r3, r3, #14
 800cb72:	b2db      	uxtb	r3, r3
 800cb74:	f003 0301 	and.w	r3, r3, #1
 800cb78:	b2da      	uxtb	r2, r3
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb82:	09db      	lsrs	r3, r3, #7
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb8a:	b2da      	uxtb	r2, r3
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cb94:	b2db      	uxtb	r3, r3
 800cb96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb9a:	b2da      	uxtb	r2, r3
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba4:	0fdb      	lsrs	r3, r3, #31
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbb0:	0f5b      	lsrs	r3, r3, #29
 800cbb2:	b2db      	uxtb	r3, r3
 800cbb4:	f003 0303 	and.w	r3, r3, #3
 800cbb8:	b2da      	uxtb	r2, r3
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbc2:	0e9b      	lsrs	r3, r3, #26
 800cbc4:	b2db      	uxtb	r3, r3
 800cbc6:	f003 0307 	and.w	r3, r3, #7
 800cbca:	b2da      	uxtb	r2, r3
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd4:	0d9b      	lsrs	r3, r3, #22
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	f003 030f 	and.w	r3, r3, #15
 800cbdc:	b2da      	uxtb	r2, r3
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbe6:	0d5b      	lsrs	r3, r3, #21
 800cbe8:	b2db      	uxtb	r3, r3
 800cbea:	f003 0301 	and.w	r3, r3, #1
 800cbee:	b2da      	uxtb	r2, r3
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc02:	0c1b      	lsrs	r3, r3, #16
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	f003 0301 	and.w	r3, r3, #1
 800cc0a:	b2da      	uxtb	r2, r3
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc16:	0bdb      	lsrs	r3, r3, #15
 800cc18:	b2db      	uxtb	r3, r3
 800cc1a:	f003 0301 	and.w	r3, r3, #1
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc2a:	0b9b      	lsrs	r3, r3, #14
 800cc2c:	b2db      	uxtb	r3, r3
 800cc2e:	f003 0301 	and.w	r3, r3, #1
 800cc32:	b2da      	uxtb	r2, r3
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc3e:	0b5b      	lsrs	r3, r3, #13
 800cc40:	b2db      	uxtb	r3, r3
 800cc42:	f003 0301 	and.w	r3, r3, #1
 800cc46:	b2da      	uxtb	r2, r3
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc52:	0b1b      	lsrs	r3, r3, #12
 800cc54:	b2db      	uxtb	r3, r3
 800cc56:	f003 0301 	and.w	r3, r3, #1
 800cc5a:	b2da      	uxtb	r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc66:	0a9b      	lsrs	r3, r3, #10
 800cc68:	b2db      	uxtb	r3, r3
 800cc6a:	f003 0303 	and.w	r3, r3, #3
 800cc6e:	b2da      	uxtb	r2, r3
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc7a:	0a1b      	lsrs	r3, r3, #8
 800cc7c:	b2db      	uxtb	r3, r3
 800cc7e:	f003 0303 	and.w	r3, r3, #3
 800cc82:	b2da      	uxtb	r2, r3
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc8e:	085b      	lsrs	r3, r3, #1
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc96:	b2da      	uxtb	r2, r3
 800cc98:	683b      	ldr	r3, [r7, #0]
 800cc9a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	2201      	movs	r2, #1
 800cca2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800cca6:	2300      	movs	r3, #0
}
 800cca8:	4618      	mov	r0, r3
 800ccaa:	370c      	adds	r7, #12
 800ccac:	46bd      	mov	sp, r7
 800ccae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb2:	4770      	bx	lr
 800ccb4:	004005ff 	.word	0x004005ff

0800ccb8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ccc6:	683b      	ldr	r3, [r7, #0]
 800ccc8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ccee:	683b      	ldr	r3, [r7, #0]
 800ccf0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800cd02:	2300      	movs	r3, #0
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800cd10:	b5b0      	push	{r4, r5, r7, lr}
 800cd12:	b08e      	sub	sp, #56	; 0x38
 800cd14:	af04      	add	r7, sp, #16
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2203      	movs	r2, #3
 800cd24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd2c:	2b03      	cmp	r3, #3
 800cd2e:	d02e      	beq.n	800cd8e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cd36:	d106      	bne.n	800cd46 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	639a      	str	r2, [r3, #56]	; 0x38
 800cd44:	e029      	b.n	800cd9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd4c:	d10a      	bne.n	800cd64 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 fb28 	bl	800d3a4 <SD_WideBus_Enable>
 800cd54:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd5a:	6a3b      	ldr	r3, [r7, #32]
 800cd5c:	431a      	orrs	r2, r3
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	639a      	str	r2, [r3, #56]	; 0x38
 800cd62:	e01a      	b.n	800cd9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d10a      	bne.n	800cd80 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fb65 	bl	800d43a <SD_WideBus_Disable>
 800cd70:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd76:	6a3b      	ldr	r3, [r7, #32]
 800cd78:	431a      	orrs	r2, r3
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	639a      	str	r2, [r3, #56]	; 0x38
 800cd7e:	e00c      	b.n	800cd9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd84:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	639a      	str	r2, [r3, #56]	; 0x38
 800cd8c:	e005      	b.n	800cd9a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd92:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00b      	beq.n	800cdba <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a26      	ldr	r2, [pc, #152]	; (800ce40 <HAL_SD_ConfigWideBusOperation+0x130>)
 800cda8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cdb8:	e01f      	b.n	800cdfa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	68db      	ldr	r3, [r3, #12]
 800cdca:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800cdcc:	683b      	ldr	r3, [r7, #0]
 800cdce:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	695b      	ldr	r3, [r3, #20]
 800cdd4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	699b      	ldr	r3, [r3, #24]
 800cdda:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681d      	ldr	r5, [r3, #0]
 800cde0:	466c      	mov	r4, sp
 800cde2:	f107 0314 	add.w	r3, r7, #20
 800cde6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cdea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cdee:	f107 0308 	add.w	r3, r7, #8
 800cdf2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdf4:	4628      	mov	r0, r5
 800cdf6:	f001 f803 	bl	800de00 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ce02:	4618      	mov	r0, r3
 800ce04:	f001 f8d8 	bl	800dfb8 <SDMMC_CmdBlockLength>
 800ce08:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce0a:	6a3b      	ldr	r3, [r7, #32]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00c      	beq.n	800ce2a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	4a0a      	ldr	r2, [pc, #40]	; (800ce40 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ce16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce1c:	6a3b      	ldr	r3, [r7, #32]
 800ce1e:	431a      	orrs	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ce32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3728      	adds	r7, #40	; 0x28
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bdb0      	pop	{r4, r5, r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	004005ff 	.word	0x004005ff

0800ce44 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b086      	sub	sp, #24
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ce50:	f107 030c 	add.w	r3, r7, #12
 800ce54:	4619      	mov	r1, r3
 800ce56:	6878      	ldr	r0, [r7, #4]
 800ce58:	f000 fa7c 	bl	800d354 <SD_SendStatus>
 800ce5c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d005      	beq.n	800ce70 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	431a      	orrs	r2, r3
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	0a5b      	lsrs	r3, r3, #9
 800ce74:	f003 030f 	and.w	r3, r3, #15
 800ce78:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ce7a:	693b      	ldr	r3, [r7, #16]
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ce84:	b480      	push	{r7}
 800ce86:	b085      	sub	sp, #20
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce90:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800cea0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800cea2:	bf00      	nop
 800cea4:	3714      	adds	r7, #20
 800cea6:	46bd      	mov	sp, r7
 800cea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceac:	4770      	bx	lr

0800ceae <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ceae:	b580      	push	{r7, lr}
 800ceb0:	b084      	sub	sp, #16
 800ceb2:	af00      	add	r7, sp, #0
 800ceb4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ceba:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec0:	2b82      	cmp	r3, #130	; 0x82
 800cec2:	d111      	bne.n	800cee8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	4618      	mov	r0, r3
 800ceca:	f001 f91f 	bl	800e10c <SDMMC_CmdStopTransfer>
 800cece:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d008      	beq.n	800cee8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	431a      	orrs	r2, r3
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800cee2:	68f8      	ldr	r0, [r7, #12]
 800cee4:	f7ff fd3a 	bl	800c95c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f022 0208 	bic.w	r2, r2, #8
 800cef6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cef8:	68fb      	ldr	r3, [r7, #12]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	f240 523a 	movw	r2, #1338	; 0x53a
 800cf00:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	2201      	movs	r2, #1
 800cf06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800cf10:	68f8      	ldr	r0, [r7, #12]
 800cf12:	f003 f903 	bl	801011c <HAL_SD_RxCpltCallback>
#endif
}
 800cf16:	bf00      	nop
 800cf18:	3710      	adds	r7, #16
 800cf1a:	46bd      	mov	sp, r7
 800cf1c:	bd80      	pop	{r7, pc}
	...

0800cf20 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b086      	sub	sp, #24
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf2c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7fb f9ce 	bl	80082d0 <HAL_DMA_GetError>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d03e      	beq.n	800cfb8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf40:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf48:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800cf4a:	693b      	ldr	r3, [r7, #16]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	d002      	beq.n	800cf56 <SD_DMAError+0x36>
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	2b01      	cmp	r3, #1
 800cf54:	d12d      	bne.n	800cfb2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cf56:	697b      	ldr	r3, [r7, #20]
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	4a19      	ldr	r2, [pc, #100]	; (800cfc0 <SD_DMAError+0xa0>)
 800cf5c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cf5e:	697b      	ldr	r3, [r7, #20]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cf6c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cf6e:	697b      	ldr	r3, [r7, #20]
 800cf70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf72:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800cf7a:	6978      	ldr	r0, [r7, #20]
 800cf7c:	f7ff ff62 	bl	800ce44 <HAL_SD_GetCardState>
 800cf80:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2b06      	cmp	r3, #6
 800cf86:	d002      	beq.n	800cf8e <SD_DMAError+0x6e>
 800cf88:	68bb      	ldr	r3, [r7, #8]
 800cf8a:	2b05      	cmp	r3, #5
 800cf8c:	d10a      	bne.n	800cfa4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cf8e:	697b      	ldr	r3, [r7, #20]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f001 f8ba 	bl	800e10c <SDMMC_CmdStopTransfer>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	697b      	ldr	r3, [r7, #20]
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9e:	431a      	orrs	r2, r3
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cfac:	697b      	ldr	r3, [r7, #20]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800cfb2:	6978      	ldr	r0, [r7, #20]
 800cfb4:	f7ff fcd2 	bl	800c95c <HAL_SD_ErrorCallback>
#endif
  }
}
 800cfb8:	bf00      	nop
 800cfba:	3718      	adds	r7, #24
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	bd80      	pop	{r7, pc}
 800cfc0:	004005ff 	.word	0x004005ff

0800cfc4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b084      	sub	sp, #16
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f240 523a 	movw	r2, #1338	; 0x53a
 800cfda:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800cfdc:	68f8      	ldr	r0, [r7, #12]
 800cfde:	f7ff ff31 	bl	800ce44 <HAL_SD_GetCardState>
 800cfe2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2200      	movs	r2, #0
 800cff0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	2b06      	cmp	r3, #6
 800cff6:	d002      	beq.n	800cffe <SD_DMATxAbort+0x3a>
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	2b05      	cmp	r3, #5
 800cffc:	d10a      	bne.n	800d014 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	4618      	mov	r0, r3
 800d004:	f001 f882 	bl	800e10c <SDMMC_CmdStopTransfer>
 800d008:	4602      	mov	r2, r0
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00e:	431a      	orrs	r2, r3
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d103      	bne.n	800d024 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d01c:	68f8      	ldr	r0, [r7, #12]
 800d01e:	f003 f869 	bl	80100f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d022:	e002      	b.n	800d02a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d024:	68f8      	ldr	r0, [r7, #12]
 800d026:	f7ff fc99 	bl	800c95c <HAL_SD_ErrorCallback>
}
 800d02a:	bf00      	nop
 800d02c:	3710      	adds	r7, #16
 800d02e:	46bd      	mov	sp, r7
 800d030:	bd80      	pop	{r7, pc}

0800d032 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d032:	b580      	push	{r7, lr}
 800d034:	b084      	sub	sp, #16
 800d036:	af00      	add	r7, sp, #0
 800d038:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d03e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f240 523a 	movw	r2, #1338	; 0x53a
 800d048:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d04a:	68f8      	ldr	r0, [r7, #12]
 800d04c:	f7ff fefa 	bl	800ce44 <HAL_SD_GetCardState>
 800d050:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2200      	movs	r2, #0
 800d05e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	2b06      	cmp	r3, #6
 800d064:	d002      	beq.n	800d06c <SD_DMARxAbort+0x3a>
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	2b05      	cmp	r3, #5
 800d06a:	d10a      	bne.n	800d082 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4618      	mov	r0, r3
 800d072:	f001 f84b 	bl	800e10c <SDMMC_CmdStopTransfer>
 800d076:	4602      	mov	r2, r0
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d07c:	431a      	orrs	r2, r3
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d086:	2b00      	cmp	r3, #0
 800d088:	d103      	bne.n	800d092 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f003 f832 	bl	80100f4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d090:	e002      	b.n	800d098 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d092:	68f8      	ldr	r0, [r7, #12]
 800d094:	f7ff fc62 	bl	800c95c <HAL_SD_ErrorCallback>
}
 800d098:	bf00      	nop
 800d09a:	3710      	adds	r7, #16
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}

0800d0a0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d0a0:	b5b0      	push	{r4, r5, r7, lr}
 800d0a2:	b094      	sub	sp, #80	; 0x50
 800d0a4:	af04      	add	r7, sp, #16
 800d0a6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	681b      	ldr	r3, [r3, #0]
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f000 fefd 	bl	800deb0 <SDIO_GetPowerState>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d102      	bne.n	800d0c2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d0bc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d0c0:	e0b6      	b.n	800d230 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0c6:	2b03      	cmp	r3, #3
 800d0c8:	d02f      	beq.n	800d12a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f001 f926 	bl	800e320 <SDMMC_CmdSendCID>
 800d0d4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d0d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d001      	beq.n	800d0e0 <SD_InitCard+0x40>
    {
      return errorstate;
 800d0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0de:	e0a7      	b.n	800d230 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	2100      	movs	r1, #0
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 ff27 	bl	800df3a <SDIO_GetResponse>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2104      	movs	r1, #4
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 ff1e 	bl	800df3a <SDIO_GetResponse>
 800d0fe:	4602      	mov	r2, r0
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2108      	movs	r1, #8
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 ff15 	bl	800df3a <SDIO_GetResponse>
 800d110:	4602      	mov	r2, r0
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	210c      	movs	r1, #12
 800d11c:	4618      	mov	r0, r3
 800d11e:	f000 ff0c 	bl	800df3a <SDIO_GetResponse>
 800d122:	4602      	mov	r2, r0
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d12e:	2b03      	cmp	r3, #3
 800d130:	d00d      	beq.n	800d14e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f107 020e 	add.w	r2, r7, #14
 800d13a:	4611      	mov	r1, r2
 800d13c:	4618      	mov	r0, r3
 800d13e:	f001 f92c 	bl	800e39a <SDMMC_CmdSetRelAdd>
 800d142:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d146:	2b00      	cmp	r3, #0
 800d148:	d001      	beq.n	800d14e <SD_InitCard+0xae>
    {
      return errorstate;
 800d14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d14c:	e070      	b.n	800d230 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d152:	2b03      	cmp	r3, #3
 800d154:	d036      	beq.n	800d1c4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d156:	89fb      	ldrh	r3, [r7, #14]
 800d158:	461a      	mov	r2, r3
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d166:	041b      	lsls	r3, r3, #16
 800d168:	4619      	mov	r1, r3
 800d16a:	4610      	mov	r0, r2
 800d16c:	f001 f8f6 	bl	800e35c <SDMMC_CmdSendCSD>
 800d170:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d174:	2b00      	cmp	r3, #0
 800d176:	d001      	beq.n	800d17c <SD_InitCard+0xdc>
    {
      return errorstate;
 800d178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d17a:	e059      	b.n	800d230 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	2100      	movs	r1, #0
 800d182:	4618      	mov	r0, r3
 800d184:	f000 fed9 	bl	800df3a <SDIO_GetResponse>
 800d188:	4602      	mov	r2, r0
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2104      	movs	r1, #4
 800d194:	4618      	mov	r0, r3
 800d196:	f000 fed0 	bl	800df3a <SDIO_GetResponse>
 800d19a:	4602      	mov	r2, r0
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	2108      	movs	r1, #8
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f000 fec7 	bl	800df3a <SDIO_GetResponse>
 800d1ac:	4602      	mov	r2, r0
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	210c      	movs	r1, #12
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f000 febe 	bl	800df3a <SDIO_GetResponse>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2104      	movs	r1, #4
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 feb5 	bl	800df3a <SDIO_GetResponse>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	0d1a      	lsrs	r2, r3, #20
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d1d8:	f107 0310 	add.w	r3, r7, #16
 800d1dc:	4619      	mov	r1, r3
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f7ff fbc6 	bl	800c970 <HAL_SD_GetCardCSD>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d002      	beq.n	800d1f0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d1ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d1ee:	e01f      	b.n	800d230 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	6819      	ldr	r1, [r3, #0]
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1f8:	041b      	lsls	r3, r3, #16
 800d1fa:	461a      	mov	r2, r3
 800d1fc:	f04f 0300 	mov.w	r3, #0
 800d200:	4608      	mov	r0, r1
 800d202:	f000 ffa5 	bl	800e150 <SDMMC_CmdSelDesel>
 800d206:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d001      	beq.n	800d212 <SD_InitCard+0x172>
  {
    return errorstate;
 800d20e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d210:	e00e      	b.n	800d230 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681d      	ldr	r5, [r3, #0]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	466c      	mov	r4, sp
 800d21a:	f103 0210 	add.w	r2, r3, #16
 800d21e:	ca07      	ldmia	r2, {r0, r1, r2}
 800d220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d224:	3304      	adds	r3, #4
 800d226:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d228:	4628      	mov	r0, r5
 800d22a:	f000 fde9 	bl	800de00 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d22e:	2300      	movs	r3, #0
}
 800d230:	4618      	mov	r0, r3
 800d232:	3740      	adds	r7, #64	; 0x40
 800d234:	46bd      	mov	sp, r7
 800d236:	bdb0      	pop	{r4, r5, r7, pc}

0800d238 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b086      	sub	sp, #24
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d240:	2300      	movs	r3, #0
 800d242:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d244:	2300      	movs	r3, #0
 800d246:	617b      	str	r3, [r7, #20]
 800d248:	2300      	movs	r3, #0
 800d24a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4618      	mov	r0, r3
 800d252:	f000 ffa0 	bl	800e196 <SDMMC_CmdGoIdleState>
 800d256:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d001      	beq.n	800d262 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	e072      	b.n	800d348 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	4618      	mov	r0, r3
 800d268:	f000 ffb3 	bl	800e1d2 <SDMMC_CmdOperCond>
 800d26c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d00d      	beq.n	800d290 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	4618      	mov	r0, r3
 800d280:	f000 ff89 	bl	800e196 <SDMMC_CmdGoIdleState>
 800d284:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d004      	beq.n	800d296 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	e05b      	b.n	800d348 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2201      	movs	r2, #1
 800d294:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d137      	bne.n	800d30e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f000 ffb3 	bl	800e210 <SDMMC_CmdAppCommand>
 800d2aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d02d      	beq.n	800d30e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2b2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2b6:	e047      	b.n	800d348 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2100      	movs	r1, #0
 800d2be:	4618      	mov	r0, r3
 800d2c0:	f000 ffa6 	bl	800e210 <SDMMC_CmdAppCommand>
 800d2c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d001      	beq.n	800d2d0 <SD_PowerON+0x98>
    {
      return errorstate;
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	e03b      	b.n	800d348 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	491e      	ldr	r1, [pc, #120]	; (800d350 <SD_PowerON+0x118>)
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f000 ffbc 	bl	800e254 <SDMMC_CmdAppOperCommand>
 800d2dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d002      	beq.n	800d2ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d2e8:	e02e      	b.n	800d348 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	f000 fe22 	bl	800df3a <SDIO_GetResponse>
 800d2f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d2f8:	697b      	ldr	r3, [r7, #20]
 800d2fa:	0fdb      	lsrs	r3, r3, #31
 800d2fc:	2b01      	cmp	r3, #1
 800d2fe:	d101      	bne.n	800d304 <SD_PowerON+0xcc>
 800d300:	2301      	movs	r3, #1
 800d302:	e000      	b.n	800d306 <SD_PowerON+0xce>
 800d304:	2300      	movs	r3, #0
 800d306:	613b      	str	r3, [r7, #16]

    count++;
 800d308:	68bb      	ldr	r3, [r7, #8]
 800d30a:	3301      	adds	r3, #1
 800d30c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d314:	4293      	cmp	r3, r2
 800d316:	d802      	bhi.n	800d31e <SD_PowerON+0xe6>
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d0cc      	beq.n	800d2b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d31e:	68bb      	ldr	r3, [r7, #8]
 800d320:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d324:	4293      	cmp	r3, r2
 800d326:	d902      	bls.n	800d32e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d328:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d32c:	e00c      	b.n	800d348 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d334:	2b00      	cmp	r3, #0
 800d336:	d003      	beq.n	800d340 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2201      	movs	r2, #1
 800d33c:	645a      	str	r2, [r3, #68]	; 0x44
 800d33e:	e002      	b.n	800d346 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2200      	movs	r2, #0
 800d344:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d346:	2300      	movs	r3, #0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3718      	adds	r7, #24
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	c1100000 	.word	0xc1100000

0800d354 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d35e:	683b      	ldr	r3, [r7, #0]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d102      	bne.n	800d36a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d364:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d368:	e018      	b.n	800d39c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	681a      	ldr	r2, [r3, #0]
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d372:	041b      	lsls	r3, r3, #16
 800d374:	4619      	mov	r1, r3
 800d376:	4610      	mov	r0, r2
 800d378:	f001 f830 	bl	800e3dc <SDMMC_CmdSendStatus>
 800d37c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d001      	beq.n	800d388 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	e009      	b.n	800d39c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2100      	movs	r1, #0
 800d38e:	4618      	mov	r0, r3
 800d390:	f000 fdd3 	bl	800df3a <SDIO_GetResponse>
 800d394:	4602      	mov	r2, r0
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d39a:	2300      	movs	r3, #0
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3710      	adds	r7, #16
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}

0800d3a4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b086      	sub	sp, #24
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	60fb      	str	r3, [r7, #12]
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f000 fdbd 	bl	800df3a <SDIO_GetResponse>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d3c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3ca:	d102      	bne.n	800d3d2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d3cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d3d0:	e02f      	b.n	800d432 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d3d2:	f107 030c 	add.w	r3, r7, #12
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 f879 	bl	800d4d0 <SD_FindSCR>
 800d3de:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d001      	beq.n	800d3ea <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	e023      	b.n	800d432 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d3ea:	693b      	ldr	r3, [r7, #16]
 800d3ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d01c      	beq.n	800d42e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	681a      	ldr	r2, [r3, #0]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d3fc:	041b      	lsls	r3, r3, #16
 800d3fe:	4619      	mov	r1, r3
 800d400:	4610      	mov	r0, r2
 800d402:	f000 ff05 	bl	800e210 <SDMMC_CmdAppCommand>
 800d406:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d001      	beq.n	800d412 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	e00f      	b.n	800d432 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	2102      	movs	r1, #2
 800d418:	4618      	mov	r0, r3
 800d41a:	f000 ff3e 	bl	800e29a <SDMMC_CmdBusWidth>
 800d41e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d426:	697b      	ldr	r3, [r7, #20]
 800d428:	e003      	b.n	800d432 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d42a:	2300      	movs	r3, #0
 800d42c:	e001      	b.n	800d432 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d42e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d432:	4618      	mov	r0, r3
 800d434:	3718      	adds	r7, #24
 800d436:	46bd      	mov	sp, r7
 800d438:	bd80      	pop	{r7, pc}

0800d43a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b086      	sub	sp, #24
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d442:	2300      	movs	r3, #0
 800d444:	60fb      	str	r3, [r7, #12]
 800d446:	2300      	movs	r3, #0
 800d448:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2100      	movs	r1, #0
 800d450:	4618      	mov	r0, r3
 800d452:	f000 fd72 	bl	800df3a <SDIO_GetResponse>
 800d456:	4603      	mov	r3, r0
 800d458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d45c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d460:	d102      	bne.n	800d468 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d462:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d466:	e02f      	b.n	800d4c8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d468:	f107 030c 	add.w	r3, r7, #12
 800d46c:	4619      	mov	r1, r3
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f82e 	bl	800d4d0 <SD_FindSCR>
 800d474:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d001      	beq.n	800d480 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	e023      	b.n	800d4c8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d480:	693b      	ldr	r3, [r7, #16]
 800d482:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d486:	2b00      	cmp	r3, #0
 800d488:	d01c      	beq.n	800d4c4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d492:	041b      	lsls	r3, r3, #16
 800d494:	4619      	mov	r1, r3
 800d496:	4610      	mov	r0, r2
 800d498:	f000 feba 	bl	800e210 <SDMMC_CmdAppCommand>
 800d49c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d49e:	697b      	ldr	r3, [r7, #20]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d001      	beq.n	800d4a8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d4a4:	697b      	ldr	r3, [r7, #20]
 800d4a6:	e00f      	b.n	800d4c8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2100      	movs	r1, #0
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f000 fef3 	bl	800e29a <SDMMC_CmdBusWidth>
 800d4b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d001      	beq.n	800d4c0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	e003      	b.n	800d4c8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	e001      	b.n	800d4c8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d4c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3718      	adds	r7, #24
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}

0800d4d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d4d0:	b590      	push	{r4, r7, lr}
 800d4d2:	b08f      	sub	sp, #60	; 0x3c
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
 800d4d8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d4da:	f7f9 f84b 	bl	8006574 <HAL_GetTick>
 800d4de:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d4e0:	2300      	movs	r3, #0
 800d4e2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	60bb      	str	r3, [r7, #8]
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	2108      	movs	r1, #8
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	f000 fd5e 	bl	800dfb8 <SDMMC_CmdBlockLength>
 800d4fc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d500:	2b00      	cmp	r3, #0
 800d502:	d001      	beq.n	800d508 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d506:	e0b2      	b.n	800d66e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	681a      	ldr	r2, [r3, #0]
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d510:	041b      	lsls	r3, r3, #16
 800d512:	4619      	mov	r1, r3
 800d514:	4610      	mov	r0, r2
 800d516:	f000 fe7b 	bl	800e210 <SDMMC_CmdAppCommand>
 800d51a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d001      	beq.n	800d526 <SD_FindSCR+0x56>
  {
    return errorstate;
 800d522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d524:	e0a3      	b.n	800d66e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d526:	f04f 33ff 	mov.w	r3, #4294967295
 800d52a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800d52c:	2308      	movs	r3, #8
 800d52e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800d530:	2330      	movs	r3, #48	; 0x30
 800d532:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d534:	2302      	movs	r3, #2
 800d536:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d538:	2300      	movs	r3, #0
 800d53a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800d53c:	2301      	movs	r3, #1
 800d53e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f107 0210 	add.w	r2, r7, #16
 800d548:	4611      	mov	r1, r2
 800d54a:	4618      	mov	r0, r3
 800d54c:	f000 fd08 	bl	800df60 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	4618      	mov	r0, r3
 800d556:	f000 fec2 	bl	800e2de <SDMMC_CmdSendSCR>
 800d55a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d02a      	beq.n	800d5b8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800d562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d564:	e083      	b.n	800d66e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d56c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d570:	2b00      	cmp	r3, #0
 800d572:	d00f      	beq.n	800d594 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6819      	ldr	r1, [r3, #0]
 800d578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	f107 0208 	add.w	r2, r7, #8
 800d580:	18d4      	adds	r4, r2, r3
 800d582:	4608      	mov	r0, r1
 800d584:	f000 fc67 	bl	800de56 <SDIO_ReadFIFO>
 800d588:	4603      	mov	r3, r0
 800d58a:	6023      	str	r3, [r4, #0]
      index++;
 800d58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d58e:	3301      	adds	r3, #1
 800d590:	637b      	str	r3, [r7, #52]	; 0x34
 800d592:	e006      	b.n	800d5a2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d012      	beq.n	800d5c8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d5a2:	f7f8 ffe7 	bl	8006574 <HAL_GetTick>
 800d5a6:	4602      	mov	r2, r0
 800d5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5aa:	1ad3      	subs	r3, r2, r3
 800d5ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b0:	d102      	bne.n	800d5b8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800d5b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d5b6:	e05a      	b.n	800d66e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5be:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d0cf      	beq.n	800d566 <SD_FindSCR+0x96>
 800d5c6:	e000      	b.n	800d5ca <SD_FindSCR+0xfa>
      break;
 800d5c8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d0:	f003 0308 	and.w	r3, r3, #8
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d005      	beq.n	800d5e4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	2208      	movs	r2, #8
 800d5de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800d5e0:	2308      	movs	r3, #8
 800d5e2:	e044      	b.n	800d66e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ea:	f003 0302 	and.w	r3, r3, #2
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d005      	beq.n	800d5fe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2202      	movs	r2, #2
 800d5f8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5fa:	2302      	movs	r3, #2
 800d5fc:	e037      	b.n	800d66e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d604:	f003 0320 	and.w	r3, r3, #32
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d005      	beq.n	800d618 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2220      	movs	r2, #32
 800d612:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800d614:	2320      	movs	r3, #32
 800d616:	e02a      	b.n	800d66e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d620:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	061a      	lsls	r2, r3, #24
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	021b      	lsls	r3, r3, #8
 800d62a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d62e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	0a1b      	lsrs	r3, r3, #8
 800d634:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d638:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	0e1b      	lsrs	r3, r3, #24
 800d63e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800d640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d642:	601a      	str	r2, [r3, #0]
    scr++;
 800d644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d646:	3304      	adds	r3, #4
 800d648:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	061a      	lsls	r2, r3, #24
 800d64e:	68bb      	ldr	r3, [r7, #8]
 800d650:	021b      	lsls	r3, r3, #8
 800d652:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d656:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	0a1b      	lsrs	r3, r3, #8
 800d65c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d660:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	0e1b      	lsrs	r3, r3, #24
 800d666:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800d668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800d66c:	2300      	movs	r3, #0
}
 800d66e:	4618      	mov	r0, r3
 800d670:	373c      	adds	r7, #60	; 0x3c
 800d672:	46bd      	mov	sp, r7
 800d674:	bd90      	pop	{r4, r7, pc}

0800d676 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b086      	sub	sp, #24
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d682:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d688:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d68a:	693b      	ldr	r3, [r7, #16]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d03f      	beq.n	800d710 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800d690:	2300      	movs	r3, #0
 800d692:	617b      	str	r3, [r7, #20]
 800d694:	e033      	b.n	800d6fe <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 fbdb 	bl	800de56 <SDIO_ReadFIFO>
 800d6a0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	b2da      	uxtb	r2, r3
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d6b0:	693b      	ldr	r3, [r7, #16]
 800d6b2:	3b01      	subs	r3, #1
 800d6b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	0a1b      	lsrs	r3, r3, #8
 800d6ba:	b2da      	uxtb	r2, r3
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	3b01      	subs	r3, #1
 800d6ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	0c1b      	lsrs	r3, r3, #16
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	3301      	adds	r3, #1
 800d6da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	0e1b      	lsrs	r3, r3, #24
 800d6e6:	b2da      	uxtb	r2, r3
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	3b01      	subs	r3, #1
 800d6f6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	617b      	str	r3, [r7, #20]
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	2b07      	cmp	r3, #7
 800d702:	d9c8      	bls.n	800d696 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	68fa      	ldr	r2, [r7, #12]
 800d708:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	693a      	ldr	r2, [r7, #16]
 800d70e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800d710:	bf00      	nop
 800d712:	3718      	adds	r7, #24
 800d714:	46bd      	mov	sp, r7
 800d716:	bd80      	pop	{r7, pc}

0800d718 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	6a1b      	ldr	r3, [r3, #32]
 800d724:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d72a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d043      	beq.n	800d7ba <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800d732:	2300      	movs	r3, #0
 800d734:	617b      	str	r3, [r7, #20]
 800d736:	e037      	b.n	800d7a8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	781b      	ldrb	r3, [r3, #0]
 800d73c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3301      	adds	r3, #1
 800d742:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d744:	693b      	ldr	r3, [r7, #16]
 800d746:	3b01      	subs	r3, #1
 800d748:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	781b      	ldrb	r3, [r3, #0]
 800d74e:	021a      	lsls	r2, r3, #8
 800d750:	68bb      	ldr	r3, [r7, #8]
 800d752:	4313      	orrs	r3, r2
 800d754:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	3301      	adds	r3, #1
 800d75a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	3b01      	subs	r3, #1
 800d760:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	041a      	lsls	r2, r3, #16
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	4313      	orrs	r3, r2
 800d76c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	3301      	adds	r3, #1
 800d772:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	3b01      	subs	r3, #1
 800d778:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	781b      	ldrb	r3, [r3, #0]
 800d77e:	061a      	lsls	r2, r3, #24
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	4313      	orrs	r3, r2
 800d784:	60bb      	str	r3, [r7, #8]
      tmp++;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	3301      	adds	r3, #1
 800d78a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800d78c:	693b      	ldr	r3, [r7, #16]
 800d78e:	3b01      	subs	r3, #1
 800d790:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f107 0208 	add.w	r2, r7, #8
 800d79a:	4611      	mov	r1, r2
 800d79c:	4618      	mov	r0, r3
 800d79e:	f000 fb67 	bl	800de70 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800d7a2:	697b      	ldr	r3, [r7, #20]
 800d7a4:	3301      	adds	r3, #1
 800d7a6:	617b      	str	r3, [r7, #20]
 800d7a8:	697b      	ldr	r3, [r7, #20]
 800d7aa:	2b07      	cmp	r3, #7
 800d7ac:	d9c4      	bls.n	800d738 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	693a      	ldr	r2, [r7, #16]
 800d7b8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800d7ba:	bf00      	nop
 800d7bc:	3718      	adds	r7, #24
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}

0800d7c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7c2:	b580      	push	{r7, lr}
 800d7c4:	b082      	sub	sp, #8
 800d7c6:	af00      	add	r7, sp, #0
 800d7c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d101      	bne.n	800d7d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7d0:	2301      	movs	r3, #1
 800d7d2:	e041      	b.n	800d858 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7da:	b2db      	uxtb	r3, r3
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d106      	bne.n	800d7ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7e8:	6878      	ldr	r0, [r7, #4]
 800d7ea:	f7f8 fd3d 	bl	8006268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2202      	movs	r2, #2
 800d7f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	3304      	adds	r3, #4
 800d7fe:	4619      	mov	r1, r3
 800d800:	4610      	mov	r0, r2
 800d802:	f000 f9cd 	bl	800dba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2201      	movs	r2, #1
 800d812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d860:	b480      	push	{r7}
 800d862:	b085      	sub	sp, #20
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	2b01      	cmp	r3, #1
 800d872:	d001      	beq.n	800d878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	e04e      	b.n	800d916 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2202      	movs	r2, #2
 800d87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	68da      	ldr	r2, [r3, #12]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	f042 0201 	orr.w	r2, r2, #1
 800d88e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	4a23      	ldr	r2, [pc, #140]	; (800d924 <HAL_TIM_Base_Start_IT+0xc4>)
 800d896:	4293      	cmp	r3, r2
 800d898:	d022      	beq.n	800d8e0 <HAL_TIM_Base_Start_IT+0x80>
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d8a2:	d01d      	beq.n	800d8e0 <HAL_TIM_Base_Start_IT+0x80>
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	4a1f      	ldr	r2, [pc, #124]	; (800d928 <HAL_TIM_Base_Start_IT+0xc8>)
 800d8aa:	4293      	cmp	r3, r2
 800d8ac:	d018      	beq.n	800d8e0 <HAL_TIM_Base_Start_IT+0x80>
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	4a1e      	ldr	r2, [pc, #120]	; (800d92c <HAL_TIM_Base_Start_IT+0xcc>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d013      	beq.n	800d8e0 <HAL_TIM_Base_Start_IT+0x80>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	4a1c      	ldr	r2, [pc, #112]	; (800d930 <HAL_TIM_Base_Start_IT+0xd0>)
 800d8be:	4293      	cmp	r3, r2
 800d8c0:	d00e      	beq.n	800d8e0 <HAL_TIM_Base_Start_IT+0x80>
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	4a1b      	ldr	r2, [pc, #108]	; (800d934 <HAL_TIM_Base_Start_IT+0xd4>)
 800d8c8:	4293      	cmp	r3, r2
 800d8ca:	d009      	beq.n	800d8e0 <HAL_TIM_Base_Start_IT+0x80>
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4a19      	ldr	r2, [pc, #100]	; (800d938 <HAL_TIM_Base_Start_IT+0xd8>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d004      	beq.n	800d8e0 <HAL_TIM_Base_Start_IT+0x80>
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	4a18      	ldr	r2, [pc, #96]	; (800d93c <HAL_TIM_Base_Start_IT+0xdc>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d111      	bne.n	800d904 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	689b      	ldr	r3, [r3, #8]
 800d8e6:	f003 0307 	and.w	r3, r3, #7
 800d8ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b06      	cmp	r3, #6
 800d8f0:	d010      	beq.n	800d914 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	681a      	ldr	r2, [r3, #0]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f042 0201 	orr.w	r2, r2, #1
 800d900:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d902:	e007      	b.n	800d914 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	681a      	ldr	r2, [r3, #0]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	f042 0201 	orr.w	r2, r2, #1
 800d912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3714      	adds	r7, #20
 800d91a:	46bd      	mov	sp, r7
 800d91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d920:	4770      	bx	lr
 800d922:	bf00      	nop
 800d924:	40010000 	.word	0x40010000
 800d928:	40000400 	.word	0x40000400
 800d92c:	40000800 	.word	0x40000800
 800d930:	40000c00 	.word	0x40000c00
 800d934:	40010400 	.word	0x40010400
 800d938:	40014000 	.word	0x40014000
 800d93c:	40001800 	.word	0x40001800

0800d940 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d940:	b580      	push	{r7, lr}
 800d942:	b082      	sub	sp, #8
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	f003 0302 	and.w	r3, r3, #2
 800d952:	2b02      	cmp	r3, #2
 800d954:	d122      	bne.n	800d99c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	68db      	ldr	r3, [r3, #12]
 800d95c:	f003 0302 	and.w	r3, r3, #2
 800d960:	2b02      	cmp	r3, #2
 800d962:	d11b      	bne.n	800d99c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	f06f 0202 	mvn.w	r2, #2
 800d96c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2201      	movs	r2, #1
 800d972:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	681b      	ldr	r3, [r3, #0]
 800d978:	699b      	ldr	r3, [r3, #24]
 800d97a:	f003 0303 	and.w	r3, r3, #3
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d003      	beq.n	800d98a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 f8ee 	bl	800db64 <HAL_TIM_IC_CaptureCallback>
 800d988:	e005      	b.n	800d996 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d98a:	6878      	ldr	r0, [r7, #4]
 800d98c:	f000 f8e0 	bl	800db50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 f8f1 	bl	800db78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	691b      	ldr	r3, [r3, #16]
 800d9a2:	f003 0304 	and.w	r3, r3, #4
 800d9a6:	2b04      	cmp	r3, #4
 800d9a8:	d122      	bne.n	800d9f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	f003 0304 	and.w	r3, r3, #4
 800d9b4:	2b04      	cmp	r3, #4
 800d9b6:	d11b      	bne.n	800d9f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	f06f 0204 	mvn.w	r2, #4
 800d9c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2202      	movs	r2, #2
 800d9c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	699b      	ldr	r3, [r3, #24]
 800d9ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d003      	beq.n	800d9de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9d6:	6878      	ldr	r0, [r7, #4]
 800d9d8:	f000 f8c4 	bl	800db64 <HAL_TIM_IC_CaptureCallback>
 800d9dc:	e005      	b.n	800d9ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f000 f8b6 	bl	800db50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 f8c7 	bl	800db78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	691b      	ldr	r3, [r3, #16]
 800d9f6:	f003 0308 	and.w	r3, r3, #8
 800d9fa:	2b08      	cmp	r3, #8
 800d9fc:	d122      	bne.n	800da44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68db      	ldr	r3, [r3, #12]
 800da04:	f003 0308 	and.w	r3, r3, #8
 800da08:	2b08      	cmp	r3, #8
 800da0a:	d11b      	bne.n	800da44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f06f 0208 	mvn.w	r2, #8
 800da14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	2204      	movs	r2, #4
 800da1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	69db      	ldr	r3, [r3, #28]
 800da22:	f003 0303 	and.w	r3, r3, #3
 800da26:	2b00      	cmp	r3, #0
 800da28:	d003      	beq.n	800da32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f89a 	bl	800db64 <HAL_TIM_IC_CaptureCallback>
 800da30:	e005      	b.n	800da3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da32:	6878      	ldr	r0, [r7, #4]
 800da34:	f000 f88c 	bl	800db50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 f89d 	bl	800db78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	2200      	movs	r2, #0
 800da42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	691b      	ldr	r3, [r3, #16]
 800da4a:	f003 0310 	and.w	r3, r3, #16
 800da4e:	2b10      	cmp	r3, #16
 800da50:	d122      	bne.n	800da98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68db      	ldr	r3, [r3, #12]
 800da58:	f003 0310 	and.w	r3, r3, #16
 800da5c:	2b10      	cmp	r3, #16
 800da5e:	d11b      	bne.n	800da98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f06f 0210 	mvn.w	r2, #16
 800da68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2208      	movs	r2, #8
 800da6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	69db      	ldr	r3, [r3, #28]
 800da76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d003      	beq.n	800da86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 f870 	bl	800db64 <HAL_TIM_IC_CaptureCallback>
 800da84:	e005      	b.n	800da92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da86:	6878      	ldr	r0, [r7, #4]
 800da88:	f000 f862 	bl	800db50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f000 f873 	bl	800db78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2200      	movs	r2, #0
 800da96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	691b      	ldr	r3, [r3, #16]
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	2b01      	cmp	r3, #1
 800daa4:	d10e      	bne.n	800dac4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	68db      	ldr	r3, [r3, #12]
 800daac:	f003 0301 	and.w	r3, r3, #1
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d107      	bne.n	800dac4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	f06f 0201 	mvn.w	r2, #1
 800dabc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f7f8 f844 	bl	8005b4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	691b      	ldr	r3, [r3, #16]
 800daca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dace:	2b80      	cmp	r3, #128	; 0x80
 800dad0:	d10e      	bne.n	800daf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dadc:	2b80      	cmp	r3, #128	; 0x80
 800dade:	d107      	bne.n	800daf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800dae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 f97e 	bl	800ddec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dafa:	2b40      	cmp	r3, #64	; 0x40
 800dafc:	d10e      	bne.n	800db1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	68db      	ldr	r3, [r3, #12]
 800db04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db08:	2b40      	cmp	r3, #64	; 0x40
 800db0a:	d107      	bne.n	800db1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	681b      	ldr	r3, [r3, #0]
 800db10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800db14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f000 f838 	bl	800db8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	691b      	ldr	r3, [r3, #16]
 800db22:	f003 0320 	and.w	r3, r3, #32
 800db26:	2b20      	cmp	r3, #32
 800db28:	d10e      	bne.n	800db48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	68db      	ldr	r3, [r3, #12]
 800db30:	f003 0320 	and.w	r3, r3, #32
 800db34:	2b20      	cmp	r3, #32
 800db36:	d107      	bne.n	800db48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f06f 0220 	mvn.w	r2, #32
 800db40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 f948 	bl	800ddd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db48:	bf00      	nop
 800db4a:	3708      	adds	r7, #8
 800db4c:	46bd      	mov	sp, r7
 800db4e:	bd80      	pop	{r7, pc}

0800db50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800db58:	bf00      	nop
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800db64:	b480      	push	{r7}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800db6c:	bf00      	nop
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800db80:	bf00      	nop
 800db82:	370c      	adds	r7, #12
 800db84:	46bd      	mov	sp, r7
 800db86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8a:	4770      	bx	lr

0800db8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b083      	sub	sp, #12
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800db94:	bf00      	nop
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr

0800dba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dba0:	b480      	push	{r7}
 800dba2:	b085      	sub	sp, #20
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	4a40      	ldr	r2, [pc, #256]	; (800dcb4 <TIM_Base_SetConfig+0x114>)
 800dbb4:	4293      	cmp	r3, r2
 800dbb6:	d013      	beq.n	800dbe0 <TIM_Base_SetConfig+0x40>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dbbe:	d00f      	beq.n	800dbe0 <TIM_Base_SetConfig+0x40>
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	4a3d      	ldr	r2, [pc, #244]	; (800dcb8 <TIM_Base_SetConfig+0x118>)
 800dbc4:	4293      	cmp	r3, r2
 800dbc6:	d00b      	beq.n	800dbe0 <TIM_Base_SetConfig+0x40>
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	4a3c      	ldr	r2, [pc, #240]	; (800dcbc <TIM_Base_SetConfig+0x11c>)
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	d007      	beq.n	800dbe0 <TIM_Base_SetConfig+0x40>
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	4a3b      	ldr	r2, [pc, #236]	; (800dcc0 <TIM_Base_SetConfig+0x120>)
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	d003      	beq.n	800dbe0 <TIM_Base_SetConfig+0x40>
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	4a3a      	ldr	r2, [pc, #232]	; (800dcc4 <TIM_Base_SetConfig+0x124>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d108      	bne.n	800dbf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dbe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dbe8:	683b      	ldr	r3, [r7, #0]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	4a2f      	ldr	r2, [pc, #188]	; (800dcb4 <TIM_Base_SetConfig+0x114>)
 800dbf6:	4293      	cmp	r3, r2
 800dbf8:	d02b      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dc00:	d027      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	4a2c      	ldr	r2, [pc, #176]	; (800dcb8 <TIM_Base_SetConfig+0x118>)
 800dc06:	4293      	cmp	r3, r2
 800dc08:	d023      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	4a2b      	ldr	r2, [pc, #172]	; (800dcbc <TIM_Base_SetConfig+0x11c>)
 800dc0e:	4293      	cmp	r3, r2
 800dc10:	d01f      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	4a2a      	ldr	r2, [pc, #168]	; (800dcc0 <TIM_Base_SetConfig+0x120>)
 800dc16:	4293      	cmp	r3, r2
 800dc18:	d01b      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	4a29      	ldr	r2, [pc, #164]	; (800dcc4 <TIM_Base_SetConfig+0x124>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d017      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	4a28      	ldr	r2, [pc, #160]	; (800dcc8 <TIM_Base_SetConfig+0x128>)
 800dc26:	4293      	cmp	r3, r2
 800dc28:	d013      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	4a27      	ldr	r2, [pc, #156]	; (800dccc <TIM_Base_SetConfig+0x12c>)
 800dc2e:	4293      	cmp	r3, r2
 800dc30:	d00f      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	4a26      	ldr	r2, [pc, #152]	; (800dcd0 <TIM_Base_SetConfig+0x130>)
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d00b      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	4a25      	ldr	r2, [pc, #148]	; (800dcd4 <TIM_Base_SetConfig+0x134>)
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	d007      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	4a24      	ldr	r2, [pc, #144]	; (800dcd8 <TIM_Base_SetConfig+0x138>)
 800dc46:	4293      	cmp	r3, r2
 800dc48:	d003      	beq.n	800dc52 <TIM_Base_SetConfig+0xb2>
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	4a23      	ldr	r2, [pc, #140]	; (800dcdc <TIM_Base_SetConfig+0x13c>)
 800dc4e:	4293      	cmp	r3, r2
 800dc50:	d108      	bne.n	800dc64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dc58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	68db      	ldr	r3, [r3, #12]
 800dc5e:	68fa      	ldr	r2, [r7, #12]
 800dc60:	4313      	orrs	r3, r2
 800dc62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	695b      	ldr	r3, [r3, #20]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	68fa      	ldr	r2, [r7, #12]
 800dc76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	689a      	ldr	r2, [r3, #8]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	4a0a      	ldr	r2, [pc, #40]	; (800dcb4 <TIM_Base_SetConfig+0x114>)
 800dc8c:	4293      	cmp	r3, r2
 800dc8e:	d003      	beq.n	800dc98 <TIM_Base_SetConfig+0xf8>
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	4a0c      	ldr	r2, [pc, #48]	; (800dcc4 <TIM_Base_SetConfig+0x124>)
 800dc94:	4293      	cmp	r3, r2
 800dc96:	d103      	bne.n	800dca0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	691a      	ldr	r2, [r3, #16]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2201      	movs	r2, #1
 800dca4:	615a      	str	r2, [r3, #20]
}
 800dca6:	bf00      	nop
 800dca8:	3714      	adds	r7, #20
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb0:	4770      	bx	lr
 800dcb2:	bf00      	nop
 800dcb4:	40010000 	.word	0x40010000
 800dcb8:	40000400 	.word	0x40000400
 800dcbc:	40000800 	.word	0x40000800
 800dcc0:	40000c00 	.word	0x40000c00
 800dcc4:	40010400 	.word	0x40010400
 800dcc8:	40014000 	.word	0x40014000
 800dccc:	40014400 	.word	0x40014400
 800dcd0:	40014800 	.word	0x40014800
 800dcd4:	40001800 	.word	0x40001800
 800dcd8:	40001c00 	.word	0x40001c00
 800dcdc:	40002000 	.word	0x40002000

0800dce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dce0:	b480      	push	{r7}
 800dce2:	b085      	sub	sp, #20
 800dce4:	af00      	add	r7, sp, #0
 800dce6:	6078      	str	r0, [r7, #4]
 800dce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d101      	bne.n	800dcf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dcf4:	2302      	movs	r3, #2
 800dcf6:	e05a      	b.n	800ddae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2201      	movs	r2, #1
 800dcfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2202      	movs	r2, #2
 800dd04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	685b      	ldr	r3, [r3, #4]
 800dd0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	689b      	ldr	r3, [r3, #8]
 800dd16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	68fa      	ldr	r2, [r7, #12]
 800dd26:	4313      	orrs	r3, r2
 800dd28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	4a21      	ldr	r2, [pc, #132]	; (800ddbc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dd38:	4293      	cmp	r3, r2
 800dd3a:	d022      	beq.n	800dd82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd44:	d01d      	beq.n	800dd82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a1d      	ldr	r2, [pc, #116]	; (800ddc0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dd4c:	4293      	cmp	r3, r2
 800dd4e:	d018      	beq.n	800dd82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	4a1b      	ldr	r2, [pc, #108]	; (800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d013      	beq.n	800dd82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	4a1a      	ldr	r2, [pc, #104]	; (800ddc8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dd60:	4293      	cmp	r3, r2
 800dd62:	d00e      	beq.n	800dd82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	4a18      	ldr	r2, [pc, #96]	; (800ddcc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d009      	beq.n	800dd82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4a17      	ldr	r2, [pc, #92]	; (800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d004      	beq.n	800dd82 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	4a15      	ldr	r2, [pc, #84]	; (800ddd4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d10c      	bne.n	800dd9c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd82:	68bb      	ldr	r3, [r7, #8]
 800dd84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	685b      	ldr	r3, [r3, #4]
 800dd8e:	68ba      	ldr	r2, [r7, #8]
 800dd90:	4313      	orrs	r3, r2
 800dd92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68ba      	ldr	r2, [r7, #8]
 800dd9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2201      	movs	r2, #1
 800dda0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ddac:	2300      	movs	r3, #0
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3714      	adds	r7, #20
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb8:	4770      	bx	lr
 800ddba:	bf00      	nop
 800ddbc:	40010000 	.word	0x40010000
 800ddc0:	40000400 	.word	0x40000400
 800ddc4:	40000800 	.word	0x40000800
 800ddc8:	40000c00 	.word	0x40000c00
 800ddcc:	40010400 	.word	0x40010400
 800ddd0:	40014000 	.word	0x40014000
 800ddd4:	40001800 	.word	0x40001800

0800ddd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b083      	sub	sp, #12
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dde0:	bf00      	nop
 800dde2:	370c      	adds	r7, #12
 800dde4:	46bd      	mov	sp, r7
 800dde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddea:	4770      	bx	lr

0800ddec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ddec:	b480      	push	{r7}
 800ddee:	b083      	sub	sp, #12
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr

0800de00 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800de00:	b084      	sub	sp, #16
 800de02:	b480      	push	{r7}
 800de04:	b085      	sub	sp, #20
 800de06:	af00      	add	r7, sp, #0
 800de08:	6078      	str	r0, [r7, #4]
 800de0a:	f107 001c 	add.w	r0, r7, #28
 800de0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800de12:	2300      	movs	r3, #0
 800de14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800de16:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800de18:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800de1a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800de1e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800de22:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800de24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800de26:	431a      	orrs	r2, r3
             Init.ClockDiv
 800de28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800de2a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	4313      	orrs	r3, r2
 800de30:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	685b      	ldr	r3, [r3, #4]
 800de36:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800de3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800de3e:	68fa      	ldr	r2, [r7, #12]
 800de40:	431a      	orrs	r2, r3
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800de46:	2300      	movs	r3, #0
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3714      	adds	r7, #20
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	b004      	add	sp, #16
 800de54:	4770      	bx	lr

0800de56 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800de56:	b480      	push	{r7}
 800de58:	b083      	sub	sp, #12
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800de64:	4618      	mov	r0, r3
 800de66:	370c      	adds	r7, #12
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr

0800de70 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800de70:	b480      	push	{r7}
 800de72:	b083      	sub	sp, #12
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
 800de78:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de84:	2300      	movs	r3, #0
}
 800de86:	4618      	mov	r0, r3
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800de92:	b580      	push	{r7, lr}
 800de94:	b082      	sub	sp, #8
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2203      	movs	r2, #3
 800de9e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800dea0:	2002      	movs	r0, #2
 800dea2:	f7f8 fb73 	bl	800658c <HAL_Delay>
  
  return HAL_OK;
 800dea6:	2300      	movs	r3, #0
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3708      	adds	r7, #8
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f003 0303 	and.w	r3, r3, #3
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	370c      	adds	r7, #12
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr

0800decc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800decc:	b480      	push	{r7}
 800dece:	b085      	sub	sp, #20
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	6078      	str	r0, [r7, #4]
 800ded4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ded6:	2300      	movs	r3, #0
 800ded8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800deea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800deec:	683b      	ldr	r3, [r7, #0]
 800deee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800def0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800def6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800def8:	68fa      	ldr	r2, [r7, #12]
 800defa:	4313      	orrs	r3, r2
 800defc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800df06:	f023 030f 	bic.w	r3, r3, #15
 800df0a:	68fa      	ldr	r2, [r7, #12]
 800df0c:	431a      	orrs	r2, r3
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800df12:	2300      	movs	r3, #0
}
 800df14:	4618      	mov	r0, r3
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr

0800df20 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800df20:	b480      	push	{r7}
 800df22:	b083      	sub	sp, #12
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	691b      	ldr	r3, [r3, #16]
 800df2c:	b2db      	uxtb	r3, r3
}
 800df2e:	4618      	mov	r0, r3
 800df30:	370c      	adds	r7, #12
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr

0800df3a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800df3a:	b480      	push	{r7}
 800df3c:	b085      	sub	sp, #20
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
 800df42:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	3314      	adds	r3, #20
 800df48:	461a      	mov	r2, r3
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	4413      	add	r3, r2
 800df4e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	681b      	ldr	r3, [r3, #0]
}  
 800df54:	4618      	mov	r0, r3
 800df56:	3714      	adds	r7, #20
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800df60:	b480      	push	{r7}
 800df62:	b085      	sub	sp, #20
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800df6a:	2300      	movs	r3, #0
 800df6c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800df6e:	683b      	ldr	r3, [r7, #0]
 800df70:	681a      	ldr	r2, [r3, #0]
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800df76:	683b      	ldr	r3, [r7, #0]
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df7e:	683b      	ldr	r3, [r7, #0]
 800df80:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df86:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800df8c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800df92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800df94:	68fa      	ldr	r2, [r7, #12]
 800df96:	4313      	orrs	r3, r2
 800df98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df9e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	431a      	orrs	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800dfaa:	2300      	movs	r3, #0

}
 800dfac:	4618      	mov	r0, r3
 800dfae:	3714      	adds	r7, #20
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr

0800dfb8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b088      	sub	sp, #32
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	6078      	str	r0, [r7, #4]
 800dfc0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800dfc2:	683b      	ldr	r3, [r7, #0]
 800dfc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800dfc6:	2310      	movs	r3, #16
 800dfc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800dfca:	2340      	movs	r3, #64	; 0x40
 800dfcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800dfd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfd6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800dfd8:	f107 0308 	add.w	r3, r7, #8
 800dfdc:	4619      	mov	r1, r3
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f7ff ff74 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800dfe4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfe8:	2110      	movs	r1, #16
 800dfea:	6878      	ldr	r0, [r7, #4]
 800dfec:	f000 fa44 	bl	800e478 <SDMMC_GetCmdResp1>
 800dff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800dff2:	69fb      	ldr	r3, [r7, #28]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3720      	adds	r7, #32
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b088      	sub	sp, #32
 800e000:	af00      	add	r7, sp, #0
 800e002:	6078      	str	r0, [r7, #4]
 800e004:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e006:	683b      	ldr	r3, [r7, #0]
 800e008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800e00a:	2311      	movs	r3, #17
 800e00c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e00e:	2340      	movs	r3, #64	; 0x40
 800e010:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e012:	2300      	movs	r3, #0
 800e014:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e016:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e01a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e01c:	f107 0308 	add.w	r3, r7, #8
 800e020:	4619      	mov	r1, r3
 800e022:	6878      	ldr	r0, [r7, #4]
 800e024:	f7ff ff52 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e028:	f241 3288 	movw	r2, #5000	; 0x1388
 800e02c:	2111      	movs	r1, #17
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 fa22 	bl	800e478 <SDMMC_GetCmdResp1>
 800e034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e036:	69fb      	ldr	r3, [r7, #28]
}
 800e038:	4618      	mov	r0, r3
 800e03a:	3720      	adds	r7, #32
 800e03c:	46bd      	mov	sp, r7
 800e03e:	bd80      	pop	{r7, pc}

0800e040 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b088      	sub	sp, #32
 800e044:	af00      	add	r7, sp, #0
 800e046:	6078      	str	r0, [r7, #4]
 800e048:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800e04e:	2312      	movs	r3, #18
 800e050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e052:	2340      	movs	r3, #64	; 0x40
 800e054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e056:	2300      	movs	r3, #0
 800e058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e05e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e060:	f107 0308 	add.w	r3, r7, #8
 800e064:	4619      	mov	r1, r3
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f7ff ff30 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e06c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e070:	2112      	movs	r1, #18
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f000 fa00 	bl	800e478 <SDMMC_GetCmdResp1>
 800e078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e07a:	69fb      	ldr	r3, [r7, #28]
}
 800e07c:	4618      	mov	r0, r3
 800e07e:	3720      	adds	r7, #32
 800e080:	46bd      	mov	sp, r7
 800e082:	bd80      	pop	{r7, pc}

0800e084 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b088      	sub	sp, #32
 800e088:	af00      	add	r7, sp, #0
 800e08a:	6078      	str	r0, [r7, #4]
 800e08c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800e092:	2318      	movs	r3, #24
 800e094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e096:	2340      	movs	r3, #64	; 0x40
 800e098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e09a:	2300      	movs	r3, #0
 800e09c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0a4:	f107 0308 	add.w	r3, r7, #8
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f7ff ff0e 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800e0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0b4:	2118      	movs	r1, #24
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f000 f9de 	bl	800e478 <SDMMC_GetCmdResp1>
 800e0bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e0be:	69fb      	ldr	r3, [r7, #28]
}
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	3720      	adds	r7, #32
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b088      	sub	sp, #32
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
 800e0d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800e0d2:	683b      	ldr	r3, [r7, #0]
 800e0d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800e0d6:	2319      	movs	r3, #25
 800e0d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e0da:	2340      	movs	r3, #64	; 0x40
 800e0dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e0de:	2300      	movs	r3, #0
 800e0e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e0e8:	f107 0308 	add.w	r3, r7, #8
 800e0ec:	4619      	mov	r1, r3
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f7ff feec 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800e0f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800e0f8:	2119      	movs	r1, #25
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f000 f9bc 	bl	800e478 <SDMMC_GetCmdResp1>
 800e100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e102:	69fb      	ldr	r3, [r7, #28]
}
 800e104:	4618      	mov	r0, r3
 800e106:	3720      	adds	r7, #32
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}

0800e10c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b088      	sub	sp, #32
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800e114:	2300      	movs	r3, #0
 800e116:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800e118:	230c      	movs	r3, #12
 800e11a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e11c:	2340      	movs	r3, #64	; 0x40
 800e11e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e120:	2300      	movs	r3, #0
 800e122:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e124:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e128:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e12a:	f107 0308 	add.w	r3, r7, #8
 800e12e:	4619      	mov	r1, r3
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f7ff fecb 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800e136:	4a05      	ldr	r2, [pc, #20]	; (800e14c <SDMMC_CmdStopTransfer+0x40>)
 800e138:	210c      	movs	r1, #12
 800e13a:	6878      	ldr	r0, [r7, #4]
 800e13c:	f000 f99c 	bl	800e478 <SDMMC_GetCmdResp1>
 800e140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e142:	69fb      	ldr	r3, [r7, #28]
}
 800e144:	4618      	mov	r0, r3
 800e146:	3720      	adds	r7, #32
 800e148:	46bd      	mov	sp, r7
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	05f5e100 	.word	0x05f5e100

0800e150 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b08a      	sub	sp, #40	; 0x28
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800e160:	2307      	movs	r3, #7
 800e162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e164:	2340      	movs	r3, #64	; 0x40
 800e166:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e168:	2300      	movs	r3, #0
 800e16a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e16c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e170:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e172:	f107 0310 	add.w	r3, r7, #16
 800e176:	4619      	mov	r1, r3
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f7ff fea7 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800e17e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e182:	2107      	movs	r1, #7
 800e184:	68f8      	ldr	r0, [r7, #12]
 800e186:	f000 f977 	bl	800e478 <SDMMC_GetCmdResp1>
 800e18a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800e18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3728      	adds	r7, #40	; 0x28
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b088      	sub	sp, #32
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800e19e:	2300      	movs	r3, #0
 800e1a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1b4:	f107 0308 	add.w	r3, r7, #8
 800e1b8:	4619      	mov	r1, r3
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f7ff fe86 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 f92d 	bl	800e420 <SDMMC_GetCmdError>
 800e1c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3720      	adds	r7, #32
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b088      	sub	sp, #32
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800e1da:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800e1de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800e1e0:	2308      	movs	r3, #8
 800e1e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e1e4:	2340      	movs	r3, #64	; 0x40
 800e1e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e1ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e1f2:	f107 0308 	add.w	r3, r7, #8
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	6878      	ldr	r0, [r7, #4]
 800e1fa:	f7ff fe67 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 fb24 	bl	800e84c <SDMMC_GetCmdResp7>
 800e204:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e206:	69fb      	ldr	r3, [r7, #28]
}
 800e208:	4618      	mov	r0, r3
 800e20a:	3720      	adds	r7, #32
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b088      	sub	sp, #32
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800e21a:	683b      	ldr	r3, [r7, #0]
 800e21c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800e21e:	2337      	movs	r3, #55	; 0x37
 800e220:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e222:	2340      	movs	r3, #64	; 0x40
 800e224:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e226:	2300      	movs	r3, #0
 800e228:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e22a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e22e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e230:	f107 0308 	add.w	r3, r7, #8
 800e234:	4619      	mov	r1, r3
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7ff fe48 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800e23c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e240:	2137      	movs	r1, #55	; 0x37
 800e242:	6878      	ldr	r0, [r7, #4]
 800e244:	f000 f918 	bl	800e478 <SDMMC_GetCmdResp1>
 800e248:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e24a:	69fb      	ldr	r3, [r7, #28]
}
 800e24c:	4618      	mov	r0, r3
 800e24e:	3720      	adds	r7, #32
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}

0800e254 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b088      	sub	sp, #32
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800e25e:	683b      	ldr	r3, [r7, #0]
 800e260:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e264:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e268:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800e26a:	2329      	movs	r3, #41	; 0x29
 800e26c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e26e:	2340      	movs	r3, #64	; 0x40
 800e270:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e272:	2300      	movs	r3, #0
 800e274:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e276:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e27a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e27c:	f107 0308 	add.w	r3, r7, #8
 800e280:	4619      	mov	r1, r3
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7ff fe22 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800e288:	6878      	ldr	r0, [r7, #4]
 800e28a:	f000 fa2b 	bl	800e6e4 <SDMMC_GetCmdResp3>
 800e28e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e290:	69fb      	ldr	r3, [r7, #28]
}
 800e292:	4618      	mov	r0, r3
 800e294:	3720      	adds	r7, #32
 800e296:	46bd      	mov	sp, r7
 800e298:	bd80      	pop	{r7, pc}

0800e29a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800e29a:	b580      	push	{r7, lr}
 800e29c:	b088      	sub	sp, #32
 800e29e:	af00      	add	r7, sp, #0
 800e2a0:	6078      	str	r0, [r7, #4]
 800e2a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800e2a8:	2306      	movs	r3, #6
 800e2aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2ac:	2340      	movs	r3, #64	; 0x40
 800e2ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2b0:	2300      	movs	r3, #0
 800e2b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2ba:	f107 0308 	add.w	r3, r7, #8
 800e2be:	4619      	mov	r1, r3
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f7ff fe03 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800e2c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800e2ca:	2106      	movs	r1, #6
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 f8d3 	bl	800e478 <SDMMC_GetCmdResp1>
 800e2d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e2d4:	69fb      	ldr	r3, [r7, #28]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3720      	adds	r7, #32
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	bd80      	pop	{r7, pc}

0800e2de <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800e2de:	b580      	push	{r7, lr}
 800e2e0:	b088      	sub	sp, #32
 800e2e2:	af00      	add	r7, sp, #0
 800e2e4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800e2ea:	2333      	movs	r3, #51	; 0x33
 800e2ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e2ee:	2340      	movs	r3, #64	; 0x40
 800e2f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e2f2:	2300      	movs	r3, #0
 800e2f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e2f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e2fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e2fc:	f107 0308 	add.w	r3, r7, #8
 800e300:	4619      	mov	r1, r3
 800e302:	6878      	ldr	r0, [r7, #4]
 800e304:	f7ff fde2 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800e308:	f241 3288 	movw	r2, #5000	; 0x1388
 800e30c:	2133      	movs	r1, #51	; 0x33
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 f8b2 	bl	800e478 <SDMMC_GetCmdResp1>
 800e314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e316:	69fb      	ldr	r3, [r7, #28]
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3720      	adds	r7, #32
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b088      	sub	sp, #32
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800e328:	2300      	movs	r3, #0
 800e32a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800e32c:	2302      	movs	r3, #2
 800e32e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e330:	23c0      	movs	r3, #192	; 0xc0
 800e332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e334:	2300      	movs	r3, #0
 800e336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e33c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e33e:	f107 0308 	add.w	r3, r7, #8
 800e342:	4619      	mov	r1, r3
 800e344:	6878      	ldr	r0, [r7, #4]
 800e346:	f7ff fdc1 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f982 	bl	800e654 <SDMMC_GetCmdResp2>
 800e350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e352:	69fb      	ldr	r3, [r7, #28]
}
 800e354:	4618      	mov	r0, r3
 800e356:	3720      	adds	r7, #32
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b088      	sub	sp, #32
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
 800e364:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800e36a:	2309      	movs	r3, #9
 800e36c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800e36e:	23c0      	movs	r3, #192	; 0xc0
 800e370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e372:	2300      	movs	r3, #0
 800e374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e37a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e37c:	f107 0308 	add.w	r3, r7, #8
 800e380:	4619      	mov	r1, r3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f7ff fda2 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	f000 f963 	bl	800e654 <SDMMC_GetCmdResp2>
 800e38e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e390:	69fb      	ldr	r3, [r7, #28]
}
 800e392:	4618      	mov	r0, r3
 800e394:	3720      	adds	r7, #32
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b088      	sub	sp, #32
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800e3a4:	2300      	movs	r3, #0
 800e3a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800e3a8:	2303      	movs	r3, #3
 800e3aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3ac:	2340      	movs	r3, #64	; 0x40
 800e3ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3ba:	f107 0308 	add.w	r3, r7, #8
 800e3be:	4619      	mov	r1, r3
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	f7ff fd83 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800e3c6:	683a      	ldr	r2, [r7, #0]
 800e3c8:	2103      	movs	r1, #3
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 f9c8 	bl	800e760 <SDMMC_GetCmdResp6>
 800e3d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e3d2:	69fb      	ldr	r3, [r7, #28]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3720      	adds	r7, #32
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b088      	sub	sp, #32
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800e3e6:	683b      	ldr	r3, [r7, #0]
 800e3e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800e3ea:	230d      	movs	r3, #13
 800e3ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800e3ee:	2340      	movs	r3, #64	; 0x40
 800e3f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800e3f2:	2300      	movs	r3, #0
 800e3f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800e3f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e3fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800e3fc:	f107 0308 	add.w	r3, r7, #8
 800e400:	4619      	mov	r1, r3
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f7ff fd62 	bl	800decc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800e408:	f241 3288 	movw	r2, #5000	; 0x1388
 800e40c:	210d      	movs	r1, #13
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 f832 	bl	800e478 <SDMMC_GetCmdResp1>
 800e414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800e416:	69fb      	ldr	r3, [r7, #28]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3720      	adds	r7, #32
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800e420:	b480      	push	{r7}
 800e422:	b085      	sub	sp, #20
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e428:	4b11      	ldr	r3, [pc, #68]	; (800e470 <SDMMC_GetCmdError+0x50>)
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	4a11      	ldr	r2, [pc, #68]	; (800e474 <SDMMC_GetCmdError+0x54>)
 800e42e:	fba2 2303 	umull	r2, r3, r2, r3
 800e432:	0a5b      	lsrs	r3, r3, #9
 800e434:	f241 3288 	movw	r2, #5000	; 0x1388
 800e438:	fb02 f303 	mul.w	r3, r2, r3
 800e43c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	1e5a      	subs	r2, r3, #1
 800e442:	60fa      	str	r2, [r7, #12]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d102      	bne.n	800e44e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e448:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e44c:	e009      	b.n	800e462 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e456:	2b00      	cmp	r3, #0
 800e458:	d0f1      	beq.n	800e43e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	22c5      	movs	r2, #197	; 0xc5
 800e45e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800e460:	2300      	movs	r3, #0
}
 800e462:	4618      	mov	r0, r3
 800e464:	3714      	adds	r7, #20
 800e466:	46bd      	mov	sp, r7
 800e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46c:	4770      	bx	lr
 800e46e:	bf00      	nop
 800e470:	20000000 	.word	0x20000000
 800e474:	10624dd3 	.word	0x10624dd3

0800e478 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800e478:	b580      	push	{r7, lr}
 800e47a:	b088      	sub	sp, #32
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	460b      	mov	r3, r1
 800e482:	607a      	str	r2, [r7, #4]
 800e484:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800e486:	4b70      	ldr	r3, [pc, #448]	; (800e648 <SDMMC_GetCmdResp1+0x1d0>)
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	4a70      	ldr	r2, [pc, #448]	; (800e64c <SDMMC_GetCmdResp1+0x1d4>)
 800e48c:	fba2 2303 	umull	r2, r3, r2, r3
 800e490:	0a5a      	lsrs	r2, r3, #9
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	fb02 f303 	mul.w	r3, r2, r3
 800e498:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e49a:	69fb      	ldr	r3, [r7, #28]
 800e49c:	1e5a      	subs	r2, r3, #1
 800e49e:	61fa      	str	r2, [r7, #28]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d102      	bne.n	800e4aa <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e4a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e4a8:	e0c9      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ae:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d0ef      	beq.n	800e49a <SDMMC_GetCmdResp1+0x22>
 800e4ba:	69bb      	ldr	r3, [r7, #24]
 800e4bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d1ea      	bne.n	800e49a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4c8:	f003 0304 	and.w	r3, r3, #4
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d004      	beq.n	800e4da <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2204      	movs	r2, #4
 800e4d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e4d6:	2304      	movs	r3, #4
 800e4d8:	e0b1      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4de:	f003 0301 	and.w	r3, r3, #1
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d004      	beq.n	800e4f0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	2201      	movs	r2, #1
 800e4ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	e0a6      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	22c5      	movs	r2, #197	; 0xc5
 800e4f4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e4f6:	68f8      	ldr	r0, [r7, #12]
 800e4f8:	f7ff fd12 	bl	800df20 <SDIO_GetCommandResponse>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	461a      	mov	r2, r3
 800e500:	7afb      	ldrb	r3, [r7, #11]
 800e502:	4293      	cmp	r3, r2
 800e504:	d001      	beq.n	800e50a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e506:	2301      	movs	r3, #1
 800e508:	e099      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e50a:	2100      	movs	r1, #0
 800e50c:	68f8      	ldr	r0, [r7, #12]
 800e50e:	f7ff fd14 	bl	800df3a <SDIO_GetResponse>
 800e512:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800e514:	697a      	ldr	r2, [r7, #20]
 800e516:	4b4e      	ldr	r3, [pc, #312]	; (800e650 <SDMMC_GetCmdResp1+0x1d8>)
 800e518:	4013      	ands	r3, r2
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d101      	bne.n	800e522 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800e51e:	2300      	movs	r3, #0
 800e520:	e08d      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800e522:	697b      	ldr	r3, [r7, #20]
 800e524:	2b00      	cmp	r3, #0
 800e526:	da02      	bge.n	800e52e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800e528:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e52c:	e087      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e534:	2b00      	cmp	r3, #0
 800e536:	d001      	beq.n	800e53c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800e538:	2340      	movs	r3, #64	; 0x40
 800e53a:	e080      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800e53c:	697b      	ldr	r3, [r7, #20]
 800e53e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e542:	2b00      	cmp	r3, #0
 800e544:	d001      	beq.n	800e54a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800e546:	2380      	movs	r3, #128	; 0x80
 800e548:	e079      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800e54a:	697b      	ldr	r3, [r7, #20]
 800e54c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e550:	2b00      	cmp	r3, #0
 800e552:	d002      	beq.n	800e55a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800e554:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e558:	e071      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800e55a:	697b      	ldr	r3, [r7, #20]
 800e55c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e560:	2b00      	cmp	r3, #0
 800e562:	d002      	beq.n	800e56a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800e564:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e568:	e069      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800e56a:	697b      	ldr	r3, [r7, #20]
 800e56c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e570:	2b00      	cmp	r3, #0
 800e572:	d002      	beq.n	800e57a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800e574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e578:	e061      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800e57a:	697b      	ldr	r3, [r7, #20]
 800e57c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e580:	2b00      	cmp	r3, #0
 800e582:	d002      	beq.n	800e58a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800e584:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e588:	e059      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e590:	2b00      	cmp	r3, #0
 800e592:	d002      	beq.n	800e59a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e598:	e051      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d002      	beq.n	800e5aa <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e5a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e5a8:	e049      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800e5aa:	697b      	ldr	r3, [r7, #20]
 800e5ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d002      	beq.n	800e5ba <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800e5b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e5b8:	e041      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d002      	beq.n	800e5ca <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800e5c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e5c8:	e039      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d002      	beq.n	800e5da <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800e5d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800e5d8:	e031      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800e5da:	697b      	ldr	r3, [r7, #20]
 800e5dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d002      	beq.n	800e5ea <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800e5e4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800e5e8:	e029      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d002      	beq.n	800e5fa <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800e5f4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e5f8:	e021      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e600:	2b00      	cmp	r3, #0
 800e602:	d002      	beq.n	800e60a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800e604:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800e608:	e019      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800e60a:	697b      	ldr	r3, [r7, #20]
 800e60c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e610:	2b00      	cmp	r3, #0
 800e612:	d002      	beq.n	800e61a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800e614:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e618:	e011      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e620:	2b00      	cmp	r3, #0
 800e622:	d002      	beq.n	800e62a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800e624:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800e628:	e009      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	f003 0308 	and.w	r3, r3, #8
 800e630:	2b00      	cmp	r3, #0
 800e632:	d002      	beq.n	800e63a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800e634:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800e638:	e001      	b.n	800e63e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e63a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e63e:	4618      	mov	r0, r3
 800e640:	3720      	adds	r7, #32
 800e642:	46bd      	mov	sp, r7
 800e644:	bd80      	pop	{r7, pc}
 800e646:	bf00      	nop
 800e648:	20000000 	.word	0x20000000
 800e64c:	10624dd3 	.word	0x10624dd3
 800e650:	fdffe008 	.word	0xfdffe008

0800e654 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800e654:	b480      	push	{r7}
 800e656:	b085      	sub	sp, #20
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e65c:	4b1f      	ldr	r3, [pc, #124]	; (800e6dc <SDMMC_GetCmdResp2+0x88>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4a1f      	ldr	r2, [pc, #124]	; (800e6e0 <SDMMC_GetCmdResp2+0x8c>)
 800e662:	fba2 2303 	umull	r2, r3, r2, r3
 800e666:	0a5b      	lsrs	r3, r3, #9
 800e668:	f241 3288 	movw	r2, #5000	; 0x1388
 800e66c:	fb02 f303 	mul.w	r3, r2, r3
 800e670:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	1e5a      	subs	r2, r3, #1
 800e676:	60fa      	str	r2, [r7, #12]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d102      	bne.n	800e682 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e67c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e680:	e026      	b.n	800e6d0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e686:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d0ef      	beq.n	800e672 <SDMMC_GetCmdResp2+0x1e>
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d1ea      	bne.n	800e672 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6a0:	f003 0304 	and.w	r3, r3, #4
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d004      	beq.n	800e6b2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	2204      	movs	r2, #4
 800e6ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e6ae:	2304      	movs	r3, #4
 800e6b0:	e00e      	b.n	800e6d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6b6:	f003 0301 	and.w	r3, r3, #1
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d004      	beq.n	800e6c8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	2201      	movs	r2, #1
 800e6c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e6c4:	2301      	movs	r3, #1
 800e6c6:	e003      	b.n	800e6d0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	22c5      	movs	r2, #197	; 0xc5
 800e6cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800e6ce:	2300      	movs	r3, #0
}
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	3714      	adds	r7, #20
 800e6d4:	46bd      	mov	sp, r7
 800e6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6da:	4770      	bx	lr
 800e6dc:	20000000 	.word	0x20000000
 800e6e0:	10624dd3 	.word	0x10624dd3

0800e6e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800e6e4:	b480      	push	{r7}
 800e6e6:	b085      	sub	sp, #20
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e6ec:	4b1a      	ldr	r3, [pc, #104]	; (800e758 <SDMMC_GetCmdResp3+0x74>)
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a1a      	ldr	r2, [pc, #104]	; (800e75c <SDMMC_GetCmdResp3+0x78>)
 800e6f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e6f6:	0a5b      	lsrs	r3, r3, #9
 800e6f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e6fc:	fb02 f303 	mul.w	r3, r2, r3
 800e700:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	1e5a      	subs	r2, r3, #1
 800e706:	60fa      	str	r2, [r7, #12]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d102      	bne.n	800e712 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e70c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e710:	e01b      	b.n	800e74a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e716:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e718:	68bb      	ldr	r3, [r7, #8]
 800e71a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d0ef      	beq.n	800e702 <SDMMC_GetCmdResp3+0x1e>
 800e722:	68bb      	ldr	r3, [r7, #8]
 800e724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d1ea      	bne.n	800e702 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e730:	f003 0304 	and.w	r3, r3, #4
 800e734:	2b00      	cmp	r3, #0
 800e736:	d004      	beq.n	800e742 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2204      	movs	r2, #4
 800e73c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e73e:	2304      	movs	r3, #4
 800e740:	e003      	b.n	800e74a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	22c5      	movs	r2, #197	; 0xc5
 800e746:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e748:	2300      	movs	r3, #0
}
 800e74a:	4618      	mov	r0, r3
 800e74c:	3714      	adds	r7, #20
 800e74e:	46bd      	mov	sp, r7
 800e750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e754:	4770      	bx	lr
 800e756:	bf00      	nop
 800e758:	20000000 	.word	0x20000000
 800e75c:	10624dd3 	.word	0x10624dd3

0800e760 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b088      	sub	sp, #32
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	460b      	mov	r3, r1
 800e76a:	607a      	str	r2, [r7, #4]
 800e76c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e76e:	4b35      	ldr	r3, [pc, #212]	; (800e844 <SDMMC_GetCmdResp6+0xe4>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	4a35      	ldr	r2, [pc, #212]	; (800e848 <SDMMC_GetCmdResp6+0xe8>)
 800e774:	fba2 2303 	umull	r2, r3, r2, r3
 800e778:	0a5b      	lsrs	r3, r3, #9
 800e77a:	f241 3288 	movw	r2, #5000	; 0x1388
 800e77e:	fb02 f303 	mul.w	r3, r2, r3
 800e782:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800e784:	69fb      	ldr	r3, [r7, #28]
 800e786:	1e5a      	subs	r2, r3, #1
 800e788:	61fa      	str	r2, [r7, #28]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d102      	bne.n	800e794 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e78e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e792:	e052      	b.n	800e83a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e798:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d0ef      	beq.n	800e784 <SDMMC_GetCmdResp6+0x24>
 800e7a4:	69bb      	ldr	r3, [r7, #24]
 800e7a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d1ea      	bne.n	800e784 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b2:	f003 0304 	and.w	r3, r3, #4
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d004      	beq.n	800e7c4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	2204      	movs	r2, #4
 800e7be:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e7c0:	2304      	movs	r3, #4
 800e7c2:	e03a      	b.n	800e83a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7c8:	f003 0301 	and.w	r3, r3, #1
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d004      	beq.n	800e7da <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	2201      	movs	r2, #1
 800e7d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7d6:	2301      	movs	r3, #1
 800e7d8:	e02f      	b.n	800e83a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800e7da:	68f8      	ldr	r0, [r7, #12]
 800e7dc:	f7ff fba0 	bl	800df20 <SDIO_GetCommandResponse>
 800e7e0:	4603      	mov	r3, r0
 800e7e2:	461a      	mov	r2, r3
 800e7e4:	7afb      	ldrb	r3, [r7, #11]
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d001      	beq.n	800e7ee <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e7ea:	2301      	movs	r3, #1
 800e7ec:	e025      	b.n	800e83a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	22c5      	movs	r2, #197	; 0xc5
 800e7f2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800e7f4:	2100      	movs	r1, #0
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f7ff fb9f 	bl	800df3a <SDIO_GetResponse>
 800e7fc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800e7fe:	697b      	ldr	r3, [r7, #20]
 800e800:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800e804:	2b00      	cmp	r3, #0
 800e806:	d106      	bne.n	800e816 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	0c1b      	lsrs	r3, r3, #16
 800e80c:	b29a      	uxth	r2, r3
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800e812:	2300      	movs	r3, #0
 800e814:	e011      	b.n	800e83a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800e816:	697b      	ldr	r3, [r7, #20]
 800e818:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d002      	beq.n	800e826 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800e820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e824:	e009      	b.n	800e83a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d002      	beq.n	800e836 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800e830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800e834:	e001      	b.n	800e83a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800e836:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3720      	adds	r7, #32
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}
 800e842:	bf00      	nop
 800e844:	20000000 	.word	0x20000000
 800e848:	10624dd3 	.word	0x10624dd3

0800e84c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800e84c:	b480      	push	{r7}
 800e84e:	b085      	sub	sp, #20
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800e854:	4b22      	ldr	r3, [pc, #136]	; (800e8e0 <SDMMC_GetCmdResp7+0x94>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a22      	ldr	r2, [pc, #136]	; (800e8e4 <SDMMC_GetCmdResp7+0x98>)
 800e85a:	fba2 2303 	umull	r2, r3, r2, r3
 800e85e:	0a5b      	lsrs	r3, r3, #9
 800e860:	f241 3288 	movw	r2, #5000	; 0x1388
 800e864:	fb02 f303 	mul.w	r3, r2, r3
 800e868:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	1e5a      	subs	r2, r3, #1
 800e86e:	60fa      	str	r2, [r7, #12]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d102      	bne.n	800e87a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800e874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e878:	e02c      	b.n	800e8d4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e87e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800e886:	2b00      	cmp	r3, #0
 800e888:	d0ef      	beq.n	800e86a <SDMMC_GetCmdResp7+0x1e>
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800e890:	2b00      	cmp	r3, #0
 800e892:	d1ea      	bne.n	800e86a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e898:	f003 0304 	and.w	r3, r3, #4
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d004      	beq.n	800e8aa <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2204      	movs	r2, #4
 800e8a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800e8a6:	2304      	movs	r3, #4
 800e8a8:	e014      	b.n	800e8d4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ae:	f003 0301 	and.w	r3, r3, #1
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d004      	beq.n	800e8c0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	e009      	b.n	800e8d4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d002      	beq.n	800e8d2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	2240      	movs	r2, #64	; 0x40
 800e8d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800e8d2:	2300      	movs	r3, #0
  
}
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	3714      	adds	r7, #20
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8de:	4770      	bx	lr
 800e8e0:	20000000 	.word	0x20000000
 800e8e4:	10624dd3 	.word	0x10624dd3

0800e8e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e8e8:	b084      	sub	sp, #16
 800e8ea:	b580      	push	{r7, lr}
 800e8ec:	b084      	sub	sp, #16
 800e8ee:	af00      	add	r7, sp, #0
 800e8f0:	6078      	str	r0, [r7, #4]
 800e8f2:	f107 001c 	add.w	r0, r7, #28
 800e8f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	d122      	bne.n	800e946 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e904:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e918:	687a      	ldr	r2, [r7, #4]
 800e91a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	68db      	ldr	r3, [r3, #12]
 800e920:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d105      	bne.n	800e93a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f001 fb16 	bl	800ff6c <USB_CoreReset>
 800e940:	4603      	mov	r3, r0
 800e942:	73fb      	strb	r3, [r7, #15]
 800e944:	e01a      	b.n	800e97c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	68db      	ldr	r3, [r3, #12]
 800e94a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	f001 fb0a 	bl	800ff6c <USB_CoreReset>
 800e958:	4603      	mov	r3, r0
 800e95a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e95c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d106      	bne.n	800e970 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e966:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	639a      	str	r2, [r3, #56]	; 0x38
 800e96e:	e005      	b.n	800e97c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e974:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e97c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d10b      	bne.n	800e99a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	689b      	ldr	r3, [r3, #8]
 800e986:	f043 0206 	orr.w	r2, r3, #6
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	689b      	ldr	r3, [r3, #8]
 800e992:	f043 0220 	orr.w	r2, r3, #32
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e99c:	4618      	mov	r0, r3
 800e99e:	3710      	adds	r7, #16
 800e9a0:	46bd      	mov	sp, r7
 800e9a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e9a6:	b004      	add	sp, #16
 800e9a8:	4770      	bx	lr
	...

0800e9ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b087      	sub	sp, #28
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	60f8      	str	r0, [r7, #12]
 800e9b4:	60b9      	str	r1, [r7, #8]
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e9ba:	79fb      	ldrb	r3, [r7, #7]
 800e9bc:	2b02      	cmp	r3, #2
 800e9be:	d165      	bne.n	800ea8c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	4a41      	ldr	r2, [pc, #260]	; (800eac8 <USB_SetTurnaroundTime+0x11c>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d906      	bls.n	800e9d6 <USB_SetTurnaroundTime+0x2a>
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	4a40      	ldr	r2, [pc, #256]	; (800eacc <USB_SetTurnaroundTime+0x120>)
 800e9cc:	4293      	cmp	r3, r2
 800e9ce:	d202      	bcs.n	800e9d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e9d0:	230f      	movs	r3, #15
 800e9d2:	617b      	str	r3, [r7, #20]
 800e9d4:	e062      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e9d6:	68bb      	ldr	r3, [r7, #8]
 800e9d8:	4a3c      	ldr	r2, [pc, #240]	; (800eacc <USB_SetTurnaroundTime+0x120>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d306      	bcc.n	800e9ec <USB_SetTurnaroundTime+0x40>
 800e9de:	68bb      	ldr	r3, [r7, #8]
 800e9e0:	4a3b      	ldr	r2, [pc, #236]	; (800ead0 <USB_SetTurnaroundTime+0x124>)
 800e9e2:	4293      	cmp	r3, r2
 800e9e4:	d202      	bcs.n	800e9ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e9e6:	230e      	movs	r3, #14
 800e9e8:	617b      	str	r3, [r7, #20]
 800e9ea:	e057      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e9ec:	68bb      	ldr	r3, [r7, #8]
 800e9ee:	4a38      	ldr	r2, [pc, #224]	; (800ead0 <USB_SetTurnaroundTime+0x124>)
 800e9f0:	4293      	cmp	r3, r2
 800e9f2:	d306      	bcc.n	800ea02 <USB_SetTurnaroundTime+0x56>
 800e9f4:	68bb      	ldr	r3, [r7, #8]
 800e9f6:	4a37      	ldr	r2, [pc, #220]	; (800ead4 <USB_SetTurnaroundTime+0x128>)
 800e9f8:	4293      	cmp	r3, r2
 800e9fa:	d202      	bcs.n	800ea02 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e9fc:	230d      	movs	r3, #13
 800e9fe:	617b      	str	r3, [r7, #20]
 800ea00:	e04c      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	4a33      	ldr	r2, [pc, #204]	; (800ead4 <USB_SetTurnaroundTime+0x128>)
 800ea06:	4293      	cmp	r3, r2
 800ea08:	d306      	bcc.n	800ea18 <USB_SetTurnaroundTime+0x6c>
 800ea0a:	68bb      	ldr	r3, [r7, #8]
 800ea0c:	4a32      	ldr	r2, [pc, #200]	; (800ead8 <USB_SetTurnaroundTime+0x12c>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d802      	bhi.n	800ea18 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ea12:	230c      	movs	r3, #12
 800ea14:	617b      	str	r3, [r7, #20]
 800ea16:	e041      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	4a2f      	ldr	r2, [pc, #188]	; (800ead8 <USB_SetTurnaroundTime+0x12c>)
 800ea1c:	4293      	cmp	r3, r2
 800ea1e:	d906      	bls.n	800ea2e <USB_SetTurnaroundTime+0x82>
 800ea20:	68bb      	ldr	r3, [r7, #8]
 800ea22:	4a2e      	ldr	r2, [pc, #184]	; (800eadc <USB_SetTurnaroundTime+0x130>)
 800ea24:	4293      	cmp	r3, r2
 800ea26:	d802      	bhi.n	800ea2e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ea28:	230b      	movs	r3, #11
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	e036      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	4a2a      	ldr	r2, [pc, #168]	; (800eadc <USB_SetTurnaroundTime+0x130>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d906      	bls.n	800ea44 <USB_SetTurnaroundTime+0x98>
 800ea36:	68bb      	ldr	r3, [r7, #8]
 800ea38:	4a29      	ldr	r2, [pc, #164]	; (800eae0 <USB_SetTurnaroundTime+0x134>)
 800ea3a:	4293      	cmp	r3, r2
 800ea3c:	d802      	bhi.n	800ea44 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ea3e:	230a      	movs	r3, #10
 800ea40:	617b      	str	r3, [r7, #20]
 800ea42:	e02b      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	4a26      	ldr	r2, [pc, #152]	; (800eae0 <USB_SetTurnaroundTime+0x134>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d906      	bls.n	800ea5a <USB_SetTurnaroundTime+0xae>
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	4a25      	ldr	r2, [pc, #148]	; (800eae4 <USB_SetTurnaroundTime+0x138>)
 800ea50:	4293      	cmp	r3, r2
 800ea52:	d202      	bcs.n	800ea5a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ea54:	2309      	movs	r3, #9
 800ea56:	617b      	str	r3, [r7, #20]
 800ea58:	e020      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ea5a:	68bb      	ldr	r3, [r7, #8]
 800ea5c:	4a21      	ldr	r2, [pc, #132]	; (800eae4 <USB_SetTurnaroundTime+0x138>)
 800ea5e:	4293      	cmp	r3, r2
 800ea60:	d306      	bcc.n	800ea70 <USB_SetTurnaroundTime+0xc4>
 800ea62:	68bb      	ldr	r3, [r7, #8]
 800ea64:	4a20      	ldr	r2, [pc, #128]	; (800eae8 <USB_SetTurnaroundTime+0x13c>)
 800ea66:	4293      	cmp	r3, r2
 800ea68:	d802      	bhi.n	800ea70 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ea6a:	2308      	movs	r3, #8
 800ea6c:	617b      	str	r3, [r7, #20]
 800ea6e:	e015      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	4a1d      	ldr	r2, [pc, #116]	; (800eae8 <USB_SetTurnaroundTime+0x13c>)
 800ea74:	4293      	cmp	r3, r2
 800ea76:	d906      	bls.n	800ea86 <USB_SetTurnaroundTime+0xda>
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	4a1c      	ldr	r2, [pc, #112]	; (800eaec <USB_SetTurnaroundTime+0x140>)
 800ea7c:	4293      	cmp	r3, r2
 800ea7e:	d202      	bcs.n	800ea86 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ea80:	2307      	movs	r3, #7
 800ea82:	617b      	str	r3, [r7, #20]
 800ea84:	e00a      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ea86:	2306      	movs	r3, #6
 800ea88:	617b      	str	r3, [r7, #20]
 800ea8a:	e007      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ea8c:	79fb      	ldrb	r3, [r7, #7]
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d102      	bne.n	800ea98 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ea92:	2309      	movs	r3, #9
 800ea94:	617b      	str	r3, [r7, #20]
 800ea96:	e001      	b.n	800ea9c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ea98:	2309      	movs	r3, #9
 800ea9a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	68da      	ldr	r2, [r3, #12]
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	029b      	lsls	r3, r3, #10
 800eab0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800eab4:	431a      	orrs	r2, r3
 800eab6:	68fb      	ldr	r3, [r7, #12]
 800eab8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800eaba:	2300      	movs	r3, #0
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	371c      	adds	r7, #28
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr
 800eac8:	00d8acbf 	.word	0x00d8acbf
 800eacc:	00e4e1c0 	.word	0x00e4e1c0
 800ead0:	00f42400 	.word	0x00f42400
 800ead4:	01067380 	.word	0x01067380
 800ead8:	011a499f 	.word	0x011a499f
 800eadc:	01312cff 	.word	0x01312cff
 800eae0:	014ca43f 	.word	0x014ca43f
 800eae4:	016e3600 	.word	0x016e3600
 800eae8:	01a6ab1f 	.word	0x01a6ab1f
 800eaec:	01e84800 	.word	0x01e84800

0800eaf0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eaf0:	b480      	push	{r7}
 800eaf2:	b083      	sub	sp, #12
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	f043 0201 	orr.w	r2, r3, #1
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eb04:	2300      	movs	r3, #0
}
 800eb06:	4618      	mov	r0, r3
 800eb08:	370c      	adds	r7, #12
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb10:	4770      	bx	lr

0800eb12 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800eb12:	b480      	push	{r7}
 800eb14:	b083      	sub	sp, #12
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	689b      	ldr	r3, [r3, #8]
 800eb1e:	f023 0201 	bic.w	r2, r3, #1
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800eb26:	2300      	movs	r3, #0
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800eb40:	2300      	movs	r3, #0
 800eb42:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800eb50:	78fb      	ldrb	r3, [r7, #3]
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d115      	bne.n	800eb82 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	68db      	ldr	r3, [r3, #12]
 800eb5a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800eb62:	2001      	movs	r0, #1
 800eb64:	f7f7 fd12 	bl	800658c <HAL_Delay>
      ms++;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800eb6e:	6878      	ldr	r0, [r7, #4]
 800eb70:	f001 f96c 	bl	800fe4c <USB_GetMode>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d01e      	beq.n	800ebb8 <USB_SetCurrentMode+0x84>
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	2b31      	cmp	r3, #49	; 0x31
 800eb7e:	d9f0      	bls.n	800eb62 <USB_SetCurrentMode+0x2e>
 800eb80:	e01a      	b.n	800ebb8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800eb82:	78fb      	ldrb	r3, [r7, #3]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d115      	bne.n	800ebb4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800eb94:	2001      	movs	r0, #1
 800eb96:	f7f7 fcf9 	bl	800658c <HAL_Delay>
      ms++;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	3301      	adds	r3, #1
 800eb9e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800eba0:	6878      	ldr	r0, [r7, #4]
 800eba2:	f001 f953 	bl	800fe4c <USB_GetMode>
 800eba6:	4603      	mov	r3, r0
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d005      	beq.n	800ebb8 <USB_SetCurrentMode+0x84>
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2b31      	cmp	r3, #49	; 0x31
 800ebb0:	d9f0      	bls.n	800eb94 <USB_SetCurrentMode+0x60>
 800ebb2:	e001      	b.n	800ebb8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	e005      	b.n	800ebc4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2b32      	cmp	r3, #50	; 0x32
 800ebbc:	d101      	bne.n	800ebc2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ebbe:	2301      	movs	r3, #1
 800ebc0:	e000      	b.n	800ebc4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3710      	adds	r7, #16
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	bd80      	pop	{r7, pc}

0800ebcc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ebcc:	b084      	sub	sp, #16
 800ebce:	b580      	push	{r7, lr}
 800ebd0:	b086      	sub	sp, #24
 800ebd2:	af00      	add	r7, sp, #0
 800ebd4:	6078      	str	r0, [r7, #4]
 800ebd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ebda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	613b      	str	r3, [r7, #16]
 800ebea:	e009      	b.n	800ec00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ebec:	687a      	ldr	r2, [r7, #4]
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	3340      	adds	r3, #64	; 0x40
 800ebf2:	009b      	lsls	r3, r3, #2
 800ebf4:	4413      	add	r3, r2
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	3301      	adds	r3, #1
 800ebfe:	613b      	str	r3, [r7, #16]
 800ec00:	693b      	ldr	r3, [r7, #16]
 800ec02:	2b0e      	cmp	r3, #14
 800ec04:	d9f2      	bls.n	800ebec <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ec06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d11c      	bne.n	800ec46 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	68fa      	ldr	r2, [r7, #12]
 800ec16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec1a:	f043 0302 	orr.w	r3, r3, #2
 800ec1e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec24:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	601a      	str	r2, [r3, #0]
 800ec44:	e005      	b.n	800ec52 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec58:	461a      	mov	r2, r3
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec64:	4619      	mov	r1, r3
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec6c:	461a      	mov	r2, r3
 800ec6e:	680b      	ldr	r3, [r1, #0]
 800ec70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ec72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec74:	2b01      	cmp	r3, #1
 800ec76:	d10c      	bne.n	800ec92 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ec78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d104      	bne.n	800ec88 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ec7e:	2100      	movs	r1, #0
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 f945 	bl	800ef10 <USB_SetDevSpeed>
 800ec86:	e008      	b.n	800ec9a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ec88:	2101      	movs	r1, #1
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	f000 f940 	bl	800ef10 <USB_SetDevSpeed>
 800ec90:	e003      	b.n	800ec9a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ec92:	2103      	movs	r1, #3
 800ec94:	6878      	ldr	r0, [r7, #4]
 800ec96:	f000 f93b 	bl	800ef10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ec9a:	2110      	movs	r1, #16
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f000 f8f3 	bl	800ee88 <USB_FlushTxFifo>
 800eca2:	4603      	mov	r3, r0
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d001      	beq.n	800ecac <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ecac:	6878      	ldr	r0, [r7, #4]
 800ecae:	f000 f90f 	bl	800eed0 <USB_FlushRxFifo>
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d001      	beq.n	800ecbc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ecb8:	2301      	movs	r3, #1
 800ecba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecce:	461a      	mov	r2, r3
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ecda:	461a      	mov	r2, r3
 800ecdc:	2300      	movs	r3, #0
 800ecde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ece0:	2300      	movs	r3, #0
 800ece2:	613b      	str	r3, [r7, #16]
 800ece4:	e043      	b.n	800ed6e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ece6:	693b      	ldr	r3, [r7, #16]
 800ece8:	015a      	lsls	r2, r3, #5
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	4413      	add	r3, r2
 800ecee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ecf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ecfc:	d118      	bne.n	800ed30 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800ecfe:	693b      	ldr	r3, [r7, #16]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10a      	bne.n	800ed1a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ed04:	693b      	ldr	r3, [r7, #16]
 800ed06:	015a      	lsls	r2, r3, #5
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	4413      	add	r3, r2
 800ed0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed10:	461a      	mov	r2, r3
 800ed12:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ed16:	6013      	str	r3, [r2, #0]
 800ed18:	e013      	b.n	800ed42 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	015a      	lsls	r2, r3, #5
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	4413      	add	r3, r2
 800ed22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed26:	461a      	mov	r2, r3
 800ed28:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ed2c:	6013      	str	r3, [r2, #0]
 800ed2e:	e008      	b.n	800ed42 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	015a      	lsls	r2, r3, #5
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	4413      	add	r3, r2
 800ed38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed3c:	461a      	mov	r2, r3
 800ed3e:	2300      	movs	r3, #0
 800ed40:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	015a      	lsls	r2, r3, #5
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	4413      	add	r3, r2
 800ed4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed4e:	461a      	mov	r2, r3
 800ed50:	2300      	movs	r3, #0
 800ed52:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ed54:	693b      	ldr	r3, [r7, #16]
 800ed56:	015a      	lsls	r2, r3, #5
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	4413      	add	r3, r2
 800ed5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ed60:	461a      	mov	r2, r3
 800ed62:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ed66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed68:	693b      	ldr	r3, [r7, #16]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	613b      	str	r3, [r7, #16]
 800ed6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed70:	693a      	ldr	r2, [r7, #16]
 800ed72:	429a      	cmp	r2, r3
 800ed74:	d3b7      	bcc.n	800ece6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ed76:	2300      	movs	r3, #0
 800ed78:	613b      	str	r3, [r7, #16]
 800ed7a:	e043      	b.n	800ee04 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	015a      	lsls	r2, r3, #5
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	4413      	add	r3, r2
 800ed84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ed8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ed92:	d118      	bne.n	800edc6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d10a      	bne.n	800edb0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ed9a:	693b      	ldr	r3, [r7, #16]
 800ed9c:	015a      	lsls	r2, r3, #5
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	4413      	add	r3, r2
 800eda2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800eda6:	461a      	mov	r2, r3
 800eda8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800edac:	6013      	str	r3, [r2, #0]
 800edae:	e013      	b.n	800edd8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800edb0:	693b      	ldr	r3, [r7, #16]
 800edb2:	015a      	lsls	r2, r3, #5
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	4413      	add	r3, r2
 800edb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edbc:	461a      	mov	r2, r3
 800edbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800edc2:	6013      	str	r3, [r2, #0]
 800edc4:	e008      	b.n	800edd8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800edc6:	693b      	ldr	r3, [r7, #16]
 800edc8:	015a      	lsls	r2, r3, #5
 800edca:	68fb      	ldr	r3, [r7, #12]
 800edcc:	4413      	add	r3, r2
 800edce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edd2:	461a      	mov	r2, r3
 800edd4:	2300      	movs	r3, #0
 800edd6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800edd8:	693b      	ldr	r3, [r7, #16]
 800edda:	015a      	lsls	r2, r3, #5
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	4413      	add	r3, r2
 800ede0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ede4:	461a      	mov	r2, r3
 800ede6:	2300      	movs	r3, #0
 800ede8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800edea:	693b      	ldr	r3, [r7, #16]
 800edec:	015a      	lsls	r2, r3, #5
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	4413      	add	r3, r2
 800edf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800edf6:	461a      	mov	r2, r3
 800edf8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800edfc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800edfe:	693b      	ldr	r3, [r7, #16]
 800ee00:	3301      	adds	r3, #1
 800ee02:	613b      	str	r3, [r7, #16]
 800ee04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee06:	693a      	ldr	r2, [r7, #16]
 800ee08:	429a      	cmp	r2, r3
 800ee0a:	d3b7      	bcc.n	800ed7c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ee12:	691b      	ldr	r3, [r3, #16]
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ee1a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ee1e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	2200      	movs	r2, #0
 800ee24:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ee2c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ee2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d105      	bne.n	800ee40 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	f043 0210 	orr.w	r2, r3, #16
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	699a      	ldr	r2, [r3, #24]
 800ee44:	4b0f      	ldr	r3, [pc, #60]	; (800ee84 <USB_DevInit+0x2b8>)
 800ee46:	4313      	orrs	r3, r2
 800ee48:	687a      	ldr	r2, [r7, #4]
 800ee4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ee4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d005      	beq.n	800ee5e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	699b      	ldr	r3, [r3, #24]
 800ee56:	f043 0208 	orr.w	r2, r3, #8
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ee5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee60:	2b01      	cmp	r3, #1
 800ee62:	d107      	bne.n	800ee74 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ee6c:	f043 0304 	orr.w	r3, r3, #4
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ee74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	3718      	adds	r7, #24
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ee80:	b004      	add	sp, #16
 800ee82:	4770      	bx	lr
 800ee84:	803c3800 	.word	0x803c3800

0800ee88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b085      	sub	sp, #20
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ee92:	2300      	movs	r3, #0
 800ee94:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	019b      	lsls	r3, r3, #6
 800ee9a:	f043 0220 	orr.w	r2, r3, #32
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	3301      	adds	r3, #1
 800eea6:	60fb      	str	r3, [r7, #12]
 800eea8:	4a08      	ldr	r2, [pc, #32]	; (800eecc <USB_FlushTxFifo+0x44>)
 800eeaa:	4293      	cmp	r3, r2
 800eeac:	d901      	bls.n	800eeb2 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800eeae:	2303      	movs	r3, #3
 800eeb0:	e006      	b.n	800eec0 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	f003 0320 	and.w	r3, r3, #32
 800eeba:	2b20      	cmp	r3, #32
 800eebc:	d0f1      	beq.n	800eea2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800eebe:	2300      	movs	r3, #0
}
 800eec0:	4618      	mov	r0, r3
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr
 800eecc:	00030d40 	.word	0x00030d40

0800eed0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eed8:	2300      	movs	r3, #0
 800eeda:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2210      	movs	r2, #16
 800eee0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	3301      	adds	r3, #1
 800eee6:	60fb      	str	r3, [r7, #12]
 800eee8:	4a08      	ldr	r2, [pc, #32]	; (800ef0c <USB_FlushRxFifo+0x3c>)
 800eeea:	4293      	cmp	r3, r2
 800eeec:	d901      	bls.n	800eef2 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800eeee:	2303      	movs	r3, #3
 800eef0:	e006      	b.n	800ef00 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	691b      	ldr	r3, [r3, #16]
 800eef6:	f003 0310 	and.w	r3, r3, #16
 800eefa:	2b10      	cmp	r3, #16
 800eefc:	d0f1      	beq.n	800eee2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800eefe:	2300      	movs	r3, #0
}
 800ef00:	4618      	mov	r0, r3
 800ef02:	3714      	adds	r7, #20
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr
 800ef0c:	00030d40 	.word	0x00030d40

0800ef10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ef10:	b480      	push	{r7}
 800ef12:	b085      	sub	sp, #20
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
 800ef18:	460b      	mov	r3, r1
 800ef1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef26:	681a      	ldr	r2, [r3, #0]
 800ef28:	78fb      	ldrb	r3, [r7, #3]
 800ef2a:	68f9      	ldr	r1, [r7, #12]
 800ef2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ef30:	4313      	orrs	r3, r2
 800ef32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ef34:	2300      	movs	r3, #0
}
 800ef36:	4618      	mov	r0, r3
 800ef38:	3714      	adds	r7, #20
 800ef3a:	46bd      	mov	sp, r7
 800ef3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef40:	4770      	bx	lr

0800ef42 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ef42:	b480      	push	{r7}
 800ef44:	b087      	sub	sp, #28
 800ef46:	af00      	add	r7, sp, #0
 800ef48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ef4e:	693b      	ldr	r3, [r7, #16]
 800ef50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ef54:	689b      	ldr	r3, [r3, #8]
 800ef56:	f003 0306 	and.w	r3, r3, #6
 800ef5a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d102      	bne.n	800ef68 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ef62:	2300      	movs	r3, #0
 800ef64:	75fb      	strb	r3, [r7, #23]
 800ef66:	e00a      	b.n	800ef7e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d002      	beq.n	800ef74 <USB_GetDevSpeed+0x32>
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2b06      	cmp	r3, #6
 800ef72:	d102      	bne.n	800ef7a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ef74:	2302      	movs	r3, #2
 800ef76:	75fb      	strb	r3, [r7, #23]
 800ef78:	e001      	b.n	800ef7e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ef7a:	230f      	movs	r3, #15
 800ef7c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ef7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	371c      	adds	r7, #28
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	785b      	ldrb	r3, [r3, #1]
 800efa4:	2b01      	cmp	r3, #1
 800efa6:	d13a      	bne.n	800f01e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800efa8:	68fb      	ldr	r3, [r7, #12]
 800efaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800efae:	69da      	ldr	r2, [r3, #28]
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	781b      	ldrb	r3, [r3, #0]
 800efb4:	f003 030f 	and.w	r3, r3, #15
 800efb8:	2101      	movs	r1, #1
 800efba:	fa01 f303 	lsl.w	r3, r1, r3
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	68f9      	ldr	r1, [r7, #12]
 800efc2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800efc6:	4313      	orrs	r3, r2
 800efc8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	015a      	lsls	r2, r3, #5
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	4413      	add	r3, r2
 800efd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d155      	bne.n	800f08c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	015a      	lsls	r2, r3, #5
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	4413      	add	r3, r2
 800efe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800efec:	681a      	ldr	r2, [r3, #0]
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	689b      	ldr	r3, [r3, #8]
 800eff2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	78db      	ldrb	r3, [r3, #3]
 800effa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800effc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	059b      	lsls	r3, r3, #22
 800f002:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f004:	4313      	orrs	r3, r2
 800f006:	68ba      	ldr	r2, [r7, #8]
 800f008:	0151      	lsls	r1, r2, #5
 800f00a:	68fa      	ldr	r2, [r7, #12]
 800f00c:	440a      	add	r2, r1
 800f00e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f01a:	6013      	str	r3, [r2, #0]
 800f01c:	e036      	b.n	800f08c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f024:	69da      	ldr	r2, [r3, #28]
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	f003 030f 	and.w	r3, r3, #15
 800f02e:	2101      	movs	r1, #1
 800f030:	fa01 f303 	lsl.w	r3, r1, r3
 800f034:	041b      	lsls	r3, r3, #16
 800f036:	68f9      	ldr	r1, [r7, #12]
 800f038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f03c:	4313      	orrs	r3, r2
 800f03e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f040:	68bb      	ldr	r3, [r7, #8]
 800f042:	015a      	lsls	r2, r3, #5
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	4413      	add	r3, r2
 800f048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f052:	2b00      	cmp	r3, #0
 800f054:	d11a      	bne.n	800f08c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f056:	68bb      	ldr	r3, [r7, #8]
 800f058:	015a      	lsls	r2, r3, #5
 800f05a:	68fb      	ldr	r3, [r7, #12]
 800f05c:	4413      	add	r3, r2
 800f05e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f062:	681a      	ldr	r2, [r3, #0]
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	689b      	ldr	r3, [r3, #8]
 800f068:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	78db      	ldrb	r3, [r3, #3]
 800f070:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f072:	430b      	orrs	r3, r1
 800f074:	4313      	orrs	r3, r2
 800f076:	68ba      	ldr	r2, [r7, #8]
 800f078:	0151      	lsls	r1, r2, #5
 800f07a:	68fa      	ldr	r2, [r7, #12]
 800f07c:	440a      	add	r2, r1
 800f07e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f086:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f08a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f08c:	2300      	movs	r3, #0
}
 800f08e:	4618      	mov	r0, r3
 800f090:	3714      	adds	r7, #20
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
	...

0800f09c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f09c:	b480      	push	{r7}
 800f09e:	b085      	sub	sp, #20
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	785b      	ldrb	r3, [r3, #1]
 800f0b4:	2b01      	cmp	r3, #1
 800f0b6:	d161      	bne.n	800f17c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f0b8:	68bb      	ldr	r3, [r7, #8]
 800f0ba:	015a      	lsls	r2, r3, #5
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	4413      	add	r3, r2
 800f0c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f0ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f0ce:	d11f      	bne.n	800f110 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f0d0:	68bb      	ldr	r3, [r7, #8]
 800f0d2:	015a      	lsls	r2, r3, #5
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	4413      	add	r3, r2
 800f0d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	68ba      	ldr	r2, [r7, #8]
 800f0e0:	0151      	lsls	r1, r2, #5
 800f0e2:	68fa      	ldr	r2, [r7, #12]
 800f0e4:	440a      	add	r2, r1
 800f0e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f0ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f0ee:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f0f0:	68bb      	ldr	r3, [r7, #8]
 800f0f2:	015a      	lsls	r2, r3, #5
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	4413      	add	r3, r2
 800f0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0fc:	681b      	ldr	r3, [r3, #0]
 800f0fe:	68ba      	ldr	r2, [r7, #8]
 800f100:	0151      	lsls	r1, r2, #5
 800f102:	68fa      	ldr	r2, [r7, #12]
 800f104:	440a      	add	r2, r1
 800f106:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f10a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f10e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f118:	683b      	ldr	r3, [r7, #0]
 800f11a:	781b      	ldrb	r3, [r3, #0]
 800f11c:	f003 030f 	and.w	r3, r3, #15
 800f120:	2101      	movs	r1, #1
 800f122:	fa01 f303 	lsl.w	r3, r1, r3
 800f126:	b29b      	uxth	r3, r3
 800f128:	43db      	mvns	r3, r3
 800f12a:	68f9      	ldr	r1, [r7, #12]
 800f12c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f130:	4013      	ands	r3, r2
 800f132:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f13a:	69da      	ldr	r2, [r3, #28]
 800f13c:	683b      	ldr	r3, [r7, #0]
 800f13e:	781b      	ldrb	r3, [r3, #0]
 800f140:	f003 030f 	and.w	r3, r3, #15
 800f144:	2101      	movs	r1, #1
 800f146:	fa01 f303 	lsl.w	r3, r1, r3
 800f14a:	b29b      	uxth	r3, r3
 800f14c:	43db      	mvns	r3, r3
 800f14e:	68f9      	ldr	r1, [r7, #12]
 800f150:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f154:	4013      	ands	r3, r2
 800f156:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	015a      	lsls	r2, r3, #5
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	4413      	add	r3, r2
 800f160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	0159      	lsls	r1, r3, #5
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	440b      	add	r3, r1
 800f16e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f172:	4619      	mov	r1, r3
 800f174:	4b35      	ldr	r3, [pc, #212]	; (800f24c <USB_DeactivateEndpoint+0x1b0>)
 800f176:	4013      	ands	r3, r2
 800f178:	600b      	str	r3, [r1, #0]
 800f17a:	e060      	b.n	800f23e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	015a      	lsls	r2, r3, #5
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	4413      	add	r3, r2
 800f184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f18e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f192:	d11f      	bne.n	800f1d4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	015a      	lsls	r2, r3, #5
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	4413      	add	r3, r2
 800f19c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	0151      	lsls	r1, r2, #5
 800f1a6:	68fa      	ldr	r2, [r7, #12]
 800f1a8:	440a      	add	r2, r1
 800f1aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f1b2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	015a      	lsls	r2, r3, #5
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	4413      	add	r3, r2
 800f1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	68ba      	ldr	r2, [r7, #8]
 800f1c4:	0151      	lsls	r1, r2, #5
 800f1c6:	68fa      	ldr	r2, [r7, #12]
 800f1c8:	440a      	add	r2, r1
 800f1ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f1ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f1d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	f003 030f 	and.w	r3, r3, #15
 800f1e4:	2101      	movs	r1, #1
 800f1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800f1ea:	041b      	lsls	r3, r3, #16
 800f1ec:	43db      	mvns	r3, r3
 800f1ee:	68f9      	ldr	r1, [r7, #12]
 800f1f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1f4:	4013      	ands	r3, r2
 800f1f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1fe:	69da      	ldr	r2, [r3, #28]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	781b      	ldrb	r3, [r3, #0]
 800f204:	f003 030f 	and.w	r3, r3, #15
 800f208:	2101      	movs	r1, #1
 800f20a:	fa01 f303 	lsl.w	r3, r1, r3
 800f20e:	041b      	lsls	r3, r3, #16
 800f210:	43db      	mvns	r3, r3
 800f212:	68f9      	ldr	r1, [r7, #12]
 800f214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f218:	4013      	ands	r3, r2
 800f21a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	015a      	lsls	r2, r3, #5
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	4413      	add	r3, r2
 800f224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f228:	681a      	ldr	r2, [r3, #0]
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	0159      	lsls	r1, r3, #5
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	440b      	add	r3, r1
 800f232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f236:	4619      	mov	r1, r3
 800f238:	4b05      	ldr	r3, [pc, #20]	; (800f250 <USB_DeactivateEndpoint+0x1b4>)
 800f23a:	4013      	ands	r3, r2
 800f23c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f23e:	2300      	movs	r3, #0
}
 800f240:	4618      	mov	r0, r3
 800f242:	3714      	adds	r7, #20
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	ec337800 	.word	0xec337800
 800f250:	eff37800 	.word	0xeff37800

0800f254 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f254:	b580      	push	{r7, lr}
 800f256:	b08a      	sub	sp, #40	; 0x28
 800f258:	af02      	add	r7, sp, #8
 800f25a:	60f8      	str	r0, [r7, #12]
 800f25c:	60b9      	str	r1, [r7, #8]
 800f25e:	4613      	mov	r3, r2
 800f260:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	781b      	ldrb	r3, [r3, #0]
 800f26a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f26c:	68bb      	ldr	r3, [r7, #8]
 800f26e:	785b      	ldrb	r3, [r3, #1]
 800f270:	2b01      	cmp	r3, #1
 800f272:	f040 815c 	bne.w	800f52e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	695b      	ldr	r3, [r3, #20]
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d132      	bne.n	800f2e4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f27e:	69bb      	ldr	r3, [r7, #24]
 800f280:	015a      	lsls	r2, r3, #5
 800f282:	69fb      	ldr	r3, [r7, #28]
 800f284:	4413      	add	r3, r2
 800f286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f28a:	691b      	ldr	r3, [r3, #16]
 800f28c:	69ba      	ldr	r2, [r7, #24]
 800f28e:	0151      	lsls	r1, r2, #5
 800f290:	69fa      	ldr	r2, [r7, #28]
 800f292:	440a      	add	r2, r1
 800f294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f298:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f29c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f2a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f2a2:	69bb      	ldr	r3, [r7, #24]
 800f2a4:	015a      	lsls	r2, r3, #5
 800f2a6:	69fb      	ldr	r3, [r7, #28]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ae:	691b      	ldr	r3, [r3, #16]
 800f2b0:	69ba      	ldr	r2, [r7, #24]
 800f2b2:	0151      	lsls	r1, r2, #5
 800f2b4:	69fa      	ldr	r2, [r7, #28]
 800f2b6:	440a      	add	r2, r1
 800f2b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f2c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2c2:	69bb      	ldr	r3, [r7, #24]
 800f2c4:	015a      	lsls	r2, r3, #5
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ce:	691b      	ldr	r3, [r3, #16]
 800f2d0:	69ba      	ldr	r2, [r7, #24]
 800f2d2:	0151      	lsls	r1, r2, #5
 800f2d4:	69fa      	ldr	r2, [r7, #28]
 800f2d6:	440a      	add	r2, r1
 800f2d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2dc:	0cdb      	lsrs	r3, r3, #19
 800f2de:	04db      	lsls	r3, r3, #19
 800f2e0:	6113      	str	r3, [r2, #16]
 800f2e2:	e074      	b.n	800f3ce <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	015a      	lsls	r2, r3, #5
 800f2e8:	69fb      	ldr	r3, [r7, #28]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	69ba      	ldr	r2, [r7, #24]
 800f2f4:	0151      	lsls	r1, r2, #5
 800f2f6:	69fa      	ldr	r2, [r7, #28]
 800f2f8:	440a      	add	r2, r1
 800f2fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2fe:	0cdb      	lsrs	r3, r3, #19
 800f300:	04db      	lsls	r3, r3, #19
 800f302:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f304:	69bb      	ldr	r3, [r7, #24]
 800f306:	015a      	lsls	r2, r3, #5
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	4413      	add	r3, r2
 800f30c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f310:	691b      	ldr	r3, [r3, #16]
 800f312:	69ba      	ldr	r2, [r7, #24]
 800f314:	0151      	lsls	r1, r2, #5
 800f316:	69fa      	ldr	r2, [r7, #28]
 800f318:	440a      	add	r2, r1
 800f31a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f31e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f322:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f328:	69bb      	ldr	r3, [r7, #24]
 800f32a:	015a      	lsls	r2, r3, #5
 800f32c:	69fb      	ldr	r3, [r7, #28]
 800f32e:	4413      	add	r3, r2
 800f330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f334:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	6959      	ldr	r1, [r3, #20]
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	689b      	ldr	r3, [r3, #8]
 800f33e:	440b      	add	r3, r1
 800f340:	1e59      	subs	r1, r3, #1
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	fbb1 f3f3 	udiv	r3, r1, r3
 800f34a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f34c:	4b9d      	ldr	r3, [pc, #628]	; (800f5c4 <USB_EPStartXfer+0x370>)
 800f34e:	400b      	ands	r3, r1
 800f350:	69b9      	ldr	r1, [r7, #24]
 800f352:	0148      	lsls	r0, r1, #5
 800f354:	69f9      	ldr	r1, [r7, #28]
 800f356:	4401      	add	r1, r0
 800f358:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f35c:	4313      	orrs	r3, r2
 800f35e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	015a      	lsls	r2, r3, #5
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	4413      	add	r3, r2
 800f368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f36c:	691a      	ldr	r2, [r3, #16]
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	695b      	ldr	r3, [r3, #20]
 800f372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f376:	69b9      	ldr	r1, [r7, #24]
 800f378:	0148      	lsls	r0, r1, #5
 800f37a:	69f9      	ldr	r1, [r7, #28]
 800f37c:	4401      	add	r1, r0
 800f37e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f382:	4313      	orrs	r3, r2
 800f384:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f386:	68bb      	ldr	r3, [r7, #8]
 800f388:	78db      	ldrb	r3, [r3, #3]
 800f38a:	2b01      	cmp	r3, #1
 800f38c:	d11f      	bne.n	800f3ce <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	015a      	lsls	r2, r3, #5
 800f392:	69fb      	ldr	r3, [r7, #28]
 800f394:	4413      	add	r3, r2
 800f396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f39a:	691b      	ldr	r3, [r3, #16]
 800f39c:	69ba      	ldr	r2, [r7, #24]
 800f39e:	0151      	lsls	r1, r2, #5
 800f3a0:	69fa      	ldr	r2, [r7, #28]
 800f3a2:	440a      	add	r2, r1
 800f3a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3a8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f3ac:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f3ae:	69bb      	ldr	r3, [r7, #24]
 800f3b0:	015a      	lsls	r2, r3, #5
 800f3b2:	69fb      	ldr	r3, [r7, #28]
 800f3b4:	4413      	add	r3, r2
 800f3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3ba:	691b      	ldr	r3, [r3, #16]
 800f3bc:	69ba      	ldr	r2, [r7, #24]
 800f3be:	0151      	lsls	r1, r2, #5
 800f3c0:	69fa      	ldr	r2, [r7, #28]
 800f3c2:	440a      	add	r2, r1
 800f3c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f3c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f3cc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f3ce:	79fb      	ldrb	r3, [r7, #7]
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d14b      	bne.n	800f46c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f3d4:	68bb      	ldr	r3, [r7, #8]
 800f3d6:	691b      	ldr	r3, [r3, #16]
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d009      	beq.n	800f3f0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f3dc:	69bb      	ldr	r3, [r7, #24]
 800f3de:	015a      	lsls	r2, r3, #5
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	4413      	add	r3, r2
 800f3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f3e8:	461a      	mov	r2, r3
 800f3ea:	68bb      	ldr	r3, [r7, #8]
 800f3ec:	691b      	ldr	r3, [r3, #16]
 800f3ee:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	78db      	ldrb	r3, [r3, #3]
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d128      	bne.n	800f44a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f3f8:	69fb      	ldr	r3, [r7, #28]
 800f3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3fe:	689b      	ldr	r3, [r3, #8]
 800f400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f404:	2b00      	cmp	r3, #0
 800f406:	d110      	bne.n	800f42a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	015a      	lsls	r2, r3, #5
 800f40c:	69fb      	ldr	r3, [r7, #28]
 800f40e:	4413      	add	r3, r2
 800f410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	69ba      	ldr	r2, [r7, #24]
 800f418:	0151      	lsls	r1, r2, #5
 800f41a:	69fa      	ldr	r2, [r7, #28]
 800f41c:	440a      	add	r2, r1
 800f41e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f422:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f426:	6013      	str	r3, [r2, #0]
 800f428:	e00f      	b.n	800f44a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f42a:	69bb      	ldr	r3, [r7, #24]
 800f42c:	015a      	lsls	r2, r3, #5
 800f42e:	69fb      	ldr	r3, [r7, #28]
 800f430:	4413      	add	r3, r2
 800f432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	69ba      	ldr	r2, [r7, #24]
 800f43a:	0151      	lsls	r1, r2, #5
 800f43c:	69fa      	ldr	r2, [r7, #28]
 800f43e:	440a      	add	r2, r1
 800f440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f448:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f44a:	69bb      	ldr	r3, [r7, #24]
 800f44c:	015a      	lsls	r2, r3, #5
 800f44e:	69fb      	ldr	r3, [r7, #28]
 800f450:	4413      	add	r3, r2
 800f452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	69ba      	ldr	r2, [r7, #24]
 800f45a:	0151      	lsls	r1, r2, #5
 800f45c:	69fa      	ldr	r2, [r7, #28]
 800f45e:	440a      	add	r2, r1
 800f460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f464:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f468:	6013      	str	r3, [r2, #0]
 800f46a:	e12f      	b.n	800f6cc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	015a      	lsls	r2, r3, #5
 800f470:	69fb      	ldr	r3, [r7, #28]
 800f472:	4413      	add	r3, r2
 800f474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	69ba      	ldr	r2, [r7, #24]
 800f47c:	0151      	lsls	r1, r2, #5
 800f47e:	69fa      	ldr	r2, [r7, #28]
 800f480:	440a      	add	r2, r1
 800f482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f486:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f48a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800f48c:	68bb      	ldr	r3, [r7, #8]
 800f48e:	78db      	ldrb	r3, [r3, #3]
 800f490:	2b01      	cmp	r3, #1
 800f492:	d015      	beq.n	800f4c0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800f494:	68bb      	ldr	r3, [r7, #8]
 800f496:	695b      	ldr	r3, [r3, #20]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	f000 8117 	beq.w	800f6cc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f49e:	69fb      	ldr	r3, [r7, #28]
 800f4a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f4a6:	68bb      	ldr	r3, [r7, #8]
 800f4a8:	781b      	ldrb	r3, [r3, #0]
 800f4aa:	f003 030f 	and.w	r3, r3, #15
 800f4ae:	2101      	movs	r1, #1
 800f4b0:	fa01 f303 	lsl.w	r3, r1, r3
 800f4b4:	69f9      	ldr	r1, [r7, #28]
 800f4b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4ba:	4313      	orrs	r3, r2
 800f4bc:	634b      	str	r3, [r1, #52]	; 0x34
 800f4be:	e105      	b.n	800f6cc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4c6:	689b      	ldr	r3, [r3, #8]
 800f4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d110      	bne.n	800f4f2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	015a      	lsls	r2, r3, #5
 800f4d4:	69fb      	ldr	r3, [r7, #28]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	69ba      	ldr	r2, [r7, #24]
 800f4e0:	0151      	lsls	r1, r2, #5
 800f4e2:	69fa      	ldr	r2, [r7, #28]
 800f4e4:	440a      	add	r2, r1
 800f4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f4ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f4ee:	6013      	str	r3, [r2, #0]
 800f4f0:	e00f      	b.n	800f512 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800f4f2:	69bb      	ldr	r3, [r7, #24]
 800f4f4:	015a      	lsls	r2, r3, #5
 800f4f6:	69fb      	ldr	r3, [r7, #28]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	69ba      	ldr	r2, [r7, #24]
 800f502:	0151      	lsls	r1, r2, #5
 800f504:	69fa      	ldr	r2, [r7, #28]
 800f506:	440a      	add	r2, r1
 800f508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f50c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f510:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	68d9      	ldr	r1, [r3, #12]
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	781a      	ldrb	r2, [r3, #0]
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	695b      	ldr	r3, [r3, #20]
 800f51e:	b298      	uxth	r0, r3
 800f520:	79fb      	ldrb	r3, [r7, #7]
 800f522:	9300      	str	r3, [sp, #0]
 800f524:	4603      	mov	r3, r0
 800f526:	68f8      	ldr	r0, [r7, #12]
 800f528:	f000 fa2b 	bl	800f982 <USB_WritePacket>
 800f52c:	e0ce      	b.n	800f6cc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f52e:	69bb      	ldr	r3, [r7, #24]
 800f530:	015a      	lsls	r2, r3, #5
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	4413      	add	r3, r2
 800f536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f53a:	691b      	ldr	r3, [r3, #16]
 800f53c:	69ba      	ldr	r2, [r7, #24]
 800f53e:	0151      	lsls	r1, r2, #5
 800f540:	69fa      	ldr	r2, [r7, #28]
 800f542:	440a      	add	r2, r1
 800f544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f548:	0cdb      	lsrs	r3, r3, #19
 800f54a:	04db      	lsls	r3, r3, #19
 800f54c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f54e:	69bb      	ldr	r3, [r7, #24]
 800f550:	015a      	lsls	r2, r3, #5
 800f552:	69fb      	ldr	r3, [r7, #28]
 800f554:	4413      	add	r3, r2
 800f556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f55a:	691b      	ldr	r3, [r3, #16]
 800f55c:	69ba      	ldr	r2, [r7, #24]
 800f55e:	0151      	lsls	r1, r2, #5
 800f560:	69fa      	ldr	r2, [r7, #28]
 800f562:	440a      	add	r2, r1
 800f564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f568:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f56c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f570:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800f572:	68bb      	ldr	r3, [r7, #8]
 800f574:	695b      	ldr	r3, [r3, #20]
 800f576:	2b00      	cmp	r3, #0
 800f578:	d126      	bne.n	800f5c8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	015a      	lsls	r2, r3, #5
 800f57e:	69fb      	ldr	r3, [r7, #28]
 800f580:	4413      	add	r3, r2
 800f582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f586:	691a      	ldr	r2, [r3, #16]
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	689b      	ldr	r3, [r3, #8]
 800f58c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f590:	69b9      	ldr	r1, [r7, #24]
 800f592:	0148      	lsls	r0, r1, #5
 800f594:	69f9      	ldr	r1, [r7, #28]
 800f596:	4401      	add	r1, r0
 800f598:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f59c:	4313      	orrs	r3, r2
 800f59e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f5a0:	69bb      	ldr	r3, [r7, #24]
 800f5a2:	015a      	lsls	r2, r3, #5
 800f5a4:	69fb      	ldr	r3, [r7, #28]
 800f5a6:	4413      	add	r3, r2
 800f5a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5ac:	691b      	ldr	r3, [r3, #16]
 800f5ae:	69ba      	ldr	r2, [r7, #24]
 800f5b0:	0151      	lsls	r1, r2, #5
 800f5b2:	69fa      	ldr	r2, [r7, #28]
 800f5b4:	440a      	add	r2, r1
 800f5b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f5ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f5be:	6113      	str	r3, [r2, #16]
 800f5c0:	e036      	b.n	800f630 <USB_EPStartXfer+0x3dc>
 800f5c2:	bf00      	nop
 800f5c4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	695a      	ldr	r2, [r3, #20]
 800f5cc:	68bb      	ldr	r3, [r7, #8]
 800f5ce:	689b      	ldr	r3, [r3, #8]
 800f5d0:	4413      	add	r3, r2
 800f5d2:	1e5a      	subs	r2, r3, #1
 800f5d4:	68bb      	ldr	r3, [r7, #8]
 800f5d6:	689b      	ldr	r3, [r3, #8]
 800f5d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5dc:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800f5de:	69bb      	ldr	r3, [r7, #24]
 800f5e0:	015a      	lsls	r2, r3, #5
 800f5e2:	69fb      	ldr	r3, [r7, #28]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5ea:	691a      	ldr	r2, [r3, #16]
 800f5ec:	8afb      	ldrh	r3, [r7, #22]
 800f5ee:	04d9      	lsls	r1, r3, #19
 800f5f0:	4b39      	ldr	r3, [pc, #228]	; (800f6d8 <USB_EPStartXfer+0x484>)
 800f5f2:	400b      	ands	r3, r1
 800f5f4:	69b9      	ldr	r1, [r7, #24]
 800f5f6:	0148      	lsls	r0, r1, #5
 800f5f8:	69f9      	ldr	r1, [r7, #28]
 800f5fa:	4401      	add	r1, r0
 800f5fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f600:	4313      	orrs	r3, r2
 800f602:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800f604:	69bb      	ldr	r3, [r7, #24]
 800f606:	015a      	lsls	r2, r3, #5
 800f608:	69fb      	ldr	r3, [r7, #28]
 800f60a:	4413      	add	r3, r2
 800f60c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f610:	691a      	ldr	r2, [r3, #16]
 800f612:	68bb      	ldr	r3, [r7, #8]
 800f614:	689b      	ldr	r3, [r3, #8]
 800f616:	8af9      	ldrh	r1, [r7, #22]
 800f618:	fb01 f303 	mul.w	r3, r1, r3
 800f61c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f620:	69b9      	ldr	r1, [r7, #24]
 800f622:	0148      	lsls	r0, r1, #5
 800f624:	69f9      	ldr	r1, [r7, #28]
 800f626:	4401      	add	r1, r0
 800f628:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f62c:	4313      	orrs	r3, r2
 800f62e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f630:	79fb      	ldrb	r3, [r7, #7]
 800f632:	2b01      	cmp	r3, #1
 800f634:	d10d      	bne.n	800f652 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	68db      	ldr	r3, [r3, #12]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d009      	beq.n	800f652 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	68d9      	ldr	r1, [r3, #12]
 800f642:	69bb      	ldr	r3, [r7, #24]
 800f644:	015a      	lsls	r2, r3, #5
 800f646:	69fb      	ldr	r3, [r7, #28]
 800f648:	4413      	add	r3, r2
 800f64a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f64e:	460a      	mov	r2, r1
 800f650:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800f652:	68bb      	ldr	r3, [r7, #8]
 800f654:	78db      	ldrb	r3, [r3, #3]
 800f656:	2b01      	cmp	r3, #1
 800f658:	d128      	bne.n	800f6ac <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f65a:	69fb      	ldr	r3, [r7, #28]
 800f65c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f660:	689b      	ldr	r3, [r3, #8]
 800f662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f666:	2b00      	cmp	r3, #0
 800f668:	d110      	bne.n	800f68c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	015a      	lsls	r2, r3, #5
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	4413      	add	r3, r2
 800f672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	69ba      	ldr	r2, [r7, #24]
 800f67a:	0151      	lsls	r1, r2, #5
 800f67c:	69fa      	ldr	r2, [r7, #28]
 800f67e:	440a      	add	r2, r1
 800f680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f684:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f688:	6013      	str	r3, [r2, #0]
 800f68a:	e00f      	b.n	800f6ac <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800f68c:	69bb      	ldr	r3, [r7, #24]
 800f68e:	015a      	lsls	r2, r3, #5
 800f690:	69fb      	ldr	r3, [r7, #28]
 800f692:	4413      	add	r3, r2
 800f694:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	69ba      	ldr	r2, [r7, #24]
 800f69c:	0151      	lsls	r1, r2, #5
 800f69e:	69fa      	ldr	r2, [r7, #28]
 800f6a0:	440a      	add	r2, r1
 800f6a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f6ac:	69bb      	ldr	r3, [r7, #24]
 800f6ae:	015a      	lsls	r2, r3, #5
 800f6b0:	69fb      	ldr	r3, [r7, #28]
 800f6b2:	4413      	add	r3, r2
 800f6b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	69ba      	ldr	r2, [r7, #24]
 800f6bc:	0151      	lsls	r1, r2, #5
 800f6be:	69fa      	ldr	r2, [r7, #28]
 800f6c0:	440a      	add	r2, r1
 800f6c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f6c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f6ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f6cc:	2300      	movs	r3, #0
}
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	3720      	adds	r7, #32
 800f6d2:	46bd      	mov	sp, r7
 800f6d4:	bd80      	pop	{r7, pc}
 800f6d6:	bf00      	nop
 800f6d8:	1ff80000 	.word	0x1ff80000

0800f6dc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f6dc:	b480      	push	{r7}
 800f6de:	b087      	sub	sp, #28
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	781b      	ldrb	r3, [r3, #0]
 800f6f2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f6f4:	68bb      	ldr	r3, [r7, #8]
 800f6f6:	785b      	ldrb	r3, [r3, #1]
 800f6f8:	2b01      	cmp	r3, #1
 800f6fa:	f040 80cd 	bne.w	800f898 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f6fe:	68bb      	ldr	r3, [r7, #8]
 800f700:	695b      	ldr	r3, [r3, #20]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d132      	bne.n	800f76c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	015a      	lsls	r2, r3, #5
 800f70a:	697b      	ldr	r3, [r7, #20]
 800f70c:	4413      	add	r3, r2
 800f70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f712:	691b      	ldr	r3, [r3, #16]
 800f714:	693a      	ldr	r2, [r7, #16]
 800f716:	0151      	lsls	r1, r2, #5
 800f718:	697a      	ldr	r2, [r7, #20]
 800f71a:	440a      	add	r2, r1
 800f71c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f720:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f724:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f728:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f72a:	693b      	ldr	r3, [r7, #16]
 800f72c:	015a      	lsls	r2, r3, #5
 800f72e:	697b      	ldr	r3, [r7, #20]
 800f730:	4413      	add	r3, r2
 800f732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f736:	691b      	ldr	r3, [r3, #16]
 800f738:	693a      	ldr	r2, [r7, #16]
 800f73a:	0151      	lsls	r1, r2, #5
 800f73c:	697a      	ldr	r2, [r7, #20]
 800f73e:	440a      	add	r2, r1
 800f740:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f744:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f748:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f74a:	693b      	ldr	r3, [r7, #16]
 800f74c:	015a      	lsls	r2, r3, #5
 800f74e:	697b      	ldr	r3, [r7, #20]
 800f750:	4413      	add	r3, r2
 800f752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f756:	691b      	ldr	r3, [r3, #16]
 800f758:	693a      	ldr	r2, [r7, #16]
 800f75a:	0151      	lsls	r1, r2, #5
 800f75c:	697a      	ldr	r2, [r7, #20]
 800f75e:	440a      	add	r2, r1
 800f760:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f764:	0cdb      	lsrs	r3, r3, #19
 800f766:	04db      	lsls	r3, r3, #19
 800f768:	6113      	str	r3, [r2, #16]
 800f76a:	e04e      	b.n	800f80a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f76c:	693b      	ldr	r3, [r7, #16]
 800f76e:	015a      	lsls	r2, r3, #5
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	4413      	add	r3, r2
 800f774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f778:	691b      	ldr	r3, [r3, #16]
 800f77a:	693a      	ldr	r2, [r7, #16]
 800f77c:	0151      	lsls	r1, r2, #5
 800f77e:	697a      	ldr	r2, [r7, #20]
 800f780:	440a      	add	r2, r1
 800f782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f786:	0cdb      	lsrs	r3, r3, #19
 800f788:	04db      	lsls	r3, r3, #19
 800f78a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	015a      	lsls	r2, r3, #5
 800f790:	697b      	ldr	r3, [r7, #20]
 800f792:	4413      	add	r3, r2
 800f794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f798:	691b      	ldr	r3, [r3, #16]
 800f79a:	693a      	ldr	r2, [r7, #16]
 800f79c:	0151      	lsls	r1, r2, #5
 800f79e:	697a      	ldr	r2, [r7, #20]
 800f7a0:	440a      	add	r2, r1
 800f7a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f7aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f7ae:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800f7b0:	68bb      	ldr	r3, [r7, #8]
 800f7b2:	695a      	ldr	r2, [r3, #20]
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	689b      	ldr	r3, [r3, #8]
 800f7b8:	429a      	cmp	r2, r3
 800f7ba:	d903      	bls.n	800f7c4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	689a      	ldr	r2, [r3, #8]
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	015a      	lsls	r2, r3, #5
 800f7c8:	697b      	ldr	r3, [r7, #20]
 800f7ca:	4413      	add	r3, r2
 800f7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7d0:	691b      	ldr	r3, [r3, #16]
 800f7d2:	693a      	ldr	r2, [r7, #16]
 800f7d4:	0151      	lsls	r1, r2, #5
 800f7d6:	697a      	ldr	r2, [r7, #20]
 800f7d8:	440a      	add	r2, r1
 800f7da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f7de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f7e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	015a      	lsls	r2, r3, #5
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	4413      	add	r3, r2
 800f7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7f0:	691a      	ldr	r2, [r3, #16]
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	695b      	ldr	r3, [r3, #20]
 800f7f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f7fa:	6939      	ldr	r1, [r7, #16]
 800f7fc:	0148      	lsls	r0, r1, #5
 800f7fe:	6979      	ldr	r1, [r7, #20]
 800f800:	4401      	add	r1, r0
 800f802:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f806:	4313      	orrs	r3, r2
 800f808:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800f80a:	79fb      	ldrb	r3, [r7, #7]
 800f80c:	2b01      	cmp	r3, #1
 800f80e:	d11e      	bne.n	800f84e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	691b      	ldr	r3, [r3, #16]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d009      	beq.n	800f82c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	015a      	lsls	r2, r3, #5
 800f81c:	697b      	ldr	r3, [r7, #20]
 800f81e:	4413      	add	r3, r2
 800f820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f824:	461a      	mov	r2, r3
 800f826:	68bb      	ldr	r3, [r7, #8]
 800f828:	691b      	ldr	r3, [r3, #16]
 800f82a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	015a      	lsls	r2, r3, #5
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	4413      	add	r3, r2
 800f834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	693a      	ldr	r2, [r7, #16]
 800f83c:	0151      	lsls	r1, r2, #5
 800f83e:	697a      	ldr	r2, [r7, #20]
 800f840:	440a      	add	r2, r1
 800f842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f846:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f84a:	6013      	str	r3, [r2, #0]
 800f84c:	e092      	b.n	800f974 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800f84e:	693b      	ldr	r3, [r7, #16]
 800f850:	015a      	lsls	r2, r3, #5
 800f852:	697b      	ldr	r3, [r7, #20]
 800f854:	4413      	add	r3, r2
 800f856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	0151      	lsls	r1, r2, #5
 800f860:	697a      	ldr	r2, [r7, #20]
 800f862:	440a      	add	r2, r1
 800f864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f868:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f86c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	695b      	ldr	r3, [r3, #20]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d07e      	beq.n	800f974 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f87c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	f003 030f 	and.w	r3, r3, #15
 800f886:	2101      	movs	r1, #1
 800f888:	fa01 f303 	lsl.w	r3, r1, r3
 800f88c:	6979      	ldr	r1, [r7, #20]
 800f88e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f892:	4313      	orrs	r3, r2
 800f894:	634b      	str	r3, [r1, #52]	; 0x34
 800f896:	e06d      	b.n	800f974 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	015a      	lsls	r2, r3, #5
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	4413      	add	r3, r2
 800f8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8a4:	691b      	ldr	r3, [r3, #16]
 800f8a6:	693a      	ldr	r2, [r7, #16]
 800f8a8:	0151      	lsls	r1, r2, #5
 800f8aa:	697a      	ldr	r2, [r7, #20]
 800f8ac:	440a      	add	r2, r1
 800f8ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8b2:	0cdb      	lsrs	r3, r3, #19
 800f8b4:	04db      	lsls	r3, r3, #19
 800f8b6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	015a      	lsls	r2, r3, #5
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	4413      	add	r3, r2
 800f8c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8c4:	691b      	ldr	r3, [r3, #16]
 800f8c6:	693a      	ldr	r2, [r7, #16]
 800f8c8:	0151      	lsls	r1, r2, #5
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	440a      	add	r2, r1
 800f8ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f8d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800f8d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800f8da:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800f8dc:	68bb      	ldr	r3, [r7, #8]
 800f8de:	695b      	ldr	r3, [r3, #20]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d003      	beq.n	800f8ec <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800f8e4:	68bb      	ldr	r3, [r7, #8]
 800f8e6:	689a      	ldr	r2, [r3, #8]
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f8ec:	693b      	ldr	r3, [r7, #16]
 800f8ee:	015a      	lsls	r2, r3, #5
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	4413      	add	r3, r2
 800f8f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f8f8:	691b      	ldr	r3, [r3, #16]
 800f8fa:	693a      	ldr	r2, [r7, #16]
 800f8fc:	0151      	lsls	r1, r2, #5
 800f8fe:	697a      	ldr	r2, [r7, #20]
 800f900:	440a      	add	r2, r1
 800f902:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f90a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800f90c:	693b      	ldr	r3, [r7, #16]
 800f90e:	015a      	lsls	r2, r3, #5
 800f910:	697b      	ldr	r3, [r7, #20]
 800f912:	4413      	add	r3, r2
 800f914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f918:	691a      	ldr	r2, [r3, #16]
 800f91a:	68bb      	ldr	r3, [r7, #8]
 800f91c:	689b      	ldr	r3, [r3, #8]
 800f91e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f922:	6939      	ldr	r1, [r7, #16]
 800f924:	0148      	lsls	r0, r1, #5
 800f926:	6979      	ldr	r1, [r7, #20]
 800f928:	4401      	add	r1, r0
 800f92a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800f92e:	4313      	orrs	r3, r2
 800f930:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800f932:	79fb      	ldrb	r3, [r7, #7]
 800f934:	2b01      	cmp	r3, #1
 800f936:	d10d      	bne.n	800f954 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	68db      	ldr	r3, [r3, #12]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d009      	beq.n	800f954 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	68d9      	ldr	r1, [r3, #12]
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	015a      	lsls	r2, r3, #5
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	4413      	add	r3, r2
 800f94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f950:	460a      	mov	r2, r1
 800f952:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f954:	693b      	ldr	r3, [r7, #16]
 800f956:	015a      	lsls	r2, r3, #5
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	4413      	add	r3, r2
 800f95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	693a      	ldr	r2, [r7, #16]
 800f964:	0151      	lsls	r1, r2, #5
 800f966:	697a      	ldr	r2, [r7, #20]
 800f968:	440a      	add	r2, r1
 800f96a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f96e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800f972:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f974:	2300      	movs	r3, #0
}
 800f976:	4618      	mov	r0, r3
 800f978:	371c      	adds	r7, #28
 800f97a:	46bd      	mov	sp, r7
 800f97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f980:	4770      	bx	lr

0800f982 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f982:	b480      	push	{r7}
 800f984:	b089      	sub	sp, #36	; 0x24
 800f986:	af00      	add	r7, sp, #0
 800f988:	60f8      	str	r0, [r7, #12]
 800f98a:	60b9      	str	r1, [r7, #8]
 800f98c:	4611      	mov	r1, r2
 800f98e:	461a      	mov	r2, r3
 800f990:	460b      	mov	r3, r1
 800f992:	71fb      	strb	r3, [r7, #7]
 800f994:	4613      	mov	r3, r2
 800f996:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f9a0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d123      	bne.n	800f9f0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f9a8:	88bb      	ldrh	r3, [r7, #4]
 800f9aa:	3303      	adds	r3, #3
 800f9ac:	089b      	lsrs	r3, r3, #2
 800f9ae:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	61bb      	str	r3, [r7, #24]
 800f9b4:	e018      	b.n	800f9e8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f9b6:	79fb      	ldrb	r3, [r7, #7]
 800f9b8:	031a      	lsls	r2, r3, #12
 800f9ba:	697b      	ldr	r3, [r7, #20]
 800f9bc:	4413      	add	r3, r2
 800f9be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	69fb      	ldr	r3, [r7, #28]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	3301      	adds	r3, #1
 800f9ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f9d0:	69fb      	ldr	r3, [r7, #28]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f9d6:	69fb      	ldr	r3, [r7, #28]
 800f9d8:	3301      	adds	r3, #1
 800f9da:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	3301      	adds	r3, #1
 800f9e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f9e2:	69bb      	ldr	r3, [r7, #24]
 800f9e4:	3301      	adds	r3, #1
 800f9e6:	61bb      	str	r3, [r7, #24]
 800f9e8:	69ba      	ldr	r2, [r7, #24]
 800f9ea:	693b      	ldr	r3, [r7, #16]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d3e2      	bcc.n	800f9b6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f9f0:	2300      	movs	r3, #0
}
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	3724      	adds	r7, #36	; 0x24
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fc:	4770      	bx	lr

0800f9fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f9fe:	b480      	push	{r7}
 800fa00:	b08b      	sub	sp, #44	; 0x2c
 800fa02:	af00      	add	r7, sp, #0
 800fa04:	60f8      	str	r0, [r7, #12]
 800fa06:	60b9      	str	r1, [r7, #8]
 800fa08:	4613      	mov	r3, r2
 800fa0a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800fa10:	68bb      	ldr	r3, [r7, #8]
 800fa12:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800fa14:	88fb      	ldrh	r3, [r7, #6]
 800fa16:	089b      	lsrs	r3, r3, #2
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800fa1c:	88fb      	ldrh	r3, [r7, #6]
 800fa1e:	f003 0303 	and.w	r3, r3, #3
 800fa22:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800fa24:	2300      	movs	r3, #0
 800fa26:	623b      	str	r3, [r7, #32]
 800fa28:	e014      	b.n	800fa54 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa34:	601a      	str	r2, [r3, #0]
    pDest++;
 800fa36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa38:	3301      	adds	r3, #1
 800fa3a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa3e:	3301      	adds	r3, #1
 800fa40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa44:	3301      	adds	r3, #1
 800fa46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800fa48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800fa4e:	6a3b      	ldr	r3, [r7, #32]
 800fa50:	3301      	adds	r3, #1
 800fa52:	623b      	str	r3, [r7, #32]
 800fa54:	6a3a      	ldr	r2, [r7, #32]
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d3e6      	bcc.n	800fa2a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800fa5c:	8bfb      	ldrh	r3, [r7, #30]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d01e      	beq.n	800faa0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800fa62:	2300      	movs	r3, #0
 800fa64:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800fa66:	69bb      	ldr	r3, [r7, #24]
 800fa68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fa6c:	461a      	mov	r2, r3
 800fa6e:	f107 0310 	add.w	r3, r7, #16
 800fa72:	6812      	ldr	r2, [r2, #0]
 800fa74:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800fa76:	693a      	ldr	r2, [r7, #16]
 800fa78:	6a3b      	ldr	r3, [r7, #32]
 800fa7a:	b2db      	uxtb	r3, r3
 800fa7c:	00db      	lsls	r3, r3, #3
 800fa7e:	fa22 f303 	lsr.w	r3, r2, r3
 800fa82:	b2da      	uxtb	r2, r3
 800fa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa86:	701a      	strb	r2, [r3, #0]
      i++;
 800fa88:	6a3b      	ldr	r3, [r7, #32]
 800fa8a:	3301      	adds	r3, #1
 800fa8c:	623b      	str	r3, [r7, #32]
      pDest++;
 800fa8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa90:	3301      	adds	r3, #1
 800fa92:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800fa94:	8bfb      	ldrh	r3, [r7, #30]
 800fa96:	3b01      	subs	r3, #1
 800fa98:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800fa9a:	8bfb      	ldrh	r3, [r7, #30]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d1ea      	bne.n	800fa76 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800faa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	372c      	adds	r7, #44	; 0x2c
 800faa6:	46bd      	mov	sp, r7
 800faa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faac:	4770      	bx	lr

0800faae <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800faae:	b480      	push	{r7}
 800fab0:	b085      	sub	sp, #20
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
 800fab6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	785b      	ldrb	r3, [r3, #1]
 800fac6:	2b01      	cmp	r3, #1
 800fac8:	d12c      	bne.n	800fb24 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800faca:	68bb      	ldr	r3, [r7, #8]
 800facc:	015a      	lsls	r2, r3, #5
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	4413      	add	r3, r2
 800fad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	db12      	blt.n	800fb02 <USB_EPSetStall+0x54>
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d00f      	beq.n	800fb02 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800fae2:	68bb      	ldr	r3, [r7, #8]
 800fae4:	015a      	lsls	r2, r3, #5
 800fae6:	68fb      	ldr	r3, [r7, #12]
 800fae8:	4413      	add	r3, r2
 800faea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	68ba      	ldr	r2, [r7, #8]
 800faf2:	0151      	lsls	r1, r2, #5
 800faf4:	68fa      	ldr	r2, [r7, #12]
 800faf6:	440a      	add	r2, r1
 800faf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fafc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fb00:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	015a      	lsls	r2, r3, #5
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	4413      	add	r3, r2
 800fb0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	68ba      	ldr	r2, [r7, #8]
 800fb12:	0151      	lsls	r1, r2, #5
 800fb14:	68fa      	ldr	r2, [r7, #12]
 800fb16:	440a      	add	r2, r1
 800fb18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fb1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fb20:	6013      	str	r3, [r2, #0]
 800fb22:	e02b      	b.n	800fb7c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	015a      	lsls	r2, r3, #5
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	4413      	add	r3, r2
 800fb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	db12      	blt.n	800fb5c <USB_EPSetStall+0xae>
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d00f      	beq.n	800fb5c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800fb3c:	68bb      	ldr	r3, [r7, #8]
 800fb3e:	015a      	lsls	r2, r3, #5
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	4413      	add	r3, r2
 800fb44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	68ba      	ldr	r2, [r7, #8]
 800fb4c:	0151      	lsls	r1, r2, #5
 800fb4e:	68fa      	ldr	r2, [r7, #12]
 800fb50:	440a      	add	r2, r1
 800fb52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800fb5a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800fb5c:	68bb      	ldr	r3, [r7, #8]
 800fb5e:	015a      	lsls	r2, r3, #5
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	4413      	add	r3, r2
 800fb64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb68:	681b      	ldr	r3, [r3, #0]
 800fb6a:	68ba      	ldr	r2, [r7, #8]
 800fb6c:	0151      	lsls	r1, r2, #5
 800fb6e:	68fa      	ldr	r2, [r7, #12]
 800fb70:	440a      	add	r2, r1
 800fb72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fb76:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800fb7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fb7c:	2300      	movs	r3, #0
}
 800fb7e:	4618      	mov	r0, r3
 800fb80:	3714      	adds	r7, #20
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b085      	sub	sp, #20
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]
 800fb92:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	781b      	ldrb	r3, [r3, #0]
 800fb9c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	785b      	ldrb	r3, [r3, #1]
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d128      	bne.n	800fbf8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800fba6:	68bb      	ldr	r3, [r7, #8]
 800fba8:	015a      	lsls	r2, r3, #5
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	4413      	add	r3, r2
 800fbae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	68ba      	ldr	r2, [r7, #8]
 800fbb6:	0151      	lsls	r1, r2, #5
 800fbb8:	68fa      	ldr	r2, [r7, #12]
 800fbba:	440a      	add	r2, r1
 800fbbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fbc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	78db      	ldrb	r3, [r3, #3]
 800fbca:	2b03      	cmp	r3, #3
 800fbcc:	d003      	beq.n	800fbd6 <USB_EPClearStall+0x4c>
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	78db      	ldrb	r3, [r3, #3]
 800fbd2:	2b02      	cmp	r3, #2
 800fbd4:	d138      	bne.n	800fc48 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	015a      	lsls	r2, r3, #5
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	4413      	add	r3, r2
 800fbde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68ba      	ldr	r2, [r7, #8]
 800fbe6:	0151      	lsls	r1, r2, #5
 800fbe8:	68fa      	ldr	r2, [r7, #12]
 800fbea:	440a      	add	r2, r1
 800fbec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fbf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fbf4:	6013      	str	r3, [r2, #0]
 800fbf6:	e027      	b.n	800fc48 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	015a      	lsls	r2, r3, #5
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	4413      	add	r3, r2
 800fc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	68ba      	ldr	r2, [r7, #8]
 800fc08:	0151      	lsls	r1, r2, #5
 800fc0a:	68fa      	ldr	r2, [r7, #12]
 800fc0c:	440a      	add	r2, r1
 800fc0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fc16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	78db      	ldrb	r3, [r3, #3]
 800fc1c:	2b03      	cmp	r3, #3
 800fc1e:	d003      	beq.n	800fc28 <USB_EPClearStall+0x9e>
 800fc20:	683b      	ldr	r3, [r7, #0]
 800fc22:	78db      	ldrb	r3, [r3, #3]
 800fc24:	2b02      	cmp	r3, #2
 800fc26:	d10f      	bne.n	800fc48 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	015a      	lsls	r2, r3, #5
 800fc2c:	68fb      	ldr	r3, [r7, #12]
 800fc2e:	4413      	add	r3, r2
 800fc30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	68ba      	ldr	r2, [r7, #8]
 800fc38:	0151      	lsls	r1, r2, #5
 800fc3a:	68fa      	ldr	r2, [r7, #12]
 800fc3c:	440a      	add	r2, r1
 800fc3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fc46:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800fc48:	2300      	movs	r3, #0
}
 800fc4a:	4618      	mov	r0, r3
 800fc4c:	3714      	adds	r7, #20
 800fc4e:	46bd      	mov	sp, r7
 800fc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc54:	4770      	bx	lr

0800fc56 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800fc56:	b480      	push	{r7}
 800fc58:	b085      	sub	sp, #20
 800fc5a:	af00      	add	r7, sp, #0
 800fc5c:	6078      	str	r0, [r7, #4]
 800fc5e:	460b      	mov	r3, r1
 800fc60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	68fa      	ldr	r2, [r7, #12]
 800fc70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc74:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800fc78:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	78fb      	ldrb	r3, [r7, #3]
 800fc84:	011b      	lsls	r3, r3, #4
 800fc86:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800fc8a:	68f9      	ldr	r1, [r7, #12]
 800fc8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fc90:	4313      	orrs	r3, r2
 800fc92:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800fc94:	2300      	movs	r3, #0
}
 800fc96:	4618      	mov	r0, r3
 800fc98:	3714      	adds	r7, #20
 800fc9a:	46bd      	mov	sp, r7
 800fc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca0:	4770      	bx	lr

0800fca2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fca2:	b480      	push	{r7}
 800fca4:	b085      	sub	sp, #20
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fcb4:	681b      	ldr	r3, [r3, #0]
 800fcb6:	68fa      	ldr	r2, [r7, #12]
 800fcb8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fcbc:	f023 0303 	bic.w	r3, r3, #3
 800fcc0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcc8:	685b      	ldr	r3, [r3, #4]
 800fcca:	68fa      	ldr	r2, [r7, #12]
 800fccc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcd0:	f023 0302 	bic.w	r3, r3, #2
 800fcd4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fcd6:	2300      	movs	r3, #0
}
 800fcd8:	4618      	mov	r0, r3
 800fcda:	3714      	adds	r7, #20
 800fcdc:	46bd      	mov	sp, r7
 800fcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce2:	4770      	bx	lr

0800fce4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800fce4:	b480      	push	{r7}
 800fce6:	b085      	sub	sp, #20
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	68fa      	ldr	r2, [r7, #12]
 800fcfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fcfe:	f023 0303 	bic.w	r3, r3, #3
 800fd02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd0a:	685b      	ldr	r3, [r3, #4]
 800fd0c:	68fa      	ldr	r2, [r7, #12]
 800fd0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fd12:	f043 0302 	orr.w	r3, r3, #2
 800fd16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3714      	adds	r7, #20
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd24:	4770      	bx	lr

0800fd26 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800fd26:	b480      	push	{r7}
 800fd28:	b085      	sub	sp, #20
 800fd2a:	af00      	add	r7, sp, #0
 800fd2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	695b      	ldr	r3, [r3, #20]
 800fd32:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	699b      	ldr	r3, [r3, #24]
 800fd38:	68fa      	ldr	r2, [r7, #12]
 800fd3a:	4013      	ands	r3, r2
 800fd3c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800fd3e:	68fb      	ldr	r3, [r7, #12]
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3714      	adds	r7, #20
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr

0800fd4c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd4c:	b480      	push	{r7}
 800fd4e:	b085      	sub	sp, #20
 800fd50:	af00      	add	r7, sp, #0
 800fd52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd5e:	699b      	ldr	r3, [r3, #24]
 800fd60:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd68:	69db      	ldr	r3, [r3, #28]
 800fd6a:	68ba      	ldr	r2, [r7, #8]
 800fd6c:	4013      	ands	r3, r2
 800fd6e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800fd70:	68bb      	ldr	r3, [r7, #8]
 800fd72:	0c1b      	lsrs	r3, r3, #16
}
 800fd74:	4618      	mov	r0, r3
 800fd76:	3714      	adds	r7, #20
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd7e:	4770      	bx	lr

0800fd80 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800fd80:	b480      	push	{r7}
 800fd82:	b085      	sub	sp, #20
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd92:	699b      	ldr	r3, [r3, #24]
 800fd94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800fd96:	68fb      	ldr	r3, [r7, #12]
 800fd98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd9c:	69db      	ldr	r3, [r3, #28]
 800fd9e:	68ba      	ldr	r2, [r7, #8]
 800fda0:	4013      	ands	r3, r2
 800fda2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800fda4:	68bb      	ldr	r3, [r7, #8]
 800fda6:	b29b      	uxth	r3, r3
}
 800fda8:	4618      	mov	r0, r3
 800fdaa:	3714      	adds	r7, #20
 800fdac:	46bd      	mov	sp, r7
 800fdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb2:	4770      	bx	lr

0800fdb4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
 800fdbc:	460b      	mov	r3, r1
 800fdbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800fdc4:	78fb      	ldrb	r3, [r7, #3]
 800fdc6:	015a      	lsls	r2, r3, #5
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	4413      	add	r3, r2
 800fdcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdd0:	689b      	ldr	r3, [r3, #8]
 800fdd2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdda:	695b      	ldr	r3, [r3, #20]
 800fddc:	68ba      	ldr	r2, [r7, #8]
 800fdde:	4013      	ands	r3, r2
 800fde0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fde2:	68bb      	ldr	r3, [r7, #8]
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3714      	adds	r7, #20
 800fde8:	46bd      	mov	sp, r7
 800fdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdee:	4770      	bx	lr

0800fdf0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800fdf0:	b480      	push	{r7}
 800fdf2:	b087      	sub	sp, #28
 800fdf4:	af00      	add	r7, sp, #0
 800fdf6:	6078      	str	r0, [r7, #4]
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe06:	691b      	ldr	r3, [r3, #16]
 800fe08:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fe12:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800fe14:	78fb      	ldrb	r3, [r7, #3]
 800fe16:	f003 030f 	and.w	r3, r3, #15
 800fe1a:	68fa      	ldr	r2, [r7, #12]
 800fe1c:	fa22 f303 	lsr.w	r3, r2, r3
 800fe20:	01db      	lsls	r3, r3, #7
 800fe22:	b2db      	uxtb	r3, r3
 800fe24:	693a      	ldr	r2, [r7, #16]
 800fe26:	4313      	orrs	r3, r2
 800fe28:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800fe2a:	78fb      	ldrb	r3, [r7, #3]
 800fe2c:	015a      	lsls	r2, r3, #5
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	4413      	add	r3, r2
 800fe32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe36:	689b      	ldr	r3, [r3, #8]
 800fe38:	693a      	ldr	r2, [r7, #16]
 800fe3a:	4013      	ands	r3, r2
 800fe3c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800fe3e:	68bb      	ldr	r3, [r7, #8]
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	371c      	adds	r7, #28
 800fe44:	46bd      	mov	sp, r7
 800fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe4a:	4770      	bx	lr

0800fe4c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800fe4c:	b480      	push	{r7}
 800fe4e:	b083      	sub	sp, #12
 800fe50:	af00      	add	r7, sp, #0
 800fe52:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	695b      	ldr	r3, [r3, #20]
 800fe58:	f003 0301 	and.w	r3, r3, #1
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr

0800fe68 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800fe68:	b480      	push	{r7}
 800fe6a:	b085      	sub	sp, #20
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe7a:	681b      	ldr	r3, [r3, #0]
 800fe7c:	68fa      	ldr	r2, [r7, #12]
 800fe7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fe82:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800fe86:	f023 0307 	bic.w	r3, r3, #7
 800fe8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe92:	685b      	ldr	r3, [r3, #4]
 800fe94:	68fa      	ldr	r2, [r7, #12]
 800fe96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fe9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800fea0:	2300      	movs	r3, #0
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3714      	adds	r7, #20
 800fea6:	46bd      	mov	sp, r7
 800fea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feac:	4770      	bx	lr
	...

0800feb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800feb0:	b480      	push	{r7}
 800feb2:	b087      	sub	sp, #28
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	460b      	mov	r3, r1
 800feba:	607a      	str	r2, [r7, #4]
 800febc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	333c      	adds	r3, #60	; 0x3c
 800fec6:	3304      	adds	r3, #4
 800fec8:	681b      	ldr	r3, [r3, #0]
 800feca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	4a26      	ldr	r2, [pc, #152]	; (800ff68 <USB_EP0_OutStart+0xb8>)
 800fed0:	4293      	cmp	r3, r2
 800fed2:	d90a      	bls.n	800feea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fed4:	697b      	ldr	r3, [r7, #20]
 800fed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fee0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fee4:	d101      	bne.n	800feea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800fee6:	2300      	movs	r3, #0
 800fee8:	e037      	b.n	800ff5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800feea:	697b      	ldr	r3, [r7, #20]
 800feec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fef0:	461a      	mov	r2, r3
 800fef2:	2300      	movs	r3, #0
 800fef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fefc:	691b      	ldr	r3, [r3, #16]
 800fefe:	697a      	ldr	r2, [r7, #20]
 800ff00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ff08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff10:	691b      	ldr	r3, [r3, #16]
 800ff12:	697a      	ldr	r2, [r7, #20]
 800ff14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff18:	f043 0318 	orr.w	r3, r3, #24
 800ff1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ff1e:	697b      	ldr	r3, [r7, #20]
 800ff20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff24:	691b      	ldr	r3, [r3, #16]
 800ff26:	697a      	ldr	r2, [r7, #20]
 800ff28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ff30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ff32:	7afb      	ldrb	r3, [r7, #11]
 800ff34:	2b01      	cmp	r3, #1
 800ff36:	d10f      	bne.n	800ff58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ff38:	697b      	ldr	r3, [r7, #20]
 800ff3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff3e:	461a      	mov	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ff44:	697b      	ldr	r3, [r7, #20]
 800ff46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	697a      	ldr	r2, [r7, #20]
 800ff4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ff52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ff56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ff58:	2300      	movs	r3, #0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	371c      	adds	r7, #28
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop
 800ff68:	4f54300a 	.word	0x4f54300a

0800ff6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b085      	sub	sp, #20
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ff74:	2300      	movs	r3, #0
 800ff76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	3301      	adds	r3, #1
 800ff7c:	60fb      	str	r3, [r7, #12]
 800ff7e:	4a13      	ldr	r2, [pc, #76]	; (800ffcc <USB_CoreReset+0x60>)
 800ff80:	4293      	cmp	r3, r2
 800ff82:	d901      	bls.n	800ff88 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800ff84:	2303      	movs	r3, #3
 800ff86:	e01a      	b.n	800ffbe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	691b      	ldr	r3, [r3, #16]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	daf3      	bge.n	800ff78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ff90:	2300      	movs	r3, #0
 800ff92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	691b      	ldr	r3, [r3, #16]
 800ff98:	f043 0201 	orr.w	r2, r3, #1
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	3301      	adds	r3, #1
 800ffa4:	60fb      	str	r3, [r7, #12]
 800ffa6:	4a09      	ldr	r2, [pc, #36]	; (800ffcc <USB_CoreReset+0x60>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d901      	bls.n	800ffb0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800ffac:	2303      	movs	r3, #3
 800ffae:	e006      	b.n	800ffbe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	691b      	ldr	r3, [r3, #16]
 800ffb4:	f003 0301 	and.w	r3, r3, #1
 800ffb8:	2b01      	cmp	r3, #1
 800ffba:	d0f1      	beq.n	800ffa0 <USB_CoreReset+0x34>

  return HAL_OK;
 800ffbc:	2300      	movs	r3, #0
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3714      	adds	r7, #20
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc8:	4770      	bx	lr
 800ffca:	bf00      	nop
 800ffcc:	00030d40 	.word	0x00030d40

0800ffd0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ffd4:	4904      	ldr	r1, [pc, #16]	; (800ffe8 <MX_FATFS_Init+0x18>)
 800ffd6:	4805      	ldr	r0, [pc, #20]	; (800ffec <MX_FATFS_Init+0x1c>)
 800ffd8:	f006 f800 	bl	8015fdc <FATFS_LinkDriver>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	461a      	mov	r2, r3
 800ffe0:	4b03      	ldr	r3, [pc, #12]	; (800fff0 <MX_FATFS_Init+0x20>)
 800ffe2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ffe4:	bf00      	nop
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	20002e98 	.word	0x20002e98
 800ffec:	080175cc 	.word	0x080175cc
 800fff0:	20002e94 	.word	0x20002e94

0800fff4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800fff4:	b480      	push	{r7}
 800fff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800fff8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr

08010004 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b082      	sub	sp, #8
 8010008:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801000a:	2300      	movs	r3, #0
 801000c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801000e:	f000 f896 	bl	801013e <BSP_SD_IsDetected>
 8010012:	4603      	mov	r3, r0
 8010014:	2b01      	cmp	r3, #1
 8010016:	d001      	beq.n	801001c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010018:	2301      	movs	r3, #1
 801001a:	e012      	b.n	8010042 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 801001c:	480b      	ldr	r0, [pc, #44]	; (801004c <BSP_SD_Init+0x48>)
 801001e:	f7fc f8b7 	bl	800c190 <HAL_SD_Init>
 8010022:	4603      	mov	r3, r0
 8010024:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010026:	79fb      	ldrb	r3, [r7, #7]
 8010028:	2b00      	cmp	r3, #0
 801002a:	d109      	bne.n	8010040 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 801002c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010030:	4806      	ldr	r0, [pc, #24]	; (801004c <BSP_SD_Init+0x48>)
 8010032:	f7fc fe6d 	bl	800cd10 <HAL_SD_ConfigWideBusOperation>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d001      	beq.n	8010040 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801003c:	2301      	movs	r3, #1
 801003e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010040:	79fb      	ldrb	r3, [r7, #7]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3708      	adds	r7, #8
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}
 801004a:	bf00      	nop
 801004c:	20001bd4 	.word	0x20001bd4

08010050 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010050:	b580      	push	{r7, lr}
 8010052:	b086      	sub	sp, #24
 8010054:	af00      	add	r7, sp, #0
 8010056:	60f8      	str	r0, [r7, #12]
 8010058:	60b9      	str	r1, [r7, #8]
 801005a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801005c:	2300      	movs	r3, #0
 801005e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	68ba      	ldr	r2, [r7, #8]
 8010064:	68f9      	ldr	r1, [r7, #12]
 8010066:	4806      	ldr	r0, [pc, #24]	; (8010080 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010068:	f7fc f940 	bl	800c2ec <HAL_SD_ReadBlocks_DMA>
 801006c:	4603      	mov	r3, r0
 801006e:	2b00      	cmp	r3, #0
 8010070:	d001      	beq.n	8010076 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010072:	2301      	movs	r3, #1
 8010074:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010076:	7dfb      	ldrb	r3, [r7, #23]
}
 8010078:	4618      	mov	r0, r3
 801007a:	3718      	adds	r7, #24
 801007c:	46bd      	mov	sp, r7
 801007e:	bd80      	pop	{r7, pc}
 8010080:	20001bd4 	.word	0x20001bd4

08010084 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b086      	sub	sp, #24
 8010088:	af00      	add	r7, sp, #0
 801008a:	60f8      	str	r0, [r7, #12]
 801008c:	60b9      	str	r1, [r7, #8]
 801008e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010090:	2300      	movs	r3, #0
 8010092:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	68ba      	ldr	r2, [r7, #8]
 8010098:	68f9      	ldr	r1, [r7, #12]
 801009a:	4806      	ldr	r0, [pc, #24]	; (80100b4 <BSP_SD_WriteBlocks_DMA+0x30>)
 801009c:	f7fc fa06 	bl	800c4ac <HAL_SD_WriteBlocks_DMA>
 80100a0:	4603      	mov	r3, r0
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d001      	beq.n	80100aa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80100a6:	2301      	movs	r3, #1
 80100a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80100aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80100ac:	4618      	mov	r0, r3
 80100ae:	3718      	adds	r7, #24
 80100b0:	46bd      	mov	sp, r7
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	20001bd4 	.word	0x20001bd4

080100b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80100bc:	4805      	ldr	r0, [pc, #20]	; (80100d4 <BSP_SD_GetCardState+0x1c>)
 80100be:	f7fc fec1 	bl	800ce44 <HAL_SD_GetCardState>
 80100c2:	4603      	mov	r3, r0
 80100c4:	2b04      	cmp	r3, #4
 80100c6:	bf14      	ite	ne
 80100c8:	2301      	movne	r3, #1
 80100ca:	2300      	moveq	r3, #0
 80100cc:	b2db      	uxtb	r3, r3
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	20001bd4 	.word	0x20001bd4

080100d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80100e0:	6879      	ldr	r1, [r7, #4]
 80100e2:	4803      	ldr	r0, [pc, #12]	; (80100f0 <BSP_SD_GetCardInfo+0x18>)
 80100e4:	f7fc fde8 	bl	800ccb8 <HAL_SD_GetCardInfo>
}
 80100e8:	bf00      	nop
 80100ea:	3708      	adds	r7, #8
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	20001bd4 	.word	0x20001bd4

080100f4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80100fc:	f000 f818 	bl	8010130 <BSP_SD_AbortCallback>
}
 8010100:	bf00      	nop
 8010102:	3708      	adds	r7, #8
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010108:	b580      	push	{r7, lr}
 801010a:	b082      	sub	sp, #8
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010110:	f000 f9a8 	bl	8010464 <BSP_SD_WriteCpltCallback>
}
 8010114:	bf00      	nop
 8010116:	3708      	adds	r7, #8
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b082      	sub	sp, #8
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010124:	f000 f9aa 	bl	801047c <BSP_SD_ReadCpltCallback>
}
 8010128:	bf00      	nop
 801012a:	3708      	adds	r7, #8
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}

08010130 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010130:	b480      	push	{r7}
 8010132:	af00      	add	r7, sp, #0

}
 8010134:	bf00      	nop
 8010136:	46bd      	mov	sp, r7
 8010138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013c:	4770      	bx	lr

0801013e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 801013e:	b580      	push	{r7, lr}
 8010140:	b082      	sub	sp, #8
 8010142:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010144:	2301      	movs	r3, #1
 8010146:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010148:	f000 f80c 	bl	8010164 <BSP_PlatformIsDetected>
 801014c:	4603      	mov	r3, r0
 801014e:	2b00      	cmp	r3, #0
 8010150:	d101      	bne.n	8010156 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010152:	2300      	movs	r3, #0
 8010154:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010156:	79fb      	ldrb	r3, [r7, #7]
 8010158:	b2db      	uxtb	r3, r3
}
 801015a:	4618      	mov	r0, r3
 801015c:	3708      	adds	r7, #8
 801015e:	46bd      	mov	sp, r7
 8010160:	bd80      	pop	{r7, pc}
	...

08010164 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010164:	b580      	push	{r7, lr}
 8010166:	b082      	sub	sp, #8
 8010168:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801016a:	2301      	movs	r3, #1
 801016c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801016e:	2180      	movs	r1, #128	; 0x80
 8010170:	4806      	ldr	r0, [pc, #24]	; (801018c <BSP_PlatformIsDetected+0x28>)
 8010172:	f7f8 fb2d 	bl	80087d0 <HAL_GPIO_ReadPin>
 8010176:	4603      	mov	r3, r0
 8010178:	2b00      	cmp	r3, #0
 801017a:	d001      	beq.n	8010180 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 801017c:	2300      	movs	r3, #0
 801017e:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010180:	79fb      	ldrb	r3, [r7, #7]
}
 8010182:	4618      	mov	r0, r3
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	40020800 	.word	0x40020800

08010190 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010190:	b580      	push	{r7, lr}
 8010192:	b084      	sub	sp, #16
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010198:	f7f6 f9ec 	bl	8006574 <HAL_GetTick>
 801019c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801019e:	e006      	b.n	80101ae <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80101a0:	f7ff ff8a 	bl	80100b8 <BSP_SD_GetCardState>
 80101a4:	4603      	mov	r3, r0
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d101      	bne.n	80101ae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80101aa:	2300      	movs	r3, #0
 80101ac:	e009      	b.n	80101c2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80101ae:	f7f6 f9e1 	bl	8006574 <HAL_GetTick>
 80101b2:	4602      	mov	r2, r0
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	1ad3      	subs	r3, r2, r3
 80101b8:	687a      	ldr	r2, [r7, #4]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d8f0      	bhi.n	80101a0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80101be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3710      	adds	r7, #16
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
	...

080101cc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	4603      	mov	r3, r0
 80101d4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80101d6:	4b0b      	ldr	r3, [pc, #44]	; (8010204 <SD_CheckStatus+0x38>)
 80101d8:	2201      	movs	r2, #1
 80101da:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80101dc:	f7ff ff6c 	bl	80100b8 <BSP_SD_GetCardState>
 80101e0:	4603      	mov	r3, r0
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d107      	bne.n	80101f6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80101e6:	4b07      	ldr	r3, [pc, #28]	; (8010204 <SD_CheckStatus+0x38>)
 80101e8:	781b      	ldrb	r3, [r3, #0]
 80101ea:	b2db      	uxtb	r3, r3
 80101ec:	f023 0301 	bic.w	r3, r3, #1
 80101f0:	b2da      	uxtb	r2, r3
 80101f2:	4b04      	ldr	r3, [pc, #16]	; (8010204 <SD_CheckStatus+0x38>)
 80101f4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80101f6:	4b03      	ldr	r3, [pc, #12]	; (8010204 <SD_CheckStatus+0x38>)
 80101f8:	781b      	ldrb	r3, [r3, #0]
 80101fa:	b2db      	uxtb	r3, r3
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3708      	adds	r7, #8
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	20000009 	.word	0x20000009

08010208 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	4603      	mov	r3, r0
 8010210:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010212:	f7ff fef7 	bl	8010004 <BSP_SD_Init>
 8010216:	4603      	mov	r3, r0
 8010218:	2b00      	cmp	r3, #0
 801021a:	d107      	bne.n	801022c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 801021c:	79fb      	ldrb	r3, [r7, #7]
 801021e:	4618      	mov	r0, r3
 8010220:	f7ff ffd4 	bl	80101cc <SD_CheckStatus>
 8010224:	4603      	mov	r3, r0
 8010226:	461a      	mov	r2, r3
 8010228:	4b04      	ldr	r3, [pc, #16]	; (801023c <SD_initialize+0x34>)
 801022a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801022c:	4b03      	ldr	r3, [pc, #12]	; (801023c <SD_initialize+0x34>)
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	b2db      	uxtb	r3, r3
}
 8010232:	4618      	mov	r0, r3
 8010234:	3708      	adds	r7, #8
 8010236:	46bd      	mov	sp, r7
 8010238:	bd80      	pop	{r7, pc}
 801023a:	bf00      	nop
 801023c:	20000009 	.word	0x20000009

08010240 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	4603      	mov	r3, r0
 8010248:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801024a:	79fb      	ldrb	r3, [r7, #7]
 801024c:	4618      	mov	r0, r3
 801024e:	f7ff ffbd 	bl	80101cc <SD_CheckStatus>
 8010252:	4603      	mov	r3, r0
}
 8010254:	4618      	mov	r0, r3
 8010256:	3708      	adds	r7, #8
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}

0801025c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 801025c:	b580      	push	{r7, lr}
 801025e:	b086      	sub	sp, #24
 8010260:	af00      	add	r7, sp, #0
 8010262:	60b9      	str	r1, [r7, #8]
 8010264:	607a      	str	r2, [r7, #4]
 8010266:	603b      	str	r3, [r7, #0]
 8010268:	4603      	mov	r3, r0
 801026a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801026c:	2301      	movs	r3, #1
 801026e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010270:	f247 5030 	movw	r0, #30000	; 0x7530
 8010274:	f7ff ff8c 	bl	8010190 <SD_CheckStatusWithTimeout>
 8010278:	4603      	mov	r3, r0
 801027a:	2b00      	cmp	r3, #0
 801027c:	da01      	bge.n	8010282 <SD_read+0x26>
  {
    return res;
 801027e:	7dfb      	ldrb	r3, [r7, #23]
 8010280:	e03b      	b.n	80102fa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010282:	683a      	ldr	r2, [r7, #0]
 8010284:	6879      	ldr	r1, [r7, #4]
 8010286:	68b8      	ldr	r0, [r7, #8]
 8010288:	f7ff fee2 	bl	8010050 <BSP_SD_ReadBlocks_DMA>
 801028c:	4603      	mov	r3, r0
 801028e:	2b00      	cmp	r3, #0
 8010290:	d132      	bne.n	80102f8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010292:	4b1c      	ldr	r3, [pc, #112]	; (8010304 <SD_read+0xa8>)
 8010294:	2200      	movs	r2, #0
 8010296:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010298:	f7f6 f96c 	bl	8006574 <HAL_GetTick>
 801029c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801029e:	bf00      	nop
 80102a0:	4b18      	ldr	r3, [pc, #96]	; (8010304 <SD_read+0xa8>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d108      	bne.n	80102ba <SD_read+0x5e>
 80102a8:	f7f6 f964 	bl	8006574 <HAL_GetTick>
 80102ac:	4602      	mov	r2, r0
 80102ae:	693b      	ldr	r3, [r7, #16]
 80102b0:	1ad3      	subs	r3, r2, r3
 80102b2:	f247 522f 	movw	r2, #29999	; 0x752f
 80102b6:	4293      	cmp	r3, r2
 80102b8:	d9f2      	bls.n	80102a0 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80102ba:	4b12      	ldr	r3, [pc, #72]	; (8010304 <SD_read+0xa8>)
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d102      	bne.n	80102c8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80102c2:	2301      	movs	r3, #1
 80102c4:	75fb      	strb	r3, [r7, #23]
 80102c6:	e017      	b.n	80102f8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80102c8:	4b0e      	ldr	r3, [pc, #56]	; (8010304 <SD_read+0xa8>)
 80102ca:	2200      	movs	r2, #0
 80102cc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80102ce:	f7f6 f951 	bl	8006574 <HAL_GetTick>
 80102d2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102d4:	e007      	b.n	80102e6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80102d6:	f7ff feef 	bl	80100b8 <BSP_SD_GetCardState>
 80102da:	4603      	mov	r3, r0
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d102      	bne.n	80102e6 <SD_read+0x8a>
          {
            res = RES_OK;
 80102e0:	2300      	movs	r3, #0
 80102e2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80102e4:	e008      	b.n	80102f8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80102e6:	f7f6 f945 	bl	8006574 <HAL_GetTick>
 80102ea:	4602      	mov	r2, r0
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	1ad3      	subs	r3, r2, r3
 80102f0:	f247 522f 	movw	r2, #29999	; 0x752f
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d9ee      	bls.n	80102d6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80102f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80102fa:	4618      	mov	r0, r3
 80102fc:	3718      	adds	r7, #24
 80102fe:	46bd      	mov	sp, r7
 8010300:	bd80      	pop	{r7, pc}
 8010302:	bf00      	nop
 8010304:	200001fc 	.word	0x200001fc

08010308 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	b086      	sub	sp, #24
 801030c:	af00      	add	r7, sp, #0
 801030e:	60b9      	str	r1, [r7, #8]
 8010310:	607a      	str	r2, [r7, #4]
 8010312:	603b      	str	r3, [r7, #0]
 8010314:	4603      	mov	r3, r0
 8010316:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010318:	2301      	movs	r3, #1
 801031a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 801031c:	4b24      	ldr	r3, [pc, #144]	; (80103b0 <SD_write+0xa8>)
 801031e:	2200      	movs	r2, #0
 8010320:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010322:	f247 5030 	movw	r0, #30000	; 0x7530
 8010326:	f7ff ff33 	bl	8010190 <SD_CheckStatusWithTimeout>
 801032a:	4603      	mov	r3, r0
 801032c:	2b00      	cmp	r3, #0
 801032e:	da01      	bge.n	8010334 <SD_write+0x2c>
  {
    return res;
 8010330:	7dfb      	ldrb	r3, [r7, #23]
 8010332:	e038      	b.n	80103a6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010334:	683a      	ldr	r2, [r7, #0]
 8010336:	6879      	ldr	r1, [r7, #4]
 8010338:	68b8      	ldr	r0, [r7, #8]
 801033a:	f7ff fea3 	bl	8010084 <BSP_SD_WriteBlocks_DMA>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d12f      	bne.n	80103a4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010344:	f7f6 f916 	bl	8006574 <HAL_GetTick>
 8010348:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801034a:	bf00      	nop
 801034c:	4b18      	ldr	r3, [pc, #96]	; (80103b0 <SD_write+0xa8>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d108      	bne.n	8010366 <SD_write+0x5e>
 8010354:	f7f6 f90e 	bl	8006574 <HAL_GetTick>
 8010358:	4602      	mov	r2, r0
 801035a:	693b      	ldr	r3, [r7, #16]
 801035c:	1ad3      	subs	r3, r2, r3
 801035e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010362:	4293      	cmp	r3, r2
 8010364:	d9f2      	bls.n	801034c <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8010366:	4b12      	ldr	r3, [pc, #72]	; (80103b0 <SD_write+0xa8>)
 8010368:	681b      	ldr	r3, [r3, #0]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d102      	bne.n	8010374 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801036e:	2301      	movs	r3, #1
 8010370:	75fb      	strb	r3, [r7, #23]
 8010372:	e017      	b.n	80103a4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010374:	4b0e      	ldr	r3, [pc, #56]	; (80103b0 <SD_write+0xa8>)
 8010376:	2200      	movs	r2, #0
 8010378:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801037a:	f7f6 f8fb 	bl	8006574 <HAL_GetTick>
 801037e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010380:	e007      	b.n	8010392 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010382:	f7ff fe99 	bl	80100b8 <BSP_SD_GetCardState>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d102      	bne.n	8010392 <SD_write+0x8a>
          {
            res = RES_OK;
 801038c:	2300      	movs	r3, #0
 801038e:	75fb      	strb	r3, [r7, #23]
            break;
 8010390:	e008      	b.n	80103a4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010392:	f7f6 f8ef 	bl	8006574 <HAL_GetTick>
 8010396:	4602      	mov	r2, r0
 8010398:	693b      	ldr	r3, [r7, #16]
 801039a:	1ad3      	subs	r3, r2, r3
 801039c:	f247 522f 	movw	r2, #29999	; 0x752f
 80103a0:	4293      	cmp	r3, r2
 80103a2:	d9ee      	bls.n	8010382 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80103a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80103a6:	4618      	mov	r0, r3
 80103a8:	3718      	adds	r7, #24
 80103aa:	46bd      	mov	sp, r7
 80103ac:	bd80      	pop	{r7, pc}
 80103ae:	bf00      	nop
 80103b0:	200001f8 	.word	0x200001f8

080103b4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80103b4:	b580      	push	{r7, lr}
 80103b6:	b08c      	sub	sp, #48	; 0x30
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	4603      	mov	r3, r0
 80103bc:	603a      	str	r2, [r7, #0]
 80103be:	71fb      	strb	r3, [r7, #7]
 80103c0:	460b      	mov	r3, r1
 80103c2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80103c4:	2301      	movs	r3, #1
 80103c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80103ca:	4b25      	ldr	r3, [pc, #148]	; (8010460 <SD_ioctl+0xac>)
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	b2db      	uxtb	r3, r3
 80103d0:	f003 0301 	and.w	r3, r3, #1
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d001      	beq.n	80103dc <SD_ioctl+0x28>
 80103d8:	2303      	movs	r3, #3
 80103da:	e03c      	b.n	8010456 <SD_ioctl+0xa2>

  switch (cmd)
 80103dc:	79bb      	ldrb	r3, [r7, #6]
 80103de:	2b03      	cmp	r3, #3
 80103e0:	d834      	bhi.n	801044c <SD_ioctl+0x98>
 80103e2:	a201      	add	r2, pc, #4	; (adr r2, 80103e8 <SD_ioctl+0x34>)
 80103e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103e8:	080103f9 	.word	0x080103f9
 80103ec:	08010401 	.word	0x08010401
 80103f0:	08010419 	.word	0x08010419
 80103f4:	08010433 	.word	0x08010433
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80103f8:	2300      	movs	r3, #0
 80103fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80103fe:	e028      	b.n	8010452 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010400:	f107 030c 	add.w	r3, r7, #12
 8010404:	4618      	mov	r0, r3
 8010406:	f7ff fe67 	bl	80100d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801040a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010410:	2300      	movs	r3, #0
 8010412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010416:	e01c      	b.n	8010452 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010418:	f107 030c 	add.w	r3, r7, #12
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff fe5b 	bl	80100d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010424:	b29a      	uxth	r2, r3
 8010426:	683b      	ldr	r3, [r7, #0]
 8010428:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801042a:	2300      	movs	r3, #0
 801042c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010430:	e00f      	b.n	8010452 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010432:	f107 030c 	add.w	r3, r7, #12
 8010436:	4618      	mov	r0, r3
 8010438:	f7ff fe4e 	bl	80100d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801043c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801043e:	0a5a      	lsrs	r2, r3, #9
 8010440:	683b      	ldr	r3, [r7, #0]
 8010442:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010444:	2300      	movs	r3, #0
 8010446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801044a:	e002      	b.n	8010452 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801044c:	2304      	movs	r3, #4
 801044e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010452:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010456:	4618      	mov	r0, r3
 8010458:	3730      	adds	r7, #48	; 0x30
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}
 801045e:	bf00      	nop
 8010460:	20000009 	.word	0x20000009

08010464 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010464:	b480      	push	{r7}
 8010466:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010468:	4b03      	ldr	r3, [pc, #12]	; (8010478 <BSP_SD_WriteCpltCallback+0x14>)
 801046a:	2201      	movs	r2, #1
 801046c:	601a      	str	r2, [r3, #0]
}
 801046e:	bf00      	nop
 8010470:	46bd      	mov	sp, r7
 8010472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010476:	4770      	bx	lr
 8010478:	200001f8 	.word	0x200001f8

0801047c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 801047c:	b480      	push	{r7}
 801047e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010480:	4b03      	ldr	r3, [pc, #12]	; (8010490 <BSP_SD_ReadCpltCallback+0x14>)
 8010482:	2201      	movs	r2, #1
 8010484:	601a      	str	r2, [r3, #0]
}
 8010486:	bf00      	nop
 8010488:	46bd      	mov	sp, r7
 801048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048e:	4770      	bx	lr
 8010490:	200001fc 	.word	0x200001fc

08010494 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b084      	sub	sp, #16
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	460b      	mov	r3, r1
 801049e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80104a0:	f44f 701d 	mov.w	r0, #628	; 0x274
 80104a4:	f006 fb72 	bl	8016b8c <USBD_static_malloc>
 80104a8:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d105      	bne.n	80104bc <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2200      	movs	r2, #0
 80104b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80104b8:	2302      	movs	r3, #2
 80104ba:	e034      	b.n	8010526 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	68fa      	ldr	r2, [r7, #12]
 80104c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	7c1b      	ldrb	r3, [r3, #16]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d115      	bne.n	80104f8 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80104cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104d0:	2202      	movs	r2, #2
 80104d2:	2101      	movs	r1, #1
 80104d4:	6878      	ldr	r0, [r7, #4]
 80104d6:	f006 f9c8 	bl	801686a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	2201      	movs	r2, #1
 80104de:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80104e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80104e6:	2202      	movs	r2, #2
 80104e8:	2181      	movs	r1, #129	; 0x81
 80104ea:	6878      	ldr	r0, [r7, #4]
 80104ec:	f006 f9bd 	bl	801686a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2201      	movs	r2, #1
 80104f4:	871a      	strh	r2, [r3, #56]	; 0x38
 80104f6:	e012      	b.n	801051e <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80104f8:	2340      	movs	r3, #64	; 0x40
 80104fa:	2202      	movs	r2, #2
 80104fc:	2101      	movs	r1, #1
 80104fe:	6878      	ldr	r0, [r7, #4]
 8010500:	f006 f9b3 	bl	801686a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2201      	movs	r2, #1
 8010508:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 801050c:	2340      	movs	r3, #64	; 0x40
 801050e:	2202      	movs	r2, #2
 8010510:	2181      	movs	r1, #129	; 0x81
 8010512:	6878      	ldr	r0, [r7, #4]
 8010514:	f006 f9a9 	bl	801686a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2201      	movs	r2, #1
 801051c:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f000 f999 	bl	8010856 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8010524:	2300      	movs	r3, #0
}
 8010526:	4618      	mov	r0, r3
 8010528:	3710      	adds	r7, #16
 801052a:	46bd      	mov	sp, r7
 801052c:	bd80      	pop	{r7, pc}

0801052e <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801052e:	b580      	push	{r7, lr}
 8010530:	b082      	sub	sp, #8
 8010532:	af00      	add	r7, sp, #0
 8010534:	6078      	str	r0, [r7, #4]
 8010536:	460b      	mov	r3, r1
 8010538:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 801053a:	2101      	movs	r1, #1
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f006 f9ba 	bl	80168b6 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2200      	movs	r2, #0
 8010546:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 801054a:	2181      	movs	r1, #129	; 0x81
 801054c:	6878      	ldr	r0, [r7, #4]
 801054e:	f006 f9b2 	bl	80168b6 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2200      	movs	r2, #0
 8010556:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801055e:	2b00      	cmp	r3, #0
 8010560:	d00c      	beq.n	801057c <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8010562:	6878      	ldr	r0, [r7, #4]
 8010564:	f000 f9d5 	bl	8010912 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801056e:	4618      	mov	r0, r3
 8010570:	f006 fb1a 	bl	8016ba8 <USBD_static_free>
    pdev->pClassData = NULL;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 801057c:	2300      	movs	r3, #0
}
 801057e:	4618      	mov	r0, r3
 8010580:	3708      	adds	r7, #8
 8010582:	46bd      	mov	sp, r7
 8010584:	bd80      	pop	{r7, pc}
	...

08010588 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010588:	b580      	push	{r7, lr}
 801058a:	b086      	sub	sp, #24
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010598:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 801059a:	2300      	movs	r3, #0
 801059c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 801059e:	2300      	movs	r3, #0
 80105a0:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 80105a2:	693b      	ldr	r3, [r7, #16]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d101      	bne.n	80105ac <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80105a8:	2303      	movs	r3, #3
 80105aa:	e0db      	b.n	8010764 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105ac:	683b      	ldr	r3, [r7, #0]
 80105ae:	781b      	ldrb	r3, [r3, #0]
 80105b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d04e      	beq.n	8010656 <USBD_MSC_Setup+0xce>
 80105b8:	2b20      	cmp	r3, #32
 80105ba:	f040 80cb 	bne.w	8010754 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	785b      	ldrb	r3, [r3, #1]
 80105c2:	2bfe      	cmp	r3, #254	; 0xfe
 80105c4:	d002      	beq.n	80105cc <USBD_MSC_Setup+0x44>
 80105c6:	2bff      	cmp	r3, #255	; 0xff
 80105c8:	d025      	beq.n	8010616 <USBD_MSC_Setup+0x8e>
 80105ca:	e03c      	b.n	8010646 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80105cc:	683b      	ldr	r3, [r7, #0]
 80105ce:	885b      	ldrh	r3, [r3, #2]
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d119      	bne.n	8010608 <USBD_MSC_Setup+0x80>
 80105d4:	683b      	ldr	r3, [r7, #0]
 80105d6:	88db      	ldrh	r3, [r3, #6]
 80105d8:	2b01      	cmp	r3, #1
 80105da:	d115      	bne.n	8010608 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	da10      	bge.n	8010608 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80105ec:	699b      	ldr	r3, [r3, #24]
 80105ee:	4798      	blx	r3
 80105f0:	4603      	mov	r3, r0
 80105f2:	461a      	mov	r2, r3
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	2201      	movs	r2, #1
 80105fc:	4619      	mov	r1, r3
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f002 fe3d 	bl	801327e <USBD_CtlSendData>
 8010604:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010606:	e025      	b.n	8010654 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8010608:	6839      	ldr	r1, [r7, #0]
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f002 fdc6 	bl	801319c <USBD_CtlError>
            ret = USBD_FAIL;
 8010610:	2303      	movs	r3, #3
 8010612:	75fb      	strb	r3, [r7, #23]
          break;
 8010614:	e01e      	b.n	8010654 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8010616:	683b      	ldr	r3, [r7, #0]
 8010618:	885b      	ldrh	r3, [r3, #2]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d10c      	bne.n	8010638 <USBD_MSC_Setup+0xb0>
 801061e:	683b      	ldr	r3, [r7, #0]
 8010620:	88db      	ldrh	r3, [r3, #6]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d108      	bne.n	8010638 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8010626:	683b      	ldr	r3, [r7, #0]
 8010628:	781b      	ldrb	r3, [r3, #0]
 801062a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 801062c:	2b00      	cmp	r3, #0
 801062e:	db03      	blt.n	8010638 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8010630:	6878      	ldr	r0, [r7, #4]
 8010632:	f000 f948 	bl	80108c6 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010636:	e00d      	b.n	8010654 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8010638:	6839      	ldr	r1, [r7, #0]
 801063a:	6878      	ldr	r0, [r7, #4]
 801063c:	f002 fdae 	bl	801319c <USBD_CtlError>
            ret = USBD_FAIL;
 8010640:	2303      	movs	r3, #3
 8010642:	75fb      	strb	r3, [r7, #23]
          break;
 8010644:	e006      	b.n	8010654 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010646:	6839      	ldr	r1, [r7, #0]
 8010648:	6878      	ldr	r0, [r7, #4]
 801064a:	f002 fda7 	bl	801319c <USBD_CtlError>
          ret = USBD_FAIL;
 801064e:	2303      	movs	r3, #3
 8010650:	75fb      	strb	r3, [r7, #23]
          break;
 8010652:	bf00      	nop
      }
      break;
 8010654:	e085      	b.n	8010762 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010656:	683b      	ldr	r3, [r7, #0]
 8010658:	785b      	ldrb	r3, [r3, #1]
 801065a:	2b0b      	cmp	r3, #11
 801065c:	d871      	bhi.n	8010742 <USBD_MSC_Setup+0x1ba>
 801065e:	a201      	add	r2, pc, #4	; (adr r2, 8010664 <USBD_MSC_Setup+0xdc>)
 8010660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010664:	08010695 	.word	0x08010695
 8010668:	08010711 	.word	0x08010711
 801066c:	08010743 	.word	0x08010743
 8010670:	08010743 	.word	0x08010743
 8010674:	08010743 	.word	0x08010743
 8010678:	08010743 	.word	0x08010743
 801067c:	08010743 	.word	0x08010743
 8010680:	08010743 	.word	0x08010743
 8010684:	08010743 	.word	0x08010743
 8010688:	08010743 	.word	0x08010743
 801068c:	080106bf 	.word	0x080106bf
 8010690:	080106e9 	.word	0x080106e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801069a:	b2db      	uxtb	r3, r3
 801069c:	2b03      	cmp	r3, #3
 801069e:	d107      	bne.n	80106b0 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80106a0:	f107 030e 	add.w	r3, r7, #14
 80106a4:	2202      	movs	r2, #2
 80106a6:	4619      	mov	r1, r3
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f002 fde8 	bl	801327e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80106ae:	e050      	b.n	8010752 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80106b0:	6839      	ldr	r1, [r7, #0]
 80106b2:	6878      	ldr	r0, [r7, #4]
 80106b4:	f002 fd72 	bl	801319c <USBD_CtlError>
            ret = USBD_FAIL;
 80106b8:	2303      	movs	r3, #3
 80106ba:	75fb      	strb	r3, [r7, #23]
          break;
 80106bc:	e049      	b.n	8010752 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106c4:	b2db      	uxtb	r3, r3
 80106c6:	2b03      	cmp	r3, #3
 80106c8:	d107      	bne.n	80106da <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80106ca:	693b      	ldr	r3, [r7, #16]
 80106cc:	3304      	adds	r3, #4
 80106ce:	2201      	movs	r2, #1
 80106d0:	4619      	mov	r1, r3
 80106d2:	6878      	ldr	r0, [r7, #4]
 80106d4:	f002 fdd3 	bl	801327e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80106d8:	e03b      	b.n	8010752 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80106da:	6839      	ldr	r1, [r7, #0]
 80106dc:	6878      	ldr	r0, [r7, #4]
 80106de:	f002 fd5d 	bl	801319c <USBD_CtlError>
            ret = USBD_FAIL;
 80106e2:	2303      	movs	r3, #3
 80106e4:	75fb      	strb	r3, [r7, #23]
          break;
 80106e6:	e034      	b.n	8010752 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	2b03      	cmp	r3, #3
 80106f2:	d106      	bne.n	8010702 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80106f4:	683b      	ldr	r3, [r7, #0]
 80106f6:	885b      	ldrh	r3, [r3, #2]
 80106f8:	b2db      	uxtb	r3, r3
 80106fa:	461a      	mov	r2, r3
 80106fc:	693b      	ldr	r3, [r7, #16]
 80106fe:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010700:	e027      	b.n	8010752 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8010702:	6839      	ldr	r1, [r7, #0]
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f002 fd49 	bl	801319c <USBD_CtlError>
            ret = USBD_FAIL;
 801070a:	2303      	movs	r3, #3
 801070c:	75fb      	strb	r3, [r7, #23]
          break;
 801070e:	e020      	b.n	8010752 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010716:	b2db      	uxtb	r3, r3
 8010718:	2b03      	cmp	r3, #3
 801071a:	d119      	bne.n	8010750 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 801071c:	683b      	ldr	r3, [r7, #0]
 801071e:	885b      	ldrh	r3, [r3, #2]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d115      	bne.n	8010750 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8010724:	683b      	ldr	r3, [r7, #0]
 8010726:	889b      	ldrh	r3, [r3, #4]
 8010728:	b2db      	uxtb	r3, r3
 801072a:	4619      	mov	r1, r3
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f006 f8e1 	bl	80168f4 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8010732:	683b      	ldr	r3, [r7, #0]
 8010734:	889b      	ldrh	r3, [r3, #4]
 8010736:	b2db      	uxtb	r3, r3
 8010738:	4619      	mov	r1, r3
 801073a:	6878      	ldr	r0, [r7, #4]
 801073c:	f000 fa82 	bl	8010c44 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8010740:	e006      	b.n	8010750 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 8010742:	6839      	ldr	r1, [r7, #0]
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	f002 fd29 	bl	801319c <USBD_CtlError>
          ret = USBD_FAIL;
 801074a:	2303      	movs	r3, #3
 801074c:	75fb      	strb	r3, [r7, #23]
          break;
 801074e:	e000      	b.n	8010752 <USBD_MSC_Setup+0x1ca>
          break;
 8010750:	bf00      	nop
      }
      break;
 8010752:	e006      	b.n	8010762 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 8010754:	6839      	ldr	r1, [r7, #0]
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f002 fd20 	bl	801319c <USBD_CtlError>
      ret = USBD_FAIL;
 801075c:	2303      	movs	r3, #3
 801075e:	75fb      	strb	r3, [r7, #23]
      break;
 8010760:	bf00      	nop
  }

  return (uint8_t)ret;
 8010762:	7dfb      	ldrb	r3, [r7, #23]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3718      	adds	r7, #24
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b082      	sub	sp, #8
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	460b      	mov	r3, r1
 8010776:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8010778:	78fb      	ldrb	r3, [r7, #3]
 801077a:	4619      	mov	r1, r3
 801077c:	6878      	ldr	r0, [r7, #4]
 801077e:	f000 f8dc 	bl	801093a <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8010782:	2300      	movs	r3, #0
}
 8010784:	4618      	mov	r0, r3
 8010786:	3708      	adds	r7, #8
 8010788:	46bd      	mov	sp, r7
 801078a:	bd80      	pop	{r7, pc}

0801078c <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801078c:	b580      	push	{r7, lr}
 801078e:	b082      	sub	sp, #8
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
 8010794:	460b      	mov	r3, r1
 8010796:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8010798:	78fb      	ldrb	r3, [r7, #3]
 801079a:	4619      	mov	r1, r3
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 f902 	bl	80109a6 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80107a2:	2300      	movs	r3, #0
}
 80107a4:	4618      	mov	r0, r3
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80107ac:	b480      	push	{r7}
 80107ae:	b083      	sub	sp, #12
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2220      	movs	r2, #32
 80107b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80107ba:	4b03      	ldr	r3, [pc, #12]	; (80107c8 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80107bc:	4618      	mov	r0, r3
 80107be:	370c      	adds	r7, #12
 80107c0:	46bd      	mov	sp, r7
 80107c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107c6:	4770      	bx	lr
 80107c8:	20000044 	.word	0x20000044

080107cc <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80107cc:	b480      	push	{r7}
 80107ce:	b083      	sub	sp, #12
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2220      	movs	r2, #32
 80107d8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80107da:	4b03      	ldr	r3, [pc, #12]	; (80107e8 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80107dc:	4618      	mov	r0, r3
 80107de:	370c      	adds	r7, #12
 80107e0:	46bd      	mov	sp, r7
 80107e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107e6:	4770      	bx	lr
 80107e8:	20000064 	.word	0x20000064

080107ec <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80107ec:	b480      	push	{r7}
 80107ee:	b083      	sub	sp, #12
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2220      	movs	r2, #32
 80107f8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 80107fa:	4b03      	ldr	r3, [pc, #12]	; (8010808 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 80107fc:	4618      	mov	r0, r3
 80107fe:	370c      	adds	r7, #12
 8010800:	46bd      	mov	sp, r7
 8010802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010806:	4770      	bx	lr
 8010808:	20000084 	.word	0x20000084

0801080c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801080c:	b480      	push	{r7}
 801080e:	b083      	sub	sp, #12
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	220a      	movs	r2, #10
 8010818:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801081a:	4b03      	ldr	r3, [pc, #12]	; (8010828 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 801081c:	4618      	mov	r0, r3
 801081e:	370c      	adds	r7, #12
 8010820:	46bd      	mov	sp, r7
 8010822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010826:	4770      	bx	lr
 8010828:	200000a4 	.word	0x200000a4

0801082c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d101      	bne.n	8010840 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801083c:	2303      	movs	r3, #3
 801083e:	e004      	b.n	801084a <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	683a      	ldr	r2, [r7, #0]
 8010844:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8010848:	2300      	movs	r3, #0
}
 801084a:	4618      	mov	r0, r3
 801084c:	370c      	adds	r7, #12
 801084e:	46bd      	mov	sp, r7
 8010850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010854:	4770      	bx	lr

08010856 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8010856:	b580      	push	{r7, lr}
 8010858:	b084      	sub	sp, #16
 801085a:	af00      	add	r7, sp, #0
 801085c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010864:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	2b00      	cmp	r3, #0
 801086a:	d028      	beq.n	80108be <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2200      	movs	r2, #0
 8010870:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2200      	movs	r2, #0
 8010876:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	2200      	movs	r2, #0
 801087c:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8010880:	68fb      	ldr	r3, [r7, #12]
 8010882:	2200      	movs	r2, #0
 8010884:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	2200      	movs	r2, #0
 801088c:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	2000      	movs	r0, #0
 801089a:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 801089c:	2101      	movs	r1, #1
 801089e:	6878      	ldr	r0, [r7, #4]
 80108a0:	f006 f828 	bl	80168f4 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80108a4:	2181      	movs	r1, #129	; 0x81
 80108a6:	6878      	ldr	r0, [r7, #4]
 80108a8:	f006 f824 	bl	80168f4 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80108ac:	68fb      	ldr	r3, [r7, #12]
 80108ae:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80108b2:	231f      	movs	r3, #31
 80108b4:	2101      	movs	r1, #1
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f006 f8e5 	bl	8016a86 <USBD_LL_PrepareReceive>
 80108bc:	e000      	b.n	80108c0 <MSC_BOT_Init+0x6a>
    return;
 80108be:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80108c0:	3710      	adds	r7, #16
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}

080108c6 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80108c6:	b580      	push	{r7, lr}
 80108c8:	b084      	sub	sp, #16
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80108d4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d016      	beq.n	801090a <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80108dc:	68fb      	ldr	r3, [r7, #12]
 80108de:	2200      	movs	r2, #0
 80108e0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80108e2:	68fb      	ldr	r3, [r7, #12]
 80108e4:	2201      	movs	r2, #1
 80108e6:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80108e8:	2181      	movs	r1, #129	; 0x81
 80108ea:	6878      	ldr	r0, [r7, #4]
 80108ec:	f006 f840 	bl	8016970 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 80108f0:	2101      	movs	r1, #1
 80108f2:	6878      	ldr	r0, [r7, #4]
 80108f4:	f006 f83c 	bl	8016970 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80108fe:	231f      	movs	r3, #31
 8010900:	2101      	movs	r1, #1
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f006 f8bf 	bl	8016a86 <USBD_LL_PrepareReceive>
 8010908:	e000      	b.n	801090c <MSC_BOT_Reset+0x46>
    return;
 801090a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 801090c:	3710      	adds	r7, #16
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8010912:	b480      	push	{r7}
 8010914:	b085      	sub	sp, #20
 8010916:	af00      	add	r7, sp, #0
 8010918:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010920:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d002      	beq.n	801092e <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8010928:	68fb      	ldr	r3, [r7, #12]
 801092a:	2200      	movs	r2, #0
 801092c:	721a      	strb	r2, [r3, #8]
  }
}
 801092e:	bf00      	nop
 8010930:	3714      	adds	r7, #20
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr

0801093a <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801093a:	b580      	push	{r7, lr}
 801093c:	b084      	sub	sp, #16
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
 8010942:	460b      	mov	r3, r1
 8010944:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801094c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2b00      	cmp	r3, #0
 8010952:	d020      	beq.n	8010996 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	7a1b      	ldrb	r3, [r3, #8]
 8010958:	2b02      	cmp	r3, #2
 801095a:	d005      	beq.n	8010968 <MSC_BOT_DataIn+0x2e>
 801095c:	2b02      	cmp	r3, #2
 801095e:	db1c      	blt.n	801099a <MSC_BOT_DataIn+0x60>
 8010960:	3b03      	subs	r3, #3
 8010962:	2b01      	cmp	r3, #1
 8010964:	d819      	bhi.n	801099a <MSC_BOT_DataIn+0x60>
 8010966:	e011      	b.n	801098c <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8010974:	461a      	mov	r2, r3
 8010976:	6878      	ldr	r0, [r7, #4]
 8010978:	f000 f992 	bl	8010ca0 <SCSI_ProcessCmd>
 801097c:	4603      	mov	r3, r0
 801097e:	2b00      	cmp	r3, #0
 8010980:	da0d      	bge.n	801099e <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010982:	2101      	movs	r1, #1
 8010984:	6878      	ldr	r0, [r7, #4]
 8010986:	f000 f8fb 	bl	8010b80 <MSC_BOT_SendCSW>
      }
      break;
 801098a:	e008      	b.n	801099e <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 801098c:	2100      	movs	r1, #0
 801098e:	6878      	ldr	r0, [r7, #4]
 8010990:	f000 f8f6 	bl	8010b80 <MSC_BOT_SendCSW>
      break;
 8010994:	e004      	b.n	80109a0 <MSC_BOT_DataIn+0x66>
    return;
 8010996:	bf00      	nop
 8010998:	e002      	b.n	80109a0 <MSC_BOT_DataIn+0x66>

    default:
      break;
 801099a:	bf00      	nop
 801099c:	e000      	b.n	80109a0 <MSC_BOT_DataIn+0x66>
      break;
 801099e:	bf00      	nop
  }
}
 80109a0:	3710      	adds	r7, #16
 80109a2:	46bd      	mov	sp, r7
 80109a4:	bd80      	pop	{r7, pc}

080109a6 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b084      	sub	sp, #16
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
 80109ae:	460b      	mov	r3, r1
 80109b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80109b8:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d01c      	beq.n	80109fa <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	7a1b      	ldrb	r3, [r3, #8]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d002      	beq.n	80109ce <MSC_BOT_DataOut+0x28>
 80109c8:	2b01      	cmp	r3, #1
 80109ca:	d004      	beq.n	80109d6 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80109cc:	e018      	b.n	8010a00 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 80109ce:	6878      	ldr	r0, [r7, #4]
 80109d0:	f000 f81a 	bl	8010a08 <MSC_BOT_CBW_Decode>
      break;
 80109d4:	e014      	b.n	8010a00 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80109e2:	461a      	mov	r2, r3
 80109e4:	6878      	ldr	r0, [r7, #4]
 80109e6:	f000 f95b 	bl	8010ca0 <SCSI_ProcessCmd>
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	da06      	bge.n	80109fe <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80109f0:	2101      	movs	r1, #1
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f000 f8c4 	bl	8010b80 <MSC_BOT_SendCSW>
      break;
 80109f8:	e001      	b.n	80109fe <MSC_BOT_DataOut+0x58>
    return;
 80109fa:	bf00      	nop
 80109fc:	e000      	b.n	8010a00 <MSC_BOT_DataOut+0x5a>
      break;
 80109fe:	bf00      	nop
  }
}
 8010a00:	3710      	adds	r7, #16
 8010a02:	46bd      	mov	sp, r7
 8010a04:	bd80      	pop	{r7, pc}
	...

08010a08 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b084      	sub	sp, #16
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010a16:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d077      	beq.n	8010b0e <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8010a36:	2101      	movs	r1, #1
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f006 f845 	bl	8016ac8 <USBD_LL_GetRxDataSize>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	2b1f      	cmp	r3, #31
 8010a42:	d114      	bne.n	8010a6e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8010a4a:	4a34      	ldr	r2, [pc, #208]	; (8010b1c <MSC_BOT_CBW_Decode+0x114>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d10e      	bne.n	8010a6e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8010a56:	2b01      	cmp	r3, #1
 8010a58:	d809      	bhi.n	8010a6e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d004      	beq.n	8010a6e <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8010a6a:	2b10      	cmp	r3, #16
 8010a6c:	d90e      	bls.n	8010a8c <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010a74:	2320      	movs	r3, #32
 8010a76:	2205      	movs	r2, #5
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	f000 fdbc 	bl	80115f6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	2202      	movs	r2, #2
 8010a82:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f000 f8ab 	bl	8010be0 <MSC_BOT_Abort>
 8010a8a:	e043      	b.n	8010b14 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8010a8c:	68fb      	ldr	r3, [r7, #12]
 8010a8e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8010a98:	461a      	mov	r2, r3
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 f900 	bl	8010ca0 <SCSI_ProcessCmd>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	da0c      	bge.n	8010ac0 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	7a1b      	ldrb	r3, [r3, #8]
 8010aaa:	2b05      	cmp	r3, #5
 8010aac:	d104      	bne.n	8010ab8 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010aae:	2101      	movs	r1, #1
 8010ab0:	6878      	ldr	r0, [r7, #4]
 8010ab2:	f000 f865 	bl	8010b80 <MSC_BOT_SendCSW>
 8010ab6:	e02d      	b.n	8010b14 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010ab8:	6878      	ldr	r0, [r7, #4]
 8010aba:	f000 f891 	bl	8010be0 <MSC_BOT_Abort>
 8010abe:	e029      	b.n	8010b14 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	7a1b      	ldrb	r3, [r3, #8]
 8010ac4:	2b02      	cmp	r3, #2
 8010ac6:	d024      	beq.n	8010b12 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8010acc:	2b01      	cmp	r3, #1
 8010ace:	d020      	beq.n	8010b12 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8010ad4:	2b03      	cmp	r3, #3
 8010ad6:	d01c      	beq.n	8010b12 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	68db      	ldr	r3, [r3, #12]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d009      	beq.n	8010af4 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	f103 0110 	add.w	r1, r3, #16
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	68db      	ldr	r3, [r3, #12]
 8010aea:	461a      	mov	r2, r3
 8010aec:	6878      	ldr	r0, [r7, #4]
 8010aee:	f000 f817 	bl	8010b20 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8010af2:	e00f      	b.n	8010b14 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	68db      	ldr	r3, [r3, #12]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d104      	bne.n	8010b06 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8010afc:	2100      	movs	r1, #0
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f000 f83e 	bl	8010b80 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8010b04:	e006      	b.n	8010b14 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8010b06:	6878      	ldr	r0, [r7, #4]
 8010b08:	f000 f86a 	bl	8010be0 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8010b0c:	e002      	b.n	8010b14 <MSC_BOT_CBW_Decode+0x10c>
    return;
 8010b0e:	bf00      	nop
 8010b10:	e000      	b.n	8010b14 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8010b12:	bf00      	nop
    }
  }
}
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}
 8010b1a:	bf00      	nop
 8010b1c:	43425355 	.word	0x43425355

08010b20 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b086      	sub	sp, #24
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	60f8      	str	r0, [r7, #12]
 8010b28:	60b9      	str	r1, [r7, #8]
 8010b2a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b32:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	4293      	cmp	r3, r2
 8010b3e:	bf28      	it	cs
 8010b40:	4613      	movcs	r3, r2
 8010b42:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8010b44:	697b      	ldr	r3, [r7, #20]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d015      	beq.n	8010b76 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	1ad2      	subs	r2, r2, r3
 8010b54:	697b      	ldr	r3, [r7, #20]
 8010b56:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8010b5a:	697b      	ldr	r3, [r7, #20]
 8010b5c:	2200      	movs	r2, #0
 8010b5e:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8010b62:	697b      	ldr	r3, [r7, #20]
 8010b64:	2204      	movs	r2, #4
 8010b66:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8010b68:	693b      	ldr	r3, [r7, #16]
 8010b6a:	68ba      	ldr	r2, [r7, #8]
 8010b6c:	2181      	movs	r1, #129	; 0x81
 8010b6e:	68f8      	ldr	r0, [r7, #12]
 8010b70:	f005 ff68 	bl	8016a44 <USBD_LL_Transmit>
 8010b74:	e000      	b.n	8010b78 <MSC_BOT_SendData+0x58>
    return;
 8010b76:	bf00      	nop
}
 8010b78:	3718      	adds	r7, #24
 8010b7a:	46bd      	mov	sp, r7
 8010b7c:	bd80      	pop	{r7, pc}
	...

08010b80 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b084      	sub	sp, #16
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
 8010b88:	460b      	mov	r3, r1
 8010b8a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010b92:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d01b      	beq.n	8010bd2 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	4a0f      	ldr	r2, [pc, #60]	; (8010bdc <MSC_BOT_SendCSW+0x5c>)
 8010b9e:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	78fa      	ldrb	r2, [r7, #3]
 8010ba6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	2200      	movs	r2, #0
 8010bae:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8010bb6:	230d      	movs	r3, #13
 8010bb8:	2181      	movs	r1, #129	; 0x81
 8010bba:	6878      	ldr	r0, [r7, #4]
 8010bbc:	f005 ff42 	bl	8016a44 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8010bc6:	231f      	movs	r3, #31
 8010bc8:	2101      	movs	r1, #1
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f005 ff5b 	bl	8016a86 <USBD_LL_PrepareReceive>
 8010bd0:	e000      	b.n	8010bd4 <MSC_BOT_SendCSW+0x54>
    return;
 8010bd2:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8010bd4:	3710      	adds	r7, #16
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	bf00      	nop
 8010bdc:	53425355 	.word	0x53425355

08010be0 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b084      	sub	sp, #16
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010bee:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010bf0:	68fb      	ldr	r3, [r7, #12]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d022      	beq.n	8010c3c <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8010bfc:	2b00      	cmp	r3, #0
 8010bfe:	d10c      	bne.n	8010c1a <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d007      	beq.n	8010c1a <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d103      	bne.n	8010c1a <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010c12:	2101      	movs	r1, #1
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f005 fe8c 	bl	8016932 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010c1a:	2181      	movs	r1, #129	; 0x81
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f005 fe88 	bl	8016932 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	7a5b      	ldrb	r3, [r3, #9]
 8010c26:	2b02      	cmp	r3, #2
 8010c28:	d109      	bne.n	8010c3e <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010c2a:	2181      	movs	r1, #129	; 0x81
 8010c2c:	6878      	ldr	r0, [r7, #4]
 8010c2e:	f005 fe80 	bl	8016932 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010c32:	2101      	movs	r1, #1
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f005 fe7c 	bl	8016932 <USBD_LL_StallEP>
 8010c3a:	e000      	b.n	8010c3e <MSC_BOT_Abort+0x5e>
    return;
 8010c3c:	bf00      	nop
  }
}
 8010c3e:	3710      	adds	r7, #16
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
 8010c4c:	460b      	mov	r3, r1
 8010c4e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010c56:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d019      	beq.n	8010c92 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	7a5b      	ldrb	r3, [r3, #9]
 8010c62:	2b02      	cmp	r3, #2
 8010c64:	d108      	bne.n	8010c78 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8010c66:	2181      	movs	r1, #129	; 0x81
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f005 fe62 	bl	8016932 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8010c6e:	2101      	movs	r1, #1
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f005 fe5e 	bl	8016932 <USBD_LL_StallEP>
 8010c76:	e00f      	b.n	8010c98 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8010c78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	da0a      	bge.n	8010c96 <MSC_BOT_CplClrFeature+0x52>
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	7a5b      	ldrb	r3, [r3, #9]
 8010c84:	2b01      	cmp	r3, #1
 8010c86:	d006      	beq.n	8010c96 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8010c88:	2101      	movs	r1, #1
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f7ff ff78 	bl	8010b80 <MSC_BOT_SendCSW>
 8010c90:	e002      	b.n	8010c98 <MSC_BOT_CplClrFeature+0x54>
    return;
 8010c92:	bf00      	nop
 8010c94:	e000      	b.n	8010c98 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8010c96:	bf00      	nop
  }
}
 8010c98:	3710      	adds	r7, #16
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
	...

08010ca0 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b086      	sub	sp, #24
 8010ca4:	af00      	add	r7, sp, #0
 8010ca6:	60f8      	str	r0, [r7, #12]
 8010ca8:	460b      	mov	r3, r1
 8010caa:	607a      	str	r2, [r7, #4]
 8010cac:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010cb4:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8010cb6:	693b      	ldr	r3, [r7, #16]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d102      	bne.n	8010cc2 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8010cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8010cc0:	e168      	b.n	8010f94 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	2baa      	cmp	r3, #170	; 0xaa
 8010cc8:	f000 8144 	beq.w	8010f54 <SCSI_ProcessCmd+0x2b4>
 8010ccc:	2baa      	cmp	r3, #170	; 0xaa
 8010cce:	f300 8153 	bgt.w	8010f78 <SCSI_ProcessCmd+0x2d8>
 8010cd2:	2ba8      	cmp	r3, #168	; 0xa8
 8010cd4:	f000 812c 	beq.w	8010f30 <SCSI_ProcessCmd+0x290>
 8010cd8:	2ba8      	cmp	r3, #168	; 0xa8
 8010cda:	f300 814d 	bgt.w	8010f78 <SCSI_ProcessCmd+0x2d8>
 8010cde:	2b5a      	cmp	r3, #90	; 0x5a
 8010ce0:	f300 80c0 	bgt.w	8010e64 <SCSI_ProcessCmd+0x1c4>
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	f2c0 8147 	blt.w	8010f78 <SCSI_ProcessCmd+0x2d8>
 8010cea:	2b5a      	cmp	r3, #90	; 0x5a
 8010cec:	f200 8144 	bhi.w	8010f78 <SCSI_ProcessCmd+0x2d8>
 8010cf0:	a201      	add	r2, pc, #4	; (adr r2, 8010cf8 <SCSI_ProcessCmd+0x58>)
 8010cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cf6:	bf00      	nop
 8010cf8:	08010e6b 	.word	0x08010e6b
 8010cfc:	08010f79 	.word	0x08010f79
 8010d00:	08010f79 	.word	0x08010f79
 8010d04:	08010e7d 	.word	0x08010e7d
 8010d08:	08010f79 	.word	0x08010f79
 8010d0c:	08010f79 	.word	0x08010f79
 8010d10:	08010f79 	.word	0x08010f79
 8010d14:	08010f79 	.word	0x08010f79
 8010d18:	08010f79 	.word	0x08010f79
 8010d1c:	08010f79 	.word	0x08010f79
 8010d20:	08010f79 	.word	0x08010f79
 8010d24:	08010f79 	.word	0x08010f79
 8010d28:	08010f79 	.word	0x08010f79
 8010d2c:	08010f79 	.word	0x08010f79
 8010d30:	08010f79 	.word	0x08010f79
 8010d34:	08010f79 	.word	0x08010f79
 8010d38:	08010f79 	.word	0x08010f79
 8010d3c:	08010f79 	.word	0x08010f79
 8010d40:	08010e8f 	.word	0x08010e8f
 8010d44:	08010f79 	.word	0x08010f79
 8010d48:	08010f79 	.word	0x08010f79
 8010d4c:	08010f79 	.word	0x08010f79
 8010d50:	08010f79 	.word	0x08010f79
 8010d54:	08010f79 	.word	0x08010f79
 8010d58:	08010f79 	.word	0x08010f79
 8010d5c:	08010f79 	.word	0x08010f79
 8010d60:	08010ec5 	.word	0x08010ec5
 8010d64:	08010ea1 	.word	0x08010ea1
 8010d68:	08010f79 	.word	0x08010f79
 8010d6c:	08010f79 	.word	0x08010f79
 8010d70:	08010eb3 	.word	0x08010eb3
 8010d74:	08010f79 	.word	0x08010f79
 8010d78:	08010f79 	.word	0x08010f79
 8010d7c:	08010f79 	.word	0x08010f79
 8010d80:	08010f79 	.word	0x08010f79
 8010d84:	08010ee9 	.word	0x08010ee9
 8010d88:	08010f79 	.word	0x08010f79
 8010d8c:	08010efb 	.word	0x08010efb
 8010d90:	08010f79 	.word	0x08010f79
 8010d94:	08010f79 	.word	0x08010f79
 8010d98:	08010f1f 	.word	0x08010f1f
 8010d9c:	08010f79 	.word	0x08010f79
 8010da0:	08010f43 	.word	0x08010f43
 8010da4:	08010f79 	.word	0x08010f79
 8010da8:	08010f79 	.word	0x08010f79
 8010dac:	08010f79 	.word	0x08010f79
 8010db0:	08010f79 	.word	0x08010f79
 8010db4:	08010f67 	.word	0x08010f67
 8010db8:	08010f79 	.word	0x08010f79
 8010dbc:	08010f79 	.word	0x08010f79
 8010dc0:	08010f79 	.word	0x08010f79
 8010dc4:	08010f79 	.word	0x08010f79
 8010dc8:	08010f79 	.word	0x08010f79
 8010dcc:	08010f79 	.word	0x08010f79
 8010dd0:	08010f79 	.word	0x08010f79
 8010dd4:	08010f79 	.word	0x08010f79
 8010dd8:	08010f79 	.word	0x08010f79
 8010ddc:	08010f79 	.word	0x08010f79
 8010de0:	08010f79 	.word	0x08010f79
 8010de4:	08010f79 	.word	0x08010f79
 8010de8:	08010f79 	.word	0x08010f79
 8010dec:	08010f79 	.word	0x08010f79
 8010df0:	08010f79 	.word	0x08010f79
 8010df4:	08010f79 	.word	0x08010f79
 8010df8:	08010f79 	.word	0x08010f79
 8010dfc:	08010f79 	.word	0x08010f79
 8010e00:	08010f79 	.word	0x08010f79
 8010e04:	08010f79 	.word	0x08010f79
 8010e08:	08010f79 	.word	0x08010f79
 8010e0c:	08010f79 	.word	0x08010f79
 8010e10:	08010f79 	.word	0x08010f79
 8010e14:	08010f79 	.word	0x08010f79
 8010e18:	08010f79 	.word	0x08010f79
 8010e1c:	08010f79 	.word	0x08010f79
 8010e20:	08010f79 	.word	0x08010f79
 8010e24:	08010f79 	.word	0x08010f79
 8010e28:	08010f79 	.word	0x08010f79
 8010e2c:	08010f79 	.word	0x08010f79
 8010e30:	08010f79 	.word	0x08010f79
 8010e34:	08010f79 	.word	0x08010f79
 8010e38:	08010f79 	.word	0x08010f79
 8010e3c:	08010f79 	.word	0x08010f79
 8010e40:	08010f79 	.word	0x08010f79
 8010e44:	08010f79 	.word	0x08010f79
 8010e48:	08010f79 	.word	0x08010f79
 8010e4c:	08010f79 	.word	0x08010f79
 8010e50:	08010f79 	.word	0x08010f79
 8010e54:	08010f79 	.word	0x08010f79
 8010e58:	08010f79 	.word	0x08010f79
 8010e5c:	08010f79 	.word	0x08010f79
 8010e60:	08010ed7 	.word	0x08010ed7
 8010e64:	2b9e      	cmp	r3, #158	; 0x9e
 8010e66:	d051      	beq.n	8010f0c <SCSI_ProcessCmd+0x26c>
 8010e68:	e086      	b.n	8010f78 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8010e6a:	7afb      	ldrb	r3, [r7, #11]
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	4619      	mov	r1, r3
 8010e70:	68f8      	ldr	r0, [r7, #12]
 8010e72:	f000 f893 	bl	8010f9c <SCSI_TestUnitReady>
 8010e76:	4603      	mov	r3, r0
 8010e78:	75fb      	strb	r3, [r7, #23]
      break;
 8010e7a:	e089      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8010e7c:	7afb      	ldrb	r3, [r7, #11]
 8010e7e:	687a      	ldr	r2, [r7, #4]
 8010e80:	4619      	mov	r1, r3
 8010e82:	68f8      	ldr	r0, [r7, #12]
 8010e84:	f000 fb38 	bl	80114f8 <SCSI_RequestSense>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8010e8c:	e080      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8010e8e:	7afb      	ldrb	r3, [r7, #11]
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	4619      	mov	r1, r3
 8010e94:	68f8      	ldr	r0, [r7, #12]
 8010e96:	f000 f8d1 	bl	801103c <SCSI_Inquiry>
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	75fb      	strb	r3, [r7, #23]
      break;
 8010e9e:	e077      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8010ea0:	7afb      	ldrb	r3, [r7, #11]
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	f000 fbec 	bl	8011684 <SCSI_StartStopUnit>
 8010eac:	4603      	mov	r3, r0
 8010eae:	75fb      	strb	r3, [r7, #23]
      break;
 8010eb0:	e06e      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8010eb2:	7afb      	ldrb	r3, [r7, #11]
 8010eb4:	687a      	ldr	r2, [r7, #4]
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	68f8      	ldr	r0, [r7, #12]
 8010eba:	f000 fc34 	bl	8011726 <SCSI_AllowPreventRemovable>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	75fb      	strb	r3, [r7, #23]
      break;
 8010ec2:	e065      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8010ec4:	7afb      	ldrb	r3, [r7, #11]
 8010ec6:	687a      	ldr	r2, [r7, #4]
 8010ec8:	4619      	mov	r1, r3
 8010eca:	68f8      	ldr	r0, [r7, #12]
 8010ecc:	f000 fabc 	bl	8011448 <SCSI_ModeSense6>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8010ed4:	e05c      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8010ed6:	7afb      	ldrb	r3, [r7, #11]
 8010ed8:	687a      	ldr	r2, [r7, #4]
 8010eda:	4619      	mov	r1, r3
 8010edc:	68f8      	ldr	r0, [r7, #12]
 8010ede:	f000 fadf 	bl	80114a0 <SCSI_ModeSense10>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	75fb      	strb	r3, [r7, #23]
      break;
 8010ee6:	e053      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8010ee8:	7afb      	ldrb	r3, [r7, #11]
 8010eea:	687a      	ldr	r2, [r7, #4]
 8010eec:	4619      	mov	r1, r3
 8010eee:	68f8      	ldr	r0, [r7, #12]
 8010ef0:	f000 fa37 	bl	8011362 <SCSI_ReadFormatCapacity>
 8010ef4:	4603      	mov	r3, r0
 8010ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8010ef8:	e04a      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8010efa:	7afb      	ldrb	r3, [r7, #11]
 8010efc:	687a      	ldr	r2, [r7, #4]
 8010efe:	4619      	mov	r1, r3
 8010f00:	68f8      	ldr	r0, [r7, #12]
 8010f02:	f000 f90f 	bl	8011124 <SCSI_ReadCapacity10>
 8010f06:	4603      	mov	r3, r0
 8010f08:	75fb      	strb	r3, [r7, #23]
      break;
 8010f0a:	e041      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8010f0c:	7afb      	ldrb	r3, [r7, #11]
 8010f0e:	687a      	ldr	r2, [r7, #4]
 8010f10:	4619      	mov	r1, r3
 8010f12:	68f8      	ldr	r0, [r7, #12]
 8010f14:	f000 f97b 	bl	801120e <SCSI_ReadCapacity16>
 8010f18:	4603      	mov	r3, r0
 8010f1a:	75fb      	strb	r3, [r7, #23]
      break;
 8010f1c:	e038      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8010f1e:	7afb      	ldrb	r3, [r7, #11]
 8010f20:	687a      	ldr	r2, [r7, #4]
 8010f22:	4619      	mov	r1, r3
 8010f24:	68f8      	ldr	r0, [r7, #12]
 8010f26:	f000 fc27 	bl	8011778 <SCSI_Read10>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	75fb      	strb	r3, [r7, #23]
      break;
 8010f2e:	e02f      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8010f30:	7afb      	ldrb	r3, [r7, #11]
 8010f32:	687a      	ldr	r2, [r7, #4]
 8010f34:	4619      	mov	r1, r3
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	f000 fcbe 	bl	80118b8 <SCSI_Read12>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	75fb      	strb	r3, [r7, #23]
      break;
 8010f40:	e026      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8010f42:	7afb      	ldrb	r3, [r7, #11]
 8010f44:	687a      	ldr	r2, [r7, #4]
 8010f46:	4619      	mov	r1, r3
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	f000 fd60 	bl	8011a0e <SCSI_Write10>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	75fb      	strb	r3, [r7, #23]
      break;
 8010f52:	e01d      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8010f54:	7afb      	ldrb	r3, [r7, #11]
 8010f56:	687a      	ldr	r2, [r7, #4]
 8010f58:	4619      	mov	r1, r3
 8010f5a:	68f8      	ldr	r0, [r7, #12]
 8010f5c:	f000 fe1c 	bl	8011b98 <SCSI_Write12>
 8010f60:	4603      	mov	r3, r0
 8010f62:	75fb      	strb	r3, [r7, #23]
      break;
 8010f64:	e014      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8010f66:	7afb      	ldrb	r3, [r7, #11]
 8010f68:	687a      	ldr	r2, [r7, #4]
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f000 fee8 	bl	8011d42 <SCSI_Verify10>
 8010f72:	4603      	mov	r3, r0
 8010f74:	75fb      	strb	r3, [r7, #23]
      break;
 8010f76:	e00b      	b.n	8010f90 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8010f78:	7af9      	ldrb	r1, [r7, #11]
 8010f7a:	2320      	movs	r3, #32
 8010f7c:	2205      	movs	r2, #5
 8010f7e:	68f8      	ldr	r0, [r7, #12]
 8010f80:	f000 fb39 	bl	80115f6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8010f84:	693b      	ldr	r3, [r7, #16]
 8010f86:	2202      	movs	r2, #2
 8010f88:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8010f8a:	23ff      	movs	r3, #255	; 0xff
 8010f8c:	75fb      	strb	r3, [r7, #23]
      break;
 8010f8e:	bf00      	nop
  }

  return ret;
 8010f90:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3718      	adds	r7, #24
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	bd80      	pop	{r7, pc}

08010f9c <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b086      	sub	sp, #24
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	60f8      	str	r0, [r7, #12]
 8010fa4:	460b      	mov	r3, r1
 8010fa6:	607a      	str	r2, [r7, #4]
 8010fa8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010fb0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8010fb2:	697b      	ldr	r3, [r7, #20]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d102      	bne.n	8010fbe <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8010fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fbc:	e03a      	b.n	8011034 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8010fbe:	697b      	ldr	r3, [r7, #20]
 8010fc0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00a      	beq.n	8010fde <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8010fce:	2320      	movs	r3, #32
 8010fd0:	2205      	movs	r2, #5
 8010fd2:	68f8      	ldr	r0, [r7, #12]
 8010fd4:	f000 fb0f 	bl	80115f6 <SCSI_SenseCode>

    return -1;
 8010fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8010fdc:	e02a      	b.n	8011034 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8010fde:	697b      	ldr	r3, [r7, #20]
 8010fe0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8010fe4:	2b02      	cmp	r3, #2
 8010fe6:	d10b      	bne.n	8011000 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8010fe8:	7af9      	ldrb	r1, [r7, #11]
 8010fea:	233a      	movs	r3, #58	; 0x3a
 8010fec:	2202      	movs	r2, #2
 8010fee:	68f8      	ldr	r0, [r7, #12]
 8010ff0:	f000 fb01 	bl	80115f6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8010ff4:	697b      	ldr	r3, [r7, #20]
 8010ff6:	2205      	movs	r2, #5
 8010ff8:	721a      	strb	r2, [r3, #8]
    return -1;
 8010ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8010ffe:	e019      	b.n	8011034 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011006:	689b      	ldr	r3, [r3, #8]
 8011008:	7afa      	ldrb	r2, [r7, #11]
 801100a:	4610      	mov	r0, r2
 801100c:	4798      	blx	r3
 801100e:	4603      	mov	r3, r0
 8011010:	2b00      	cmp	r3, #0
 8011012:	d00b      	beq.n	801102c <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011014:	7af9      	ldrb	r1, [r7, #11]
 8011016:	233a      	movs	r3, #58	; 0x3a
 8011018:	2202      	movs	r2, #2
 801101a:	68f8      	ldr	r0, [r7, #12]
 801101c:	f000 faeb 	bl	80115f6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	2205      	movs	r2, #5
 8011024:	721a      	strb	r2, [r3, #8]

    return -1;
 8011026:	f04f 33ff 	mov.w	r3, #4294967295
 801102a:	e003      	b.n	8011034 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	2200      	movs	r2, #0
 8011030:	60da      	str	r2, [r3, #12]

  return 0;
 8011032:	2300      	movs	r3, #0
}
 8011034:	4618      	mov	r0, r3
 8011036:	3718      	adds	r7, #24
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801103c:	b580      	push	{r7, lr}
 801103e:	b088      	sub	sp, #32
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	460b      	mov	r3, r1
 8011046:	607a      	str	r2, [r7, #4]
 8011048:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011050:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011052:	69bb      	ldr	r3, [r7, #24]
 8011054:	2b00      	cmp	r3, #0
 8011056:	d102      	bne.n	801105e <SCSI_Inquiry+0x22>
  {
    return -1;
 8011058:	f04f 33ff 	mov.w	r3, #4294967295
 801105c:	e05a      	b.n	8011114 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801105e:	69bb      	ldr	r3, [r7, #24]
 8011060:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011064:	2b00      	cmp	r3, #0
 8011066:	d10a      	bne.n	801107e <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011068:	69bb      	ldr	r3, [r7, #24]
 801106a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801106e:	2320      	movs	r3, #32
 8011070:	2205      	movs	r2, #5
 8011072:	68f8      	ldr	r0, [r7, #12]
 8011074:	f000 fabf 	bl	80115f6 <SCSI_SenseCode>
    return -1;
 8011078:	f04f 33ff 	mov.w	r3, #4294967295
 801107c:	e04a      	b.n	8011114 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	3301      	adds	r3, #1
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	f003 0301 	and.w	r3, r3, #1
 8011088:	2b00      	cmp	r3, #0
 801108a:	d020      	beq.n	80110ce <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	3302      	adds	r3, #2
 8011090:	781b      	ldrb	r3, [r3, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d105      	bne.n	80110a2 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8011096:	2206      	movs	r2, #6
 8011098:	4920      	ldr	r1, [pc, #128]	; (801111c <SCSI_Inquiry+0xe0>)
 801109a:	69b8      	ldr	r0, [r7, #24]
 801109c:	f000 ffb4 	bl	8012008 <SCSI_UpdateBotData>
 80110a0:	e037      	b.n	8011112 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	3302      	adds	r3, #2
 80110a6:	781b      	ldrb	r3, [r3, #0]
 80110a8:	2b80      	cmp	r3, #128	; 0x80
 80110aa:	d105      	bne.n	80110b8 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80110ac:	2208      	movs	r2, #8
 80110ae:	491c      	ldr	r1, [pc, #112]	; (8011120 <SCSI_Inquiry+0xe4>)
 80110b0:	69b8      	ldr	r0, [r7, #24]
 80110b2:	f000 ffa9 	bl	8012008 <SCSI_UpdateBotData>
 80110b6:	e02c      	b.n	8011112 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80110b8:	69bb      	ldr	r3, [r7, #24]
 80110ba:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80110be:	2324      	movs	r3, #36	; 0x24
 80110c0:	2205      	movs	r2, #5
 80110c2:	68f8      	ldr	r0, [r7, #12]
 80110c4:	f000 fa97 	bl	80115f6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 80110c8:	f04f 33ff 	mov.w	r3, #4294967295
 80110cc:	e022      	b.n	8011114 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80110d4:	69d9      	ldr	r1, [r3, #28]
 80110d6:	7afa      	ldrb	r2, [r7, #11]
 80110d8:	4613      	mov	r3, r2
 80110da:	00db      	lsls	r3, r3, #3
 80110dc:	4413      	add	r3, r2
 80110de:	009b      	lsls	r3, r3, #2
 80110e0:	440b      	add	r3, r1
 80110e2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	3304      	adds	r3, #4
 80110e8:	781b      	ldrb	r3, [r3, #0]
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	3305      	adds	r3, #5
 80110ee:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	3304      	adds	r3, #4
 80110f4:	781b      	ldrb	r3, [r3, #0]
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	8bfa      	ldrh	r2, [r7, #30]
 80110fa:	429a      	cmp	r2, r3
 80110fc:	d303      	bcc.n	8011106 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	3304      	adds	r3, #4
 8011102:	781b      	ldrb	r3, [r3, #0]
 8011104:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8011106:	8bfb      	ldrh	r3, [r7, #30]
 8011108:	461a      	mov	r2, r3
 801110a:	6979      	ldr	r1, [r7, #20]
 801110c:	69b8      	ldr	r0, [r7, #24]
 801110e:	f000 ff7b 	bl	8012008 <SCSI_UpdateBotData>
  }

  return 0;
 8011112:	2300      	movs	r3, #0
}
 8011114:	4618      	mov	r0, r3
 8011116:	3720      	adds	r7, #32
 8011118:	46bd      	mov	sp, r7
 801111a:	bd80      	pop	{r7, pc}
 801111c:	200000b0 	.word	0x200000b0
 8011120:	200000b8 	.word	0x200000b8

08011124 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011124:	b580      	push	{r7, lr}
 8011126:	b086      	sub	sp, #24
 8011128:	af00      	add	r7, sp, #0
 801112a:	60f8      	str	r0, [r7, #12]
 801112c:	460b      	mov	r3, r1
 801112e:	607a      	str	r2, [r7, #4]
 8011130:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011138:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801113a:	697b      	ldr	r3, [r7, #20]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d102      	bne.n	8011146 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8011140:	f04f 33ff 	mov.w	r3, #4294967295
 8011144:	e05f      	b.n	8011206 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	697a      	ldr	r2, [r7, #20]
 8011150:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8011154:	697a      	ldr	r2, [r7, #20]
 8011156:	f502 7219 	add.w	r2, r2, #612	; 0x264
 801115a:	7af8      	ldrb	r0, [r7, #11]
 801115c:	4798      	blx	r3
 801115e:	4603      	mov	r3, r0
 8011160:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8011162:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d104      	bne.n	8011174 <SCSI_ReadCapacity10+0x50>
 801116a:	697b      	ldr	r3, [r7, #20]
 801116c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8011170:	2b02      	cmp	r3, #2
 8011172:	d108      	bne.n	8011186 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011174:	7af9      	ldrb	r1, [r7, #11]
 8011176:	233a      	movs	r3, #58	; 0x3a
 8011178:	2202      	movs	r2, #2
 801117a:	68f8      	ldr	r0, [r7, #12]
 801117c:	f000 fa3b 	bl	80115f6 <SCSI_SenseCode>
    return -1;
 8011180:	f04f 33ff 	mov.w	r3, #4294967295
 8011184:	e03f      	b.n	8011206 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8011186:	697b      	ldr	r3, [r7, #20]
 8011188:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801118c:	3b01      	subs	r3, #1
 801118e:	0e1b      	lsrs	r3, r3, #24
 8011190:	b2da      	uxtb	r2, r3
 8011192:	697b      	ldr	r3, [r7, #20]
 8011194:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8011196:	697b      	ldr	r3, [r7, #20]
 8011198:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 801119c:	3b01      	subs	r3, #1
 801119e:	0c1b      	lsrs	r3, r3, #16
 80111a0:	b2da      	uxtb	r2, r3
 80111a2:	697b      	ldr	r3, [r7, #20]
 80111a4:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80111ac:	3b01      	subs	r3, #1
 80111ae:	0a1b      	lsrs	r3, r3, #8
 80111b0:	b2da      	uxtb	r2, r3
 80111b2:	697b      	ldr	r3, [r7, #20]
 80111b4:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80111bc:	b2db      	uxtb	r3, r3
 80111be:	3b01      	subs	r3, #1
 80111c0:	b2da      	uxtb	r2, r3
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111cc:	161b      	asrs	r3, r3, #24
 80111ce:	b2da      	uxtb	r2, r3
 80111d0:	697b      	ldr	r3, [r7, #20]
 80111d2:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80111d4:	697b      	ldr	r3, [r7, #20]
 80111d6:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111da:	141b      	asrs	r3, r3, #16
 80111dc:	b2da      	uxtb	r2, r3
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80111e2:	697b      	ldr	r3, [r7, #20]
 80111e4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111e8:	0a1b      	lsrs	r3, r3, #8
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	b2da      	uxtb	r2, r3
 80111ee:	697b      	ldr	r3, [r7, #20]
 80111f0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80111f2:	697b      	ldr	r3, [r7, #20]
 80111f4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80111f8:	b2da      	uxtb	r2, r3
 80111fa:	697b      	ldr	r3, [r7, #20]
 80111fc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	2208      	movs	r2, #8
 8011202:	60da      	str	r2, [r3, #12]

  return 0;
 8011204:	2300      	movs	r3, #0

}
 8011206:	4618      	mov	r0, r3
 8011208:	3718      	adds	r7, #24
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}

0801120e <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801120e:	b580      	push	{r7, lr}
 8011210:	b088      	sub	sp, #32
 8011212:	af00      	add	r7, sp, #0
 8011214:	60f8      	str	r0, [r7, #12]
 8011216:	460b      	mov	r3, r1
 8011218:	607a      	str	r2, [r7, #4]
 801121a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011222:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011224:	69bb      	ldr	r3, [r7, #24]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d102      	bne.n	8011230 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 801122a:	f04f 33ff 	mov.w	r3, #4294967295
 801122e:	e094      	b.n	801135a <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011236:	685b      	ldr	r3, [r3, #4]
 8011238:	69ba      	ldr	r2, [r7, #24]
 801123a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 801123e:	69ba      	ldr	r2, [r7, #24]
 8011240:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8011244:	7af8      	ldrb	r0, [r7, #11]
 8011246:	4798      	blx	r3
 8011248:	4603      	mov	r3, r0
 801124a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801124c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d104      	bne.n	801125e <SCSI_ReadCapacity16+0x50>
 8011254:	69bb      	ldr	r3, [r7, #24]
 8011256:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801125a:	2b02      	cmp	r3, #2
 801125c:	d108      	bne.n	8011270 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801125e:	7af9      	ldrb	r1, [r7, #11]
 8011260:	233a      	movs	r3, #58	; 0x3a
 8011262:	2202      	movs	r2, #2
 8011264:	68f8      	ldr	r0, [r7, #12]
 8011266:	f000 f9c6 	bl	80115f6 <SCSI_SenseCode>
    return -1;
 801126a:	f04f 33ff 	mov.w	r3, #4294967295
 801126e:	e074      	b.n	801135a <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	330a      	adds	r3, #10
 8011274:	781b      	ldrb	r3, [r3, #0]
 8011276:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	330b      	adds	r3, #11
 801127c:	781b      	ldrb	r3, [r3, #0]
 801127e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011280:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	330c      	adds	r3, #12
 8011286:	781b      	ldrb	r3, [r3, #0]
 8011288:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801128a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801128c:	687a      	ldr	r2, [r7, #4]
 801128e:	320d      	adds	r2, #13
 8011290:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8011292:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011294:	69bb      	ldr	r3, [r7, #24]
 8011296:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8011298:	2300      	movs	r3, #0
 801129a:	77fb      	strb	r3, [r7, #31]
 801129c:	e007      	b.n	80112ae <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 801129e:	7ffb      	ldrb	r3, [r7, #31]
 80112a0:	69ba      	ldr	r2, [r7, #24]
 80112a2:	4413      	add	r3, r2
 80112a4:	2200      	movs	r2, #0
 80112a6:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80112a8:	7ffb      	ldrb	r3, [r7, #31]
 80112aa:	3301      	adds	r3, #1
 80112ac:	77fb      	strb	r3, [r7, #31]
 80112ae:	7ffa      	ldrb	r2, [r7, #31]
 80112b0:	69bb      	ldr	r3, [r7, #24]
 80112b2:	68db      	ldr	r3, [r3, #12]
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d3f2      	bcc.n	801129e <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80112b8:	69bb      	ldr	r3, [r7, #24]
 80112ba:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80112be:	3b01      	subs	r3, #1
 80112c0:	0e1b      	lsrs	r3, r3, #24
 80112c2:	b2da      	uxtb	r2, r3
 80112c4:	69bb      	ldr	r3, [r7, #24]
 80112c6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80112c8:	69bb      	ldr	r3, [r7, #24]
 80112ca:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80112ce:	3b01      	subs	r3, #1
 80112d0:	0c1b      	lsrs	r3, r3, #16
 80112d2:	b2da      	uxtb	r2, r3
 80112d4:	69bb      	ldr	r3, [r7, #24]
 80112d6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80112de:	3b01      	subs	r3, #1
 80112e0:	0a1b      	lsrs	r3, r3, #8
 80112e2:	b2da      	uxtb	r2, r3
 80112e4:	69bb      	ldr	r3, [r7, #24]
 80112e6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80112e8:	69bb      	ldr	r3, [r7, #24]
 80112ea:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80112ee:	b2db      	uxtb	r3, r3
 80112f0:	3b01      	subs	r3, #1
 80112f2:	b2da      	uxtb	r2, r3
 80112f4:	69bb      	ldr	r3, [r7, #24]
 80112f6:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80112f8:	69bb      	ldr	r3, [r7, #24]
 80112fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80112fe:	161b      	asrs	r3, r3, #24
 8011300:	b2da      	uxtb	r2, r3
 8011302:	69bb      	ldr	r3, [r7, #24]
 8011304:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8011306:	69bb      	ldr	r3, [r7, #24]
 8011308:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801130c:	141b      	asrs	r3, r3, #16
 801130e:	b2da      	uxtb	r2, r3
 8011310:	69bb      	ldr	r3, [r7, #24]
 8011312:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8011314:	69bb      	ldr	r3, [r7, #24]
 8011316:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801131a:	0a1b      	lsrs	r3, r3, #8
 801131c:	b29b      	uxth	r3, r3
 801131e:	b2da      	uxtb	r2, r3
 8011320:	69bb      	ldr	r3, [r7, #24]
 8011322:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8011324:	69bb      	ldr	r3, [r7, #24]
 8011326:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801132a:	b2da      	uxtb	r2, r3
 801132c:	69bb      	ldr	r3, [r7, #24]
 801132e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	330a      	adds	r3, #10
 8011334:	781b      	ldrb	r3, [r3, #0]
 8011336:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	330b      	adds	r3, #11
 801133c:	781b      	ldrb	r3, [r3, #0]
 801133e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011340:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	330c      	adds	r3, #12
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 801134a:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 801134c:	687a      	ldr	r2, [r7, #4]
 801134e:	320d      	adds	r2, #13
 8011350:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8011352:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8011354:	69bb      	ldr	r3, [r7, #24]
 8011356:	60da      	str	r2, [r3, #12]

  return 0;
 8011358:	2300      	movs	r3, #0
}
 801135a:	4618      	mov	r0, r3
 801135c:	3720      	adds	r7, #32
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}

08011362 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011362:	b580      	push	{r7, lr}
 8011364:	b088      	sub	sp, #32
 8011366:	af00      	add	r7, sp, #0
 8011368:	60f8      	str	r0, [r7, #12]
 801136a:	460b      	mov	r3, r1
 801136c:	607a      	str	r2, [r7, #4]
 801136e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011370:	68fb      	ldr	r3, [r7, #12]
 8011372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011376:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8011378:	69bb      	ldr	r3, [r7, #24]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d102      	bne.n	8011384 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 801137e:	f04f 33ff 	mov.w	r3, #4294967295
 8011382:	e05c      	b.n	801143e <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801138a:	685b      	ldr	r3, [r3, #4]
 801138c:	f107 0214 	add.w	r2, r7, #20
 8011390:	f107 0110 	add.w	r1, r7, #16
 8011394:	7af8      	ldrb	r0, [r7, #11]
 8011396:	4798      	blx	r3
 8011398:	4603      	mov	r3, r0
 801139a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 801139c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d104      	bne.n	80113ae <SCSI_ReadFormatCapacity+0x4c>
 80113a4:	69bb      	ldr	r3, [r7, #24]
 80113a6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80113aa:	2b02      	cmp	r3, #2
 80113ac:	d108      	bne.n	80113c0 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80113ae:	7af9      	ldrb	r1, [r7, #11]
 80113b0:	233a      	movs	r3, #58	; 0x3a
 80113b2:	2202      	movs	r2, #2
 80113b4:	68f8      	ldr	r0, [r7, #12]
 80113b6:	f000 f91e 	bl	80115f6 <SCSI_SenseCode>
    return -1;
 80113ba:	f04f 33ff 	mov.w	r3, #4294967295
 80113be:	e03e      	b.n	801143e <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80113c0:	2300      	movs	r3, #0
 80113c2:	83fb      	strh	r3, [r7, #30]
 80113c4:	e007      	b.n	80113d6 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80113c6:	8bfb      	ldrh	r3, [r7, #30]
 80113c8:	69ba      	ldr	r2, [r7, #24]
 80113ca:	4413      	add	r3, r2
 80113cc:	2200      	movs	r2, #0
 80113ce:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80113d0:	8bfb      	ldrh	r3, [r7, #30]
 80113d2:	3301      	adds	r3, #1
 80113d4:	83fb      	strh	r3, [r7, #30]
 80113d6:	8bfb      	ldrh	r3, [r7, #30]
 80113d8:	2b0b      	cmp	r3, #11
 80113da:	d9f4      	bls.n	80113c6 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80113dc:	69bb      	ldr	r3, [r7, #24]
 80113de:	2208      	movs	r2, #8
 80113e0:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80113e2:	693b      	ldr	r3, [r7, #16]
 80113e4:	3b01      	subs	r3, #1
 80113e6:	0e1b      	lsrs	r3, r3, #24
 80113e8:	b2da      	uxtb	r2, r3
 80113ea:	69bb      	ldr	r3, [r7, #24]
 80113ec:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	0c1b      	lsrs	r3, r3, #16
 80113f4:	b2da      	uxtb	r2, r3
 80113f6:	69bb      	ldr	r3, [r7, #24]
 80113f8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	3b01      	subs	r3, #1
 80113fe:	0a1b      	lsrs	r3, r3, #8
 8011400:	b2da      	uxtb	r2, r3
 8011402:	69bb      	ldr	r3, [r7, #24]
 8011404:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	b2db      	uxtb	r3, r3
 801140a:	3b01      	subs	r3, #1
 801140c:	b2da      	uxtb	r2, r3
 801140e:	69bb      	ldr	r3, [r7, #24]
 8011410:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8011412:	69bb      	ldr	r3, [r7, #24]
 8011414:	2202      	movs	r2, #2
 8011416:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8011418:	8abb      	ldrh	r3, [r7, #20]
 801141a:	141b      	asrs	r3, r3, #16
 801141c:	b2da      	uxtb	r2, r3
 801141e:	69bb      	ldr	r3, [r7, #24]
 8011420:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8011422:	8abb      	ldrh	r3, [r7, #20]
 8011424:	0a1b      	lsrs	r3, r3, #8
 8011426:	b29b      	uxth	r3, r3
 8011428:	b2da      	uxtb	r2, r3
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 801142e:	8abb      	ldrh	r3, [r7, #20]
 8011430:	b2da      	uxtb	r2, r3
 8011432:	69bb      	ldr	r3, [r7, #24]
 8011434:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8011436:	69bb      	ldr	r3, [r7, #24]
 8011438:	220c      	movs	r2, #12
 801143a:	60da      	str	r2, [r3, #12]

  return 0;
 801143c:	2300      	movs	r3, #0
}
 801143e:	4618      	mov	r0, r3
 8011440:	3720      	adds	r7, #32
 8011442:	46bd      	mov	sp, r7
 8011444:	bd80      	pop	{r7, pc}
	...

08011448 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b086      	sub	sp, #24
 801144c:	af00      	add	r7, sp, #0
 801144e:	60f8      	str	r0, [r7, #12]
 8011450:	460b      	mov	r3, r1
 8011452:	607a      	str	r2, [r7, #4]
 8011454:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801145c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 801145e:	2317      	movs	r3, #23
 8011460:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8011462:	693b      	ldr	r3, [r7, #16]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d102      	bne.n	801146e <SCSI_ModeSense6+0x26>
  {
    return -1;
 8011468:	f04f 33ff 	mov.w	r3, #4294967295
 801146c:	e011      	b.n	8011492 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	3304      	adds	r3, #4
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	b29b      	uxth	r3, r3
 8011476:	8afa      	ldrh	r2, [r7, #22]
 8011478:	429a      	cmp	r2, r3
 801147a:	d303      	bcc.n	8011484 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	3304      	adds	r3, #4
 8011480:	781b      	ldrb	r3, [r3, #0]
 8011482:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8011484:	8afb      	ldrh	r3, [r7, #22]
 8011486:	461a      	mov	r2, r3
 8011488:	4904      	ldr	r1, [pc, #16]	; (801149c <SCSI_ModeSense6+0x54>)
 801148a:	6938      	ldr	r0, [r7, #16]
 801148c:	f000 fdbc 	bl	8012008 <SCSI_UpdateBotData>

  return 0;
 8011490:	2300      	movs	r3, #0
}
 8011492:	4618      	mov	r0, r3
 8011494:	3718      	adds	r7, #24
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	200000c0 	.word	0x200000c0

080114a0 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80114a0:	b580      	push	{r7, lr}
 80114a2:	b086      	sub	sp, #24
 80114a4:	af00      	add	r7, sp, #0
 80114a6:	60f8      	str	r0, [r7, #12]
 80114a8:	460b      	mov	r3, r1
 80114aa:	607a      	str	r2, [r7, #4]
 80114ac:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80114b4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80114b6:	231b      	movs	r3, #27
 80114b8:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80114ba:	693b      	ldr	r3, [r7, #16]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d102      	bne.n	80114c6 <SCSI_ModeSense10+0x26>
  {
    return -1;
 80114c0:	f04f 33ff 	mov.w	r3, #4294967295
 80114c4:	e011      	b.n	80114ea <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	3308      	adds	r3, #8
 80114ca:	781b      	ldrb	r3, [r3, #0]
 80114cc:	b29b      	uxth	r3, r3
 80114ce:	8afa      	ldrh	r2, [r7, #22]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d303      	bcc.n	80114dc <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	3308      	adds	r3, #8
 80114d8:	781b      	ldrb	r3, [r3, #0]
 80114da:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80114dc:	8afb      	ldrh	r3, [r7, #22]
 80114de:	461a      	mov	r2, r3
 80114e0:	4904      	ldr	r1, [pc, #16]	; (80114f4 <SCSI_ModeSense10+0x54>)
 80114e2:	6938      	ldr	r0, [r7, #16]
 80114e4:	f000 fd90 	bl	8012008 <SCSI_UpdateBotData>

  return 0;
 80114e8:	2300      	movs	r3, #0
}
 80114ea:	4618      	mov	r0, r3
 80114ec:	3718      	adds	r7, #24
 80114ee:	46bd      	mov	sp, r7
 80114f0:	bd80      	pop	{r7, pc}
 80114f2:	bf00      	nop
 80114f4:	200000d8 	.word	0x200000d8

080114f8 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80114f8:	b580      	push	{r7, lr}
 80114fa:	b086      	sub	sp, #24
 80114fc:	af00      	add	r7, sp, #0
 80114fe:	60f8      	str	r0, [r7, #12]
 8011500:	460b      	mov	r3, r1
 8011502:	607a      	str	r2, [r7, #4]
 8011504:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801150c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 801150e:	693b      	ldr	r3, [r7, #16]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d102      	bne.n	801151a <SCSI_RequestSense+0x22>
  {
    return -1;
 8011514:	f04f 33ff 	mov.w	r3, #4294967295
 8011518:	e069      	b.n	80115ee <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011520:	2b00      	cmp	r3, #0
 8011522:	d10a      	bne.n	801153a <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011524:	693b      	ldr	r3, [r7, #16]
 8011526:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801152a:	2320      	movs	r3, #32
 801152c:	2205      	movs	r2, #5
 801152e:	68f8      	ldr	r0, [r7, #12]
 8011530:	f000 f861 	bl	80115f6 <SCSI_SenseCode>
    return -1;
 8011534:	f04f 33ff 	mov.w	r3, #4294967295
 8011538:	e059      	b.n	80115ee <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801153a:	2300      	movs	r3, #0
 801153c:	75fb      	strb	r3, [r7, #23]
 801153e:	e007      	b.n	8011550 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8011540:	7dfb      	ldrb	r3, [r7, #23]
 8011542:	693a      	ldr	r2, [r7, #16]
 8011544:	4413      	add	r3, r2
 8011546:	2200      	movs	r2, #0
 8011548:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801154a:	7dfb      	ldrb	r3, [r7, #23]
 801154c:	3301      	adds	r3, #1
 801154e:	75fb      	strb	r3, [r7, #23]
 8011550:	7dfb      	ldrb	r3, [r7, #23]
 8011552:	2b11      	cmp	r3, #17
 8011554:	d9f4      	bls.n	8011540 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	2270      	movs	r2, #112	; 0x70
 801155a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 801155c:	693b      	ldr	r3, [r7, #16]
 801155e:	220c      	movs	r2, #12
 8011560:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8011562:	693b      	ldr	r3, [r7, #16]
 8011564:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8011568:	693b      	ldr	r3, [r7, #16]
 801156a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801156e:	429a      	cmp	r2, r3
 8011570:	d02e      	beq.n	80115d0 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8011572:	693b      	ldr	r3, [r7, #16]
 8011574:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8011578:	461a      	mov	r2, r3
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	3248      	adds	r2, #72	; 0x48
 801157e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8011582:	693b      	ldr	r3, [r7, #16]
 8011584:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 801158c:	693a      	ldr	r2, [r7, #16]
 801158e:	3348      	adds	r3, #72	; 0x48
 8011590:	00db      	lsls	r3, r3, #3
 8011592:	4413      	add	r3, r2
 8011594:	791a      	ldrb	r2, [r3, #4]
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80115a0:	693a      	ldr	r2, [r7, #16]
 80115a2:	3348      	adds	r3, #72	; 0x48
 80115a4:	00db      	lsls	r3, r3, #3
 80115a6:	4413      	add	r3, r2
 80115a8:	795a      	ldrb	r2, [r3, #5]
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80115ae:	693b      	ldr	r3, [r7, #16]
 80115b0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80115b4:	3301      	adds	r3, #1
 80115b6:	b2da      	uxtb	r2, r3
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80115c4:	2b04      	cmp	r3, #4
 80115c6:	d103      	bne.n	80115d0 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80115c8:	693b      	ldr	r3, [r7, #16]
 80115ca:	2200      	movs	r2, #0
 80115cc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80115d0:	693b      	ldr	r3, [r7, #16]
 80115d2:	2212      	movs	r2, #18
 80115d4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	3304      	adds	r3, #4
 80115da:	781b      	ldrb	r3, [r3, #0]
 80115dc:	2b12      	cmp	r3, #18
 80115de:	d805      	bhi.n	80115ec <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	3304      	adds	r3, #4
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	461a      	mov	r2, r3
 80115e8:	693b      	ldr	r3, [r7, #16]
 80115ea:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80115ec:	2300      	movs	r3, #0
}
 80115ee:	4618      	mov	r0, r3
 80115f0:	3718      	adds	r7, #24
 80115f2:	46bd      	mov	sp, r7
 80115f4:	bd80      	pop	{r7, pc}

080115f6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80115f6:	b480      	push	{r7}
 80115f8:	b085      	sub	sp, #20
 80115fa:	af00      	add	r7, sp, #0
 80115fc:	6078      	str	r0, [r7, #4]
 80115fe:	4608      	mov	r0, r1
 8011600:	4611      	mov	r1, r2
 8011602:	461a      	mov	r2, r3
 8011604:	4603      	mov	r3, r0
 8011606:	70fb      	strb	r3, [r7, #3]
 8011608:	460b      	mov	r3, r1
 801160a:	70bb      	strb	r3, [r7, #2]
 801160c:	4613      	mov	r3, r2
 801160e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011616:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d02c      	beq.n	8011678 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011624:	461a      	mov	r2, r3
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	3248      	adds	r2, #72	; 0x48
 801162a:	78b9      	ldrb	r1, [r7, #2]
 801162c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011636:	68fa      	ldr	r2, [r7, #12]
 8011638:	3348      	adds	r3, #72	; 0x48
 801163a:	00db      	lsls	r3, r3, #3
 801163c:	4413      	add	r3, r2
 801163e:	787a      	ldrb	r2, [r7, #1]
 8011640:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8011648:	68fa      	ldr	r2, [r7, #12]
 801164a:	3348      	adds	r3, #72	; 0x48
 801164c:	00db      	lsls	r3, r3, #3
 801164e:	4413      	add	r3, r2
 8011650:	2200      	movs	r2, #0
 8011652:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801165a:	3301      	adds	r3, #1
 801165c:	b2da      	uxtb	r2, r3
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8011664:	68fb      	ldr	r3, [r7, #12]
 8011666:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 801166a:	2b04      	cmp	r3, #4
 801166c:	d105      	bne.n	801167a <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2200      	movs	r2, #0
 8011672:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8011676:	e000      	b.n	801167a <SCSI_SenseCode+0x84>
    return;
 8011678:	bf00      	nop
  }
}
 801167a:	3714      	adds	r7, #20
 801167c:	46bd      	mov	sp, r7
 801167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011682:	4770      	bx	lr

08011684 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011684:	b580      	push	{r7, lr}
 8011686:	b086      	sub	sp, #24
 8011688:	af00      	add	r7, sp, #0
 801168a:	60f8      	str	r0, [r7, #12]
 801168c:	460b      	mov	r3, r1
 801168e:	607a      	str	r2, [r7, #4]
 8011690:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011698:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801169a:	697b      	ldr	r3, [r7, #20]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d102      	bne.n	80116a6 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80116a0:	f04f 33ff 	mov.w	r3, #4294967295
 80116a4:	e03b      	b.n	801171e <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80116a6:	697b      	ldr	r3, [r7, #20]
 80116a8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80116ac:	2b01      	cmp	r3, #1
 80116ae:	d10f      	bne.n	80116d0 <SCSI_StartStopUnit+0x4c>
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	3304      	adds	r3, #4
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	f003 0303 	and.w	r3, r3, #3
 80116ba:	2b02      	cmp	r3, #2
 80116bc:	d108      	bne.n	80116d0 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80116be:	7af9      	ldrb	r1, [r7, #11]
 80116c0:	2324      	movs	r3, #36	; 0x24
 80116c2:	2205      	movs	r2, #5
 80116c4:	68f8      	ldr	r0, [r7, #12]
 80116c6:	f7ff ff96 	bl	80115f6 <SCSI_SenseCode>

    return -1;
 80116ca:	f04f 33ff 	mov.w	r3, #4294967295
 80116ce:	e026      	b.n	801171e <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	3304      	adds	r3, #4
 80116d4:	781b      	ldrb	r3, [r3, #0]
 80116d6:	f003 0303 	and.w	r3, r3, #3
 80116da:	2b01      	cmp	r3, #1
 80116dc:	d104      	bne.n	80116e8 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80116de:	697b      	ldr	r3, [r7, #20]
 80116e0:	2200      	movs	r2, #0
 80116e2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80116e6:	e016      	b.n	8011716 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	3304      	adds	r3, #4
 80116ec:	781b      	ldrb	r3, [r3, #0]
 80116ee:	f003 0303 	and.w	r3, r3, #3
 80116f2:	2b02      	cmp	r3, #2
 80116f4:	d104      	bne.n	8011700 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80116f6:	697b      	ldr	r3, [r7, #20]
 80116f8:	2202      	movs	r2, #2
 80116fa:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80116fe:	e00a      	b.n	8011716 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	3304      	adds	r3, #4
 8011704:	781b      	ldrb	r3, [r3, #0]
 8011706:	f003 0303 	and.w	r3, r3, #3
 801170a:	2b03      	cmp	r3, #3
 801170c:	d103      	bne.n	8011716 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801170e:	697b      	ldr	r3, [r7, #20]
 8011710:	2200      	movs	r2, #0
 8011712:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	2200      	movs	r2, #0
 801171a:	60da      	str	r2, [r3, #12]

  return 0;
 801171c:	2300      	movs	r3, #0
}
 801171e:	4618      	mov	r0, r3
 8011720:	3718      	adds	r7, #24
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}

08011726 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011726:	b480      	push	{r7}
 8011728:	b087      	sub	sp, #28
 801172a:	af00      	add	r7, sp, #0
 801172c:	60f8      	str	r0, [r7, #12]
 801172e:	460b      	mov	r3, r1
 8011730:	607a      	str	r2, [r7, #4]
 8011732:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801173a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d102      	bne.n	8011748 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 8011742:	f04f 33ff 	mov.w	r3, #4294967295
 8011746:	e011      	b.n	801176c <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	3304      	adds	r3, #4
 801174c:	781b      	ldrb	r3, [r3, #0]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d104      	bne.n	801175c <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	2200      	movs	r2, #0
 8011756:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801175a:	e003      	b.n	8011764 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	2201      	movs	r2, #1
 8011760:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	2200      	movs	r2, #0
 8011768:	60da      	str	r2, [r3, #12]

  return 0;
 801176a:	2300      	movs	r3, #0
}
 801176c:	4618      	mov	r0, r3
 801176e:	371c      	adds	r7, #28
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr

08011778 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b086      	sub	sp, #24
 801177c:	af00      	add	r7, sp, #0
 801177e:	60f8      	str	r0, [r7, #12]
 8011780:	460b      	mov	r3, r1
 8011782:	607a      	str	r2, [r7, #4]
 8011784:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801178c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801178e:	697b      	ldr	r3, [r7, #20]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d102      	bne.n	801179a <SCSI_Read10+0x22>
  {
    return -1;
 8011794:	f04f 33ff 	mov.w	r3, #4294967295
 8011798:	e08a      	b.n	80118b0 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801179a:	697b      	ldr	r3, [r7, #20]
 801179c:	7a1b      	ldrb	r3, [r3, #8]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d17c      	bne.n	801189c <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80117a2:	697b      	ldr	r3, [r7, #20]
 80117a4:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80117a8:	b25b      	sxtb	r3, r3
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	db0a      	blt.n	80117c4 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80117ae:	697b      	ldr	r3, [r7, #20]
 80117b0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80117b4:	2320      	movs	r3, #32
 80117b6:	2205      	movs	r2, #5
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f7ff ff1c 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 80117be:	f04f 33ff 	mov.w	r3, #4294967295
 80117c2:	e075      	b.n	80118b0 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80117c4:	697b      	ldr	r3, [r7, #20]
 80117c6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80117ca:	2b02      	cmp	r3, #2
 80117cc:	d108      	bne.n	80117e0 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80117ce:	7af9      	ldrb	r1, [r7, #11]
 80117d0:	233a      	movs	r3, #58	; 0x3a
 80117d2:	2202      	movs	r2, #2
 80117d4:	68f8      	ldr	r0, [r7, #12]
 80117d6:	f7ff ff0e 	bl	80115f6 <SCSI_SenseCode>

      return -1;
 80117da:	f04f 33ff 	mov.w	r3, #4294967295
 80117de:	e067      	b.n	80118b0 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117e6:	689b      	ldr	r3, [r3, #8]
 80117e8:	7afa      	ldrb	r2, [r7, #11]
 80117ea:	4610      	mov	r0, r2
 80117ec:	4798      	blx	r3
 80117ee:	4603      	mov	r3, r0
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d008      	beq.n	8011806 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80117f4:	7af9      	ldrb	r1, [r7, #11]
 80117f6:	233a      	movs	r3, #58	; 0x3a
 80117f8:	2202      	movs	r2, #2
 80117fa:	68f8      	ldr	r0, [r7, #12]
 80117fc:	f7ff fefb 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011800:	f04f 33ff 	mov.w	r3, #4294967295
 8011804:	e054      	b.n	80118b0 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	3302      	adds	r3, #2
 801180a:	781b      	ldrb	r3, [r3, #0]
 801180c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	3303      	adds	r3, #3
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011816:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	3304      	adds	r3, #4
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011820:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011822:	687a      	ldr	r2, [r7, #4]
 8011824:	3205      	adds	r2, #5
 8011826:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8011828:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801182a:	697b      	ldr	r3, [r7, #20]
 801182c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	3307      	adds	r3, #7
 8011834:	781b      	ldrb	r3, [r3, #0]
 8011836:	021b      	lsls	r3, r3, #8
 8011838:	687a      	ldr	r2, [r7, #4]
 801183a:	3208      	adds	r2, #8
 801183c:	7812      	ldrb	r2, [r2, #0]
 801183e:	431a      	orrs	r2, r3
 8011840:	697b      	ldr	r3, [r7, #20]
 8011842:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801184c:	697b      	ldr	r3, [r7, #20]
 801184e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011852:	7af9      	ldrb	r1, [r7, #11]
 8011854:	68f8      	ldr	r0, [r7, #12]
 8011856:	f000 faad 	bl	8011db4 <SCSI_CheckAddressRange>
 801185a:	4603      	mov	r3, r0
 801185c:	2b00      	cmp	r3, #0
 801185e:	da02      	bge.n	8011866 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011860:	f04f 33ff 	mov.w	r3, #4294967295
 8011864:	e024      	b.n	80118b0 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 801186c:	697b      	ldr	r3, [r7, #20]
 801186e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011872:	6979      	ldr	r1, [r7, #20]
 8011874:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8011878:	fb01 f303 	mul.w	r3, r1, r3
 801187c:	429a      	cmp	r2, r3
 801187e:	d00a      	beq.n	8011896 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011880:	697b      	ldr	r3, [r7, #20]
 8011882:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011886:	2320      	movs	r3, #32
 8011888:	2205      	movs	r2, #5
 801188a:	68f8      	ldr	r0, [r7, #12]
 801188c:	f7ff feb3 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011890:	f04f 33ff 	mov.w	r3, #4294967295
 8011894:	e00c      	b.n	80118b0 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	2202      	movs	r2, #2
 801189a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801189c:	697b      	ldr	r3, [r7, #20]
 801189e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80118a2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80118a4:	7afb      	ldrb	r3, [r7, #11]
 80118a6:	4619      	mov	r1, r3
 80118a8:	68f8      	ldr	r0, [r7, #12]
 80118aa:	f000 faab 	bl	8011e04 <SCSI_ProcessRead>
 80118ae:	4603      	mov	r3, r0
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3718      	adds	r7, #24
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80118b8:	b580      	push	{r7, lr}
 80118ba:	b086      	sub	sp, #24
 80118bc:	af00      	add	r7, sp, #0
 80118be:	60f8      	str	r0, [r7, #12]
 80118c0:	460b      	mov	r3, r1
 80118c2:	607a      	str	r2, [r7, #4]
 80118c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118cc:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d102      	bne.n	80118da <SCSI_Read12+0x22>
  {
    return -1;
 80118d4:	f04f 33ff 	mov.w	r3, #4294967295
 80118d8:	e095      	b.n	8011a06 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	7a1b      	ldrb	r3, [r3, #8]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	f040 8087 	bne.w	80119f2 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80118ea:	b25b      	sxtb	r3, r3
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	db0a      	blt.n	8011906 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80118f6:	2320      	movs	r3, #32
 80118f8:	2205      	movs	r2, #5
 80118fa:	68f8      	ldr	r0, [r7, #12]
 80118fc:	f7ff fe7b 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011900:	f04f 33ff 	mov.w	r3, #4294967295
 8011904:	e07f      	b.n	8011a06 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8011906:	697b      	ldr	r3, [r7, #20]
 8011908:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 801190c:	2b02      	cmp	r3, #2
 801190e:	d108      	bne.n	8011922 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011910:	7af9      	ldrb	r1, [r7, #11]
 8011912:	233a      	movs	r3, #58	; 0x3a
 8011914:	2202      	movs	r2, #2
 8011916:	68f8      	ldr	r0, [r7, #12]
 8011918:	f7ff fe6d 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 801191c:	f04f 33ff 	mov.w	r3, #4294967295
 8011920:	e071      	b.n	8011a06 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011928:	689b      	ldr	r3, [r3, #8]
 801192a:	7afa      	ldrb	r2, [r7, #11]
 801192c:	4610      	mov	r0, r2
 801192e:	4798      	blx	r3
 8011930:	4603      	mov	r3, r0
 8011932:	2b00      	cmp	r3, #0
 8011934:	d008      	beq.n	8011948 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011936:	7af9      	ldrb	r1, [r7, #11]
 8011938:	233a      	movs	r3, #58	; 0x3a
 801193a:	2202      	movs	r2, #2
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f7ff fe5a 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011942:	f04f 33ff 	mov.w	r3, #4294967295
 8011946:	e05e      	b.n	8011a06 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	3302      	adds	r3, #2
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	3303      	adds	r3, #3
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011958:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	3304      	adds	r3, #4
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011962:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011964:	687a      	ldr	r2, [r7, #4]
 8011966:	3205      	adds	r2, #5
 8011968:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 801196a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	3306      	adds	r3, #6
 8011976:	781b      	ldrb	r3, [r3, #0]
 8011978:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	3307      	adds	r3, #7
 801197e:	781b      	ldrb	r3, [r3, #0]
 8011980:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011982:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	3308      	adds	r3, #8
 8011988:	781b      	ldrb	r3, [r3, #0]
 801198a:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801198c:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 801198e:	687a      	ldr	r2, [r7, #4]
 8011990:	3209      	adds	r2, #9
 8011992:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011994:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801199c:	697b      	ldr	r3, [r7, #20]
 801199e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80119a8:	7af9      	ldrb	r1, [r7, #11]
 80119aa:	68f8      	ldr	r0, [r7, #12]
 80119ac:	f000 fa02 	bl	8011db4 <SCSI_CheckAddressRange>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	da02      	bge.n	80119bc <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80119b6:	f04f 33ff 	mov.w	r3, #4294967295
 80119ba:	e024      	b.n	8011a06 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80119c8:	6979      	ldr	r1, [r7, #20]
 80119ca:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80119ce:	fb01 f303 	mul.w	r3, r1, r3
 80119d2:	429a      	cmp	r2, r3
 80119d4:	d00a      	beq.n	80119ec <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80119d6:	697b      	ldr	r3, [r7, #20]
 80119d8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80119dc:	2320      	movs	r3, #32
 80119de:	2205      	movs	r2, #5
 80119e0:	68f8      	ldr	r0, [r7, #12]
 80119e2:	f7ff fe08 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 80119e6:	f04f 33ff 	mov.w	r3, #4294967295
 80119ea:	e00c      	b.n	8011a06 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80119ec:	697b      	ldr	r3, [r7, #20]
 80119ee:	2202      	movs	r2, #2
 80119f0:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80119f8:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80119fa:	7afb      	ldrb	r3, [r7, #11]
 80119fc:	4619      	mov	r1, r3
 80119fe:	68f8      	ldr	r0, [r7, #12]
 8011a00:	f000 fa00 	bl	8011e04 <SCSI_ProcessRead>
 8011a04:	4603      	mov	r3, r0
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3718      	adds	r7, #24
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}

08011a0e <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011a0e:	b580      	push	{r7, lr}
 8011a10:	b086      	sub	sp, #24
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	60f8      	str	r0, [r7, #12]
 8011a16:	460b      	mov	r3, r1
 8011a18:	607a      	str	r2, [r7, #4]
 8011a1a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011a22:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8011a24:	697b      	ldr	r3, [r7, #20]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d102      	bne.n	8011a30 <SCSI_Write10+0x22>
  {
    return -1;
 8011a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8011a2e:	e0af      	b.n	8011b90 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011a30:	697b      	ldr	r3, [r7, #20]
 8011a32:	7a1b      	ldrb	r3, [r3, #8]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f040 80a5 	bne.w	8011b84 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8011a3a:	697b      	ldr	r3, [r7, #20]
 8011a3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d10a      	bne.n	8011a5a <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011a4a:	2320      	movs	r3, #32
 8011a4c:	2205      	movs	r2, #5
 8011a4e:	68f8      	ldr	r0, [r7, #12]
 8011a50:	f7ff fdd1 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011a54:	f04f 33ff 	mov.w	r3, #4294967295
 8011a58:	e09a      	b.n	8011b90 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011a60:	b25b      	sxtb	r3, r3
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	da0a      	bge.n	8011a7c <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011a66:	697b      	ldr	r3, [r7, #20]
 8011a68:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011a6c:	2320      	movs	r3, #32
 8011a6e:	2205      	movs	r2, #5
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	f7ff fdc0 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011a76:	f04f 33ff 	mov.w	r3, #4294967295
 8011a7a:	e089      	b.n	8011b90 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011a82:	689b      	ldr	r3, [r3, #8]
 8011a84:	7afa      	ldrb	r2, [r7, #11]
 8011a86:	4610      	mov	r0, r2
 8011a88:	4798      	blx	r3
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d008      	beq.n	8011aa2 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011a90:	7af9      	ldrb	r1, [r7, #11]
 8011a92:	233a      	movs	r3, #58	; 0x3a
 8011a94:	2202      	movs	r2, #2
 8011a96:	68f8      	ldr	r0, [r7, #12]
 8011a98:	f7ff fdad 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8011aa0:	e076      	b.n	8011b90 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011aa8:	68db      	ldr	r3, [r3, #12]
 8011aaa:	7afa      	ldrb	r2, [r7, #11]
 8011aac:	4610      	mov	r0, r2
 8011aae:	4798      	blx	r3
 8011ab0:	4603      	mov	r3, r0
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d008      	beq.n	8011ac8 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011ab6:	7af9      	ldrb	r1, [r7, #11]
 8011ab8:	2327      	movs	r3, #39	; 0x27
 8011aba:	2202      	movs	r2, #2
 8011abc:	68f8      	ldr	r0, [r7, #12]
 8011abe:	f7ff fd9a 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ac6:	e063      	b.n	8011b90 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	3302      	adds	r3, #2
 8011acc:	781b      	ldrb	r3, [r3, #0]
 8011ace:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	3303      	adds	r3, #3
 8011ad4:	781b      	ldrb	r3, [r3, #0]
 8011ad6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011ad8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	3304      	adds	r3, #4
 8011ade:	781b      	ldrb	r3, [r3, #0]
 8011ae0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011ae2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011ae4:	687a      	ldr	r2, [r7, #4]
 8011ae6:	3205      	adds	r2, #5
 8011ae8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011aea:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	3307      	adds	r3, #7
 8011af6:	781b      	ldrb	r3, [r3, #0]
 8011af8:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8011afa:	687a      	ldr	r2, [r7, #4]
 8011afc:	3208      	adds	r2, #8
 8011afe:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8011b00:	431a      	orrs	r2, r3
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011b14:	7af9      	ldrb	r1, [r7, #11]
 8011b16:	68f8      	ldr	r0, [r7, #12]
 8011b18:	f000 f94c 	bl	8011db4 <SCSI_CheckAddressRange>
 8011b1c:	4603      	mov	r3, r0
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	da02      	bge.n	8011b28 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011b22:	f04f 33ff 	mov.w	r3, #4294967295
 8011b26:	e033      	b.n	8011b90 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011b2e:	697a      	ldr	r2, [r7, #20]
 8011b30:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011b34:	fb02 f303 	mul.w	r3, r2, r3
 8011b38:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011b40:	693a      	ldr	r2, [r7, #16]
 8011b42:	429a      	cmp	r2, r3
 8011b44:	d00a      	beq.n	8011b5c <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011b46:	697b      	ldr	r3, [r7, #20]
 8011b48:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011b4c:	2320      	movs	r3, #32
 8011b4e:	2205      	movs	r2, #5
 8011b50:	68f8      	ldr	r0, [r7, #12]
 8011b52:	f7ff fd50 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011b56:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5a:	e019      	b.n	8011b90 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011b5c:	693b      	ldr	r3, [r7, #16]
 8011b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b62:	bf28      	it	cs
 8011b64:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011b68:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	2201      	movs	r2, #1
 8011b6e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011b70:	697b      	ldr	r3, [r7, #20]
 8011b72:	f103 0210 	add.w	r2, r3, #16
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	2101      	movs	r1, #1
 8011b7a:	68f8      	ldr	r0, [r7, #12]
 8011b7c:	f004 ff83 	bl	8016a86 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011b80:	2300      	movs	r3, #0
 8011b82:	e005      	b.n	8011b90 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8011b84:	7afb      	ldrb	r3, [r7, #11]
 8011b86:	4619      	mov	r1, r3
 8011b88:	68f8      	ldr	r0, [r7, #12]
 8011b8a:	f000 f9b4 	bl	8011ef6 <SCSI_ProcessWrite>
 8011b8e:	4603      	mov	r3, r0
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3718      	adds	r7, #24
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b086      	sub	sp, #24
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	60f8      	str	r0, [r7, #12]
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	607a      	str	r2, [r7, #4]
 8011ba4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011bac:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d102      	bne.n	8011bba <SCSI_Write12+0x22>
  {
    return -1;
 8011bb4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bb8:	e0bf      	b.n	8011d3a <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8011bba:	697b      	ldr	r3, [r7, #20]
 8011bbc:	7a1b      	ldrb	r3, [r3, #8]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	f040 80b5 	bne.w	8011d2e <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8011bc4:	697b      	ldr	r3, [r7, #20]
 8011bc6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d10a      	bne.n	8011be4 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011bd4:	2320      	movs	r3, #32
 8011bd6:	2205      	movs	r2, #5
 8011bd8:	68f8      	ldr	r0, [r7, #12]
 8011bda:	f7ff fd0c 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011bde:	f04f 33ff 	mov.w	r3, #4294967295
 8011be2:	e0aa      	b.n	8011d3a <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8011be4:	697b      	ldr	r3, [r7, #20]
 8011be6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8011bea:	b25b      	sxtb	r3, r3
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	da0a      	bge.n	8011c06 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011bf6:	2320      	movs	r3, #32
 8011bf8:	2205      	movs	r2, #5
 8011bfa:	68f8      	ldr	r0, [r7, #12]
 8011bfc:	f7ff fcfb 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011c00:	f04f 33ff 	mov.w	r3, #4294967295
 8011c04:	e099      	b.n	8011d3a <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8011c06:	68fb      	ldr	r3, [r7, #12]
 8011c08:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c0c:	689b      	ldr	r3, [r3, #8]
 8011c0e:	7afa      	ldrb	r2, [r7, #11]
 8011c10:	4610      	mov	r0, r2
 8011c12:	4798      	blx	r3
 8011c14:	4603      	mov	r3, r0
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d00b      	beq.n	8011c32 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8011c1a:	7af9      	ldrb	r1, [r7, #11]
 8011c1c:	233a      	movs	r3, #58	; 0x3a
 8011c1e:	2202      	movs	r2, #2
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f7ff fce8 	bl	80115f6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011c26:	697b      	ldr	r3, [r7, #20]
 8011c28:	2205      	movs	r2, #5
 8011c2a:	721a      	strb	r2, [r3, #8]
      return -1;
 8011c2c:	f04f 33ff 	mov.w	r3, #4294967295
 8011c30:	e083      	b.n	8011d3a <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011c38:	68db      	ldr	r3, [r3, #12]
 8011c3a:	7afa      	ldrb	r2, [r7, #11]
 8011c3c:	4610      	mov	r0, r2
 8011c3e:	4798      	blx	r3
 8011c40:	4603      	mov	r3, r0
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d00b      	beq.n	8011c5e <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8011c46:	7af9      	ldrb	r1, [r7, #11]
 8011c48:	2327      	movs	r3, #39	; 0x27
 8011c4a:	2202      	movs	r2, #2
 8011c4c:	68f8      	ldr	r0, [r7, #12]
 8011c4e:	f7ff fcd2 	bl	80115f6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8011c52:	697b      	ldr	r3, [r7, #20]
 8011c54:	2205      	movs	r2, #5
 8011c56:	721a      	strb	r2, [r3, #8]
      return -1;
 8011c58:	f04f 33ff 	mov.w	r3, #4294967295
 8011c5c:	e06d      	b.n	8011d3a <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	3302      	adds	r3, #2
 8011c62:	781b      	ldrb	r3, [r3, #0]
 8011c64:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	3303      	adds	r3, #3
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011c6e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8011c70:	687b      	ldr	r3, [r7, #4]
 8011c72:	3304      	adds	r3, #4
 8011c74:	781b      	ldrb	r3, [r3, #0]
 8011c76:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8011c78:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8011c7a:	687a      	ldr	r2, [r7, #4]
 8011c7c:	3205      	adds	r2, #5
 8011c7e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8011c80:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	3306      	adds	r3, #6
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	3307      	adds	r3, #7
 8011c94:	781b      	ldrb	r3, [r3, #0]
 8011c96:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011c98:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	3308      	adds	r3, #8
 8011c9e:	781b      	ldrb	r3, [r3, #0]
 8011ca0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8011ca2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8011ca4:	687a      	ldr	r2, [r7, #4]
 8011ca6:	3209      	adds	r2, #9
 8011ca8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8011caa:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011cb8:	697b      	ldr	r3, [r7, #20]
 8011cba:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011cbe:	7af9      	ldrb	r1, [r7, #11]
 8011cc0:	68f8      	ldr	r0, [r7, #12]
 8011cc2:	f000 f877 	bl	8011db4 <SCSI_CheckAddressRange>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	da02      	bge.n	8011cd2 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8011ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8011cd0:	e033      	b.n	8011d3a <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011cd8:	697a      	ldr	r2, [r7, #20]
 8011cda:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011cde:	fb02 f303 	mul.w	r3, r2, r3
 8011ce2:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8011ce4:	697b      	ldr	r3, [r7, #20]
 8011ce6:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8011cea:	693a      	ldr	r2, [r7, #16]
 8011cec:	429a      	cmp	r2, r3
 8011cee:	d00a      	beq.n	8011d06 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8011cf6:	2320      	movs	r3, #32
 8011cf8:	2205      	movs	r2, #5
 8011cfa:	68f8      	ldr	r0, [r7, #12]
 8011cfc:	f7ff fc7b 	bl	80115f6 <SCSI_SenseCode>
      return -1;
 8011d00:	f04f 33ff 	mov.w	r3, #4294967295
 8011d04:	e019      	b.n	8011d3a <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d0c:	bf28      	it	cs
 8011d0e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011d12:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	2201      	movs	r2, #1
 8011d18:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	f103 0210 	add.w	r2, r3, #16
 8011d20:	693b      	ldr	r3, [r7, #16]
 8011d22:	2101      	movs	r1, #1
 8011d24:	68f8      	ldr	r0, [r7, #12]
 8011d26:	f004 feae 	bl	8016a86 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8011d2a:	2300      	movs	r3, #0
 8011d2c:	e005      	b.n	8011d3a <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8011d2e:	7afb      	ldrb	r3, [r7, #11]
 8011d30:	4619      	mov	r1, r3
 8011d32:	68f8      	ldr	r0, [r7, #12]
 8011d34:	f000 f8df 	bl	8011ef6 <SCSI_ProcessWrite>
 8011d38:	4603      	mov	r3, r0
}
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	3718      	adds	r7, #24
 8011d3e:	46bd      	mov	sp, r7
 8011d40:	bd80      	pop	{r7, pc}

08011d42 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8011d42:	b580      	push	{r7, lr}
 8011d44:	b086      	sub	sp, #24
 8011d46:	af00      	add	r7, sp, #0
 8011d48:	60f8      	str	r0, [r7, #12]
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	607a      	str	r2, [r7, #4]
 8011d4e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d56:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d102      	bne.n	8011d64 <SCSI_Verify10+0x22>
  {
    return -1;
 8011d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d62:	e023      	b.n	8011dac <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	3301      	adds	r3, #1
 8011d68:	781b      	ldrb	r3, [r3, #0]
 8011d6a:	f003 0302 	and.w	r3, r3, #2
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d008      	beq.n	8011d84 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8011d72:	7af9      	ldrb	r1, [r7, #11]
 8011d74:	2324      	movs	r3, #36	; 0x24
 8011d76:	2205      	movs	r2, #5
 8011d78:	68f8      	ldr	r0, [r7, #12]
 8011d7a:	f7ff fc3c 	bl	80115f6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8011d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d82:	e013      	b.n	8011dac <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8011d84:	697b      	ldr	r3, [r7, #20]
 8011d86:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011d90:	7af9      	ldrb	r1, [r7, #11]
 8011d92:	68f8      	ldr	r0, [r7, #12]
 8011d94:	f000 f80e 	bl	8011db4 <SCSI_CheckAddressRange>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	da02      	bge.n	8011da4 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8011d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8011da2:	e003      	b.n	8011dac <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8011da4:	697b      	ldr	r3, [r7, #20]
 8011da6:	2200      	movs	r2, #0
 8011da8:	60da      	str	r2, [r3, #12]

  return 0;
 8011daa:	2300      	movs	r3, #0
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	3718      	adds	r7, #24
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b086      	sub	sp, #24
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	60f8      	str	r0, [r7, #12]
 8011dbc:	607a      	str	r2, [r7, #4]
 8011dbe:	603b      	str	r3, [r7, #0]
 8011dc0:	460b      	mov	r3, r1
 8011dc2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011dc4:	68fb      	ldr	r3, [r7, #12]
 8011dc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011dca:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8011dcc:	697b      	ldr	r3, [r7, #20]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d102      	bne.n	8011dd8 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8011dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8011dd6:	e011      	b.n	8011dfc <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8011dd8:	687a      	ldr	r2, [r7, #4]
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	441a      	add	r2, r3
 8011dde:	697b      	ldr	r3, [r7, #20]
 8011de0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8011de4:	429a      	cmp	r2, r3
 8011de6:	d908      	bls.n	8011dfa <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8011de8:	7af9      	ldrb	r1, [r7, #11]
 8011dea:	2321      	movs	r3, #33	; 0x21
 8011dec:	2205      	movs	r2, #5
 8011dee:	68f8      	ldr	r0, [r7, #12]
 8011df0:	f7ff fc01 	bl	80115f6 <SCSI_SenseCode>
    return -1;
 8011df4:	f04f 33ff 	mov.w	r3, #4294967295
 8011df8:	e000      	b.n	8011dfc <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3718      	adds	r7, #24
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011e04:	b590      	push	{r4, r7, lr}
 8011e06:	b085      	sub	sp, #20
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	6078      	str	r0, [r7, #4]
 8011e0c:	460b      	mov	r3, r1
 8011e0e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e16:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011e18:	68fb      	ldr	r3, [r7, #12]
 8011e1a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011e1e:	68fa      	ldr	r2, [r7, #12]
 8011e20:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011e24:	fb02 f303 	mul.w	r3, r2, r3
 8011e28:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d102      	bne.n	8011e36 <SCSI_ProcessRead+0x32>
  {
    return -1;
 8011e30:	f04f 33ff 	mov.w	r3, #4294967295
 8011e34:	e05b      	b.n	8011eee <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8011e36:	68bb      	ldr	r3, [r7, #8]
 8011e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011e3c:	bf28      	it	cs
 8011e3e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011e42:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011e4a:	691c      	ldr	r4, [r3, #16]
 8011e4c:	68fb      	ldr	r3, [r7, #12]
 8011e4e:	f103 0110 	add.w	r1, r3, #16
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8011e58:	68fb      	ldr	r3, [r7, #12]
 8011e5a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011e5e:	4618      	mov	r0, r3
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8011e66:	b29b      	uxth	r3, r3
 8011e68:	78f8      	ldrb	r0, [r7, #3]
 8011e6a:	47a0      	blx	r4
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	da08      	bge.n	8011e84 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8011e72:	78f9      	ldrb	r1, [r7, #3]
 8011e74:	2311      	movs	r3, #17
 8011e76:	2204      	movs	r2, #4
 8011e78:	6878      	ldr	r0, [r7, #4]
 8011e7a:	f7ff fbbc 	bl	80115f6 <SCSI_SenseCode>
    return -1;
 8011e7e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e82:	e034      	b.n	8011eee <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8011e84:	68fb      	ldr	r3, [r7, #12]
 8011e86:	f103 0210 	add.w	r2, r3, #16
 8011e8a:	68bb      	ldr	r3, [r7, #8]
 8011e8c:	2181      	movs	r1, #129	; 0x81
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f004 fdd8 	bl	8016a44 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011e9a:	68fb      	ldr	r3, [r7, #12]
 8011e9c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ea8:	441a      	add	r2, r3
 8011eaa:	68fb      	ldr	r3, [r7, #12]
 8011eac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8011eb6:	68fb      	ldr	r3, [r7, #12]
 8011eb8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011ebc:	4619      	mov	r1, r3
 8011ebe:	68bb      	ldr	r3, [r7, #8]
 8011ec0:	fbb3 f3f1 	udiv	r3, r3, r1
 8011ec4:	1ad2      	subs	r2, r2, r3
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8011ecc:	68fb      	ldr	r3, [r7, #12]
 8011ece:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011ed2:	68bb      	ldr	r3, [r7, #8]
 8011ed4:	1ad2      	subs	r2, r2, r3
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d102      	bne.n	8011eec <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	2203      	movs	r2, #3
 8011eea:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8011eec:	2300      	movs	r3, #0
}
 8011eee:	4618      	mov	r0, r3
 8011ef0:	3714      	adds	r7, #20
 8011ef2:	46bd      	mov	sp, r7
 8011ef4:	bd90      	pop	{r4, r7, pc}

08011ef6 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8011ef6:	b590      	push	{r4, r7, lr}
 8011ef8:	b085      	sub	sp, #20
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	6078      	str	r0, [r7, #4]
 8011efe:	460b      	mov	r3, r1
 8011f00:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011f08:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8011f0a:	68fb      	ldr	r3, [r7, #12]
 8011f0c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011f10:	68fa      	ldr	r2, [r7, #12]
 8011f12:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011f16:	fb02 f303 	mul.w	r3, r2, r3
 8011f1a:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d102      	bne.n	8011f28 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8011f22:	f04f 33ff 	mov.w	r3, #4294967295
 8011f26:	e06b      	b.n	8012000 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8011f28:	68bb      	ldr	r3, [r7, #8]
 8011f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011f2e:	bf28      	it	cs
 8011f30:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011f34:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011f3c:	695c      	ldr	r4, [r3, #20]
 8011f3e:	68fb      	ldr	r3, [r7, #12]
 8011f40:	f103 0110 	add.w	r1, r3, #16
 8011f44:	68fb      	ldr	r3, [r7, #12]
 8011f46:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011f50:	4618      	mov	r0, r3
 8011f52:	68bb      	ldr	r3, [r7, #8]
 8011f54:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8011f58:	b29b      	uxth	r3, r3
 8011f5a:	78f8      	ldrb	r0, [r7, #3]
 8011f5c:	47a0      	blx	r4
 8011f5e:	4603      	mov	r3, r0
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	da08      	bge.n	8011f76 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8011f64:	78f9      	ldrb	r1, [r7, #3]
 8011f66:	2303      	movs	r3, #3
 8011f68:	2204      	movs	r2, #4
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f7ff fb43 	bl	80115f6 <SCSI_SenseCode>
    return -1;
 8011f70:	f04f 33ff 	mov.w	r3, #4294967295
 8011f74:	e044      	b.n	8012000 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8011f76:	68fb      	ldr	r3, [r7, #12]
 8011f78:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011f82:	4619      	mov	r1, r3
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	fbb3 f3f1 	udiv	r3, r3, r1
 8011f8a:	441a      	add	r2, r3
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8011f9e:	4619      	mov	r1, r3
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011fa6:	1ad2      	subs	r2, r2, r3
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8011fb4:	68bb      	ldr	r3, [r7, #8]
 8011fb6:	1ad2      	subs	r2, r2, r3
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8011fbe:	68fb      	ldr	r3, [r7, #12]
 8011fc0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d104      	bne.n	8011fd2 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8011fc8:	2100      	movs	r1, #0
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f7fe fdd8 	bl	8010b80 <MSC_BOT_SendCSW>
 8011fd0:	e015      	b.n	8011ffe <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8011fd8:	68fa      	ldr	r2, [r7, #12]
 8011fda:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8011fde:	fb02 f303 	mul.w	r3, r2, r3
 8011fe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011fe6:	bf28      	it	cs
 8011fe8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8011fec:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8011fee:	68fb      	ldr	r3, [r7, #12]
 8011ff0:	f103 0210 	add.w	r2, r3, #16
 8011ff4:	68bb      	ldr	r3, [r7, #8]
 8011ff6:	2101      	movs	r1, #1
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f004 fd44 	bl	8016a86 <USBD_LL_PrepareReceive>
  }

  return 0;
 8011ffe:	2300      	movs	r3, #0
}
 8012000:	4618      	mov	r0, r3
 8012002:	3714      	adds	r7, #20
 8012004:	46bd      	mov	sp, r7
 8012006:	bd90      	pop	{r4, r7, pc}

08012008 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8012008:	b480      	push	{r7}
 801200a:	b087      	sub	sp, #28
 801200c:	af00      	add	r7, sp, #0
 801200e:	60f8      	str	r0, [r7, #12]
 8012010:	60b9      	str	r1, [r7, #8]
 8012012:	4613      	mov	r3, r2
 8012014:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8012016:	88fb      	ldrh	r3, [r7, #6]
 8012018:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d102      	bne.n	8012026 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8012020:	f04f 33ff 	mov.w	r3, #4294967295
 8012024:	e013      	b.n	801204e <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8012026:	8afa      	ldrh	r2, [r7, #22]
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 801202c:	e00b      	b.n	8012046 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 801202e:	8afb      	ldrh	r3, [r7, #22]
 8012030:	3b01      	subs	r3, #1
 8012032:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8012034:	8afb      	ldrh	r3, [r7, #22]
 8012036:	68ba      	ldr	r2, [r7, #8]
 8012038:	441a      	add	r2, r3
 801203a:	8afb      	ldrh	r3, [r7, #22]
 801203c:	7811      	ldrb	r1, [r2, #0]
 801203e:	68fa      	ldr	r2, [r7, #12]
 8012040:	4413      	add	r3, r2
 8012042:	460a      	mov	r2, r1
 8012044:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8012046:	8afb      	ldrh	r3, [r7, #22]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d1f0      	bne.n	801202e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 801204c:	2300      	movs	r3, #0
}
 801204e:	4618      	mov	r0, r3
 8012050:	371c      	adds	r7, #28
 8012052:	46bd      	mov	sp, r7
 8012054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012058:	4770      	bx	lr

0801205a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801205a:	b580      	push	{r7, lr}
 801205c:	b086      	sub	sp, #24
 801205e:	af00      	add	r7, sp, #0
 8012060:	60f8      	str	r0, [r7, #12]
 8012062:	60b9      	str	r1, [r7, #8]
 8012064:	4613      	mov	r3, r2
 8012066:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d101      	bne.n	8012072 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801206e:	2303      	movs	r3, #3
 8012070:	e01f      	b.n	80120b2 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	2200      	movs	r2, #0
 8012076:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	2200      	movs	r2, #0
 801207e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8012082:	68fb      	ldr	r3, [r7, #12]
 8012084:	2200      	movs	r2, #0
 8012086:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801208a:	68bb      	ldr	r3, [r7, #8]
 801208c:	2b00      	cmp	r3, #0
 801208e:	d003      	beq.n	8012098 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	68ba      	ldr	r2, [r7, #8]
 8012094:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	2201      	movs	r2, #1
 801209c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	79fa      	ldrb	r2, [r7, #7]
 80120a4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80120a6:	68f8      	ldr	r0, [r7, #12]
 80120a8:	f004 fb78 	bl	801679c <USBD_LL_Init>
 80120ac:	4603      	mov	r3, r0
 80120ae:	75fb      	strb	r3, [r7, #23]

  return ret;
 80120b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3718      	adds	r7, #24
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}

080120ba <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b084      	sub	sp, #16
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
 80120c2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80120c4:	2300      	movs	r3, #0
 80120c6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80120c8:	683b      	ldr	r3, [r7, #0]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d101      	bne.n	80120d2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80120ce:	2303      	movs	r3, #3
 80120d0:	e016      	b.n	8012100 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	683a      	ldr	r2, [r7, #0]
 80120d6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d00b      	beq.n	80120fe <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120ee:	f107 020e 	add.w	r2, r7, #14
 80120f2:	4610      	mov	r0, r2
 80120f4:	4798      	blx	r3
 80120f6:	4602      	mov	r2, r0
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80120fe:	2300      	movs	r3, #0
}
 8012100:	4618      	mov	r0, r3
 8012102:	3710      	adds	r7, #16
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b082      	sub	sp, #8
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f004 fb8f 	bl	8016834 <USBD_LL_Start>
 8012116:	4603      	mov	r3, r0
}
 8012118:	4618      	mov	r0, r3
 801211a:	3708      	adds	r7, #8
 801211c:	46bd      	mov	sp, r7
 801211e:	bd80      	pop	{r7, pc}

08012120 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8012120:	b480      	push	{r7}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012128:	2300      	movs	r3, #0
}
 801212a:	4618      	mov	r0, r3
 801212c:	370c      	adds	r7, #12
 801212e:	46bd      	mov	sp, r7
 8012130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012134:	4770      	bx	lr

08012136 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012136:	b580      	push	{r7, lr}
 8012138:	b084      	sub	sp, #16
 801213a:	af00      	add	r7, sp, #0
 801213c:	6078      	str	r0, [r7, #4]
 801213e:	460b      	mov	r3, r1
 8012140:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8012142:	2303      	movs	r3, #3
 8012144:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801214c:	2b00      	cmp	r3, #0
 801214e:	d009      	beq.n	8012164 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012156:	681b      	ldr	r3, [r3, #0]
 8012158:	78fa      	ldrb	r2, [r7, #3]
 801215a:	4611      	mov	r1, r2
 801215c:	6878      	ldr	r0, [r7, #4]
 801215e:	4798      	blx	r3
 8012160:	4603      	mov	r3, r0
 8012162:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8012164:	7bfb      	ldrb	r3, [r7, #15]
}
 8012166:	4618      	mov	r0, r3
 8012168:	3710      	adds	r7, #16
 801216a:	46bd      	mov	sp, r7
 801216c:	bd80      	pop	{r7, pc}

0801216e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801216e:	b580      	push	{r7, lr}
 8012170:	b082      	sub	sp, #8
 8012172:	af00      	add	r7, sp, #0
 8012174:	6078      	str	r0, [r7, #4]
 8012176:	460b      	mov	r3, r1
 8012178:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012180:	2b00      	cmp	r3, #0
 8012182:	d007      	beq.n	8012194 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801218a:	685b      	ldr	r3, [r3, #4]
 801218c:	78fa      	ldrb	r2, [r7, #3]
 801218e:	4611      	mov	r1, r2
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	4798      	blx	r3
  }

  return USBD_OK;
 8012194:	2300      	movs	r3, #0
}
 8012196:	4618      	mov	r0, r3
 8012198:	3708      	adds	r7, #8
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}

0801219e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801219e:	b580      	push	{r7, lr}
 80121a0:	b084      	sub	sp, #16
 80121a2:	af00      	add	r7, sp, #0
 80121a4:	6078      	str	r0, [r7, #4]
 80121a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80121a8:	687b      	ldr	r3, [r7, #4]
 80121aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121ae:	6839      	ldr	r1, [r7, #0]
 80121b0:	4618      	mov	r0, r3
 80121b2:	f000 ffb9 	bl	8013128 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	2201      	movs	r2, #1
 80121ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80121c4:	461a      	mov	r2, r3
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80121d2:	f003 031f 	and.w	r3, r3, #31
 80121d6:	2b02      	cmp	r3, #2
 80121d8:	d01a      	beq.n	8012210 <USBD_LL_SetupStage+0x72>
 80121da:	2b02      	cmp	r3, #2
 80121dc:	d822      	bhi.n	8012224 <USBD_LL_SetupStage+0x86>
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d002      	beq.n	80121e8 <USBD_LL_SetupStage+0x4a>
 80121e2:	2b01      	cmp	r3, #1
 80121e4:	d00a      	beq.n	80121fc <USBD_LL_SetupStage+0x5e>
 80121e6:	e01d      	b.n	8012224 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80121ee:	4619      	mov	r1, r3
 80121f0:	6878      	ldr	r0, [r7, #4]
 80121f2:	f000 fa61 	bl	80126b8 <USBD_StdDevReq>
 80121f6:	4603      	mov	r3, r0
 80121f8:	73fb      	strb	r3, [r7, #15]
      break;
 80121fa:	e020      	b.n	801223e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012202:	4619      	mov	r1, r3
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f000 fac5 	bl	8012794 <USBD_StdItfReq>
 801220a:	4603      	mov	r3, r0
 801220c:	73fb      	strb	r3, [r7, #15]
      break;
 801220e:	e016      	b.n	801223e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8012216:	4619      	mov	r1, r3
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 fb04 	bl	8012826 <USBD_StdEPReq>
 801221e:	4603      	mov	r3, r0
 8012220:	73fb      	strb	r3, [r7, #15]
      break;
 8012222:	e00c      	b.n	801223e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801222a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801222e:	b2db      	uxtb	r3, r3
 8012230:	4619      	mov	r1, r3
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f004 fb7d 	bl	8016932 <USBD_LL_StallEP>
 8012238:	4603      	mov	r3, r0
 801223a:	73fb      	strb	r3, [r7, #15]
      break;
 801223c:	bf00      	nop
  }

  return ret;
 801223e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012240:	4618      	mov	r0, r3
 8012242:	3710      	adds	r7, #16
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b086      	sub	sp, #24
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	460b      	mov	r3, r1
 8012252:	607a      	str	r2, [r7, #4]
 8012254:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012256:	7afb      	ldrb	r3, [r7, #11]
 8012258:	2b00      	cmp	r3, #0
 801225a:	d138      	bne.n	80122ce <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8012262:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801226a:	2b03      	cmp	r3, #3
 801226c:	d14a      	bne.n	8012304 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	689a      	ldr	r2, [r3, #8]
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	68db      	ldr	r3, [r3, #12]
 8012276:	429a      	cmp	r2, r3
 8012278:	d913      	bls.n	80122a2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	689a      	ldr	r2, [r3, #8]
 801227e:	693b      	ldr	r3, [r7, #16]
 8012280:	68db      	ldr	r3, [r3, #12]
 8012282:	1ad2      	subs	r2, r2, r3
 8012284:	693b      	ldr	r3, [r7, #16]
 8012286:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012288:	693b      	ldr	r3, [r7, #16]
 801228a:	68da      	ldr	r2, [r3, #12]
 801228c:	693b      	ldr	r3, [r7, #16]
 801228e:	689b      	ldr	r3, [r3, #8]
 8012290:	4293      	cmp	r3, r2
 8012292:	bf28      	it	cs
 8012294:	4613      	movcs	r3, r2
 8012296:	461a      	mov	r2, r3
 8012298:	6879      	ldr	r1, [r7, #4]
 801229a:	68f8      	ldr	r0, [r7, #12]
 801229c:	f001 f81b 	bl	80132d6 <USBD_CtlContinueRx>
 80122a0:	e030      	b.n	8012304 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122a8:	b2db      	uxtb	r3, r3
 80122aa:	2b03      	cmp	r3, #3
 80122ac:	d10b      	bne.n	80122c6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122b4:	691b      	ldr	r3, [r3, #16]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d005      	beq.n	80122c6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122c0:	691b      	ldr	r3, [r3, #16]
 80122c2:	68f8      	ldr	r0, [r7, #12]
 80122c4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80122c6:	68f8      	ldr	r0, [r7, #12]
 80122c8:	f001 f816 	bl	80132f8 <USBD_CtlSendStatus>
 80122cc:	e01a      	b.n	8012304 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122d4:	b2db      	uxtb	r3, r3
 80122d6:	2b03      	cmp	r3, #3
 80122d8:	d114      	bne.n	8012304 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122e0:	699b      	ldr	r3, [r3, #24]
 80122e2:	2b00      	cmp	r3, #0
 80122e4:	d00e      	beq.n	8012304 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122ec:	699b      	ldr	r3, [r3, #24]
 80122ee:	7afa      	ldrb	r2, [r7, #11]
 80122f0:	4611      	mov	r1, r2
 80122f2:	68f8      	ldr	r0, [r7, #12]
 80122f4:	4798      	blx	r3
 80122f6:	4603      	mov	r3, r0
 80122f8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80122fa:	7dfb      	ldrb	r3, [r7, #23]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d001      	beq.n	8012304 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8012300:	7dfb      	ldrb	r3, [r7, #23]
 8012302:	e000      	b.n	8012306 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8012304:	2300      	movs	r3, #0
}
 8012306:	4618      	mov	r0, r3
 8012308:	3718      	adds	r7, #24
 801230a:	46bd      	mov	sp, r7
 801230c:	bd80      	pop	{r7, pc}

0801230e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801230e:	b580      	push	{r7, lr}
 8012310:	b086      	sub	sp, #24
 8012312:	af00      	add	r7, sp, #0
 8012314:	60f8      	str	r0, [r7, #12]
 8012316:	460b      	mov	r3, r1
 8012318:	607a      	str	r2, [r7, #4]
 801231a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801231c:	7afb      	ldrb	r3, [r7, #11]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d16b      	bne.n	80123fa <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	3314      	adds	r3, #20
 8012326:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801232e:	2b02      	cmp	r3, #2
 8012330:	d156      	bne.n	80123e0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	689a      	ldr	r2, [r3, #8]
 8012336:	693b      	ldr	r3, [r7, #16]
 8012338:	68db      	ldr	r3, [r3, #12]
 801233a:	429a      	cmp	r2, r3
 801233c:	d914      	bls.n	8012368 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801233e:	693b      	ldr	r3, [r7, #16]
 8012340:	689a      	ldr	r2, [r3, #8]
 8012342:	693b      	ldr	r3, [r7, #16]
 8012344:	68db      	ldr	r3, [r3, #12]
 8012346:	1ad2      	subs	r2, r2, r3
 8012348:	693b      	ldr	r3, [r7, #16]
 801234a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801234c:	693b      	ldr	r3, [r7, #16]
 801234e:	689b      	ldr	r3, [r3, #8]
 8012350:	461a      	mov	r2, r3
 8012352:	6879      	ldr	r1, [r7, #4]
 8012354:	68f8      	ldr	r0, [r7, #12]
 8012356:	f000 ffad 	bl	80132b4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801235a:	2300      	movs	r3, #0
 801235c:	2200      	movs	r2, #0
 801235e:	2100      	movs	r1, #0
 8012360:	68f8      	ldr	r0, [r7, #12]
 8012362:	f004 fb90 	bl	8016a86 <USBD_LL_PrepareReceive>
 8012366:	e03b      	b.n	80123e0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012368:	693b      	ldr	r3, [r7, #16]
 801236a:	68da      	ldr	r2, [r3, #12]
 801236c:	693b      	ldr	r3, [r7, #16]
 801236e:	689b      	ldr	r3, [r3, #8]
 8012370:	429a      	cmp	r2, r3
 8012372:	d11c      	bne.n	80123ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	685a      	ldr	r2, [r3, #4]
 8012378:	693b      	ldr	r3, [r7, #16]
 801237a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801237c:	429a      	cmp	r2, r3
 801237e:	d316      	bcc.n	80123ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	685a      	ldr	r2, [r3, #4]
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801238a:	429a      	cmp	r2, r3
 801238c:	d20f      	bcs.n	80123ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801238e:	2200      	movs	r2, #0
 8012390:	2100      	movs	r1, #0
 8012392:	68f8      	ldr	r0, [r7, #12]
 8012394:	f000 ff8e 	bl	80132b4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2200      	movs	r2, #0
 801239c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80123a0:	2300      	movs	r3, #0
 80123a2:	2200      	movs	r2, #0
 80123a4:	2100      	movs	r1, #0
 80123a6:	68f8      	ldr	r0, [r7, #12]
 80123a8:	f004 fb6d 	bl	8016a86 <USBD_LL_PrepareReceive>
 80123ac:	e018      	b.n	80123e0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80123b4:	b2db      	uxtb	r3, r3
 80123b6:	2b03      	cmp	r3, #3
 80123b8:	d10b      	bne.n	80123d2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123c0:	68db      	ldr	r3, [r3, #12]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d005      	beq.n	80123d2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123cc:	68db      	ldr	r3, [r3, #12]
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80123d2:	2180      	movs	r1, #128	; 0x80
 80123d4:	68f8      	ldr	r0, [r7, #12]
 80123d6:	f004 faac 	bl	8016932 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80123da:	68f8      	ldr	r0, [r7, #12]
 80123dc:	f000 ff9f 	bl	801331e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80123e6:	2b01      	cmp	r3, #1
 80123e8:	d122      	bne.n	8012430 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80123ea:	68f8      	ldr	r0, [r7, #12]
 80123ec:	f7ff fe98 	bl	8012120 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2200      	movs	r2, #0
 80123f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80123f8:	e01a      	b.n	8012430 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012400:	b2db      	uxtb	r3, r3
 8012402:	2b03      	cmp	r3, #3
 8012404:	d114      	bne.n	8012430 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801240c:	695b      	ldr	r3, [r3, #20]
 801240e:	2b00      	cmp	r3, #0
 8012410:	d00e      	beq.n	8012430 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012418:	695b      	ldr	r3, [r3, #20]
 801241a:	7afa      	ldrb	r2, [r7, #11]
 801241c:	4611      	mov	r1, r2
 801241e:	68f8      	ldr	r0, [r7, #12]
 8012420:	4798      	blx	r3
 8012422:	4603      	mov	r3, r0
 8012424:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8012426:	7dfb      	ldrb	r3, [r7, #23]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d001      	beq.n	8012430 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801242c:	7dfb      	ldrb	r3, [r7, #23]
 801242e:	e000      	b.n	8012432 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8012430:	2300      	movs	r3, #0
}
 8012432:	4618      	mov	r0, r3
 8012434:	3718      	adds	r7, #24
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}

0801243a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801243a:	b580      	push	{r7, lr}
 801243c:	b082      	sub	sp, #8
 801243e:	af00      	add	r7, sp, #0
 8012440:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	2201      	movs	r2, #1
 8012446:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	2200      	movs	r2, #0
 801244e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	2200      	movs	r2, #0
 8012456:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	2200      	movs	r2, #0
 801245c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012466:	2b00      	cmp	r3, #0
 8012468:	d101      	bne.n	801246e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 801246a:	2303      	movs	r3, #3
 801246c:	e02f      	b.n	80124ce <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012474:	2b00      	cmp	r3, #0
 8012476:	d00f      	beq.n	8012498 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801247e:	685b      	ldr	r3, [r3, #4]
 8012480:	2b00      	cmp	r3, #0
 8012482:	d009      	beq.n	8012498 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801248a:	685b      	ldr	r3, [r3, #4]
 801248c:	687a      	ldr	r2, [r7, #4]
 801248e:	6852      	ldr	r2, [r2, #4]
 8012490:	b2d2      	uxtb	r2, r2
 8012492:	4611      	mov	r1, r2
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012498:	2340      	movs	r3, #64	; 0x40
 801249a:	2200      	movs	r2, #0
 801249c:	2100      	movs	r1, #0
 801249e:	6878      	ldr	r0, [r7, #4]
 80124a0:	f004 f9e3 	bl	801686a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	2201      	movs	r2, #1
 80124a8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	2240      	movs	r2, #64	; 0x40
 80124b0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80124b4:	2340      	movs	r3, #64	; 0x40
 80124b6:	2200      	movs	r2, #0
 80124b8:	2180      	movs	r1, #128	; 0x80
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f004 f9d5 	bl	801686a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2201      	movs	r2, #1
 80124c4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	2240      	movs	r2, #64	; 0x40
 80124ca:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80124cc:	2300      	movs	r3, #0
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3708      	adds	r7, #8
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}

080124d6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80124d6:	b480      	push	{r7}
 80124d8:	b083      	sub	sp, #12
 80124da:	af00      	add	r7, sp, #0
 80124dc:	6078      	str	r0, [r7, #4]
 80124de:	460b      	mov	r3, r1
 80124e0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	78fa      	ldrb	r2, [r7, #3]
 80124e6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80124e8:	2300      	movs	r3, #0
}
 80124ea:	4618      	mov	r0, r3
 80124ec:	370c      	adds	r7, #12
 80124ee:	46bd      	mov	sp, r7
 80124f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f4:	4770      	bx	lr

080124f6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80124f6:	b480      	push	{r7}
 80124f8:	b083      	sub	sp, #12
 80124fa:	af00      	add	r7, sp, #0
 80124fc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012504:	b2da      	uxtb	r2, r3
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	2204      	movs	r2, #4
 8012510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012514:	2300      	movs	r3, #0
}
 8012516:	4618      	mov	r0, r3
 8012518:	370c      	adds	r7, #12
 801251a:	46bd      	mov	sp, r7
 801251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012520:	4770      	bx	lr

08012522 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012522:	b480      	push	{r7}
 8012524:	b083      	sub	sp, #12
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012530:	b2db      	uxtb	r3, r3
 8012532:	2b04      	cmp	r3, #4
 8012534:	d106      	bne.n	8012544 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801253c:	b2da      	uxtb	r2, r3
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012544:	2300      	movs	r3, #0
}
 8012546:	4618      	mov	r0, r3
 8012548:	370c      	adds	r7, #12
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr

08012552 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012552:	b580      	push	{r7, lr}
 8012554:	b082      	sub	sp, #8
 8012556:	af00      	add	r7, sp, #0
 8012558:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012560:	2b00      	cmp	r3, #0
 8012562:	d101      	bne.n	8012568 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8012564:	2303      	movs	r3, #3
 8012566:	e012      	b.n	801258e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801256e:	b2db      	uxtb	r3, r3
 8012570:	2b03      	cmp	r3, #3
 8012572:	d10b      	bne.n	801258c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801257a:	69db      	ldr	r3, [r3, #28]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d005      	beq.n	801258c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012586:	69db      	ldr	r3, [r3, #28]
 8012588:	6878      	ldr	r0, [r7, #4]
 801258a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801258c:	2300      	movs	r3, #0
}
 801258e:	4618      	mov	r0, r3
 8012590:	3708      	adds	r7, #8
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012596:	b580      	push	{r7, lr}
 8012598:	b082      	sub	sp, #8
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	460b      	mov	r3, r1
 80125a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d101      	bne.n	80125b0 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80125ac:	2303      	movs	r3, #3
 80125ae:	e014      	b.n	80125da <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80125b6:	b2db      	uxtb	r3, r3
 80125b8:	2b03      	cmp	r3, #3
 80125ba:	d10d      	bne.n	80125d8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125c2:	6a1b      	ldr	r3, [r3, #32]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d007      	beq.n	80125d8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125ce:	6a1b      	ldr	r3, [r3, #32]
 80125d0:	78fa      	ldrb	r2, [r7, #3]
 80125d2:	4611      	mov	r1, r2
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80125d8:	2300      	movs	r3, #0
}
 80125da:	4618      	mov	r0, r3
 80125dc:	3708      	adds	r7, #8
 80125de:	46bd      	mov	sp, r7
 80125e0:	bd80      	pop	{r7, pc}

080125e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80125e2:	b580      	push	{r7, lr}
 80125e4:	b082      	sub	sp, #8
 80125e6:	af00      	add	r7, sp, #0
 80125e8:	6078      	str	r0, [r7, #4]
 80125ea:	460b      	mov	r3, r1
 80125ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d101      	bne.n	80125fc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80125f8:	2303      	movs	r3, #3
 80125fa:	e014      	b.n	8012626 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012602:	b2db      	uxtb	r3, r3
 8012604:	2b03      	cmp	r3, #3
 8012606:	d10d      	bne.n	8012624 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012610:	2b00      	cmp	r3, #0
 8012612:	d007      	beq.n	8012624 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801261c:	78fa      	ldrb	r2, [r7, #3]
 801261e:	4611      	mov	r1, r2
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012624:	2300      	movs	r3, #0
}
 8012626:	4618      	mov	r0, r3
 8012628:	3708      	adds	r7, #8
 801262a:	46bd      	mov	sp, r7
 801262c:	bd80      	pop	{r7, pc}

0801262e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801262e:	b480      	push	{r7}
 8012630:	b083      	sub	sp, #12
 8012632:	af00      	add	r7, sp, #0
 8012634:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012636:	2300      	movs	r3, #0
}
 8012638:	4618      	mov	r0, r3
 801263a:	370c      	adds	r7, #12
 801263c:	46bd      	mov	sp, r7
 801263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012642:	4770      	bx	lr

08012644 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b082      	sub	sp, #8
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	2201      	movs	r2, #1
 8012650:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801265a:	2b00      	cmp	r3, #0
 801265c:	d009      	beq.n	8012672 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012664:	685b      	ldr	r3, [r3, #4]
 8012666:	687a      	ldr	r2, [r7, #4]
 8012668:	6852      	ldr	r2, [r2, #4]
 801266a:	b2d2      	uxtb	r2, r2
 801266c:	4611      	mov	r1, r2
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	4798      	blx	r3
  }

  return USBD_OK;
 8012672:	2300      	movs	r3, #0
}
 8012674:	4618      	mov	r0, r3
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801267c:	b480      	push	{r7}
 801267e:	b087      	sub	sp, #28
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8012684:	687b      	ldr	r3, [r7, #4]
 8012686:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012688:	697b      	ldr	r3, [r7, #20]
 801268a:	781b      	ldrb	r3, [r3, #0]
 801268c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801268e:	697b      	ldr	r3, [r7, #20]
 8012690:	3301      	adds	r3, #1
 8012692:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012694:	697b      	ldr	r3, [r7, #20]
 8012696:	781b      	ldrb	r3, [r3, #0]
 8012698:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801269a:	8a3b      	ldrh	r3, [r7, #16]
 801269c:	021b      	lsls	r3, r3, #8
 801269e:	b21a      	sxth	r2, r3
 80126a0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80126a4:	4313      	orrs	r3, r2
 80126a6:	b21b      	sxth	r3, r3
 80126a8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80126aa:	89fb      	ldrh	r3, [r7, #14]
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	371c      	adds	r7, #28
 80126b0:	46bd      	mov	sp, r7
 80126b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126b6:	4770      	bx	lr

080126b8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b084      	sub	sp, #16
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80126c2:	2300      	movs	r3, #0
 80126c4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80126c6:	683b      	ldr	r3, [r7, #0]
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80126ce:	2b40      	cmp	r3, #64	; 0x40
 80126d0:	d005      	beq.n	80126de <USBD_StdDevReq+0x26>
 80126d2:	2b40      	cmp	r3, #64	; 0x40
 80126d4:	d853      	bhi.n	801277e <USBD_StdDevReq+0xc6>
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d00b      	beq.n	80126f2 <USBD_StdDevReq+0x3a>
 80126da:	2b20      	cmp	r3, #32
 80126dc:	d14f      	bne.n	801277e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126e4:	689b      	ldr	r3, [r3, #8]
 80126e6:	6839      	ldr	r1, [r7, #0]
 80126e8:	6878      	ldr	r0, [r7, #4]
 80126ea:	4798      	blx	r3
 80126ec:	4603      	mov	r3, r0
 80126ee:	73fb      	strb	r3, [r7, #15]
      break;
 80126f0:	e04a      	b.n	8012788 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80126f2:	683b      	ldr	r3, [r7, #0]
 80126f4:	785b      	ldrb	r3, [r3, #1]
 80126f6:	2b09      	cmp	r3, #9
 80126f8:	d83b      	bhi.n	8012772 <USBD_StdDevReq+0xba>
 80126fa:	a201      	add	r2, pc, #4	; (adr r2, 8012700 <USBD_StdDevReq+0x48>)
 80126fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012700:	08012755 	.word	0x08012755
 8012704:	08012769 	.word	0x08012769
 8012708:	08012773 	.word	0x08012773
 801270c:	0801275f 	.word	0x0801275f
 8012710:	08012773 	.word	0x08012773
 8012714:	08012733 	.word	0x08012733
 8012718:	08012729 	.word	0x08012729
 801271c:	08012773 	.word	0x08012773
 8012720:	0801274b 	.word	0x0801274b
 8012724:	0801273d 	.word	0x0801273d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012728:	6839      	ldr	r1, [r7, #0]
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f000 f9de 	bl	8012aec <USBD_GetDescriptor>
          break;
 8012730:	e024      	b.n	801277c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012732:	6839      	ldr	r1, [r7, #0]
 8012734:	6878      	ldr	r0, [r7, #4]
 8012736:	f000 fb6d 	bl	8012e14 <USBD_SetAddress>
          break;
 801273a:	e01f      	b.n	801277c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801273c:	6839      	ldr	r1, [r7, #0]
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f000 fbac 	bl	8012e9c <USBD_SetConfig>
 8012744:	4603      	mov	r3, r0
 8012746:	73fb      	strb	r3, [r7, #15]
          break;
 8012748:	e018      	b.n	801277c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801274a:	6839      	ldr	r1, [r7, #0]
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f000 fc4b 	bl	8012fe8 <USBD_GetConfig>
          break;
 8012752:	e013      	b.n	801277c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012754:	6839      	ldr	r1, [r7, #0]
 8012756:	6878      	ldr	r0, [r7, #4]
 8012758:	f000 fc7c 	bl	8013054 <USBD_GetStatus>
          break;
 801275c:	e00e      	b.n	801277c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801275e:	6839      	ldr	r1, [r7, #0]
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f000 fcab 	bl	80130bc <USBD_SetFeature>
          break;
 8012766:	e009      	b.n	801277c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012768:	6839      	ldr	r1, [r7, #0]
 801276a:	6878      	ldr	r0, [r7, #4]
 801276c:	f000 fcba 	bl	80130e4 <USBD_ClrFeature>
          break;
 8012770:	e004      	b.n	801277c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8012772:	6839      	ldr	r1, [r7, #0]
 8012774:	6878      	ldr	r0, [r7, #4]
 8012776:	f000 fd11 	bl	801319c <USBD_CtlError>
          break;
 801277a:	bf00      	nop
      }
      break;
 801277c:	e004      	b.n	8012788 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801277e:	6839      	ldr	r1, [r7, #0]
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 fd0b 	bl	801319c <USBD_CtlError>
      break;
 8012786:	bf00      	nop
  }

  return ret;
 8012788:	7bfb      	ldrb	r3, [r7, #15]
}
 801278a:	4618      	mov	r0, r3
 801278c:	3710      	adds	r7, #16
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop

08012794 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012794:	b580      	push	{r7, lr}
 8012796:	b084      	sub	sp, #16
 8012798:	af00      	add	r7, sp, #0
 801279a:	6078      	str	r0, [r7, #4]
 801279c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801279e:	2300      	movs	r3, #0
 80127a0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	781b      	ldrb	r3, [r3, #0]
 80127a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80127aa:	2b40      	cmp	r3, #64	; 0x40
 80127ac:	d005      	beq.n	80127ba <USBD_StdItfReq+0x26>
 80127ae:	2b40      	cmp	r3, #64	; 0x40
 80127b0:	d82f      	bhi.n	8012812 <USBD_StdItfReq+0x7e>
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d001      	beq.n	80127ba <USBD_StdItfReq+0x26>
 80127b6:	2b20      	cmp	r3, #32
 80127b8:	d12b      	bne.n	8012812 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127c0:	b2db      	uxtb	r3, r3
 80127c2:	3b01      	subs	r3, #1
 80127c4:	2b02      	cmp	r3, #2
 80127c6:	d81d      	bhi.n	8012804 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80127c8:	683b      	ldr	r3, [r7, #0]
 80127ca:	889b      	ldrh	r3, [r3, #4]
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	2b01      	cmp	r3, #1
 80127d0:	d813      	bhi.n	80127fa <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80127d8:	689b      	ldr	r3, [r3, #8]
 80127da:	6839      	ldr	r1, [r7, #0]
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	4798      	blx	r3
 80127e0:	4603      	mov	r3, r0
 80127e2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80127e4:	683b      	ldr	r3, [r7, #0]
 80127e6:	88db      	ldrh	r3, [r3, #6]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d110      	bne.n	801280e <USBD_StdItfReq+0x7a>
 80127ec:	7bfb      	ldrb	r3, [r7, #15]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d10d      	bne.n	801280e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80127f2:	6878      	ldr	r0, [r7, #4]
 80127f4:	f000 fd80 	bl	80132f8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80127f8:	e009      	b.n	801280e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80127fa:	6839      	ldr	r1, [r7, #0]
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f000 fccd 	bl	801319c <USBD_CtlError>
          break;
 8012802:	e004      	b.n	801280e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8012804:	6839      	ldr	r1, [r7, #0]
 8012806:	6878      	ldr	r0, [r7, #4]
 8012808:	f000 fcc8 	bl	801319c <USBD_CtlError>
          break;
 801280c:	e000      	b.n	8012810 <USBD_StdItfReq+0x7c>
          break;
 801280e:	bf00      	nop
      }
      break;
 8012810:	e004      	b.n	801281c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8012812:	6839      	ldr	r1, [r7, #0]
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f000 fcc1 	bl	801319c <USBD_CtlError>
      break;
 801281a:	bf00      	nop
  }

  return ret;
 801281c:	7bfb      	ldrb	r3, [r7, #15]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3710      	adds	r7, #16
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}

08012826 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012826:	b580      	push	{r7, lr}
 8012828:	b084      	sub	sp, #16
 801282a:	af00      	add	r7, sp, #0
 801282c:	6078      	str	r0, [r7, #4]
 801282e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012830:	2300      	movs	r3, #0
 8012832:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012834:	683b      	ldr	r3, [r7, #0]
 8012836:	889b      	ldrh	r3, [r3, #4]
 8012838:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801283a:	683b      	ldr	r3, [r7, #0]
 801283c:	781b      	ldrb	r3, [r3, #0]
 801283e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012842:	2b40      	cmp	r3, #64	; 0x40
 8012844:	d007      	beq.n	8012856 <USBD_StdEPReq+0x30>
 8012846:	2b40      	cmp	r3, #64	; 0x40
 8012848:	f200 8145 	bhi.w	8012ad6 <USBD_StdEPReq+0x2b0>
 801284c:	2b00      	cmp	r3, #0
 801284e:	d00c      	beq.n	801286a <USBD_StdEPReq+0x44>
 8012850:	2b20      	cmp	r3, #32
 8012852:	f040 8140 	bne.w	8012ad6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801285c:	689b      	ldr	r3, [r3, #8]
 801285e:	6839      	ldr	r1, [r7, #0]
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	4798      	blx	r3
 8012864:	4603      	mov	r3, r0
 8012866:	73fb      	strb	r3, [r7, #15]
      break;
 8012868:	e13a      	b.n	8012ae0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	785b      	ldrb	r3, [r3, #1]
 801286e:	2b03      	cmp	r3, #3
 8012870:	d007      	beq.n	8012882 <USBD_StdEPReq+0x5c>
 8012872:	2b03      	cmp	r3, #3
 8012874:	f300 8129 	bgt.w	8012aca <USBD_StdEPReq+0x2a4>
 8012878:	2b00      	cmp	r3, #0
 801287a:	d07f      	beq.n	801297c <USBD_StdEPReq+0x156>
 801287c:	2b01      	cmp	r3, #1
 801287e:	d03c      	beq.n	80128fa <USBD_StdEPReq+0xd4>
 8012880:	e123      	b.n	8012aca <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012888:	b2db      	uxtb	r3, r3
 801288a:	2b02      	cmp	r3, #2
 801288c:	d002      	beq.n	8012894 <USBD_StdEPReq+0x6e>
 801288e:	2b03      	cmp	r3, #3
 8012890:	d016      	beq.n	80128c0 <USBD_StdEPReq+0x9a>
 8012892:	e02c      	b.n	80128ee <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012894:	7bbb      	ldrb	r3, [r7, #14]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d00d      	beq.n	80128b6 <USBD_StdEPReq+0x90>
 801289a:	7bbb      	ldrb	r3, [r7, #14]
 801289c:	2b80      	cmp	r3, #128	; 0x80
 801289e:	d00a      	beq.n	80128b6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80128a0:	7bbb      	ldrb	r3, [r7, #14]
 80128a2:	4619      	mov	r1, r3
 80128a4:	6878      	ldr	r0, [r7, #4]
 80128a6:	f004 f844 	bl	8016932 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80128aa:	2180      	movs	r1, #128	; 0x80
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f004 f840 	bl	8016932 <USBD_LL_StallEP>
 80128b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80128b4:	e020      	b.n	80128f8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 80128b6:	6839      	ldr	r1, [r7, #0]
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f000 fc6f 	bl	801319c <USBD_CtlError>
              break;
 80128be:	e01b      	b.n	80128f8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80128c0:	683b      	ldr	r3, [r7, #0]
 80128c2:	885b      	ldrh	r3, [r3, #2]
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d10e      	bne.n	80128e6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80128c8:	7bbb      	ldrb	r3, [r7, #14]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00b      	beq.n	80128e6 <USBD_StdEPReq+0xc0>
 80128ce:	7bbb      	ldrb	r3, [r7, #14]
 80128d0:	2b80      	cmp	r3, #128	; 0x80
 80128d2:	d008      	beq.n	80128e6 <USBD_StdEPReq+0xc0>
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	88db      	ldrh	r3, [r3, #6]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d104      	bne.n	80128e6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80128dc:	7bbb      	ldrb	r3, [r7, #14]
 80128de:	4619      	mov	r1, r3
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f004 f826 	bl	8016932 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 fd06 	bl	80132f8 <USBD_CtlSendStatus>

              break;
 80128ec:	e004      	b.n	80128f8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80128ee:	6839      	ldr	r1, [r7, #0]
 80128f0:	6878      	ldr	r0, [r7, #4]
 80128f2:	f000 fc53 	bl	801319c <USBD_CtlError>
              break;
 80128f6:	bf00      	nop
          }
          break;
 80128f8:	e0ec      	b.n	8012ad4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012900:	b2db      	uxtb	r3, r3
 8012902:	2b02      	cmp	r3, #2
 8012904:	d002      	beq.n	801290c <USBD_StdEPReq+0xe6>
 8012906:	2b03      	cmp	r3, #3
 8012908:	d016      	beq.n	8012938 <USBD_StdEPReq+0x112>
 801290a:	e030      	b.n	801296e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801290c:	7bbb      	ldrb	r3, [r7, #14]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d00d      	beq.n	801292e <USBD_StdEPReq+0x108>
 8012912:	7bbb      	ldrb	r3, [r7, #14]
 8012914:	2b80      	cmp	r3, #128	; 0x80
 8012916:	d00a      	beq.n	801292e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012918:	7bbb      	ldrb	r3, [r7, #14]
 801291a:	4619      	mov	r1, r3
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f004 f808 	bl	8016932 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012922:	2180      	movs	r1, #128	; 0x80
 8012924:	6878      	ldr	r0, [r7, #4]
 8012926:	f004 f804 	bl	8016932 <USBD_LL_StallEP>
 801292a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801292c:	e025      	b.n	801297a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 801292e:	6839      	ldr	r1, [r7, #0]
 8012930:	6878      	ldr	r0, [r7, #4]
 8012932:	f000 fc33 	bl	801319c <USBD_CtlError>
              break;
 8012936:	e020      	b.n	801297a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	885b      	ldrh	r3, [r3, #2]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d11b      	bne.n	8012978 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012940:	7bbb      	ldrb	r3, [r7, #14]
 8012942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012946:	2b00      	cmp	r3, #0
 8012948:	d004      	beq.n	8012954 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801294a:	7bbb      	ldrb	r3, [r7, #14]
 801294c:	4619      	mov	r1, r3
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f004 f80e 	bl	8016970 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012954:	6878      	ldr	r0, [r7, #4]
 8012956:	f000 fccf 	bl	80132f8 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012960:	689b      	ldr	r3, [r3, #8]
 8012962:	6839      	ldr	r1, [r7, #0]
 8012964:	6878      	ldr	r0, [r7, #4]
 8012966:	4798      	blx	r3
 8012968:	4603      	mov	r3, r0
 801296a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 801296c:	e004      	b.n	8012978 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 801296e:	6839      	ldr	r1, [r7, #0]
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f000 fc13 	bl	801319c <USBD_CtlError>
              break;
 8012976:	e000      	b.n	801297a <USBD_StdEPReq+0x154>
              break;
 8012978:	bf00      	nop
          }
          break;
 801297a:	e0ab      	b.n	8012ad4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012982:	b2db      	uxtb	r3, r3
 8012984:	2b02      	cmp	r3, #2
 8012986:	d002      	beq.n	801298e <USBD_StdEPReq+0x168>
 8012988:	2b03      	cmp	r3, #3
 801298a:	d032      	beq.n	80129f2 <USBD_StdEPReq+0x1cc>
 801298c:	e097      	b.n	8012abe <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801298e:	7bbb      	ldrb	r3, [r7, #14]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d007      	beq.n	80129a4 <USBD_StdEPReq+0x17e>
 8012994:	7bbb      	ldrb	r3, [r7, #14]
 8012996:	2b80      	cmp	r3, #128	; 0x80
 8012998:	d004      	beq.n	80129a4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 801299a:	6839      	ldr	r1, [r7, #0]
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f000 fbfd 	bl	801319c <USBD_CtlError>
                break;
 80129a2:	e091      	b.n	8012ac8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80129a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	da0b      	bge.n	80129c4 <USBD_StdEPReq+0x19e>
 80129ac:	7bbb      	ldrb	r3, [r7, #14]
 80129ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80129b2:	4613      	mov	r3, r2
 80129b4:	009b      	lsls	r3, r3, #2
 80129b6:	4413      	add	r3, r2
 80129b8:	009b      	lsls	r3, r3, #2
 80129ba:	3310      	adds	r3, #16
 80129bc:	687a      	ldr	r2, [r7, #4]
 80129be:	4413      	add	r3, r2
 80129c0:	3304      	adds	r3, #4
 80129c2:	e00b      	b.n	80129dc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80129c4:	7bbb      	ldrb	r3, [r7, #14]
 80129c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80129ca:	4613      	mov	r3, r2
 80129cc:	009b      	lsls	r3, r3, #2
 80129ce:	4413      	add	r3, r2
 80129d0:	009b      	lsls	r3, r3, #2
 80129d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80129d6:	687a      	ldr	r2, [r7, #4]
 80129d8:	4413      	add	r3, r2
 80129da:	3304      	adds	r3, #4
 80129dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80129de:	68bb      	ldr	r3, [r7, #8]
 80129e0:	2200      	movs	r2, #0
 80129e2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80129e4:	68bb      	ldr	r3, [r7, #8]
 80129e6:	2202      	movs	r2, #2
 80129e8:	4619      	mov	r1, r3
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f000 fc47 	bl	801327e <USBD_CtlSendData>
              break;
 80129f0:	e06a      	b.n	8012ac8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80129f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	da11      	bge.n	8012a1e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80129fa:	7bbb      	ldrb	r3, [r7, #14]
 80129fc:	f003 020f 	and.w	r2, r3, #15
 8012a00:	6879      	ldr	r1, [r7, #4]
 8012a02:	4613      	mov	r3, r2
 8012a04:	009b      	lsls	r3, r3, #2
 8012a06:	4413      	add	r3, r2
 8012a08:	009b      	lsls	r3, r3, #2
 8012a0a:	440b      	add	r3, r1
 8012a0c:	3324      	adds	r3, #36	; 0x24
 8012a0e:	881b      	ldrh	r3, [r3, #0]
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d117      	bne.n	8012a44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012a14:	6839      	ldr	r1, [r7, #0]
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f000 fbc0 	bl	801319c <USBD_CtlError>
                  break;
 8012a1c:	e054      	b.n	8012ac8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012a1e:	7bbb      	ldrb	r3, [r7, #14]
 8012a20:	f003 020f 	and.w	r2, r3, #15
 8012a24:	6879      	ldr	r1, [r7, #4]
 8012a26:	4613      	mov	r3, r2
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	4413      	add	r3, r2
 8012a2c:	009b      	lsls	r3, r3, #2
 8012a2e:	440b      	add	r3, r1
 8012a30:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012a34:	881b      	ldrh	r3, [r3, #0]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d104      	bne.n	8012a44 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8012a3a:	6839      	ldr	r1, [r7, #0]
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f000 fbad 	bl	801319c <USBD_CtlError>
                  break;
 8012a42:	e041      	b.n	8012ac8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	da0b      	bge.n	8012a64 <USBD_StdEPReq+0x23e>
 8012a4c:	7bbb      	ldrb	r3, [r7, #14]
 8012a4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012a52:	4613      	mov	r3, r2
 8012a54:	009b      	lsls	r3, r3, #2
 8012a56:	4413      	add	r3, r2
 8012a58:	009b      	lsls	r3, r3, #2
 8012a5a:	3310      	adds	r3, #16
 8012a5c:	687a      	ldr	r2, [r7, #4]
 8012a5e:	4413      	add	r3, r2
 8012a60:	3304      	adds	r3, #4
 8012a62:	e00b      	b.n	8012a7c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012a64:	7bbb      	ldrb	r3, [r7, #14]
 8012a66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012a6a:	4613      	mov	r3, r2
 8012a6c:	009b      	lsls	r3, r3, #2
 8012a6e:	4413      	add	r3, r2
 8012a70:	009b      	lsls	r3, r3, #2
 8012a72:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012a76:	687a      	ldr	r2, [r7, #4]
 8012a78:	4413      	add	r3, r2
 8012a7a:	3304      	adds	r3, #4
 8012a7c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012a7e:	7bbb      	ldrb	r3, [r7, #14]
 8012a80:	2b00      	cmp	r3, #0
 8012a82:	d002      	beq.n	8012a8a <USBD_StdEPReq+0x264>
 8012a84:	7bbb      	ldrb	r3, [r7, #14]
 8012a86:	2b80      	cmp	r3, #128	; 0x80
 8012a88:	d103      	bne.n	8012a92 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	601a      	str	r2, [r3, #0]
 8012a90:	e00e      	b.n	8012ab0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8012a92:	7bbb      	ldrb	r3, [r7, #14]
 8012a94:	4619      	mov	r1, r3
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f003 ff89 	bl	80169ae <USBD_LL_IsStallEP>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d003      	beq.n	8012aaa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	2201      	movs	r2, #1
 8012aa6:	601a      	str	r2, [r3, #0]
 8012aa8:	e002      	b.n	8012ab0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	2200      	movs	r2, #0
 8012aae:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	2202      	movs	r2, #2
 8012ab4:	4619      	mov	r1, r3
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	f000 fbe1 	bl	801327e <USBD_CtlSendData>
              break;
 8012abc:	e004      	b.n	8012ac8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8012abe:	6839      	ldr	r1, [r7, #0]
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f000 fb6b 	bl	801319c <USBD_CtlError>
              break;
 8012ac6:	bf00      	nop
          }
          break;
 8012ac8:	e004      	b.n	8012ad4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8012aca:	6839      	ldr	r1, [r7, #0]
 8012acc:	6878      	ldr	r0, [r7, #4]
 8012ace:	f000 fb65 	bl	801319c <USBD_CtlError>
          break;
 8012ad2:	bf00      	nop
      }
      break;
 8012ad4:	e004      	b.n	8012ae0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8012ad6:	6839      	ldr	r1, [r7, #0]
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f000 fb5f 	bl	801319c <USBD_CtlError>
      break;
 8012ade:	bf00      	nop
  }

  return ret;
 8012ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3710      	adds	r7, #16
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}
	...

08012aec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b084      	sub	sp, #16
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
 8012af4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012af6:	2300      	movs	r3, #0
 8012af8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012afa:	2300      	movs	r3, #0
 8012afc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012afe:	2300      	movs	r3, #0
 8012b00:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	885b      	ldrh	r3, [r3, #2]
 8012b06:	0a1b      	lsrs	r3, r3, #8
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	2b0e      	cmp	r3, #14
 8012b0e:	f200 8152 	bhi.w	8012db6 <USBD_GetDescriptor+0x2ca>
 8012b12:	a201      	add	r2, pc, #4	; (adr r2, 8012b18 <USBD_GetDescriptor+0x2c>)
 8012b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012b18:	08012b89 	.word	0x08012b89
 8012b1c:	08012ba1 	.word	0x08012ba1
 8012b20:	08012be1 	.word	0x08012be1
 8012b24:	08012db7 	.word	0x08012db7
 8012b28:	08012db7 	.word	0x08012db7
 8012b2c:	08012d57 	.word	0x08012d57
 8012b30:	08012d83 	.word	0x08012d83
 8012b34:	08012db7 	.word	0x08012db7
 8012b38:	08012db7 	.word	0x08012db7
 8012b3c:	08012db7 	.word	0x08012db7
 8012b40:	08012db7 	.word	0x08012db7
 8012b44:	08012db7 	.word	0x08012db7
 8012b48:	08012db7 	.word	0x08012db7
 8012b4c:	08012db7 	.word	0x08012db7
 8012b50:	08012b55 	.word	0x08012b55
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b5a:	69db      	ldr	r3, [r3, #28]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d00b      	beq.n	8012b78 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b66:	69db      	ldr	r3, [r3, #28]
 8012b68:	687a      	ldr	r2, [r7, #4]
 8012b6a:	7c12      	ldrb	r2, [r2, #16]
 8012b6c:	f107 0108 	add.w	r1, r7, #8
 8012b70:	4610      	mov	r0, r2
 8012b72:	4798      	blx	r3
 8012b74:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b76:	e126      	b.n	8012dc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012b78:	6839      	ldr	r1, [r7, #0]
 8012b7a:	6878      	ldr	r0, [r7, #4]
 8012b7c:	f000 fb0e 	bl	801319c <USBD_CtlError>
        err++;
 8012b80:	7afb      	ldrb	r3, [r7, #11]
 8012b82:	3301      	adds	r3, #1
 8012b84:	72fb      	strb	r3, [r7, #11]
      break;
 8012b86:	e11e      	b.n	8012dc6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	687a      	ldr	r2, [r7, #4]
 8012b92:	7c12      	ldrb	r2, [r2, #16]
 8012b94:	f107 0108 	add.w	r1, r7, #8
 8012b98:	4610      	mov	r0, r2
 8012b9a:	4798      	blx	r3
 8012b9c:	60f8      	str	r0, [r7, #12]
      break;
 8012b9e:	e112      	b.n	8012dc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	7c1b      	ldrb	r3, [r3, #16]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d10d      	bne.n	8012bc4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012bb0:	f107 0208 	add.w	r2, r7, #8
 8012bb4:	4610      	mov	r0, r2
 8012bb6:	4798      	blx	r3
 8012bb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	3301      	adds	r3, #1
 8012bbe:	2202      	movs	r2, #2
 8012bc0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8012bc2:	e100      	b.n	8012dc6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bcc:	f107 0208 	add.w	r2, r7, #8
 8012bd0:	4610      	mov	r0, r2
 8012bd2:	4798      	blx	r3
 8012bd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	3301      	adds	r3, #1
 8012bda:	2202      	movs	r2, #2
 8012bdc:	701a      	strb	r2, [r3, #0]
      break;
 8012bde:	e0f2      	b.n	8012dc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	885b      	ldrh	r3, [r3, #2]
 8012be4:	b2db      	uxtb	r3, r3
 8012be6:	2b05      	cmp	r3, #5
 8012be8:	f200 80ac 	bhi.w	8012d44 <USBD_GetDescriptor+0x258>
 8012bec:	a201      	add	r2, pc, #4	; (adr r2, 8012bf4 <USBD_GetDescriptor+0x108>)
 8012bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012bf2:	bf00      	nop
 8012bf4:	08012c0d 	.word	0x08012c0d
 8012bf8:	08012c41 	.word	0x08012c41
 8012bfc:	08012c75 	.word	0x08012c75
 8012c00:	08012ca9 	.word	0x08012ca9
 8012c04:	08012cdd 	.word	0x08012cdd
 8012c08:	08012d11 	.word	0x08012d11
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c12:	685b      	ldr	r3, [r3, #4]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d00b      	beq.n	8012c30 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	687a      	ldr	r2, [r7, #4]
 8012c22:	7c12      	ldrb	r2, [r2, #16]
 8012c24:	f107 0108 	add.w	r1, r7, #8
 8012c28:	4610      	mov	r0, r2
 8012c2a:	4798      	blx	r3
 8012c2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c2e:	e091      	b.n	8012d54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c30:	6839      	ldr	r1, [r7, #0]
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f000 fab2 	bl	801319c <USBD_CtlError>
            err++;
 8012c38:	7afb      	ldrb	r3, [r7, #11]
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	72fb      	strb	r3, [r7, #11]
          break;
 8012c3e:	e089      	b.n	8012d54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c46:	689b      	ldr	r3, [r3, #8]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d00b      	beq.n	8012c64 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c52:	689b      	ldr	r3, [r3, #8]
 8012c54:	687a      	ldr	r2, [r7, #4]
 8012c56:	7c12      	ldrb	r2, [r2, #16]
 8012c58:	f107 0108 	add.w	r1, r7, #8
 8012c5c:	4610      	mov	r0, r2
 8012c5e:	4798      	blx	r3
 8012c60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c62:	e077      	b.n	8012d54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c64:	6839      	ldr	r1, [r7, #0]
 8012c66:	6878      	ldr	r0, [r7, #4]
 8012c68:	f000 fa98 	bl	801319c <USBD_CtlError>
            err++;
 8012c6c:	7afb      	ldrb	r3, [r7, #11]
 8012c6e:	3301      	adds	r3, #1
 8012c70:	72fb      	strb	r3, [r7, #11]
          break;
 8012c72:	e06f      	b.n	8012d54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c7a:	68db      	ldr	r3, [r3, #12]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d00b      	beq.n	8012c98 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	7c12      	ldrb	r2, [r2, #16]
 8012c8c:	f107 0108 	add.w	r1, r7, #8
 8012c90:	4610      	mov	r0, r2
 8012c92:	4798      	blx	r3
 8012c94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012c96:	e05d      	b.n	8012d54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012c98:	6839      	ldr	r1, [r7, #0]
 8012c9a:	6878      	ldr	r0, [r7, #4]
 8012c9c:	f000 fa7e 	bl	801319c <USBD_CtlError>
            err++;
 8012ca0:	7afb      	ldrb	r3, [r7, #11]
 8012ca2:	3301      	adds	r3, #1
 8012ca4:	72fb      	strb	r3, [r7, #11]
          break;
 8012ca6:	e055      	b.n	8012d54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cae:	691b      	ldr	r3, [r3, #16]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d00b      	beq.n	8012ccc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cba:	691b      	ldr	r3, [r3, #16]
 8012cbc:	687a      	ldr	r2, [r7, #4]
 8012cbe:	7c12      	ldrb	r2, [r2, #16]
 8012cc0:	f107 0108 	add.w	r1, r7, #8
 8012cc4:	4610      	mov	r0, r2
 8012cc6:	4798      	blx	r3
 8012cc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cca:	e043      	b.n	8012d54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012ccc:	6839      	ldr	r1, [r7, #0]
 8012cce:	6878      	ldr	r0, [r7, #4]
 8012cd0:	f000 fa64 	bl	801319c <USBD_CtlError>
            err++;
 8012cd4:	7afb      	ldrb	r3, [r7, #11]
 8012cd6:	3301      	adds	r3, #1
 8012cd8:	72fb      	strb	r3, [r7, #11]
          break;
 8012cda:	e03b      	b.n	8012d54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ce2:	695b      	ldr	r3, [r3, #20]
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d00b      	beq.n	8012d00 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012ce8:	687b      	ldr	r3, [r7, #4]
 8012cea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012cee:	695b      	ldr	r3, [r3, #20]
 8012cf0:	687a      	ldr	r2, [r7, #4]
 8012cf2:	7c12      	ldrb	r2, [r2, #16]
 8012cf4:	f107 0108 	add.w	r1, r7, #8
 8012cf8:	4610      	mov	r0, r2
 8012cfa:	4798      	blx	r3
 8012cfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012cfe:	e029      	b.n	8012d54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012d00:	6839      	ldr	r1, [r7, #0]
 8012d02:	6878      	ldr	r0, [r7, #4]
 8012d04:	f000 fa4a 	bl	801319c <USBD_CtlError>
            err++;
 8012d08:	7afb      	ldrb	r3, [r7, #11]
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	72fb      	strb	r3, [r7, #11]
          break;
 8012d0e:	e021      	b.n	8012d54 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d16:	699b      	ldr	r3, [r3, #24]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d00b      	beq.n	8012d34 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012d1c:	687b      	ldr	r3, [r7, #4]
 8012d1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012d22:	699b      	ldr	r3, [r3, #24]
 8012d24:	687a      	ldr	r2, [r7, #4]
 8012d26:	7c12      	ldrb	r2, [r2, #16]
 8012d28:	f107 0108 	add.w	r1, r7, #8
 8012d2c:	4610      	mov	r0, r2
 8012d2e:	4798      	blx	r3
 8012d30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012d32:	e00f      	b.n	8012d54 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012d34:	6839      	ldr	r1, [r7, #0]
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f000 fa30 	bl	801319c <USBD_CtlError>
            err++;
 8012d3c:	7afb      	ldrb	r3, [r7, #11]
 8012d3e:	3301      	adds	r3, #1
 8012d40:	72fb      	strb	r3, [r7, #11]
          break;
 8012d42:	e007      	b.n	8012d54 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012d44:	6839      	ldr	r1, [r7, #0]
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f000 fa28 	bl	801319c <USBD_CtlError>
          err++;
 8012d4c:	7afb      	ldrb	r3, [r7, #11]
 8012d4e:	3301      	adds	r3, #1
 8012d50:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8012d52:	bf00      	nop
      }
      break;
 8012d54:	e037      	b.n	8012dc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	7c1b      	ldrb	r3, [r3, #16]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d109      	bne.n	8012d72 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d66:	f107 0208 	add.w	r2, r7, #8
 8012d6a:	4610      	mov	r0, r2
 8012d6c:	4798      	blx	r3
 8012d6e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012d70:	e029      	b.n	8012dc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012d72:	6839      	ldr	r1, [r7, #0]
 8012d74:	6878      	ldr	r0, [r7, #4]
 8012d76:	f000 fa11 	bl	801319c <USBD_CtlError>
        err++;
 8012d7a:	7afb      	ldrb	r3, [r7, #11]
 8012d7c:	3301      	adds	r3, #1
 8012d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8012d80:	e021      	b.n	8012dc6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	7c1b      	ldrb	r3, [r3, #16]
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d10d      	bne.n	8012da6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d92:	f107 0208 	add.w	r2, r7, #8
 8012d96:	4610      	mov	r0, r2
 8012d98:	4798      	blx	r3
 8012d9a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	3301      	adds	r3, #1
 8012da0:	2207      	movs	r2, #7
 8012da2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012da4:	e00f      	b.n	8012dc6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012da6:	6839      	ldr	r1, [r7, #0]
 8012da8:	6878      	ldr	r0, [r7, #4]
 8012daa:	f000 f9f7 	bl	801319c <USBD_CtlError>
        err++;
 8012dae:	7afb      	ldrb	r3, [r7, #11]
 8012db0:	3301      	adds	r3, #1
 8012db2:	72fb      	strb	r3, [r7, #11]
      break;
 8012db4:	e007      	b.n	8012dc6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012db6:	6839      	ldr	r1, [r7, #0]
 8012db8:	6878      	ldr	r0, [r7, #4]
 8012dba:	f000 f9ef 	bl	801319c <USBD_CtlError>
      err++;
 8012dbe:	7afb      	ldrb	r3, [r7, #11]
 8012dc0:	3301      	adds	r3, #1
 8012dc2:	72fb      	strb	r3, [r7, #11]
      break;
 8012dc4:	bf00      	nop
  }

  if (err != 0U)
 8012dc6:	7afb      	ldrb	r3, [r7, #11]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d11e      	bne.n	8012e0a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012dcc:	683b      	ldr	r3, [r7, #0]
 8012dce:	88db      	ldrh	r3, [r3, #6]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d016      	beq.n	8012e02 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012dd4:	893b      	ldrh	r3, [r7, #8]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d00e      	beq.n	8012df8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012dda:	683b      	ldr	r3, [r7, #0]
 8012ddc:	88da      	ldrh	r2, [r3, #6]
 8012dde:	893b      	ldrh	r3, [r7, #8]
 8012de0:	4293      	cmp	r3, r2
 8012de2:	bf28      	it	cs
 8012de4:	4613      	movcs	r3, r2
 8012de6:	b29b      	uxth	r3, r3
 8012de8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012dea:	893b      	ldrh	r3, [r7, #8]
 8012dec:	461a      	mov	r2, r3
 8012dee:	68f9      	ldr	r1, [r7, #12]
 8012df0:	6878      	ldr	r0, [r7, #4]
 8012df2:	f000 fa44 	bl	801327e <USBD_CtlSendData>
 8012df6:	e009      	b.n	8012e0c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012df8:	6839      	ldr	r1, [r7, #0]
 8012dfa:	6878      	ldr	r0, [r7, #4]
 8012dfc:	f000 f9ce 	bl	801319c <USBD_CtlError>
 8012e00:	e004      	b.n	8012e0c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012e02:	6878      	ldr	r0, [r7, #4]
 8012e04:	f000 fa78 	bl	80132f8 <USBD_CtlSendStatus>
 8012e08:	e000      	b.n	8012e0c <USBD_GetDescriptor+0x320>
    return;
 8012e0a:	bf00      	nop
  }
}
 8012e0c:	3710      	adds	r7, #16
 8012e0e:	46bd      	mov	sp, r7
 8012e10:	bd80      	pop	{r7, pc}
 8012e12:	bf00      	nop

08012e14 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b084      	sub	sp, #16
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
 8012e1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012e1e:	683b      	ldr	r3, [r7, #0]
 8012e20:	889b      	ldrh	r3, [r3, #4]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d131      	bne.n	8012e8a <USBD_SetAddress+0x76>
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	88db      	ldrh	r3, [r3, #6]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d12d      	bne.n	8012e8a <USBD_SetAddress+0x76>
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	885b      	ldrh	r3, [r3, #2]
 8012e32:	2b7f      	cmp	r3, #127	; 0x7f
 8012e34:	d829      	bhi.n	8012e8a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012e36:	683b      	ldr	r3, [r7, #0]
 8012e38:	885b      	ldrh	r3, [r3, #2]
 8012e3a:	b2db      	uxtb	r3, r3
 8012e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012e40:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e48:	b2db      	uxtb	r3, r3
 8012e4a:	2b03      	cmp	r3, #3
 8012e4c:	d104      	bne.n	8012e58 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012e4e:	6839      	ldr	r1, [r7, #0]
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f000 f9a3 	bl	801319c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e56:	e01d      	b.n	8012e94 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	7bfa      	ldrb	r2, [r7, #15]
 8012e5c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012e60:	7bfb      	ldrb	r3, [r7, #15]
 8012e62:	4619      	mov	r1, r3
 8012e64:	6878      	ldr	r0, [r7, #4]
 8012e66:	f003 fdce 	bl	8016a06 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012e6a:	6878      	ldr	r0, [r7, #4]
 8012e6c:	f000 fa44 	bl	80132f8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012e70:	7bfb      	ldrb	r3, [r7, #15]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d004      	beq.n	8012e80 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	2202      	movs	r2, #2
 8012e7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e7e:	e009      	b.n	8012e94 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	2201      	movs	r2, #1
 8012e84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e88:	e004      	b.n	8012e94 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012e8a:	6839      	ldr	r1, [r7, #0]
 8012e8c:	6878      	ldr	r0, [r7, #4]
 8012e8e:	f000 f985 	bl	801319c <USBD_CtlError>
  }
}
 8012e92:	bf00      	nop
 8012e94:	bf00      	nop
 8012e96:	3710      	adds	r7, #16
 8012e98:	46bd      	mov	sp, r7
 8012e9a:	bd80      	pop	{r7, pc}

08012e9c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b084      	sub	sp, #16
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
 8012ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012eaa:	683b      	ldr	r3, [r7, #0]
 8012eac:	885b      	ldrh	r3, [r3, #2]
 8012eae:	b2da      	uxtb	r2, r3
 8012eb0:	4b4c      	ldr	r3, [pc, #304]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012eb2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012eb4:	4b4b      	ldr	r3, [pc, #300]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	2b01      	cmp	r3, #1
 8012eba:	d905      	bls.n	8012ec8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012ebc:	6839      	ldr	r1, [r7, #0]
 8012ebe:	6878      	ldr	r0, [r7, #4]
 8012ec0:	f000 f96c 	bl	801319c <USBD_CtlError>
    return USBD_FAIL;
 8012ec4:	2303      	movs	r3, #3
 8012ec6:	e088      	b.n	8012fda <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ece:	b2db      	uxtb	r3, r3
 8012ed0:	2b02      	cmp	r3, #2
 8012ed2:	d002      	beq.n	8012eda <USBD_SetConfig+0x3e>
 8012ed4:	2b03      	cmp	r3, #3
 8012ed6:	d025      	beq.n	8012f24 <USBD_SetConfig+0x88>
 8012ed8:	e071      	b.n	8012fbe <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012eda:	4b42      	ldr	r3, [pc, #264]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d01c      	beq.n	8012f1c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8012ee2:	4b40      	ldr	r3, [pc, #256]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012eec:	4b3d      	ldr	r3, [pc, #244]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012eee:	781b      	ldrb	r3, [r3, #0]
 8012ef0:	4619      	mov	r1, r3
 8012ef2:	6878      	ldr	r0, [r7, #4]
 8012ef4:	f7ff f91f 	bl	8012136 <USBD_SetClassConfig>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012efc:	7bfb      	ldrb	r3, [r7, #15]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d004      	beq.n	8012f0c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8012f02:	6839      	ldr	r1, [r7, #0]
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f000 f949 	bl	801319c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f0a:	e065      	b.n	8012fd8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012f0c:	6878      	ldr	r0, [r7, #4]
 8012f0e:	f000 f9f3 	bl	80132f8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	2203      	movs	r2, #3
 8012f16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012f1a:	e05d      	b.n	8012fd8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012f1c:	6878      	ldr	r0, [r7, #4]
 8012f1e:	f000 f9eb 	bl	80132f8 <USBD_CtlSendStatus>
      break;
 8012f22:	e059      	b.n	8012fd8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012f24:	4b2f      	ldr	r3, [pc, #188]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d112      	bne.n	8012f52 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	2202      	movs	r2, #2
 8012f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012f34:	4b2b      	ldr	r3, [pc, #172]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012f36:	781b      	ldrb	r3, [r3, #0]
 8012f38:	461a      	mov	r2, r3
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012f3e:	4b29      	ldr	r3, [pc, #164]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012f40:	781b      	ldrb	r3, [r3, #0]
 8012f42:	4619      	mov	r1, r3
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f7ff f912 	bl	801216e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f000 f9d4 	bl	80132f8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012f50:	e042      	b.n	8012fd8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8012f52:	4b24      	ldr	r3, [pc, #144]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012f54:	781b      	ldrb	r3, [r3, #0]
 8012f56:	461a      	mov	r2, r3
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d02a      	beq.n	8012fb6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	4619      	mov	r1, r3
 8012f68:	6878      	ldr	r0, [r7, #4]
 8012f6a:	f7ff f900 	bl	801216e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012f6e:	4b1d      	ldr	r3, [pc, #116]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012f70:	781b      	ldrb	r3, [r3, #0]
 8012f72:	461a      	mov	r2, r3
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012f78:	4b1a      	ldr	r3, [pc, #104]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f7ff f8d9 	bl	8012136 <USBD_SetClassConfig>
 8012f84:	4603      	mov	r3, r0
 8012f86:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012f88:	7bfb      	ldrb	r3, [r7, #15]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d00f      	beq.n	8012fae <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8012f8e:	6839      	ldr	r1, [r7, #0]
 8012f90:	6878      	ldr	r0, [r7, #4]
 8012f92:	f000 f903 	bl	801319c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	685b      	ldr	r3, [r3, #4]
 8012f9a:	b2db      	uxtb	r3, r3
 8012f9c:	4619      	mov	r1, r3
 8012f9e:	6878      	ldr	r0, [r7, #4]
 8012fa0:	f7ff f8e5 	bl	801216e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	2202      	movs	r2, #2
 8012fa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012fac:	e014      	b.n	8012fd8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 f9a2 	bl	80132f8 <USBD_CtlSendStatus>
      break;
 8012fb4:	e010      	b.n	8012fd8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f000 f99e 	bl	80132f8 <USBD_CtlSendStatus>
      break;
 8012fbc:	e00c      	b.n	8012fd8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8012fbe:	6839      	ldr	r1, [r7, #0]
 8012fc0:	6878      	ldr	r0, [r7, #4]
 8012fc2:	f000 f8eb 	bl	801319c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012fc6:	4b07      	ldr	r3, [pc, #28]	; (8012fe4 <USBD_SetConfig+0x148>)
 8012fc8:	781b      	ldrb	r3, [r3, #0]
 8012fca:	4619      	mov	r1, r3
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f7ff f8ce 	bl	801216e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012fd2:	2303      	movs	r3, #3
 8012fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8012fd6:	bf00      	nop
  }

  return ret;
 8012fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3710      	adds	r7, #16
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	20000200 	.word	0x20000200

08012fe8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b082      	sub	sp, #8
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	6078      	str	r0, [r7, #4]
 8012ff0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012ff2:	683b      	ldr	r3, [r7, #0]
 8012ff4:	88db      	ldrh	r3, [r3, #6]
 8012ff6:	2b01      	cmp	r3, #1
 8012ff8:	d004      	beq.n	8013004 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012ffa:	6839      	ldr	r1, [r7, #0]
 8012ffc:	6878      	ldr	r0, [r7, #4]
 8012ffe:	f000 f8cd 	bl	801319c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013002:	e023      	b.n	801304c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801300a:	b2db      	uxtb	r3, r3
 801300c:	2b02      	cmp	r3, #2
 801300e:	dc02      	bgt.n	8013016 <USBD_GetConfig+0x2e>
 8013010:	2b00      	cmp	r3, #0
 8013012:	dc03      	bgt.n	801301c <USBD_GetConfig+0x34>
 8013014:	e015      	b.n	8013042 <USBD_GetConfig+0x5a>
 8013016:	2b03      	cmp	r3, #3
 8013018:	d00b      	beq.n	8013032 <USBD_GetConfig+0x4a>
 801301a:	e012      	b.n	8013042 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	2200      	movs	r2, #0
 8013020:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	3308      	adds	r3, #8
 8013026:	2201      	movs	r2, #1
 8013028:	4619      	mov	r1, r3
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f000 f927 	bl	801327e <USBD_CtlSendData>
        break;
 8013030:	e00c      	b.n	801304c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	3304      	adds	r3, #4
 8013036:	2201      	movs	r2, #1
 8013038:	4619      	mov	r1, r3
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f000 f91f 	bl	801327e <USBD_CtlSendData>
        break;
 8013040:	e004      	b.n	801304c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013042:	6839      	ldr	r1, [r7, #0]
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f000 f8a9 	bl	801319c <USBD_CtlError>
        break;
 801304a:	bf00      	nop
}
 801304c:	bf00      	nop
 801304e:	3708      	adds	r7, #8
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013054:	b580      	push	{r7, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
 801305c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013064:	b2db      	uxtb	r3, r3
 8013066:	3b01      	subs	r3, #1
 8013068:	2b02      	cmp	r3, #2
 801306a:	d81e      	bhi.n	80130aa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801306c:	683b      	ldr	r3, [r7, #0]
 801306e:	88db      	ldrh	r3, [r3, #6]
 8013070:	2b02      	cmp	r3, #2
 8013072:	d004      	beq.n	801307e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013074:	6839      	ldr	r1, [r7, #0]
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f000 f890 	bl	801319c <USBD_CtlError>
        break;
 801307c:	e01a      	b.n	80130b4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	2201      	movs	r2, #1
 8013082:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801308a:	2b00      	cmp	r3, #0
 801308c:	d005      	beq.n	801309a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	68db      	ldr	r3, [r3, #12]
 8013092:	f043 0202 	orr.w	r2, r3, #2
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	330c      	adds	r3, #12
 801309e:	2202      	movs	r2, #2
 80130a0:	4619      	mov	r1, r3
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f000 f8eb 	bl	801327e <USBD_CtlSendData>
      break;
 80130a8:	e004      	b.n	80130b4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80130aa:	6839      	ldr	r1, [r7, #0]
 80130ac:	6878      	ldr	r0, [r7, #4]
 80130ae:	f000 f875 	bl	801319c <USBD_CtlError>
      break;
 80130b2:	bf00      	nop
  }
}
 80130b4:	bf00      	nop
 80130b6:	3708      	adds	r7, #8
 80130b8:	46bd      	mov	sp, r7
 80130ba:	bd80      	pop	{r7, pc}

080130bc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130bc:	b580      	push	{r7, lr}
 80130be:	b082      	sub	sp, #8
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	6078      	str	r0, [r7, #4]
 80130c4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	885b      	ldrh	r3, [r3, #2]
 80130ca:	2b01      	cmp	r3, #1
 80130cc:	d106      	bne.n	80130dc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2201      	movs	r2, #1
 80130d2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f000 f90e 	bl	80132f8 <USBD_CtlSendStatus>
  }
}
 80130dc:	bf00      	nop
 80130de:	3708      	adds	r7, #8
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	3b01      	subs	r3, #1
 80130f8:	2b02      	cmp	r3, #2
 80130fa:	d80b      	bhi.n	8013114 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	885b      	ldrh	r3, [r3, #2]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d10c      	bne.n	801311e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2200      	movs	r2, #0
 8013108:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f000 f8f3 	bl	80132f8 <USBD_CtlSendStatus>
      }
      break;
 8013112:	e004      	b.n	801311e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013114:	6839      	ldr	r1, [r7, #0]
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f000 f840 	bl	801319c <USBD_CtlError>
      break;
 801311c:	e000      	b.n	8013120 <USBD_ClrFeature+0x3c>
      break;
 801311e:	bf00      	nop
  }
}
 8013120:	bf00      	nop
 8013122:	3708      	adds	r7, #8
 8013124:	46bd      	mov	sp, r7
 8013126:	bd80      	pop	{r7, pc}

08013128 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
 8013130:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	781a      	ldrb	r2, [r3, #0]
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	3301      	adds	r3, #1
 8013142:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	781a      	ldrb	r2, [r3, #0]
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	3301      	adds	r3, #1
 8013150:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013152:	68f8      	ldr	r0, [r7, #12]
 8013154:	f7ff fa92 	bl	801267c <SWAPBYTE>
 8013158:	4603      	mov	r3, r0
 801315a:	461a      	mov	r2, r3
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	3301      	adds	r3, #1
 8013164:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	3301      	adds	r3, #1
 801316a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801316c:	68f8      	ldr	r0, [r7, #12]
 801316e:	f7ff fa85 	bl	801267c <SWAPBYTE>
 8013172:	4603      	mov	r3, r0
 8013174:	461a      	mov	r2, r3
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	3301      	adds	r3, #1
 801317e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	3301      	adds	r3, #1
 8013184:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013186:	68f8      	ldr	r0, [r7, #12]
 8013188:	f7ff fa78 	bl	801267c <SWAPBYTE>
 801318c:	4603      	mov	r3, r0
 801318e:	461a      	mov	r2, r3
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	80da      	strh	r2, [r3, #6]
}
 8013194:	bf00      	nop
 8013196:	3710      	adds	r7, #16
 8013198:	46bd      	mov	sp, r7
 801319a:	bd80      	pop	{r7, pc}

0801319c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	b082      	sub	sp, #8
 80131a0:	af00      	add	r7, sp, #0
 80131a2:	6078      	str	r0, [r7, #4]
 80131a4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80131a6:	2180      	movs	r1, #128	; 0x80
 80131a8:	6878      	ldr	r0, [r7, #4]
 80131aa:	f003 fbc2 	bl	8016932 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80131ae:	2100      	movs	r1, #0
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f003 fbbe 	bl	8016932 <USBD_LL_StallEP>
}
 80131b6:	bf00      	nop
 80131b8:	3708      	adds	r7, #8
 80131ba:	46bd      	mov	sp, r7
 80131bc:	bd80      	pop	{r7, pc}

080131be <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80131be:	b580      	push	{r7, lr}
 80131c0:	b086      	sub	sp, #24
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	60f8      	str	r0, [r7, #12]
 80131c6:	60b9      	str	r1, [r7, #8]
 80131c8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80131ca:	2300      	movs	r3, #0
 80131cc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d036      	beq.n	8013242 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80131d8:	6938      	ldr	r0, [r7, #16]
 80131da:	f000 f836 	bl	801324a <USBD_GetLen>
 80131de:	4603      	mov	r3, r0
 80131e0:	3301      	adds	r3, #1
 80131e2:	b29b      	uxth	r3, r3
 80131e4:	005b      	lsls	r3, r3, #1
 80131e6:	b29a      	uxth	r2, r3
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80131ec:	7dfb      	ldrb	r3, [r7, #23]
 80131ee:	68ba      	ldr	r2, [r7, #8]
 80131f0:	4413      	add	r3, r2
 80131f2:	687a      	ldr	r2, [r7, #4]
 80131f4:	7812      	ldrb	r2, [r2, #0]
 80131f6:	701a      	strb	r2, [r3, #0]
  idx++;
 80131f8:	7dfb      	ldrb	r3, [r7, #23]
 80131fa:	3301      	adds	r3, #1
 80131fc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80131fe:	7dfb      	ldrb	r3, [r7, #23]
 8013200:	68ba      	ldr	r2, [r7, #8]
 8013202:	4413      	add	r3, r2
 8013204:	2203      	movs	r2, #3
 8013206:	701a      	strb	r2, [r3, #0]
  idx++;
 8013208:	7dfb      	ldrb	r3, [r7, #23]
 801320a:	3301      	adds	r3, #1
 801320c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801320e:	e013      	b.n	8013238 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8013210:	7dfb      	ldrb	r3, [r7, #23]
 8013212:	68ba      	ldr	r2, [r7, #8]
 8013214:	4413      	add	r3, r2
 8013216:	693a      	ldr	r2, [r7, #16]
 8013218:	7812      	ldrb	r2, [r2, #0]
 801321a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	3301      	adds	r3, #1
 8013220:	613b      	str	r3, [r7, #16]
    idx++;
 8013222:	7dfb      	ldrb	r3, [r7, #23]
 8013224:	3301      	adds	r3, #1
 8013226:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013228:	7dfb      	ldrb	r3, [r7, #23]
 801322a:	68ba      	ldr	r2, [r7, #8]
 801322c:	4413      	add	r3, r2
 801322e:	2200      	movs	r2, #0
 8013230:	701a      	strb	r2, [r3, #0]
    idx++;
 8013232:	7dfb      	ldrb	r3, [r7, #23]
 8013234:	3301      	adds	r3, #1
 8013236:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	781b      	ldrb	r3, [r3, #0]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d1e7      	bne.n	8013210 <USBD_GetString+0x52>
 8013240:	e000      	b.n	8013244 <USBD_GetString+0x86>
    return;
 8013242:	bf00      	nop
  }
}
 8013244:	3718      	adds	r7, #24
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}

0801324a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801324a:	b480      	push	{r7}
 801324c:	b085      	sub	sp, #20
 801324e:	af00      	add	r7, sp, #0
 8013250:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013252:	2300      	movs	r3, #0
 8013254:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801325a:	e005      	b.n	8013268 <USBD_GetLen+0x1e>
  {
    len++;
 801325c:	7bfb      	ldrb	r3, [r7, #15]
 801325e:	3301      	adds	r3, #1
 8013260:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	3301      	adds	r3, #1
 8013266:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	781b      	ldrb	r3, [r3, #0]
 801326c:	2b00      	cmp	r3, #0
 801326e:	d1f5      	bne.n	801325c <USBD_GetLen+0x12>
  }

  return len;
 8013270:	7bfb      	ldrb	r3, [r7, #15]
}
 8013272:	4618      	mov	r0, r3
 8013274:	3714      	adds	r7, #20
 8013276:	46bd      	mov	sp, r7
 8013278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801327c:	4770      	bx	lr

0801327e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801327e:	b580      	push	{r7, lr}
 8013280:	b084      	sub	sp, #16
 8013282:	af00      	add	r7, sp, #0
 8013284:	60f8      	str	r0, [r7, #12]
 8013286:	60b9      	str	r1, [r7, #8]
 8013288:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	2202      	movs	r2, #2
 801328e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	687a      	ldr	r2, [r7, #4]
 8013296:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	687a      	ldr	r2, [r7, #4]
 801329c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	68ba      	ldr	r2, [r7, #8]
 80132a2:	2100      	movs	r1, #0
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	f003 fbcd 	bl	8016a44 <USBD_LL_Transmit>

  return USBD_OK;
 80132aa:	2300      	movs	r3, #0
}
 80132ac:	4618      	mov	r0, r3
 80132ae:	3710      	adds	r7, #16
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}

080132b4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b084      	sub	sp, #16
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	60f8      	str	r0, [r7, #12]
 80132bc:	60b9      	str	r1, [r7, #8]
 80132be:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	68ba      	ldr	r2, [r7, #8]
 80132c4:	2100      	movs	r1, #0
 80132c6:	68f8      	ldr	r0, [r7, #12]
 80132c8:	f003 fbbc 	bl	8016a44 <USBD_LL_Transmit>

  return USBD_OK;
 80132cc:	2300      	movs	r3, #0
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3710      	adds	r7, #16
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}

080132d6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80132d6:	b580      	push	{r7, lr}
 80132d8:	b084      	sub	sp, #16
 80132da:	af00      	add	r7, sp, #0
 80132dc:	60f8      	str	r0, [r7, #12]
 80132de:	60b9      	str	r1, [r7, #8]
 80132e0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	68ba      	ldr	r2, [r7, #8]
 80132e6:	2100      	movs	r1, #0
 80132e8:	68f8      	ldr	r0, [r7, #12]
 80132ea:	f003 fbcc 	bl	8016a86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80132ee:	2300      	movs	r3, #0
}
 80132f0:	4618      	mov	r0, r3
 80132f2:	3710      	adds	r7, #16
 80132f4:	46bd      	mov	sp, r7
 80132f6:	bd80      	pop	{r7, pc}

080132f8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	2204      	movs	r2, #4
 8013304:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013308:	2300      	movs	r3, #0
 801330a:	2200      	movs	r2, #0
 801330c:	2100      	movs	r1, #0
 801330e:	6878      	ldr	r0, [r7, #4]
 8013310:	f003 fb98 	bl	8016a44 <USBD_LL_Transmit>

  return USBD_OK;
 8013314:	2300      	movs	r3, #0
}
 8013316:	4618      	mov	r0, r3
 8013318:	3708      	adds	r7, #8
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}

0801331e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801331e:	b580      	push	{r7, lr}
 8013320:	b082      	sub	sp, #8
 8013322:	af00      	add	r7, sp, #0
 8013324:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	2205      	movs	r2, #5
 801332a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801332e:	2300      	movs	r3, #0
 8013330:	2200      	movs	r2, #0
 8013332:	2100      	movs	r1, #0
 8013334:	6878      	ldr	r0, [r7, #4]
 8013336:	f003 fba6 	bl	8016a86 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801333a:	2300      	movs	r3, #0
}
 801333c:	4618      	mov	r0, r3
 801333e:	3708      	adds	r7, #8
 8013340:	46bd      	mov	sp, r7
 8013342:	bd80      	pop	{r7, pc}

08013344 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b084      	sub	sp, #16
 8013348:	af00      	add	r7, sp, #0
 801334a:	4603      	mov	r3, r0
 801334c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801334e:	79fb      	ldrb	r3, [r7, #7]
 8013350:	4a08      	ldr	r2, [pc, #32]	; (8013374 <disk_status+0x30>)
 8013352:	009b      	lsls	r3, r3, #2
 8013354:	4413      	add	r3, r2
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	79fa      	ldrb	r2, [r7, #7]
 801335c:	4905      	ldr	r1, [pc, #20]	; (8013374 <disk_status+0x30>)
 801335e:	440a      	add	r2, r1
 8013360:	7a12      	ldrb	r2, [r2, #8]
 8013362:	4610      	mov	r0, r2
 8013364:	4798      	blx	r3
 8013366:	4603      	mov	r3, r0
 8013368:	73fb      	strb	r3, [r7, #15]
  return stat;
 801336a:	7bfb      	ldrb	r3, [r7, #15]
}
 801336c:	4618      	mov	r0, r3
 801336e:	3710      	adds	r7, #16
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	2000040c 	.word	0x2000040c

08013378 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b084      	sub	sp, #16
 801337c:	af00      	add	r7, sp, #0
 801337e:	4603      	mov	r3, r0
 8013380:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8013382:	2300      	movs	r3, #0
 8013384:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8013386:	79fb      	ldrb	r3, [r7, #7]
 8013388:	4a0d      	ldr	r2, [pc, #52]	; (80133c0 <disk_initialize+0x48>)
 801338a:	5cd3      	ldrb	r3, [r2, r3]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d111      	bne.n	80133b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8013390:	79fb      	ldrb	r3, [r7, #7]
 8013392:	4a0b      	ldr	r2, [pc, #44]	; (80133c0 <disk_initialize+0x48>)
 8013394:	2101      	movs	r1, #1
 8013396:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8013398:	79fb      	ldrb	r3, [r7, #7]
 801339a:	4a09      	ldr	r2, [pc, #36]	; (80133c0 <disk_initialize+0x48>)
 801339c:	009b      	lsls	r3, r3, #2
 801339e:	4413      	add	r3, r2
 80133a0:	685b      	ldr	r3, [r3, #4]
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	79fa      	ldrb	r2, [r7, #7]
 80133a6:	4906      	ldr	r1, [pc, #24]	; (80133c0 <disk_initialize+0x48>)
 80133a8:	440a      	add	r2, r1
 80133aa:	7a12      	ldrb	r2, [r2, #8]
 80133ac:	4610      	mov	r0, r2
 80133ae:	4798      	blx	r3
 80133b0:	4603      	mov	r3, r0
 80133b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80133b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	2000040c 	.word	0x2000040c

080133c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80133c4:	b590      	push	{r4, r7, lr}
 80133c6:	b087      	sub	sp, #28
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	60b9      	str	r1, [r7, #8]
 80133cc:	607a      	str	r2, [r7, #4]
 80133ce:	603b      	str	r3, [r7, #0]
 80133d0:	4603      	mov	r3, r0
 80133d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80133d4:	7bfb      	ldrb	r3, [r7, #15]
 80133d6:	4a0a      	ldr	r2, [pc, #40]	; (8013400 <disk_read+0x3c>)
 80133d8:	009b      	lsls	r3, r3, #2
 80133da:	4413      	add	r3, r2
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	689c      	ldr	r4, [r3, #8]
 80133e0:	7bfb      	ldrb	r3, [r7, #15]
 80133e2:	4a07      	ldr	r2, [pc, #28]	; (8013400 <disk_read+0x3c>)
 80133e4:	4413      	add	r3, r2
 80133e6:	7a18      	ldrb	r0, [r3, #8]
 80133e8:	683b      	ldr	r3, [r7, #0]
 80133ea:	687a      	ldr	r2, [r7, #4]
 80133ec:	68b9      	ldr	r1, [r7, #8]
 80133ee:	47a0      	blx	r4
 80133f0:	4603      	mov	r3, r0
 80133f2:	75fb      	strb	r3, [r7, #23]
  return res;
 80133f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80133f6:	4618      	mov	r0, r3
 80133f8:	371c      	adds	r7, #28
 80133fa:	46bd      	mov	sp, r7
 80133fc:	bd90      	pop	{r4, r7, pc}
 80133fe:	bf00      	nop
 8013400:	2000040c 	.word	0x2000040c

08013404 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8013404:	b590      	push	{r4, r7, lr}
 8013406:	b087      	sub	sp, #28
 8013408:	af00      	add	r7, sp, #0
 801340a:	60b9      	str	r1, [r7, #8]
 801340c:	607a      	str	r2, [r7, #4]
 801340e:	603b      	str	r3, [r7, #0]
 8013410:	4603      	mov	r3, r0
 8013412:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8013414:	7bfb      	ldrb	r3, [r7, #15]
 8013416:	4a0a      	ldr	r2, [pc, #40]	; (8013440 <disk_write+0x3c>)
 8013418:	009b      	lsls	r3, r3, #2
 801341a:	4413      	add	r3, r2
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	68dc      	ldr	r4, [r3, #12]
 8013420:	7bfb      	ldrb	r3, [r7, #15]
 8013422:	4a07      	ldr	r2, [pc, #28]	; (8013440 <disk_write+0x3c>)
 8013424:	4413      	add	r3, r2
 8013426:	7a18      	ldrb	r0, [r3, #8]
 8013428:	683b      	ldr	r3, [r7, #0]
 801342a:	687a      	ldr	r2, [r7, #4]
 801342c:	68b9      	ldr	r1, [r7, #8]
 801342e:	47a0      	blx	r4
 8013430:	4603      	mov	r3, r0
 8013432:	75fb      	strb	r3, [r7, #23]
  return res;
 8013434:	7dfb      	ldrb	r3, [r7, #23]
}
 8013436:	4618      	mov	r0, r3
 8013438:	371c      	adds	r7, #28
 801343a:	46bd      	mov	sp, r7
 801343c:	bd90      	pop	{r4, r7, pc}
 801343e:	bf00      	nop
 8013440:	2000040c 	.word	0x2000040c

08013444 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8013444:	b580      	push	{r7, lr}
 8013446:	b084      	sub	sp, #16
 8013448:	af00      	add	r7, sp, #0
 801344a:	4603      	mov	r3, r0
 801344c:	603a      	str	r2, [r7, #0]
 801344e:	71fb      	strb	r3, [r7, #7]
 8013450:	460b      	mov	r3, r1
 8013452:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8013454:	79fb      	ldrb	r3, [r7, #7]
 8013456:	4a09      	ldr	r2, [pc, #36]	; (801347c <disk_ioctl+0x38>)
 8013458:	009b      	lsls	r3, r3, #2
 801345a:	4413      	add	r3, r2
 801345c:	685b      	ldr	r3, [r3, #4]
 801345e:	691b      	ldr	r3, [r3, #16]
 8013460:	79fa      	ldrb	r2, [r7, #7]
 8013462:	4906      	ldr	r1, [pc, #24]	; (801347c <disk_ioctl+0x38>)
 8013464:	440a      	add	r2, r1
 8013466:	7a10      	ldrb	r0, [r2, #8]
 8013468:	79b9      	ldrb	r1, [r7, #6]
 801346a:	683a      	ldr	r2, [r7, #0]
 801346c:	4798      	blx	r3
 801346e:	4603      	mov	r3, r0
 8013470:	73fb      	strb	r3, [r7, #15]
  return res;
 8013472:	7bfb      	ldrb	r3, [r7, #15]
}
 8013474:	4618      	mov	r0, r3
 8013476:	3710      	adds	r7, #16
 8013478:	46bd      	mov	sp, r7
 801347a:	bd80      	pop	{r7, pc}
 801347c:	2000040c 	.word	0x2000040c

08013480 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8013480:	b480      	push	{r7}
 8013482:	b085      	sub	sp, #20
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	3301      	adds	r3, #1
 801348c:	781b      	ldrb	r3, [r3, #0]
 801348e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8013490:	89fb      	ldrh	r3, [r7, #14]
 8013492:	021b      	lsls	r3, r3, #8
 8013494:	b21a      	sxth	r2, r3
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	781b      	ldrb	r3, [r3, #0]
 801349a:	b21b      	sxth	r3, r3
 801349c:	4313      	orrs	r3, r2
 801349e:	b21b      	sxth	r3, r3
 80134a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 80134a2:	89fb      	ldrh	r3, [r7, #14]
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3714      	adds	r7, #20
 80134a8:	46bd      	mov	sp, r7
 80134aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ae:	4770      	bx	lr

080134b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80134b0:	b480      	push	{r7}
 80134b2:	b085      	sub	sp, #20
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	3303      	adds	r3, #3
 80134bc:	781b      	ldrb	r3, [r3, #0]
 80134be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80134c0:	68fb      	ldr	r3, [r7, #12]
 80134c2:	021b      	lsls	r3, r3, #8
 80134c4:	687a      	ldr	r2, [r7, #4]
 80134c6:	3202      	adds	r2, #2
 80134c8:	7812      	ldrb	r2, [r2, #0]
 80134ca:	4313      	orrs	r3, r2
 80134cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80134ce:	68fb      	ldr	r3, [r7, #12]
 80134d0:	021b      	lsls	r3, r3, #8
 80134d2:	687a      	ldr	r2, [r7, #4]
 80134d4:	3201      	adds	r2, #1
 80134d6:	7812      	ldrb	r2, [r2, #0]
 80134d8:	4313      	orrs	r3, r2
 80134da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	021b      	lsls	r3, r3, #8
 80134e0:	687a      	ldr	r2, [r7, #4]
 80134e2:	7812      	ldrb	r2, [r2, #0]
 80134e4:	4313      	orrs	r3, r2
 80134e6:	60fb      	str	r3, [r7, #12]
	return rv;
 80134e8:	68fb      	ldr	r3, [r7, #12]
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	3714      	adds	r7, #20
 80134ee:	46bd      	mov	sp, r7
 80134f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f4:	4770      	bx	lr

080134f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80134f6:	b480      	push	{r7}
 80134f8:	b083      	sub	sp, #12
 80134fa:	af00      	add	r7, sp, #0
 80134fc:	6078      	str	r0, [r7, #4]
 80134fe:	460b      	mov	r3, r1
 8013500:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	1c5a      	adds	r2, r3, #1
 8013506:	607a      	str	r2, [r7, #4]
 8013508:	887a      	ldrh	r2, [r7, #2]
 801350a:	b2d2      	uxtb	r2, r2
 801350c:	701a      	strb	r2, [r3, #0]
 801350e:	887b      	ldrh	r3, [r7, #2]
 8013510:	0a1b      	lsrs	r3, r3, #8
 8013512:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	1c5a      	adds	r2, r3, #1
 8013518:	607a      	str	r2, [r7, #4]
 801351a:	887a      	ldrh	r2, [r7, #2]
 801351c:	b2d2      	uxtb	r2, r2
 801351e:	701a      	strb	r2, [r3, #0]
}
 8013520:	bf00      	nop
 8013522:	370c      	adds	r7, #12
 8013524:	46bd      	mov	sp, r7
 8013526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801352a:	4770      	bx	lr

0801352c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801352c:	b480      	push	{r7}
 801352e:	b083      	sub	sp, #12
 8013530:	af00      	add	r7, sp, #0
 8013532:	6078      	str	r0, [r7, #4]
 8013534:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	1c5a      	adds	r2, r3, #1
 801353a:	607a      	str	r2, [r7, #4]
 801353c:	683a      	ldr	r2, [r7, #0]
 801353e:	b2d2      	uxtb	r2, r2
 8013540:	701a      	strb	r2, [r3, #0]
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	0a1b      	lsrs	r3, r3, #8
 8013546:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	1c5a      	adds	r2, r3, #1
 801354c:	607a      	str	r2, [r7, #4]
 801354e:	683a      	ldr	r2, [r7, #0]
 8013550:	b2d2      	uxtb	r2, r2
 8013552:	701a      	strb	r2, [r3, #0]
 8013554:	683b      	ldr	r3, [r7, #0]
 8013556:	0a1b      	lsrs	r3, r3, #8
 8013558:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	1c5a      	adds	r2, r3, #1
 801355e:	607a      	str	r2, [r7, #4]
 8013560:	683a      	ldr	r2, [r7, #0]
 8013562:	b2d2      	uxtb	r2, r2
 8013564:	701a      	strb	r2, [r3, #0]
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	0a1b      	lsrs	r3, r3, #8
 801356a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	1c5a      	adds	r2, r3, #1
 8013570:	607a      	str	r2, [r7, #4]
 8013572:	683a      	ldr	r2, [r7, #0]
 8013574:	b2d2      	uxtb	r2, r2
 8013576:	701a      	strb	r2, [r3, #0]
}
 8013578:	bf00      	nop
 801357a:	370c      	adds	r7, #12
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr

08013584 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013584:	b480      	push	{r7}
 8013586:	b087      	sub	sp, #28
 8013588:	af00      	add	r7, sp, #0
 801358a:	60f8      	str	r0, [r7, #12]
 801358c:	60b9      	str	r1, [r7, #8]
 801358e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d00d      	beq.n	80135ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801359e:	693a      	ldr	r2, [r7, #16]
 80135a0:	1c53      	adds	r3, r2, #1
 80135a2:	613b      	str	r3, [r7, #16]
 80135a4:	697b      	ldr	r3, [r7, #20]
 80135a6:	1c59      	adds	r1, r3, #1
 80135a8:	6179      	str	r1, [r7, #20]
 80135aa:	7812      	ldrb	r2, [r2, #0]
 80135ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	3b01      	subs	r3, #1
 80135b2:	607b      	str	r3, [r7, #4]
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d1f1      	bne.n	801359e <mem_cpy+0x1a>
	}
}
 80135ba:	bf00      	nop
 80135bc:	371c      	adds	r7, #28
 80135be:	46bd      	mov	sp, r7
 80135c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c4:	4770      	bx	lr

080135c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80135c6:	b480      	push	{r7}
 80135c8:	b087      	sub	sp, #28
 80135ca:	af00      	add	r7, sp, #0
 80135cc:	60f8      	str	r0, [r7, #12]
 80135ce:	60b9      	str	r1, [r7, #8]
 80135d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	1c5a      	adds	r2, r3, #1
 80135da:	617a      	str	r2, [r7, #20]
 80135dc:	68ba      	ldr	r2, [r7, #8]
 80135de:	b2d2      	uxtb	r2, r2
 80135e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	3b01      	subs	r3, #1
 80135e6:	607b      	str	r3, [r7, #4]
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d1f3      	bne.n	80135d6 <mem_set+0x10>
}
 80135ee:	bf00      	nop
 80135f0:	bf00      	nop
 80135f2:	371c      	adds	r7, #28
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr

080135fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80135fc:	b480      	push	{r7}
 80135fe:	b089      	sub	sp, #36	; 0x24
 8013600:	af00      	add	r7, sp, #0
 8013602:	60f8      	str	r0, [r7, #12]
 8013604:	60b9      	str	r1, [r7, #8]
 8013606:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8013608:	68fb      	ldr	r3, [r7, #12]
 801360a:	61fb      	str	r3, [r7, #28]
 801360c:	68bb      	ldr	r3, [r7, #8]
 801360e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8013610:	2300      	movs	r3, #0
 8013612:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8013614:	69fb      	ldr	r3, [r7, #28]
 8013616:	1c5a      	adds	r2, r3, #1
 8013618:	61fa      	str	r2, [r7, #28]
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	4619      	mov	r1, r3
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	1c5a      	adds	r2, r3, #1
 8013622:	61ba      	str	r2, [r7, #24]
 8013624:	781b      	ldrb	r3, [r3, #0]
 8013626:	1acb      	subs	r3, r1, r3
 8013628:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	3b01      	subs	r3, #1
 801362e:	607b      	str	r3, [r7, #4]
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	2b00      	cmp	r3, #0
 8013634:	d002      	beq.n	801363c <mem_cmp+0x40>
 8013636:	697b      	ldr	r3, [r7, #20]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d0eb      	beq.n	8013614 <mem_cmp+0x18>

	return r;
 801363c:	697b      	ldr	r3, [r7, #20]
}
 801363e:	4618      	mov	r0, r3
 8013640:	3724      	adds	r7, #36	; 0x24
 8013642:	46bd      	mov	sp, r7
 8013644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013648:	4770      	bx	lr

0801364a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801364a:	b480      	push	{r7}
 801364c:	b083      	sub	sp, #12
 801364e:	af00      	add	r7, sp, #0
 8013650:	6078      	str	r0, [r7, #4]
 8013652:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8013654:	e002      	b.n	801365c <chk_chr+0x12>
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	3301      	adds	r3, #1
 801365a:	607b      	str	r3, [r7, #4]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	781b      	ldrb	r3, [r3, #0]
 8013660:	2b00      	cmp	r3, #0
 8013662:	d005      	beq.n	8013670 <chk_chr+0x26>
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	461a      	mov	r2, r3
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	4293      	cmp	r3, r2
 801366e:	d1f2      	bne.n	8013656 <chk_chr+0xc>
	return *str;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	781b      	ldrb	r3, [r3, #0]
}
 8013674:	4618      	mov	r0, r3
 8013676:	370c      	adds	r7, #12
 8013678:	46bd      	mov	sp, r7
 801367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801367e:	4770      	bx	lr

08013680 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b086      	sub	sp, #24
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013688:	2300      	movs	r3, #0
 801368a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	78db      	ldrb	r3, [r3, #3]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d034      	beq.n	80136fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013698:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	7858      	ldrb	r0, [r3, #1]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80136a4:	2301      	movs	r3, #1
 80136a6:	697a      	ldr	r2, [r7, #20]
 80136a8:	f7ff feac 	bl	8013404 <disk_write>
 80136ac:	4603      	mov	r3, r0
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d002      	beq.n	80136b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80136b2:	2301      	movs	r3, #1
 80136b4:	73fb      	strb	r3, [r7, #15]
 80136b6:	e022      	b.n	80136fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	2200      	movs	r2, #0
 80136bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136c2:	697a      	ldr	r2, [r7, #20]
 80136c4:	1ad2      	subs	r2, r2, r3
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	6a1b      	ldr	r3, [r3, #32]
 80136ca:	429a      	cmp	r2, r3
 80136cc:	d217      	bcs.n	80136fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	789b      	ldrb	r3, [r3, #2]
 80136d2:	613b      	str	r3, [r7, #16]
 80136d4:	e010      	b.n	80136f8 <sync_window+0x78>
					wsect += fs->fsize;
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	6a1b      	ldr	r3, [r3, #32]
 80136da:	697a      	ldr	r2, [r7, #20]
 80136dc:	4413      	add	r3, r2
 80136de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	7858      	ldrb	r0, [r3, #1]
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80136ea:	2301      	movs	r3, #1
 80136ec:	697a      	ldr	r2, [r7, #20]
 80136ee:	f7ff fe89 	bl	8013404 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	3b01      	subs	r3, #1
 80136f6:	613b      	str	r3, [r7, #16]
 80136f8:	693b      	ldr	r3, [r7, #16]
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d8eb      	bhi.n	80136d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80136fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8013700:	4618      	mov	r0, r3
 8013702:	3718      	adds	r7, #24
 8013704:	46bd      	mov	sp, r7
 8013706:	bd80      	pop	{r7, pc}

08013708 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b084      	sub	sp, #16
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
 8013710:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8013712:	2300      	movs	r3, #0
 8013714:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801371a:	683a      	ldr	r2, [r7, #0]
 801371c:	429a      	cmp	r2, r3
 801371e:	d01b      	beq.n	8013758 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013720:	6878      	ldr	r0, [r7, #4]
 8013722:	f7ff ffad 	bl	8013680 <sync_window>
 8013726:	4603      	mov	r3, r0
 8013728:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801372a:	7bfb      	ldrb	r3, [r7, #15]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d113      	bne.n	8013758 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	7858      	ldrb	r0, [r3, #1]
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801373a:	2301      	movs	r3, #1
 801373c:	683a      	ldr	r2, [r7, #0]
 801373e:	f7ff fe41 	bl	80133c4 <disk_read>
 8013742:	4603      	mov	r3, r0
 8013744:	2b00      	cmp	r3, #0
 8013746:	d004      	beq.n	8013752 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8013748:	f04f 33ff 	mov.w	r3, #4294967295
 801374c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801374e:	2301      	movs	r3, #1
 8013750:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	683a      	ldr	r2, [r7, #0]
 8013756:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8013758:	7bfb      	ldrb	r3, [r7, #15]
}
 801375a:	4618      	mov	r0, r3
 801375c:	3710      	adds	r7, #16
 801375e:	46bd      	mov	sp, r7
 8013760:	bd80      	pop	{r7, pc}
	...

08013764 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8013764:	b580      	push	{r7, lr}
 8013766:	b084      	sub	sp, #16
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	f7ff ff87 	bl	8013680 <sync_window>
 8013772:	4603      	mov	r3, r0
 8013774:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013776:	7bfb      	ldrb	r3, [r7, #15]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d159      	bne.n	8013830 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	781b      	ldrb	r3, [r3, #0]
 8013780:	2b03      	cmp	r3, #3
 8013782:	d149      	bne.n	8013818 <sync_fs+0xb4>
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	791b      	ldrb	r3, [r3, #4]
 8013788:	2b01      	cmp	r3, #1
 801378a:	d145      	bne.n	8013818 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	899b      	ldrh	r3, [r3, #12]
 8013796:	461a      	mov	r2, r3
 8013798:	2100      	movs	r1, #0
 801379a:	f7ff ff14 	bl	80135c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	3338      	adds	r3, #56	; 0x38
 80137a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80137a6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80137aa:	4618      	mov	r0, r3
 80137ac:	f7ff fea3 	bl	80134f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	3338      	adds	r3, #56	; 0x38
 80137b4:	4921      	ldr	r1, [pc, #132]	; (801383c <sync_fs+0xd8>)
 80137b6:	4618      	mov	r0, r3
 80137b8:	f7ff feb8 	bl	801352c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	3338      	adds	r3, #56	; 0x38
 80137c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80137c4:	491e      	ldr	r1, [pc, #120]	; (8013840 <sync_fs+0xdc>)
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7ff feb0 	bl	801352c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	3338      	adds	r3, #56	; 0x38
 80137d0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	699b      	ldr	r3, [r3, #24]
 80137d8:	4619      	mov	r1, r3
 80137da:	4610      	mov	r0, r2
 80137dc:	f7ff fea6 	bl	801352c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	3338      	adds	r3, #56	; 0x38
 80137e4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	695b      	ldr	r3, [r3, #20]
 80137ec:	4619      	mov	r1, r3
 80137ee:	4610      	mov	r0, r2
 80137f0:	f7ff fe9c 	bl	801352c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f8:	1c5a      	adds	r2, r3, #1
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	7858      	ldrb	r0, [r3, #1]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801380c:	2301      	movs	r3, #1
 801380e:	f7ff fdf9 	bl	8013404 <disk_write>
			fs->fsi_flag = 0;
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	2200      	movs	r2, #0
 8013816:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	785b      	ldrb	r3, [r3, #1]
 801381c:	2200      	movs	r2, #0
 801381e:	2100      	movs	r1, #0
 8013820:	4618      	mov	r0, r3
 8013822:	f7ff fe0f 	bl	8013444 <disk_ioctl>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d001      	beq.n	8013830 <sync_fs+0xcc>
 801382c:	2301      	movs	r3, #1
 801382e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8013830:	7bfb      	ldrb	r3, [r7, #15]
}
 8013832:	4618      	mov	r0, r3
 8013834:	3710      	adds	r7, #16
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}
 801383a:	bf00      	nop
 801383c:	41615252 	.word	0x41615252
 8013840:	61417272 	.word	0x61417272

08013844 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8013844:	b480      	push	{r7}
 8013846:	b083      	sub	sp, #12
 8013848:	af00      	add	r7, sp, #0
 801384a:	6078      	str	r0, [r7, #4]
 801384c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	3b02      	subs	r3, #2
 8013852:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	69db      	ldr	r3, [r3, #28]
 8013858:	3b02      	subs	r3, #2
 801385a:	683a      	ldr	r2, [r7, #0]
 801385c:	429a      	cmp	r2, r3
 801385e:	d301      	bcc.n	8013864 <clust2sect+0x20>
 8013860:	2300      	movs	r3, #0
 8013862:	e008      	b.n	8013876 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	895b      	ldrh	r3, [r3, #10]
 8013868:	461a      	mov	r2, r3
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	fb03 f202 	mul.w	r2, r3, r2
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013874:	4413      	add	r3, r2
}
 8013876:	4618      	mov	r0, r3
 8013878:	370c      	adds	r7, #12
 801387a:	46bd      	mov	sp, r7
 801387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013880:	4770      	bx	lr

08013882 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8013882:	b580      	push	{r7, lr}
 8013884:	b086      	sub	sp, #24
 8013886:	af00      	add	r7, sp, #0
 8013888:	6078      	str	r0, [r7, #4]
 801388a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013892:	683b      	ldr	r3, [r7, #0]
 8013894:	2b01      	cmp	r3, #1
 8013896:	d904      	bls.n	80138a2 <get_fat+0x20>
 8013898:	693b      	ldr	r3, [r7, #16]
 801389a:	69db      	ldr	r3, [r3, #28]
 801389c:	683a      	ldr	r2, [r7, #0]
 801389e:	429a      	cmp	r2, r3
 80138a0:	d302      	bcc.n	80138a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80138a2:	2301      	movs	r3, #1
 80138a4:	617b      	str	r3, [r7, #20]
 80138a6:	e0bb      	b.n	8013a20 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80138a8:	f04f 33ff 	mov.w	r3, #4294967295
 80138ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	781b      	ldrb	r3, [r3, #0]
 80138b2:	2b03      	cmp	r3, #3
 80138b4:	f000 8083 	beq.w	80139be <get_fat+0x13c>
 80138b8:	2b03      	cmp	r3, #3
 80138ba:	f300 80a7 	bgt.w	8013a0c <get_fat+0x18a>
 80138be:	2b01      	cmp	r3, #1
 80138c0:	d002      	beq.n	80138c8 <get_fat+0x46>
 80138c2:	2b02      	cmp	r3, #2
 80138c4:	d056      	beq.n	8013974 <get_fat+0xf2>
 80138c6:	e0a1      	b.n	8013a0c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	60fb      	str	r3, [r7, #12]
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	085b      	lsrs	r3, r3, #1
 80138d0:	68fa      	ldr	r2, [r7, #12]
 80138d2:	4413      	add	r3, r2
 80138d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80138d6:	693b      	ldr	r3, [r7, #16]
 80138d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	899b      	ldrh	r3, [r3, #12]
 80138de:	4619      	mov	r1, r3
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80138e6:	4413      	add	r3, r2
 80138e8:	4619      	mov	r1, r3
 80138ea:	6938      	ldr	r0, [r7, #16]
 80138ec:	f7ff ff0c 	bl	8013708 <move_window>
 80138f0:	4603      	mov	r3, r0
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	f040 808d 	bne.w	8013a12 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	1c5a      	adds	r2, r3, #1
 80138fc:	60fa      	str	r2, [r7, #12]
 80138fe:	693a      	ldr	r2, [r7, #16]
 8013900:	8992      	ldrh	r2, [r2, #12]
 8013902:	fbb3 f1f2 	udiv	r1, r3, r2
 8013906:	fb02 f201 	mul.w	r2, r2, r1
 801390a:	1a9b      	subs	r3, r3, r2
 801390c:	693a      	ldr	r2, [r7, #16]
 801390e:	4413      	add	r3, r2
 8013910:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013914:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013916:	693b      	ldr	r3, [r7, #16]
 8013918:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801391a:	693b      	ldr	r3, [r7, #16]
 801391c:	899b      	ldrh	r3, [r3, #12]
 801391e:	4619      	mov	r1, r3
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	fbb3 f3f1 	udiv	r3, r3, r1
 8013926:	4413      	add	r3, r2
 8013928:	4619      	mov	r1, r3
 801392a:	6938      	ldr	r0, [r7, #16]
 801392c:	f7ff feec 	bl	8013708 <move_window>
 8013930:	4603      	mov	r3, r0
 8013932:	2b00      	cmp	r3, #0
 8013934:	d16f      	bne.n	8013a16 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	899b      	ldrh	r3, [r3, #12]
 801393a:	461a      	mov	r2, r3
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013942:	fb02 f201 	mul.w	r2, r2, r1
 8013946:	1a9b      	subs	r3, r3, r2
 8013948:	693a      	ldr	r2, [r7, #16]
 801394a:	4413      	add	r3, r2
 801394c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013950:	021b      	lsls	r3, r3, #8
 8013952:	461a      	mov	r2, r3
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	4313      	orrs	r3, r2
 8013958:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801395a:	683b      	ldr	r3, [r7, #0]
 801395c:	f003 0301 	and.w	r3, r3, #1
 8013960:	2b00      	cmp	r3, #0
 8013962:	d002      	beq.n	801396a <get_fat+0xe8>
 8013964:	68bb      	ldr	r3, [r7, #8]
 8013966:	091b      	lsrs	r3, r3, #4
 8013968:	e002      	b.n	8013970 <get_fat+0xee>
 801396a:	68bb      	ldr	r3, [r7, #8]
 801396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013970:	617b      	str	r3, [r7, #20]
			break;
 8013972:	e055      	b.n	8013a20 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013974:	693b      	ldr	r3, [r7, #16]
 8013976:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013978:	693b      	ldr	r3, [r7, #16]
 801397a:	899b      	ldrh	r3, [r3, #12]
 801397c:	085b      	lsrs	r3, r3, #1
 801397e:	b29b      	uxth	r3, r3
 8013980:	4619      	mov	r1, r3
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	fbb3 f3f1 	udiv	r3, r3, r1
 8013988:	4413      	add	r3, r2
 801398a:	4619      	mov	r1, r3
 801398c:	6938      	ldr	r0, [r7, #16]
 801398e:	f7ff febb 	bl	8013708 <move_window>
 8013992:	4603      	mov	r3, r0
 8013994:	2b00      	cmp	r3, #0
 8013996:	d140      	bne.n	8013a1a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	005b      	lsls	r3, r3, #1
 80139a2:	693a      	ldr	r2, [r7, #16]
 80139a4:	8992      	ldrh	r2, [r2, #12]
 80139a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80139aa:	fb02 f200 	mul.w	r2, r2, r0
 80139ae:	1a9b      	subs	r3, r3, r2
 80139b0:	440b      	add	r3, r1
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7ff fd64 	bl	8013480 <ld_word>
 80139b8:	4603      	mov	r3, r0
 80139ba:	617b      	str	r3, [r7, #20]
			break;
 80139bc:	e030      	b.n	8013a20 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80139be:	693b      	ldr	r3, [r7, #16]
 80139c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80139c2:	693b      	ldr	r3, [r7, #16]
 80139c4:	899b      	ldrh	r3, [r3, #12]
 80139c6:	089b      	lsrs	r3, r3, #2
 80139c8:	b29b      	uxth	r3, r3
 80139ca:	4619      	mov	r1, r3
 80139cc:	683b      	ldr	r3, [r7, #0]
 80139ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80139d2:	4413      	add	r3, r2
 80139d4:	4619      	mov	r1, r3
 80139d6:	6938      	ldr	r0, [r7, #16]
 80139d8:	f7ff fe96 	bl	8013708 <move_window>
 80139dc:	4603      	mov	r3, r0
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d11d      	bne.n	8013a1e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80139e8:	683b      	ldr	r3, [r7, #0]
 80139ea:	009b      	lsls	r3, r3, #2
 80139ec:	693a      	ldr	r2, [r7, #16]
 80139ee:	8992      	ldrh	r2, [r2, #12]
 80139f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80139f4:	fb02 f200 	mul.w	r2, r2, r0
 80139f8:	1a9b      	subs	r3, r3, r2
 80139fa:	440b      	add	r3, r1
 80139fc:	4618      	mov	r0, r3
 80139fe:	f7ff fd57 	bl	80134b0 <ld_dword>
 8013a02:	4603      	mov	r3, r0
 8013a04:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013a08:	617b      	str	r3, [r7, #20]
			break;
 8013a0a:	e009      	b.n	8013a20 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	617b      	str	r3, [r7, #20]
 8013a10:	e006      	b.n	8013a20 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013a12:	bf00      	nop
 8013a14:	e004      	b.n	8013a20 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013a16:	bf00      	nop
 8013a18:	e002      	b.n	8013a20 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013a1a:	bf00      	nop
 8013a1c:	e000      	b.n	8013a20 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013a1e:	bf00      	nop
		}
	}

	return val;
 8013a20:	697b      	ldr	r3, [r7, #20]
}
 8013a22:	4618      	mov	r0, r3
 8013a24:	3718      	adds	r7, #24
 8013a26:	46bd      	mov	sp, r7
 8013a28:	bd80      	pop	{r7, pc}

08013a2a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013a2a:	b590      	push	{r4, r7, lr}
 8013a2c:	b089      	sub	sp, #36	; 0x24
 8013a2e:	af00      	add	r7, sp, #0
 8013a30:	60f8      	str	r0, [r7, #12]
 8013a32:	60b9      	str	r1, [r7, #8]
 8013a34:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013a36:	2302      	movs	r3, #2
 8013a38:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	2b01      	cmp	r3, #1
 8013a3e:	f240 8102 	bls.w	8013c46 <put_fat+0x21c>
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	69db      	ldr	r3, [r3, #28]
 8013a46:	68ba      	ldr	r2, [r7, #8]
 8013a48:	429a      	cmp	r2, r3
 8013a4a:	f080 80fc 	bcs.w	8013c46 <put_fat+0x21c>
		switch (fs->fs_type) {
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	781b      	ldrb	r3, [r3, #0]
 8013a52:	2b03      	cmp	r3, #3
 8013a54:	f000 80b6 	beq.w	8013bc4 <put_fat+0x19a>
 8013a58:	2b03      	cmp	r3, #3
 8013a5a:	f300 80fd 	bgt.w	8013c58 <put_fat+0x22e>
 8013a5e:	2b01      	cmp	r3, #1
 8013a60:	d003      	beq.n	8013a6a <put_fat+0x40>
 8013a62:	2b02      	cmp	r3, #2
 8013a64:	f000 8083 	beq.w	8013b6e <put_fat+0x144>
 8013a68:	e0f6      	b.n	8013c58 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	61bb      	str	r3, [r7, #24]
 8013a6e:	69bb      	ldr	r3, [r7, #24]
 8013a70:	085b      	lsrs	r3, r3, #1
 8013a72:	69ba      	ldr	r2, [r7, #24]
 8013a74:	4413      	add	r3, r2
 8013a76:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	899b      	ldrh	r3, [r3, #12]
 8013a80:	4619      	mov	r1, r3
 8013a82:	69bb      	ldr	r3, [r7, #24]
 8013a84:	fbb3 f3f1 	udiv	r3, r3, r1
 8013a88:	4413      	add	r3, r2
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	68f8      	ldr	r0, [r7, #12]
 8013a8e:	f7ff fe3b 	bl	8013708 <move_window>
 8013a92:	4603      	mov	r3, r0
 8013a94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013a96:	7ffb      	ldrb	r3, [r7, #31]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	f040 80d6 	bne.w	8013c4a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013aa4:	69bb      	ldr	r3, [r7, #24]
 8013aa6:	1c5a      	adds	r2, r3, #1
 8013aa8:	61ba      	str	r2, [r7, #24]
 8013aaa:	68fa      	ldr	r2, [r7, #12]
 8013aac:	8992      	ldrh	r2, [r2, #12]
 8013aae:	fbb3 f0f2 	udiv	r0, r3, r2
 8013ab2:	fb02 f200 	mul.w	r2, r2, r0
 8013ab6:	1a9b      	subs	r3, r3, r2
 8013ab8:	440b      	add	r3, r1
 8013aba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8013abc:	68bb      	ldr	r3, [r7, #8]
 8013abe:	f003 0301 	and.w	r3, r3, #1
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	d00d      	beq.n	8013ae2 <put_fat+0xb8>
 8013ac6:	697b      	ldr	r3, [r7, #20]
 8013ac8:	781b      	ldrb	r3, [r3, #0]
 8013aca:	b25b      	sxtb	r3, r3
 8013acc:	f003 030f 	and.w	r3, r3, #15
 8013ad0:	b25a      	sxtb	r2, r3
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	b2db      	uxtb	r3, r3
 8013ad6:	011b      	lsls	r3, r3, #4
 8013ad8:	b25b      	sxtb	r3, r3
 8013ada:	4313      	orrs	r3, r2
 8013adc:	b25b      	sxtb	r3, r3
 8013ade:	b2db      	uxtb	r3, r3
 8013ae0:	e001      	b.n	8013ae6 <put_fat+0xbc>
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	697a      	ldr	r2, [r7, #20]
 8013ae8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2201      	movs	r2, #1
 8013aee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	899b      	ldrh	r3, [r3, #12]
 8013af8:	4619      	mov	r1, r3
 8013afa:	69bb      	ldr	r3, [r7, #24]
 8013afc:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b00:	4413      	add	r3, r2
 8013b02:	4619      	mov	r1, r3
 8013b04:	68f8      	ldr	r0, [r7, #12]
 8013b06:	f7ff fdff 	bl	8013708 <move_window>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013b0e:	7ffb      	ldrb	r3, [r7, #31]
 8013b10:	2b00      	cmp	r3, #0
 8013b12:	f040 809c 	bne.w	8013c4e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	899b      	ldrh	r3, [r3, #12]
 8013b20:	461a      	mov	r2, r3
 8013b22:	69bb      	ldr	r3, [r7, #24]
 8013b24:	fbb3 f0f2 	udiv	r0, r3, r2
 8013b28:	fb02 f200 	mul.w	r2, r2, r0
 8013b2c:	1a9b      	subs	r3, r3, r2
 8013b2e:	440b      	add	r3, r1
 8013b30:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013b32:	68bb      	ldr	r3, [r7, #8]
 8013b34:	f003 0301 	and.w	r3, r3, #1
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d003      	beq.n	8013b44 <put_fat+0x11a>
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	091b      	lsrs	r3, r3, #4
 8013b40:	b2db      	uxtb	r3, r3
 8013b42:	e00e      	b.n	8013b62 <put_fat+0x138>
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	781b      	ldrb	r3, [r3, #0]
 8013b48:	b25b      	sxtb	r3, r3
 8013b4a:	f023 030f 	bic.w	r3, r3, #15
 8013b4e:	b25a      	sxtb	r2, r3
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	0a1b      	lsrs	r3, r3, #8
 8013b54:	b25b      	sxtb	r3, r3
 8013b56:	f003 030f 	and.w	r3, r3, #15
 8013b5a:	b25b      	sxtb	r3, r3
 8013b5c:	4313      	orrs	r3, r2
 8013b5e:	b25b      	sxtb	r3, r3
 8013b60:	b2db      	uxtb	r3, r3
 8013b62:	697a      	ldr	r2, [r7, #20]
 8013b64:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	2201      	movs	r2, #1
 8013b6a:	70da      	strb	r2, [r3, #3]
			break;
 8013b6c:	e074      	b.n	8013c58 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	899b      	ldrh	r3, [r3, #12]
 8013b76:	085b      	lsrs	r3, r3, #1
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	4619      	mov	r1, r3
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b82:	4413      	add	r3, r2
 8013b84:	4619      	mov	r1, r3
 8013b86:	68f8      	ldr	r0, [r7, #12]
 8013b88:	f7ff fdbe 	bl	8013708 <move_window>
 8013b8c:	4603      	mov	r3, r0
 8013b8e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013b90:	7ffb      	ldrb	r3, [r7, #31]
 8013b92:	2b00      	cmp	r3, #0
 8013b94:	d15d      	bne.n	8013c52 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	005b      	lsls	r3, r3, #1
 8013ba0:	68fa      	ldr	r2, [r7, #12]
 8013ba2:	8992      	ldrh	r2, [r2, #12]
 8013ba4:	fbb3 f0f2 	udiv	r0, r3, r2
 8013ba8:	fb02 f200 	mul.w	r2, r2, r0
 8013bac:	1a9b      	subs	r3, r3, r2
 8013bae:	440b      	add	r3, r1
 8013bb0:	687a      	ldr	r2, [r7, #4]
 8013bb2:	b292      	uxth	r2, r2
 8013bb4:	4611      	mov	r1, r2
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	f7ff fc9d 	bl	80134f6 <st_word>
			fs->wflag = 1;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	2201      	movs	r2, #1
 8013bc0:	70da      	strb	r2, [r3, #3]
			break;
 8013bc2:	e049      	b.n	8013c58 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	899b      	ldrh	r3, [r3, #12]
 8013bcc:	089b      	lsrs	r3, r3, #2
 8013bce:	b29b      	uxth	r3, r3
 8013bd0:	4619      	mov	r1, r3
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	fbb3 f3f1 	udiv	r3, r3, r1
 8013bd8:	4413      	add	r3, r2
 8013bda:	4619      	mov	r1, r3
 8013bdc:	68f8      	ldr	r0, [r7, #12]
 8013bde:	f7ff fd93 	bl	8013708 <move_window>
 8013be2:	4603      	mov	r3, r0
 8013be4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013be6:	7ffb      	ldrb	r3, [r7, #31]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d134      	bne.n	8013c56 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013bf8:	68bb      	ldr	r3, [r7, #8]
 8013bfa:	009b      	lsls	r3, r3, #2
 8013bfc:	68fa      	ldr	r2, [r7, #12]
 8013bfe:	8992      	ldrh	r2, [r2, #12]
 8013c00:	fbb3 f0f2 	udiv	r0, r3, r2
 8013c04:	fb02 f200 	mul.w	r2, r2, r0
 8013c08:	1a9b      	subs	r3, r3, r2
 8013c0a:	440b      	add	r3, r1
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f7ff fc4f 	bl	80134b0 <ld_dword>
 8013c12:	4603      	mov	r3, r0
 8013c14:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8013c18:	4323      	orrs	r3, r4
 8013c1a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	009b      	lsls	r3, r3, #2
 8013c26:	68fa      	ldr	r2, [r7, #12]
 8013c28:	8992      	ldrh	r2, [r2, #12]
 8013c2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8013c2e:	fb02 f200 	mul.w	r2, r2, r0
 8013c32:	1a9b      	subs	r3, r3, r2
 8013c34:	440b      	add	r3, r1
 8013c36:	6879      	ldr	r1, [r7, #4]
 8013c38:	4618      	mov	r0, r3
 8013c3a:	f7ff fc77 	bl	801352c <st_dword>
			fs->wflag = 1;
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	2201      	movs	r2, #1
 8013c42:	70da      	strb	r2, [r3, #3]
			break;
 8013c44:	e008      	b.n	8013c58 <put_fat+0x22e>
		}
	}
 8013c46:	bf00      	nop
 8013c48:	e006      	b.n	8013c58 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013c4a:	bf00      	nop
 8013c4c:	e004      	b.n	8013c58 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013c4e:	bf00      	nop
 8013c50:	e002      	b.n	8013c58 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013c52:	bf00      	nop
 8013c54:	e000      	b.n	8013c58 <put_fat+0x22e>
			if (res != FR_OK) break;
 8013c56:	bf00      	nop
	return res;
 8013c58:	7ffb      	ldrb	r3, [r7, #31]
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3724      	adds	r7, #36	; 0x24
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd90      	pop	{r4, r7, pc}

08013c62 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013c62:	b580      	push	{r7, lr}
 8013c64:	b088      	sub	sp, #32
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	60f8      	str	r0, [r7, #12]
 8013c6a:	60b9      	str	r1, [r7, #8]
 8013c6c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8013c6e:	2300      	movs	r3, #0
 8013c70:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013c78:	68bb      	ldr	r3, [r7, #8]
 8013c7a:	2b01      	cmp	r3, #1
 8013c7c:	d904      	bls.n	8013c88 <remove_chain+0x26>
 8013c7e:	69bb      	ldr	r3, [r7, #24]
 8013c80:	69db      	ldr	r3, [r3, #28]
 8013c82:	68ba      	ldr	r2, [r7, #8]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d301      	bcc.n	8013c8c <remove_chain+0x2a>
 8013c88:	2302      	movs	r3, #2
 8013c8a:	e04b      	b.n	8013d24 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d00c      	beq.n	8013cac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013c92:	f04f 32ff 	mov.w	r2, #4294967295
 8013c96:	6879      	ldr	r1, [r7, #4]
 8013c98:	69b8      	ldr	r0, [r7, #24]
 8013c9a:	f7ff fec6 	bl	8013a2a <put_fat>
 8013c9e:	4603      	mov	r3, r0
 8013ca0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013ca2:	7ffb      	ldrb	r3, [r7, #31]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d001      	beq.n	8013cac <remove_chain+0x4a>
 8013ca8:	7ffb      	ldrb	r3, [r7, #31]
 8013caa:	e03b      	b.n	8013d24 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013cac:	68b9      	ldr	r1, [r7, #8]
 8013cae:	68f8      	ldr	r0, [r7, #12]
 8013cb0:	f7ff fde7 	bl	8013882 <get_fat>
 8013cb4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013cb6:	697b      	ldr	r3, [r7, #20]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d031      	beq.n	8013d20 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013cbc:	697b      	ldr	r3, [r7, #20]
 8013cbe:	2b01      	cmp	r3, #1
 8013cc0:	d101      	bne.n	8013cc6 <remove_chain+0x64>
 8013cc2:	2302      	movs	r3, #2
 8013cc4:	e02e      	b.n	8013d24 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013cc6:	697b      	ldr	r3, [r7, #20]
 8013cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013ccc:	d101      	bne.n	8013cd2 <remove_chain+0x70>
 8013cce:	2301      	movs	r3, #1
 8013cd0:	e028      	b.n	8013d24 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013cd2:	2200      	movs	r2, #0
 8013cd4:	68b9      	ldr	r1, [r7, #8]
 8013cd6:	69b8      	ldr	r0, [r7, #24]
 8013cd8:	f7ff fea7 	bl	8013a2a <put_fat>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013ce0:	7ffb      	ldrb	r3, [r7, #31]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d001      	beq.n	8013cea <remove_chain+0x88>
 8013ce6:	7ffb      	ldrb	r3, [r7, #31]
 8013ce8:	e01c      	b.n	8013d24 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013cea:	69bb      	ldr	r3, [r7, #24]
 8013cec:	699a      	ldr	r2, [r3, #24]
 8013cee:	69bb      	ldr	r3, [r7, #24]
 8013cf0:	69db      	ldr	r3, [r3, #28]
 8013cf2:	3b02      	subs	r3, #2
 8013cf4:	429a      	cmp	r2, r3
 8013cf6:	d20b      	bcs.n	8013d10 <remove_chain+0xae>
			fs->free_clst++;
 8013cf8:	69bb      	ldr	r3, [r7, #24]
 8013cfa:	699b      	ldr	r3, [r3, #24]
 8013cfc:	1c5a      	adds	r2, r3, #1
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8013d02:	69bb      	ldr	r3, [r7, #24]
 8013d04:	791b      	ldrb	r3, [r3, #4]
 8013d06:	f043 0301 	orr.w	r3, r3, #1
 8013d0a:	b2da      	uxtb	r2, r3
 8013d0c:	69bb      	ldr	r3, [r7, #24]
 8013d0e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8013d14:	69bb      	ldr	r3, [r7, #24]
 8013d16:	69db      	ldr	r3, [r3, #28]
 8013d18:	68ba      	ldr	r2, [r7, #8]
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d3c6      	bcc.n	8013cac <remove_chain+0x4a>
 8013d1e:	e000      	b.n	8013d22 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8013d20:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8013d22:	2300      	movs	r3, #0
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3720      	adds	r7, #32
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b088      	sub	sp, #32
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8013d3c:	683b      	ldr	r3, [r7, #0]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d10d      	bne.n	8013d5e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013d42:	693b      	ldr	r3, [r7, #16]
 8013d44:	695b      	ldr	r3, [r3, #20]
 8013d46:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d004      	beq.n	8013d58 <create_chain+0x2c>
 8013d4e:	693b      	ldr	r3, [r7, #16]
 8013d50:	69db      	ldr	r3, [r3, #28]
 8013d52:	69ba      	ldr	r2, [r7, #24]
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d31b      	bcc.n	8013d90 <create_chain+0x64>
 8013d58:	2301      	movs	r3, #1
 8013d5a:	61bb      	str	r3, [r7, #24]
 8013d5c:	e018      	b.n	8013d90 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8013d5e:	6839      	ldr	r1, [r7, #0]
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7ff fd8e 	bl	8013882 <get_fat>
 8013d66:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	2b01      	cmp	r3, #1
 8013d6c:	d801      	bhi.n	8013d72 <create_chain+0x46>
 8013d6e:	2301      	movs	r3, #1
 8013d70:	e070      	b.n	8013e54 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d78:	d101      	bne.n	8013d7e <create_chain+0x52>
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	e06a      	b.n	8013e54 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8013d7e:	693b      	ldr	r3, [r7, #16]
 8013d80:	69db      	ldr	r3, [r3, #28]
 8013d82:	68fa      	ldr	r2, [r7, #12]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d201      	bcs.n	8013d8c <create_chain+0x60>
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	e063      	b.n	8013e54 <create_chain+0x128>
		scl = clst;
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013d90:	69bb      	ldr	r3, [r7, #24]
 8013d92:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013d94:	69fb      	ldr	r3, [r7, #28]
 8013d96:	3301      	adds	r3, #1
 8013d98:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013d9a:	693b      	ldr	r3, [r7, #16]
 8013d9c:	69db      	ldr	r3, [r3, #28]
 8013d9e:	69fa      	ldr	r2, [r7, #28]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d307      	bcc.n	8013db4 <create_chain+0x88>
				ncl = 2;
 8013da4:	2302      	movs	r3, #2
 8013da6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013da8:	69fa      	ldr	r2, [r7, #28]
 8013daa:	69bb      	ldr	r3, [r7, #24]
 8013dac:	429a      	cmp	r2, r3
 8013dae:	d901      	bls.n	8013db4 <create_chain+0x88>
 8013db0:	2300      	movs	r3, #0
 8013db2:	e04f      	b.n	8013e54 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013db4:	69f9      	ldr	r1, [r7, #28]
 8013db6:	6878      	ldr	r0, [r7, #4]
 8013db8:	f7ff fd63 	bl	8013882 <get_fat>
 8013dbc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d00e      	beq.n	8013de2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	2b01      	cmp	r3, #1
 8013dc8:	d003      	beq.n	8013dd2 <create_chain+0xa6>
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013dd0:	d101      	bne.n	8013dd6 <create_chain+0xaa>
 8013dd2:	68fb      	ldr	r3, [r7, #12]
 8013dd4:	e03e      	b.n	8013e54 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013dd6:	69fa      	ldr	r2, [r7, #28]
 8013dd8:	69bb      	ldr	r3, [r7, #24]
 8013dda:	429a      	cmp	r2, r3
 8013ddc:	d1da      	bne.n	8013d94 <create_chain+0x68>
 8013dde:	2300      	movs	r3, #0
 8013de0:	e038      	b.n	8013e54 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013de2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013de4:	f04f 32ff 	mov.w	r2, #4294967295
 8013de8:	69f9      	ldr	r1, [r7, #28]
 8013dea:	6938      	ldr	r0, [r7, #16]
 8013dec:	f7ff fe1d 	bl	8013a2a <put_fat>
 8013df0:	4603      	mov	r3, r0
 8013df2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013df4:	7dfb      	ldrb	r3, [r7, #23]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d109      	bne.n	8013e0e <create_chain+0xe2>
 8013dfa:	683b      	ldr	r3, [r7, #0]
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d006      	beq.n	8013e0e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013e00:	69fa      	ldr	r2, [r7, #28]
 8013e02:	6839      	ldr	r1, [r7, #0]
 8013e04:	6938      	ldr	r0, [r7, #16]
 8013e06:	f7ff fe10 	bl	8013a2a <put_fat>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8013e0e:	7dfb      	ldrb	r3, [r7, #23]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d116      	bne.n	8013e42 <create_chain+0x116>
		fs->last_clst = ncl;
 8013e14:	693b      	ldr	r3, [r7, #16]
 8013e16:	69fa      	ldr	r2, [r7, #28]
 8013e18:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	699a      	ldr	r2, [r3, #24]
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	69db      	ldr	r3, [r3, #28]
 8013e22:	3b02      	subs	r3, #2
 8013e24:	429a      	cmp	r2, r3
 8013e26:	d804      	bhi.n	8013e32 <create_chain+0x106>
 8013e28:	693b      	ldr	r3, [r7, #16]
 8013e2a:	699b      	ldr	r3, [r3, #24]
 8013e2c:	1e5a      	subs	r2, r3, #1
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8013e32:	693b      	ldr	r3, [r7, #16]
 8013e34:	791b      	ldrb	r3, [r3, #4]
 8013e36:	f043 0301 	orr.w	r3, r3, #1
 8013e3a:	b2da      	uxtb	r2, r3
 8013e3c:	693b      	ldr	r3, [r7, #16]
 8013e3e:	711a      	strb	r2, [r3, #4]
 8013e40:	e007      	b.n	8013e52 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013e42:	7dfb      	ldrb	r3, [r7, #23]
 8013e44:	2b01      	cmp	r3, #1
 8013e46:	d102      	bne.n	8013e4e <create_chain+0x122>
 8013e48:	f04f 33ff 	mov.w	r3, #4294967295
 8013e4c:	e000      	b.n	8013e50 <create_chain+0x124>
 8013e4e:	2301      	movs	r3, #1
 8013e50:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013e52:	69fb      	ldr	r3, [r7, #28]
}
 8013e54:	4618      	mov	r0, r3
 8013e56:	3720      	adds	r7, #32
 8013e58:	46bd      	mov	sp, r7
 8013e5a:	bd80      	pop	{r7, pc}

08013e5c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b087      	sub	sp, #28
 8013e60:	af00      	add	r7, sp, #0
 8013e62:	6078      	str	r0, [r7, #4]
 8013e64:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e70:	3304      	adds	r3, #4
 8013e72:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	899b      	ldrh	r3, [r3, #12]
 8013e78:	461a      	mov	r2, r3
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e80:	68fa      	ldr	r2, [r7, #12]
 8013e82:	8952      	ldrh	r2, [r2, #10]
 8013e84:	fbb3 f3f2 	udiv	r3, r3, r2
 8013e88:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013e8a:	693b      	ldr	r3, [r7, #16]
 8013e8c:	1d1a      	adds	r2, r3, #4
 8013e8e:	613a      	str	r2, [r7, #16]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013e94:	68bb      	ldr	r3, [r7, #8]
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d101      	bne.n	8013e9e <clmt_clust+0x42>
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	e010      	b.n	8013ec0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8013e9e:	697a      	ldr	r2, [r7, #20]
 8013ea0:	68bb      	ldr	r3, [r7, #8]
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d307      	bcc.n	8013eb6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8013ea6:	697a      	ldr	r2, [r7, #20]
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	1ad3      	subs	r3, r2, r3
 8013eac:	617b      	str	r3, [r7, #20]
 8013eae:	693b      	ldr	r3, [r7, #16]
 8013eb0:	3304      	adds	r3, #4
 8013eb2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013eb4:	e7e9      	b.n	8013e8a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8013eb6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013eb8:	693b      	ldr	r3, [r7, #16]
 8013eba:	681a      	ldr	r2, [r3, #0]
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	4413      	add	r3, r2
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	371c      	adds	r7, #28
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eca:	4770      	bx	lr

08013ecc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013ecc:	b580      	push	{r7, lr}
 8013ece:	b086      	sub	sp, #24
 8013ed0:	af00      	add	r7, sp, #0
 8013ed2:	6078      	str	r0, [r7, #4]
 8013ed4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013edc:	683b      	ldr	r3, [r7, #0]
 8013ede:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013ee2:	d204      	bcs.n	8013eee <dir_sdi+0x22>
 8013ee4:	683b      	ldr	r3, [r7, #0]
 8013ee6:	f003 031f 	and.w	r3, r3, #31
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d001      	beq.n	8013ef2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013eee:	2302      	movs	r3, #2
 8013ef0:	e071      	b.n	8013fd6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	683a      	ldr	r2, [r7, #0]
 8013ef6:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	689b      	ldr	r3, [r3, #8]
 8013efc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d106      	bne.n	8013f12 <dir_sdi+0x46>
 8013f04:	693b      	ldr	r3, [r7, #16]
 8013f06:	781b      	ldrb	r3, [r3, #0]
 8013f08:	2b02      	cmp	r3, #2
 8013f0a:	d902      	bls.n	8013f12 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013f0c:	693b      	ldr	r3, [r7, #16]
 8013f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f10:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d10c      	bne.n	8013f32 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	095b      	lsrs	r3, r3, #5
 8013f1c:	693a      	ldr	r2, [r7, #16]
 8013f1e:	8912      	ldrh	r2, [r2, #8]
 8013f20:	4293      	cmp	r3, r2
 8013f22:	d301      	bcc.n	8013f28 <dir_sdi+0x5c>
 8013f24:	2302      	movs	r3, #2
 8013f26:	e056      	b.n	8013fd6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8013f28:	693b      	ldr	r3, [r7, #16]
 8013f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	619a      	str	r2, [r3, #24]
 8013f30:	e02d      	b.n	8013f8e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013f32:	693b      	ldr	r3, [r7, #16]
 8013f34:	895b      	ldrh	r3, [r3, #10]
 8013f36:	461a      	mov	r2, r3
 8013f38:	693b      	ldr	r3, [r7, #16]
 8013f3a:	899b      	ldrh	r3, [r3, #12]
 8013f3c:	fb03 f302 	mul.w	r3, r3, r2
 8013f40:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013f42:	e019      	b.n	8013f78 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	6979      	ldr	r1, [r7, #20]
 8013f48:	4618      	mov	r0, r3
 8013f4a:	f7ff fc9a 	bl	8013882 <get_fat>
 8013f4e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013f50:	697b      	ldr	r3, [r7, #20]
 8013f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f56:	d101      	bne.n	8013f5c <dir_sdi+0x90>
 8013f58:	2301      	movs	r3, #1
 8013f5a:	e03c      	b.n	8013fd6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013f5c:	697b      	ldr	r3, [r7, #20]
 8013f5e:	2b01      	cmp	r3, #1
 8013f60:	d904      	bls.n	8013f6c <dir_sdi+0xa0>
 8013f62:	693b      	ldr	r3, [r7, #16]
 8013f64:	69db      	ldr	r3, [r3, #28]
 8013f66:	697a      	ldr	r2, [r7, #20]
 8013f68:	429a      	cmp	r2, r3
 8013f6a:	d301      	bcc.n	8013f70 <dir_sdi+0xa4>
 8013f6c:	2302      	movs	r3, #2
 8013f6e:	e032      	b.n	8013fd6 <dir_sdi+0x10a>
			ofs -= csz;
 8013f70:	683a      	ldr	r2, [r7, #0]
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	1ad3      	subs	r3, r2, r3
 8013f76:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013f78:	683a      	ldr	r2, [r7, #0]
 8013f7a:	68fb      	ldr	r3, [r7, #12]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d2e1      	bcs.n	8013f44 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8013f80:	6979      	ldr	r1, [r7, #20]
 8013f82:	6938      	ldr	r0, [r7, #16]
 8013f84:	f7ff fc5e 	bl	8013844 <clust2sect>
 8013f88:	4602      	mov	r2, r0
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	697a      	ldr	r2, [r7, #20]
 8013f92:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	699b      	ldr	r3, [r3, #24]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d101      	bne.n	8013fa0 <dir_sdi+0xd4>
 8013f9c:	2302      	movs	r3, #2
 8013f9e:	e01a      	b.n	8013fd6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	699a      	ldr	r2, [r3, #24]
 8013fa4:	693b      	ldr	r3, [r7, #16]
 8013fa6:	899b      	ldrh	r3, [r3, #12]
 8013fa8:	4619      	mov	r1, r3
 8013faa:	683b      	ldr	r3, [r7, #0]
 8013fac:	fbb3 f3f1 	udiv	r3, r3, r1
 8013fb0:	441a      	add	r2, r3
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013fb6:	693b      	ldr	r3, [r7, #16]
 8013fb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	899b      	ldrh	r3, [r3, #12]
 8013fc0:	461a      	mov	r2, r3
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8013fc8:	fb02 f200 	mul.w	r2, r2, r0
 8013fcc:	1a9b      	subs	r3, r3, r2
 8013fce:	18ca      	adds	r2, r1, r3
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8013fd4:	2300      	movs	r3, #0
}
 8013fd6:	4618      	mov	r0, r3
 8013fd8:	3718      	adds	r7, #24
 8013fda:	46bd      	mov	sp, r7
 8013fdc:	bd80      	pop	{r7, pc}

08013fde <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013fde:	b580      	push	{r7, lr}
 8013fe0:	b086      	sub	sp, #24
 8013fe2:	af00      	add	r7, sp, #0
 8013fe4:	6078      	str	r0, [r7, #4]
 8013fe6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	681b      	ldr	r3, [r3, #0]
 8013fec:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	691b      	ldr	r3, [r3, #16]
 8013ff2:	3320      	adds	r3, #32
 8013ff4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	699b      	ldr	r3, [r3, #24]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d003      	beq.n	8014006 <dir_next+0x28>
 8013ffe:	68bb      	ldr	r3, [r7, #8]
 8014000:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8014004:	d301      	bcc.n	801400a <dir_next+0x2c>
 8014006:	2304      	movs	r3, #4
 8014008:	e0bb      	b.n	8014182 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801400a:	68fb      	ldr	r3, [r7, #12]
 801400c:	899b      	ldrh	r3, [r3, #12]
 801400e:	461a      	mov	r2, r3
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	fbb3 f1f2 	udiv	r1, r3, r2
 8014016:	fb02 f201 	mul.w	r2, r2, r1
 801401a:	1a9b      	subs	r3, r3, r2
 801401c:	2b00      	cmp	r3, #0
 801401e:	f040 809d 	bne.w	801415c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	699b      	ldr	r3, [r3, #24]
 8014026:	1c5a      	adds	r2, r3, #1
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	695b      	ldr	r3, [r3, #20]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d10b      	bne.n	801404c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	095b      	lsrs	r3, r3, #5
 8014038:	68fa      	ldr	r2, [r7, #12]
 801403a:	8912      	ldrh	r2, [r2, #8]
 801403c:	4293      	cmp	r3, r2
 801403e:	f0c0 808d 	bcc.w	801415c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	2200      	movs	r2, #0
 8014046:	619a      	str	r2, [r3, #24]
 8014048:	2304      	movs	r3, #4
 801404a:	e09a      	b.n	8014182 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801404c:	68fb      	ldr	r3, [r7, #12]
 801404e:	899b      	ldrh	r3, [r3, #12]
 8014050:	461a      	mov	r2, r3
 8014052:	68bb      	ldr	r3, [r7, #8]
 8014054:	fbb3 f3f2 	udiv	r3, r3, r2
 8014058:	68fa      	ldr	r2, [r7, #12]
 801405a:	8952      	ldrh	r2, [r2, #10]
 801405c:	3a01      	subs	r2, #1
 801405e:	4013      	ands	r3, r2
 8014060:	2b00      	cmp	r3, #0
 8014062:	d17b      	bne.n	801415c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8014064:	687a      	ldr	r2, [r7, #4]
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	695b      	ldr	r3, [r3, #20]
 801406a:	4619      	mov	r1, r3
 801406c:	4610      	mov	r0, r2
 801406e:	f7ff fc08 	bl	8013882 <get_fat>
 8014072:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	2b01      	cmp	r3, #1
 8014078:	d801      	bhi.n	801407e <dir_next+0xa0>
 801407a:	2302      	movs	r3, #2
 801407c:	e081      	b.n	8014182 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014084:	d101      	bne.n	801408a <dir_next+0xac>
 8014086:	2301      	movs	r3, #1
 8014088:	e07b      	b.n	8014182 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	69db      	ldr	r3, [r3, #28]
 801408e:	697a      	ldr	r2, [r7, #20]
 8014090:	429a      	cmp	r2, r3
 8014092:	d359      	bcc.n	8014148 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d104      	bne.n	80140a4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2200      	movs	r2, #0
 801409e:	619a      	str	r2, [r3, #24]
 80140a0:	2304      	movs	r3, #4
 80140a2:	e06e      	b.n	8014182 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80140a4:	687a      	ldr	r2, [r7, #4]
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	695b      	ldr	r3, [r3, #20]
 80140aa:	4619      	mov	r1, r3
 80140ac:	4610      	mov	r0, r2
 80140ae:	f7ff fe3d 	bl	8013d2c <create_chain>
 80140b2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d101      	bne.n	80140be <dir_next+0xe0>
 80140ba:	2307      	movs	r3, #7
 80140bc:	e061      	b.n	8014182 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80140be:	697b      	ldr	r3, [r7, #20]
 80140c0:	2b01      	cmp	r3, #1
 80140c2:	d101      	bne.n	80140c8 <dir_next+0xea>
 80140c4:	2302      	movs	r3, #2
 80140c6:	e05c      	b.n	8014182 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80140c8:	697b      	ldr	r3, [r7, #20]
 80140ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80140ce:	d101      	bne.n	80140d4 <dir_next+0xf6>
 80140d0:	2301      	movs	r3, #1
 80140d2:	e056      	b.n	8014182 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80140d4:	68f8      	ldr	r0, [r7, #12]
 80140d6:	f7ff fad3 	bl	8013680 <sync_window>
 80140da:	4603      	mov	r3, r0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d001      	beq.n	80140e4 <dir_next+0x106>
 80140e0:	2301      	movs	r3, #1
 80140e2:	e04e      	b.n	8014182 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	899b      	ldrh	r3, [r3, #12]
 80140ee:	461a      	mov	r2, r3
 80140f0:	2100      	movs	r1, #0
 80140f2:	f7ff fa68 	bl	80135c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80140f6:	2300      	movs	r3, #0
 80140f8:	613b      	str	r3, [r7, #16]
 80140fa:	6979      	ldr	r1, [r7, #20]
 80140fc:	68f8      	ldr	r0, [r7, #12]
 80140fe:	f7ff fba1 	bl	8013844 <clust2sect>
 8014102:	4602      	mov	r2, r0
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	635a      	str	r2, [r3, #52]	; 0x34
 8014108:	e012      	b.n	8014130 <dir_next+0x152>
						fs->wflag = 1;
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	2201      	movs	r2, #1
 801410e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8014110:	68f8      	ldr	r0, [r7, #12]
 8014112:	f7ff fab5 	bl	8013680 <sync_window>
 8014116:	4603      	mov	r3, r0
 8014118:	2b00      	cmp	r3, #0
 801411a:	d001      	beq.n	8014120 <dir_next+0x142>
 801411c:	2301      	movs	r3, #1
 801411e:	e030      	b.n	8014182 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8014120:	693b      	ldr	r3, [r7, #16]
 8014122:	3301      	adds	r3, #1
 8014124:	613b      	str	r3, [r7, #16]
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801412a:	1c5a      	adds	r2, r3, #1
 801412c:	68fb      	ldr	r3, [r7, #12]
 801412e:	635a      	str	r2, [r3, #52]	; 0x34
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	895b      	ldrh	r3, [r3, #10]
 8014134:	461a      	mov	r2, r3
 8014136:	693b      	ldr	r3, [r7, #16]
 8014138:	4293      	cmp	r3, r2
 801413a:	d3e6      	bcc.n	801410a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801413c:	68fb      	ldr	r3, [r7, #12]
 801413e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014140:	693b      	ldr	r3, [r7, #16]
 8014142:	1ad2      	subs	r2, r2, r3
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	697a      	ldr	r2, [r7, #20]
 801414c:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 801414e:	6979      	ldr	r1, [r7, #20]
 8014150:	68f8      	ldr	r0, [r7, #12]
 8014152:	f7ff fb77 	bl	8013844 <clust2sect>
 8014156:	4602      	mov	r2, r0
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	68ba      	ldr	r2, [r7, #8]
 8014160:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8014162:	68fb      	ldr	r3, [r7, #12]
 8014164:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	899b      	ldrh	r3, [r3, #12]
 801416c:	461a      	mov	r2, r3
 801416e:	68bb      	ldr	r3, [r7, #8]
 8014170:	fbb3 f0f2 	udiv	r0, r3, r2
 8014174:	fb02 f200 	mul.w	r2, r2, r0
 8014178:	1a9b      	subs	r3, r3, r2
 801417a:	18ca      	adds	r2, r1, r3
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8014180:	2300      	movs	r3, #0
}
 8014182:	4618      	mov	r0, r3
 8014184:	3718      	adds	r7, #24
 8014186:	46bd      	mov	sp, r7
 8014188:	bd80      	pop	{r7, pc}

0801418a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801418a:	b580      	push	{r7, lr}
 801418c:	b086      	sub	sp, #24
 801418e:	af00      	add	r7, sp, #0
 8014190:	6078      	str	r0, [r7, #4]
 8014192:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	681b      	ldr	r3, [r3, #0]
 8014198:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801419a:	2100      	movs	r1, #0
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f7ff fe95 	bl	8013ecc <dir_sdi>
 80141a2:	4603      	mov	r3, r0
 80141a4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80141a6:	7dfb      	ldrb	r3, [r7, #23]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d12b      	bne.n	8014204 <dir_alloc+0x7a>
		n = 0;
 80141ac:	2300      	movs	r3, #0
 80141ae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	699b      	ldr	r3, [r3, #24]
 80141b4:	4619      	mov	r1, r3
 80141b6:	68f8      	ldr	r0, [r7, #12]
 80141b8:	f7ff faa6 	bl	8013708 <move_window>
 80141bc:	4603      	mov	r3, r0
 80141be:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80141c0:	7dfb      	ldrb	r3, [r7, #23]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d11d      	bne.n	8014202 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	69db      	ldr	r3, [r3, #28]
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	2be5      	cmp	r3, #229	; 0xe5
 80141ce:	d004      	beq.n	80141da <dir_alloc+0x50>
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	69db      	ldr	r3, [r3, #28]
 80141d4:	781b      	ldrb	r3, [r3, #0]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d107      	bne.n	80141ea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80141da:	693b      	ldr	r3, [r7, #16]
 80141dc:	3301      	adds	r3, #1
 80141de:	613b      	str	r3, [r7, #16]
 80141e0:	693a      	ldr	r2, [r7, #16]
 80141e2:	683b      	ldr	r3, [r7, #0]
 80141e4:	429a      	cmp	r2, r3
 80141e6:	d102      	bne.n	80141ee <dir_alloc+0x64>
 80141e8:	e00c      	b.n	8014204 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80141ea:	2300      	movs	r3, #0
 80141ec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80141ee:	2101      	movs	r1, #1
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f7ff fef4 	bl	8013fde <dir_next>
 80141f6:	4603      	mov	r3, r0
 80141f8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80141fa:	7dfb      	ldrb	r3, [r7, #23]
 80141fc:	2b00      	cmp	r3, #0
 80141fe:	d0d7      	beq.n	80141b0 <dir_alloc+0x26>
 8014200:	e000      	b.n	8014204 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8014202:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8014204:	7dfb      	ldrb	r3, [r7, #23]
 8014206:	2b04      	cmp	r3, #4
 8014208:	d101      	bne.n	801420e <dir_alloc+0x84>
 801420a:	2307      	movs	r3, #7
 801420c:	75fb      	strb	r3, [r7, #23]
	return res;
 801420e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014210:	4618      	mov	r0, r3
 8014212:	3718      	adds	r7, #24
 8014214:	46bd      	mov	sp, r7
 8014216:	bd80      	pop	{r7, pc}

08014218 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8014218:	b580      	push	{r7, lr}
 801421a:	b084      	sub	sp, #16
 801421c:	af00      	add	r7, sp, #0
 801421e:	6078      	str	r0, [r7, #4]
 8014220:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8014222:	683b      	ldr	r3, [r7, #0]
 8014224:	331a      	adds	r3, #26
 8014226:	4618      	mov	r0, r3
 8014228:	f7ff f92a 	bl	8013480 <ld_word>
 801422c:	4603      	mov	r3, r0
 801422e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	781b      	ldrb	r3, [r3, #0]
 8014234:	2b03      	cmp	r3, #3
 8014236:	d109      	bne.n	801424c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	3314      	adds	r3, #20
 801423c:	4618      	mov	r0, r3
 801423e:	f7ff f91f 	bl	8013480 <ld_word>
 8014242:	4603      	mov	r3, r0
 8014244:	041b      	lsls	r3, r3, #16
 8014246:	68fa      	ldr	r2, [r7, #12]
 8014248:	4313      	orrs	r3, r2
 801424a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801424c:	68fb      	ldr	r3, [r7, #12]
}
 801424e:	4618      	mov	r0, r3
 8014250:	3710      	adds	r7, #16
 8014252:	46bd      	mov	sp, r7
 8014254:	bd80      	pop	{r7, pc}

08014256 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8014256:	b580      	push	{r7, lr}
 8014258:	b084      	sub	sp, #16
 801425a:	af00      	add	r7, sp, #0
 801425c:	60f8      	str	r0, [r7, #12]
 801425e:	60b9      	str	r1, [r7, #8]
 8014260:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	331a      	adds	r3, #26
 8014266:	687a      	ldr	r2, [r7, #4]
 8014268:	b292      	uxth	r2, r2
 801426a:	4611      	mov	r1, r2
 801426c:	4618      	mov	r0, r3
 801426e:	f7ff f942 	bl	80134f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	781b      	ldrb	r3, [r3, #0]
 8014276:	2b03      	cmp	r3, #3
 8014278:	d109      	bne.n	801428e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	f103 0214 	add.w	r2, r3, #20
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	0c1b      	lsrs	r3, r3, #16
 8014284:	b29b      	uxth	r3, r3
 8014286:	4619      	mov	r1, r3
 8014288:	4610      	mov	r0, r2
 801428a:	f7ff f934 	bl	80134f6 <st_word>
	}
}
 801428e:	bf00      	nop
 8014290:	3710      	adds	r7, #16
 8014292:	46bd      	mov	sp, r7
 8014294:	bd80      	pop	{r7, pc}
	...

08014298 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8014298:	b590      	push	{r4, r7, lr}
 801429a:	b087      	sub	sp, #28
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	331a      	adds	r3, #26
 80142a6:	4618      	mov	r0, r3
 80142a8:	f7ff f8ea 	bl	8013480 <ld_word>
 80142ac:	4603      	mov	r3, r0
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d001      	beq.n	80142b6 <cmp_lfn+0x1e>
 80142b2:	2300      	movs	r3, #0
 80142b4:	e059      	b.n	801436a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80142b6:	683b      	ldr	r3, [r7, #0]
 80142b8:	781b      	ldrb	r3, [r3, #0]
 80142ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80142be:	1e5a      	subs	r2, r3, #1
 80142c0:	4613      	mov	r3, r2
 80142c2:	005b      	lsls	r3, r3, #1
 80142c4:	4413      	add	r3, r2
 80142c6:	009b      	lsls	r3, r3, #2
 80142c8:	4413      	add	r3, r2
 80142ca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80142cc:	2301      	movs	r3, #1
 80142ce:	81fb      	strh	r3, [r7, #14]
 80142d0:	2300      	movs	r3, #0
 80142d2:	613b      	str	r3, [r7, #16]
 80142d4:	e033      	b.n	801433e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80142d6:	4a27      	ldr	r2, [pc, #156]	; (8014374 <cmp_lfn+0xdc>)
 80142d8:	693b      	ldr	r3, [r7, #16]
 80142da:	4413      	add	r3, r2
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	461a      	mov	r2, r3
 80142e0:	683b      	ldr	r3, [r7, #0]
 80142e2:	4413      	add	r3, r2
 80142e4:	4618      	mov	r0, r3
 80142e6:	f7ff f8cb 	bl	8013480 <ld_word>
 80142ea:	4603      	mov	r3, r0
 80142ec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80142ee:	89fb      	ldrh	r3, [r7, #14]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d01a      	beq.n	801432a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80142f4:	697b      	ldr	r3, [r7, #20]
 80142f6:	2bfe      	cmp	r3, #254	; 0xfe
 80142f8:	d812      	bhi.n	8014320 <cmp_lfn+0x88>
 80142fa:	89bb      	ldrh	r3, [r7, #12]
 80142fc:	4618      	mov	r0, r3
 80142fe:	f001 feb9 	bl	8016074 <ff_wtoupper>
 8014302:	4603      	mov	r3, r0
 8014304:	461c      	mov	r4, r3
 8014306:	697b      	ldr	r3, [r7, #20]
 8014308:	1c5a      	adds	r2, r3, #1
 801430a:	617a      	str	r2, [r7, #20]
 801430c:	005b      	lsls	r3, r3, #1
 801430e:	687a      	ldr	r2, [r7, #4]
 8014310:	4413      	add	r3, r2
 8014312:	881b      	ldrh	r3, [r3, #0]
 8014314:	4618      	mov	r0, r3
 8014316:	f001 fead 	bl	8016074 <ff_wtoupper>
 801431a:	4603      	mov	r3, r0
 801431c:	429c      	cmp	r4, r3
 801431e:	d001      	beq.n	8014324 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8014320:	2300      	movs	r3, #0
 8014322:	e022      	b.n	801436a <cmp_lfn+0xd2>
			}
			wc = uc;
 8014324:	89bb      	ldrh	r3, [r7, #12]
 8014326:	81fb      	strh	r3, [r7, #14]
 8014328:	e006      	b.n	8014338 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801432a:	89bb      	ldrh	r3, [r7, #12]
 801432c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014330:	4293      	cmp	r3, r2
 8014332:	d001      	beq.n	8014338 <cmp_lfn+0xa0>
 8014334:	2300      	movs	r3, #0
 8014336:	e018      	b.n	801436a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8014338:	693b      	ldr	r3, [r7, #16]
 801433a:	3301      	adds	r3, #1
 801433c:	613b      	str	r3, [r7, #16]
 801433e:	693b      	ldr	r3, [r7, #16]
 8014340:	2b0c      	cmp	r3, #12
 8014342:	d9c8      	bls.n	80142d6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	781b      	ldrb	r3, [r3, #0]
 8014348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801434c:	2b00      	cmp	r3, #0
 801434e:	d00b      	beq.n	8014368 <cmp_lfn+0xd0>
 8014350:	89fb      	ldrh	r3, [r7, #14]
 8014352:	2b00      	cmp	r3, #0
 8014354:	d008      	beq.n	8014368 <cmp_lfn+0xd0>
 8014356:	697b      	ldr	r3, [r7, #20]
 8014358:	005b      	lsls	r3, r3, #1
 801435a:	687a      	ldr	r2, [r7, #4]
 801435c:	4413      	add	r3, r2
 801435e:	881b      	ldrh	r3, [r3, #0]
 8014360:	2b00      	cmp	r3, #0
 8014362:	d001      	beq.n	8014368 <cmp_lfn+0xd0>
 8014364:	2300      	movs	r3, #0
 8014366:	e000      	b.n	801436a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8014368:	2301      	movs	r3, #1
}
 801436a:	4618      	mov	r0, r3
 801436c:	371c      	adds	r7, #28
 801436e:	46bd      	mov	sp, r7
 8014370:	bd90      	pop	{r4, r7, pc}
 8014372:	bf00      	nop
 8014374:	08017660 	.word	0x08017660

08014378 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b088      	sub	sp, #32
 801437c:	af00      	add	r7, sp, #0
 801437e:	60f8      	str	r0, [r7, #12]
 8014380:	60b9      	str	r1, [r7, #8]
 8014382:	4611      	mov	r1, r2
 8014384:	461a      	mov	r2, r3
 8014386:	460b      	mov	r3, r1
 8014388:	71fb      	strb	r3, [r7, #7]
 801438a:	4613      	mov	r3, r2
 801438c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	330d      	adds	r3, #13
 8014392:	79ba      	ldrb	r2, [r7, #6]
 8014394:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8014396:	68bb      	ldr	r3, [r7, #8]
 8014398:	330b      	adds	r3, #11
 801439a:	220f      	movs	r2, #15
 801439c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	330c      	adds	r3, #12
 80143a2:	2200      	movs	r2, #0
 80143a4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	331a      	adds	r3, #26
 80143aa:	2100      	movs	r1, #0
 80143ac:	4618      	mov	r0, r3
 80143ae:	f7ff f8a2 	bl	80134f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80143b2:	79fb      	ldrb	r3, [r7, #7]
 80143b4:	1e5a      	subs	r2, r3, #1
 80143b6:	4613      	mov	r3, r2
 80143b8:	005b      	lsls	r3, r3, #1
 80143ba:	4413      	add	r3, r2
 80143bc:	009b      	lsls	r3, r3, #2
 80143be:	4413      	add	r3, r2
 80143c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80143c2:	2300      	movs	r3, #0
 80143c4:	82fb      	strh	r3, [r7, #22]
 80143c6:	2300      	movs	r3, #0
 80143c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80143ca:	8afb      	ldrh	r3, [r7, #22]
 80143cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80143d0:	4293      	cmp	r3, r2
 80143d2:	d007      	beq.n	80143e4 <put_lfn+0x6c>
 80143d4:	69fb      	ldr	r3, [r7, #28]
 80143d6:	1c5a      	adds	r2, r3, #1
 80143d8:	61fa      	str	r2, [r7, #28]
 80143da:	005b      	lsls	r3, r3, #1
 80143dc:	68fa      	ldr	r2, [r7, #12]
 80143de:	4413      	add	r3, r2
 80143e0:	881b      	ldrh	r3, [r3, #0]
 80143e2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80143e4:	4a17      	ldr	r2, [pc, #92]	; (8014444 <put_lfn+0xcc>)
 80143e6:	69bb      	ldr	r3, [r7, #24]
 80143e8:	4413      	add	r3, r2
 80143ea:	781b      	ldrb	r3, [r3, #0]
 80143ec:	461a      	mov	r2, r3
 80143ee:	68bb      	ldr	r3, [r7, #8]
 80143f0:	4413      	add	r3, r2
 80143f2:	8afa      	ldrh	r2, [r7, #22]
 80143f4:	4611      	mov	r1, r2
 80143f6:	4618      	mov	r0, r3
 80143f8:	f7ff f87d 	bl	80134f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80143fc:	8afb      	ldrh	r3, [r7, #22]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d102      	bne.n	8014408 <put_lfn+0x90>
 8014402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014406:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8014408:	69bb      	ldr	r3, [r7, #24]
 801440a:	3301      	adds	r3, #1
 801440c:	61bb      	str	r3, [r7, #24]
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	2b0c      	cmp	r3, #12
 8014412:	d9da      	bls.n	80143ca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8014414:	8afb      	ldrh	r3, [r7, #22]
 8014416:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801441a:	4293      	cmp	r3, r2
 801441c:	d006      	beq.n	801442c <put_lfn+0xb4>
 801441e:	69fb      	ldr	r3, [r7, #28]
 8014420:	005b      	lsls	r3, r3, #1
 8014422:	68fa      	ldr	r2, [r7, #12]
 8014424:	4413      	add	r3, r2
 8014426:	881b      	ldrh	r3, [r3, #0]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d103      	bne.n	8014434 <put_lfn+0xbc>
 801442c:	79fb      	ldrb	r3, [r7, #7]
 801442e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014432:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	79fa      	ldrb	r2, [r7, #7]
 8014438:	701a      	strb	r2, [r3, #0]
}
 801443a:	bf00      	nop
 801443c:	3720      	adds	r7, #32
 801443e:	46bd      	mov	sp, r7
 8014440:	bd80      	pop	{r7, pc}
 8014442:	bf00      	nop
 8014444:	08017660 	.word	0x08017660

08014448 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b08c      	sub	sp, #48	; 0x30
 801444c:	af00      	add	r7, sp, #0
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	60b9      	str	r1, [r7, #8]
 8014452:	607a      	str	r2, [r7, #4]
 8014454:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8014456:	220b      	movs	r2, #11
 8014458:	68b9      	ldr	r1, [r7, #8]
 801445a:	68f8      	ldr	r0, [r7, #12]
 801445c:	f7ff f892 	bl	8013584 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8014460:	683b      	ldr	r3, [r7, #0]
 8014462:	2b05      	cmp	r3, #5
 8014464:	d92b      	bls.n	80144be <gen_numname+0x76>
		sr = seq;
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801446a:	e022      	b.n	80144b2 <gen_numname+0x6a>
			wc = *lfn++;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	1c9a      	adds	r2, r3, #2
 8014470:	607a      	str	r2, [r7, #4]
 8014472:	881b      	ldrh	r3, [r3, #0]
 8014474:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8014476:	2300      	movs	r3, #0
 8014478:	62bb      	str	r3, [r7, #40]	; 0x28
 801447a:	e017      	b.n	80144ac <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 801447c:	69fb      	ldr	r3, [r7, #28]
 801447e:	005a      	lsls	r2, r3, #1
 8014480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014482:	f003 0301 	and.w	r3, r3, #1
 8014486:	4413      	add	r3, r2
 8014488:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801448a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801448c:	085b      	lsrs	r3, r3, #1
 801448e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8014490:	69fb      	ldr	r3, [r7, #28]
 8014492:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014496:	2b00      	cmp	r3, #0
 8014498:	d005      	beq.n	80144a6 <gen_numname+0x5e>
 801449a:	69fb      	ldr	r3, [r7, #28]
 801449c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80144a0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80144a4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80144a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144a8:	3301      	adds	r3, #1
 80144aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80144ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144ae:	2b0f      	cmp	r3, #15
 80144b0:	d9e4      	bls.n	801447c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	881b      	ldrh	r3, [r3, #0]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d1d8      	bne.n	801446c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80144ba:	69fb      	ldr	r3, [r7, #28]
 80144bc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80144be:	2307      	movs	r3, #7
 80144c0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80144c2:	683b      	ldr	r3, [r7, #0]
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	f003 030f 	and.w	r3, r3, #15
 80144ca:	b2db      	uxtb	r3, r3
 80144cc:	3330      	adds	r3, #48	; 0x30
 80144ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80144d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144d6:	2b39      	cmp	r3, #57	; 0x39
 80144d8:	d904      	bls.n	80144e4 <gen_numname+0x9c>
 80144da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144de:	3307      	adds	r3, #7
 80144e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80144e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e6:	1e5a      	subs	r2, r3, #1
 80144e8:	62ba      	str	r2, [r7, #40]	; 0x28
 80144ea:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80144ee:	4413      	add	r3, r2
 80144f0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80144f4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	091b      	lsrs	r3, r3, #4
 80144fc:	603b      	str	r3, [r7, #0]
	} while (seq);
 80144fe:	683b      	ldr	r3, [r7, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d1de      	bne.n	80144c2 <gen_numname+0x7a>
	ns[i] = '~';
 8014504:	f107 0214 	add.w	r2, r7, #20
 8014508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801450a:	4413      	add	r3, r2
 801450c:	227e      	movs	r2, #126	; 0x7e
 801450e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8014510:	2300      	movs	r3, #0
 8014512:	627b      	str	r3, [r7, #36]	; 0x24
 8014514:	e002      	b.n	801451c <gen_numname+0xd4>
 8014516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014518:	3301      	adds	r3, #1
 801451a:	627b      	str	r3, [r7, #36]	; 0x24
 801451c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014520:	429a      	cmp	r2, r3
 8014522:	d205      	bcs.n	8014530 <gen_numname+0xe8>
 8014524:	68fa      	ldr	r2, [r7, #12]
 8014526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014528:	4413      	add	r3, r2
 801452a:	781b      	ldrb	r3, [r3, #0]
 801452c:	2b20      	cmp	r3, #32
 801452e:	d1f2      	bne.n	8014516 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8014530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014532:	2b07      	cmp	r3, #7
 8014534:	d808      	bhi.n	8014548 <gen_numname+0x100>
 8014536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014538:	1c5a      	adds	r2, r3, #1
 801453a:	62ba      	str	r2, [r7, #40]	; 0x28
 801453c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8014540:	4413      	add	r3, r2
 8014542:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8014546:	e000      	b.n	801454a <gen_numname+0x102>
 8014548:	2120      	movs	r1, #32
 801454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801454c:	1c5a      	adds	r2, r3, #1
 801454e:	627a      	str	r2, [r7, #36]	; 0x24
 8014550:	68fa      	ldr	r2, [r7, #12]
 8014552:	4413      	add	r3, r2
 8014554:	460a      	mov	r2, r1
 8014556:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8014558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801455a:	2b07      	cmp	r3, #7
 801455c:	d9e8      	bls.n	8014530 <gen_numname+0xe8>
}
 801455e:	bf00      	nop
 8014560:	bf00      	nop
 8014562:	3730      	adds	r7, #48	; 0x30
 8014564:	46bd      	mov	sp, r7
 8014566:	bd80      	pop	{r7, pc}

08014568 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8014568:	b480      	push	{r7}
 801456a:	b085      	sub	sp, #20
 801456c:	af00      	add	r7, sp, #0
 801456e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8014570:	2300      	movs	r3, #0
 8014572:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8014574:	230b      	movs	r3, #11
 8014576:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8014578:	7bfb      	ldrb	r3, [r7, #15]
 801457a:	b2da      	uxtb	r2, r3
 801457c:	0852      	lsrs	r2, r2, #1
 801457e:	01db      	lsls	r3, r3, #7
 8014580:	4313      	orrs	r3, r2
 8014582:	b2da      	uxtb	r2, r3
 8014584:	687b      	ldr	r3, [r7, #4]
 8014586:	1c59      	adds	r1, r3, #1
 8014588:	6079      	str	r1, [r7, #4]
 801458a:	781b      	ldrb	r3, [r3, #0]
 801458c:	4413      	add	r3, r2
 801458e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8014590:	68bb      	ldr	r3, [r7, #8]
 8014592:	3b01      	subs	r3, #1
 8014594:	60bb      	str	r3, [r7, #8]
 8014596:	68bb      	ldr	r3, [r7, #8]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d1ed      	bne.n	8014578 <sum_sfn+0x10>
	return sum;
 801459c:	7bfb      	ldrb	r3, [r7, #15]
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3714      	adds	r7, #20
 80145a2:	46bd      	mov	sp, r7
 80145a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145a8:	4770      	bx	lr

080145aa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80145aa:	b580      	push	{r7, lr}
 80145ac:	b086      	sub	sp, #24
 80145ae:	af00      	add	r7, sp, #0
 80145b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80145b8:	2100      	movs	r1, #0
 80145ba:	6878      	ldr	r0, [r7, #4]
 80145bc:	f7ff fc86 	bl	8013ecc <dir_sdi>
 80145c0:	4603      	mov	r3, r0
 80145c2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80145c4:	7dfb      	ldrb	r3, [r7, #23]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d001      	beq.n	80145ce <dir_find+0x24>
 80145ca:	7dfb      	ldrb	r3, [r7, #23]
 80145cc:	e0a9      	b.n	8014722 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80145ce:	23ff      	movs	r3, #255	; 0xff
 80145d0:	753b      	strb	r3, [r7, #20]
 80145d2:	7d3b      	ldrb	r3, [r7, #20]
 80145d4:	757b      	strb	r3, [r7, #21]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	f04f 32ff 	mov.w	r2, #4294967295
 80145dc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
	do {
		res = move_window(fs, dp->sect);
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	699b      	ldr	r3, [r3, #24]
 80145e2:	4619      	mov	r1, r3
 80145e4:	6938      	ldr	r0, [r7, #16]
 80145e6:	f7ff f88f 	bl	8013708 <move_window>
 80145ea:	4603      	mov	r3, r0
 80145ec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80145ee:	7dfb      	ldrb	r3, [r7, #23]
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	f040 8090 	bne.w	8014716 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	69db      	ldr	r3, [r3, #28]
 80145fa:	781b      	ldrb	r3, [r3, #0]
 80145fc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80145fe:	7dbb      	ldrb	r3, [r7, #22]
 8014600:	2b00      	cmp	r3, #0
 8014602:	d102      	bne.n	801460a <dir_find+0x60>
 8014604:	2304      	movs	r3, #4
 8014606:	75fb      	strb	r3, [r7, #23]
 8014608:	e08a      	b.n	8014720 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	69db      	ldr	r3, [r3, #28]
 801460e:	330b      	adds	r3, #11
 8014610:	781b      	ldrb	r3, [r3, #0]
 8014612:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014616:	73fb      	strb	r3, [r7, #15]
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	7bfa      	ldrb	r2, [r7, #15]
 801461c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801461e:	7dbb      	ldrb	r3, [r7, #22]
 8014620:	2be5      	cmp	r3, #229	; 0xe5
 8014622:	d007      	beq.n	8014634 <dir_find+0x8a>
 8014624:	7bfb      	ldrb	r3, [r7, #15]
 8014626:	f003 0308 	and.w	r3, r3, #8
 801462a:	2b00      	cmp	r3, #0
 801462c:	d009      	beq.n	8014642 <dir_find+0x98>
 801462e:	7bfb      	ldrb	r3, [r7, #15]
 8014630:	2b0f      	cmp	r3, #15
 8014632:	d006      	beq.n	8014642 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8014634:	23ff      	movs	r3, #255	; 0xff
 8014636:	757b      	strb	r3, [r7, #21]
 8014638:	687b      	ldr	r3, [r7, #4]
 801463a:	f04f 32ff 	mov.w	r2, #4294967295
 801463e:	62da      	str	r2, [r3, #44]	; 0x2c
 8014640:	e05e      	b.n	8014700 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8014642:	7bfb      	ldrb	r3, [r7, #15]
 8014644:	2b0f      	cmp	r3, #15
 8014646:	d136      	bne.n	80146b6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014652:	2b00      	cmp	r3, #0
 8014654:	d154      	bne.n	8014700 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8014656:	7dbb      	ldrb	r3, [r7, #22]
 8014658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801465c:	2b00      	cmp	r3, #0
 801465e:	d00d      	beq.n	801467c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8014660:	687b      	ldr	r3, [r7, #4]
 8014662:	69db      	ldr	r3, [r3, #28]
 8014664:	7b5b      	ldrb	r3, [r3, #13]
 8014666:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8014668:	7dbb      	ldrb	r3, [r7, #22]
 801466a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801466e:	75bb      	strb	r3, [r7, #22]
 8014670:	7dbb      	ldrb	r3, [r7, #22]
 8014672:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	691a      	ldr	r2, [r3, #16]
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	62da      	str	r2, [r3, #44]	; 0x2c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801467c:	7dba      	ldrb	r2, [r7, #22]
 801467e:	7d7b      	ldrb	r3, [r7, #21]
 8014680:	429a      	cmp	r2, r3
 8014682:	d115      	bne.n	80146b0 <dir_find+0x106>
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	69db      	ldr	r3, [r3, #28]
 8014688:	330d      	adds	r3, #13
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	7d3a      	ldrb	r2, [r7, #20]
 801468e:	429a      	cmp	r2, r3
 8014690:	d10e      	bne.n	80146b0 <dir_find+0x106>
 8014692:	693b      	ldr	r3, [r7, #16]
 8014694:	691a      	ldr	r2, [r3, #16]
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	69db      	ldr	r3, [r3, #28]
 801469a:	4619      	mov	r1, r3
 801469c:	4610      	mov	r0, r2
 801469e:	f7ff fdfb 	bl	8014298 <cmp_lfn>
 80146a2:	4603      	mov	r3, r0
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d003      	beq.n	80146b0 <dir_find+0x106>
 80146a8:	7d7b      	ldrb	r3, [r7, #21]
 80146aa:	3b01      	subs	r3, #1
 80146ac:	b2db      	uxtb	r3, r3
 80146ae:	e000      	b.n	80146b2 <dir_find+0x108>
 80146b0:	23ff      	movs	r3, #255	; 0xff
 80146b2:	757b      	strb	r3, [r7, #21]
 80146b4:	e024      	b.n	8014700 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80146b6:	7d7b      	ldrb	r3, [r7, #21]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d109      	bne.n	80146d0 <dir_find+0x126>
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	69db      	ldr	r3, [r3, #28]
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7ff ff51 	bl	8014568 <sum_sfn>
 80146c6:	4603      	mov	r3, r0
 80146c8:	461a      	mov	r2, r3
 80146ca:	7d3b      	ldrb	r3, [r7, #20]
 80146cc:	4293      	cmp	r3, r2
 80146ce:	d024      	beq.n	801471a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80146d6:	f003 0301 	and.w	r3, r3, #1
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d10a      	bne.n	80146f4 <dir_find+0x14a>
 80146de:	687b      	ldr	r3, [r7, #4]
 80146e0:	69d8      	ldr	r0, [r3, #28]
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	3320      	adds	r3, #32
 80146e6:	220b      	movs	r2, #11
 80146e8:	4619      	mov	r1, r3
 80146ea:	f7fe ff87 	bl	80135fc <mem_cmp>
 80146ee:	4603      	mov	r3, r0
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d014      	beq.n	801471e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80146f4:	23ff      	movs	r3, #255	; 0xff
 80146f6:	757b      	strb	r3, [r7, #21]
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	f04f 32ff 	mov.w	r2, #4294967295
 80146fe:	62da      	str	r2, [r3, #44]	; 0x2c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8014700:	2100      	movs	r1, #0
 8014702:	6878      	ldr	r0, [r7, #4]
 8014704:	f7ff fc6b 	bl	8013fde <dir_next>
 8014708:	4603      	mov	r3, r0
 801470a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801470c:	7dfb      	ldrb	r3, [r7, #23]
 801470e:	2b00      	cmp	r3, #0
 8014710:	f43f af65 	beq.w	80145de <dir_find+0x34>
 8014714:	e004      	b.n	8014720 <dir_find+0x176>
		if (res != FR_OK) break;
 8014716:	bf00      	nop
 8014718:	e002      	b.n	8014720 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801471a:	bf00      	nop
 801471c:	e000      	b.n	8014720 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801471e:	bf00      	nop

	return res;
 8014720:	7dfb      	ldrb	r3, [r7, #23]
}
 8014722:	4618      	mov	r0, r3
 8014724:	3718      	adds	r7, #24
 8014726:	46bd      	mov	sp, r7
 8014728:	bd80      	pop	{r7, pc}
	...

0801472c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801472c:	b580      	push	{r7, lr}
 801472e:	b08c      	sub	sp, #48	; 0x30
 8014730:	af00      	add	r7, sp, #0
 8014732:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014740:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8014744:	2b00      	cmp	r3, #0
 8014746:	d001      	beq.n	801474c <dir_register+0x20>
 8014748:	2306      	movs	r3, #6
 801474a:	e0e0      	b.n	801490e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 801474c:	2300      	movs	r3, #0
 801474e:	627b      	str	r3, [r7, #36]	; 0x24
 8014750:	e002      	b.n	8014758 <dir_register+0x2c>
 8014752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014754:	3301      	adds	r3, #1
 8014756:	627b      	str	r3, [r7, #36]	; 0x24
 8014758:	69fb      	ldr	r3, [r7, #28]
 801475a:	691a      	ldr	r2, [r3, #16]
 801475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801475e:	005b      	lsls	r3, r3, #1
 8014760:	4413      	add	r3, r2
 8014762:	881b      	ldrh	r3, [r3, #0]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d1f4      	bne.n	8014752 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f103 0120 	add.w	r1, r3, #32
 801476e:	f107 030c 	add.w	r3, r7, #12
 8014772:	220c      	movs	r2, #12
 8014774:	4618      	mov	r0, r3
 8014776:	f7fe ff05 	bl	8013584 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801477a:	7dfb      	ldrb	r3, [r7, #23]
 801477c:	f003 0301 	and.w	r3, r3, #1
 8014780:	2b00      	cmp	r3, #0
 8014782:	d032      	beq.n	80147ea <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	2240      	movs	r2, #64	; 0x40
 8014788:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		for (n = 1; n < 100; n++) {
 801478c:	2301      	movs	r3, #1
 801478e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014790:	e016      	b.n	80147c0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	f103 0020 	add.w	r0, r3, #32
 8014798:	69fb      	ldr	r3, [r7, #28]
 801479a:	691a      	ldr	r2, [r3, #16]
 801479c:	f107 010c 	add.w	r1, r7, #12
 80147a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147a2:	f7ff fe51 	bl	8014448 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80147a6:	6878      	ldr	r0, [r7, #4]
 80147a8:	f7ff feff 	bl	80145aa <dir_find>
 80147ac:	4603      	mov	r3, r0
 80147ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80147b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d106      	bne.n	80147c8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80147ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147bc:	3301      	adds	r3, #1
 80147be:	62bb      	str	r3, [r7, #40]	; 0x28
 80147c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c2:	2b63      	cmp	r3, #99	; 0x63
 80147c4:	d9e5      	bls.n	8014792 <dir_register+0x66>
 80147c6:	e000      	b.n	80147ca <dir_register+0x9e>
			if (res != FR_OK) break;
 80147c8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80147ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147cc:	2b64      	cmp	r3, #100	; 0x64
 80147ce:	d101      	bne.n	80147d4 <dir_register+0xa8>
 80147d0:	2307      	movs	r3, #7
 80147d2:	e09c      	b.n	801490e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80147d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147d8:	2b04      	cmp	r3, #4
 80147da:	d002      	beq.n	80147e2 <dir_register+0xb6>
 80147dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147e0:	e095      	b.n	801490e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80147e2:	7dfa      	ldrb	r2, [r7, #23]
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80147ea:	7dfb      	ldrb	r3, [r7, #23]
 80147ec:	f003 0302 	and.w	r3, r3, #2
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d007      	beq.n	8014804 <dir_register+0xd8>
 80147f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147f6:	330c      	adds	r3, #12
 80147f8:	4a47      	ldr	r2, [pc, #284]	; (8014918 <dir_register+0x1ec>)
 80147fa:	fba2 2303 	umull	r2, r3, r2, r3
 80147fe:	089b      	lsrs	r3, r3, #2
 8014800:	3301      	adds	r3, #1
 8014802:	e000      	b.n	8014806 <dir_register+0xda>
 8014804:	2301      	movs	r3, #1
 8014806:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8014808:	6a39      	ldr	r1, [r7, #32]
 801480a:	6878      	ldr	r0, [r7, #4]
 801480c:	f7ff fcbd 	bl	801418a <dir_alloc>
 8014810:	4603      	mov	r3, r0
 8014812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8014816:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801481a:	2b00      	cmp	r3, #0
 801481c:	d148      	bne.n	80148b0 <dir_register+0x184>
 801481e:	6a3b      	ldr	r3, [r7, #32]
 8014820:	3b01      	subs	r3, #1
 8014822:	623b      	str	r3, [r7, #32]
 8014824:	6a3b      	ldr	r3, [r7, #32]
 8014826:	2b00      	cmp	r3, #0
 8014828:	d042      	beq.n	80148b0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	691a      	ldr	r2, [r3, #16]
 801482e:	6a3b      	ldr	r3, [r7, #32]
 8014830:	015b      	lsls	r3, r3, #5
 8014832:	1ad3      	subs	r3, r2, r3
 8014834:	4619      	mov	r1, r3
 8014836:	6878      	ldr	r0, [r7, #4]
 8014838:	f7ff fb48 	bl	8013ecc <dir_sdi>
 801483c:	4603      	mov	r3, r0
 801483e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8014842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014846:	2b00      	cmp	r3, #0
 8014848:	d132      	bne.n	80148b0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	3320      	adds	r3, #32
 801484e:	4618      	mov	r0, r3
 8014850:	f7ff fe8a 	bl	8014568 <sum_sfn>
 8014854:	4603      	mov	r3, r0
 8014856:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	699b      	ldr	r3, [r3, #24]
 801485c:	4619      	mov	r1, r3
 801485e:	69f8      	ldr	r0, [r7, #28]
 8014860:	f7fe ff52 	bl	8013708 <move_window>
 8014864:	4603      	mov	r3, r0
 8014866:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801486a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801486e:	2b00      	cmp	r3, #0
 8014870:	d11d      	bne.n	80148ae <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8014872:	69fb      	ldr	r3, [r7, #28]
 8014874:	6918      	ldr	r0, [r3, #16]
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	69d9      	ldr	r1, [r3, #28]
 801487a:	6a3b      	ldr	r3, [r7, #32]
 801487c:	b2da      	uxtb	r2, r3
 801487e:	7efb      	ldrb	r3, [r7, #27]
 8014880:	f7ff fd7a 	bl	8014378 <put_lfn>
				fs->wflag = 1;
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	2201      	movs	r2, #1
 8014888:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801488a:	2100      	movs	r1, #0
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f7ff fba6 	bl	8013fde <dir_next>
 8014892:	4603      	mov	r3, r0
 8014894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8014898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801489c:	2b00      	cmp	r3, #0
 801489e:	d107      	bne.n	80148b0 <dir_register+0x184>
 80148a0:	6a3b      	ldr	r3, [r7, #32]
 80148a2:	3b01      	subs	r3, #1
 80148a4:	623b      	str	r3, [r7, #32]
 80148a6:	6a3b      	ldr	r3, [r7, #32]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d1d5      	bne.n	8014858 <dir_register+0x12c>
 80148ac:	e000      	b.n	80148b0 <dir_register+0x184>
				if (res != FR_OK) break;
 80148ae:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80148b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148b4:	2b00      	cmp	r3, #0
 80148b6:	d128      	bne.n	801490a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	699b      	ldr	r3, [r3, #24]
 80148bc:	4619      	mov	r1, r3
 80148be:	69f8      	ldr	r0, [r7, #28]
 80148c0:	f7fe ff22 	bl	8013708 <move_window>
 80148c4:	4603      	mov	r3, r0
 80148c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80148ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d11b      	bne.n	801490a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	69db      	ldr	r3, [r3, #28]
 80148d6:	2220      	movs	r2, #32
 80148d8:	2100      	movs	r1, #0
 80148da:	4618      	mov	r0, r3
 80148dc:	f7fe fe73 	bl	80135c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	69d8      	ldr	r0, [r3, #28]
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	3320      	adds	r3, #32
 80148e8:	220b      	movs	r2, #11
 80148ea:	4619      	mov	r1, r3
 80148ec:	f7fe fe4a 	bl	8013584 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	69db      	ldr	r3, [r3, #28]
 80148fa:	330c      	adds	r3, #12
 80148fc:	f002 0218 	and.w	r2, r2, #24
 8014900:	b2d2      	uxtb	r2, r2
 8014902:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8014904:	69fb      	ldr	r3, [r7, #28]
 8014906:	2201      	movs	r2, #1
 8014908:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801490a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801490e:	4618      	mov	r0, r3
 8014910:	3730      	adds	r7, #48	; 0x30
 8014912:	46bd      	mov	sp, r7
 8014914:	bd80      	pop	{r7, pc}
 8014916:	bf00      	nop
 8014918:	4ec4ec4f 	.word	0x4ec4ec4f

0801491c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	b08a      	sub	sp, #40	; 0x28
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
 8014924:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	613b      	str	r3, [r7, #16]
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	681b      	ldr	r3, [r3, #0]
 8014930:	691b      	ldr	r3, [r3, #16]
 8014932:	60fb      	str	r3, [r7, #12]
 8014934:	2300      	movs	r3, #0
 8014936:	617b      	str	r3, [r7, #20]
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801493c:	69bb      	ldr	r3, [r7, #24]
 801493e:	1c5a      	adds	r2, r3, #1
 8014940:	61ba      	str	r2, [r7, #24]
 8014942:	693a      	ldr	r2, [r7, #16]
 8014944:	4413      	add	r3, r2
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 801494a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801494c:	2b1f      	cmp	r3, #31
 801494e:	d940      	bls.n	80149d2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8014950:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014952:	2b2f      	cmp	r3, #47	; 0x2f
 8014954:	d006      	beq.n	8014964 <create_name+0x48>
 8014956:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014958:	2b5c      	cmp	r3, #92	; 0x5c
 801495a:	d110      	bne.n	801497e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 801495c:	e002      	b.n	8014964 <create_name+0x48>
 801495e:	69bb      	ldr	r3, [r7, #24]
 8014960:	3301      	adds	r3, #1
 8014962:	61bb      	str	r3, [r7, #24]
 8014964:	693a      	ldr	r2, [r7, #16]
 8014966:	69bb      	ldr	r3, [r7, #24]
 8014968:	4413      	add	r3, r2
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	2b2f      	cmp	r3, #47	; 0x2f
 801496e:	d0f6      	beq.n	801495e <create_name+0x42>
 8014970:	693a      	ldr	r2, [r7, #16]
 8014972:	69bb      	ldr	r3, [r7, #24]
 8014974:	4413      	add	r3, r2
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	2b5c      	cmp	r3, #92	; 0x5c
 801497a:	d0f0      	beq.n	801495e <create_name+0x42>
			break;
 801497c:	e02a      	b.n	80149d4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801497e:	697b      	ldr	r3, [r7, #20]
 8014980:	2bfe      	cmp	r3, #254	; 0xfe
 8014982:	d901      	bls.n	8014988 <create_name+0x6c>
 8014984:	2306      	movs	r3, #6
 8014986:	e177      	b.n	8014c78 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8014988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801498a:	b2db      	uxtb	r3, r3
 801498c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801498e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014990:	2101      	movs	r1, #1
 8014992:	4618      	mov	r0, r3
 8014994:	f001 fb32 	bl	8015ffc <ff_convert>
 8014998:	4603      	mov	r3, r0
 801499a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801499c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801499e:	2b00      	cmp	r3, #0
 80149a0:	d101      	bne.n	80149a6 <create_name+0x8a>
 80149a2:	2306      	movs	r3, #6
 80149a4:	e168      	b.n	8014c78 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80149a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149a8:	2b7f      	cmp	r3, #127	; 0x7f
 80149aa:	d809      	bhi.n	80149c0 <create_name+0xa4>
 80149ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149ae:	4619      	mov	r1, r3
 80149b0:	48b3      	ldr	r0, [pc, #716]	; (8014c80 <create_name+0x364>)
 80149b2:	f7fe fe4a 	bl	801364a <chk_chr>
 80149b6:	4603      	mov	r3, r0
 80149b8:	2b00      	cmp	r3, #0
 80149ba:	d001      	beq.n	80149c0 <create_name+0xa4>
 80149bc:	2306      	movs	r3, #6
 80149be:	e15b      	b.n	8014c78 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80149c0:	697b      	ldr	r3, [r7, #20]
 80149c2:	1c5a      	adds	r2, r3, #1
 80149c4:	617a      	str	r2, [r7, #20]
 80149c6:	005b      	lsls	r3, r3, #1
 80149c8:	68fa      	ldr	r2, [r7, #12]
 80149ca:	4413      	add	r3, r2
 80149cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80149ce:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80149d0:	e7b4      	b.n	801493c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80149d2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80149d4:	693a      	ldr	r2, [r7, #16]
 80149d6:	69bb      	ldr	r3, [r7, #24]
 80149d8:	441a      	add	r2, r3
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80149de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80149e0:	2b1f      	cmp	r3, #31
 80149e2:	d801      	bhi.n	80149e8 <create_name+0xcc>
 80149e4:	2304      	movs	r3, #4
 80149e6:	e000      	b.n	80149ea <create_name+0xce>
 80149e8:	2300      	movs	r3, #0
 80149ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80149ee:	e011      	b.n	8014a14 <create_name+0xf8>
		w = lfn[di - 1];
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80149f6:	3b01      	subs	r3, #1
 80149f8:	005b      	lsls	r3, r3, #1
 80149fa:	68fa      	ldr	r2, [r7, #12]
 80149fc:	4413      	add	r3, r2
 80149fe:	881b      	ldrh	r3, [r3, #0]
 8014a00:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8014a02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a04:	2b20      	cmp	r3, #32
 8014a06:	d002      	beq.n	8014a0e <create_name+0xf2>
 8014a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8014a0c:	d106      	bne.n	8014a1c <create_name+0x100>
		di--;
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	3b01      	subs	r3, #1
 8014a12:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d1ea      	bne.n	80149f0 <create_name+0xd4>
 8014a1a:	e000      	b.n	8014a1e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8014a1c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	68fa      	ldr	r2, [r7, #12]
 8014a24:	4413      	add	r3, r2
 8014a26:	2200      	movs	r2, #0
 8014a28:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d101      	bne.n	8014a34 <create_name+0x118>
 8014a30:	2306      	movs	r3, #6
 8014a32:	e121      	b.n	8014c78 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	3320      	adds	r3, #32
 8014a38:	220b      	movs	r2, #11
 8014a3a:	2120      	movs	r1, #32
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7fe fdc2 	bl	80135c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8014a42:	2300      	movs	r3, #0
 8014a44:	61bb      	str	r3, [r7, #24]
 8014a46:	e002      	b.n	8014a4e <create_name+0x132>
 8014a48:	69bb      	ldr	r3, [r7, #24]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	61bb      	str	r3, [r7, #24]
 8014a4e:	69bb      	ldr	r3, [r7, #24]
 8014a50:	005b      	lsls	r3, r3, #1
 8014a52:	68fa      	ldr	r2, [r7, #12]
 8014a54:	4413      	add	r3, r2
 8014a56:	881b      	ldrh	r3, [r3, #0]
 8014a58:	2b20      	cmp	r3, #32
 8014a5a:	d0f5      	beq.n	8014a48 <create_name+0x12c>
 8014a5c:	69bb      	ldr	r3, [r7, #24]
 8014a5e:	005b      	lsls	r3, r3, #1
 8014a60:	68fa      	ldr	r2, [r7, #12]
 8014a62:	4413      	add	r3, r2
 8014a64:	881b      	ldrh	r3, [r3, #0]
 8014a66:	2b2e      	cmp	r3, #46	; 0x2e
 8014a68:	d0ee      	beq.n	8014a48 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8014a6a:	69bb      	ldr	r3, [r7, #24]
 8014a6c:	2b00      	cmp	r3, #0
 8014a6e:	d009      	beq.n	8014a84 <create_name+0x168>
 8014a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a74:	f043 0303 	orr.w	r3, r3, #3
 8014a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8014a7c:	e002      	b.n	8014a84 <create_name+0x168>
 8014a7e:	697b      	ldr	r3, [r7, #20]
 8014a80:	3b01      	subs	r3, #1
 8014a82:	617b      	str	r3, [r7, #20]
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	2b00      	cmp	r3, #0
 8014a88:	d009      	beq.n	8014a9e <create_name+0x182>
 8014a8a:	697b      	ldr	r3, [r7, #20]
 8014a8c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014a90:	3b01      	subs	r3, #1
 8014a92:	005b      	lsls	r3, r3, #1
 8014a94:	68fa      	ldr	r2, [r7, #12]
 8014a96:	4413      	add	r3, r2
 8014a98:	881b      	ldrh	r3, [r3, #0]
 8014a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8014a9c:	d1ef      	bne.n	8014a7e <create_name+0x162>

	i = b = 0; ni = 8;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	623b      	str	r3, [r7, #32]
 8014aa8:	2308      	movs	r3, #8
 8014aaa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8014aac:	69bb      	ldr	r3, [r7, #24]
 8014aae:	1c5a      	adds	r2, r3, #1
 8014ab0:	61ba      	str	r2, [r7, #24]
 8014ab2:	005b      	lsls	r3, r3, #1
 8014ab4:	68fa      	ldr	r2, [r7, #12]
 8014ab6:	4413      	add	r3, r2
 8014ab8:	881b      	ldrh	r3, [r3, #0]
 8014aba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8014abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	f000 8090 	beq.w	8014be4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8014ac4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ac6:	2b20      	cmp	r3, #32
 8014ac8:	d006      	beq.n	8014ad8 <create_name+0x1bc>
 8014aca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014acc:	2b2e      	cmp	r3, #46	; 0x2e
 8014ace:	d10a      	bne.n	8014ae6 <create_name+0x1ca>
 8014ad0:	69ba      	ldr	r2, [r7, #24]
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	429a      	cmp	r2, r3
 8014ad6:	d006      	beq.n	8014ae6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8014ad8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014adc:	f043 0303 	orr.w	r3, r3, #3
 8014ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ae4:	e07d      	b.n	8014be2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8014ae6:	6a3a      	ldr	r2, [r7, #32]
 8014ae8:	69fb      	ldr	r3, [r7, #28]
 8014aea:	429a      	cmp	r2, r3
 8014aec:	d203      	bcs.n	8014af6 <create_name+0x1da>
 8014aee:	69ba      	ldr	r2, [r7, #24]
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	429a      	cmp	r2, r3
 8014af4:	d123      	bne.n	8014b3e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8014af6:	69fb      	ldr	r3, [r7, #28]
 8014af8:	2b0b      	cmp	r3, #11
 8014afa:	d106      	bne.n	8014b0a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8014afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b00:	f043 0303 	orr.w	r3, r3, #3
 8014b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b08:	e06f      	b.n	8014bea <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8014b0a:	69ba      	ldr	r2, [r7, #24]
 8014b0c:	697b      	ldr	r3, [r7, #20]
 8014b0e:	429a      	cmp	r2, r3
 8014b10:	d005      	beq.n	8014b1e <create_name+0x202>
 8014b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b16:	f043 0303 	orr.w	r3, r3, #3
 8014b1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8014b1e:	69ba      	ldr	r2, [r7, #24]
 8014b20:	697b      	ldr	r3, [r7, #20]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d860      	bhi.n	8014be8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	61bb      	str	r3, [r7, #24]
 8014b2a:	2308      	movs	r3, #8
 8014b2c:	623b      	str	r3, [r7, #32]
 8014b2e:	230b      	movs	r3, #11
 8014b30:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8014b32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014b36:	009b      	lsls	r3, r3, #2
 8014b38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014b3c:	e051      	b.n	8014be2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8014b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b40:	2b7f      	cmp	r3, #127	; 0x7f
 8014b42:	d914      	bls.n	8014b6e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8014b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b46:	2100      	movs	r1, #0
 8014b48:	4618      	mov	r0, r3
 8014b4a:	f001 fa57 	bl	8015ffc <ff_convert>
 8014b4e:	4603      	mov	r3, r0
 8014b50:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8014b52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d004      	beq.n	8014b62 <create_name+0x246>
 8014b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b5a:	3b80      	subs	r3, #128	; 0x80
 8014b5c:	4a49      	ldr	r2, [pc, #292]	; (8014c84 <create_name+0x368>)
 8014b5e:	5cd3      	ldrb	r3, [r2, r3]
 8014b60:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8014b62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b66:	f043 0302 	orr.w	r3, r3, #2
 8014b6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8014b6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b70:	2b00      	cmp	r3, #0
 8014b72:	d007      	beq.n	8014b84 <create_name+0x268>
 8014b74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b76:	4619      	mov	r1, r3
 8014b78:	4843      	ldr	r0, [pc, #268]	; (8014c88 <create_name+0x36c>)
 8014b7a:	f7fe fd66 	bl	801364a <chk_chr>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d008      	beq.n	8014b96 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8014b84:	235f      	movs	r3, #95	; 0x5f
 8014b86:	84bb      	strh	r3, [r7, #36]	; 0x24
 8014b88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014b8c:	f043 0303 	orr.w	r3, r3, #3
 8014b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014b94:	e01b      	b.n	8014bce <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8014b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b98:	2b40      	cmp	r3, #64	; 0x40
 8014b9a:	d909      	bls.n	8014bb0 <create_name+0x294>
 8014b9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014b9e:	2b5a      	cmp	r3, #90	; 0x5a
 8014ba0:	d806      	bhi.n	8014bb0 <create_name+0x294>
					b |= 2;
 8014ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014ba6:	f043 0302 	orr.w	r3, r3, #2
 8014baa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014bae:	e00e      	b.n	8014bce <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8014bb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014bb2:	2b60      	cmp	r3, #96	; 0x60
 8014bb4:	d90b      	bls.n	8014bce <create_name+0x2b2>
 8014bb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014bb8:	2b7a      	cmp	r3, #122	; 0x7a
 8014bba:	d808      	bhi.n	8014bce <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8014bbc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014bc0:	f043 0301 	orr.w	r3, r3, #1
 8014bc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014bc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014bca:	3b20      	subs	r3, #32
 8014bcc:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8014bce:	6a3b      	ldr	r3, [r7, #32]
 8014bd0:	1c5a      	adds	r2, r3, #1
 8014bd2:	623a      	str	r2, [r7, #32]
 8014bd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8014bd6:	b2d1      	uxtb	r1, r2
 8014bd8:	687a      	ldr	r2, [r7, #4]
 8014bda:	4413      	add	r3, r2
 8014bdc:	460a      	mov	r2, r1
 8014bde:	f883 2020 	strb.w	r2, [r3, #32]
		w = lfn[si++];					/* Get an LFN character */
 8014be2:	e763      	b.n	8014aac <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8014be4:	bf00      	nop
 8014be6:	e000      	b.n	8014bea <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8014be8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8014bf0:	2be5      	cmp	r3, #229	; 0xe5
 8014bf2:	d103      	bne.n	8014bfc <create_name+0x2e0>
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	2205      	movs	r2, #5
 8014bf8:	f883 2020 	strb.w	r2, [r3, #32]

	if (ni == 8) b <<= 2;
 8014bfc:	69fb      	ldr	r3, [r7, #28]
 8014bfe:	2b08      	cmp	r3, #8
 8014c00:	d104      	bne.n	8014c0c <create_name+0x2f0>
 8014c02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8014c0c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c10:	f003 030c 	and.w	r3, r3, #12
 8014c14:	2b0c      	cmp	r3, #12
 8014c16:	d005      	beq.n	8014c24 <create_name+0x308>
 8014c18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c1c:	f003 0303 	and.w	r3, r3, #3
 8014c20:	2b03      	cmp	r3, #3
 8014c22:	d105      	bne.n	8014c30 <create_name+0x314>
 8014c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c28:	f043 0302 	orr.w	r3, r3, #2
 8014c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8014c30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c34:	f003 0302 	and.w	r3, r3, #2
 8014c38:	2b00      	cmp	r3, #0
 8014c3a:	d117      	bne.n	8014c6c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8014c3c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c40:	f003 0303 	and.w	r3, r3, #3
 8014c44:	2b01      	cmp	r3, #1
 8014c46:	d105      	bne.n	8014c54 <create_name+0x338>
 8014c48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c4c:	f043 0310 	orr.w	r3, r3, #16
 8014c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8014c54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014c58:	f003 030c 	and.w	r3, r3, #12
 8014c5c:	2b04      	cmp	r3, #4
 8014c5e:	d105      	bne.n	8014c6c <create_name+0x350>
 8014c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014c64:	f043 0308 	orr.w	r3, r3, #8
 8014c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014c72:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

	return FR_OK;
 8014c76:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8014c78:	4618      	mov	r0, r3
 8014c7a:	3728      	adds	r7, #40	; 0x28
 8014c7c:	46bd      	mov	sp, r7
 8014c7e:	bd80      	pop	{r7, pc}
 8014c80:	08017520 	.word	0x08017520
 8014c84:	080175e0 	.word	0x080175e0
 8014c88:	0801752c 	.word	0x0801752c

08014c8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b086      	sub	sp, #24
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	6078      	str	r0, [r7, #4]
 8014c94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014c9a:	693b      	ldr	r3, [r7, #16]
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014ca0:	e002      	b.n	8014ca8 <follow_path+0x1c>
 8014ca2:	683b      	ldr	r3, [r7, #0]
 8014ca4:	3301      	adds	r3, #1
 8014ca6:	603b      	str	r3, [r7, #0]
 8014ca8:	683b      	ldr	r3, [r7, #0]
 8014caa:	781b      	ldrb	r3, [r3, #0]
 8014cac:	2b2f      	cmp	r3, #47	; 0x2f
 8014cae:	d0f8      	beq.n	8014ca2 <follow_path+0x16>
 8014cb0:	683b      	ldr	r3, [r7, #0]
 8014cb2:	781b      	ldrb	r3, [r3, #0]
 8014cb4:	2b5c      	cmp	r3, #92	; 0x5c
 8014cb6:	d0f4      	beq.n	8014ca2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014cb8:	693b      	ldr	r3, [r7, #16]
 8014cba:	2200      	movs	r2, #0
 8014cbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014cbe:	683b      	ldr	r3, [r7, #0]
 8014cc0:	781b      	ldrb	r3, [r3, #0]
 8014cc2:	2b1f      	cmp	r3, #31
 8014cc4:	d80a      	bhi.n	8014cdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	2280      	movs	r2, #128	; 0x80
 8014cca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 8014cce:	2100      	movs	r1, #0
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f7ff f8fb 	bl	8013ecc <dir_sdi>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	75fb      	strb	r3, [r7, #23]
 8014cda:	e048      	b.n	8014d6e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014cdc:	463b      	mov	r3, r7
 8014cde:	4619      	mov	r1, r3
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f7ff fe1b 	bl	801491c <create_name>
 8014ce6:	4603      	mov	r3, r0
 8014ce8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014cea:	7dfb      	ldrb	r3, [r7, #23]
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d139      	bne.n	8014d64 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014cf0:	6878      	ldr	r0, [r7, #4]
 8014cf2:	f7ff fc5a 	bl	80145aa <dir_find>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8014d00:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014d02:	7dfb      	ldrb	r3, [r7, #23]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d00a      	beq.n	8014d1e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014d08:	7dfb      	ldrb	r3, [r7, #23]
 8014d0a:	2b04      	cmp	r3, #4
 8014d0c:	d12c      	bne.n	8014d68 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014d0e:	7afb      	ldrb	r3, [r7, #11]
 8014d10:	f003 0304 	and.w	r3, r3, #4
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	d127      	bne.n	8014d68 <follow_path+0xdc>
 8014d18:	2305      	movs	r3, #5
 8014d1a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014d1c:	e024      	b.n	8014d68 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014d1e:	7afb      	ldrb	r3, [r7, #11]
 8014d20:	f003 0304 	and.w	r3, r3, #4
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d121      	bne.n	8014d6c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	799b      	ldrb	r3, [r3, #6]
 8014d2c:	f003 0310 	and.w	r3, r3, #16
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d102      	bne.n	8014d3a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014d34:	2305      	movs	r3, #5
 8014d36:	75fb      	strb	r3, [r7, #23]
 8014d38:	e019      	b.n	8014d6e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	691b      	ldr	r3, [r3, #16]
 8014d44:	68fa      	ldr	r2, [r7, #12]
 8014d46:	8992      	ldrh	r2, [r2, #12]
 8014d48:	fbb3 f0f2 	udiv	r0, r3, r2
 8014d4c:	fb02 f200 	mul.w	r2, r2, r0
 8014d50:	1a9b      	subs	r3, r3, r2
 8014d52:	440b      	add	r3, r1
 8014d54:	4619      	mov	r1, r3
 8014d56:	68f8      	ldr	r0, [r7, #12]
 8014d58:	f7ff fa5e 	bl	8014218 <ld_clust>
 8014d5c:	4602      	mov	r2, r0
 8014d5e:	693b      	ldr	r3, [r7, #16]
 8014d60:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014d62:	e7bb      	b.n	8014cdc <follow_path+0x50>
			if (res != FR_OK) break;
 8014d64:	bf00      	nop
 8014d66:	e002      	b.n	8014d6e <follow_path+0xe2>
				break;
 8014d68:	bf00      	nop
 8014d6a:	e000      	b.n	8014d6e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014d6c:	bf00      	nop
			}
		}
	}

	return res;
 8014d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014d70:	4618      	mov	r0, r3
 8014d72:	3718      	adds	r7, #24
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}

08014d78 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8014d78:	b480      	push	{r7}
 8014d7a:	b087      	sub	sp, #28
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8014d80:	f04f 33ff 	mov.w	r3, #4294967295
 8014d84:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d031      	beq.n	8014df2 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	617b      	str	r3, [r7, #20]
 8014d94:	e002      	b.n	8014d9c <get_ldnumber+0x24>
 8014d96:	697b      	ldr	r3, [r7, #20]
 8014d98:	3301      	adds	r3, #1
 8014d9a:	617b      	str	r3, [r7, #20]
 8014d9c:	697b      	ldr	r3, [r7, #20]
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	2b1f      	cmp	r3, #31
 8014da2:	d903      	bls.n	8014dac <get_ldnumber+0x34>
 8014da4:	697b      	ldr	r3, [r7, #20]
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	2b3a      	cmp	r3, #58	; 0x3a
 8014daa:	d1f4      	bne.n	8014d96 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014dac:	697b      	ldr	r3, [r7, #20]
 8014dae:	781b      	ldrb	r3, [r3, #0]
 8014db0:	2b3a      	cmp	r3, #58	; 0x3a
 8014db2:	d11c      	bne.n	8014dee <get_ldnumber+0x76>
			tp = *path;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	1c5a      	adds	r2, r3, #1
 8014dbe:	60fa      	str	r2, [r7, #12]
 8014dc0:	781b      	ldrb	r3, [r3, #0]
 8014dc2:	3b30      	subs	r3, #48	; 0x30
 8014dc4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014dc6:	68bb      	ldr	r3, [r7, #8]
 8014dc8:	2b09      	cmp	r3, #9
 8014dca:	d80e      	bhi.n	8014dea <get_ldnumber+0x72>
 8014dcc:	68fa      	ldr	r2, [r7, #12]
 8014dce:	697b      	ldr	r3, [r7, #20]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	d10a      	bne.n	8014dea <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d107      	bne.n	8014dea <get_ldnumber+0x72>
					vol = (int)i;
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	3301      	adds	r3, #1
 8014de2:	617b      	str	r3, [r7, #20]
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	697a      	ldr	r2, [r7, #20]
 8014de8:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014dea:	693b      	ldr	r3, [r7, #16]
 8014dec:	e002      	b.n	8014df4 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014dee:	2300      	movs	r3, #0
 8014df0:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014df2:	693b      	ldr	r3, [r7, #16]
}
 8014df4:	4618      	mov	r0, r3
 8014df6:	371c      	adds	r7, #28
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dfe:	4770      	bx	lr

08014e00 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	6078      	str	r0, [r7, #4]
 8014e08:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	70da      	strb	r2, [r3, #3]
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f04f 32ff 	mov.w	r2, #4294967295
 8014e16:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014e18:	6839      	ldr	r1, [r7, #0]
 8014e1a:	6878      	ldr	r0, [r7, #4]
 8014e1c:	f7fe fc74 	bl	8013708 <move_window>
 8014e20:	4603      	mov	r3, r0
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d001      	beq.n	8014e2a <check_fs+0x2a>
 8014e26:	2304      	movs	r3, #4
 8014e28:	e038      	b.n	8014e9c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014e2a:	687b      	ldr	r3, [r7, #4]
 8014e2c:	3338      	adds	r3, #56	; 0x38
 8014e2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7fe fb24 	bl	8013480 <ld_word>
 8014e38:	4603      	mov	r3, r0
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d001      	beq.n	8014e48 <check_fs+0x48>
 8014e44:	2303      	movs	r3, #3
 8014e46:	e029      	b.n	8014e9c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014e4e:	2be9      	cmp	r3, #233	; 0xe9
 8014e50:	d009      	beq.n	8014e66 <check_fs+0x66>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8014e58:	2beb      	cmp	r3, #235	; 0xeb
 8014e5a:	d11e      	bne.n	8014e9a <check_fs+0x9a>
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8014e62:	2b90      	cmp	r3, #144	; 0x90
 8014e64:	d119      	bne.n	8014e9a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	3338      	adds	r3, #56	; 0x38
 8014e6a:	3336      	adds	r3, #54	; 0x36
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f7fe fb1f 	bl	80134b0 <ld_dword>
 8014e72:	4603      	mov	r3, r0
 8014e74:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8014e78:	4a0a      	ldr	r2, [pc, #40]	; (8014ea4 <check_fs+0xa4>)
 8014e7a:	4293      	cmp	r3, r2
 8014e7c:	d101      	bne.n	8014e82 <check_fs+0x82>
 8014e7e:	2300      	movs	r3, #0
 8014e80:	e00c      	b.n	8014e9c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	3338      	adds	r3, #56	; 0x38
 8014e86:	3352      	adds	r3, #82	; 0x52
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7fe fb11 	bl	80134b0 <ld_dword>
 8014e8e:	4603      	mov	r3, r0
 8014e90:	4a05      	ldr	r2, [pc, #20]	; (8014ea8 <check_fs+0xa8>)
 8014e92:	4293      	cmp	r3, r2
 8014e94:	d101      	bne.n	8014e9a <check_fs+0x9a>
 8014e96:	2300      	movs	r3, #0
 8014e98:	e000      	b.n	8014e9c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8014e9a:	2302      	movs	r3, #2
}
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	00544146 	.word	0x00544146
 8014ea8:	33544146 	.word	0x33544146

08014eac <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014eac:	b580      	push	{r7, lr}
 8014eae:	b096      	sub	sp, #88	; 0x58
 8014eb0:	af00      	add	r7, sp, #0
 8014eb2:	60f8      	str	r0, [r7, #12]
 8014eb4:	60b9      	str	r1, [r7, #8]
 8014eb6:	4613      	mov	r3, r2
 8014eb8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014ec0:	68f8      	ldr	r0, [r7, #12]
 8014ec2:	f7ff ff59 	bl	8014d78 <get_ldnumber>
 8014ec6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	da01      	bge.n	8014ed2 <find_volume+0x26>
 8014ece:	230b      	movs	r3, #11
 8014ed0:	e265      	b.n	801539e <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014ed2:	4ab0      	ldr	r2, [pc, #704]	; (8015194 <find_volume+0x2e8>)
 8014ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014eda:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014edc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d101      	bne.n	8014ee6 <find_volume+0x3a>
 8014ee2:	230c      	movs	r3, #12
 8014ee4:	e25b      	b.n	801539e <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014eea:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014eec:	79fb      	ldrb	r3, [r7, #7]
 8014eee:	f023 0301 	bic.w	r3, r3, #1
 8014ef2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014ef6:	781b      	ldrb	r3, [r3, #0]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d01a      	beq.n	8014f32 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8014efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014efe:	785b      	ldrb	r3, [r3, #1]
 8014f00:	4618      	mov	r0, r3
 8014f02:	f7fe fa1f 	bl	8013344 <disk_status>
 8014f06:	4603      	mov	r3, r0
 8014f08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014f0c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f10:	f003 0301 	and.w	r3, r3, #1
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d10c      	bne.n	8014f32 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014f18:	79fb      	ldrb	r3, [r7, #7]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d007      	beq.n	8014f2e <find_volume+0x82>
 8014f1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f22:	f003 0304 	and.w	r3, r3, #4
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d001      	beq.n	8014f2e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8014f2a:	230a      	movs	r3, #10
 8014f2c:	e237      	b.n	801539e <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8014f2e:	2300      	movs	r3, #0
 8014f30:	e235      	b.n	801539e <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f34:	2200      	movs	r2, #0
 8014f36:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014f3a:	b2da      	uxtb	r2, r3
 8014f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f3e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f42:	785b      	ldrb	r3, [r3, #1]
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7fe fa17 	bl	8013378 <disk_initialize>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8014f50:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f54:	f003 0301 	and.w	r3, r3, #1
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d001      	beq.n	8014f60 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8014f5c:	2303      	movs	r3, #3
 8014f5e:	e21e      	b.n	801539e <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8014f60:	79fb      	ldrb	r3, [r7, #7]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d007      	beq.n	8014f76 <find_volume+0xca>
 8014f66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f6a:	f003 0304 	and.w	r3, r3, #4
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d001      	beq.n	8014f76 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8014f72:	230a      	movs	r3, #10
 8014f74:	e213      	b.n	801539e <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8014f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f78:	7858      	ldrb	r0, [r3, #1]
 8014f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f7c:	330c      	adds	r3, #12
 8014f7e:	461a      	mov	r2, r3
 8014f80:	2102      	movs	r1, #2
 8014f82:	f7fe fa5f 	bl	8013444 <disk_ioctl>
 8014f86:	4603      	mov	r3, r0
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d001      	beq.n	8014f90 <find_volume+0xe4>
 8014f8c:	2301      	movs	r3, #1
 8014f8e:	e206      	b.n	801539e <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8014f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f92:	899b      	ldrh	r3, [r3, #12]
 8014f94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014f98:	d80d      	bhi.n	8014fb6 <find_volume+0x10a>
 8014f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f9c:	899b      	ldrh	r3, [r3, #12]
 8014f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014fa2:	d308      	bcc.n	8014fb6 <find_volume+0x10a>
 8014fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa6:	899b      	ldrh	r3, [r3, #12]
 8014fa8:	461a      	mov	r2, r3
 8014faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fac:	899b      	ldrh	r3, [r3, #12]
 8014fae:	3b01      	subs	r3, #1
 8014fb0:	4013      	ands	r3, r2
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	d001      	beq.n	8014fba <find_volume+0x10e>
 8014fb6:	2301      	movs	r3, #1
 8014fb8:	e1f1      	b.n	801539e <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8014fba:	2300      	movs	r3, #0
 8014fbc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8014fbe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014fc0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014fc2:	f7ff ff1d 	bl	8014e00 <check_fs>
 8014fc6:	4603      	mov	r3, r0
 8014fc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014fcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	d14b      	bne.n	801506c <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014fd4:	2300      	movs	r3, #0
 8014fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8014fd8:	e01f      	b.n	801501a <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fdc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8014fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014fe2:	011b      	lsls	r3, r3, #4
 8014fe4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014fe8:	4413      	add	r3, r2
 8014fea:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fee:	3304      	adds	r3, #4
 8014ff0:	781b      	ldrb	r3, [r3, #0]
 8014ff2:	2b00      	cmp	r3, #0
 8014ff4:	d006      	beq.n	8015004 <find_volume+0x158>
 8014ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ff8:	3308      	adds	r3, #8
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f7fe fa58 	bl	80134b0 <ld_dword>
 8015000:	4602      	mov	r2, r0
 8015002:	e000      	b.n	8015006 <find_volume+0x15a>
 8015004:	2200      	movs	r2, #0
 8015006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015008:	009b      	lsls	r3, r3, #2
 801500a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801500e:	440b      	add	r3, r1
 8015010:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8015014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015016:	3301      	adds	r3, #1
 8015018:	643b      	str	r3, [r7, #64]	; 0x40
 801501a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801501c:	2b03      	cmp	r3, #3
 801501e:	d9dc      	bls.n	8014fda <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8015020:	2300      	movs	r3, #0
 8015022:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8015024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015026:	2b00      	cmp	r3, #0
 8015028:	d002      	beq.n	8015030 <find_volume+0x184>
 801502a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801502c:	3b01      	subs	r3, #1
 801502e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8015030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8015038:	4413      	add	r3, r2
 801503a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801503e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8015040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015042:	2b00      	cmp	r3, #0
 8015044:	d005      	beq.n	8015052 <find_volume+0x1a6>
 8015046:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015048:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801504a:	f7ff fed9 	bl	8014e00 <check_fs>
 801504e:	4603      	mov	r3, r0
 8015050:	e000      	b.n	8015054 <find_volume+0x1a8>
 8015052:	2303      	movs	r3, #3
 8015054:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8015058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801505c:	2b01      	cmp	r3, #1
 801505e:	d905      	bls.n	801506c <find_volume+0x1c0>
 8015060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015062:	3301      	adds	r3, #1
 8015064:	643b      	str	r3, [r7, #64]	; 0x40
 8015066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015068:	2b03      	cmp	r3, #3
 801506a:	d9e1      	bls.n	8015030 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801506c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015070:	2b04      	cmp	r3, #4
 8015072:	d101      	bne.n	8015078 <find_volume+0x1cc>
 8015074:	2301      	movs	r3, #1
 8015076:	e192      	b.n	801539e <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8015078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801507c:	2b01      	cmp	r3, #1
 801507e:	d901      	bls.n	8015084 <find_volume+0x1d8>
 8015080:	230d      	movs	r3, #13
 8015082:	e18c      	b.n	801539e <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8015084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015086:	3338      	adds	r3, #56	; 0x38
 8015088:	330b      	adds	r3, #11
 801508a:	4618      	mov	r0, r3
 801508c:	f7fe f9f8 	bl	8013480 <ld_word>
 8015090:	4603      	mov	r3, r0
 8015092:	461a      	mov	r2, r3
 8015094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015096:	899b      	ldrh	r3, [r3, #12]
 8015098:	429a      	cmp	r2, r3
 801509a:	d001      	beq.n	80150a0 <find_volume+0x1f4>
 801509c:	230d      	movs	r3, #13
 801509e:	e17e      	b.n	801539e <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80150a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150a2:	3338      	adds	r3, #56	; 0x38
 80150a4:	3316      	adds	r3, #22
 80150a6:	4618      	mov	r0, r3
 80150a8:	f7fe f9ea 	bl	8013480 <ld_word>
 80150ac:	4603      	mov	r3, r0
 80150ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80150b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d106      	bne.n	80150c4 <find_volume+0x218>
 80150b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150b8:	3338      	adds	r3, #56	; 0x38
 80150ba:	3324      	adds	r3, #36	; 0x24
 80150bc:	4618      	mov	r0, r3
 80150be:	f7fe f9f7 	bl	80134b0 <ld_dword>
 80150c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80150c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80150c8:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80150ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150cc:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80150d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80150d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150d6:	789b      	ldrb	r3, [r3, #2]
 80150d8:	2b01      	cmp	r3, #1
 80150da:	d005      	beq.n	80150e8 <find_volume+0x23c>
 80150dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150de:	789b      	ldrb	r3, [r3, #2]
 80150e0:	2b02      	cmp	r3, #2
 80150e2:	d001      	beq.n	80150e8 <find_volume+0x23c>
 80150e4:	230d      	movs	r3, #13
 80150e6:	e15a      	b.n	801539e <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80150e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150ea:	789b      	ldrb	r3, [r3, #2]
 80150ec:	461a      	mov	r2, r3
 80150ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80150f0:	fb02 f303 	mul.w	r3, r2, r3
 80150f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80150f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80150fc:	b29a      	uxth	r2, r3
 80150fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015100:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8015102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015104:	895b      	ldrh	r3, [r3, #10]
 8015106:	2b00      	cmp	r3, #0
 8015108:	d008      	beq.n	801511c <find_volume+0x270>
 801510a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801510c:	895b      	ldrh	r3, [r3, #10]
 801510e:	461a      	mov	r2, r3
 8015110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015112:	895b      	ldrh	r3, [r3, #10]
 8015114:	3b01      	subs	r3, #1
 8015116:	4013      	ands	r3, r2
 8015118:	2b00      	cmp	r3, #0
 801511a:	d001      	beq.n	8015120 <find_volume+0x274>
 801511c:	230d      	movs	r3, #13
 801511e:	e13e      	b.n	801539e <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8015120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015122:	3338      	adds	r3, #56	; 0x38
 8015124:	3311      	adds	r3, #17
 8015126:	4618      	mov	r0, r3
 8015128:	f7fe f9aa 	bl	8013480 <ld_word>
 801512c:	4603      	mov	r3, r0
 801512e:	461a      	mov	r2, r3
 8015130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015132:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8015134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015136:	891b      	ldrh	r3, [r3, #8]
 8015138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801513a:	8992      	ldrh	r2, [r2, #12]
 801513c:	0952      	lsrs	r2, r2, #5
 801513e:	b292      	uxth	r2, r2
 8015140:	fbb3 f1f2 	udiv	r1, r3, r2
 8015144:	fb02 f201 	mul.w	r2, r2, r1
 8015148:	1a9b      	subs	r3, r3, r2
 801514a:	b29b      	uxth	r3, r3
 801514c:	2b00      	cmp	r3, #0
 801514e:	d001      	beq.n	8015154 <find_volume+0x2a8>
 8015150:	230d      	movs	r3, #13
 8015152:	e124      	b.n	801539e <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8015154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015156:	3338      	adds	r3, #56	; 0x38
 8015158:	3313      	adds	r3, #19
 801515a:	4618      	mov	r0, r3
 801515c:	f7fe f990 	bl	8013480 <ld_word>
 8015160:	4603      	mov	r3, r0
 8015162:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8015164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015166:	2b00      	cmp	r3, #0
 8015168:	d106      	bne.n	8015178 <find_volume+0x2cc>
 801516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801516c:	3338      	adds	r3, #56	; 0x38
 801516e:	3320      	adds	r3, #32
 8015170:	4618      	mov	r0, r3
 8015172:	f7fe f99d 	bl	80134b0 <ld_dword>
 8015176:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8015178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801517a:	3338      	adds	r3, #56	; 0x38
 801517c:	330e      	adds	r3, #14
 801517e:	4618      	mov	r0, r3
 8015180:	f7fe f97e 	bl	8013480 <ld_word>
 8015184:	4603      	mov	r3, r0
 8015186:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8015188:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801518a:	2b00      	cmp	r3, #0
 801518c:	d104      	bne.n	8015198 <find_volume+0x2ec>
 801518e:	230d      	movs	r3, #13
 8015190:	e105      	b.n	801539e <find_volume+0x4f2>
 8015192:	bf00      	nop
 8015194:	20000204 	.word	0x20000204

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8015198:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801519a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801519c:	4413      	add	r3, r2
 801519e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151a0:	8911      	ldrh	r1, [r2, #8]
 80151a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151a4:	8992      	ldrh	r2, [r2, #12]
 80151a6:	0952      	lsrs	r2, r2, #5
 80151a8:	b292      	uxth	r2, r2
 80151aa:	fbb1 f2f2 	udiv	r2, r1, r2
 80151ae:	b292      	uxth	r2, r2
 80151b0:	4413      	add	r3, r2
 80151b2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80151b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80151b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151b8:	429a      	cmp	r2, r3
 80151ba:	d201      	bcs.n	80151c0 <find_volume+0x314>
 80151bc:	230d      	movs	r3, #13
 80151be:	e0ee      	b.n	801539e <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80151c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80151c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80151c4:	1ad3      	subs	r3, r2, r3
 80151c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80151c8:	8952      	ldrh	r2, [r2, #10]
 80151ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80151ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80151d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d101      	bne.n	80151da <find_volume+0x32e>
 80151d6:	230d      	movs	r3, #13
 80151d8:	e0e1      	b.n	801539e <find_volume+0x4f2>
		fmt = FS_FAT32;
 80151da:	2303      	movs	r3, #3
 80151dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80151e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80151e6:	4293      	cmp	r3, r2
 80151e8:	d802      	bhi.n	80151f0 <find_volume+0x344>
 80151ea:	2302      	movs	r3, #2
 80151ec:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80151f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80151f6:	4293      	cmp	r3, r2
 80151f8:	d802      	bhi.n	8015200 <find_volume+0x354>
 80151fa:	2301      	movs	r3, #1
 80151fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8015200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015202:	1c9a      	adds	r2, r3, #2
 8015204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015206:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8015208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801520a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801520c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801520e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015210:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015212:	441a      	add	r2, r3
 8015214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015216:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8015218:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801521a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801521c:	441a      	add	r2, r3
 801521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015220:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8015222:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015226:	2b03      	cmp	r3, #3
 8015228:	d11e      	bne.n	8015268 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 801522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801522c:	3338      	adds	r3, #56	; 0x38
 801522e:	332a      	adds	r3, #42	; 0x2a
 8015230:	4618      	mov	r0, r3
 8015232:	f7fe f925 	bl	8013480 <ld_word>
 8015236:	4603      	mov	r3, r0
 8015238:	2b00      	cmp	r3, #0
 801523a:	d001      	beq.n	8015240 <find_volume+0x394>
 801523c:	230d      	movs	r3, #13
 801523e:	e0ae      	b.n	801539e <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8015240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015242:	891b      	ldrh	r3, [r3, #8]
 8015244:	2b00      	cmp	r3, #0
 8015246:	d001      	beq.n	801524c <find_volume+0x3a0>
 8015248:	230d      	movs	r3, #13
 801524a:	e0a8      	b.n	801539e <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801524c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801524e:	3338      	adds	r3, #56	; 0x38
 8015250:	332c      	adds	r3, #44	; 0x2c
 8015252:	4618      	mov	r0, r3
 8015254:	f7fe f92c 	bl	80134b0 <ld_dword>
 8015258:	4602      	mov	r2, r0
 801525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801525c:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801525e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015260:	69db      	ldr	r3, [r3, #28]
 8015262:	009b      	lsls	r3, r3, #2
 8015264:	647b      	str	r3, [r7, #68]	; 0x44
 8015266:	e01f      	b.n	80152a8 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8015268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801526a:	891b      	ldrh	r3, [r3, #8]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d101      	bne.n	8015274 <find_volume+0x3c8>
 8015270:	230d      	movs	r3, #13
 8015272:	e094      	b.n	801539e <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8015274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015278:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801527a:	441a      	add	r2, r3
 801527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801527e:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8015280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015284:	2b02      	cmp	r3, #2
 8015286:	d103      	bne.n	8015290 <find_volume+0x3e4>
 8015288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801528a:	69db      	ldr	r3, [r3, #28]
 801528c:	005b      	lsls	r3, r3, #1
 801528e:	e00a      	b.n	80152a6 <find_volume+0x3fa>
 8015290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015292:	69da      	ldr	r2, [r3, #28]
 8015294:	4613      	mov	r3, r2
 8015296:	005b      	lsls	r3, r3, #1
 8015298:	4413      	add	r3, r2
 801529a:	085a      	lsrs	r2, r3, #1
 801529c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801529e:	69db      	ldr	r3, [r3, #28]
 80152a0:	f003 0301 	and.w	r3, r3, #1
 80152a4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80152a6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80152a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152aa:	6a1a      	ldr	r2, [r3, #32]
 80152ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152ae:	899b      	ldrh	r3, [r3, #12]
 80152b0:	4619      	mov	r1, r3
 80152b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152b4:	440b      	add	r3, r1
 80152b6:	3b01      	subs	r3, #1
 80152b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80152ba:	8989      	ldrh	r1, [r1, #12]
 80152bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80152c0:	429a      	cmp	r2, r3
 80152c2:	d201      	bcs.n	80152c8 <find_volume+0x41c>
 80152c4:	230d      	movs	r3, #13
 80152c6:	e06a      	b.n	801539e <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80152c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152ca:	f04f 32ff 	mov.w	r2, #4294967295
 80152ce:	619a      	str	r2, [r3, #24]
 80152d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152d2:	699a      	ldr	r2, [r3, #24]
 80152d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152d6:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80152d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152da:	2280      	movs	r2, #128	; 0x80
 80152dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80152de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80152e2:	2b03      	cmp	r3, #3
 80152e4:	d149      	bne.n	801537a <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80152e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152e8:	3338      	adds	r3, #56	; 0x38
 80152ea:	3330      	adds	r3, #48	; 0x30
 80152ec:	4618      	mov	r0, r3
 80152ee:	f7fe f8c7 	bl	8013480 <ld_word>
 80152f2:	4603      	mov	r3, r0
 80152f4:	2b01      	cmp	r3, #1
 80152f6:	d140      	bne.n	801537a <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80152f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152fa:	3301      	adds	r3, #1
 80152fc:	4619      	mov	r1, r3
 80152fe:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8015300:	f7fe fa02 	bl	8013708 <move_window>
 8015304:	4603      	mov	r3, r0
 8015306:	2b00      	cmp	r3, #0
 8015308:	d137      	bne.n	801537a <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 801530a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801530c:	2200      	movs	r2, #0
 801530e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8015310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015312:	3338      	adds	r3, #56	; 0x38
 8015314:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015318:	4618      	mov	r0, r3
 801531a:	f7fe f8b1 	bl	8013480 <ld_word>
 801531e:	4603      	mov	r3, r0
 8015320:	461a      	mov	r2, r3
 8015322:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8015326:	429a      	cmp	r2, r3
 8015328:	d127      	bne.n	801537a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801532a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801532c:	3338      	adds	r3, #56	; 0x38
 801532e:	4618      	mov	r0, r3
 8015330:	f7fe f8be 	bl	80134b0 <ld_dword>
 8015334:	4603      	mov	r3, r0
 8015336:	4a1c      	ldr	r2, [pc, #112]	; (80153a8 <find_volume+0x4fc>)
 8015338:	4293      	cmp	r3, r2
 801533a:	d11e      	bne.n	801537a <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801533e:	3338      	adds	r3, #56	; 0x38
 8015340:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8015344:	4618      	mov	r0, r3
 8015346:	f7fe f8b3 	bl	80134b0 <ld_dword>
 801534a:	4603      	mov	r3, r0
 801534c:	4a17      	ldr	r2, [pc, #92]	; (80153ac <find_volume+0x500>)
 801534e:	4293      	cmp	r3, r2
 8015350:	d113      	bne.n	801537a <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8015352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015354:	3338      	adds	r3, #56	; 0x38
 8015356:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801535a:	4618      	mov	r0, r3
 801535c:	f7fe f8a8 	bl	80134b0 <ld_dword>
 8015360:	4602      	mov	r2, r0
 8015362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015364:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8015366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015368:	3338      	adds	r3, #56	; 0x38
 801536a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801536e:	4618      	mov	r0, r3
 8015370:	f7fe f89e 	bl	80134b0 <ld_dword>
 8015374:	4602      	mov	r2, r0
 8015376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015378:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801537c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8015380:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8015382:	4b0b      	ldr	r3, [pc, #44]	; (80153b0 <find_volume+0x504>)
 8015384:	881b      	ldrh	r3, [r3, #0]
 8015386:	3301      	adds	r3, #1
 8015388:	b29a      	uxth	r2, r3
 801538a:	4b09      	ldr	r3, [pc, #36]	; (80153b0 <find_volume+0x504>)
 801538c:	801a      	strh	r2, [r3, #0]
 801538e:	4b08      	ldr	r3, [pc, #32]	; (80153b0 <find_volume+0x504>)
 8015390:	881a      	ldrh	r2, [r3, #0]
 8015392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015394:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8015396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015398:	4a06      	ldr	r2, [pc, #24]	; (80153b4 <find_volume+0x508>)
 801539a:	611a      	str	r2, [r3, #16]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 801539c:	2300      	movs	r3, #0
}
 801539e:	4618      	mov	r0, r3
 80153a0:	3758      	adds	r7, #88	; 0x58
 80153a2:	46bd      	mov	sp, r7
 80153a4:	bd80      	pop	{r7, pc}
 80153a6:	bf00      	nop
 80153a8:	41615252 	.word	0x41615252
 80153ac:	61417272 	.word	0x61417272
 80153b0:	20000208 	.word	0x20000208
 80153b4:	2000020c 	.word	0x2000020c

080153b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
 80153c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80153c2:	2309      	movs	r3, #9
 80153c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	2b00      	cmp	r3, #0
 80153ca:	d01c      	beq.n	8015406 <validate+0x4e>
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d018      	beq.n	8015406 <validate+0x4e>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	781b      	ldrb	r3, [r3, #0]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d013      	beq.n	8015406 <validate+0x4e>
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	889a      	ldrh	r2, [r3, #4]
 80153e2:	687b      	ldr	r3, [r7, #4]
 80153e4:	681b      	ldr	r3, [r3, #0]
 80153e6:	88db      	ldrh	r3, [r3, #6]
 80153e8:	429a      	cmp	r2, r3
 80153ea:	d10c      	bne.n	8015406 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	785b      	ldrb	r3, [r3, #1]
 80153f2:	4618      	mov	r0, r3
 80153f4:	f7fd ffa6 	bl	8013344 <disk_status>
 80153f8:	4603      	mov	r3, r0
 80153fa:	f003 0301 	and.w	r3, r3, #1
 80153fe:	2b00      	cmp	r3, #0
 8015400:	d101      	bne.n	8015406 <validate+0x4e>
			res = FR_OK;
 8015402:	2300      	movs	r3, #0
 8015404:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8015406:	7bfb      	ldrb	r3, [r7, #15]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d102      	bne.n	8015412 <validate+0x5a>
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	e000      	b.n	8015414 <validate+0x5c>
 8015412:	2300      	movs	r3, #0
 8015414:	683a      	ldr	r2, [r7, #0]
 8015416:	6013      	str	r3, [r2, #0]
	return res;
 8015418:	7bfb      	ldrb	r3, [r7, #15]
}
 801541a:	4618      	mov	r0, r3
 801541c:	3710      	adds	r7, #16
 801541e:	46bd      	mov	sp, r7
 8015420:	bd80      	pop	{r7, pc}
	...

08015424 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b088      	sub	sp, #32
 8015428:	af00      	add	r7, sp, #0
 801542a:	60f8      	str	r0, [r7, #12]
 801542c:	60b9      	str	r1, [r7, #8]
 801542e:	4613      	mov	r3, r2
 8015430:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8015432:	68bb      	ldr	r3, [r7, #8]
 8015434:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8015436:	f107 0310 	add.w	r3, r7, #16
 801543a:	4618      	mov	r0, r3
 801543c:	f7ff fc9c 	bl	8014d78 <get_ldnumber>
 8015440:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8015442:	69fb      	ldr	r3, [r7, #28]
 8015444:	2b00      	cmp	r3, #0
 8015446:	da01      	bge.n	801544c <f_mount+0x28>
 8015448:	230b      	movs	r3, #11
 801544a:	e028      	b.n	801549e <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801544c:	4a16      	ldr	r2, [pc, #88]	; (80154a8 <f_mount+0x84>)
 801544e:	69fb      	ldr	r3, [r7, #28]
 8015450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015454:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8015456:	69bb      	ldr	r3, [r7, #24]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d002      	beq.n	8015462 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801545c:	69bb      	ldr	r3, [r7, #24]
 801545e:	2200      	movs	r2, #0
 8015460:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d002      	beq.n	801546e <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	2200      	movs	r2, #0
 801546c:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801546e:	68fa      	ldr	r2, [r7, #12]
 8015470:	490d      	ldr	r1, [pc, #52]	; (80154a8 <f_mount+0x84>)
 8015472:	69fb      	ldr	r3, [r7, #28]
 8015474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	2b00      	cmp	r3, #0
 801547c:	d002      	beq.n	8015484 <f_mount+0x60>
 801547e:	79fb      	ldrb	r3, [r7, #7]
 8015480:	2b01      	cmp	r3, #1
 8015482:	d001      	beq.n	8015488 <f_mount+0x64>
 8015484:	2300      	movs	r3, #0
 8015486:	e00a      	b.n	801549e <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8015488:	f107 010c 	add.w	r1, r7, #12
 801548c:	f107 0308 	add.w	r3, r7, #8
 8015490:	2200      	movs	r2, #0
 8015492:	4618      	mov	r0, r3
 8015494:	f7ff fd0a 	bl	8014eac <find_volume>
 8015498:	4603      	mov	r3, r0
 801549a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801549c:	7dfb      	ldrb	r3, [r7, #23]
}
 801549e:	4618      	mov	r0, r3
 80154a0:	3720      	adds	r7, #32
 80154a2:	46bd      	mov	sp, r7
 80154a4:	bd80      	pop	{r7, pc}
 80154a6:	bf00      	nop
 80154a8:	20000204 	.word	0x20000204

080154ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b098      	sub	sp, #96	; 0x60
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	60f8      	str	r0, [r7, #12]
 80154b4:	60b9      	str	r1, [r7, #8]
 80154b6:	4613      	mov	r3, r2
 80154b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d101      	bne.n	80154c4 <f_open+0x18>
 80154c0:	2309      	movs	r3, #9
 80154c2:	e188      	b.n	80157d6 <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80154c4:	79fb      	ldrb	r3, [r7, #7]
 80154c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80154ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80154cc:	79fa      	ldrb	r2, [r7, #7]
 80154ce:	f107 0110 	add.w	r1, r7, #16
 80154d2:	f107 0308 	add.w	r3, r7, #8
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7ff fce8 	bl	8014eac <find_volume>
 80154dc:	4603      	mov	r3, r0
 80154de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80154e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	f040 816c 	bne.w	80157c4 <f_open+0x318>
		dj.obj.fs = fs;
 80154ec:	693b      	ldr	r3, [r7, #16]
 80154ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80154f0:	68ba      	ldr	r2, [r7, #8]
 80154f2:	f107 0314 	add.w	r3, r7, #20
 80154f6:	4611      	mov	r1, r2
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7ff fbc7 	bl	8014c8c <follow_path>
 80154fe:	4603      	mov	r3, r0
 8015500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8015504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015508:	2b00      	cmp	r3, #0
 801550a:	d107      	bne.n	801551c <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801550c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015510:	b25b      	sxtb	r3, r3
 8015512:	2b00      	cmp	r3, #0
 8015514:	da02      	bge.n	801551c <f_open+0x70>
				res = FR_INVALID_NAME;
 8015516:	2306      	movs	r3, #6
 8015518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801551c:	79fb      	ldrb	r3, [r7, #7]
 801551e:	f003 031c 	and.w	r3, r3, #28
 8015522:	2b00      	cmp	r3, #0
 8015524:	d078      	beq.n	8015618 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8015526:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801552a:	2b00      	cmp	r3, #0
 801552c:	d010      	beq.n	8015550 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801552e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015532:	2b04      	cmp	r3, #4
 8015534:	d107      	bne.n	8015546 <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8015536:	f107 0314 	add.w	r3, r7, #20
 801553a:	4618      	mov	r0, r3
 801553c:	f7ff f8f6 	bl	801472c <dir_register>
 8015540:	4603      	mov	r3, r0
 8015542:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8015546:	79fb      	ldrb	r3, [r7, #7]
 8015548:	f043 0308 	orr.w	r3, r3, #8
 801554c:	71fb      	strb	r3, [r7, #7]
 801554e:	e010      	b.n	8015572 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8015550:	7ebb      	ldrb	r3, [r7, #26]
 8015552:	f003 0311 	and.w	r3, r3, #17
 8015556:	2b00      	cmp	r3, #0
 8015558:	d003      	beq.n	8015562 <f_open+0xb6>
					res = FR_DENIED;
 801555a:	2307      	movs	r3, #7
 801555c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015560:	e007      	b.n	8015572 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8015562:	79fb      	ldrb	r3, [r7, #7]
 8015564:	f003 0304 	and.w	r3, r3, #4
 8015568:	2b00      	cmp	r3, #0
 801556a:	d002      	beq.n	8015572 <f_open+0xc6>
 801556c:	2308      	movs	r3, #8
 801556e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8015572:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015576:	2b00      	cmp	r3, #0
 8015578:	d168      	bne.n	801564c <f_open+0x1a0>
 801557a:	79fb      	ldrb	r3, [r7, #7]
 801557c:	f003 0308 	and.w	r3, r3, #8
 8015580:	2b00      	cmp	r3, #0
 8015582:	d063      	beq.n	801564c <f_open+0x1a0>
				dw = GET_FATTIME();
 8015584:	f7fa fd36 	bl	800fff4 <get_fattime>
 8015588:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 801558a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801558c:	330e      	adds	r3, #14
 801558e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015590:	4618      	mov	r0, r3
 8015592:	f7fd ffcb 	bl	801352c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8015596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015598:	3316      	adds	r3, #22
 801559a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801559c:	4618      	mov	r0, r3
 801559e:	f7fd ffc5 	bl	801352c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80155a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155a4:	330b      	adds	r3, #11
 80155a6:	2220      	movs	r2, #32
 80155a8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80155aa:	693b      	ldr	r3, [r7, #16]
 80155ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80155ae:	4611      	mov	r1, r2
 80155b0:	4618      	mov	r0, r3
 80155b2:	f7fe fe31 	bl	8014218 <ld_clust>
 80155b6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80155bc:	2200      	movs	r2, #0
 80155be:	4618      	mov	r0, r3
 80155c0:	f7fe fe49 	bl	8014256 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80155c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155c6:	331c      	adds	r3, #28
 80155c8:	2100      	movs	r1, #0
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7fd ffae 	bl	801352c <st_dword>
					fs->wflag = 1;
 80155d0:	693b      	ldr	r3, [r7, #16]
 80155d2:	2201      	movs	r2, #1
 80155d4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80155d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80155d8:	2b00      	cmp	r3, #0
 80155da:	d037      	beq.n	801564c <f_open+0x1a0>
						dw = fs->winsect;
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80155e0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 80155e2:	f107 0314 	add.w	r3, r7, #20
 80155e6:	2200      	movs	r2, #0
 80155e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80155ea:	4618      	mov	r0, r3
 80155ec:	f7fe fb39 	bl	8013c62 <remove_chain>
 80155f0:	4603      	mov	r3, r0
 80155f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80155f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	d126      	bne.n	801564c <f_open+0x1a0>
							res = move_window(fs, dw);
 80155fe:	693b      	ldr	r3, [r7, #16]
 8015600:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8015602:	4618      	mov	r0, r3
 8015604:	f7fe f880 	bl	8013708 <move_window>
 8015608:	4603      	mov	r3, r0
 801560a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801560e:	693b      	ldr	r3, [r7, #16]
 8015610:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015612:	3a01      	subs	r2, #1
 8015614:	615a      	str	r2, [r3, #20]
 8015616:	e019      	b.n	801564c <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8015618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801561c:	2b00      	cmp	r3, #0
 801561e:	d115      	bne.n	801564c <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8015620:	7ebb      	ldrb	r3, [r7, #26]
 8015622:	f003 0310 	and.w	r3, r3, #16
 8015626:	2b00      	cmp	r3, #0
 8015628:	d003      	beq.n	8015632 <f_open+0x186>
					res = FR_NO_FILE;
 801562a:	2304      	movs	r3, #4
 801562c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8015630:	e00c      	b.n	801564c <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8015632:	79fb      	ldrb	r3, [r7, #7]
 8015634:	f003 0302 	and.w	r3, r3, #2
 8015638:	2b00      	cmp	r3, #0
 801563a:	d007      	beq.n	801564c <f_open+0x1a0>
 801563c:	7ebb      	ldrb	r3, [r7, #26]
 801563e:	f003 0301 	and.w	r3, r3, #1
 8015642:	2b00      	cmp	r3, #0
 8015644:	d002      	beq.n	801564c <f_open+0x1a0>
						res = FR_DENIED;
 8015646:	2307      	movs	r3, #7
 8015648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 801564c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015650:	2b00      	cmp	r3, #0
 8015652:	d10f      	bne.n	8015674 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8015654:	79fb      	ldrb	r3, [r7, #7]
 8015656:	f003 0308 	and.w	r3, r3, #8
 801565a:	2b00      	cmp	r3, #0
 801565c:	d003      	beq.n	8015666 <f_open+0x1ba>
				mode |= FA_MODIFIED;
 801565e:	79fb      	ldrb	r3, [r7, #7]
 8015660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015664:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8015666:	693b      	ldr	r3, [r7, #16]
 8015668:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801566a:	68fb      	ldr	r3, [r7, #12]
 801566c:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 801566e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015670:	68fb      	ldr	r3, [r7, #12]
 8015672:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8015674:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015678:	2b00      	cmp	r3, #0
 801567a:	f040 80a3 	bne.w	80157c4 <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801567e:	693b      	ldr	r3, [r7, #16]
 8015680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015682:	4611      	mov	r1, r2
 8015684:	4618      	mov	r0, r3
 8015686:	f7fe fdc7 	bl	8014218 <ld_clust>
 801568a:	4602      	mov	r2, r0
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8015690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015692:	331c      	adds	r3, #28
 8015694:	4618      	mov	r0, r3
 8015696:	f7fd ff0b 	bl	80134b0 <ld_dword>
 801569a:	4602      	mov	r2, r0
 801569c:	68fb      	ldr	r3, [r7, #12]
 801569e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	2200      	movs	r2, #0
 80156a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80156a6:	693a      	ldr	r2, [r7, #16]
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80156ac:	693b      	ldr	r3, [r7, #16]
 80156ae:	88da      	ldrh	r2, [r3, #6]
 80156b0:	68fb      	ldr	r3, [r7, #12]
 80156b2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80156b4:	68fb      	ldr	r3, [r7, #12]
 80156b6:	79fa      	ldrb	r2, [r7, #7]
 80156b8:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	2200      	movs	r2, #0
 80156be:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	2200      	movs	r2, #0
 80156c4:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	2200      	movs	r2, #0
 80156ca:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	332c      	adds	r3, #44	; 0x2c
 80156d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80156d4:	2100      	movs	r1, #0
 80156d6:	4618      	mov	r0, r3
 80156d8:	f7fd ff75 	bl	80135c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80156dc:	79fb      	ldrb	r3, [r7, #7]
 80156de:	f003 0320 	and.w	r3, r3, #32
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d06e      	beq.n	80157c4 <f_open+0x318>
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d06a      	beq.n	80157c4 <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	68da      	ldr	r2, [r3, #12]
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80156f6:	693b      	ldr	r3, [r7, #16]
 80156f8:	895b      	ldrh	r3, [r3, #10]
 80156fa:	461a      	mov	r2, r3
 80156fc:	693b      	ldr	r3, [r7, #16]
 80156fe:	899b      	ldrh	r3, [r3, #12]
 8015700:	fb03 f302 	mul.w	r3, r3, r2
 8015704:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	689b      	ldr	r3, [r3, #8]
 801570a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801570c:	68fb      	ldr	r3, [r7, #12]
 801570e:	68db      	ldr	r3, [r3, #12]
 8015710:	657b      	str	r3, [r7, #84]	; 0x54
 8015712:	e016      	b.n	8015742 <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015718:	4618      	mov	r0, r3
 801571a:	f7fe f8b2 	bl	8013882 <get_fat>
 801571e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8015720:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015722:	2b01      	cmp	r3, #1
 8015724:	d802      	bhi.n	801572c <f_open+0x280>
 8015726:	2302      	movs	r3, #2
 8015728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801572c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801572e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015732:	d102      	bne.n	801573a <f_open+0x28e>
 8015734:	2301      	movs	r3, #1
 8015736:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801573a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801573c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801573e:	1ad3      	subs	r3, r2, r3
 8015740:	657b      	str	r3, [r7, #84]	; 0x54
 8015742:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8015746:	2b00      	cmp	r3, #0
 8015748:	d103      	bne.n	8015752 <f_open+0x2a6>
 801574a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801574c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801574e:	429a      	cmp	r2, r3
 8015750:	d8e0      	bhi.n	8015714 <f_open+0x268>
				}
				fp->clust = clst;
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015756:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8015758:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801575c:	2b00      	cmp	r3, #0
 801575e:	d131      	bne.n	80157c4 <f_open+0x318>
 8015760:	693b      	ldr	r3, [r7, #16]
 8015762:	899b      	ldrh	r3, [r3, #12]
 8015764:	461a      	mov	r2, r3
 8015766:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015768:	fbb3 f1f2 	udiv	r1, r3, r2
 801576c:	fb02 f201 	mul.w	r2, r2, r1
 8015770:	1a9b      	subs	r3, r3, r2
 8015772:	2b00      	cmp	r3, #0
 8015774:	d026      	beq.n	80157c4 <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8015776:	693b      	ldr	r3, [r7, #16]
 8015778:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801577a:	4618      	mov	r0, r3
 801577c:	f7fe f862 	bl	8013844 <clust2sect>
 8015780:	6478      	str	r0, [r7, #68]	; 0x44
 8015782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015784:	2b00      	cmp	r3, #0
 8015786:	d103      	bne.n	8015790 <f_open+0x2e4>
						res = FR_INT_ERR;
 8015788:	2302      	movs	r3, #2
 801578a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801578e:	e019      	b.n	80157c4 <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8015790:	693b      	ldr	r3, [r7, #16]
 8015792:	899b      	ldrh	r3, [r3, #12]
 8015794:	461a      	mov	r2, r3
 8015796:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015798:	fbb3 f2f2 	udiv	r2, r3, r2
 801579c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801579e:	441a      	add	r2, r3
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80157a4:	693b      	ldr	r3, [r7, #16]
 80157a6:	7858      	ldrb	r0, [r3, #1]
 80157a8:	68fb      	ldr	r3, [r7, #12]
 80157aa:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	69da      	ldr	r2, [r3, #28]
 80157b2:	2301      	movs	r3, #1
 80157b4:	f7fd fe06 	bl	80133c4 <disk_read>
 80157b8:	4603      	mov	r3, r0
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d002      	beq.n	80157c4 <f_open+0x318>
 80157be:	2301      	movs	r3, #1
 80157c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80157c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d002      	beq.n	80157d2 <f_open+0x326>
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	2200      	movs	r2, #0
 80157d0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80157d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80157d6:	4618      	mov	r0, r3
 80157d8:	3760      	adds	r7, #96	; 0x60
 80157da:	46bd      	mov	sp, r7
 80157dc:	bd80      	pop	{r7, pc}

080157de <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80157de:	b580      	push	{r7, lr}
 80157e0:	b08c      	sub	sp, #48	; 0x30
 80157e2:	af00      	add	r7, sp, #0
 80157e4:	60f8      	str	r0, [r7, #12]
 80157e6:	60b9      	str	r1, [r7, #8]
 80157e8:	607a      	str	r2, [r7, #4]
 80157ea:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80157ec:	68bb      	ldr	r3, [r7, #8]
 80157ee:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	2200      	movs	r2, #0
 80157f4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	f107 0210 	add.w	r2, r7, #16
 80157fc:	4611      	mov	r1, r2
 80157fe:	4618      	mov	r0, r3
 8015800:	f7ff fdda 	bl	80153b8 <validate>
 8015804:	4603      	mov	r3, r0
 8015806:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801580a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801580e:	2b00      	cmp	r3, #0
 8015810:	d107      	bne.n	8015822 <f_write+0x44>
 8015812:	68fb      	ldr	r3, [r7, #12]
 8015814:	7c5b      	ldrb	r3, [r3, #17]
 8015816:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801581a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801581e:	2b00      	cmp	r3, #0
 8015820:	d002      	beq.n	8015828 <f_write+0x4a>
 8015822:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015826:	e16a      	b.n	8015afe <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	7c1b      	ldrb	r3, [r3, #16]
 801582c:	f003 0302 	and.w	r3, r3, #2
 8015830:	2b00      	cmp	r3, #0
 8015832:	d101      	bne.n	8015838 <f_write+0x5a>
 8015834:	2307      	movs	r3, #7
 8015836:	e162      	b.n	8015afe <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8015838:	68fb      	ldr	r3, [r7, #12]
 801583a:	695a      	ldr	r2, [r3, #20]
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	441a      	add	r2, r3
 8015840:	68fb      	ldr	r3, [r7, #12]
 8015842:	695b      	ldr	r3, [r3, #20]
 8015844:	429a      	cmp	r2, r3
 8015846:	f080 814c 	bcs.w	8015ae2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	695b      	ldr	r3, [r3, #20]
 801584e:	43db      	mvns	r3, r3
 8015850:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8015852:	e146      	b.n	8015ae2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	695b      	ldr	r3, [r3, #20]
 8015858:	693a      	ldr	r2, [r7, #16]
 801585a:	8992      	ldrh	r2, [r2, #12]
 801585c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015860:	fb02 f201 	mul.w	r2, r2, r1
 8015864:	1a9b      	subs	r3, r3, r2
 8015866:	2b00      	cmp	r3, #0
 8015868:	f040 80f1 	bne.w	8015a4e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	695b      	ldr	r3, [r3, #20]
 8015870:	693a      	ldr	r2, [r7, #16]
 8015872:	8992      	ldrh	r2, [r2, #12]
 8015874:	fbb3 f3f2 	udiv	r3, r3, r2
 8015878:	693a      	ldr	r2, [r7, #16]
 801587a:	8952      	ldrh	r2, [r2, #10]
 801587c:	3a01      	subs	r2, #1
 801587e:	4013      	ands	r3, r2
 8015880:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8015882:	69bb      	ldr	r3, [r7, #24]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d143      	bne.n	8015910 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	695b      	ldr	r3, [r3, #20]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d10c      	bne.n	80158aa <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	689b      	ldr	r3, [r3, #8]
 8015894:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8015896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015898:	2b00      	cmp	r3, #0
 801589a:	d11a      	bne.n	80158d2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	2100      	movs	r1, #0
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7fe fa43 	bl	8013d2c <create_chain>
 80158a6:	62b8      	str	r0, [r7, #40]	; 0x28
 80158a8:	e013      	b.n	80158d2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80158aa:	68fb      	ldr	r3, [r7, #12]
 80158ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d007      	beq.n	80158c2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	695b      	ldr	r3, [r3, #20]
 80158b6:	4619      	mov	r1, r3
 80158b8:	68f8      	ldr	r0, [r7, #12]
 80158ba:	f7fe facf 	bl	8013e5c <clmt_clust>
 80158be:	62b8      	str	r0, [r7, #40]	; 0x28
 80158c0:	e007      	b.n	80158d2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80158c2:	68fa      	ldr	r2, [r7, #12]
 80158c4:	68fb      	ldr	r3, [r7, #12]
 80158c6:	699b      	ldr	r3, [r3, #24]
 80158c8:	4619      	mov	r1, r3
 80158ca:	4610      	mov	r0, r2
 80158cc:	f7fe fa2e 	bl	8013d2c <create_chain>
 80158d0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80158d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d4:	2b00      	cmp	r3, #0
 80158d6:	f000 8109 	beq.w	8015aec <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80158da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158dc:	2b01      	cmp	r3, #1
 80158de:	d104      	bne.n	80158ea <f_write+0x10c>
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	2202      	movs	r2, #2
 80158e4:	745a      	strb	r2, [r3, #17]
 80158e6:	2302      	movs	r3, #2
 80158e8:	e109      	b.n	8015afe <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80158ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158f0:	d104      	bne.n	80158fc <f_write+0x11e>
 80158f2:	68fb      	ldr	r3, [r7, #12]
 80158f4:	2201      	movs	r2, #1
 80158f6:	745a      	strb	r2, [r3, #17]
 80158f8:	2301      	movs	r3, #1
 80158fa:	e100      	b.n	8015afe <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015900:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	689b      	ldr	r3, [r3, #8]
 8015906:	2b00      	cmp	r3, #0
 8015908:	d102      	bne.n	8015910 <f_write+0x132>
 801590a:	68fb      	ldr	r3, [r7, #12]
 801590c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801590e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	7c1b      	ldrb	r3, [r3, #16]
 8015914:	b25b      	sxtb	r3, r3
 8015916:	2b00      	cmp	r3, #0
 8015918:	da18      	bge.n	801594c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801591a:	693b      	ldr	r3, [r7, #16]
 801591c:	7858      	ldrb	r0, [r3, #1]
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	69da      	ldr	r2, [r3, #28]
 8015928:	2301      	movs	r3, #1
 801592a:	f7fd fd6b 	bl	8013404 <disk_write>
 801592e:	4603      	mov	r3, r0
 8015930:	2b00      	cmp	r3, #0
 8015932:	d004      	beq.n	801593e <f_write+0x160>
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	2201      	movs	r2, #1
 8015938:	745a      	strb	r2, [r3, #17]
 801593a:	2301      	movs	r3, #1
 801593c:	e0df      	b.n	8015afe <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	7c1b      	ldrb	r3, [r3, #16]
 8015942:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015946:	b2da      	uxtb	r2, r3
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801594c:	693a      	ldr	r2, [r7, #16]
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	699b      	ldr	r3, [r3, #24]
 8015952:	4619      	mov	r1, r3
 8015954:	4610      	mov	r0, r2
 8015956:	f7fd ff75 	bl	8013844 <clust2sect>
 801595a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801595c:	697b      	ldr	r3, [r7, #20]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d104      	bne.n	801596c <f_write+0x18e>
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	2202      	movs	r2, #2
 8015966:	745a      	strb	r2, [r3, #17]
 8015968:	2302      	movs	r3, #2
 801596a:	e0c8      	b.n	8015afe <f_write+0x320>
			sect += csect;
 801596c:	697a      	ldr	r2, [r7, #20]
 801596e:	69bb      	ldr	r3, [r7, #24]
 8015970:	4413      	add	r3, r2
 8015972:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015974:	693b      	ldr	r3, [r7, #16]
 8015976:	899b      	ldrh	r3, [r3, #12]
 8015978:	461a      	mov	r2, r3
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015980:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015982:	6a3b      	ldr	r3, [r7, #32]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d043      	beq.n	8015a10 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015988:	69ba      	ldr	r2, [r7, #24]
 801598a:	6a3b      	ldr	r3, [r7, #32]
 801598c:	4413      	add	r3, r2
 801598e:	693a      	ldr	r2, [r7, #16]
 8015990:	8952      	ldrh	r2, [r2, #10]
 8015992:	4293      	cmp	r3, r2
 8015994:	d905      	bls.n	80159a2 <f_write+0x1c4>
					cc = fs->csize - csect;
 8015996:	693b      	ldr	r3, [r7, #16]
 8015998:	895b      	ldrh	r3, [r3, #10]
 801599a:	461a      	mov	r2, r3
 801599c:	69bb      	ldr	r3, [r7, #24]
 801599e:	1ad3      	subs	r3, r2, r3
 80159a0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80159a2:	693b      	ldr	r3, [r7, #16]
 80159a4:	7858      	ldrb	r0, [r3, #1]
 80159a6:	6a3b      	ldr	r3, [r7, #32]
 80159a8:	697a      	ldr	r2, [r7, #20]
 80159aa:	69f9      	ldr	r1, [r7, #28]
 80159ac:	f7fd fd2a 	bl	8013404 <disk_write>
 80159b0:	4603      	mov	r3, r0
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d004      	beq.n	80159c0 <f_write+0x1e2>
 80159b6:	68fb      	ldr	r3, [r7, #12]
 80159b8:	2201      	movs	r2, #1
 80159ba:	745a      	strb	r2, [r3, #17]
 80159bc:	2301      	movs	r3, #1
 80159be:	e09e      	b.n	8015afe <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80159c0:	68fb      	ldr	r3, [r7, #12]
 80159c2:	69da      	ldr	r2, [r3, #28]
 80159c4:	697b      	ldr	r3, [r7, #20]
 80159c6:	1ad3      	subs	r3, r2, r3
 80159c8:	6a3a      	ldr	r2, [r7, #32]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d918      	bls.n	8015a00 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80159ce:	68fb      	ldr	r3, [r7, #12]
 80159d0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 80159d4:	68fb      	ldr	r3, [r7, #12]
 80159d6:	69da      	ldr	r2, [r3, #28]
 80159d8:	697b      	ldr	r3, [r7, #20]
 80159da:	1ad3      	subs	r3, r2, r3
 80159dc:	693a      	ldr	r2, [r7, #16]
 80159de:	8992      	ldrh	r2, [r2, #12]
 80159e0:	fb02 f303 	mul.w	r3, r2, r3
 80159e4:	69fa      	ldr	r2, [r7, #28]
 80159e6:	18d1      	adds	r1, r2, r3
 80159e8:	693b      	ldr	r3, [r7, #16]
 80159ea:	899b      	ldrh	r3, [r3, #12]
 80159ec:	461a      	mov	r2, r3
 80159ee:	f7fd fdc9 	bl	8013584 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80159f2:	68fb      	ldr	r3, [r7, #12]
 80159f4:	7c1b      	ldrb	r3, [r3, #16]
 80159f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80159fa:	b2da      	uxtb	r2, r3
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8015a00:	693b      	ldr	r3, [r7, #16]
 8015a02:	899b      	ldrh	r3, [r3, #12]
 8015a04:	461a      	mov	r2, r3
 8015a06:	6a3b      	ldr	r3, [r7, #32]
 8015a08:	fb02 f303 	mul.w	r3, r2, r3
 8015a0c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8015a0e:	e04b      	b.n	8015aa8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	69db      	ldr	r3, [r3, #28]
 8015a14:	697a      	ldr	r2, [r7, #20]
 8015a16:	429a      	cmp	r2, r3
 8015a18:	d016      	beq.n	8015a48 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	695a      	ldr	r2, [r3, #20]
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8015a22:	429a      	cmp	r2, r3
 8015a24:	d210      	bcs.n	8015a48 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015a26:	693b      	ldr	r3, [r7, #16]
 8015a28:	7858      	ldrb	r0, [r3, #1]
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015a30:	2301      	movs	r3, #1
 8015a32:	697a      	ldr	r2, [r7, #20]
 8015a34:	f7fd fcc6 	bl	80133c4 <disk_read>
 8015a38:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d004      	beq.n	8015a48 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	2201      	movs	r2, #1
 8015a42:	745a      	strb	r2, [r3, #17]
 8015a44:	2301      	movs	r3, #1
 8015a46:	e05a      	b.n	8015afe <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	697a      	ldr	r2, [r7, #20]
 8015a4c:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	899b      	ldrh	r3, [r3, #12]
 8015a52:	4618      	mov	r0, r3
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	695b      	ldr	r3, [r3, #20]
 8015a58:	693a      	ldr	r2, [r7, #16]
 8015a5a:	8992      	ldrh	r2, [r2, #12]
 8015a5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a60:	fb02 f201 	mul.w	r2, r2, r1
 8015a64:	1a9b      	subs	r3, r3, r2
 8015a66:	1ac3      	subs	r3, r0, r3
 8015a68:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d901      	bls.n	8015a76 <f_write+0x298>
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8015a76:	68fb      	ldr	r3, [r7, #12]
 8015a78:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	695b      	ldr	r3, [r3, #20]
 8015a80:	693a      	ldr	r2, [r7, #16]
 8015a82:	8992      	ldrh	r2, [r2, #12]
 8015a84:	fbb3 f0f2 	udiv	r0, r3, r2
 8015a88:	fb02 f200 	mul.w	r2, r2, r0
 8015a8c:	1a9b      	subs	r3, r3, r2
 8015a8e:	440b      	add	r3, r1
 8015a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015a92:	69f9      	ldr	r1, [r7, #28]
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7fd fd75 	bl	8013584 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	7c1b      	ldrb	r3, [r3, #16]
 8015a9e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015aa2:	b2da      	uxtb	r2, r3
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015aa8:	69fa      	ldr	r2, [r7, #28]
 8015aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015aac:	4413      	add	r3, r2
 8015aae:	61fb      	str	r3, [r7, #28]
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	695a      	ldr	r2, [r3, #20]
 8015ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ab6:	441a      	add	r2, r3
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	615a      	str	r2, [r3, #20]
 8015abc:	68fb      	ldr	r3, [r7, #12]
 8015abe:	68da      	ldr	r2, [r3, #12]
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	695b      	ldr	r3, [r3, #20]
 8015ac4:	429a      	cmp	r2, r3
 8015ac6:	bf38      	it	cc
 8015ac8:	461a      	movcc	r2, r3
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	60da      	str	r2, [r3, #12]
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	681a      	ldr	r2, [r3, #0]
 8015ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ad4:	441a      	add	r2, r3
 8015ad6:	683b      	ldr	r3, [r7, #0]
 8015ad8:	601a      	str	r2, [r3, #0]
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ade:	1ad3      	subs	r3, r2, r3
 8015ae0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	f47f aeb5 	bne.w	8015854 <f_write+0x76>
 8015aea:	e000      	b.n	8015aee <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8015aec:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8015aee:	68fb      	ldr	r3, [r7, #12]
 8015af0:	7c1b      	ldrb	r3, [r3, #16]
 8015af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015af6:	b2da      	uxtb	r2, r3
 8015af8:	68fb      	ldr	r3, [r7, #12]
 8015afa:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 8015afc:	2300      	movs	r3, #0
}
 8015afe:	4618      	mov	r0, r3
 8015b00:	3730      	adds	r7, #48	; 0x30
 8015b02:	46bd      	mov	sp, r7
 8015b04:	bd80      	pop	{r7, pc}

08015b06 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8015b06:	b580      	push	{r7, lr}
 8015b08:	b086      	sub	sp, #24
 8015b0a:	af00      	add	r7, sp, #0
 8015b0c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f107 0208 	add.w	r2, r7, #8
 8015b14:	4611      	mov	r1, r2
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7ff fc4e 	bl	80153b8 <validate>
 8015b1c:	4603      	mov	r3, r0
 8015b1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015b20:	7dfb      	ldrb	r3, [r7, #23]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	d168      	bne.n	8015bf8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	7c1b      	ldrb	r3, [r3, #16]
 8015b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d062      	beq.n	8015bf8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	7c1b      	ldrb	r3, [r3, #16]
 8015b36:	b25b      	sxtb	r3, r3
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	da15      	bge.n	8015b68 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015b3c:	68bb      	ldr	r3, [r7, #8]
 8015b3e:	7858      	ldrb	r0, [r3, #1]
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	69da      	ldr	r2, [r3, #28]
 8015b4a:	2301      	movs	r3, #1
 8015b4c:	f7fd fc5a 	bl	8013404 <disk_write>
 8015b50:	4603      	mov	r3, r0
 8015b52:	2b00      	cmp	r3, #0
 8015b54:	d001      	beq.n	8015b5a <f_sync+0x54>
 8015b56:	2301      	movs	r3, #1
 8015b58:	e04f      	b.n	8015bfa <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	7c1b      	ldrb	r3, [r3, #16]
 8015b5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b62:	b2da      	uxtb	r2, r3
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015b68:	f7fa fa44 	bl	800fff4 <get_fattime>
 8015b6c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015b6e:	68ba      	ldr	r2, [r7, #8]
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	6a1b      	ldr	r3, [r3, #32]
 8015b74:	4619      	mov	r1, r3
 8015b76:	4610      	mov	r0, r2
 8015b78:	f7fd fdc6 	bl	8013708 <move_window>
 8015b7c:	4603      	mov	r3, r0
 8015b7e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015b80:	7dfb      	ldrb	r3, [r7, #23]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d138      	bne.n	8015bf8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b8a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8015b8c:	68fb      	ldr	r3, [r7, #12]
 8015b8e:	330b      	adds	r3, #11
 8015b90:	781a      	ldrb	r2, [r3, #0]
 8015b92:	68fb      	ldr	r3, [r7, #12]
 8015b94:	330b      	adds	r3, #11
 8015b96:	f042 0220 	orr.w	r2, r2, #32
 8015b9a:	b2d2      	uxtb	r2, r2
 8015b9c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	6818      	ldr	r0, [r3, #0]
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	689b      	ldr	r3, [r3, #8]
 8015ba6:	461a      	mov	r2, r3
 8015ba8:	68f9      	ldr	r1, [r7, #12]
 8015baa:	f7fe fb54 	bl	8014256 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	f103 021c 	add.w	r2, r3, #28
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	68db      	ldr	r3, [r3, #12]
 8015bb8:	4619      	mov	r1, r3
 8015bba:	4610      	mov	r0, r2
 8015bbc:	f7fd fcb6 	bl	801352c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	3316      	adds	r3, #22
 8015bc4:	6939      	ldr	r1, [r7, #16]
 8015bc6:	4618      	mov	r0, r3
 8015bc8:	f7fd fcb0 	bl	801352c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8015bcc:	68fb      	ldr	r3, [r7, #12]
 8015bce:	3312      	adds	r3, #18
 8015bd0:	2100      	movs	r1, #0
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f7fd fc8f 	bl	80134f6 <st_word>
					fs->wflag = 1;
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	2201      	movs	r2, #1
 8015bdc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8015bde:	68bb      	ldr	r3, [r7, #8]
 8015be0:	4618      	mov	r0, r3
 8015be2:	f7fd fdbf 	bl	8013764 <sync_fs>
 8015be6:	4603      	mov	r3, r0
 8015be8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	7c1b      	ldrb	r3, [r3, #16]
 8015bee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015bf2:	b2da      	uxtb	r2, r3
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8015bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3718      	adds	r7, #24
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}

08015c02 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8015c02:	b580      	push	{r7, lr}
 8015c04:	b084      	sub	sp, #16
 8015c06:	af00      	add	r7, sp, #0
 8015c08:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f7ff ff7b 	bl	8015b06 <f_sync>
 8015c10:	4603      	mov	r3, r0
 8015c12:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8015c14:	7bfb      	ldrb	r3, [r7, #15]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d10e      	bne.n	8015c38 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	f107 0208 	add.w	r2, r7, #8
 8015c20:	4611      	mov	r1, r2
 8015c22:	4618      	mov	r0, r3
 8015c24:	f7ff fbc8 	bl	80153b8 <validate>
 8015c28:	4603      	mov	r3, r0
 8015c2a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8015c2c:	7bfb      	ldrb	r3, [r7, #15]
 8015c2e:	2b00      	cmp	r3, #0
 8015c30:	d102      	bne.n	8015c38 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	2200      	movs	r2, #0
 8015c36:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8015c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c3a:	4618      	mov	r0, r3
 8015c3c:	3710      	adds	r7, #16
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd80      	pop	{r7, pc}

08015c42 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015c42:	b580      	push	{r7, lr}
 8015c44:	b086      	sub	sp, #24
 8015c46:	af00      	add	r7, sp, #0
 8015c48:	6078      	str	r0, [r7, #4]
 8015c4a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d101      	bne.n	8015c56 <f_opendir+0x14>
 8015c52:	2309      	movs	r3, #9
 8015c54:	e04c      	b.n	8015cf0 <f_opendir+0xae>

	/* Get logical drive */
	obj = &dp->obj;
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8015c5a:	f107 010c 	add.w	r1, r7, #12
 8015c5e:	463b      	mov	r3, r7
 8015c60:	2200      	movs	r2, #0
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7ff f922 	bl	8014eac <find_volume>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015c6c:	7dfb      	ldrb	r3, [r7, #23]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d137      	bne.n	8015ce2 <f_opendir+0xa0>
		obj->fs = fs;
 8015c72:	68fa      	ldr	r2, [r7, #12]
 8015c74:	693b      	ldr	r3, [r7, #16]
 8015c76:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	4619      	mov	r1, r3
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	f7ff f805 	bl	8014c8c <follow_path>
 8015c82:	4603      	mov	r3, r0
 8015c84:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8015c86:	7dfb      	ldrb	r3, [r7, #23]
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d125      	bne.n	8015cd8 <f_opendir+0x96>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8015c92:	b25b      	sxtb	r3, r3
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	db12      	blt.n	8015cbe <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	799b      	ldrb	r3, [r3, #6]
 8015c9c:	f003 0310 	and.w	r3, r3, #16
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d00a      	beq.n	8015cba <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015ca4:	68fa      	ldr	r2, [r7, #12]
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	69db      	ldr	r3, [r3, #28]
 8015caa:	4619      	mov	r1, r3
 8015cac:	4610      	mov	r0, r2
 8015cae:	f7fe fab3 	bl	8014218 <ld_clust>
 8015cb2:	4602      	mov	r2, r0
 8015cb4:	693b      	ldr	r3, [r7, #16]
 8015cb6:	609a      	str	r2, [r3, #8]
 8015cb8:	e001      	b.n	8015cbe <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8015cba:	2305      	movs	r3, #5
 8015cbc:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015cbe:	7dfb      	ldrb	r3, [r7, #23]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d109      	bne.n	8015cd8 <f_opendir+0x96>
				obj->id = fs->id;
 8015cc4:	68fb      	ldr	r3, [r7, #12]
 8015cc6:	88da      	ldrh	r2, [r3, #6]
 8015cc8:	693b      	ldr	r3, [r7, #16]
 8015cca:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015ccc:	2100      	movs	r1, #0
 8015cce:	6878      	ldr	r0, [r7, #4]
 8015cd0:	f7fe f8fc 	bl	8013ecc <dir_sdi>
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	75fb      	strb	r3, [r7, #23]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015cd8:	7dfb      	ldrb	r3, [r7, #23]
 8015cda:	2b04      	cmp	r3, #4
 8015cdc:	d101      	bne.n	8015ce2 <f_opendir+0xa0>
 8015cde:	2305      	movs	r3, #5
 8015ce0:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015ce2:	7dfb      	ldrb	r3, [r7, #23]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d002      	beq.n	8015cee <f_opendir+0xac>
 8015ce8:	693b      	ldr	r3, [r7, #16]
 8015cea:	2200      	movs	r2, #0
 8015cec:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015cee:	7dfb      	ldrb	r3, [r7, #23]
}
 8015cf0:	4618      	mov	r0, r3
 8015cf2:	3718      	adds	r7, #24
 8015cf4:	46bd      	mov	sp, r7
 8015cf6:	bd80      	pop	{r7, pc}

08015cf8 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b084      	sub	sp, #16
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f107 0208 	add.w	r2, r7, #8
 8015d06:	4611      	mov	r1, r2
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ff fb55 	bl	80153b8 <validate>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015d12:	7bfb      	ldrb	r3, [r7, #15]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d102      	bne.n	8015d1e <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	2200      	movs	r2, #0
 8015d1c:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8015d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d20:	4618      	mov	r0, r3
 8015d22:	3710      	adds	r7, #16
 8015d24:	46bd      	mov	sp, r7
 8015d26:	bd80      	pop	{r7, pc}

08015d28 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b096      	sub	sp, #88	; 0x58
 8015d2c:	af00      	add	r7, sp, #0
 8015d2e:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8015d30:	f107 0108 	add.w	r1, r7, #8
 8015d34:	1d3b      	adds	r3, r7, #4
 8015d36:	2202      	movs	r2, #2
 8015d38:	4618      	mov	r0, r3
 8015d3a:	f7ff f8b7 	bl	8014eac <find_volume>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8015d44:	68bb      	ldr	r3, [r7, #8]
 8015d46:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8015d48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	f040 80f2 	bne.w	8015f36 <f_mkdir+0x20e>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8015d52:	687a      	ldr	r2, [r7, #4]
 8015d54:	f107 030c 	add.w	r3, r7, #12
 8015d58:	4611      	mov	r1, r2
 8015d5a:	4618      	mov	r0, r3
 8015d5c:	f7fe ff96 	bl	8014c8c <follow_path>
 8015d60:	4603      	mov	r3, r0
 8015d62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8015d66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d102      	bne.n	8015d74 <f_mkdir+0x4c>
 8015d6e:	2308      	movs	r3, #8
 8015d70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8015d74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015d78:	2b04      	cmp	r3, #4
 8015d7a:	f040 80dc 	bne.w	8015f36 <f_mkdir+0x20e>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8015d7e:	f107 030c 	add.w	r3, r7, #12
 8015d82:	2100      	movs	r1, #0
 8015d84:	4618      	mov	r0, r3
 8015d86:	f7fd ffd1 	bl	8013d2c <create_chain>
 8015d8a:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8015d8c:	68bb      	ldr	r3, [r7, #8]
 8015d8e:	895b      	ldrh	r3, [r3, #10]
 8015d90:	461a      	mov	r2, r3
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	899b      	ldrh	r3, [r3, #12]
 8015d96:	fb03 f302 	mul.w	r3, r3, r2
 8015d9a:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8015da2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d102      	bne.n	8015dae <f_mkdir+0x86>
 8015da8:	2307      	movs	r3, #7
 8015daa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8015dae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015db0:	2b01      	cmp	r3, #1
 8015db2:	d102      	bne.n	8015dba <f_mkdir+0x92>
 8015db4:	2302      	movs	r3, #2
 8015db6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8015dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dc0:	d102      	bne.n	8015dc8 <f_mkdir+0xa0>
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8015dc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d106      	bne.n	8015dde <f_mkdir+0xb6>
 8015dd0:	68bb      	ldr	r3, [r7, #8]
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7fd fc54 	bl	8013680 <sync_window>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8015dde:	f7fa f909 	bl	800fff4 <get_fattime>
 8015de2:	6438      	str	r0, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8015de4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d16c      	bne.n	8015ec6 <f_mkdir+0x19e>
				dsc = clust2sect(fs, dcl);
 8015dec:	68bb      	ldr	r3, [r7, #8]
 8015dee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015df0:	4618      	mov	r0, r3
 8015df2:	f7fd fd27 	bl	8013844 <clust2sect>
 8015df6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	3338      	adds	r3, #56	; 0x38
 8015dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8015dfe:	68bb      	ldr	r3, [r7, #8]
 8015e00:	899b      	ldrh	r3, [r3, #12]
 8015e02:	461a      	mov	r2, r3
 8015e04:	2100      	movs	r1, #0
 8015e06:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e08:	f7fd fbdd 	bl	80135c6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8015e0c:	220b      	movs	r2, #11
 8015e0e:	2120      	movs	r1, #32
 8015e10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e12:	f7fd fbd8 	bl	80135c6 <mem_set>
					dir[DIR_Name] = '.';
 8015e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e18:	222e      	movs	r2, #46	; 0x2e
 8015e1a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8015e1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e1e:	330b      	adds	r3, #11
 8015e20:	2210      	movs	r2, #16
 8015e22:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8015e24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e26:	3316      	adds	r3, #22
 8015e28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7fd fb7e 	bl	801352c <st_dword>
					st_clust(fs, dir, dcl);
 8015e30:	68bb      	ldr	r3, [r7, #8]
 8015e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015e34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015e36:	4618      	mov	r0, r3
 8015e38:	f7fe fa0d 	bl	8014256 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8015e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e3e:	3320      	adds	r3, #32
 8015e40:	2220      	movs	r2, #32
 8015e42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015e44:	4618      	mov	r0, r3
 8015e46:	f7fd fb9d 	bl	8013584 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8015e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e4c:	3321      	adds	r3, #33	; 0x21
 8015e4e:	222e      	movs	r2, #46	; 0x2e
 8015e50:	701a      	strb	r2, [r3, #0]
 8015e52:	697b      	ldr	r3, [r7, #20]
 8015e54:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8015e56:	68bb      	ldr	r3, [r7, #8]
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	2b03      	cmp	r3, #3
 8015e5c:	d106      	bne.n	8015e6c <f_mkdir+0x144>
 8015e5e:	68bb      	ldr	r3, [r7, #8]
 8015e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d101      	bne.n	8015e6c <f_mkdir+0x144>
 8015e68:	2300      	movs	r3, #0
 8015e6a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8015e6c:	68b8      	ldr	r0, [r7, #8]
 8015e6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e70:	3320      	adds	r3, #32
 8015e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8015e74:	4619      	mov	r1, r3
 8015e76:	f7fe f9ee 	bl	8014256 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015e7a:	68bb      	ldr	r3, [r7, #8]
 8015e7c:	895b      	ldrh	r3, [r3, #10]
 8015e7e:	653b      	str	r3, [r7, #80]	; 0x50
 8015e80:	e01c      	b.n	8015ebc <f_mkdir+0x194>
					fs->winsect = dsc++;
 8015e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015e84:	1c5a      	adds	r2, r3, #1
 8015e86:	64fa      	str	r2, [r7, #76]	; 0x4c
 8015e88:	68ba      	ldr	r2, [r7, #8]
 8015e8a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8015e8c:	68bb      	ldr	r3, [r7, #8]
 8015e8e:	2201      	movs	r2, #1
 8015e90:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8015e92:	68bb      	ldr	r3, [r7, #8]
 8015e94:	4618      	mov	r0, r3
 8015e96:	f7fd fbf3 	bl	8013680 <sync_window>
 8015e9a:	4603      	mov	r3, r0
 8015e9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8015ea0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ea4:	2b00      	cmp	r3, #0
 8015ea6:	d10d      	bne.n	8015ec4 <f_mkdir+0x19c>
					mem_set(dir, 0, SS(fs));
 8015ea8:	68bb      	ldr	r3, [r7, #8]
 8015eaa:	899b      	ldrh	r3, [r3, #12]
 8015eac:	461a      	mov	r2, r3
 8015eae:	2100      	movs	r1, #0
 8015eb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015eb2:	f7fd fb88 	bl	80135c6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8015eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015eb8:	3b01      	subs	r3, #1
 8015eba:	653b      	str	r3, [r7, #80]	; 0x50
 8015ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d1df      	bne.n	8015e82 <f_mkdir+0x15a>
 8015ec2:	e000      	b.n	8015ec6 <f_mkdir+0x19e>
					if (res != FR_OK) break;
 8015ec4:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8015ec6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d107      	bne.n	8015ede <f_mkdir+0x1b6>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8015ece:	f107 030c 	add.w	r3, r7, #12
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f7fe fc2a 	bl	801472c <dir_register>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8015ede:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d120      	bne.n	8015f28 <f_mkdir+0x200>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8015ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8015eea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015eec:	3316      	adds	r3, #22
 8015eee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f7fd fb1b 	bl	801352c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8015ef6:	68bb      	ldr	r3, [r7, #8]
 8015ef8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015efa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7fe f9aa 	bl	8014256 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8015f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f04:	330b      	adds	r3, #11
 8015f06:	2210      	movs	r2, #16
 8015f08:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8015f0a:	68bb      	ldr	r3, [r7, #8]
 8015f0c:	2201      	movs	r2, #1
 8015f0e:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8015f10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	d10e      	bne.n	8015f36 <f_mkdir+0x20e>
					res = sync_fs(fs);
 8015f18:	68bb      	ldr	r3, [r7, #8]
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f7fd fc22 	bl	8013764 <sync_fs>
 8015f20:	4603      	mov	r3, r0
 8015f22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8015f26:	e006      	b.n	8015f36 <f_mkdir+0x20e>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8015f28:	f107 030c 	add.w	r3, r7, #12
 8015f2c:	2200      	movs	r2, #0
 8015f2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015f30:	4618      	mov	r0, r3
 8015f32:	f7fd fe96 	bl	8013c62 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8015f36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	3758      	adds	r7, #88	; 0x58
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
	...

08015f44 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015f44:	b480      	push	{r7}
 8015f46:	b087      	sub	sp, #28
 8015f48:	af00      	add	r7, sp, #0
 8015f4a:	60f8      	str	r0, [r7, #12]
 8015f4c:	60b9      	str	r1, [r7, #8]
 8015f4e:	4613      	mov	r3, r2
 8015f50:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015f52:	2301      	movs	r3, #1
 8015f54:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015f56:	2300      	movs	r3, #0
 8015f58:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015f5a:	4b1f      	ldr	r3, [pc, #124]	; (8015fd8 <FATFS_LinkDriverEx+0x94>)
 8015f5c:	7a5b      	ldrb	r3, [r3, #9]
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d131      	bne.n	8015fc8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015f64:	4b1c      	ldr	r3, [pc, #112]	; (8015fd8 <FATFS_LinkDriverEx+0x94>)
 8015f66:	7a5b      	ldrb	r3, [r3, #9]
 8015f68:	b2db      	uxtb	r3, r3
 8015f6a:	461a      	mov	r2, r3
 8015f6c:	4b1a      	ldr	r3, [pc, #104]	; (8015fd8 <FATFS_LinkDriverEx+0x94>)
 8015f6e:	2100      	movs	r1, #0
 8015f70:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015f72:	4b19      	ldr	r3, [pc, #100]	; (8015fd8 <FATFS_LinkDriverEx+0x94>)
 8015f74:	7a5b      	ldrb	r3, [r3, #9]
 8015f76:	b2db      	uxtb	r3, r3
 8015f78:	4a17      	ldr	r2, [pc, #92]	; (8015fd8 <FATFS_LinkDriverEx+0x94>)
 8015f7a:	009b      	lsls	r3, r3, #2
 8015f7c:	4413      	add	r3, r2
 8015f7e:	68fa      	ldr	r2, [r7, #12]
 8015f80:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015f82:	4b15      	ldr	r3, [pc, #84]	; (8015fd8 <FATFS_LinkDriverEx+0x94>)
 8015f84:	7a5b      	ldrb	r3, [r3, #9]
 8015f86:	b2db      	uxtb	r3, r3
 8015f88:	461a      	mov	r2, r3
 8015f8a:	4b13      	ldr	r3, [pc, #76]	; (8015fd8 <FATFS_LinkDriverEx+0x94>)
 8015f8c:	4413      	add	r3, r2
 8015f8e:	79fa      	ldrb	r2, [r7, #7]
 8015f90:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015f92:	4b11      	ldr	r3, [pc, #68]	; (8015fd8 <FATFS_LinkDriverEx+0x94>)
 8015f94:	7a5b      	ldrb	r3, [r3, #9]
 8015f96:	b2db      	uxtb	r3, r3
 8015f98:	1c5a      	adds	r2, r3, #1
 8015f9a:	b2d1      	uxtb	r1, r2
 8015f9c:	4a0e      	ldr	r2, [pc, #56]	; (8015fd8 <FATFS_LinkDriverEx+0x94>)
 8015f9e:	7251      	strb	r1, [r2, #9]
 8015fa0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015fa2:	7dbb      	ldrb	r3, [r7, #22]
 8015fa4:	3330      	adds	r3, #48	; 0x30
 8015fa6:	b2da      	uxtb	r2, r3
 8015fa8:	68bb      	ldr	r3, [r7, #8]
 8015faa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015fac:	68bb      	ldr	r3, [r7, #8]
 8015fae:	3301      	adds	r3, #1
 8015fb0:	223a      	movs	r2, #58	; 0x3a
 8015fb2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015fb4:	68bb      	ldr	r3, [r7, #8]
 8015fb6:	3302      	adds	r3, #2
 8015fb8:	222f      	movs	r2, #47	; 0x2f
 8015fba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	3303      	adds	r3, #3
 8015fc0:	2200      	movs	r2, #0
 8015fc2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8015fca:	4618      	mov	r0, r3
 8015fcc:	371c      	adds	r7, #28
 8015fce:	46bd      	mov	sp, r7
 8015fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd4:	4770      	bx	lr
 8015fd6:	bf00      	nop
 8015fd8:	2000040c 	.word	0x2000040c

08015fdc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015fdc:	b580      	push	{r7, lr}
 8015fde:	b082      	sub	sp, #8
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	6078      	str	r0, [r7, #4]
 8015fe4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015fe6:	2200      	movs	r2, #0
 8015fe8:	6839      	ldr	r1, [r7, #0]
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	f7ff ffaa 	bl	8015f44 <FATFS_LinkDriverEx>
 8015ff0:	4603      	mov	r3, r0
}
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	3708      	adds	r7, #8
 8015ff6:	46bd      	mov	sp, r7
 8015ff8:	bd80      	pop	{r7, pc}
	...

08015ffc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8015ffc:	b480      	push	{r7}
 8015ffe:	b085      	sub	sp, #20
 8016000:	af00      	add	r7, sp, #0
 8016002:	4603      	mov	r3, r0
 8016004:	6039      	str	r1, [r7, #0]
 8016006:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8016008:	88fb      	ldrh	r3, [r7, #6]
 801600a:	2b7f      	cmp	r3, #127	; 0x7f
 801600c:	d802      	bhi.n	8016014 <ff_convert+0x18>
		c = chr;
 801600e:	88fb      	ldrh	r3, [r7, #6]
 8016010:	81fb      	strh	r3, [r7, #14]
 8016012:	e025      	b.n	8016060 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8016014:	683b      	ldr	r3, [r7, #0]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d00b      	beq.n	8016032 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801601a:	88fb      	ldrh	r3, [r7, #6]
 801601c:	2bff      	cmp	r3, #255	; 0xff
 801601e:	d805      	bhi.n	801602c <ff_convert+0x30>
 8016020:	88fb      	ldrh	r3, [r7, #6]
 8016022:	3b80      	subs	r3, #128	; 0x80
 8016024:	4a12      	ldr	r2, [pc, #72]	; (8016070 <ff_convert+0x74>)
 8016026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801602a:	e000      	b.n	801602e <ff_convert+0x32>
 801602c:	2300      	movs	r3, #0
 801602e:	81fb      	strh	r3, [r7, #14]
 8016030:	e016      	b.n	8016060 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8016032:	2300      	movs	r3, #0
 8016034:	81fb      	strh	r3, [r7, #14]
 8016036:	e009      	b.n	801604c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8016038:	89fb      	ldrh	r3, [r7, #14]
 801603a:	4a0d      	ldr	r2, [pc, #52]	; (8016070 <ff_convert+0x74>)
 801603c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016040:	88fa      	ldrh	r2, [r7, #6]
 8016042:	429a      	cmp	r2, r3
 8016044:	d006      	beq.n	8016054 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8016046:	89fb      	ldrh	r3, [r7, #14]
 8016048:	3301      	adds	r3, #1
 801604a:	81fb      	strh	r3, [r7, #14]
 801604c:	89fb      	ldrh	r3, [r7, #14]
 801604e:	2b7f      	cmp	r3, #127	; 0x7f
 8016050:	d9f2      	bls.n	8016038 <ff_convert+0x3c>
 8016052:	e000      	b.n	8016056 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8016054:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8016056:	89fb      	ldrh	r3, [r7, #14]
 8016058:	3380      	adds	r3, #128	; 0x80
 801605a:	b29b      	uxth	r3, r3
 801605c:	b2db      	uxtb	r3, r3
 801605e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8016060:	89fb      	ldrh	r3, [r7, #14]
}
 8016062:	4618      	mov	r0, r3
 8016064:	3714      	adds	r7, #20
 8016066:	46bd      	mov	sp, r7
 8016068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801606c:	4770      	bx	lr
 801606e:	bf00      	nop
 8016070:	08017670 	.word	0x08017670

08016074 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8016074:	b480      	push	{r7}
 8016076:	b087      	sub	sp, #28
 8016078:	af00      	add	r7, sp, #0
 801607a:	4603      	mov	r3, r0
 801607c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801607e:	88fb      	ldrh	r3, [r7, #6]
 8016080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016084:	d201      	bcs.n	801608a <ff_wtoupper+0x16>
 8016086:	4b3e      	ldr	r3, [pc, #248]	; (8016180 <ff_wtoupper+0x10c>)
 8016088:	e000      	b.n	801608c <ff_wtoupper+0x18>
 801608a:	4b3e      	ldr	r3, [pc, #248]	; (8016184 <ff_wtoupper+0x110>)
 801608c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801608e:	697b      	ldr	r3, [r7, #20]
 8016090:	1c9a      	adds	r2, r3, #2
 8016092:	617a      	str	r2, [r7, #20]
 8016094:	881b      	ldrh	r3, [r3, #0]
 8016096:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8016098:	8a7b      	ldrh	r3, [r7, #18]
 801609a:	2b00      	cmp	r3, #0
 801609c:	d068      	beq.n	8016170 <ff_wtoupper+0xfc>
 801609e:	88fa      	ldrh	r2, [r7, #6]
 80160a0:	8a7b      	ldrh	r3, [r7, #18]
 80160a2:	429a      	cmp	r2, r3
 80160a4:	d364      	bcc.n	8016170 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80160a6:	697b      	ldr	r3, [r7, #20]
 80160a8:	1c9a      	adds	r2, r3, #2
 80160aa:	617a      	str	r2, [r7, #20]
 80160ac:	881b      	ldrh	r3, [r3, #0]
 80160ae:	823b      	strh	r3, [r7, #16]
 80160b0:	8a3b      	ldrh	r3, [r7, #16]
 80160b2:	0a1b      	lsrs	r3, r3, #8
 80160b4:	81fb      	strh	r3, [r7, #14]
 80160b6:	8a3b      	ldrh	r3, [r7, #16]
 80160b8:	b2db      	uxtb	r3, r3
 80160ba:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80160bc:	88fa      	ldrh	r2, [r7, #6]
 80160be:	8a79      	ldrh	r1, [r7, #18]
 80160c0:	8a3b      	ldrh	r3, [r7, #16]
 80160c2:	440b      	add	r3, r1
 80160c4:	429a      	cmp	r2, r3
 80160c6:	da49      	bge.n	801615c <ff_wtoupper+0xe8>
			switch (cmd) {
 80160c8:	89fb      	ldrh	r3, [r7, #14]
 80160ca:	2b08      	cmp	r3, #8
 80160cc:	d84f      	bhi.n	801616e <ff_wtoupper+0xfa>
 80160ce:	a201      	add	r2, pc, #4	; (adr r2, 80160d4 <ff_wtoupper+0x60>)
 80160d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160d4:	080160f9 	.word	0x080160f9
 80160d8:	0801610b 	.word	0x0801610b
 80160dc:	08016121 	.word	0x08016121
 80160e0:	08016129 	.word	0x08016129
 80160e4:	08016131 	.word	0x08016131
 80160e8:	08016139 	.word	0x08016139
 80160ec:	08016141 	.word	0x08016141
 80160f0:	08016149 	.word	0x08016149
 80160f4:	08016151 	.word	0x08016151
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80160f8:	88fa      	ldrh	r2, [r7, #6]
 80160fa:	8a7b      	ldrh	r3, [r7, #18]
 80160fc:	1ad3      	subs	r3, r2, r3
 80160fe:	005b      	lsls	r3, r3, #1
 8016100:	697a      	ldr	r2, [r7, #20]
 8016102:	4413      	add	r3, r2
 8016104:	881b      	ldrh	r3, [r3, #0]
 8016106:	80fb      	strh	r3, [r7, #6]
 8016108:	e027      	b.n	801615a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801610a:	88fa      	ldrh	r2, [r7, #6]
 801610c:	8a7b      	ldrh	r3, [r7, #18]
 801610e:	1ad3      	subs	r3, r2, r3
 8016110:	b29b      	uxth	r3, r3
 8016112:	f003 0301 	and.w	r3, r3, #1
 8016116:	b29b      	uxth	r3, r3
 8016118:	88fa      	ldrh	r2, [r7, #6]
 801611a:	1ad3      	subs	r3, r2, r3
 801611c:	80fb      	strh	r3, [r7, #6]
 801611e:	e01c      	b.n	801615a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8016120:	88fb      	ldrh	r3, [r7, #6]
 8016122:	3b10      	subs	r3, #16
 8016124:	80fb      	strh	r3, [r7, #6]
 8016126:	e018      	b.n	801615a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8016128:	88fb      	ldrh	r3, [r7, #6]
 801612a:	3b20      	subs	r3, #32
 801612c:	80fb      	strh	r3, [r7, #6]
 801612e:	e014      	b.n	801615a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8016130:	88fb      	ldrh	r3, [r7, #6]
 8016132:	3b30      	subs	r3, #48	; 0x30
 8016134:	80fb      	strh	r3, [r7, #6]
 8016136:	e010      	b.n	801615a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8016138:	88fb      	ldrh	r3, [r7, #6]
 801613a:	3b1a      	subs	r3, #26
 801613c:	80fb      	strh	r3, [r7, #6]
 801613e:	e00c      	b.n	801615a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8016140:	88fb      	ldrh	r3, [r7, #6]
 8016142:	3308      	adds	r3, #8
 8016144:	80fb      	strh	r3, [r7, #6]
 8016146:	e008      	b.n	801615a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8016148:	88fb      	ldrh	r3, [r7, #6]
 801614a:	3b50      	subs	r3, #80	; 0x50
 801614c:	80fb      	strh	r3, [r7, #6]
 801614e:	e004      	b.n	801615a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8016150:	88fb      	ldrh	r3, [r7, #6]
 8016152:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8016156:	80fb      	strh	r3, [r7, #6]
 8016158:	bf00      	nop
			}
			break;
 801615a:	e008      	b.n	801616e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 801615c:	89fb      	ldrh	r3, [r7, #14]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d195      	bne.n	801608e <ff_wtoupper+0x1a>
 8016162:	8a3b      	ldrh	r3, [r7, #16]
 8016164:	005b      	lsls	r3, r3, #1
 8016166:	697a      	ldr	r2, [r7, #20]
 8016168:	4413      	add	r3, r2
 801616a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 801616c:	e78f      	b.n	801608e <ff_wtoupper+0x1a>
			break;
 801616e:	bf00      	nop
	}

	return chr;
 8016170:	88fb      	ldrh	r3, [r7, #6]
}
 8016172:	4618      	mov	r0, r3
 8016174:	371c      	adds	r7, #28
 8016176:	46bd      	mov	sp, r7
 8016178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617c:	4770      	bx	lr
 801617e:	bf00      	nop
 8016180:	08017770 	.word	0x08017770
 8016184:	08017964 	.word	0x08017964

08016188 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016188:	b580      	push	{r7, lr}
 801618a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801618c:	2200      	movs	r2, #0
 801618e:	4912      	ldr	r1, [pc, #72]	; (80161d8 <MX_USB_DEVICE_Init+0x50>)
 8016190:	4812      	ldr	r0, [pc, #72]	; (80161dc <MX_USB_DEVICE_Init+0x54>)
 8016192:	f7fb ff62 	bl	801205a <USBD_Init>
 8016196:	4603      	mov	r3, r0
 8016198:	2b00      	cmp	r3, #0
 801619a:	d001      	beq.n	80161a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801619c:	f7eb fd32 	bl	8001c04 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80161a0:	490f      	ldr	r1, [pc, #60]	; (80161e0 <MX_USB_DEVICE_Init+0x58>)
 80161a2:	480e      	ldr	r0, [pc, #56]	; (80161dc <MX_USB_DEVICE_Init+0x54>)
 80161a4:	f7fb ff89 	bl	80120ba <USBD_RegisterClass>
 80161a8:	4603      	mov	r3, r0
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d001      	beq.n	80161b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80161ae:	f7eb fd29 	bl	8001c04 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80161b2:	490c      	ldr	r1, [pc, #48]	; (80161e4 <MX_USB_DEVICE_Init+0x5c>)
 80161b4:	4809      	ldr	r0, [pc, #36]	; (80161dc <MX_USB_DEVICE_Init+0x54>)
 80161b6:	f7fa fb39 	bl	801082c <USBD_MSC_RegisterStorage>
 80161ba:	4603      	mov	r3, r0
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d001      	beq.n	80161c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80161c0:	f7eb fd20 	bl	8001c04 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80161c4:	4805      	ldr	r0, [pc, #20]	; (80161dc <MX_USB_DEVICE_Init+0x54>)
 80161c6:	f7fb ff9f 	bl	8012108 <USBD_Start>
 80161ca:	4603      	mov	r3, r0
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d001      	beq.n	80161d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80161d0:	f7eb fd18 	bl	8001c04 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80161d4:	bf00      	nop
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	200000f4 	.word	0x200000f4
 80161dc:	20004f00 	.word	0x20004f00
 80161e0:	2000000c 	.word	0x2000000c
 80161e4:	20000154 	.word	0x20000154

080161e8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80161e8:	b480      	push	{r7}
 80161ea:	b083      	sub	sp, #12
 80161ec:	af00      	add	r7, sp, #0
 80161ee:	4603      	mov	r3, r0
 80161f0:	6039      	str	r1, [r7, #0]
 80161f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80161f4:	683b      	ldr	r3, [r7, #0]
 80161f6:	2212      	movs	r2, #18
 80161f8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80161fa:	4b03      	ldr	r3, [pc, #12]	; (8016208 <USBD_FS_DeviceDescriptor+0x20>)
}
 80161fc:	4618      	mov	r0, r3
 80161fe:	370c      	adds	r7, #12
 8016200:	46bd      	mov	sp, r7
 8016202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016206:	4770      	bx	lr
 8016208:	20000114 	.word	0x20000114

0801620c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801620c:	b480      	push	{r7}
 801620e:	b083      	sub	sp, #12
 8016210:	af00      	add	r7, sp, #0
 8016212:	4603      	mov	r3, r0
 8016214:	6039      	str	r1, [r7, #0]
 8016216:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	2204      	movs	r2, #4
 801621c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801621e:	4b03      	ldr	r3, [pc, #12]	; (801622c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016220:	4618      	mov	r0, r3
 8016222:	370c      	adds	r7, #12
 8016224:	46bd      	mov	sp, r7
 8016226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801622a:	4770      	bx	lr
 801622c:	20000134 	.word	0x20000134

08016230 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016230:	b580      	push	{r7, lr}
 8016232:	b082      	sub	sp, #8
 8016234:	af00      	add	r7, sp, #0
 8016236:	4603      	mov	r3, r0
 8016238:	6039      	str	r1, [r7, #0]
 801623a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801623c:	79fb      	ldrb	r3, [r7, #7]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d105      	bne.n	801624e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016242:	683a      	ldr	r2, [r7, #0]
 8016244:	4907      	ldr	r1, [pc, #28]	; (8016264 <USBD_FS_ProductStrDescriptor+0x34>)
 8016246:	4808      	ldr	r0, [pc, #32]	; (8016268 <USBD_FS_ProductStrDescriptor+0x38>)
 8016248:	f7fc ffb9 	bl	80131be <USBD_GetString>
 801624c:	e004      	b.n	8016258 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801624e:	683a      	ldr	r2, [r7, #0]
 8016250:	4904      	ldr	r1, [pc, #16]	; (8016264 <USBD_FS_ProductStrDescriptor+0x34>)
 8016252:	4805      	ldr	r0, [pc, #20]	; (8016268 <USBD_FS_ProductStrDescriptor+0x38>)
 8016254:	f7fc ffb3 	bl	80131be <USBD_GetString>
  }
  return USBD_StrDesc;
 8016258:	4b02      	ldr	r3, [pc, #8]	; (8016264 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801625a:	4618      	mov	r0, r3
 801625c:	3708      	adds	r7, #8
 801625e:	46bd      	mov	sp, r7
 8016260:	bd80      	pop	{r7, pc}
 8016262:	bf00      	nop
 8016264:	200051d0 	.word	0x200051d0
 8016268:	08017568 	.word	0x08017568

0801626c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b082      	sub	sp, #8
 8016270:	af00      	add	r7, sp, #0
 8016272:	4603      	mov	r3, r0
 8016274:	6039      	str	r1, [r7, #0]
 8016276:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016278:	683a      	ldr	r2, [r7, #0]
 801627a:	4904      	ldr	r1, [pc, #16]	; (801628c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801627c:	4804      	ldr	r0, [pc, #16]	; (8016290 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801627e:	f7fc ff9e 	bl	80131be <USBD_GetString>
  return USBD_StrDesc;
 8016282:	4b02      	ldr	r3, [pc, #8]	; (801628c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016284:	4618      	mov	r0, r3
 8016286:	3708      	adds	r7, #8
 8016288:	46bd      	mov	sp, r7
 801628a:	bd80      	pop	{r7, pc}
 801628c:	200051d0 	.word	0x200051d0
 8016290:	0801757c 	.word	0x0801757c

08016294 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b082      	sub	sp, #8
 8016298:	af00      	add	r7, sp, #0
 801629a:	4603      	mov	r3, r0
 801629c:	6039      	str	r1, [r7, #0]
 801629e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80162a0:	683b      	ldr	r3, [r7, #0]
 80162a2:	221a      	movs	r2, #26
 80162a4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80162a6:	f000 f855 	bl	8016354 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80162aa:	4b02      	ldr	r3, [pc, #8]	; (80162b4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80162ac:	4618      	mov	r0, r3
 80162ae:	3708      	adds	r7, #8
 80162b0:	46bd      	mov	sp, r7
 80162b2:	bd80      	pop	{r7, pc}
 80162b4:	20000138 	.word	0x20000138

080162b8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162b8:	b580      	push	{r7, lr}
 80162ba:	b082      	sub	sp, #8
 80162bc:	af00      	add	r7, sp, #0
 80162be:	4603      	mov	r3, r0
 80162c0:	6039      	str	r1, [r7, #0]
 80162c2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80162c4:	79fb      	ldrb	r3, [r7, #7]
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d105      	bne.n	80162d6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80162ca:	683a      	ldr	r2, [r7, #0]
 80162cc:	4907      	ldr	r1, [pc, #28]	; (80162ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80162ce:	4808      	ldr	r0, [pc, #32]	; (80162f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80162d0:	f7fc ff75 	bl	80131be <USBD_GetString>
 80162d4:	e004      	b.n	80162e0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80162d6:	683a      	ldr	r2, [r7, #0]
 80162d8:	4904      	ldr	r1, [pc, #16]	; (80162ec <USBD_FS_ConfigStrDescriptor+0x34>)
 80162da:	4805      	ldr	r0, [pc, #20]	; (80162f0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80162dc:	f7fc ff6f 	bl	80131be <USBD_GetString>
  }
  return USBD_StrDesc;
 80162e0:	4b02      	ldr	r3, [pc, #8]	; (80162ec <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80162e2:	4618      	mov	r0, r3
 80162e4:	3708      	adds	r7, #8
 80162e6:	46bd      	mov	sp, r7
 80162e8:	bd80      	pop	{r7, pc}
 80162ea:	bf00      	nop
 80162ec:	200051d0 	.word	0x200051d0
 80162f0:	08017590 	.word	0x08017590

080162f4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80162f4:	b580      	push	{r7, lr}
 80162f6:	b082      	sub	sp, #8
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	4603      	mov	r3, r0
 80162fc:	6039      	str	r1, [r7, #0]
 80162fe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016300:	79fb      	ldrb	r3, [r7, #7]
 8016302:	2b00      	cmp	r3, #0
 8016304:	d105      	bne.n	8016312 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016306:	683a      	ldr	r2, [r7, #0]
 8016308:	4907      	ldr	r1, [pc, #28]	; (8016328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801630a:	4808      	ldr	r0, [pc, #32]	; (801632c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801630c:	f7fc ff57 	bl	80131be <USBD_GetString>
 8016310:	e004      	b.n	801631c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016312:	683a      	ldr	r2, [r7, #0]
 8016314:	4904      	ldr	r1, [pc, #16]	; (8016328 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016316:	4805      	ldr	r0, [pc, #20]	; (801632c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016318:	f7fc ff51 	bl	80131be <USBD_GetString>
  }
  return USBD_StrDesc;
 801631c:	4b02      	ldr	r3, [pc, #8]	; (8016328 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801631e:	4618      	mov	r0, r3
 8016320:	3708      	adds	r7, #8
 8016322:	46bd      	mov	sp, r7
 8016324:	bd80      	pop	{r7, pc}
 8016326:	bf00      	nop
 8016328:	200051d0 	.word	0x200051d0
 801632c:	0801759c 	.word	0x0801759c

08016330 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016330:	b480      	push	{r7}
 8016332:	b083      	sub	sp, #12
 8016334:	af00      	add	r7, sp, #0
 8016336:	4603      	mov	r3, r0
 8016338:	6039      	str	r1, [r7, #0]
 801633a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 801633c:	683b      	ldr	r3, [r7, #0]
 801633e:	220c      	movs	r2, #12
 8016340:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8016342:	4b03      	ldr	r3, [pc, #12]	; (8016350 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8016344:	4618      	mov	r0, r3
 8016346:	370c      	adds	r7, #12
 8016348:	46bd      	mov	sp, r7
 801634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634e:	4770      	bx	lr
 8016350:	20000128 	.word	0x20000128

08016354 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b084      	sub	sp, #16
 8016358:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801635a:	4b0f      	ldr	r3, [pc, #60]	; (8016398 <Get_SerialNum+0x44>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016360:	4b0e      	ldr	r3, [pc, #56]	; (801639c <Get_SerialNum+0x48>)
 8016362:	681b      	ldr	r3, [r3, #0]
 8016364:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016366:	4b0e      	ldr	r3, [pc, #56]	; (80163a0 <Get_SerialNum+0x4c>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801636c:	68fa      	ldr	r2, [r7, #12]
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	4413      	add	r3, r2
 8016372:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d009      	beq.n	801638e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801637a:	2208      	movs	r2, #8
 801637c:	4909      	ldr	r1, [pc, #36]	; (80163a4 <Get_SerialNum+0x50>)
 801637e:	68f8      	ldr	r0, [r7, #12]
 8016380:	f000 f814 	bl	80163ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016384:	2204      	movs	r2, #4
 8016386:	4908      	ldr	r1, [pc, #32]	; (80163a8 <Get_SerialNum+0x54>)
 8016388:	68b8      	ldr	r0, [r7, #8]
 801638a:	f000 f80f 	bl	80163ac <IntToUnicode>
  }
}
 801638e:	bf00      	nop
 8016390:	3710      	adds	r7, #16
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}
 8016396:	bf00      	nop
 8016398:	1fff7a10 	.word	0x1fff7a10
 801639c:	1fff7a14 	.word	0x1fff7a14
 80163a0:	1fff7a18 	.word	0x1fff7a18
 80163a4:	2000013a 	.word	0x2000013a
 80163a8:	2000014a 	.word	0x2000014a

080163ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80163ac:	b480      	push	{r7}
 80163ae:	b087      	sub	sp, #28
 80163b0:	af00      	add	r7, sp, #0
 80163b2:	60f8      	str	r0, [r7, #12]
 80163b4:	60b9      	str	r1, [r7, #8]
 80163b6:	4613      	mov	r3, r2
 80163b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80163ba:	2300      	movs	r3, #0
 80163bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80163be:	2300      	movs	r3, #0
 80163c0:	75fb      	strb	r3, [r7, #23]
 80163c2:	e027      	b.n	8016414 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80163c4:	68fb      	ldr	r3, [r7, #12]
 80163c6:	0f1b      	lsrs	r3, r3, #28
 80163c8:	2b09      	cmp	r3, #9
 80163ca:	d80b      	bhi.n	80163e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	0f1b      	lsrs	r3, r3, #28
 80163d0:	b2da      	uxtb	r2, r3
 80163d2:	7dfb      	ldrb	r3, [r7, #23]
 80163d4:	005b      	lsls	r3, r3, #1
 80163d6:	4619      	mov	r1, r3
 80163d8:	68bb      	ldr	r3, [r7, #8]
 80163da:	440b      	add	r3, r1
 80163dc:	3230      	adds	r2, #48	; 0x30
 80163de:	b2d2      	uxtb	r2, r2
 80163e0:	701a      	strb	r2, [r3, #0]
 80163e2:	e00a      	b.n	80163fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	0f1b      	lsrs	r3, r3, #28
 80163e8:	b2da      	uxtb	r2, r3
 80163ea:	7dfb      	ldrb	r3, [r7, #23]
 80163ec:	005b      	lsls	r3, r3, #1
 80163ee:	4619      	mov	r1, r3
 80163f0:	68bb      	ldr	r3, [r7, #8]
 80163f2:	440b      	add	r3, r1
 80163f4:	3237      	adds	r2, #55	; 0x37
 80163f6:	b2d2      	uxtb	r2, r2
 80163f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80163fa:	68fb      	ldr	r3, [r7, #12]
 80163fc:	011b      	lsls	r3, r3, #4
 80163fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016400:	7dfb      	ldrb	r3, [r7, #23]
 8016402:	005b      	lsls	r3, r3, #1
 8016404:	3301      	adds	r3, #1
 8016406:	68ba      	ldr	r2, [r7, #8]
 8016408:	4413      	add	r3, r2
 801640a:	2200      	movs	r2, #0
 801640c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801640e:	7dfb      	ldrb	r3, [r7, #23]
 8016410:	3301      	adds	r3, #1
 8016412:	75fb      	strb	r3, [r7, #23]
 8016414:	7dfa      	ldrb	r2, [r7, #23]
 8016416:	79fb      	ldrb	r3, [r7, #7]
 8016418:	429a      	cmp	r2, r3
 801641a:	d3d3      	bcc.n	80163c4 <IntToUnicode+0x18>
  }
}
 801641c:	bf00      	nop
 801641e:	bf00      	nop
 8016420:	371c      	adds	r7, #28
 8016422:	46bd      	mov	sp, r7
 8016424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016428:	4770      	bx	lr

0801642a <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 801642a:	b480      	push	{r7}
 801642c:	b083      	sub	sp, #12
 801642e:	af00      	add	r7, sp, #0
 8016430:	4603      	mov	r3, r0
 8016432:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8016434:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8016436:	4618      	mov	r0, r3
 8016438:	370c      	adds	r7, #12
 801643a:	46bd      	mov	sp, r7
 801643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016440:	4770      	bx	lr

08016442 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8016442:	b480      	push	{r7}
 8016444:	b085      	sub	sp, #20
 8016446:	af00      	add	r7, sp, #0
 8016448:	4603      	mov	r3, r0
 801644a:	60b9      	str	r1, [r7, #8]
 801644c:	607a      	str	r2, [r7, #4]
 801644e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8016450:	68bb      	ldr	r3, [r7, #8]
 8016452:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8016456:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801645e:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8016460:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016462:	4618      	mov	r0, r3
 8016464:	3714      	adds	r7, #20
 8016466:	46bd      	mov	sp, r7
 8016468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646c:	4770      	bx	lr

0801646e <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 801646e:	b480      	push	{r7}
 8016470:	b083      	sub	sp, #12
 8016472:	af00      	add	r7, sp, #0
 8016474:	4603      	mov	r3, r0
 8016476:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016478:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801647a:	4618      	mov	r0, r3
 801647c:	370c      	adds	r7, #12
 801647e:	46bd      	mov	sp, r7
 8016480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016484:	4770      	bx	lr

08016486 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8016486:	b480      	push	{r7}
 8016488:	b083      	sub	sp, #12
 801648a:	af00      	add	r7, sp, #0
 801648c:	4603      	mov	r3, r0
 801648e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8016490:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016492:	4618      	mov	r0, r3
 8016494:	370c      	adds	r7, #12
 8016496:	46bd      	mov	sp, r7
 8016498:	f85d 7b04 	ldr.w	r7, [sp], #4
 801649c:	4770      	bx	lr

0801649e <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 801649e:	b480      	push	{r7}
 80164a0:	b085      	sub	sp, #20
 80164a2:	af00      	add	r7, sp, #0
 80164a4:	60b9      	str	r1, [r7, #8]
 80164a6:	607a      	str	r2, [r7, #4]
 80164a8:	461a      	mov	r2, r3
 80164aa:	4603      	mov	r3, r0
 80164ac:	73fb      	strb	r3, [r7, #15]
 80164ae:	4613      	mov	r3, r2
 80164b0:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80164b2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80164b4:	4618      	mov	r0, r3
 80164b6:	3714      	adds	r7, #20
 80164b8:	46bd      	mov	sp, r7
 80164ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164be:	4770      	bx	lr

080164c0 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80164c0:	b480      	push	{r7}
 80164c2:	b085      	sub	sp, #20
 80164c4:	af00      	add	r7, sp, #0
 80164c6:	60b9      	str	r1, [r7, #8]
 80164c8:	607a      	str	r2, [r7, #4]
 80164ca:	461a      	mov	r2, r3
 80164cc:	4603      	mov	r3, r0
 80164ce:	73fb      	strb	r3, [r7, #15]
 80164d0:	4613      	mov	r3, r2
 80164d2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 80164d4:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80164d6:	4618      	mov	r0, r3
 80164d8:	3714      	adds	r7, #20
 80164da:	46bd      	mov	sp, r7
 80164dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e0:	4770      	bx	lr

080164e2 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80164e2:	b480      	push	{r7}
 80164e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80164e6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80164e8:	4618      	mov	r0, r3
 80164ea:	46bd      	mov	sp, r7
 80164ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164f0:	4770      	bx	lr
	...

080164f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b08a      	sub	sp, #40	; 0x28
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80164fc:	f107 0314 	add.w	r3, r7, #20
 8016500:	2200      	movs	r2, #0
 8016502:	601a      	str	r2, [r3, #0]
 8016504:	605a      	str	r2, [r3, #4]
 8016506:	609a      	str	r2, [r3, #8]
 8016508:	60da      	str	r2, [r3, #12]
 801650a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016514:	d147      	bne.n	80165a6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016516:	2300      	movs	r3, #0
 8016518:	613b      	str	r3, [r7, #16]
 801651a:	4b25      	ldr	r3, [pc, #148]	; (80165b0 <HAL_PCD_MspInit+0xbc>)
 801651c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801651e:	4a24      	ldr	r2, [pc, #144]	; (80165b0 <HAL_PCD_MspInit+0xbc>)
 8016520:	f043 0301 	orr.w	r3, r3, #1
 8016524:	6313      	str	r3, [r2, #48]	; 0x30
 8016526:	4b22      	ldr	r3, [pc, #136]	; (80165b0 <HAL_PCD_MspInit+0xbc>)
 8016528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801652a:	f003 0301 	and.w	r3, r3, #1
 801652e:	613b      	str	r3, [r7, #16]
 8016530:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8016532:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016538:	2300      	movs	r3, #0
 801653a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801653c:	2300      	movs	r3, #0
 801653e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016540:	f107 0314 	add.w	r3, r7, #20
 8016544:	4619      	mov	r1, r3
 8016546:	481b      	ldr	r0, [pc, #108]	; (80165b4 <HAL_PCD_MspInit+0xc0>)
 8016548:	f7f1 ffae 	bl	80084a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 801654c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8016550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016552:	2302      	movs	r3, #2
 8016554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016556:	2300      	movs	r3, #0
 8016558:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801655a:	2303      	movs	r3, #3
 801655c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801655e:	230a      	movs	r3, #10
 8016560:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016562:	f107 0314 	add.w	r3, r7, #20
 8016566:	4619      	mov	r1, r3
 8016568:	4812      	ldr	r0, [pc, #72]	; (80165b4 <HAL_PCD_MspInit+0xc0>)
 801656a:	f7f1 ff9d 	bl	80084a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801656e:	4b10      	ldr	r3, [pc, #64]	; (80165b0 <HAL_PCD_MspInit+0xbc>)
 8016570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016572:	4a0f      	ldr	r2, [pc, #60]	; (80165b0 <HAL_PCD_MspInit+0xbc>)
 8016574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016578:	6353      	str	r3, [r2, #52]	; 0x34
 801657a:	2300      	movs	r3, #0
 801657c:	60fb      	str	r3, [r7, #12]
 801657e:	4b0c      	ldr	r3, [pc, #48]	; (80165b0 <HAL_PCD_MspInit+0xbc>)
 8016580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016582:	4a0b      	ldr	r2, [pc, #44]	; (80165b0 <HAL_PCD_MspInit+0xbc>)
 8016584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016588:	6453      	str	r3, [r2, #68]	; 0x44
 801658a:	4b09      	ldr	r3, [pc, #36]	; (80165b0 <HAL_PCD_MspInit+0xbc>)
 801658c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801658e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016592:	60fb      	str	r3, [r7, #12]
 8016594:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8016596:	2200      	movs	r2, #0
 8016598:	2100      	movs	r1, #0
 801659a:	2043      	movs	r0, #67	; 0x43
 801659c:	f7f1 fbaf 	bl	8007cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80165a0:	2043      	movs	r0, #67	; 0x43
 80165a2:	f7f1 fbc8 	bl	8007d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80165a6:	bf00      	nop
 80165a8:	3728      	adds	r7, #40	; 0x28
 80165aa:	46bd      	mov	sp, r7
 80165ac:	bd80      	pop	{r7, pc}
 80165ae:	bf00      	nop
 80165b0:	40023800 	.word	0x40023800
 80165b4:	40020000 	.word	0x40020000

080165b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b082      	sub	sp, #8
 80165bc:	af00      	add	r7, sp, #0
 80165be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80165cc:	4619      	mov	r1, r3
 80165ce:	4610      	mov	r0, r2
 80165d0:	f7fb fde5 	bl	801219e <USBD_LL_SetupStage>
}
 80165d4:	bf00      	nop
 80165d6:	3708      	adds	r7, #8
 80165d8:	46bd      	mov	sp, r7
 80165da:	bd80      	pop	{r7, pc}

080165dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b082      	sub	sp, #8
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
 80165e4:	460b      	mov	r3, r1
 80165e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80165ee:	78fa      	ldrb	r2, [r7, #3]
 80165f0:	6879      	ldr	r1, [r7, #4]
 80165f2:	4613      	mov	r3, r2
 80165f4:	00db      	lsls	r3, r3, #3
 80165f6:	1a9b      	subs	r3, r3, r2
 80165f8:	009b      	lsls	r3, r3, #2
 80165fa:	440b      	add	r3, r1
 80165fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8016600:	681a      	ldr	r2, [r3, #0]
 8016602:	78fb      	ldrb	r3, [r7, #3]
 8016604:	4619      	mov	r1, r3
 8016606:	f7fb fe1f 	bl	8012248 <USBD_LL_DataOutStage>
}
 801660a:	bf00      	nop
 801660c:	3708      	adds	r7, #8
 801660e:	46bd      	mov	sp, r7
 8016610:	bd80      	pop	{r7, pc}

08016612 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016612:	b580      	push	{r7, lr}
 8016614:	b082      	sub	sp, #8
 8016616:	af00      	add	r7, sp, #0
 8016618:	6078      	str	r0, [r7, #4]
 801661a:	460b      	mov	r3, r1
 801661c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8016624:	78fa      	ldrb	r2, [r7, #3]
 8016626:	6879      	ldr	r1, [r7, #4]
 8016628:	4613      	mov	r3, r2
 801662a:	00db      	lsls	r3, r3, #3
 801662c:	1a9b      	subs	r3, r3, r2
 801662e:	009b      	lsls	r3, r3, #2
 8016630:	440b      	add	r3, r1
 8016632:	3348      	adds	r3, #72	; 0x48
 8016634:	681a      	ldr	r2, [r3, #0]
 8016636:	78fb      	ldrb	r3, [r7, #3]
 8016638:	4619      	mov	r1, r3
 801663a:	f7fb fe68 	bl	801230e <USBD_LL_DataInStage>
}
 801663e:	bf00      	nop
 8016640:	3708      	adds	r7, #8
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}

08016646 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016646:	b580      	push	{r7, lr}
 8016648:	b082      	sub	sp, #8
 801664a:	af00      	add	r7, sp, #0
 801664c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801664e:	687b      	ldr	r3, [r7, #4]
 8016650:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016654:	4618      	mov	r0, r3
 8016656:	f7fb ff7c 	bl	8012552 <USBD_LL_SOF>
}
 801665a:	bf00      	nop
 801665c:	3708      	adds	r7, #8
 801665e:	46bd      	mov	sp, r7
 8016660:	bd80      	pop	{r7, pc}

08016662 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016662:	b580      	push	{r7, lr}
 8016664:	b084      	sub	sp, #16
 8016666:	af00      	add	r7, sp, #0
 8016668:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801666a:	2301      	movs	r3, #1
 801666c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	68db      	ldr	r3, [r3, #12]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d102      	bne.n	801667c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016676:	2300      	movs	r3, #0
 8016678:	73fb      	strb	r3, [r7, #15]
 801667a:	e008      	b.n	801668e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	68db      	ldr	r3, [r3, #12]
 8016680:	2b02      	cmp	r3, #2
 8016682:	d102      	bne.n	801668a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016684:	2301      	movs	r3, #1
 8016686:	73fb      	strb	r3, [r7, #15]
 8016688:	e001      	b.n	801668e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801668a:	f7eb fabb 	bl	8001c04 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016694:	7bfa      	ldrb	r2, [r7, #15]
 8016696:	4611      	mov	r1, r2
 8016698:	4618      	mov	r0, r3
 801669a:	f7fb ff1c 	bl	80124d6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80166a4:	4618      	mov	r0, r3
 80166a6:	f7fb fec8 	bl	801243a <USBD_LL_Reset>
}
 80166aa:	bf00      	nop
 80166ac:	3710      	adds	r7, #16
 80166ae:	46bd      	mov	sp, r7
 80166b0:	bd80      	pop	{r7, pc}
	...

080166b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80166b4:	b580      	push	{r7, lr}
 80166b6:	b082      	sub	sp, #8
 80166b8:	af00      	add	r7, sp, #0
 80166ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80166c2:	4618      	mov	r0, r3
 80166c4:	f7fb ff17 	bl	80124f6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	687a      	ldr	r2, [r7, #4]
 80166d4:	6812      	ldr	r2, [r2, #0]
 80166d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80166da:	f043 0301 	orr.w	r3, r3, #1
 80166de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	6a1b      	ldr	r3, [r3, #32]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d005      	beq.n	80166f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80166e8:	4b04      	ldr	r3, [pc, #16]	; (80166fc <HAL_PCD_SuspendCallback+0x48>)
 80166ea:	691b      	ldr	r3, [r3, #16]
 80166ec:	4a03      	ldr	r2, [pc, #12]	; (80166fc <HAL_PCD_SuspendCallback+0x48>)
 80166ee:	f043 0306 	orr.w	r3, r3, #6
 80166f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80166f4:	bf00      	nop
 80166f6:	3708      	adds	r7, #8
 80166f8:	46bd      	mov	sp, r7
 80166fa:	bd80      	pop	{r7, pc}
 80166fc:	e000ed00 	.word	0xe000ed00

08016700 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016700:	b580      	push	{r7, lr}
 8016702:	b082      	sub	sp, #8
 8016704:	af00      	add	r7, sp, #0
 8016706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801670e:	4618      	mov	r0, r3
 8016710:	f7fb ff07 	bl	8012522 <USBD_LL_Resume>
}
 8016714:	bf00      	nop
 8016716:	3708      	adds	r7, #8
 8016718:	46bd      	mov	sp, r7
 801671a:	bd80      	pop	{r7, pc}

0801671c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b082      	sub	sp, #8
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	460b      	mov	r3, r1
 8016726:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801672e:	78fa      	ldrb	r2, [r7, #3]
 8016730:	4611      	mov	r1, r2
 8016732:	4618      	mov	r0, r3
 8016734:	f7fb ff55 	bl	80125e2 <USBD_LL_IsoOUTIncomplete>
}
 8016738:	bf00      	nop
 801673a:	3708      	adds	r7, #8
 801673c:	46bd      	mov	sp, r7
 801673e:	bd80      	pop	{r7, pc}

08016740 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016740:	b580      	push	{r7, lr}
 8016742:	b082      	sub	sp, #8
 8016744:	af00      	add	r7, sp, #0
 8016746:	6078      	str	r0, [r7, #4]
 8016748:	460b      	mov	r3, r1
 801674a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016752:	78fa      	ldrb	r2, [r7, #3]
 8016754:	4611      	mov	r1, r2
 8016756:	4618      	mov	r0, r3
 8016758:	f7fb ff1d 	bl	8012596 <USBD_LL_IsoINIncomplete>
}
 801675c:	bf00      	nop
 801675e:	3708      	adds	r7, #8
 8016760:	46bd      	mov	sp, r7
 8016762:	bd80      	pop	{r7, pc}

08016764 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016764:	b580      	push	{r7, lr}
 8016766:	b082      	sub	sp, #8
 8016768:	af00      	add	r7, sp, #0
 801676a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016772:	4618      	mov	r0, r3
 8016774:	f7fb ff5b 	bl	801262e <USBD_LL_DevConnected>
}
 8016778:	bf00      	nop
 801677a:	3708      	adds	r7, #8
 801677c:	46bd      	mov	sp, r7
 801677e:	bd80      	pop	{r7, pc}

08016780 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016780:	b580      	push	{r7, lr}
 8016782:	b082      	sub	sp, #8
 8016784:	af00      	add	r7, sp, #0
 8016786:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801678e:	4618      	mov	r0, r3
 8016790:	f7fb ff58 	bl	8012644 <USBD_LL_DevDisconnected>
}
 8016794:	bf00      	nop
 8016796:	3708      	adds	r7, #8
 8016798:	46bd      	mov	sp, r7
 801679a:	bd80      	pop	{r7, pc}

0801679c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801679c:	b580      	push	{r7, lr}
 801679e:	b082      	sub	sp, #8
 80167a0:	af00      	add	r7, sp, #0
 80167a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	781b      	ldrb	r3, [r3, #0]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d13c      	bne.n	8016826 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80167ac:	4a20      	ldr	r2, [pc, #128]	; (8016830 <USBD_LL_Init+0x94>)
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	4a1e      	ldr	r2, [pc, #120]	; (8016830 <USBD_LL_Init+0x94>)
 80167b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80167bc:	4b1c      	ldr	r3, [pc, #112]	; (8016830 <USBD_LL_Init+0x94>)
 80167be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80167c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80167c4:	4b1a      	ldr	r3, [pc, #104]	; (8016830 <USBD_LL_Init+0x94>)
 80167c6:	2206      	movs	r2, #6
 80167c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80167ca:	4b19      	ldr	r3, [pc, #100]	; (8016830 <USBD_LL_Init+0x94>)
 80167cc:	2202      	movs	r2, #2
 80167ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80167d0:	4b17      	ldr	r3, [pc, #92]	; (8016830 <USBD_LL_Init+0x94>)
 80167d2:	2200      	movs	r2, #0
 80167d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80167d6:	4b16      	ldr	r3, [pc, #88]	; (8016830 <USBD_LL_Init+0x94>)
 80167d8:	2202      	movs	r2, #2
 80167da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80167dc:	4b14      	ldr	r3, [pc, #80]	; (8016830 <USBD_LL_Init+0x94>)
 80167de:	2200      	movs	r2, #0
 80167e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80167e2:	4b13      	ldr	r3, [pc, #76]	; (8016830 <USBD_LL_Init+0x94>)
 80167e4:	2200      	movs	r2, #0
 80167e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80167e8:	4b11      	ldr	r3, [pc, #68]	; (8016830 <USBD_LL_Init+0x94>)
 80167ea:	2200      	movs	r2, #0
 80167ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80167ee:	4b10      	ldr	r3, [pc, #64]	; (8016830 <USBD_LL_Init+0x94>)
 80167f0:	2201      	movs	r2, #1
 80167f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80167f4:	4b0e      	ldr	r3, [pc, #56]	; (8016830 <USBD_LL_Init+0x94>)
 80167f6:	2200      	movs	r2, #0
 80167f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80167fa:	480d      	ldr	r0, [pc, #52]	; (8016830 <USBD_LL_Init+0x94>)
 80167fc:	f7f3 f833 	bl	8009866 <HAL_PCD_Init>
 8016800:	4603      	mov	r3, r0
 8016802:	2b00      	cmp	r3, #0
 8016804:	d001      	beq.n	801680a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016806:	f7eb f9fd 	bl	8001c04 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801680a:	2180      	movs	r1, #128	; 0x80
 801680c:	4808      	ldr	r0, [pc, #32]	; (8016830 <USBD_LL_Init+0x94>)
 801680e:	f7f4 f9f2 	bl	800abf6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016812:	2240      	movs	r2, #64	; 0x40
 8016814:	2100      	movs	r1, #0
 8016816:	4806      	ldr	r0, [pc, #24]	; (8016830 <USBD_LL_Init+0x94>)
 8016818:	f7f4 f9a6 	bl	800ab68 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801681c:	2280      	movs	r2, #128	; 0x80
 801681e:	2101      	movs	r1, #1
 8016820:	4803      	ldr	r0, [pc, #12]	; (8016830 <USBD_LL_Init+0x94>)
 8016822:	f7f4 f9a1 	bl	800ab68 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016826:	2300      	movs	r3, #0
}
 8016828:	4618      	mov	r0, r3
 801682a:	3708      	adds	r7, #8
 801682c:	46bd      	mov	sp, r7
 801682e:	bd80      	pop	{r7, pc}
 8016830:	200053d0 	.word	0x200053d0

08016834 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016834:	b580      	push	{r7, lr}
 8016836:	b084      	sub	sp, #16
 8016838:	af00      	add	r7, sp, #0
 801683a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801683c:	2300      	movs	r3, #0
 801683e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016840:	2300      	movs	r3, #0
 8016842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801684a:	4618      	mov	r0, r3
 801684c:	f7f3 f92f 	bl	8009aae <HAL_PCD_Start>
 8016850:	4603      	mov	r3, r0
 8016852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016854:	7bfb      	ldrb	r3, [r7, #15]
 8016856:	4618      	mov	r0, r3
 8016858:	f000 f9b0 	bl	8016bbc <USBD_Get_USB_Status>
 801685c:	4603      	mov	r3, r0
 801685e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016860:	7bbb      	ldrb	r3, [r7, #14]
}
 8016862:	4618      	mov	r0, r3
 8016864:	3710      	adds	r7, #16
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}

0801686a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801686a:	b580      	push	{r7, lr}
 801686c:	b084      	sub	sp, #16
 801686e:	af00      	add	r7, sp, #0
 8016870:	6078      	str	r0, [r7, #4]
 8016872:	4608      	mov	r0, r1
 8016874:	4611      	mov	r1, r2
 8016876:	461a      	mov	r2, r3
 8016878:	4603      	mov	r3, r0
 801687a:	70fb      	strb	r3, [r7, #3]
 801687c:	460b      	mov	r3, r1
 801687e:	70bb      	strb	r3, [r7, #2]
 8016880:	4613      	mov	r3, r2
 8016882:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016884:	2300      	movs	r3, #0
 8016886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016888:	2300      	movs	r3, #0
 801688a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016892:	78bb      	ldrb	r3, [r7, #2]
 8016894:	883a      	ldrh	r2, [r7, #0]
 8016896:	78f9      	ldrb	r1, [r7, #3]
 8016898:	f7f3 fd40 	bl	800a31c <HAL_PCD_EP_Open>
 801689c:	4603      	mov	r3, r0
 801689e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168a0:	7bfb      	ldrb	r3, [r7, #15]
 80168a2:	4618      	mov	r0, r3
 80168a4:	f000 f98a 	bl	8016bbc <USBD_Get_USB_Status>
 80168a8:	4603      	mov	r3, r0
 80168aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80168ae:	4618      	mov	r0, r3
 80168b0:	3710      	adds	r7, #16
 80168b2:	46bd      	mov	sp, r7
 80168b4:	bd80      	pop	{r7, pc}

080168b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168b6:	b580      	push	{r7, lr}
 80168b8:	b084      	sub	sp, #16
 80168ba:	af00      	add	r7, sp, #0
 80168bc:	6078      	str	r0, [r7, #4]
 80168be:	460b      	mov	r3, r1
 80168c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80168c2:	2300      	movs	r3, #0
 80168c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80168c6:	2300      	movs	r3, #0
 80168c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80168d0:	78fa      	ldrb	r2, [r7, #3]
 80168d2:	4611      	mov	r1, r2
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7f3 fd89 	bl	800a3ec <HAL_PCD_EP_Close>
 80168da:	4603      	mov	r3, r0
 80168dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80168de:	7bfb      	ldrb	r3, [r7, #15]
 80168e0:	4618      	mov	r0, r3
 80168e2:	f000 f96b 	bl	8016bbc <USBD_Get_USB_Status>
 80168e6:	4603      	mov	r3, r0
 80168e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80168ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80168ec:	4618      	mov	r0, r3
 80168ee:	3710      	adds	r7, #16
 80168f0:	46bd      	mov	sp, r7
 80168f2:	bd80      	pop	{r7, pc}

080168f4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80168f4:	b580      	push	{r7, lr}
 80168f6:	b084      	sub	sp, #16
 80168f8:	af00      	add	r7, sp, #0
 80168fa:	6078      	str	r0, [r7, #4]
 80168fc:	460b      	mov	r3, r1
 80168fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016900:	2300      	movs	r3, #0
 8016902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016904:	2300      	movs	r3, #0
 8016906:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801690e:	78fa      	ldrb	r2, [r7, #3]
 8016910:	4611      	mov	r1, r2
 8016912:	4618      	mov	r0, r3
 8016914:	f7f3 ff1b 	bl	800a74e <HAL_PCD_EP_Flush>
 8016918:	4603      	mov	r3, r0
 801691a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801691c:	7bfb      	ldrb	r3, [r7, #15]
 801691e:	4618      	mov	r0, r3
 8016920:	f000 f94c 	bl	8016bbc <USBD_Get_USB_Status>
 8016924:	4603      	mov	r3, r0
 8016926:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016928:	7bbb      	ldrb	r3, [r7, #14]
}
 801692a:	4618      	mov	r0, r3
 801692c:	3710      	adds	r7, #16
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}

08016932 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016932:	b580      	push	{r7, lr}
 8016934:	b084      	sub	sp, #16
 8016936:	af00      	add	r7, sp, #0
 8016938:	6078      	str	r0, [r7, #4]
 801693a:	460b      	mov	r3, r1
 801693c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801693e:	2300      	movs	r3, #0
 8016940:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016942:	2300      	movs	r3, #0
 8016944:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801694c:	78fa      	ldrb	r2, [r7, #3]
 801694e:	4611      	mov	r1, r2
 8016950:	4618      	mov	r0, r3
 8016952:	f7f3 fe42 	bl	800a5da <HAL_PCD_EP_SetStall>
 8016956:	4603      	mov	r3, r0
 8016958:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801695a:	7bfb      	ldrb	r3, [r7, #15]
 801695c:	4618      	mov	r0, r3
 801695e:	f000 f92d 	bl	8016bbc <USBD_Get_USB_Status>
 8016962:	4603      	mov	r3, r0
 8016964:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016966:	7bbb      	ldrb	r3, [r7, #14]
}
 8016968:	4618      	mov	r0, r3
 801696a:	3710      	adds	r7, #16
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}

08016970 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016970:	b580      	push	{r7, lr}
 8016972:	b084      	sub	sp, #16
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
 8016978:	460b      	mov	r3, r1
 801697a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801697c:	2300      	movs	r3, #0
 801697e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016980:	2300      	movs	r3, #0
 8016982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801698a:	78fa      	ldrb	r2, [r7, #3]
 801698c:	4611      	mov	r1, r2
 801698e:	4618      	mov	r0, r3
 8016990:	f7f3 fe87 	bl	800a6a2 <HAL_PCD_EP_ClrStall>
 8016994:	4603      	mov	r3, r0
 8016996:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016998:	7bfb      	ldrb	r3, [r7, #15]
 801699a:	4618      	mov	r0, r3
 801699c:	f000 f90e 	bl	8016bbc <USBD_Get_USB_Status>
 80169a0:	4603      	mov	r3, r0
 80169a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80169a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80169a6:	4618      	mov	r0, r3
 80169a8:	3710      	adds	r7, #16
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}

080169ae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80169ae:	b480      	push	{r7}
 80169b0:	b085      	sub	sp, #20
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
 80169b6:	460b      	mov	r3, r1
 80169b8:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80169ba:	687b      	ldr	r3, [r7, #4]
 80169bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80169c0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80169c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	da0b      	bge.n	80169e2 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80169ca:	78fb      	ldrb	r3, [r7, #3]
 80169cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80169d0:	68f9      	ldr	r1, [r7, #12]
 80169d2:	4613      	mov	r3, r2
 80169d4:	00db      	lsls	r3, r3, #3
 80169d6:	1a9b      	subs	r3, r3, r2
 80169d8:	009b      	lsls	r3, r3, #2
 80169da:	440b      	add	r3, r1
 80169dc:	333e      	adds	r3, #62	; 0x3e
 80169de:	781b      	ldrb	r3, [r3, #0]
 80169e0:	e00b      	b.n	80169fa <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80169e2:	78fb      	ldrb	r3, [r7, #3]
 80169e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80169e8:	68f9      	ldr	r1, [r7, #12]
 80169ea:	4613      	mov	r3, r2
 80169ec:	00db      	lsls	r3, r3, #3
 80169ee:	1a9b      	subs	r3, r3, r2
 80169f0:	009b      	lsls	r3, r3, #2
 80169f2:	440b      	add	r3, r1
 80169f4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80169f8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80169fa:	4618      	mov	r0, r3
 80169fc:	3714      	adds	r7, #20
 80169fe:	46bd      	mov	sp, r7
 8016a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a04:	4770      	bx	lr

08016a06 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016a06:	b580      	push	{r7, lr}
 8016a08:	b084      	sub	sp, #16
 8016a0a:	af00      	add	r7, sp, #0
 8016a0c:	6078      	str	r0, [r7, #4]
 8016a0e:	460b      	mov	r3, r1
 8016a10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a12:	2300      	movs	r3, #0
 8016a14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a16:	2300      	movs	r3, #0
 8016a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016a20:	78fa      	ldrb	r2, [r7, #3]
 8016a22:	4611      	mov	r1, r2
 8016a24:	4618      	mov	r0, r3
 8016a26:	f7f3 fc54 	bl	800a2d2 <HAL_PCD_SetAddress>
 8016a2a:	4603      	mov	r3, r0
 8016a2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a2e:	7bfb      	ldrb	r3, [r7, #15]
 8016a30:	4618      	mov	r0, r3
 8016a32:	f000 f8c3 	bl	8016bbc <USBD_Get_USB_Status>
 8016a36:	4603      	mov	r3, r0
 8016a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3710      	adds	r7, #16
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}

08016a44 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b086      	sub	sp, #24
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	607a      	str	r2, [r7, #4]
 8016a4e:	603b      	str	r3, [r7, #0]
 8016a50:	460b      	mov	r3, r1
 8016a52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a54:	2300      	movs	r3, #0
 8016a56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a58:	2300      	movs	r3, #0
 8016a5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016a62:	7af9      	ldrb	r1, [r7, #11]
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	687a      	ldr	r2, [r7, #4]
 8016a68:	f7f3 fd6d 	bl	800a546 <HAL_PCD_EP_Transmit>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016a70:	7dfb      	ldrb	r3, [r7, #23]
 8016a72:	4618      	mov	r0, r3
 8016a74:	f000 f8a2 	bl	8016bbc <USBD_Get_USB_Status>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016a7c:	7dbb      	ldrb	r3, [r7, #22]
}
 8016a7e:	4618      	mov	r0, r3
 8016a80:	3718      	adds	r7, #24
 8016a82:	46bd      	mov	sp, r7
 8016a84:	bd80      	pop	{r7, pc}

08016a86 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016a86:	b580      	push	{r7, lr}
 8016a88:	b086      	sub	sp, #24
 8016a8a:	af00      	add	r7, sp, #0
 8016a8c:	60f8      	str	r0, [r7, #12]
 8016a8e:	607a      	str	r2, [r7, #4]
 8016a90:	603b      	str	r3, [r7, #0]
 8016a92:	460b      	mov	r3, r1
 8016a94:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016a96:	2300      	movs	r3, #0
 8016a98:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016a9e:	68fb      	ldr	r3, [r7, #12]
 8016aa0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016aa4:	7af9      	ldrb	r1, [r7, #11]
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	687a      	ldr	r2, [r7, #4]
 8016aaa:	f7f3 fce9 	bl	800a480 <HAL_PCD_EP_Receive>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ab2:	7dfb      	ldrb	r3, [r7, #23]
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	f000 f881 	bl	8016bbc <USBD_Get_USB_Status>
 8016aba:	4603      	mov	r3, r0
 8016abc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016abe:	7dbb      	ldrb	r3, [r7, #22]
}
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	3718      	adds	r7, #24
 8016ac4:	46bd      	mov	sp, r7
 8016ac6:	bd80      	pop	{r7, pc}

08016ac8 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016ac8:	b580      	push	{r7, lr}
 8016aca:	b082      	sub	sp, #8
 8016acc:	af00      	add	r7, sp, #0
 8016ace:	6078      	str	r0, [r7, #4]
 8016ad0:	460b      	mov	r3, r1
 8016ad2:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016ada:	78fa      	ldrb	r2, [r7, #3]
 8016adc:	4611      	mov	r1, r2
 8016ade:	4618      	mov	r0, r3
 8016ae0:	f7f3 fd19 	bl	800a516 <HAL_PCD_EP_GetRxCount>
 8016ae4:	4603      	mov	r3, r0
}
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3708      	adds	r7, #8
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}
	...

08016af0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b082      	sub	sp, #8
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
 8016af8:	460b      	mov	r3, r1
 8016afa:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8016afc:	78fb      	ldrb	r3, [r7, #3]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d002      	beq.n	8016b08 <HAL_PCDEx_LPM_Callback+0x18>
 8016b02:	2b01      	cmp	r3, #1
 8016b04:	d01f      	beq.n	8016b46 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8016b06:	e03b      	b.n	8016b80 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	6a1b      	ldr	r3, [r3, #32]
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d007      	beq.n	8016b20 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8016b10:	f7ea fcb8 	bl	8001484 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b14:	4b1c      	ldr	r3, [pc, #112]	; (8016b88 <HAL_PCDEx_LPM_Callback+0x98>)
 8016b16:	691b      	ldr	r3, [r3, #16]
 8016b18:	4a1b      	ldr	r2, [pc, #108]	; (8016b88 <HAL_PCDEx_LPM_Callback+0x98>)
 8016b1a:	f023 0306 	bic.w	r3, r3, #6
 8016b1e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	681b      	ldr	r3, [r3, #0]
 8016b24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	687a      	ldr	r2, [r7, #4]
 8016b2c:	6812      	ldr	r2, [r2, #0]
 8016b2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b32:	f023 0301 	bic.w	r3, r3, #1
 8016b36:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b3e:	4618      	mov	r0, r3
 8016b40:	f7fb fcef 	bl	8012522 <USBD_LL_Resume>
    break;
 8016b44:	e01c      	b.n	8016b80 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	687a      	ldr	r2, [r7, #4]
 8016b52:	6812      	ldr	r2, [r2, #0]
 8016b54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016b58:	f043 0301 	orr.w	r3, r3, #1
 8016b5c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016b64:	4618      	mov	r0, r3
 8016b66:	f7fb fcc6 	bl	80124f6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	6a1b      	ldr	r3, [r3, #32]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d005      	beq.n	8016b7e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016b72:	4b05      	ldr	r3, [pc, #20]	; (8016b88 <HAL_PCDEx_LPM_Callback+0x98>)
 8016b74:	691b      	ldr	r3, [r3, #16]
 8016b76:	4a04      	ldr	r2, [pc, #16]	; (8016b88 <HAL_PCDEx_LPM_Callback+0x98>)
 8016b78:	f043 0306 	orr.w	r3, r3, #6
 8016b7c:	6113      	str	r3, [r2, #16]
    break;
 8016b7e:	bf00      	nop
}
 8016b80:	bf00      	nop
 8016b82:	3708      	adds	r7, #8
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}
 8016b88:	e000ed00 	.word	0xe000ed00

08016b8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016b8c:	b480      	push	{r7}
 8016b8e:	b083      	sub	sp, #12
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016b94:	4b03      	ldr	r3, [pc, #12]	; (8016ba4 <USBD_static_malloc+0x18>)
}
 8016b96:	4618      	mov	r0, r3
 8016b98:	370c      	adds	r7, #12
 8016b9a:	46bd      	mov	sp, r7
 8016b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba0:	4770      	bx	lr
 8016ba2:	bf00      	nop
 8016ba4:	20000418 	.word	0x20000418

08016ba8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016ba8:	b480      	push	{r7}
 8016baa:	b083      	sub	sp, #12
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]

}
 8016bb0:	bf00      	nop
 8016bb2:	370c      	adds	r7, #12
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bba:	4770      	bx	lr

08016bbc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016bbc:	b480      	push	{r7}
 8016bbe:	b085      	sub	sp, #20
 8016bc0:	af00      	add	r7, sp, #0
 8016bc2:	4603      	mov	r3, r0
 8016bc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016bca:	79fb      	ldrb	r3, [r7, #7]
 8016bcc:	2b03      	cmp	r3, #3
 8016bce:	d817      	bhi.n	8016c00 <USBD_Get_USB_Status+0x44>
 8016bd0:	a201      	add	r2, pc, #4	; (adr r2, 8016bd8 <USBD_Get_USB_Status+0x1c>)
 8016bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016bd6:	bf00      	nop
 8016bd8:	08016be9 	.word	0x08016be9
 8016bdc:	08016bef 	.word	0x08016bef
 8016be0:	08016bf5 	.word	0x08016bf5
 8016be4:	08016bfb 	.word	0x08016bfb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016be8:	2300      	movs	r3, #0
 8016bea:	73fb      	strb	r3, [r7, #15]
    break;
 8016bec:	e00b      	b.n	8016c06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016bee:	2303      	movs	r3, #3
 8016bf0:	73fb      	strb	r3, [r7, #15]
    break;
 8016bf2:	e008      	b.n	8016c06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016bf4:	2301      	movs	r3, #1
 8016bf6:	73fb      	strb	r3, [r7, #15]
    break;
 8016bf8:	e005      	b.n	8016c06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016bfa:	2303      	movs	r3, #3
 8016bfc:	73fb      	strb	r3, [r7, #15]
    break;
 8016bfe:	e002      	b.n	8016c06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016c00:	2303      	movs	r3, #3
 8016c02:	73fb      	strb	r3, [r7, #15]
    break;
 8016c04:	bf00      	nop
  }
  return usb_status;
 8016c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c08:	4618      	mov	r0, r3
 8016c0a:	3714      	adds	r7, #20
 8016c0c:	46bd      	mov	sp, r7
 8016c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c12:	4770      	bx	lr

08016c14 <__errno>:
 8016c14:	4b01      	ldr	r3, [pc, #4]	; (8016c1c <__errno+0x8>)
 8016c16:	6818      	ldr	r0, [r3, #0]
 8016c18:	4770      	bx	lr
 8016c1a:	bf00      	nop
 8016c1c:	20000174 	.word	0x20000174

08016c20 <__libc_init_array>:
 8016c20:	b570      	push	{r4, r5, r6, lr}
 8016c22:	4d0d      	ldr	r5, [pc, #52]	; (8016c58 <__libc_init_array+0x38>)
 8016c24:	4c0d      	ldr	r4, [pc, #52]	; (8016c5c <__libc_init_array+0x3c>)
 8016c26:	1b64      	subs	r4, r4, r5
 8016c28:	10a4      	asrs	r4, r4, #2
 8016c2a:	2600      	movs	r6, #0
 8016c2c:	42a6      	cmp	r6, r4
 8016c2e:	d109      	bne.n	8016c44 <__libc_init_array+0x24>
 8016c30:	4d0b      	ldr	r5, [pc, #44]	; (8016c60 <__libc_init_array+0x40>)
 8016c32:	4c0c      	ldr	r4, [pc, #48]	; (8016c64 <__libc_init_array+0x44>)
 8016c34:	f000 fc4e 	bl	80174d4 <_init>
 8016c38:	1b64      	subs	r4, r4, r5
 8016c3a:	10a4      	asrs	r4, r4, #2
 8016c3c:	2600      	movs	r6, #0
 8016c3e:	42a6      	cmp	r6, r4
 8016c40:	d105      	bne.n	8016c4e <__libc_init_array+0x2e>
 8016c42:	bd70      	pop	{r4, r5, r6, pc}
 8016c44:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c48:	4798      	blx	r3
 8016c4a:	3601      	adds	r6, #1
 8016c4c:	e7ee      	b.n	8016c2c <__libc_init_array+0xc>
 8016c4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c52:	4798      	blx	r3
 8016c54:	3601      	adds	r6, #1
 8016c56:	e7f2      	b.n	8016c3e <__libc_init_array+0x1e>
 8016c58:	08017a80 	.word	0x08017a80
 8016c5c:	08017a80 	.word	0x08017a80
 8016c60:	08017a80 	.word	0x08017a80
 8016c64:	08017a84 	.word	0x08017a84

08016c68 <memcpy>:
 8016c68:	440a      	add	r2, r1
 8016c6a:	4291      	cmp	r1, r2
 8016c6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8016c70:	d100      	bne.n	8016c74 <memcpy+0xc>
 8016c72:	4770      	bx	lr
 8016c74:	b510      	push	{r4, lr}
 8016c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016c7e:	4291      	cmp	r1, r2
 8016c80:	d1f9      	bne.n	8016c76 <memcpy+0xe>
 8016c82:	bd10      	pop	{r4, pc}

08016c84 <memset>:
 8016c84:	4402      	add	r2, r0
 8016c86:	4603      	mov	r3, r0
 8016c88:	4293      	cmp	r3, r2
 8016c8a:	d100      	bne.n	8016c8e <memset+0xa>
 8016c8c:	4770      	bx	lr
 8016c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8016c92:	e7f9      	b.n	8016c88 <memset+0x4>

08016c94 <siprintf>:
 8016c94:	b40e      	push	{r1, r2, r3}
 8016c96:	b500      	push	{lr}
 8016c98:	b09c      	sub	sp, #112	; 0x70
 8016c9a:	ab1d      	add	r3, sp, #116	; 0x74
 8016c9c:	9002      	str	r0, [sp, #8]
 8016c9e:	9006      	str	r0, [sp, #24]
 8016ca0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ca4:	4809      	ldr	r0, [pc, #36]	; (8016ccc <siprintf+0x38>)
 8016ca6:	9107      	str	r1, [sp, #28]
 8016ca8:	9104      	str	r1, [sp, #16]
 8016caa:	4909      	ldr	r1, [pc, #36]	; (8016cd0 <siprintf+0x3c>)
 8016cac:	f853 2b04 	ldr.w	r2, [r3], #4
 8016cb0:	9105      	str	r1, [sp, #20]
 8016cb2:	6800      	ldr	r0, [r0, #0]
 8016cb4:	9301      	str	r3, [sp, #4]
 8016cb6:	a902      	add	r1, sp, #8
 8016cb8:	f000 f868 	bl	8016d8c <_svfiprintf_r>
 8016cbc:	9b02      	ldr	r3, [sp, #8]
 8016cbe:	2200      	movs	r2, #0
 8016cc0:	701a      	strb	r2, [r3, #0]
 8016cc2:	b01c      	add	sp, #112	; 0x70
 8016cc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8016cc8:	b003      	add	sp, #12
 8016cca:	4770      	bx	lr
 8016ccc:	20000174 	.word	0x20000174
 8016cd0:	ffff0208 	.word	0xffff0208

08016cd4 <__ssputs_r>:
 8016cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016cd8:	688e      	ldr	r6, [r1, #8]
 8016cda:	429e      	cmp	r6, r3
 8016cdc:	4682      	mov	sl, r0
 8016cde:	460c      	mov	r4, r1
 8016ce0:	4690      	mov	r8, r2
 8016ce2:	461f      	mov	r7, r3
 8016ce4:	d838      	bhi.n	8016d58 <__ssputs_r+0x84>
 8016ce6:	898a      	ldrh	r2, [r1, #12]
 8016ce8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016cec:	d032      	beq.n	8016d54 <__ssputs_r+0x80>
 8016cee:	6825      	ldr	r5, [r4, #0]
 8016cf0:	6909      	ldr	r1, [r1, #16]
 8016cf2:	eba5 0901 	sub.w	r9, r5, r1
 8016cf6:	6965      	ldr	r5, [r4, #20]
 8016cf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016cfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016d00:	3301      	adds	r3, #1
 8016d02:	444b      	add	r3, r9
 8016d04:	106d      	asrs	r5, r5, #1
 8016d06:	429d      	cmp	r5, r3
 8016d08:	bf38      	it	cc
 8016d0a:	461d      	movcc	r5, r3
 8016d0c:	0553      	lsls	r3, r2, #21
 8016d0e:	d531      	bpl.n	8016d74 <__ssputs_r+0xa0>
 8016d10:	4629      	mov	r1, r5
 8016d12:	f000 fb39 	bl	8017388 <_malloc_r>
 8016d16:	4606      	mov	r6, r0
 8016d18:	b950      	cbnz	r0, 8016d30 <__ssputs_r+0x5c>
 8016d1a:	230c      	movs	r3, #12
 8016d1c:	f8ca 3000 	str.w	r3, [sl]
 8016d20:	89a3      	ldrh	r3, [r4, #12]
 8016d22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016d26:	81a3      	strh	r3, [r4, #12]
 8016d28:	f04f 30ff 	mov.w	r0, #4294967295
 8016d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d30:	6921      	ldr	r1, [r4, #16]
 8016d32:	464a      	mov	r2, r9
 8016d34:	f7ff ff98 	bl	8016c68 <memcpy>
 8016d38:	89a3      	ldrh	r3, [r4, #12]
 8016d3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016d42:	81a3      	strh	r3, [r4, #12]
 8016d44:	6126      	str	r6, [r4, #16]
 8016d46:	6165      	str	r5, [r4, #20]
 8016d48:	444e      	add	r6, r9
 8016d4a:	eba5 0509 	sub.w	r5, r5, r9
 8016d4e:	6026      	str	r6, [r4, #0]
 8016d50:	60a5      	str	r5, [r4, #8]
 8016d52:	463e      	mov	r6, r7
 8016d54:	42be      	cmp	r6, r7
 8016d56:	d900      	bls.n	8016d5a <__ssputs_r+0x86>
 8016d58:	463e      	mov	r6, r7
 8016d5a:	4632      	mov	r2, r6
 8016d5c:	6820      	ldr	r0, [r4, #0]
 8016d5e:	4641      	mov	r1, r8
 8016d60:	f000 faa8 	bl	80172b4 <memmove>
 8016d64:	68a3      	ldr	r3, [r4, #8]
 8016d66:	6822      	ldr	r2, [r4, #0]
 8016d68:	1b9b      	subs	r3, r3, r6
 8016d6a:	4432      	add	r2, r6
 8016d6c:	60a3      	str	r3, [r4, #8]
 8016d6e:	6022      	str	r2, [r4, #0]
 8016d70:	2000      	movs	r0, #0
 8016d72:	e7db      	b.n	8016d2c <__ssputs_r+0x58>
 8016d74:	462a      	mov	r2, r5
 8016d76:	f000 fb61 	bl	801743c <_realloc_r>
 8016d7a:	4606      	mov	r6, r0
 8016d7c:	2800      	cmp	r0, #0
 8016d7e:	d1e1      	bne.n	8016d44 <__ssputs_r+0x70>
 8016d80:	6921      	ldr	r1, [r4, #16]
 8016d82:	4650      	mov	r0, sl
 8016d84:	f000 fab0 	bl	80172e8 <_free_r>
 8016d88:	e7c7      	b.n	8016d1a <__ssputs_r+0x46>
	...

08016d8c <_svfiprintf_r>:
 8016d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d90:	4698      	mov	r8, r3
 8016d92:	898b      	ldrh	r3, [r1, #12]
 8016d94:	061b      	lsls	r3, r3, #24
 8016d96:	b09d      	sub	sp, #116	; 0x74
 8016d98:	4607      	mov	r7, r0
 8016d9a:	460d      	mov	r5, r1
 8016d9c:	4614      	mov	r4, r2
 8016d9e:	d50e      	bpl.n	8016dbe <_svfiprintf_r+0x32>
 8016da0:	690b      	ldr	r3, [r1, #16]
 8016da2:	b963      	cbnz	r3, 8016dbe <_svfiprintf_r+0x32>
 8016da4:	2140      	movs	r1, #64	; 0x40
 8016da6:	f000 faef 	bl	8017388 <_malloc_r>
 8016daa:	6028      	str	r0, [r5, #0]
 8016dac:	6128      	str	r0, [r5, #16]
 8016dae:	b920      	cbnz	r0, 8016dba <_svfiprintf_r+0x2e>
 8016db0:	230c      	movs	r3, #12
 8016db2:	603b      	str	r3, [r7, #0]
 8016db4:	f04f 30ff 	mov.w	r0, #4294967295
 8016db8:	e0d1      	b.n	8016f5e <_svfiprintf_r+0x1d2>
 8016dba:	2340      	movs	r3, #64	; 0x40
 8016dbc:	616b      	str	r3, [r5, #20]
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8016dc2:	2320      	movs	r3, #32
 8016dc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016dc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8016dcc:	2330      	movs	r3, #48	; 0x30
 8016dce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8016f78 <_svfiprintf_r+0x1ec>
 8016dd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016dd6:	f04f 0901 	mov.w	r9, #1
 8016dda:	4623      	mov	r3, r4
 8016ddc:	469a      	mov	sl, r3
 8016dde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016de2:	b10a      	cbz	r2, 8016de8 <_svfiprintf_r+0x5c>
 8016de4:	2a25      	cmp	r2, #37	; 0x25
 8016de6:	d1f9      	bne.n	8016ddc <_svfiprintf_r+0x50>
 8016de8:	ebba 0b04 	subs.w	fp, sl, r4
 8016dec:	d00b      	beq.n	8016e06 <_svfiprintf_r+0x7a>
 8016dee:	465b      	mov	r3, fp
 8016df0:	4622      	mov	r2, r4
 8016df2:	4629      	mov	r1, r5
 8016df4:	4638      	mov	r0, r7
 8016df6:	f7ff ff6d 	bl	8016cd4 <__ssputs_r>
 8016dfa:	3001      	adds	r0, #1
 8016dfc:	f000 80aa 	beq.w	8016f54 <_svfiprintf_r+0x1c8>
 8016e00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e02:	445a      	add	r2, fp
 8016e04:	9209      	str	r2, [sp, #36]	; 0x24
 8016e06:	f89a 3000 	ldrb.w	r3, [sl]
 8016e0a:	2b00      	cmp	r3, #0
 8016e0c:	f000 80a2 	beq.w	8016f54 <_svfiprintf_r+0x1c8>
 8016e10:	2300      	movs	r3, #0
 8016e12:	f04f 32ff 	mov.w	r2, #4294967295
 8016e16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e1a:	f10a 0a01 	add.w	sl, sl, #1
 8016e1e:	9304      	str	r3, [sp, #16]
 8016e20:	9307      	str	r3, [sp, #28]
 8016e22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016e26:	931a      	str	r3, [sp, #104]	; 0x68
 8016e28:	4654      	mov	r4, sl
 8016e2a:	2205      	movs	r2, #5
 8016e2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e30:	4851      	ldr	r0, [pc, #324]	; (8016f78 <_svfiprintf_r+0x1ec>)
 8016e32:	f7e9 f9ed 	bl	8000210 <memchr>
 8016e36:	9a04      	ldr	r2, [sp, #16]
 8016e38:	b9d8      	cbnz	r0, 8016e72 <_svfiprintf_r+0xe6>
 8016e3a:	06d0      	lsls	r0, r2, #27
 8016e3c:	bf44      	itt	mi
 8016e3e:	2320      	movmi	r3, #32
 8016e40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e44:	0711      	lsls	r1, r2, #28
 8016e46:	bf44      	itt	mi
 8016e48:	232b      	movmi	r3, #43	; 0x2b
 8016e4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016e4e:	f89a 3000 	ldrb.w	r3, [sl]
 8016e52:	2b2a      	cmp	r3, #42	; 0x2a
 8016e54:	d015      	beq.n	8016e82 <_svfiprintf_r+0xf6>
 8016e56:	9a07      	ldr	r2, [sp, #28]
 8016e58:	4654      	mov	r4, sl
 8016e5a:	2000      	movs	r0, #0
 8016e5c:	f04f 0c0a 	mov.w	ip, #10
 8016e60:	4621      	mov	r1, r4
 8016e62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016e66:	3b30      	subs	r3, #48	; 0x30
 8016e68:	2b09      	cmp	r3, #9
 8016e6a:	d94e      	bls.n	8016f0a <_svfiprintf_r+0x17e>
 8016e6c:	b1b0      	cbz	r0, 8016e9c <_svfiprintf_r+0x110>
 8016e6e:	9207      	str	r2, [sp, #28]
 8016e70:	e014      	b.n	8016e9c <_svfiprintf_r+0x110>
 8016e72:	eba0 0308 	sub.w	r3, r0, r8
 8016e76:	fa09 f303 	lsl.w	r3, r9, r3
 8016e7a:	4313      	orrs	r3, r2
 8016e7c:	9304      	str	r3, [sp, #16]
 8016e7e:	46a2      	mov	sl, r4
 8016e80:	e7d2      	b.n	8016e28 <_svfiprintf_r+0x9c>
 8016e82:	9b03      	ldr	r3, [sp, #12]
 8016e84:	1d19      	adds	r1, r3, #4
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	9103      	str	r1, [sp, #12]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	bfbb      	ittet	lt
 8016e8e:	425b      	neglt	r3, r3
 8016e90:	f042 0202 	orrlt.w	r2, r2, #2
 8016e94:	9307      	strge	r3, [sp, #28]
 8016e96:	9307      	strlt	r3, [sp, #28]
 8016e98:	bfb8      	it	lt
 8016e9a:	9204      	strlt	r2, [sp, #16]
 8016e9c:	7823      	ldrb	r3, [r4, #0]
 8016e9e:	2b2e      	cmp	r3, #46	; 0x2e
 8016ea0:	d10c      	bne.n	8016ebc <_svfiprintf_r+0x130>
 8016ea2:	7863      	ldrb	r3, [r4, #1]
 8016ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8016ea6:	d135      	bne.n	8016f14 <_svfiprintf_r+0x188>
 8016ea8:	9b03      	ldr	r3, [sp, #12]
 8016eaa:	1d1a      	adds	r2, r3, #4
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	9203      	str	r2, [sp, #12]
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	bfb8      	it	lt
 8016eb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8016eb8:	3402      	adds	r4, #2
 8016eba:	9305      	str	r3, [sp, #20]
 8016ebc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8016f88 <_svfiprintf_r+0x1fc>
 8016ec0:	7821      	ldrb	r1, [r4, #0]
 8016ec2:	2203      	movs	r2, #3
 8016ec4:	4650      	mov	r0, sl
 8016ec6:	f7e9 f9a3 	bl	8000210 <memchr>
 8016eca:	b140      	cbz	r0, 8016ede <_svfiprintf_r+0x152>
 8016ecc:	2340      	movs	r3, #64	; 0x40
 8016ece:	eba0 000a 	sub.w	r0, r0, sl
 8016ed2:	fa03 f000 	lsl.w	r0, r3, r0
 8016ed6:	9b04      	ldr	r3, [sp, #16]
 8016ed8:	4303      	orrs	r3, r0
 8016eda:	3401      	adds	r4, #1
 8016edc:	9304      	str	r3, [sp, #16]
 8016ede:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ee2:	4826      	ldr	r0, [pc, #152]	; (8016f7c <_svfiprintf_r+0x1f0>)
 8016ee4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016ee8:	2206      	movs	r2, #6
 8016eea:	f7e9 f991 	bl	8000210 <memchr>
 8016eee:	2800      	cmp	r0, #0
 8016ef0:	d038      	beq.n	8016f64 <_svfiprintf_r+0x1d8>
 8016ef2:	4b23      	ldr	r3, [pc, #140]	; (8016f80 <_svfiprintf_r+0x1f4>)
 8016ef4:	bb1b      	cbnz	r3, 8016f3e <_svfiprintf_r+0x1b2>
 8016ef6:	9b03      	ldr	r3, [sp, #12]
 8016ef8:	3307      	adds	r3, #7
 8016efa:	f023 0307 	bic.w	r3, r3, #7
 8016efe:	3308      	adds	r3, #8
 8016f00:	9303      	str	r3, [sp, #12]
 8016f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f04:	4433      	add	r3, r6
 8016f06:	9309      	str	r3, [sp, #36]	; 0x24
 8016f08:	e767      	b.n	8016dda <_svfiprintf_r+0x4e>
 8016f0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f0e:	460c      	mov	r4, r1
 8016f10:	2001      	movs	r0, #1
 8016f12:	e7a5      	b.n	8016e60 <_svfiprintf_r+0xd4>
 8016f14:	2300      	movs	r3, #0
 8016f16:	3401      	adds	r4, #1
 8016f18:	9305      	str	r3, [sp, #20]
 8016f1a:	4619      	mov	r1, r3
 8016f1c:	f04f 0c0a 	mov.w	ip, #10
 8016f20:	4620      	mov	r0, r4
 8016f22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016f26:	3a30      	subs	r2, #48	; 0x30
 8016f28:	2a09      	cmp	r2, #9
 8016f2a:	d903      	bls.n	8016f34 <_svfiprintf_r+0x1a8>
 8016f2c:	2b00      	cmp	r3, #0
 8016f2e:	d0c5      	beq.n	8016ebc <_svfiprintf_r+0x130>
 8016f30:	9105      	str	r1, [sp, #20]
 8016f32:	e7c3      	b.n	8016ebc <_svfiprintf_r+0x130>
 8016f34:	fb0c 2101 	mla	r1, ip, r1, r2
 8016f38:	4604      	mov	r4, r0
 8016f3a:	2301      	movs	r3, #1
 8016f3c:	e7f0      	b.n	8016f20 <_svfiprintf_r+0x194>
 8016f3e:	ab03      	add	r3, sp, #12
 8016f40:	9300      	str	r3, [sp, #0]
 8016f42:	462a      	mov	r2, r5
 8016f44:	4b0f      	ldr	r3, [pc, #60]	; (8016f84 <_svfiprintf_r+0x1f8>)
 8016f46:	a904      	add	r1, sp, #16
 8016f48:	4638      	mov	r0, r7
 8016f4a:	f3af 8000 	nop.w
 8016f4e:	1c42      	adds	r2, r0, #1
 8016f50:	4606      	mov	r6, r0
 8016f52:	d1d6      	bne.n	8016f02 <_svfiprintf_r+0x176>
 8016f54:	89ab      	ldrh	r3, [r5, #12]
 8016f56:	065b      	lsls	r3, r3, #25
 8016f58:	f53f af2c 	bmi.w	8016db4 <_svfiprintf_r+0x28>
 8016f5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016f5e:	b01d      	add	sp, #116	; 0x74
 8016f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f64:	ab03      	add	r3, sp, #12
 8016f66:	9300      	str	r3, [sp, #0]
 8016f68:	462a      	mov	r2, r5
 8016f6a:	4b06      	ldr	r3, [pc, #24]	; (8016f84 <_svfiprintf_r+0x1f8>)
 8016f6c:	a904      	add	r1, sp, #16
 8016f6e:	4638      	mov	r0, r7
 8016f70:	f000 f87a 	bl	8017068 <_printf_i>
 8016f74:	e7eb      	b.n	8016f4e <_svfiprintf_r+0x1c2>
 8016f76:	bf00      	nop
 8016f78:	08017a44 	.word	0x08017a44
 8016f7c:	08017a4e 	.word	0x08017a4e
 8016f80:	00000000 	.word	0x00000000
 8016f84:	08016cd5 	.word	0x08016cd5
 8016f88:	08017a4a 	.word	0x08017a4a

08016f8c <_printf_common>:
 8016f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016f90:	4616      	mov	r6, r2
 8016f92:	4699      	mov	r9, r3
 8016f94:	688a      	ldr	r2, [r1, #8]
 8016f96:	690b      	ldr	r3, [r1, #16]
 8016f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016f9c:	4293      	cmp	r3, r2
 8016f9e:	bfb8      	it	lt
 8016fa0:	4613      	movlt	r3, r2
 8016fa2:	6033      	str	r3, [r6, #0]
 8016fa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016fa8:	4607      	mov	r7, r0
 8016faa:	460c      	mov	r4, r1
 8016fac:	b10a      	cbz	r2, 8016fb2 <_printf_common+0x26>
 8016fae:	3301      	adds	r3, #1
 8016fb0:	6033      	str	r3, [r6, #0]
 8016fb2:	6823      	ldr	r3, [r4, #0]
 8016fb4:	0699      	lsls	r1, r3, #26
 8016fb6:	bf42      	ittt	mi
 8016fb8:	6833      	ldrmi	r3, [r6, #0]
 8016fba:	3302      	addmi	r3, #2
 8016fbc:	6033      	strmi	r3, [r6, #0]
 8016fbe:	6825      	ldr	r5, [r4, #0]
 8016fc0:	f015 0506 	ands.w	r5, r5, #6
 8016fc4:	d106      	bne.n	8016fd4 <_printf_common+0x48>
 8016fc6:	f104 0a19 	add.w	sl, r4, #25
 8016fca:	68e3      	ldr	r3, [r4, #12]
 8016fcc:	6832      	ldr	r2, [r6, #0]
 8016fce:	1a9b      	subs	r3, r3, r2
 8016fd0:	42ab      	cmp	r3, r5
 8016fd2:	dc26      	bgt.n	8017022 <_printf_common+0x96>
 8016fd4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016fd8:	1e13      	subs	r3, r2, #0
 8016fda:	6822      	ldr	r2, [r4, #0]
 8016fdc:	bf18      	it	ne
 8016fde:	2301      	movne	r3, #1
 8016fe0:	0692      	lsls	r2, r2, #26
 8016fe2:	d42b      	bmi.n	801703c <_printf_common+0xb0>
 8016fe4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016fe8:	4649      	mov	r1, r9
 8016fea:	4638      	mov	r0, r7
 8016fec:	47c0      	blx	r8
 8016fee:	3001      	adds	r0, #1
 8016ff0:	d01e      	beq.n	8017030 <_printf_common+0xa4>
 8016ff2:	6823      	ldr	r3, [r4, #0]
 8016ff4:	68e5      	ldr	r5, [r4, #12]
 8016ff6:	6832      	ldr	r2, [r6, #0]
 8016ff8:	f003 0306 	and.w	r3, r3, #6
 8016ffc:	2b04      	cmp	r3, #4
 8016ffe:	bf08      	it	eq
 8017000:	1aad      	subeq	r5, r5, r2
 8017002:	68a3      	ldr	r3, [r4, #8]
 8017004:	6922      	ldr	r2, [r4, #16]
 8017006:	bf0c      	ite	eq
 8017008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801700c:	2500      	movne	r5, #0
 801700e:	4293      	cmp	r3, r2
 8017010:	bfc4      	itt	gt
 8017012:	1a9b      	subgt	r3, r3, r2
 8017014:	18ed      	addgt	r5, r5, r3
 8017016:	2600      	movs	r6, #0
 8017018:	341a      	adds	r4, #26
 801701a:	42b5      	cmp	r5, r6
 801701c:	d11a      	bne.n	8017054 <_printf_common+0xc8>
 801701e:	2000      	movs	r0, #0
 8017020:	e008      	b.n	8017034 <_printf_common+0xa8>
 8017022:	2301      	movs	r3, #1
 8017024:	4652      	mov	r2, sl
 8017026:	4649      	mov	r1, r9
 8017028:	4638      	mov	r0, r7
 801702a:	47c0      	blx	r8
 801702c:	3001      	adds	r0, #1
 801702e:	d103      	bne.n	8017038 <_printf_common+0xac>
 8017030:	f04f 30ff 	mov.w	r0, #4294967295
 8017034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017038:	3501      	adds	r5, #1
 801703a:	e7c6      	b.n	8016fca <_printf_common+0x3e>
 801703c:	18e1      	adds	r1, r4, r3
 801703e:	1c5a      	adds	r2, r3, #1
 8017040:	2030      	movs	r0, #48	; 0x30
 8017042:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017046:	4422      	add	r2, r4
 8017048:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801704c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017050:	3302      	adds	r3, #2
 8017052:	e7c7      	b.n	8016fe4 <_printf_common+0x58>
 8017054:	2301      	movs	r3, #1
 8017056:	4622      	mov	r2, r4
 8017058:	4649      	mov	r1, r9
 801705a:	4638      	mov	r0, r7
 801705c:	47c0      	blx	r8
 801705e:	3001      	adds	r0, #1
 8017060:	d0e6      	beq.n	8017030 <_printf_common+0xa4>
 8017062:	3601      	adds	r6, #1
 8017064:	e7d9      	b.n	801701a <_printf_common+0x8e>
	...

08017068 <_printf_i>:
 8017068:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801706c:	460c      	mov	r4, r1
 801706e:	4691      	mov	r9, r2
 8017070:	7e27      	ldrb	r7, [r4, #24]
 8017072:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017074:	2f78      	cmp	r7, #120	; 0x78
 8017076:	4680      	mov	r8, r0
 8017078:	469a      	mov	sl, r3
 801707a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801707e:	d807      	bhi.n	8017090 <_printf_i+0x28>
 8017080:	2f62      	cmp	r7, #98	; 0x62
 8017082:	d80a      	bhi.n	801709a <_printf_i+0x32>
 8017084:	2f00      	cmp	r7, #0
 8017086:	f000 80d8 	beq.w	801723a <_printf_i+0x1d2>
 801708a:	2f58      	cmp	r7, #88	; 0x58
 801708c:	f000 80a3 	beq.w	80171d6 <_printf_i+0x16e>
 8017090:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017094:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017098:	e03a      	b.n	8017110 <_printf_i+0xa8>
 801709a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801709e:	2b15      	cmp	r3, #21
 80170a0:	d8f6      	bhi.n	8017090 <_printf_i+0x28>
 80170a2:	a001      	add	r0, pc, #4	; (adr r0, 80170a8 <_printf_i+0x40>)
 80170a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80170a8:	08017101 	.word	0x08017101
 80170ac:	08017115 	.word	0x08017115
 80170b0:	08017091 	.word	0x08017091
 80170b4:	08017091 	.word	0x08017091
 80170b8:	08017091 	.word	0x08017091
 80170bc:	08017091 	.word	0x08017091
 80170c0:	08017115 	.word	0x08017115
 80170c4:	08017091 	.word	0x08017091
 80170c8:	08017091 	.word	0x08017091
 80170cc:	08017091 	.word	0x08017091
 80170d0:	08017091 	.word	0x08017091
 80170d4:	08017221 	.word	0x08017221
 80170d8:	08017145 	.word	0x08017145
 80170dc:	08017203 	.word	0x08017203
 80170e0:	08017091 	.word	0x08017091
 80170e4:	08017091 	.word	0x08017091
 80170e8:	08017243 	.word	0x08017243
 80170ec:	08017091 	.word	0x08017091
 80170f0:	08017145 	.word	0x08017145
 80170f4:	08017091 	.word	0x08017091
 80170f8:	08017091 	.word	0x08017091
 80170fc:	0801720b 	.word	0x0801720b
 8017100:	680b      	ldr	r3, [r1, #0]
 8017102:	1d1a      	adds	r2, r3, #4
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	600a      	str	r2, [r1, #0]
 8017108:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801710c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017110:	2301      	movs	r3, #1
 8017112:	e0a3      	b.n	801725c <_printf_i+0x1f4>
 8017114:	6825      	ldr	r5, [r4, #0]
 8017116:	6808      	ldr	r0, [r1, #0]
 8017118:	062e      	lsls	r6, r5, #24
 801711a:	f100 0304 	add.w	r3, r0, #4
 801711e:	d50a      	bpl.n	8017136 <_printf_i+0xce>
 8017120:	6805      	ldr	r5, [r0, #0]
 8017122:	600b      	str	r3, [r1, #0]
 8017124:	2d00      	cmp	r5, #0
 8017126:	da03      	bge.n	8017130 <_printf_i+0xc8>
 8017128:	232d      	movs	r3, #45	; 0x2d
 801712a:	426d      	negs	r5, r5
 801712c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017130:	485e      	ldr	r0, [pc, #376]	; (80172ac <_printf_i+0x244>)
 8017132:	230a      	movs	r3, #10
 8017134:	e019      	b.n	801716a <_printf_i+0x102>
 8017136:	f015 0f40 	tst.w	r5, #64	; 0x40
 801713a:	6805      	ldr	r5, [r0, #0]
 801713c:	600b      	str	r3, [r1, #0]
 801713e:	bf18      	it	ne
 8017140:	b22d      	sxthne	r5, r5
 8017142:	e7ef      	b.n	8017124 <_printf_i+0xbc>
 8017144:	680b      	ldr	r3, [r1, #0]
 8017146:	6825      	ldr	r5, [r4, #0]
 8017148:	1d18      	adds	r0, r3, #4
 801714a:	6008      	str	r0, [r1, #0]
 801714c:	0628      	lsls	r0, r5, #24
 801714e:	d501      	bpl.n	8017154 <_printf_i+0xec>
 8017150:	681d      	ldr	r5, [r3, #0]
 8017152:	e002      	b.n	801715a <_printf_i+0xf2>
 8017154:	0669      	lsls	r1, r5, #25
 8017156:	d5fb      	bpl.n	8017150 <_printf_i+0xe8>
 8017158:	881d      	ldrh	r5, [r3, #0]
 801715a:	4854      	ldr	r0, [pc, #336]	; (80172ac <_printf_i+0x244>)
 801715c:	2f6f      	cmp	r7, #111	; 0x6f
 801715e:	bf0c      	ite	eq
 8017160:	2308      	moveq	r3, #8
 8017162:	230a      	movne	r3, #10
 8017164:	2100      	movs	r1, #0
 8017166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801716a:	6866      	ldr	r6, [r4, #4]
 801716c:	60a6      	str	r6, [r4, #8]
 801716e:	2e00      	cmp	r6, #0
 8017170:	bfa2      	ittt	ge
 8017172:	6821      	ldrge	r1, [r4, #0]
 8017174:	f021 0104 	bicge.w	r1, r1, #4
 8017178:	6021      	strge	r1, [r4, #0]
 801717a:	b90d      	cbnz	r5, 8017180 <_printf_i+0x118>
 801717c:	2e00      	cmp	r6, #0
 801717e:	d04d      	beq.n	801721c <_printf_i+0x1b4>
 8017180:	4616      	mov	r6, r2
 8017182:	fbb5 f1f3 	udiv	r1, r5, r3
 8017186:	fb03 5711 	mls	r7, r3, r1, r5
 801718a:	5dc7      	ldrb	r7, [r0, r7]
 801718c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017190:	462f      	mov	r7, r5
 8017192:	42bb      	cmp	r3, r7
 8017194:	460d      	mov	r5, r1
 8017196:	d9f4      	bls.n	8017182 <_printf_i+0x11a>
 8017198:	2b08      	cmp	r3, #8
 801719a:	d10b      	bne.n	80171b4 <_printf_i+0x14c>
 801719c:	6823      	ldr	r3, [r4, #0]
 801719e:	07df      	lsls	r7, r3, #31
 80171a0:	d508      	bpl.n	80171b4 <_printf_i+0x14c>
 80171a2:	6923      	ldr	r3, [r4, #16]
 80171a4:	6861      	ldr	r1, [r4, #4]
 80171a6:	4299      	cmp	r1, r3
 80171a8:	bfde      	ittt	le
 80171aa:	2330      	movle	r3, #48	; 0x30
 80171ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80171b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80171b4:	1b92      	subs	r2, r2, r6
 80171b6:	6122      	str	r2, [r4, #16]
 80171b8:	f8cd a000 	str.w	sl, [sp]
 80171bc:	464b      	mov	r3, r9
 80171be:	aa03      	add	r2, sp, #12
 80171c0:	4621      	mov	r1, r4
 80171c2:	4640      	mov	r0, r8
 80171c4:	f7ff fee2 	bl	8016f8c <_printf_common>
 80171c8:	3001      	adds	r0, #1
 80171ca:	d14c      	bne.n	8017266 <_printf_i+0x1fe>
 80171cc:	f04f 30ff 	mov.w	r0, #4294967295
 80171d0:	b004      	add	sp, #16
 80171d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171d6:	4835      	ldr	r0, [pc, #212]	; (80172ac <_printf_i+0x244>)
 80171d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80171dc:	6823      	ldr	r3, [r4, #0]
 80171de:	680e      	ldr	r6, [r1, #0]
 80171e0:	061f      	lsls	r7, r3, #24
 80171e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80171e6:	600e      	str	r6, [r1, #0]
 80171e8:	d514      	bpl.n	8017214 <_printf_i+0x1ac>
 80171ea:	07d9      	lsls	r1, r3, #31
 80171ec:	bf44      	itt	mi
 80171ee:	f043 0320 	orrmi.w	r3, r3, #32
 80171f2:	6023      	strmi	r3, [r4, #0]
 80171f4:	b91d      	cbnz	r5, 80171fe <_printf_i+0x196>
 80171f6:	6823      	ldr	r3, [r4, #0]
 80171f8:	f023 0320 	bic.w	r3, r3, #32
 80171fc:	6023      	str	r3, [r4, #0]
 80171fe:	2310      	movs	r3, #16
 8017200:	e7b0      	b.n	8017164 <_printf_i+0xfc>
 8017202:	6823      	ldr	r3, [r4, #0]
 8017204:	f043 0320 	orr.w	r3, r3, #32
 8017208:	6023      	str	r3, [r4, #0]
 801720a:	2378      	movs	r3, #120	; 0x78
 801720c:	4828      	ldr	r0, [pc, #160]	; (80172b0 <_printf_i+0x248>)
 801720e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017212:	e7e3      	b.n	80171dc <_printf_i+0x174>
 8017214:	065e      	lsls	r6, r3, #25
 8017216:	bf48      	it	mi
 8017218:	b2ad      	uxthmi	r5, r5
 801721a:	e7e6      	b.n	80171ea <_printf_i+0x182>
 801721c:	4616      	mov	r6, r2
 801721e:	e7bb      	b.n	8017198 <_printf_i+0x130>
 8017220:	680b      	ldr	r3, [r1, #0]
 8017222:	6826      	ldr	r6, [r4, #0]
 8017224:	6960      	ldr	r0, [r4, #20]
 8017226:	1d1d      	adds	r5, r3, #4
 8017228:	600d      	str	r5, [r1, #0]
 801722a:	0635      	lsls	r5, r6, #24
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	d501      	bpl.n	8017234 <_printf_i+0x1cc>
 8017230:	6018      	str	r0, [r3, #0]
 8017232:	e002      	b.n	801723a <_printf_i+0x1d2>
 8017234:	0671      	lsls	r1, r6, #25
 8017236:	d5fb      	bpl.n	8017230 <_printf_i+0x1c8>
 8017238:	8018      	strh	r0, [r3, #0]
 801723a:	2300      	movs	r3, #0
 801723c:	6123      	str	r3, [r4, #16]
 801723e:	4616      	mov	r6, r2
 8017240:	e7ba      	b.n	80171b8 <_printf_i+0x150>
 8017242:	680b      	ldr	r3, [r1, #0]
 8017244:	1d1a      	adds	r2, r3, #4
 8017246:	600a      	str	r2, [r1, #0]
 8017248:	681e      	ldr	r6, [r3, #0]
 801724a:	6862      	ldr	r2, [r4, #4]
 801724c:	2100      	movs	r1, #0
 801724e:	4630      	mov	r0, r6
 8017250:	f7e8 ffde 	bl	8000210 <memchr>
 8017254:	b108      	cbz	r0, 801725a <_printf_i+0x1f2>
 8017256:	1b80      	subs	r0, r0, r6
 8017258:	6060      	str	r0, [r4, #4]
 801725a:	6863      	ldr	r3, [r4, #4]
 801725c:	6123      	str	r3, [r4, #16]
 801725e:	2300      	movs	r3, #0
 8017260:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017264:	e7a8      	b.n	80171b8 <_printf_i+0x150>
 8017266:	6923      	ldr	r3, [r4, #16]
 8017268:	4632      	mov	r2, r6
 801726a:	4649      	mov	r1, r9
 801726c:	4640      	mov	r0, r8
 801726e:	47d0      	blx	sl
 8017270:	3001      	adds	r0, #1
 8017272:	d0ab      	beq.n	80171cc <_printf_i+0x164>
 8017274:	6823      	ldr	r3, [r4, #0]
 8017276:	079b      	lsls	r3, r3, #30
 8017278:	d413      	bmi.n	80172a2 <_printf_i+0x23a>
 801727a:	68e0      	ldr	r0, [r4, #12]
 801727c:	9b03      	ldr	r3, [sp, #12]
 801727e:	4298      	cmp	r0, r3
 8017280:	bfb8      	it	lt
 8017282:	4618      	movlt	r0, r3
 8017284:	e7a4      	b.n	80171d0 <_printf_i+0x168>
 8017286:	2301      	movs	r3, #1
 8017288:	4632      	mov	r2, r6
 801728a:	4649      	mov	r1, r9
 801728c:	4640      	mov	r0, r8
 801728e:	47d0      	blx	sl
 8017290:	3001      	adds	r0, #1
 8017292:	d09b      	beq.n	80171cc <_printf_i+0x164>
 8017294:	3501      	adds	r5, #1
 8017296:	68e3      	ldr	r3, [r4, #12]
 8017298:	9903      	ldr	r1, [sp, #12]
 801729a:	1a5b      	subs	r3, r3, r1
 801729c:	42ab      	cmp	r3, r5
 801729e:	dcf2      	bgt.n	8017286 <_printf_i+0x21e>
 80172a0:	e7eb      	b.n	801727a <_printf_i+0x212>
 80172a2:	2500      	movs	r5, #0
 80172a4:	f104 0619 	add.w	r6, r4, #25
 80172a8:	e7f5      	b.n	8017296 <_printf_i+0x22e>
 80172aa:	bf00      	nop
 80172ac:	08017a55 	.word	0x08017a55
 80172b0:	08017a66 	.word	0x08017a66

080172b4 <memmove>:
 80172b4:	4288      	cmp	r0, r1
 80172b6:	b510      	push	{r4, lr}
 80172b8:	eb01 0402 	add.w	r4, r1, r2
 80172bc:	d902      	bls.n	80172c4 <memmove+0x10>
 80172be:	4284      	cmp	r4, r0
 80172c0:	4623      	mov	r3, r4
 80172c2:	d807      	bhi.n	80172d4 <memmove+0x20>
 80172c4:	1e43      	subs	r3, r0, #1
 80172c6:	42a1      	cmp	r1, r4
 80172c8:	d008      	beq.n	80172dc <memmove+0x28>
 80172ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80172ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80172d2:	e7f8      	b.n	80172c6 <memmove+0x12>
 80172d4:	4402      	add	r2, r0
 80172d6:	4601      	mov	r1, r0
 80172d8:	428a      	cmp	r2, r1
 80172da:	d100      	bne.n	80172de <memmove+0x2a>
 80172dc:	bd10      	pop	{r4, pc}
 80172de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80172e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80172e6:	e7f7      	b.n	80172d8 <memmove+0x24>

080172e8 <_free_r>:
 80172e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80172ea:	2900      	cmp	r1, #0
 80172ec:	d048      	beq.n	8017380 <_free_r+0x98>
 80172ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80172f2:	9001      	str	r0, [sp, #4]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	f1a1 0404 	sub.w	r4, r1, #4
 80172fa:	bfb8      	it	lt
 80172fc:	18e4      	addlt	r4, r4, r3
 80172fe:	f000 f8d3 	bl	80174a8 <__malloc_lock>
 8017302:	4a20      	ldr	r2, [pc, #128]	; (8017384 <_free_r+0x9c>)
 8017304:	9801      	ldr	r0, [sp, #4]
 8017306:	6813      	ldr	r3, [r2, #0]
 8017308:	4615      	mov	r5, r2
 801730a:	b933      	cbnz	r3, 801731a <_free_r+0x32>
 801730c:	6063      	str	r3, [r4, #4]
 801730e:	6014      	str	r4, [r2, #0]
 8017310:	b003      	add	sp, #12
 8017312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017316:	f000 b8cd 	b.w	80174b4 <__malloc_unlock>
 801731a:	42a3      	cmp	r3, r4
 801731c:	d90b      	bls.n	8017336 <_free_r+0x4e>
 801731e:	6821      	ldr	r1, [r4, #0]
 8017320:	1862      	adds	r2, r4, r1
 8017322:	4293      	cmp	r3, r2
 8017324:	bf04      	itt	eq
 8017326:	681a      	ldreq	r2, [r3, #0]
 8017328:	685b      	ldreq	r3, [r3, #4]
 801732a:	6063      	str	r3, [r4, #4]
 801732c:	bf04      	itt	eq
 801732e:	1852      	addeq	r2, r2, r1
 8017330:	6022      	streq	r2, [r4, #0]
 8017332:	602c      	str	r4, [r5, #0]
 8017334:	e7ec      	b.n	8017310 <_free_r+0x28>
 8017336:	461a      	mov	r2, r3
 8017338:	685b      	ldr	r3, [r3, #4]
 801733a:	b10b      	cbz	r3, 8017340 <_free_r+0x58>
 801733c:	42a3      	cmp	r3, r4
 801733e:	d9fa      	bls.n	8017336 <_free_r+0x4e>
 8017340:	6811      	ldr	r1, [r2, #0]
 8017342:	1855      	adds	r5, r2, r1
 8017344:	42a5      	cmp	r5, r4
 8017346:	d10b      	bne.n	8017360 <_free_r+0x78>
 8017348:	6824      	ldr	r4, [r4, #0]
 801734a:	4421      	add	r1, r4
 801734c:	1854      	adds	r4, r2, r1
 801734e:	42a3      	cmp	r3, r4
 8017350:	6011      	str	r1, [r2, #0]
 8017352:	d1dd      	bne.n	8017310 <_free_r+0x28>
 8017354:	681c      	ldr	r4, [r3, #0]
 8017356:	685b      	ldr	r3, [r3, #4]
 8017358:	6053      	str	r3, [r2, #4]
 801735a:	4421      	add	r1, r4
 801735c:	6011      	str	r1, [r2, #0]
 801735e:	e7d7      	b.n	8017310 <_free_r+0x28>
 8017360:	d902      	bls.n	8017368 <_free_r+0x80>
 8017362:	230c      	movs	r3, #12
 8017364:	6003      	str	r3, [r0, #0]
 8017366:	e7d3      	b.n	8017310 <_free_r+0x28>
 8017368:	6825      	ldr	r5, [r4, #0]
 801736a:	1961      	adds	r1, r4, r5
 801736c:	428b      	cmp	r3, r1
 801736e:	bf04      	itt	eq
 8017370:	6819      	ldreq	r1, [r3, #0]
 8017372:	685b      	ldreq	r3, [r3, #4]
 8017374:	6063      	str	r3, [r4, #4]
 8017376:	bf04      	itt	eq
 8017378:	1949      	addeq	r1, r1, r5
 801737a:	6021      	streq	r1, [r4, #0]
 801737c:	6054      	str	r4, [r2, #4]
 801737e:	e7c7      	b.n	8017310 <_free_r+0x28>
 8017380:	b003      	add	sp, #12
 8017382:	bd30      	pop	{r4, r5, pc}
 8017384:	20000690 	.word	0x20000690

08017388 <_malloc_r>:
 8017388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801738a:	1ccd      	adds	r5, r1, #3
 801738c:	f025 0503 	bic.w	r5, r5, #3
 8017390:	3508      	adds	r5, #8
 8017392:	2d0c      	cmp	r5, #12
 8017394:	bf38      	it	cc
 8017396:	250c      	movcc	r5, #12
 8017398:	2d00      	cmp	r5, #0
 801739a:	4606      	mov	r6, r0
 801739c:	db01      	blt.n	80173a2 <_malloc_r+0x1a>
 801739e:	42a9      	cmp	r1, r5
 80173a0:	d903      	bls.n	80173aa <_malloc_r+0x22>
 80173a2:	230c      	movs	r3, #12
 80173a4:	6033      	str	r3, [r6, #0]
 80173a6:	2000      	movs	r0, #0
 80173a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173aa:	f000 f87d 	bl	80174a8 <__malloc_lock>
 80173ae:	4921      	ldr	r1, [pc, #132]	; (8017434 <_malloc_r+0xac>)
 80173b0:	680a      	ldr	r2, [r1, #0]
 80173b2:	4614      	mov	r4, r2
 80173b4:	b99c      	cbnz	r4, 80173de <_malloc_r+0x56>
 80173b6:	4f20      	ldr	r7, [pc, #128]	; (8017438 <_malloc_r+0xb0>)
 80173b8:	683b      	ldr	r3, [r7, #0]
 80173ba:	b923      	cbnz	r3, 80173c6 <_malloc_r+0x3e>
 80173bc:	4621      	mov	r1, r4
 80173be:	4630      	mov	r0, r6
 80173c0:	f000 f862 	bl	8017488 <_sbrk_r>
 80173c4:	6038      	str	r0, [r7, #0]
 80173c6:	4629      	mov	r1, r5
 80173c8:	4630      	mov	r0, r6
 80173ca:	f000 f85d 	bl	8017488 <_sbrk_r>
 80173ce:	1c43      	adds	r3, r0, #1
 80173d0:	d123      	bne.n	801741a <_malloc_r+0x92>
 80173d2:	230c      	movs	r3, #12
 80173d4:	6033      	str	r3, [r6, #0]
 80173d6:	4630      	mov	r0, r6
 80173d8:	f000 f86c 	bl	80174b4 <__malloc_unlock>
 80173dc:	e7e3      	b.n	80173a6 <_malloc_r+0x1e>
 80173de:	6823      	ldr	r3, [r4, #0]
 80173e0:	1b5b      	subs	r3, r3, r5
 80173e2:	d417      	bmi.n	8017414 <_malloc_r+0x8c>
 80173e4:	2b0b      	cmp	r3, #11
 80173e6:	d903      	bls.n	80173f0 <_malloc_r+0x68>
 80173e8:	6023      	str	r3, [r4, #0]
 80173ea:	441c      	add	r4, r3
 80173ec:	6025      	str	r5, [r4, #0]
 80173ee:	e004      	b.n	80173fa <_malloc_r+0x72>
 80173f0:	6863      	ldr	r3, [r4, #4]
 80173f2:	42a2      	cmp	r2, r4
 80173f4:	bf0c      	ite	eq
 80173f6:	600b      	streq	r3, [r1, #0]
 80173f8:	6053      	strne	r3, [r2, #4]
 80173fa:	4630      	mov	r0, r6
 80173fc:	f000 f85a 	bl	80174b4 <__malloc_unlock>
 8017400:	f104 000b 	add.w	r0, r4, #11
 8017404:	1d23      	adds	r3, r4, #4
 8017406:	f020 0007 	bic.w	r0, r0, #7
 801740a:	1ac2      	subs	r2, r0, r3
 801740c:	d0cc      	beq.n	80173a8 <_malloc_r+0x20>
 801740e:	1a1b      	subs	r3, r3, r0
 8017410:	50a3      	str	r3, [r4, r2]
 8017412:	e7c9      	b.n	80173a8 <_malloc_r+0x20>
 8017414:	4622      	mov	r2, r4
 8017416:	6864      	ldr	r4, [r4, #4]
 8017418:	e7cc      	b.n	80173b4 <_malloc_r+0x2c>
 801741a:	1cc4      	adds	r4, r0, #3
 801741c:	f024 0403 	bic.w	r4, r4, #3
 8017420:	42a0      	cmp	r0, r4
 8017422:	d0e3      	beq.n	80173ec <_malloc_r+0x64>
 8017424:	1a21      	subs	r1, r4, r0
 8017426:	4630      	mov	r0, r6
 8017428:	f000 f82e 	bl	8017488 <_sbrk_r>
 801742c:	3001      	adds	r0, #1
 801742e:	d1dd      	bne.n	80173ec <_malloc_r+0x64>
 8017430:	e7cf      	b.n	80173d2 <_malloc_r+0x4a>
 8017432:	bf00      	nop
 8017434:	20000690 	.word	0x20000690
 8017438:	20000694 	.word	0x20000694

0801743c <_realloc_r>:
 801743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801743e:	4607      	mov	r7, r0
 8017440:	4614      	mov	r4, r2
 8017442:	460e      	mov	r6, r1
 8017444:	b921      	cbnz	r1, 8017450 <_realloc_r+0x14>
 8017446:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801744a:	4611      	mov	r1, r2
 801744c:	f7ff bf9c 	b.w	8017388 <_malloc_r>
 8017450:	b922      	cbnz	r2, 801745c <_realloc_r+0x20>
 8017452:	f7ff ff49 	bl	80172e8 <_free_r>
 8017456:	4625      	mov	r5, r4
 8017458:	4628      	mov	r0, r5
 801745a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801745c:	f000 f830 	bl	80174c0 <_malloc_usable_size_r>
 8017460:	42a0      	cmp	r0, r4
 8017462:	d20f      	bcs.n	8017484 <_realloc_r+0x48>
 8017464:	4621      	mov	r1, r4
 8017466:	4638      	mov	r0, r7
 8017468:	f7ff ff8e 	bl	8017388 <_malloc_r>
 801746c:	4605      	mov	r5, r0
 801746e:	2800      	cmp	r0, #0
 8017470:	d0f2      	beq.n	8017458 <_realloc_r+0x1c>
 8017472:	4631      	mov	r1, r6
 8017474:	4622      	mov	r2, r4
 8017476:	f7ff fbf7 	bl	8016c68 <memcpy>
 801747a:	4631      	mov	r1, r6
 801747c:	4638      	mov	r0, r7
 801747e:	f7ff ff33 	bl	80172e8 <_free_r>
 8017482:	e7e9      	b.n	8017458 <_realloc_r+0x1c>
 8017484:	4635      	mov	r5, r6
 8017486:	e7e7      	b.n	8017458 <_realloc_r+0x1c>

08017488 <_sbrk_r>:
 8017488:	b538      	push	{r3, r4, r5, lr}
 801748a:	4d06      	ldr	r5, [pc, #24]	; (80174a4 <_sbrk_r+0x1c>)
 801748c:	2300      	movs	r3, #0
 801748e:	4604      	mov	r4, r0
 8017490:	4608      	mov	r0, r1
 8017492:	602b      	str	r3, [r5, #0]
 8017494:	f7ee ff96 	bl	80063c4 <_sbrk>
 8017498:	1c43      	adds	r3, r0, #1
 801749a:	d102      	bne.n	80174a2 <_sbrk_r+0x1a>
 801749c:	682b      	ldr	r3, [r5, #0]
 801749e:	b103      	cbz	r3, 80174a2 <_sbrk_r+0x1a>
 80174a0:	6023      	str	r3, [r4, #0]
 80174a2:	bd38      	pop	{r3, r4, r5, pc}
 80174a4:	200057d8 	.word	0x200057d8

080174a8 <__malloc_lock>:
 80174a8:	4801      	ldr	r0, [pc, #4]	; (80174b0 <__malloc_lock+0x8>)
 80174aa:	f000 b811 	b.w	80174d0 <__retarget_lock_acquire_recursive>
 80174ae:	bf00      	nop
 80174b0:	200057e0 	.word	0x200057e0

080174b4 <__malloc_unlock>:
 80174b4:	4801      	ldr	r0, [pc, #4]	; (80174bc <__malloc_unlock+0x8>)
 80174b6:	f000 b80c 	b.w	80174d2 <__retarget_lock_release_recursive>
 80174ba:	bf00      	nop
 80174bc:	200057e0 	.word	0x200057e0

080174c0 <_malloc_usable_size_r>:
 80174c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80174c4:	1f18      	subs	r0, r3, #4
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	bfbc      	itt	lt
 80174ca:	580b      	ldrlt	r3, [r1, r0]
 80174cc:	18c0      	addlt	r0, r0, r3
 80174ce:	4770      	bx	lr

080174d0 <__retarget_lock_acquire_recursive>:
 80174d0:	4770      	bx	lr

080174d2 <__retarget_lock_release_recursive>:
 80174d2:	4770      	bx	lr

080174d4 <_init>:
 80174d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174d6:	bf00      	nop
 80174d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174da:	bc08      	pop	{r3}
 80174dc:	469e      	mov	lr, r3
 80174de:	4770      	bx	lr

080174e0 <_fini>:
 80174e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174e2:	bf00      	nop
 80174e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174e6:	bc08      	pop	{r3}
 80174e8:	469e      	mov	lr, r3
 80174ea:	4770      	bx	lr
