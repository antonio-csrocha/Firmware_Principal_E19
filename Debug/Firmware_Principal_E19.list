
Firmware_Principal_E19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000184a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08018670  08018670  00028670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018810  08018810  00030198  2**0
                  CONTENTS
  4 .ARM          00000008  08018810  08018810  00028810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018818  08018818  00030198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018818  08018818  00028818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801881c  0801881c  0002881c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000198  20000000  08018820  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007280  20000198  080189b8  00030198  2**2
                  ALLOC
 10 ._user_heap_stack 00011000  20007418  080189b8  00037418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030198  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f697  00000000  00000000  000301c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000699a  00000000  00000000  0005f85f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002348  00000000  00000000  00066200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002038  00000000  00000000  00068548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e6e9  00000000  00000000  0006a580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034cc5  00000000  00000000  00098c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f3bff  00000000  00000000  000cd92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001c152d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009660  00000000  00000000  001c1580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000198 	.word	0x20000198
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018658 	.word	0x08018658

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000019c 	.word	0x2000019c
 800020c:	08018658 	.word	0x08018658

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <FT_CAN_FilterConfig>:
#include "ft_can.h"

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct);

HAL_StatusTypeDef FT_CAN_FilterConfig(CAN_HandleTypeDef *hcan, uint16_t FT_Product, uint8_t filter_bank_position, uint32_t Filter_FIFO)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b090      	sub	sp, #64	; 0x40
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	60f8      	str	r0, [r7, #12]
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	460b      	mov	r3, r1
 80005c0:	817b      	strh	r3, [r7, #10]
 80005c2:	4613      	mov	r3, r2
 80005c4:	727b      	strb	r3, [r7, #9]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = FT_Product << 19, mask_id = 0x1FF80000;
 80005c6:	897b      	ldrh	r3, [r7, #10]
 80005c8:	04db      	lsls	r3, r3, #19
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80005cc:	4b13      	ldr	r3, [pc, #76]	; (800061c <FT_CAN_FilterConfig+0x68>)
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterBank = filter_bank_position;
 80005d0:	7a7b      	ldrb	r3, [r7, #9]
 80005d2:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80005dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005de:	0b5b      	lsrs	r3, r3, #13
 80005e0:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80005e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005e4:	00db      	lsls	r3, r3, #3
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80005ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005ec:	0b5b      	lsrs	r3, r3, #13
 80005ee:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80005f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80005f2:	00db      	lsls	r3, r3, #3
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterFIFOAssignment = Filter_FIFO;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 80005fc:	2301      	movs	r3, #1
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.SlaveStartFilterBank = 14 + filter_bank_position;
 8000600:	7a7b      	ldrb	r3, [r7, #9]
 8000602:	330e      	adds	r3, #14
 8000604:	637b      	str	r3, [r7, #52]	; 0x34

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 8000606:	f107 0310 	add.w	r3, r7, #16
 800060a:	4619      	mov	r1, r3
 800060c:	68f8      	ldr	r0, [r7, #12]
 800060e:	f007 f8f5 	bl	80077fc <HAL_CAN_ConfigFilter>
 8000612:	4603      	mov	r3, r0
}
 8000614:	4618      	mov	r0, r3
 8000616:	3740      	adds	r7, #64	; 0x40
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	1ff80000 	.word	0x1ff80000

08000620 <FT_CAN_ReceiveData>:

void FT_CAN_ReceiveData(CAN_RxHeaderTypeDef* pRxHeader, uint8_t* pData, FT_Data* FT_Data_Struct)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b088      	sub	sp, #32
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
	uint8_t buffer[8];
	uint8_t DLC = pRxHeader->DLC;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	77bb      	strb	r3, [r7, #30]
	uint32_t ExtId = pRxHeader->ExtId >> 19;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	0cdb      	lsrs	r3, r3, #19
 8000638:	61bb      	str	r3, [r7, #24]

	if(	   (ExtId != FT_Gear_Controller)
 800063a:	69bb      	ldr	r3, [r7, #24]
 800063c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000640:	d031      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Knock_Meter)
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	f240 1241 	movw	r2, #321	; 0x141
 8000648:	4293      	cmp	r3, r2
 800064a:	d02c      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Boost_Controller2)
 800064c:	69bb      	ldr	r3, [r7, #24]
 800064e:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000652:	d028      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Injector_Driver)
 8000654:	69bb      	ldr	r3, [r7, #24]
 8000656:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 800065a:	d024      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_WBO2_Nano)
 800065c:	69bb      	ldr	r3, [r7, #24]
 800065e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8000662:	d020      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_WBO2_Slim)
 8000664:	69bb      	ldr	r3, [r7, #24]
 8000666:	f240 2241 	movw	r2, #577	; 0x241
 800066a:	4293      	cmp	r3, r2
 800066c:	d01b      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Alcohol_O2)
 800066e:	69bb      	ldr	r3, [r7, #24]
 8000670:	f240 2242 	movw	r2, #578	; 0x242
 8000674:	4293      	cmp	r3, r2
 8000676:	d016      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FTSpark)
 8000678:	69bb      	ldr	r3, [r7, #24]
 800067a:	f240 2243 	movw	r2, #579	; 0x243
 800067e:	4293      	cmp	r3, r2
 8000680:	d011      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Switchpad)
 8000682:	69bb      	ldr	r3, [r7, #24]
 8000684:	f5b3 7f11 	cmp.w	r3, #580	; 0x244
 8000688:	d00d      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT500)
 800068a:	69bb      	ldr	r3, [r7, #24]
 800068c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8000690:	d009      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (ExtId != FT_Power_ECU)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	f240 2281 	movw	r2, #641	; 0x281
 8000698:	4293      	cmp	r3, r2
 800069a:	d004      	beq.n	80006a6 <FT_CAN_ReceiveData+0x86>
		&& (pRxHeader->IDE != CAN_ID_EXT))
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	2b04      	cmp	r3, #4
 80006a2:	f040 83c4 	bne.w	8000e2e <FT_CAN_ReceiveData+0x80e>
		return;

	ExtId = pRxHeader->ExtId;
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	685b      	ldr	r3, [r3, #4]
 80006aa:	61bb      	str	r3, [r7, #24]

	for(uint8_t i = 0; i < DLC; i++)
 80006ac:	2300      	movs	r3, #0
 80006ae:	77fb      	strb	r3, [r7, #31]
 80006b0:	e00b      	b.n	80006ca <FT_CAN_ReceiveData+0xaa>
		buffer[i] = pData[i];
 80006b2:	7ffb      	ldrb	r3, [r7, #31]
 80006b4:	68ba      	ldr	r2, [r7, #8]
 80006b6:	441a      	add	r2, r3
 80006b8:	7ffb      	ldrb	r3, [r7, #31]
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	3320      	adds	r3, #32
 80006be:	443b      	add	r3, r7
 80006c0:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < DLC; i++)
 80006c4:	7ffb      	ldrb	r3, [r7, #31]
 80006c6:	3301      	adds	r3, #1
 80006c8:	77fb      	strb	r3, [r7, #31]
 80006ca:	7ffa      	ldrb	r2, [r7, #31]
 80006cc:	7fbb      	ldrb	r3, [r7, #30]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d3ef      	bcc.n	80006b2 <FT_CAN_ReceiveData+0x92>

	if((((ExtId / 0x800) & 0x07) == 0x00))// || (((ExtId / 0x800) & 0x07) == 0x01))
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	0adb      	lsrs	r3, r3, #11
 80006d6:	f003 0307 	and.w	r3, r3, #7
 80006da:	2b00      	cmp	r3, #0
 80006dc:	f040 81d5 	bne.w	8000a8a <FT_CAN_ReceiveData+0x46a>
	{
		if((ExtId & 0xFFF) == 0x600)
 80006e0:	69bb      	ldr	r3, [r7, #24]
 80006e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80006e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80006ea:	d13c      	bne.n	8000766 <FT_CAN_ReceiveData+0x146>
		{
			FT_Data_Struct->tps  = buffer[0] << 8;
 80006ec:	7c3b      	ldrb	r3, [r7, #16]
 80006ee:	021b      	lsls	r3, r3, #8
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->tps |= buffer[1];
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f9b3 2050 	ldrsh.w	r2, [r3, #80]	; 0x50
 80006fe:	7c7b      	ldrb	r3, [r7, #17]
 8000700:	b21b      	sxth	r3, r3
 8000702:	4313      	orrs	r3, r2
 8000704:	b21a      	sxth	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			FT_Data_Struct->map  = buffer[2] << 8;
 800070c:	7cbb      	ldrb	r3, [r7, #18]
 800070e:	021b      	lsls	r3, r3, #8
 8000710:	b21a      	sxth	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->map |= buffer[3];
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f9b3 2046 	ldrsh.w	r2, [r3, #70]	; 0x46
 800071e:	7cfb      	ldrb	r3, [r7, #19]
 8000720:	b21b      	sxth	r3, r3
 8000722:	4313      	orrs	r3, r2
 8000724:	b21a      	sxth	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			FT_Data_Struct->iat  = buffer[4] << 8;
 800072c:	7d3b      	ldrb	r3, [r7, #20]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	b21a      	sxth	r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->iat |= buffer[5];
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f9b3 203a 	ldrsh.w	r2, [r3, #58]	; 0x3a
 800073c:	7d7b      	ldrb	r3, [r7, #21]
 800073e:	b21b      	sxth	r3, r3
 8000740:	4313      	orrs	r3, r2
 8000742:	b21a      	sxth	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	875a      	strh	r2, [r3, #58]	; 0x3a
			FT_Data_Struct->ect  = buffer[6] << 8;
 8000748:	7dbb      	ldrb	r3, [r7, #22]
 800074a:	021b      	lsls	r3, r3, #8
 800074c:	b21a      	sxth	r2, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	86da      	strh	r2, [r3, #54]	; 0x36
			FT_Data_Struct->ect |= buffer[7];
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	b21b      	sxth	r3, r3
 800075c:	4313      	orrs	r3, r2
 800075e:	b21a      	sxth	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	86da      	strh	r2, [r3, #54]	; 0x36

			return;
 8000764:	e366      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x601)
 8000766:	69bb      	ldr	r3, [r7, #24]
 8000768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800076c:	f240 6201 	movw	r2, #1537	; 0x601
 8000770:	4293      	cmp	r3, r2
 8000772:	d13c      	bne.n	80007ee <FT_CAN_ReceiveData+0x1ce>
		{
			FT_Data_Struct->oil_pressure  	  = buffer[0] << 8;
 8000774:	7c3b      	ldrb	r3, [r7, #16]
 8000776:	021b      	lsls	r3, r3, #8
 8000778:	b21a      	sxth	r2, r3
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->oil_pressure 	 |= buffer[1];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f9b3 2048 	ldrsh.w	r2, [r3, #72]	; 0x48
 8000786:	7c7b      	ldrb	r3, [r7, #17]
 8000788:	b21b      	sxth	r3, r3
 800078a:	4313      	orrs	r3, r2
 800078c:	b21a      	sxth	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			FT_Data_Struct->fuel_pressure 	  = buffer[2] << 8;
 8000794:	7cbb      	ldrb	r3, [r7, #18]
 8000796:	021b      	lsls	r3, r3, #8
 8000798:	b21a      	sxth	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->fuel_pressure 	 |= buffer[3];
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f9b3 203c 	ldrsh.w	r2, [r3, #60]	; 0x3c
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b21a      	sxth	r2, r3
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	879a      	strh	r2, [r3, #60]	; 0x3c
			FT_Data_Struct->coolant_pressure  = buffer[4] << 8;
 80007b0:	7d3b      	ldrb	r3, [r7, #20]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->coolant_pressure |= buffer[5];
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	f9b3 2038 	ldrsh.w	r2, [r3, #56]	; 0x38
 80007c0:	7d7b      	ldrb	r3, [r7, #21]
 80007c2:	b21b      	sxth	r3, r3
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b21a      	sxth	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	871a      	strh	r2, [r3, #56]	; 0x38
			FT_Data_Struct->gear  			  = buffer[6] << 8;
 80007cc:	7dbb      	ldrb	r3, [r7, #22]
 80007ce:	021b      	lsls	r3, r3, #8
 80007d0:	b21a      	sxth	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			FT_Data_Struct->gear 			 |= buffer[7];
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	f9b3 2040 	ldrsh.w	r2, [r3, #64]	; 0x40
 80007de:	7dfb      	ldrb	r3, [r7, #23]
 80007e0:	b21b      	sxth	r3, r3
 80007e2:	4313      	orrs	r3, r2
 80007e4:	b21a      	sxth	r2, r3
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

			return;
 80007ec:	e322      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x602)
 80007ee:	69bb      	ldr	r3, [r7, #24]
 80007f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007f4:	f240 6202 	movw	r2, #1538	; 0x602
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d140      	bne.n	800087e <FT_CAN_ReceiveData+0x25e>
		{
			FT_Data_Struct->lambda  		 = buffer[0] << 8;
 80007fc:	7c3b      	ldrb	r3, [r7, #16]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21a      	sxth	r2, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->lambda 			|= buffer[1];
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f9b3 2042 	ldrsh.w	r2, [r3, #66]	; 0x42
 800080e:	7c7b      	ldrb	r3, [r7, #17]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21a      	sxth	r2, r3
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			FT_Data_Struct->rpm  			 = buffer[2] << 8;
 800081c:	7cbb      	ldrb	r3, [r7, #18]
 800081e:	021b      	lsls	r3, r3, #8
 8000820:	b21a      	sxth	r2, r3
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->rpm 			|= buffer[3];
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 800082e:	7cfb      	ldrb	r3, [r7, #19]
 8000830:	b21b      	sxth	r3, r3
 8000832:	4313      	orrs	r3, r2
 8000834:	b21a      	sxth	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			FT_Data_Struct->oil_temperature  = buffer[4] << 8;
 800083c:	7d3b      	ldrb	r3, [r7, #20]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	b21a      	sxth	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->oil_temperature |= buffer[5];
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f9b3 204a 	ldrsh.w	r2, [r3, #74]	; 0x4a
 800084e:	7d7b      	ldrb	r3, [r7, #21]
 8000850:	b21b      	sxth	r3, r3
 8000852:	4313      	orrs	r3, r2
 8000854:	b21a      	sxth	r2, r3
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			FT_Data_Struct->pit_limiter  	 = buffer[6] << 8;
 800085c:	7dbb      	ldrb	r3, [r7, #22]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b21a      	sxth	r2, r3
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			FT_Data_Struct->pit_limiter 	|= buffer[7];
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	f9b3 204c 	ldrsh.w	r2, [r3, #76]	; 0x4c
 800086e:	7dfb      	ldrb	r3, [r7, #23]
 8000870:	b21b      	sxth	r3, r3
 8000872:	4313      	orrs	r3, r2
 8000874:	b21a      	sxth	r2, r3
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

			return;
 800087c:	e2da      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x603)
 800087e:	69bb      	ldr	r3, [r7, #24]
 8000880:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000884:	f240 6203 	movw	r2, #1539	; 0x603
 8000888:	4293      	cmp	r3, r2
 800088a:	d140      	bne.n	800090e <FT_CAN_ReceiveData+0x2ee>
		{
			FT_Data_Struct->wheel_speed_fr	 = buffer[0] << 8;
 800088c:	7c3b      	ldrb	r3, [r7, #16]
 800088e:	021b      	lsls	r3, r3, #8
 8000890:	b21a      	sxth	r2, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->wheel_speed_fr	|= buffer[1];
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 800089e:	7c7b      	ldrb	r3, [r7, #17]
 80008a0:	b21b      	sxth	r3, r3
 80008a2:	4313      	orrs	r3, r2
 80008a4:	b21a      	sxth	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			FT_Data_Struct->wheel_speed_fl	 = buffer[2] << 8;
 80008ac:	7cbb      	ldrb	r3, [r7, #18]
 80008ae:	021b      	lsls	r3, r3, #8
 80008b0:	b21a      	sxth	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->wheel_speed_fl	|= buffer[3];
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 80008be:	7cfb      	ldrb	r3, [r7, #19]
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			FT_Data_Struct->wheel_speed_rr	 = buffer[4] << 8;
 80008cc:	7d3b      	ldrb	r3, [r7, #20]
 80008ce:	021b      	lsls	r3, r3, #8
 80008d0:	b21a      	sxth	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			FT_Data_Struct->wheel_speed_rr	|= buffer[5];
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 80008de:	7d7b      	ldrb	r3, [r7, #21]
 80008e0:	b21b      	sxth	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b21a      	sxth	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			FT_Data_Struct->wheel_speed_rl 	 = buffer[6] << 8;
 80008ec:	7dbb      	ldrb	r3, [r7, #22]
 80008ee:	021b      	lsls	r3, r3, #8
 80008f0:	b21a      	sxth	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			FT_Data_Struct->wheel_speed_rl 	|= buffer[7];
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 80008fe:	7dfb      	ldrb	r3, [r7, #23]
 8000900:	b21b      	sxth	r3, r3
 8000902:	4313      	orrs	r3, r2
 8000904:	b21a      	sxth	r2, r3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

			return;
 800090c:	e292      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x606)
 800090e:	69bb      	ldr	r3, [r7, #24]
 8000910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000914:	f240 6206 	movw	r2, #1542	; 0x606
 8000918:	4293      	cmp	r3, r2
 800091a:	d13c      	bne.n	8000996 <FT_CAN_ReceiveData+0x376>
		{
			FT_Data_Struct->accel_long		 = buffer[0] << 8;
 800091c:	7c3b      	ldrb	r3, [r7, #16]
 800091e:	021b      	lsls	r3, r3, #8
 8000920:	b21a      	sxth	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->accel_long		|= buffer[1];
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	f9b3 2034 	ldrsh.w	r2, [r3, #52]	; 0x34
 800092c:	7c7b      	ldrb	r3, [r7, #17]
 800092e:	b21b      	sxth	r3, r3
 8000930:	4313      	orrs	r3, r2
 8000932:	b21a      	sxth	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	869a      	strh	r2, [r3, #52]	; 0x34
			FT_Data_Struct->accel_lat		 = buffer[2] << 8;
 8000938:	7cbb      	ldrb	r3, [r7, #18]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b21a      	sxth	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->accel_lat		|= buffer[3];
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	; 0x32
 8000948:	7cfb      	ldrb	r3, [r7, #19]
 800094a:	b21b      	sxth	r3, r3
 800094c:	4313      	orrs	r3, r2
 800094e:	b21a      	sxth	r2, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	865a      	strh	r2, [r3, #50]	; 0x32
			FT_Data_Struct->yaw_rate_pitch	 = buffer[4] << 8;
 8000954:	7d3b      	ldrb	r3, [r7, #20]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	b21a      	sxth	r2, r3
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			FT_Data_Struct->yaw_rate_pitch	|= buffer[5];
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f9b3 205a 	ldrsh.w	r2, [r3, #90]	; 0x5a
 8000966:	7d7b      	ldrb	r3, [r7, #21]
 8000968:	b21b      	sxth	r3, r3
 800096a:	4313      	orrs	r3, r2
 800096c:	b21a      	sxth	r2, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			FT_Data_Struct->yaw_rate_roll	 = buffer[6] << 8;
 8000974:	7dbb      	ldrb	r3, [r7, #22]
 8000976:	021b      	lsls	r3, r3, #8
 8000978:	b21a      	sxth	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
			FT_Data_Struct->yaw_rate_roll	|= buffer[7];
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f9b3 205c 	ldrsh.w	r2, [r3, #92]	; 0x5c
 8000986:	7dfb      	ldrb	r3, [r7, #23]
 8000988:	b21b      	sxth	r3, r3
 800098a:	4313      	orrs	r3, r2
 800098c:	b21a      	sxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			return;
 8000994:	e24e      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

		else if((ExtId & 0xFFF) == 0x607)
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800099c:	f240 6207 	movw	r2, #1543	; 0x607
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d11e      	bne.n	80009e2 <FT_CAN_ReceiveData+0x3c2>
		{
			FT_Data_Struct->lambda_correction  = buffer[0] << 8;
 80009a4:	7c3b      	ldrb	r3, [r7, #16]
 80009a6:	021b      	lsls	r3, r3, #8
 80009a8:	b21a      	sxth	r2, r3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->lambda_correction |= buffer[1];
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	f9b3 2044 	ldrsh.w	r2, [r3, #68]	; 0x44
 80009b6:	7c7b      	ldrb	r3, [r7, #17]
 80009b8:	b21b      	sxth	r3, r3
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b21a      	sxth	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
			FT_Data_Struct->fuel_flow_total	   = buffer[2] << 8;
 80009c4:	7cbb      	ldrb	r3, [r7, #18]
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	b21a      	sxth	r2, r3
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	87da      	strh	r2, [r3, #62]	; 0x3e
			FT_Data_Struct->fuel_flow_total	  |= buffer[3];
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	; 0x3e
 80009d4:	7cfb      	ldrb	r3, [r7, #19]
 80009d6:	b21b      	sxth	r3, r3
 80009d8:	4313      	orrs	r3, r2
 80009da:	b21a      	sxth	r2, r3
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	87da      	strh	r2, [r3, #62]	; 0x3e

			return;
 80009e0:	e228      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		}

#ifndef FT_CAN_FIXED
		else if((ExtId & 0xFF) == 0xFF)
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	2bff      	cmp	r3, #255	; 0xff
 80009e8:	f040 8224 	bne.w	8000e34 <FT_CAN_ReceiveData+0x814>
		{
			FT_Data_Struct->data_id  	  = buffer[0] << 8;
 80009ec:	7c3b      	ldrb	r3, [r7, #16]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	021b      	lsls	r3, r3, #8
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_id 	 |= buffer[1];
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000a00:	7c7b      	ldrb	r3, [r7, #17]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	4313      	orrs	r3, r2
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_content  = buffer[2] << 8;
 8000a0e:	7cbb      	ldrb	r3, [r7, #18]
 8000a10:	b29b      	uxth	r3, r3
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	b29a      	uxth	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_Data_Struct->data_content |= buffer[3];
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000a22:	7cfb      	ldrb	r3, [r7, #19]
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	4313      	orrs	r3, r2
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

			FT_CAN_ProcessData(FT_Data_Struct);
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fa03 	bl	8000e3c <FT_CAN_ProcessData>

			if(DLC == 8)
 8000a36:	7fbb      	ldrb	r3, [r7, #30]
 8000a38:	2b08      	cmp	r3, #8
 8000a3a:	f040 81fa 	bne.w	8000e32 <FT_CAN_ReceiveData+0x812>
			{
				FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000a3e:	7d3b      	ldrb	r3, [r7, #20]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	021b      	lsls	r3, r3, #8
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[5];
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000a52:	7d7b      	ldrb	r3, [r7, #21]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4313      	orrs	r3, r2
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[6] << 8;
 8000a60:	7dbb      	ldrb	r3, [r7, #22]
 8000a62:	b29b      	uxth	r3, r3
 8000a64:	021b      	lsls	r3, r3, #8
 8000a66:	b29a      	uxth	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[7];
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000a74:	7dfb      	ldrb	r3, [r7, #23]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

				FT_CAN_ProcessData(FT_Data_Struct);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f9da 	bl	8000e3c <FT_CAN_ProcessData>
			}

			return;
 8000a88:	e1d3      	b.n	8000e32 <FT_CAN_ReceiveData+0x812>
		}
	}

	else if((((ExtId / 0x800) & 0x07) == 0x02))// || ((((ExtId / 0x800) & 0x07) == 0x03)))
 8000a8a:	69bb      	ldr	r3, [r7, #24]
 8000a8c:	0adb      	lsrs	r3, r3, #11
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	f040 81ce 	bne.w	8000e34 <FT_CAN_ReceiveData+0x814>
	{
		if(buffer[0] == 0xFF)
 8000a98:	7c3b      	ldrb	r3, [r7, #16]
 8000a9a:	2bff      	cmp	r3, #255	; 0xff
 8000a9c:	d125      	bne.n	8000aea <FT_CAN_ReceiveData+0x4ca>
		{
			FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000a9e:	7c7b      	ldrb	r3, [r7, #17]
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	021b      	lsls	r3, r3, #8
 8000aa4:	b29a      	uxth	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_id 	 |= buffer[2];
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000ab2:	7cbb      	ldrb	r3, [r7, #18]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
			FT_Data_Struct->data_content  = buffer[3] << 8;
 8000ac0:	7cfb      	ldrb	r3, [r7, #19]
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b29a      	uxth	r2, r3
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_Data_Struct->data_content |= buffer[4];
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000ad4:	7d3b      	ldrb	r3, [r7, #20]
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	b29a      	uxth	r2, r3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
			FT_CAN_ProcessData(FT_Data_Struct);
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f9aa 	bl	8000e3c <FT_CAN_ProcessData>

			return;
 8000ae8:	e1a4      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>

		//Segmented Messages
		else
		{
			//First Message
			if(buffer[0] == 0)
 8000aea:	7c3b      	ldrb	r3, [r7, #16]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d141      	bne.n	8000b74 <FT_CAN_ReceiveData+0x554>
			{
				FT_Data_Struct->data_length   = buffer[1] << 8;
 8000af0:	7c7b      	ldrb	r3, [r7, #17]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	b29a      	uxth	r2, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
				FT_Data_Struct->data_length  |= buffer[2];
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8000b04:	7cbb      	ldrb	r3, [r7, #18]
 8000b06:	b29b      	uxth	r3, r3
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

				FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000b12:	7cfb      	ldrb	r3, [r7, #19]
 8000b14:	b29b      	uxth	r3, r3
 8000b16:	021b      	lsls	r3, r3, #8
 8000b18:	b29a      	uxth	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[4];
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000b26:	7d3b      	ldrb	r3, [r7, #20]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[5] << 8;
 8000b34:	7d7b      	ldrb	r3, [r7, #21]
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	021b      	lsls	r3, r3, #8
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[6];
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000b48:	7dbb      	ldrb	r3, [r7, #22]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	b29a      	uxth	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_CAN_ProcessData(FT_Data_Struct);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f000 f970 	bl	8000e3c <FT_CAN_ProcessData>

				FT_Data_Struct->data_id = buffer[7] << 8;
 8000b5c:	7dfb      	ldrb	r3, [r7, #23]
 8000b5e:	b29b      	uxth	r3, r3
 8000b60:	021b      	lsls	r3, r3, #8
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_last_seg = 0;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000b72:	e15f      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 1, 5, etc
			else if((buffer[0] % 4) == 1)
 8000b74:	7c3b      	ldrb	r3, [r7, #16]
 8000b76:	f003 0303 	and.w	r3, r3, #3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d153      	bne.n	8000c28 <FT_CAN_ReceiveData+0x608>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000b80:	7c3b      	ldrb	r3, [r7, #16]
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d11d      	bne.n	8000bcc <FT_CAN_ReceiveData+0x5ac>
				{
					FT_Data_Struct->data_id 	 |= buffer[1];
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000b96:	7c7b      	ldrb	r3, [r7, #17]
 8000b98:	b29b      	uxth	r3, r3
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[2] << 8;
 8000ba4:	7cbb      	ldrb	r3, [r7, #18]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[3];
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000bb8:	7cfb      	ldrb	r3, [r7, #19]
 8000bba:	b29b      	uxth	r3, r3
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f000 f938 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000bcc:	7fbb      	ldrb	r3, [r7, #30]
 8000bce:	2b08      	cmp	r3, #8
 8000bd0:	d124      	bne.n	8000c1c <FT_CAN_ReceiveData+0x5fc>
				{
					FT_Data_Struct->data_id  	  = buffer[4] << 8;
 8000bd2:	7d3b      	ldrb	r3, [r7, #20]
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	021b      	lsls	r3, r3, #8
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[5];
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000be6:	7d7b      	ldrb	r3, [r7, #21]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	4313      	orrs	r3, r2
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[6] << 8;
 8000bf4:	7dbb      	ldrb	r3, [r7, #22]
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	b29a      	uxth	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[7];
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000c08:	7dfb      	ldrb	r3, [r7, #23]
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b29a      	uxth	r2, r3
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f000 f910 	bl	8000e3c <FT_CAN_ProcessData>
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000c1c:	7c3b      	ldrb	r3, [r7, #16]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000c26:	e105      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//messages 2, 6, etc
			else if((buffer[0] % 4) == 2)
 8000c28:	7c3b      	ldrb	r3, [r7, #16]
 8000c2a:	f003 0303 	and.w	r3, r3, #3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d145      	bne.n	8000cc0 <FT_CAN_ReceiveData+0x6a0>
			{
				FT_Data_Struct->data_id  	  = buffer[1] << 8;
 8000c34:	7c7b      	ldrb	r3, [r7, #17]
 8000c36:	b29b      	uxth	r3, r3
 8000c38:	021b      	lsls	r3, r3, #8
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_id 	 |= buffer[2];
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000c48:	7cbb      	ldrb	r3, [r7, #18]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	b29a      	uxth	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				FT_Data_Struct->data_content  = buffer[3] << 8;
 8000c56:	7cfb      	ldrb	r3, [r7, #19]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_Data_Struct->data_content |= buffer[4];
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000c6a:	7d3b      	ldrb	r3, [r7, #20]
 8000c6c:	b29b      	uxth	r3, r3
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	b29a      	uxth	r2, r3
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				FT_CAN_ProcessData(FT_Data_Struct);
 8000c78:	6878      	ldr	r0, [r7, #4]
 8000c7a:	f000 f8df 	bl	8000e3c <FT_CAN_ProcessData>

				if(DLC == 8)
 8000c7e:	7fbb      	ldrb	r3, [r7, #30]
 8000c80:	2b08      	cmp	r3, #8
 8000c82:	d117      	bne.n	8000cb4 <FT_CAN_ReceiveData+0x694>
				{
					FT_Data_Struct->data_id  	 = buffer[5] << 8;
 8000c84:	7d7b      	ldrb	r3, [r7, #21]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	021b      	lsls	r3, r3, #8
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	|= buffer[6];
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000c98:	7dbb      	ldrb	r3, [r7, #22]
 8000c9a:	b29b      	uxth	r3, r3
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content = buffer[7] << 8;
 8000ca6:	7dfb      	ldrb	r3, [r7, #23]
 8000ca8:	b29b      	uxth	r3, r3
 8000caa:	021b      	lsls	r3, r3, #8
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000cb4:	7c3b      	ldrb	r3, [r7, #16]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000cbe:	e0b9      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 3, 7, etc
			else if((buffer[0] % 4) == 3)
 8000cc0:	7c3b      	ldrb	r3, [r7, #16]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	2b03      	cmp	r3, #3
 8000cca:	d156      	bne.n	8000d7a <FT_CAN_ReceiveData+0x75a>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000ccc:	7c3b      	ldrb	r3, [r7, #16]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d10c      	bne.n	8000cf6 <FT_CAN_ReceiveData+0x6d6>
				{
					FT_Data_Struct->data_content |= buffer[1];
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000ce2:	7c7b      	ldrb	r3, [r7, #17]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	b29a      	uxth	r2, r3
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 f8a3 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC >= 6)
 8000cf6:	7fbb      	ldrb	r3, [r7, #30]
 8000cf8:	2b05      	cmp	r3, #5
 8000cfa:	d924      	bls.n	8000d46 <FT_CAN_ReceiveData+0x726>
				{
					FT_Data_Struct->data_id  	  = buffer[2] << 8;
 8000cfc:	7cbb      	ldrb	r3, [r7, #18]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[3];
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000d10:	7cfb      	ldrb	r3, [r7, #19]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[4] << 8;
 8000d1e:	7d3b      	ldrb	r3, [r7, #20]
 8000d20:	b29b      	uxth	r3, r3
 8000d22:	021b      	lsls	r3, r3, #8
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[5];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000d32:	7d7b      	ldrb	r3, [r7, #21]
 8000d34:	b29b      	uxth	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f000 f87b 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000d46:	7fbb      	ldrb	r3, [r7, #30]
 8000d48:	2b08      	cmp	r3, #8
 8000d4a:	d110      	bne.n	8000d6e <FT_CAN_ReceiveData+0x74e>
				{
					FT_Data_Struct->data_id  = buffer[6] << 8;
 8000d4c:	7dbb      	ldrb	r3, [r7, #22]
 8000d4e:	b29b      	uxth	r3, r3
 8000d50:	021b      	lsls	r3, r3, #8
 8000d52:	b29a      	uxth	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id |= buffer[7];
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000d60:	7dfb      	ldrb	r3, [r7, #23]
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	4313      	orrs	r3, r2
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				}

				FT_Data_Struct->data_last_seg = buffer[0];
 8000d6e:	7c3b      	ldrb	r3, [r7, #16]
 8000d70:	b29a      	uxth	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000d78:	e05c      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			}
			//Messages 4, 8, etc
			else if((buffer[0] % 4) == 0)
 8000d7a:	7c3b      	ldrb	r3, [r7, #16]
 8000d7c:	f003 0303 	and.w	r3, r3, #3
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d156      	bne.n	8000e34 <FT_CAN_ReceiveData+0x814>
			{
				if(buffer[0] == (FT_Data_Struct->data_last_seg + 1))
 8000d86:	7c3b      	ldrb	r3, [r7, #16]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8000d90:	3301      	adds	r3, #1
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d113      	bne.n	8000dbe <FT_CAN_ReceiveData+0x79e>
				{
					FT_Data_Struct->data_content  = buffer[1] << 8;
 8000d96:	7c7b      	ldrb	r3, [r7, #17]
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	021b      	lsls	r3, r3, #8
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[2];
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000daa:	7cbb      	ldrb	r3, [r7, #18]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	4313      	orrs	r3, r2
 8000db0:	b29a      	uxth	r2, r3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000db8:	6878      	ldr	r0, [r7, #4]
 8000dba:	f000 f83f 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC >= 7)
 8000dbe:	7fbb      	ldrb	r3, [r7, #30]
 8000dc0:	2b06      	cmp	r3, #6
 8000dc2:	d924      	bls.n	8000e0e <FT_CAN_ReceiveData+0x7ee>
				{
					FT_Data_Struct->data_id  	  = buffer[3] << 8;
 8000dc4:	7cfb      	ldrb	r3, [r7, #19]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	021b      	lsls	r3, r3, #8
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_id 	 |= buffer[4];
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000dd8:	7d3b      	ldrb	r3, [r7, #20]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
					FT_Data_Struct->data_content  = buffer[5] << 8;
 8000de6:	7d7b      	ldrb	r3, [r7, #21]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_Data_Struct->data_content |= buffer[6];
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8000dfa:	7dbb      	ldrb	r3, [r7, #22]
 8000dfc:	b29b      	uxth	r3, r3
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
					FT_CAN_ProcessData(FT_Data_Struct);
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 f817 	bl	8000e3c <FT_CAN_ProcessData>
				}

				if(DLC == 8)
 8000e0e:	7fbb      	ldrb	r3, [r7, #30]
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d106      	bne.n	8000e22 <FT_CAN_ReceiveData+0x802>
					FT_Data_Struct->data_id	= buffer[7] << 8;
 8000e14:	7dfb      	ldrb	r3, [r7, #23]
 8000e16:	b29b      	uxth	r3, r3
 8000e18:	021b      	lsls	r3, r3, #8
 8000e1a:	b29a      	uxth	r2, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

				FT_Data_Struct->data_last_seg = buffer[0];
 8000e22:	7c3b      	ldrb	r3, [r7, #16]
 8000e24:	b29a      	uxth	r2, r3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

				return;
 8000e2c:	e002      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
		return;
 8000e2e:	bf00      	nop
 8000e30:	e000      	b.n	8000e34 <FT_CAN_ReceiveData+0x814>
			return;
 8000e32:	bf00      	nop
			}
		}
#endif
	}
}
 8000e34:	3720      	adds	r7, #32
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <FT_CAN_ProcessData>:

#ifndef FT_CAN_FIXED

static void FT_CAN_ProcessData(FT_Data* FT_Data_Struct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint16_t id = FT_Data_Struct->data_id;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000e4a:	81fb      	strh	r3, [r7, #14]
	uint16_t data = FT_Data_Struct->data_content;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8000e52:	81bb      	strh	r3, [r7, #12]

	if((id & 0x1) == 0x1)
 8000e54:	89fb      	ldrh	r3, [r7, #14]
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f040 825a 	bne.w	8001314 <FT_CAN_ProcessData+0x4d8>
		return;


	switch(id >> 1)
 8000e60:	89fb      	ldrh	r3, [r7, #14]
 8000e62:	085b      	lsrs	r3, r3, #1
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	2b8d      	cmp	r3, #141	; 0x8d
 8000e68:	f300 8166 	bgt.w	8001138 <FT_CAN_ProcessData+0x2fc>
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	dc41      	bgt.n	8000ef4 <FT_CAN_ProcessData+0xb8>
 8000e70:	e249      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
 8000e72:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8000e76:	2b1b      	cmp	r3, #27
 8000e78:	f200 8245 	bhi.w	8001306 <FT_CAN_ProcessData+0x4ca>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <FT_CAN_ProcessData+0x48>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	080012d5 	.word	0x080012d5
 8000e88:	08001307 	.word	0x08001307
 8000e8c:	08001307 	.word	0x08001307
 8000e90:	08001307 	.word	0x08001307
 8000e94:	08001307 	.word	0x08001307
 8000e98:	08001307 	.word	0x08001307
 8000e9c:	08001307 	.word	0x08001307
 8000ea0:	08001307 	.word	0x08001307
 8000ea4:	08001307 	.word	0x08001307
 8000ea8:	08001307 	.word	0x08001307
 8000eac:	08001307 	.word	0x08001307
 8000eb0:	08001307 	.word	0x08001307
 8000eb4:	08001307 	.word	0x08001307
 8000eb8:	08001307 	.word	0x08001307
 8000ebc:	08001307 	.word	0x08001307
 8000ec0:	08001307 	.word	0x08001307
 8000ec4:	08001307 	.word	0x08001307
 8000ec8:	08001307 	.word	0x08001307
 8000ecc:	080012df 	.word	0x080012df
 8000ed0:	08001307 	.word	0x08001307
 8000ed4:	08001307 	.word	0x08001307
 8000ed8:	08001307 	.word	0x08001307
 8000edc:	08001307 	.word	0x08001307
 8000ee0:	08001307 	.word	0x08001307
 8000ee4:	080011d3 	.word	0x080011d3
 8000ee8:	080012e9 	.word	0x080012e9
 8000eec:	080012f3 	.word	0x080012f3
 8000ef0:	080012fd 	.word	0x080012fd
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	2b8c      	cmp	r3, #140	; 0x8c
 8000ef8:	f200 8205 	bhi.w	8001306 <FT_CAN_ProcessData+0x4ca>
 8000efc:	a201      	add	r2, pc, #4	; (adr r2, 8000f04 <FT_CAN_ProcessData+0xc8>)
 8000efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f02:	bf00      	nop
 8000f04:	0800114b 	.word	0x0800114b
 8000f08:	08001157 	.word	0x08001157
 8000f0c:	08001163 	.word	0x08001163
 8000f10:	0800116d 	.word	0x0800116d
 8000f14:	08001177 	.word	0x08001177
 8000f18:	08001183 	.word	0x08001183
 8000f1c:	0800118d 	.word	0x0800118d
 8000f20:	0800120f 	.word	0x0800120f
 8000f24:	08001219 	.word	0x08001219
 8000f28:	08001223 	.word	0x08001223
 8000f2c:	0800122d 	.word	0x0800122d
 8000f30:	08001237 	.word	0x08001237
 8000f34:	08001243 	.word	0x08001243
 8000f38:	0800124f 	.word	0x0800124f
 8000f3c:	0800125b 	.word	0x0800125b
 8000f40:	08001267 	.word	0x08001267
 8000f44:	08001197 	.word	0x08001197
 8000f48:	08001307 	.word	0x08001307
 8000f4c:	08001307 	.word	0x08001307
 8000f50:	08001307 	.word	0x08001307
 8000f54:	08001307 	.word	0x08001307
 8000f58:	08001307 	.word	0x08001307
 8000f5c:	08001307 	.word	0x08001307
 8000f60:	08001307 	.word	0x08001307
 8000f64:	08001307 	.word	0x08001307
 8000f68:	08001307 	.word	0x08001307
 8000f6c:	08001307 	.word	0x08001307
 8000f70:	08001307 	.word	0x08001307
 8000f74:	08001307 	.word	0x08001307
 8000f78:	08001307 	.word	0x08001307
 8000f7c:	08001307 	.word	0x08001307
 8000f80:	08001307 	.word	0x08001307
 8000f84:	08001307 	.word	0x08001307
 8000f88:	08001307 	.word	0x08001307
 8000f8c:	08001307 	.word	0x08001307
 8000f90:	08001307 	.word	0x08001307
 8000f94:	08001307 	.word	0x08001307
 8000f98:	08001307 	.word	0x08001307
 8000f9c:	080011a3 	.word	0x080011a3
 8000fa0:	08001307 	.word	0x08001307
 8000fa4:	08001307 	.word	0x08001307
 8000fa8:	08001307 	.word	0x08001307
 8000fac:	08001307 	.word	0x08001307
 8000fb0:	08001307 	.word	0x08001307
 8000fb4:	08001307 	.word	0x08001307
 8000fb8:	08001307 	.word	0x08001307
 8000fbc:	08001307 	.word	0x08001307
 8000fc0:	08001307 	.word	0x08001307
 8000fc4:	08001307 	.word	0x08001307
 8000fc8:	08001307 	.word	0x08001307
 8000fcc:	08001307 	.word	0x08001307
 8000fd0:	08001307 	.word	0x08001307
 8000fd4:	08001307 	.word	0x08001307
 8000fd8:	08001307 	.word	0x08001307
 8000fdc:	08001307 	.word	0x08001307
 8000fe0:	08001307 	.word	0x08001307
 8000fe4:	08001307 	.word	0x08001307
 8000fe8:	08001307 	.word	0x08001307
 8000fec:	08001307 	.word	0x08001307
 8000ff0:	08001307 	.word	0x08001307
 8000ff4:	08001307 	.word	0x08001307
 8000ff8:	08001307 	.word	0x08001307
 8000ffc:	08001307 	.word	0x08001307
 8001000:	08001307 	.word	0x08001307
 8001004:	08001307 	.word	0x08001307
 8001008:	080011af 	.word	0x080011af
 800100c:	080011dd 	.word	0x080011dd
 8001010:	080011e7 	.word	0x080011e7
 8001014:	080011f1 	.word	0x080011f1
 8001018:	080011fb 	.word	0x080011fb
 800101c:	08001205 	.word	0x08001205
 8001020:	08001271 	.word	0x08001271
 8001024:	0800127b 	.word	0x0800127b
 8001028:	08001285 	.word	0x08001285
 800102c:	0800128f 	.word	0x0800128f
 8001030:	08001299 	.word	0x08001299
 8001034:	080012a3 	.word	0x080012a3
 8001038:	080012ad 	.word	0x080012ad
 800103c:	080012b7 	.word	0x080012b7
 8001040:	080012c1 	.word	0x080012c1
 8001044:	080012cb 	.word	0x080012cb
 8001048:	08001307 	.word	0x08001307
 800104c:	08001307 	.word	0x08001307
 8001050:	08001307 	.word	0x08001307
 8001054:	08001307 	.word	0x08001307
 8001058:	08001307 	.word	0x08001307
 800105c:	08001307 	.word	0x08001307
 8001060:	08001307 	.word	0x08001307
 8001064:	08001307 	.word	0x08001307
 8001068:	08001307 	.word	0x08001307
 800106c:	08001307 	.word	0x08001307
 8001070:	08001307 	.word	0x08001307
 8001074:	08001307 	.word	0x08001307
 8001078:	08001307 	.word	0x08001307
 800107c:	08001307 	.word	0x08001307
 8001080:	08001307 	.word	0x08001307
 8001084:	08001307 	.word	0x08001307
 8001088:	08001307 	.word	0x08001307
 800108c:	08001307 	.word	0x08001307
 8001090:	08001307 	.word	0x08001307
 8001094:	08001307 	.word	0x08001307
 8001098:	08001307 	.word	0x08001307
 800109c:	08001307 	.word	0x08001307
 80010a0:	08001307 	.word	0x08001307
 80010a4:	08001307 	.word	0x08001307
 80010a8:	08001307 	.word	0x08001307
 80010ac:	08001307 	.word	0x08001307
 80010b0:	08001307 	.word	0x08001307
 80010b4:	08001307 	.word	0x08001307
 80010b8:	08001307 	.word	0x08001307
 80010bc:	08001307 	.word	0x08001307
 80010c0:	08001307 	.word	0x08001307
 80010c4:	08001307 	.word	0x08001307
 80010c8:	08001307 	.word	0x08001307
 80010cc:	08001307 	.word	0x08001307
 80010d0:	08001307 	.word	0x08001307
 80010d4:	08001307 	.word	0x08001307
 80010d8:	08001307 	.word	0x08001307
 80010dc:	08001307 	.word	0x08001307
 80010e0:	08001307 	.word	0x08001307
 80010e4:	08001307 	.word	0x08001307
 80010e8:	08001307 	.word	0x08001307
 80010ec:	08001307 	.word	0x08001307
 80010f0:	08001307 	.word	0x08001307
 80010f4:	08001307 	.word	0x08001307
 80010f8:	08001307 	.word	0x08001307
 80010fc:	08001307 	.word	0x08001307
 8001100:	08001307 	.word	0x08001307
 8001104:	08001307 	.word	0x08001307
 8001108:	08001307 	.word	0x08001307
 800110c:	08001307 	.word	0x08001307
 8001110:	08001307 	.word	0x08001307
 8001114:	08001307 	.word	0x08001307
 8001118:	08001307 	.word	0x08001307
 800111c:	08001307 	.word	0x08001307
 8001120:	08001307 	.word	0x08001307
 8001124:	08001307 	.word	0x08001307
 8001128:	08001307 	.word	0x08001307
 800112c:	08001307 	.word	0x08001307
 8001130:	080011bb 	.word	0x080011bb
 8001134:	080011c7 	.word	0x080011c7
 8001138:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800113c:	f280 80e3 	bge.w	8001306 <FT_CAN_ProcessData+0x4ca>
 8001140:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8001144:	f6bf ae95 	bge.w	8000e72 <FT_CAN_ProcessData+0x36>
 8001148:	e0dd      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
	{
		case 0x0001: //TPS
			FT_Data_Struct->tps = data;
 800114a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
			break;
 8001154:	e0d7      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0002: //MAP
			FT_Data_Struct->map = data;
 8001156:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			break;
 8001160:	e0d1      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0003: //IAT
			FT_Data_Struct->iat = data;
 8001162:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 800116a:	e0cc      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0004: //ECT
			FT_Data_Struct->ect = data;
 800116c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001174:	e0c7      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0005: //Oil Pressure
			FT_Data_Struct->oil_pressure = data;
 8001176:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			break;
 8001180:	e0c1      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0006: //Fuel Pressure
			FT_Data_Struct->fuel_pressure = data;
 8001182:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800118a:	e0bc      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0007: //Coolant Pressure
			FT_Data_Struct->coolant_pressure = data;
 800118c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001194:	e0b7      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0011: //Gear
			FT_Data_Struct->gear = data;
 8001196:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			break;
 80011a0:	e0b1      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0027: //Exhaust Lambda
			FT_Data_Struct->lambda = data;
 80011a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			break;
 80011ac:	e0ab      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0042: //RPM
			FT_Data_Struct->rpm = data;
 80011ae:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
			break;
 80011b8:	e0a5      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x008C: //Oil Temperature
			FT_Data_Struct->oil_temperature = data;
 80011ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
			break;
 80011c4:	e09f      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x008D: //Pit Limit Switch
			FT_Data_Struct->pit_limiter = data;
 80011c6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			break;
 80011d0:	e099      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0150: //Total Fuel Flow
			FT_Data_Struct->fuel_flow_total = data;
 80011d2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	87da      	strh	r2, [r3, #62]	; 0x3e
			break;
 80011da:	e094      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
			break;
#endif

#ifdef FT_CAN_TIMING
		case 0x0043: //Injection Bank A Timing
			FT_Data_Struct->injection_bank_a_time = data;
 80011dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	805a      	strh	r2, [r3, #2]
			break;
 80011e4:	e08f      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0044: //Injection Bank B Timing
			FT_Data_Struct->injection_bank_b_time = data;
 80011e6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	809a      	strh	r2, [r3, #4]
			break;
 80011ee:	e08a      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0045: //Injection Bank A Duty Cycle
			FT_Data_Struct->injection_bank_a_duty_cycle = data;
 80011f0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	80da      	strh	r2, [r3, #6]
			break;
 80011f8:	e085      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0046: //Injection Bank B Duty Cycle
			FT_Data_Struct->injection_bank_b_duty_cycle = data;
 80011fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	811a      	strh	r2, [r3, #8]
			break;
 8001202:	e080      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0047: //Ignition Advance
			FT_Data_Struct->ignition_advance = data;
 8001204:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	801a      	strh	r2, [r3, #0]
			break;
 800120c:	e07b      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
			break;
#endif

#ifdef FT_CAN_EXTRA
		case 0x0008: //Launch Mode
			FT_Data_Struct->launch_mode = data;
 800120e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	841a      	strh	r2, [r3, #32]
			break;
 8001216:	e076      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0009: //Battery Voltage
			FT_Data_Struct->battery_voltage = data;
 8001218:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	819a      	strh	r2, [r3, #12]
			break;
 8001220:	e071      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000A: //Traction Speed
			FT_Data_Struct->traction_speed = data;
 8001222:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 800122a:	e06c      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000B: //Drag Speed
			FT_Data_Struct->drag_speed = data;
 800122c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 8001234:	e067      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000C: //Wheel Speed FL
			FT_Data_Struct->wheel_speed_fl = data;
 8001236:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
			break;
 8001240:	e061      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000D: //Wheel Speed FR
			FT_Data_Struct->wheel_speed_fr = data;
 8001242:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
			break;
 800124c:	e05b      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000E: //Wheel Speed RL
			FT_Data_Struct->wheel_speed_rl = data;
 800124e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
			break;
 8001258:	e055      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x000F: //Wheel Speed RR
			FT_Data_Struct->wheel_speed_rr = data;
 800125a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			break;
 8001264:	e04f      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0010: //Driveshaft RPM
			FT_Data_Struct->driveshaft_rpm = data;
 8001266:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	831a      	strh	r2, [r3, #24]
			break;
 800126e:	e04a      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0048: //2-Step
			FT_Data_Struct->two_step_signal = data;
 8001270:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 8001278:	e045      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0049: //3-Step
			FT_Data_Struct->three_step_signal = data;
 800127a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8001282:	e040      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004A: //Burnout
			FT_Data_Struct->burnout_signal = data;
 8001284:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	845a      	strh	r2, [r3, #34]	; 0x22
			break;
 800128c:	e03b      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004B: //Fuel Cut
			FT_Data_Struct->fuel_cut = data;
 800128e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	82da      	strh	r2, [r3, #22]
			break;
 8001296:	e036      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004C: //Air Conditioning
			FT_Data_Struct->air_conditioning = data;
 8001298:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	815a      	strh	r2, [r3, #10]
			break;
 80012a0:	e031      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004D: //ElectroFAN
			FT_Data_Struct->electro_fan = data;
 80012a2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	825a      	strh	r2, [r3, #18]
			break;
 80012aa:	e02c      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004E: //Gear Cut
			FT_Data_Struct->gear_cut = data;
 80012ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	835a      	strh	r2, [r3, #26]
			break;
 80012b4:	e027      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x004F: //Gear Retard
			FT_Data_Struct->gear_retard = data;
 80012b6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	839a      	strh	r2, [r3, #28]
			break;
 80012be:	e022      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0050: //Gear Sensor Voltage
			FT_Data_Struct->gear_sensor_voltage = data;
 80012c0:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	83da      	strh	r2, [r3, #30]
			break;
 80012c8:	e01d      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0051: //Lambda Meter (Average)
			FT_Data_Struct->lambda_average = data;
 80012ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	829a      	strh	r2, [r3, #20]
			break;
 80012d2:	e018      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0138: //Battery Temperature
			FT_Data_Struct->battery_temperature = data;
 80012d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	81da      	strh	r2, [r3, #14]
			break;
 80012dc:	e013      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x014A: //Self Dial Time
			FT_Data_Struct->self_dial = data;
 80012de:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 80012e6:	e00e      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0151: //Brake Pressure
			FT_Data_Struct->brake_pressure = data;
 80012e8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	821a      	strh	r2, [r3, #16]
			break;
 80012f0:	e009      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0152: //Generic Outputs State
			FT_Data_Struct->generic_outputs_state = data;
 80012f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 80012fa:	e004      	b.n	8001306 <FT_CAN_ProcessData+0x4ca>
		case 0x0153: //Day/Night State
			FT_Data_Struct->day_night_state = data;
 80012fc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001304:	bf00      	nop
	}
#endif

	FT_CAN_ProcessCustomData(id, data);
 8001306:	89ba      	ldrh	r2, [r7, #12]
 8001308:	89fb      	ldrh	r3, [r7, #14]
 800130a:	4611      	mov	r1, r2
 800130c:	4618      	mov	r0, r3
 800130e:	f000 f805 	bl	800131c <FT_CAN_ProcessCustomData>

	return;
 8001312:	e000      	b.n	8001316 <FT_CAN_ProcessData+0x4da>
		return;
 8001314:	bf00      	nop
}
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <FT_CAN_ProcessCustomData>:

__weak void FT_CAN_ProcessCustomData(uint16_t id, uint16_t data)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	460a      	mov	r2, r1
 8001326:	80fb      	strh	r3, [r7, #6]
 8001328:	4613      	mov	r3, r2
 800132a:	80bb      	strh	r3, [r7, #4]
	UNUSED(id);
	UNUSED(data);
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133c:	f005 fcaa 	bl	8006c94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001340:	f000 f8d6 	bl	80014f0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001344:	f000 f94a 	bl	80015dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f000 fbc2 	bl	8001ad0 <MX_GPIO_Init>
  MX_DMA_Init();
 800134c:	f000 fb88 	bl	8001a60 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001350:	f000 fb30 	bl	80019b4 <MX_SDIO_SD_Init>
  MX_ADC1_Init();
 8001354:	f000 f96a 	bl	800162c <MX_ADC1_Init>
  MX_RTC_Init();
 8001358:	f000 fafc 	bl	8001954 <MX_RTC_Init>
  MX_FATFS_Init();
 800135c:	f010 f91e 	bl	801159c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001360:	f015 ff6c 	bl	801723c <MX_USB_DEVICE_Init>
  MX_ADC2_Init();
 8001364:	f000 f9fa 	bl	800175c <MX_ADC2_Init>
  MX_CAN1_Init();
 8001368:	f000 fa90 	bl	800188c <MX_CAN1_Init>
  MX_I2C1_Init();
 800136c:	f000 fac4 	bl	80018f8 <MX_I2C1_Init>
  MX_TIM7_Init();
 8001370:	f000 fb40 	bl	80019f4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  Principal_Init(&hcan1, &hi2c1, &htim7);
 8001374:	4a58      	ldr	r2, [pc, #352]	; (80014d8 <main+0x1a0>)
 8001376:	4959      	ldr	r1, [pc, #356]	; (80014dc <main+0x1a4>)
 8001378:	4859      	ldr	r0, [pc, #356]	; (80014e0 <main+0x1a8>)
 800137a:	f002 fad3 	bl	8003924 <Principal_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //Checks card detect pin level change for datalogger initialization or deinitialization
	  Principal_Card_Detection();
 800137e:	f004 fec3 	bl	8006108 <Principal_Card_Detection>

	  //Checks if data is being saved and starts saving if conditions are met
	  if((flagDatalogger == DL_NO_SAVE) || (flagDatalogger == DL_BUT_PRESS))
 8001382:	4b58      	ldr	r3, [pc, #352]	; (80014e4 <main+0x1ac>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <main+0x5a>
 800138a:	4b56      	ldr	r3, [pc, #344]	; (80014e4 <main+0x1ac>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	2b03      	cmp	r3, #3
 8001390:	d101      	bne.n	8001396 <main+0x5e>
		  Principal_Datalogger_Start();
 8001392:	f004 fcd3 	bl	8005d3c <Principal_Datalogger_Start>

	  //Analog inputs 1-4 CAN message
	  if((accMsg[ANALOG_1_4] >= perMsg[ANALOG_1_4]) && (perMsg[ANALOG_1_4] != MSG_DISABLED))
 8001396:	4b54      	ldr	r3, [pc, #336]	; (80014e8 <main+0x1b0>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a54      	ldr	r2, [pc, #336]	; (80014ec <main+0x1b4>)
 800139c:	8812      	ldrh	r2, [r2, #0]
 800139e:	4293      	cmp	r3, r2
 80013a0:	d30e      	bcc.n	80013c0 <main+0x88>
 80013a2:	4b52      	ldr	r3, [pc, #328]	; (80014ec <main+0x1b4>)
 80013a4:	881b      	ldrh	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00a      	beq.n	80013c0 <main+0x88>
	  {
		  accMsg[ANALOG_1_4] -= perMsg[ANALOG_1_4];
 80013aa:	4b4f      	ldr	r3, [pc, #316]	; (80014e8 <main+0x1b0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a4f      	ldr	r2, [pc, #316]	; (80014ec <main+0x1b4>)
 80013b0:	8812      	ldrh	r2, [r2, #0]
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	4a4c      	ldr	r2, [pc, #304]	; (80014e8 <main+0x1b0>)
 80013b6:	6013      	str	r3, [r2, #0]
		  Principal_Transmit_Msg(&hcan1, ANALOG_1_4);
 80013b8:	2100      	movs	r1, #0
 80013ba:	4849      	ldr	r0, [pc, #292]	; (80014e0 <main+0x1a8>)
 80013bc:	f000 ffba 	bl	8002334 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 5-8 CAN message
	  if((accMsg[ANALOG_5_8] >= perMsg[ANALOG_5_8]) && (perMsg[ANALOG_5_8] != MSG_DISABLED))
 80013c0:	4b49      	ldr	r3, [pc, #292]	; (80014e8 <main+0x1b0>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4a49      	ldr	r2, [pc, #292]	; (80014ec <main+0x1b4>)
 80013c6:	8852      	ldrh	r2, [r2, #2]
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d30e      	bcc.n	80013ea <main+0xb2>
 80013cc:	4b47      	ldr	r3, [pc, #284]	; (80014ec <main+0x1b4>)
 80013ce:	885b      	ldrh	r3, [r3, #2]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00a      	beq.n	80013ea <main+0xb2>
	  {
		  accMsg[ANALOG_5_8] -= perMsg[ANALOG_5_8];
 80013d4:	4b44      	ldr	r3, [pc, #272]	; (80014e8 <main+0x1b0>)
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	4a44      	ldr	r2, [pc, #272]	; (80014ec <main+0x1b4>)
 80013da:	8852      	ldrh	r2, [r2, #2]
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	4a42      	ldr	r2, [pc, #264]	; (80014e8 <main+0x1b0>)
 80013e0:	6053      	str	r3, [r2, #4]
		  Principal_Transmit_Msg(&hcan1, ANALOG_5_8);
 80013e2:	2101      	movs	r1, #1
 80013e4:	483e      	ldr	r0, [pc, #248]	; (80014e0 <main+0x1a8>)
 80013e6:	f000 ffa5 	bl	8002334 <Principal_Transmit_Msg>
	  }

	  //Analog inputs 9-12 CAN message
	  if((accMsg[ANALOG_9_12] >= perMsg[ANALOG_9_12]) && (perMsg[ANALOG_9_12] != MSG_DISABLED))
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <main+0x1b0>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	4a3f      	ldr	r2, [pc, #252]	; (80014ec <main+0x1b4>)
 80013f0:	8892      	ldrh	r2, [r2, #4]
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d30e      	bcc.n	8001414 <main+0xdc>
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <main+0x1b4>)
 80013f8:	889b      	ldrh	r3, [r3, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00a      	beq.n	8001414 <main+0xdc>
	  {
		  accMsg[ANALOG_9_12] -= perMsg[ANALOG_9_12];
 80013fe:	4b3a      	ldr	r3, [pc, #232]	; (80014e8 <main+0x1b0>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	4a3a      	ldr	r2, [pc, #232]	; (80014ec <main+0x1b4>)
 8001404:	8892      	ldrh	r2, [r2, #4]
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	4a37      	ldr	r2, [pc, #220]	; (80014e8 <main+0x1b0>)
 800140a:	6093      	str	r3, [r2, #8]
		  Principal_Transmit_Msg(&hcan1, ANALOG_9_12);
 800140c:	2102      	movs	r1, #2
 800140e:	4834      	ldr	r0, [pc, #208]	; (80014e0 <main+0x1a8>)
 8001410:	f000 ff90 	bl	8002334 <Principal_Transmit_Msg>
	  }

	  //RTC, both date and time
	  if((accMsg[RTC_MSG] >= perMsg[RTC_MSG]) && (perMsg[RTC_MSG] != MSG_DISABLED))
 8001414:	4b34      	ldr	r3, [pc, #208]	; (80014e8 <main+0x1b0>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4a34      	ldr	r2, [pc, #208]	; (80014ec <main+0x1b4>)
 800141a:	88d2      	ldrh	r2, [r2, #6]
 800141c:	4293      	cmp	r3, r2
 800141e:	d30e      	bcc.n	800143e <main+0x106>
 8001420:	4b32      	ldr	r3, [pc, #200]	; (80014ec <main+0x1b4>)
 8001422:	88db      	ldrh	r3, [r3, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d00a      	beq.n	800143e <main+0x106>
	  {
		  accMsg[RTC_MSG] -= perMsg[RTC_MSG];
 8001428:	4b2f      	ldr	r3, [pc, #188]	; (80014e8 <main+0x1b0>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	4a2f      	ldr	r2, [pc, #188]	; (80014ec <main+0x1b4>)
 800142e:	88d2      	ldrh	r2, [r2, #6]
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	4a2d      	ldr	r2, [pc, #180]	; (80014e8 <main+0x1b0>)
 8001434:	60d3      	str	r3, [r2, #12]
		  Principal_Transmit_Msg(&hcan1, RTC_MSG);
 8001436:	2103      	movs	r1, #3
 8001438:	4829      	ldr	r0, [pc, #164]	; (80014e0 <main+0x1a8>)
 800143a:	f000 ff7b 	bl	8002334 <Principal_Transmit_Msg>
	  }

	  //Inputs and datalogger verify CAN message
	  if((accMsg[VERIFY_MSG] >= perMsg[VERIFY_MSG]) && (perMsg[VERIFY_MSG] != MSG_DISABLED))
 800143e:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <main+0x1b0>)
 8001440:	691b      	ldr	r3, [r3, #16]
 8001442:	4a2a      	ldr	r2, [pc, #168]	; (80014ec <main+0x1b4>)
 8001444:	8912      	ldrh	r2, [r2, #8]
 8001446:	4293      	cmp	r3, r2
 8001448:	d30e      	bcc.n	8001468 <main+0x130>
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <main+0x1b4>)
 800144c:	891b      	ldrh	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00a      	beq.n	8001468 <main+0x130>
	  {
		  accMsg[VERIFY_MSG] -= perMsg[VERIFY_MSG];
 8001452:	4b25      	ldr	r3, [pc, #148]	; (80014e8 <main+0x1b0>)
 8001454:	691b      	ldr	r3, [r3, #16]
 8001456:	4a25      	ldr	r2, [pc, #148]	; (80014ec <main+0x1b4>)
 8001458:	8912      	ldrh	r2, [r2, #8]
 800145a:	1a9b      	subs	r3, r3, r2
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <main+0x1b0>)
 800145e:	6113      	str	r3, [r2, #16]
		  Principal_Transmit_Msg(&hcan1, VERIFY_MSG);
 8001460:	2104      	movs	r1, #4
 8001462:	481f      	ldr	r0, [pc, #124]	; (80014e0 <main+0x1a8>)
 8001464:	f000 ff66 	bl	8002334 <Principal_Transmit_Msg>
	  }

	  //ECU saved data (no transmission)
	  if((accMsg[ECU_SAVE] >= perMsg[ECU_SAVE]) && (perMsg[ECU_SAVE] != MSG_DISABLED))
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <main+0x1b0>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <main+0x1b4>)
 800146e:	8992      	ldrh	r2, [r2, #12]
 8001470:	4293      	cmp	r3, r2
 8001472:	d30e      	bcc.n	8001492 <main+0x15a>
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <main+0x1b4>)
 8001476:	899b      	ldrh	r3, [r3, #12]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d00a      	beq.n	8001492 <main+0x15a>
	  {
		  accMsg[ECU_SAVE] -= perMsg[ECU_SAVE];
 800147c:	4b1a      	ldr	r3, [pc, #104]	; (80014e8 <main+0x1b0>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a1a      	ldr	r2, [pc, #104]	; (80014ec <main+0x1b4>)
 8001482:	8992      	ldrh	r2, [r2, #12]
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	4a18      	ldr	r2, [pc, #96]	; (80014e8 <main+0x1b0>)
 8001488:	6193      	str	r3, [r2, #24]
		  Principal_Transmit_Msg(&hcan1, ECU_SAVE);
 800148a:	2106      	movs	r1, #6
 800148c:	4814      	ldr	r0, [pc, #80]	; (80014e0 <main+0x1a8>)
 800148e:	f000 ff51 	bl	8002334 <Principal_Transmit_Msg>
	  }

	  //PDM saved data (no transmission)
	  if((accMsg[PDM_SAVE] >= perMsg[PDM_SAVE]) && (perMsg[PDM_SAVE] != MSG_DISABLED))
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <main+0x1b0>)
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	4a15      	ldr	r2, [pc, #84]	; (80014ec <main+0x1b4>)
 8001498:	89d2      	ldrh	r2, [r2, #14]
 800149a:	4293      	cmp	r3, r2
 800149c:	d30e      	bcc.n	80014bc <main+0x184>
 800149e:	4b13      	ldr	r3, [pc, #76]	; (80014ec <main+0x1b4>)
 80014a0:	89db      	ldrh	r3, [r3, #14]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00a      	beq.n	80014bc <main+0x184>
	  {
		  accMsg[PDM_SAVE] -= perMsg[PDM_SAVE];
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <main+0x1b0>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	4a10      	ldr	r2, [pc, #64]	; (80014ec <main+0x1b4>)
 80014ac:	89d2      	ldrh	r2, [r2, #14]
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	4a0d      	ldr	r2, [pc, #52]	; (80014e8 <main+0x1b0>)
 80014b2:	61d3      	str	r3, [r2, #28]
		  Principal_Transmit_Msg(&hcan1, PDM_SAVE);
 80014b4:	2107      	movs	r1, #7
 80014b6:	480a      	ldr	r0, [pc, #40]	; (80014e0 <main+0x1a8>)
 80014b8:	f000 ff3c 	bl	8002334 <Principal_Transmit_Msg>
	  }

	  if(accMsg[VERIFY_LEDS] >= MSG_FREQ_5HZ)
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <main+0x1b0>)
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	2bc7      	cmp	r3, #199	; 0xc7
 80014c2:	f67f af5c 	bls.w	800137e <main+0x46>
	  {
		  accMsg[VERIFY_LEDS] -= MSG_FREQ_5HZ;
 80014c6:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <main+0x1b0>)
 80014c8:	6a1b      	ldr	r3, [r3, #32]
 80014ca:	3bc8      	subs	r3, #200	; 0xc8
 80014cc:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <main+0x1b0>)
 80014ce:	6213      	str	r3, [r2, #32]
		  Principal_Verify_LEDs();
 80014d0:	f000 fe56 	bl	8002180 <Principal_Verify_LEDs>
	  Principal_Card_Detection();
 80014d4:	e753      	b.n	800137e <main+0x46>
 80014d6:	bf00      	nop
 80014d8:	200004e4 	.word	0x200004e4
 80014dc:	2000032c 	.word	0x2000032c
 80014e0:	20000304 	.word	0x20000304
 80014e4:	200066ea 	.word	0x200066ea
 80014e8:	2000674c 	.word	0x2000674c
 80014ec:	20006714 	.word	0x20006714

080014f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b094      	sub	sp, #80	; 0x50
 80014f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	2234      	movs	r2, #52	; 0x34
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f016 fc34 	bl	8017d6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001504:	f107 0308 	add.w	r3, r7, #8
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001514:	2300      	movs	r3, #0
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <SystemClock_Config+0xe4>)
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	4a2d      	ldr	r2, [pc, #180]	; (80015d4 <SystemClock_Config+0xe4>)
 800151e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001522:	6413      	str	r3, [r2, #64]	; 0x40
 8001524:	4b2b      	ldr	r3, [pc, #172]	; (80015d4 <SystemClock_Config+0xe4>)
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152c:	607b      	str	r3, [r7, #4]
 800152e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001530:	2300      	movs	r3, #0
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4b28      	ldr	r3, [pc, #160]	; (80015d8 <SystemClock_Config+0xe8>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a27      	ldr	r2, [pc, #156]	; (80015d8 <SystemClock_Config+0xe8>)
 800153a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800153e:	6013      	str	r3, [r2, #0]
 8001540:	4b25      	ldr	r3, [pc, #148]	; (80015d8 <SystemClock_Config+0xe8>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001548:	603b      	str	r3, [r7, #0]
 800154a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800154c:	2305      	movs	r3, #5
 800154e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001550:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001554:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001556:	2301      	movs	r3, #1
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001564:	2308      	movs	r3, #8
 8001566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001568:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800156c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800156e:	2302      	movs	r3, #2
 8001570:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8001572:	2306      	movs	r3, #6
 8001574:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001576:	2302      	movs	r3, #2
 8001578:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4618      	mov	r0, r3
 8001580:	f00a fee2 	bl	800c348 <HAL_RCC_OscConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800158a:	f000 fb47 	bl	8001c1c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800158e:	f00a f82b 	bl	800b5e8 <HAL_PWREx_EnableOverDrive>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001598:	f000 fb40 	bl	8001c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800159c:	230f      	movs	r3, #15
 800159e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015a0:	2302      	movs	r3, #2
 80015a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	2105      	movs	r1, #5
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00a f864 	bl	800b688 <HAL_RCC_ClockConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0xda>
  {
    Error_Handler();
 80015c6:	f000 fb29 	bl	8001c1c <Error_Handler>
  }
}
 80015ca:	bf00      	nop
 80015cc:	3750      	adds	r7, #80	; 0x50
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40007000 	.word	0x40007000

080015dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b098      	sub	sp, #96	; 0x60
 80015e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	225c      	movs	r2, #92	; 0x5c
 80015e6:	2100      	movs	r1, #0
 80015e8:	4618      	mov	r0, r3
 80015ea:	f016 fbbf 	bl	8017d6c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80015ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f2:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 80015f4:	2308      	movs	r3, #8
 80015f6:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80015f8:	23c0      	movs	r3, #192	; 0xc0
 80015fa:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80015fc:	2302      	movs	r3, #2
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001600:	2304      	movs	r3, #4
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001604:	2301      	movs	r3, #1
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 8001608:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800160c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800160e:	2300      	movs	r3, #0
 8001610:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4618      	mov	r0, r3
 8001616:	f00a f93d 	bl	800b894 <HAL_RCCEx_PeriphCLKConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <PeriphCommonClock_Config+0x48>
  {
    Error_Handler();
 8001620:	f000 fafc 	bl	8001c1c <Error_Handler>
  }
}
 8001624:	bf00      	nop
 8001626:	3760      	adds	r7, #96	; 0x60
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001632:	463b      	mov	r3, r7
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800163e:	4b44      	ldr	r3, [pc, #272]	; (8001750 <MX_ADC1_Init+0x124>)
 8001640:	4a44      	ldr	r2, [pc, #272]	; (8001754 <MX_ADC1_Init+0x128>)
 8001642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001644:	4b42      	ldr	r3, [pc, #264]	; (8001750 <MX_ADC1_Init+0x124>)
 8001646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800164a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800164c:	4b40      	ldr	r3, [pc, #256]	; (8001750 <MX_ADC1_Init+0x124>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001652:	4b3f      	ldr	r3, [pc, #252]	; (8001750 <MX_ADC1_Init+0x124>)
 8001654:	2201      	movs	r2, #1
 8001656:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001658:	4b3d      	ldr	r3, [pc, #244]	; (8001750 <MX_ADC1_Init+0x124>)
 800165a:	2201      	movs	r2, #1
 800165c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800165e:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <MX_ADC1_Init+0x124>)
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001666:	4b3a      	ldr	r3, [pc, #232]	; (8001750 <MX_ADC1_Init+0x124>)
 8001668:	2200      	movs	r2, #0
 800166a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166c:	4b38      	ldr	r3, [pc, #224]	; (8001750 <MX_ADC1_Init+0x124>)
 800166e:	4a3a      	ldr	r2, [pc, #232]	; (8001758 <MX_ADC1_Init+0x12c>)
 8001670:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001672:	4b37      	ldr	r3, [pc, #220]	; (8001750 <MX_ADC1_Init+0x124>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001678:	4b35      	ldr	r3, [pc, #212]	; (8001750 <MX_ADC1_Init+0x124>)
 800167a:	2206      	movs	r2, #6
 800167c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800167e:	4b34      	ldr	r3, [pc, #208]	; (8001750 <MX_ADC1_Init+0x124>)
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001686:	4b32      	ldr	r3, [pc, #200]	; (8001750 <MX_ADC1_Init+0x124>)
 8001688:	2201      	movs	r2, #1
 800168a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800168c:	4830      	ldr	r0, [pc, #192]	; (8001750 <MX_ADC1_Init+0x124>)
 800168e:	f005 fb97 	bl	8006dc0 <HAL_ADC_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001698:	f000 fac0 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800169c:	2306      	movs	r3, #6
 800169e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80016a4:	2307      	movs	r3, #7
 80016a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	4828      	ldr	r0, [pc, #160]	; (8001750 <MX_ADC1_Init+0x124>)
 80016ae:	f005 fcf9 	bl	80070a4 <HAL_ADC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016b8:	f000 fab0 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80016bc:	2307      	movs	r3, #7
 80016be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	4821      	ldr	r0, [pc, #132]	; (8001750 <MX_ADC1_Init+0x124>)
 80016ca:	f005 fceb 	bl	80070a4 <HAL_ADC_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80016d4:	f000 faa2 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80016d8:	230e      	movs	r3, #14
 80016da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80016dc:	2303      	movs	r3, #3
 80016de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016e0:	463b      	mov	r3, r7
 80016e2:	4619      	mov	r1, r3
 80016e4:	481a      	ldr	r0, [pc, #104]	; (8001750 <MX_ADC1_Init+0x124>)
 80016e6:	f005 fcdd 	bl	80070a4 <HAL_ADC_ConfigChannel>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80016f0:	f000 fa94 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80016f4:	230f      	movs	r3, #15
 80016f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80016f8:	2304      	movs	r3, #4
 80016fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	4619      	mov	r1, r3
 8001700:	4813      	ldr	r0, [pc, #76]	; (8001750 <MX_ADC1_Init+0x124>)
 8001702:	f005 fccf 	bl	80070a4 <HAL_ADC_ConfigChannel>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800170c:	f000 fa86 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001710:	2308      	movs	r3, #8
 8001712:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001714:	2305      	movs	r3, #5
 8001716:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001718:	463b      	mov	r3, r7
 800171a:	4619      	mov	r1, r3
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <MX_ADC1_Init+0x124>)
 800171e:	f005 fcc1 	bl	80070a4 <HAL_ADC_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001728:	f000 fa78 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800172c:	2309      	movs	r3, #9
 800172e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001730:	2306      	movs	r3, #6
 8001732:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001734:	463b      	mov	r3, r7
 8001736:	4619      	mov	r1, r3
 8001738:	4805      	ldr	r0, [pc, #20]	; (8001750 <MX_ADC1_Init+0x124>)
 800173a:	f005 fcb3 	bl	80070a4 <HAL_ADC_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001744:	f000 fa6a 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001748:	bf00      	nop
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	200001b4 	.word	0x200001b4
 8001754:	40012000 	.word	0x40012000
 8001758:	0f000001 	.word	0x0f000001

0800175c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800176e:	4b44      	ldr	r3, [pc, #272]	; (8001880 <MX_ADC2_Init+0x124>)
 8001770:	4a44      	ldr	r2, [pc, #272]	; (8001884 <MX_ADC2_Init+0x128>)
 8001772:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001774:	4b42      	ldr	r3, [pc, #264]	; (8001880 <MX_ADC2_Init+0x124>)
 8001776:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800177a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800177c:	4b40      	ldr	r3, [pc, #256]	; (8001880 <MX_ADC2_Init+0x124>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8001782:	4b3f      	ldr	r3, [pc, #252]	; (8001880 <MX_ADC2_Init+0x124>)
 8001784:	2201      	movs	r2, #1
 8001786:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001788:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <MX_ADC2_Init+0x124>)
 800178a:	2201      	movs	r2, #1
 800178c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800178e:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <MX_ADC2_Init+0x124>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <MX_ADC2_Init+0x124>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b38      	ldr	r3, [pc, #224]	; (8001880 <MX_ADC2_Init+0x124>)
 800179e:	4a3a      	ldr	r2, [pc, #232]	; (8001888 <MX_ADC2_Init+0x12c>)
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b37      	ldr	r3, [pc, #220]	; (8001880 <MX_ADC2_Init+0x124>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 6;
 80017a8:	4b35      	ldr	r3, [pc, #212]	; (8001880 <MX_ADC2_Init+0x124>)
 80017aa:	2206      	movs	r2, #6
 80017ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <MX_ADC2_Init+0x124>)
 80017b0:	2201      	movs	r2, #1
 80017b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <MX_ADC2_Init+0x124>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80017bc:	4830      	ldr	r0, [pc, #192]	; (8001880 <MX_ADC2_Init+0x124>)
 80017be:	f005 faff 	bl	8006dc0 <HAL_ADC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80017c8:	f000 fa28 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80017d4:	2307      	movs	r3, #7
 80017d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4828      	ldr	r0, [pc, #160]	; (8001880 <MX_ADC2_Init+0x124>)
 80017de:	f005 fc61 	bl	80070a4 <HAL_ADC_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80017e8:	f000 fa18 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80017ec:	2301      	movs	r3, #1
 80017ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80017f0:	2302      	movs	r3, #2
 80017f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017f4:	463b      	mov	r3, r7
 80017f6:	4619      	mov	r1, r3
 80017f8:	4821      	ldr	r0, [pc, #132]	; (8001880 <MX_ADC2_Init+0x124>)
 80017fa:	f005 fc53 	bl	80070a4 <HAL_ADC_ConfigChannel>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001804:	f000 fa0a 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001808:	2302      	movs	r3, #2
 800180a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800180c:	2303      	movs	r3, #3
 800180e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001810:	463b      	mov	r3, r7
 8001812:	4619      	mov	r1, r3
 8001814:	481a      	ldr	r0, [pc, #104]	; (8001880 <MX_ADC2_Init+0x124>)
 8001816:	f005 fc45 	bl	80070a4 <HAL_ADC_ConfigChannel>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001820:	f000 f9fc 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001824:	2303      	movs	r3, #3
 8001826:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001828:	2304      	movs	r3, #4
 800182a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800182c:	463b      	mov	r3, r7
 800182e:	4619      	mov	r1, r3
 8001830:	4813      	ldr	r0, [pc, #76]	; (8001880 <MX_ADC2_Init+0x124>)
 8001832:	f005 fc37 	bl	80070a4 <HAL_ADC_ConfigChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 800183c:	f000 f9ee 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001840:	2304      	movs	r3, #4
 8001842:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001844:	2305      	movs	r3, #5
 8001846:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001848:	463b      	mov	r3, r7
 800184a:	4619      	mov	r1, r3
 800184c:	480c      	ldr	r0, [pc, #48]	; (8001880 <MX_ADC2_Init+0x124>)
 800184e:	f005 fc29 	bl	80070a4 <HAL_ADC_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8001858:	f000 f9e0 	bl	8001c1c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800185c:	2305      	movs	r3, #5
 800185e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001860:	2306      	movs	r3, #6
 8001862:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001864:	463b      	mov	r3, r7
 8001866:	4619      	mov	r1, r3
 8001868:	4805      	ldr	r0, [pc, #20]	; (8001880 <MX_ADC2_Init+0x124>)
 800186a:	f005 fc1b 	bl	80070a4 <HAL_ADC_ConfigChannel>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8001874:	f000 f9d2 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001878:	bf00      	nop
 800187a:	3710      	adds	r7, #16
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	200001fc 	.word	0x200001fc
 8001884:	40012100 	.word	0x40012100
 8001888:	0f000001 	.word	0x0f000001

0800188c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001890:	4b17      	ldr	r3, [pc, #92]	; (80018f0 <MX_CAN1_Init+0x64>)
 8001892:	4a18      	ldr	r2, [pc, #96]	; (80018f4 <MX_CAN1_Init+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001896:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_CAN1_Init+0x64>)
 8001898:	2205      	movs	r2, #5
 800189a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <MX_CAN1_Init+0x64>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80018a2:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80018a8:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018aa:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80018ae:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018be:	2200      	movs	r2, #0
 80018c0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018c2:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018c8:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018ce:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018da:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_CAN1_Init+0x64>)
 80018dc:	f005 fe92 	bl	8007604 <HAL_CAN_Init>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80018e6:	f000 f999 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000304 	.word	0x20000304
 80018f4:	40006400 	.word	0x40006400

080018f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018fc:	4b12      	ldr	r3, [pc, #72]	; (8001948 <MX_I2C1_Init+0x50>)
 80018fe:	4a13      	ldr	r2, [pc, #76]	; (800194c <MX_I2C1_Init+0x54>)
 8001900:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_I2C1_Init+0x50>)
 8001904:	4a12      	ldr	r2, [pc, #72]	; (8001950 <MX_I2C1_Init+0x58>)
 8001906:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_I2C1_Init+0x50>)
 8001916:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800191a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800191c:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <MX_I2C1_Init+0x50>)
 800191e:	2200      	movs	r2, #0
 8001920:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_I2C1_Init+0x50>)
 8001924:	2200      	movs	r2, #0
 8001926:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <MX_I2C1_Init+0x50>)
 800192a:	2200      	movs	r2, #0
 800192c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_I2C1_Init+0x50>)
 8001930:	2200      	movs	r2, #0
 8001932:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001934:	4804      	ldr	r0, [pc, #16]	; (8001948 <MX_I2C1_Init+0x50>)
 8001936:	f007 fbcb 	bl	80090d0 <HAL_I2C_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001940:	f000 f96c 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	2000032c 	.word	0x2000032c
 800194c:	40005400 	.word	0x40005400
 8001950:	00061a80 	.word	0x00061a80

08001954 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001968:	2300      	movs	r3, #0
 800196a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_RTC_Init+0x58>)
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <MX_RTC_Init+0x5c>)
 8001970:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_RTC_Init+0x58>)
 8001974:	2200      	movs	r2, #0
 8001976:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001978:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_RTC_Init+0x58>)
 800197a:	227f      	movs	r2, #127	; 0x7f
 800197c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800197e:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <MX_RTC_Init+0x58>)
 8001980:	22ff      	movs	r2, #255	; 0xff
 8001982:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001984:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_RTC_Init+0x58>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800198a:	4b08      	ldr	r3, [pc, #32]	; (80019ac <MX_RTC_Init+0x58>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001990:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_RTC_Init+0x58>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <MX_RTC_Init+0x58>)
 8001998:	f00a ff74 	bl	800c884 <HAL_RTC_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80019a2:	f000 f93b 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019a6:	3718      	adds	r7, #24
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20000380 	.word	0x20000380
 80019b0:	40002800 	.word	0x40002800

080019b4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019ba:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <MX_SDIO_SD_Init+0x3c>)
 80019bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80019d6:	4b05      	ldr	r3, [pc, #20]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019d8:	2200      	movs	r2, #0
 80019da:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <MX_SDIO_SD_Init+0x38>)
 80019de:	2202      	movs	r2, #2
 80019e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	200003a0 	.word	0x200003a0
 80019f0:	40012c00 	.word	0x40012c00

080019f4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019fa:	463b      	mov	r3, r7
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <MX_TIM7_Init+0x64>)
 8001a04:	4a15      	ldr	r2, [pc, #84]	; (8001a5c <MX_TIM7_Init+0x68>)
 8001a06:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 89;
 8001a08:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_TIM7_Init+0x64>)
 8001a0a:	2259      	movs	r2, #89	; 0x59
 8001a0c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a0e:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <MX_TIM7_Init+0x64>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <MX_TIM7_Init+0x64>)
 8001a16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a1a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_TIM7_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001a22:	480d      	ldr	r0, [pc, #52]	; (8001a58 <MX_TIM7_Init+0x64>)
 8001a24:	f00d f8df 	bl	800ebe6 <HAL_TIM_Base_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001a2e:	f000 f8f5 	bl	8001c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a32:	2300      	movs	r3, #0
 8001a34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4806      	ldr	r0, [pc, #24]	; (8001a58 <MX_TIM7_Init+0x64>)
 8001a40:	f00d fb60 	bl	800f104 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001a4a:	f000 f8e7 	bl	8001c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200004e4 	.word	0x200004e4
 8001a5c:	40001400 	.word	0x40001400

08001a60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001a66:	2300      	movs	r3, #0
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	4b18      	ldr	r3, [pc, #96]	; (8001acc <MX_DMA_Init+0x6c>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	4a17      	ldr	r2, [pc, #92]	; (8001acc <MX_DMA_Init+0x6c>)
 8001a70:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a74:	6313      	str	r3, [r2, #48]	; 0x30
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <MX_DMA_Init+0x6c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 2, 0);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2102      	movs	r1, #2
 8001a86:	2038      	movs	r0, #56	; 0x38
 8001a88:	f006 fd55 	bl	8008536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001a8c:	2038      	movs	r0, #56	; 0x38
 8001a8e:	f006 fd6e 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 2, 0);
 8001a92:	2200      	movs	r2, #0
 8001a94:	2102      	movs	r1, #2
 8001a96:	203a      	movs	r0, #58	; 0x3a
 8001a98:	f006 fd4d 	bl	8008536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001a9c:	203a      	movs	r0, #58	; 0x3a
 8001a9e:	f006 fd66 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	203b      	movs	r0, #59	; 0x3b
 8001aa8:	f006 fd45 	bl	8008536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001aac:	203b      	movs	r0, #59	; 0x3b
 8001aae:	f006 fd5e 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	2045      	movs	r0, #69	; 0x45
 8001ab8:	f006 fd3d 	bl	8008536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001abc:	2045      	movs	r0, #69	; 0x45
 8001abe:	f006 fd56 	bl	800856e <HAL_NVIC_EnableIRQ>

}
 8001ac2:	bf00      	nop
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	40023800 	.word	0x40023800

08001ad0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad6:	f107 0314 	add.w	r3, r7, #20
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
 8001ae4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b49      	ldr	r3, [pc, #292]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a48      	ldr	r2, [pc, #288]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b46      	ldr	r3, [pc, #280]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b42      	ldr	r3, [pc, #264]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a41      	ldr	r2, [pc, #260]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b3f      	ldr	r3, [pc, #252]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a3a      	ldr	r2, [pc, #232]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b28:	f043 0301 	orr.w	r3, r3, #1
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	4b34      	ldr	r3, [pc, #208]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	4a33      	ldr	r2, [pc, #204]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	6313      	str	r3, [r2, #48]	; 0x30
 8001b4a:	4b31      	ldr	r3, [pc, #196]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	603b      	str	r3, [r7, #0]
 8001b5a:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	4a2c      	ldr	r2, [pc, #176]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b60:	f043 0308 	orr.w	r3, r3, #8
 8001b64:	6313      	str	r3, [r2, #48]	; 0x30
 8001b66:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <MX_GPIO_Init+0x140>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	f003 0308 	and.w	r3, r3, #8
 8001b6e:	603b      	str	r3, [r7, #0]
 8001b70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001b72:	2200      	movs	r2, #0
 8001b74:	210f      	movs	r1, #15
 8001b76:	4827      	ldr	r0, [pc, #156]	; (8001c14 <MX_GPIO_Init+0x144>)
 8001b78:	f007 fa5e 	bl	8009038 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT0_Pin|OUT1_Pin, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001b82:	4825      	ldr	r0, [pc, #148]	; (8001c18 <MX_GPIO_Init+0x148>)
 8001b84:	f007 fa58 	bl	8009038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|LED2_Pin|LED3_Pin;
 8001b88:	230f      	movs	r3, #15
 8001b8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b94:	2300      	movs	r3, #0
 8001b96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b98:	f107 0314 	add.w	r3, r7, #20
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	481d      	ldr	r0, [pc, #116]	; (8001c14 <MX_GPIO_Init+0x144>)
 8001ba0:	f007 f89e 	bl	8008ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT0_Pin OUT1_Pin */
  GPIO_InitStruct.Pin = OUT0_Pin|OUT1_Pin;
 8001ba4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001baa:	2301      	movs	r3, #1
 8001bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb6:	f107 0314 	add.w	r3, r7, #20
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4816      	ldr	r0, [pc, #88]	; (8001c18 <MX_GPIO_Init+0x148>)
 8001bbe:	f007 f88f 	bl	8008ce0 <HAL_GPIO_Init>

  /*Configure GPIO pins : EXTI0_Pin EXTI1_Pin */
  GPIO_InitStruct.Pin = EXTI0_Pin|EXTI1_Pin;
 8001bc2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001bc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001bc8:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	f107 0314 	add.w	r3, r7, #20
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480f      	ldr	r0, [pc, #60]	; (8001c18 <MX_GPIO_Init+0x148>)
 8001bda:	f007 f881 	bl	8008ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO_CD_Pin */
  GPIO_InitStruct.Pin = SDIO_CD_Pin;
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001be2:	2300      	movs	r3, #0
 8001be4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDIO_CD_GPIO_Port, &GPIO_InitStruct);
 8001bea:	f107 0314 	add.w	r3, r7, #20
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4808      	ldr	r0, [pc, #32]	; (8001c14 <MX_GPIO_Init+0x144>)
 8001bf2:	f007 f875 	bl	8008ce0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	2028      	movs	r0, #40	; 0x28
 8001bfc:	f006 fc9b 	bl	8008536 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c00:	2028      	movs	r0, #40	; 0x28
 8001c02:	f006 fcb4 	bl	800856e <HAL_NVIC_EnableIRQ>

}
 8001c06:	bf00      	nop
 8001c08:	3728      	adds	r7, #40	; 0x28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020400 	.word	0x40020400

08001c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c20:	b672      	cpsid	i
}
 8001c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <Error_Handler+0x8>
	...

08001c28 <Process_Data>:
 */

#include "pdm_can.h"

static void Process_Data(uint16_t id, uint16_t data, PDM_Data* data_struct)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	603a      	str	r2, [r7, #0]
 8001c32:	80fb      	strh	r3, [r7, #6]
 8001c34:	460b      	mov	r3, r1
 8001c36:	80bb      	strh	r3, [r7, #4]
	switch(id >> 1){
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	085b      	lsrs	r3, r3, #1
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	2b1d      	cmp	r3, #29
 8001c42:	f200 81f9 	bhi.w	8002038 <Process_Data+0x410>
 8001c46:	a201      	add	r2, pc, #4	; (adr r2, 8001c4c <Process_Data+0x24>)
 8001c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4c:	08001cc5 	.word	0x08001cc5
 8001c50:	08001cf5 	.word	0x08001cf5
 8001c54:	08001d25 	.word	0x08001d25
 8001c58:	08001d55 	.word	0x08001d55
 8001c5c:	08001d85 	.word	0x08001d85
 8001c60:	08001db5 	.word	0x08001db5
 8001c64:	08001de5 	.word	0x08001de5
 8001c68:	08001e15 	.word	0x08001e15
 8001c6c:	08001e45 	.word	0x08001e45
 8001c70:	08001e75 	.word	0x08001e75
 8001c74:	08001ea5 	.word	0x08001ea5
 8001c78:	08001ed5 	.word	0x08001ed5
 8001c7c:	08001f05 	.word	0x08001f05
 8001c80:	08001f35 	.word	0x08001f35
 8001c84:	08001f65 	.word	0x08001f65
 8001c88:	08001f95 	.word	0x08001f95
 8001c8c:	08001fc9 	.word	0x08001fc9
 8001c90:	08001fd1 	.word	0x08001fd1
 8001c94:	08001fd9 	.word	0x08001fd9
 8001c98:	08001fe1 	.word	0x08001fe1
 8001c9c:	08001fe9 	.word	0x08001fe9
 8001ca0:	08001ff1 	.word	0x08001ff1
 8001ca4:	08001ff9 	.word	0x08001ff9
 8001ca8:	08002001 	.word	0x08002001
 8001cac:	08002009 	.word	0x08002009
 8001cb0:	08002011 	.word	0x08002011
 8001cb4:	08002019 	.word	0x08002019
 8001cb8:	08002021 	.word	0x08002021
 8001cbc:	08002029 	.word	0x08002029
 8001cc0:	08002031 	.word	0x08002031
		case 0x0001:
			data_struct->Current_Buffer[0] = data;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	88ba      	ldrh	r2, [r7, #4]
 8001cc8:	809a      	strh	r2, [r3, #4]
			if((id & 0x0001) == 1)
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d007      	beq.n	8001ce4 <Process_Data+0xbc>
				data_struct->Output_Verify |= 1;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	885b      	ldrh	r3, [r3, #2]
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~1;
			break;
 8001ce2:	e1aa      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~1;
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	885b      	ldrh	r3, [r3, #2]
 8001ce8:	f023 0301 	bic.w	r3, r3, #1
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	805a      	strh	r2, [r3, #2]
			break;
 8001cf2:	e1a2      	b.n	800203a <Process_Data+0x412>

		case 0x0002:
			data_struct->Current_Buffer[1] = data;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	88ba      	ldrh	r2, [r7, #4]
 8001cf8:	80da      	strh	r2, [r3, #6]
			if((id & 0x0001) == 1)
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <Process_Data+0xec>
				data_struct->Output_Verify |= (1 << 1);
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	885b      	ldrh	r3, [r3, #2]
 8001d08:	f043 0302 	orr.w	r3, r3, #2
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 1);
			break;
 8001d12:	e192      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 1);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	885b      	ldrh	r3, [r3, #2]
 8001d18:	f023 0302 	bic.w	r3, r3, #2
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	805a      	strh	r2, [r3, #2]
			break;
 8001d22:	e18a      	b.n	800203a <Process_Data+0x412>

		case 0x0003:
			data_struct->Current_Buffer[2] = data;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	88ba      	ldrh	r2, [r7, #4]
 8001d28:	811a      	strh	r2, [r3, #8]
			if((id & 0x0001) == 1)
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d007      	beq.n	8001d44 <Process_Data+0x11c>
				data_struct->Output_Verify |= (1 << 2);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	885b      	ldrh	r3, [r3, #2]
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 2);
			break;
 8001d42:	e17a      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 2);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	885b      	ldrh	r3, [r3, #2]
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	805a      	strh	r2, [r3, #2]
			break;
 8001d52:	e172      	b.n	800203a <Process_Data+0x412>

		case 0x0004:
			data_struct->Current_Buffer[3] = data;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	88ba      	ldrh	r2, [r7, #4]
 8001d58:	815a      	strh	r2, [r3, #10]
			if((id & 0x0001) == 1)
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d007      	beq.n	8001d74 <Process_Data+0x14c>
				data_struct->Output_Verify |= (1 << 3);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	885b      	ldrh	r3, [r3, #2]
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 3);
			break;
 8001d72:	e162      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 3);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	885b      	ldrh	r3, [r3, #2]
 8001d78:	f023 0308 	bic.w	r3, r3, #8
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	805a      	strh	r2, [r3, #2]
			break;
 8001d82:	e15a      	b.n	800203a <Process_Data+0x412>

		case 0x0005:
			data_struct->Current_Buffer[4] = data;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	88ba      	ldrh	r2, [r7, #4]
 8001d88:	819a      	strh	r2, [r3, #12]
			if((id & 0x0001) == 1)
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d007      	beq.n	8001da4 <Process_Data+0x17c>
				data_struct->Output_Verify |= (1 << 4);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	885b      	ldrh	r3, [r3, #2]
 8001d98:	f043 0310 	orr.w	r3, r3, #16
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 4);
			break;
 8001da2:	e14a      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 4);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	885b      	ldrh	r3, [r3, #2]
 8001da8:	f023 0310 	bic.w	r3, r3, #16
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	805a      	strh	r2, [r3, #2]
			break;
 8001db2:	e142      	b.n	800203a <Process_Data+0x412>

		case 0x0006:
			data_struct->Current_Buffer[5] = data;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	88ba      	ldrh	r2, [r7, #4]
 8001db8:	81da      	strh	r2, [r3, #14]
			if((id & 0x0001) == 1)
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <Process_Data+0x1ac>
				data_struct->Output_Verify |= (1 << 5);
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	885b      	ldrh	r3, [r3, #2]
 8001dc8:	f043 0320 	orr.w	r3, r3, #32
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 5);
			break;
 8001dd2:	e132      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 5);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	885b      	ldrh	r3, [r3, #2]
 8001dd8:	f023 0320 	bic.w	r3, r3, #32
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	805a      	strh	r2, [r3, #2]
			break;
 8001de2:	e12a      	b.n	800203a <Process_Data+0x412>

		case 0x0007:
			data_struct->Current_Buffer[6] = data;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	88ba      	ldrh	r2, [r7, #4]
 8001de8:	821a      	strh	r2, [r3, #16]
			if((id & 0x0001) == 1)
 8001dea:	88fb      	ldrh	r3, [r7, #6]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d007      	beq.n	8001e04 <Process_Data+0x1dc>
				data_struct->Output_Verify |= (1 << 6);
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	885b      	ldrh	r3, [r3, #2]
 8001df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 6);
			break;
 8001e02:	e11a      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 6);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	885b      	ldrh	r3, [r3, #2]
 8001e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	805a      	strh	r2, [r3, #2]
			break;
 8001e12:	e112      	b.n	800203a <Process_Data+0x412>

		case 0x0008:
			data_struct->Current_Buffer[7] = data;
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	88ba      	ldrh	r2, [r7, #4]
 8001e18:	825a      	strh	r2, [r3, #18]
			if((id & 0x0001) == 1)
 8001e1a:	88fb      	ldrh	r3, [r7, #6]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <Process_Data+0x20c>
				data_struct->Output_Verify |= (1 << 7);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	885b      	ldrh	r3, [r3, #2]
 8001e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 7);
			break;
 8001e32:	e102      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 7);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	885b      	ldrh	r3, [r3, #2]
 8001e38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	805a      	strh	r2, [r3, #2]
			break;
 8001e42:	e0fa      	b.n	800203a <Process_Data+0x412>

		case 0x0009:
			data_struct->Current_Buffer[8] = data;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	88ba      	ldrh	r2, [r7, #4]
 8001e48:	829a      	strh	r2, [r3, #20]
			if((id & 0x0001) == 1)
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	f003 0301 	and.w	r3, r3, #1
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d007      	beq.n	8001e64 <Process_Data+0x23c>
				data_struct->Output_Verify |= (1 << 8);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	885b      	ldrh	r3, [r3, #2]
 8001e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 8);
			break;
 8001e62:	e0ea      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 8);
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	885b      	ldrh	r3, [r3, #2]
 8001e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e6c:	b29a      	uxth	r2, r3
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	805a      	strh	r2, [r3, #2]
			break;
 8001e72:	e0e2      	b.n	800203a <Process_Data+0x412>

		case 0x000A:
			data_struct->Current_Buffer[9] = data;
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	88ba      	ldrh	r2, [r7, #4]
 8001e78:	82da      	strh	r2, [r3, #22]
			if((id & 0x0001) == 1)
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	f003 0301 	and.w	r3, r3, #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d007      	beq.n	8001e94 <Process_Data+0x26c>
				data_struct->Output_Verify |= (1 << 9);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	885b      	ldrh	r3, [r3, #2]
 8001e88:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 9);
			break;
 8001e92:	e0d2      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 9);
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	885b      	ldrh	r3, [r3, #2]
 8001e98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	805a      	strh	r2, [r3, #2]
			break;
 8001ea2:	e0ca      	b.n	800203a <Process_Data+0x412>

		case 0x000B:
			data_struct->Current_Buffer[10] = data;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	88ba      	ldrh	r2, [r7, #4]
 8001ea8:	831a      	strh	r2, [r3, #24]
			if((id & 0x0001) == 1)
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <Process_Data+0x29c>
				data_struct->Output_Verify |= (1 << 10);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	885b      	ldrh	r3, [r3, #2]
 8001eb8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 10);
			break;
 8001ec2:	e0ba      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 10);
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	885b      	ldrh	r3, [r3, #2]
 8001ec8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ecc:	b29a      	uxth	r2, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	805a      	strh	r2, [r3, #2]
			break;
 8001ed2:	e0b2      	b.n	800203a <Process_Data+0x412>

		case 0x000C:
			data_struct->Current_Buffer[11] = data;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	88ba      	ldrh	r2, [r7, #4]
 8001ed8:	835a      	strh	r2, [r3, #26]
			if((id & 0x0001) == 1)
 8001eda:	88fb      	ldrh	r3, [r7, #6]
 8001edc:	f003 0301 	and.w	r3, r3, #1
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d007      	beq.n	8001ef4 <Process_Data+0x2cc>
				data_struct->Output_Verify |= (1 << 11);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	885b      	ldrh	r3, [r3, #2]
 8001ee8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 11);
			break;
 8001ef2:	e0a2      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 11);
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	885b      	ldrh	r3, [r3, #2]
 8001ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	805a      	strh	r2, [r3, #2]
			break;
 8001f02:	e09a      	b.n	800203a <Process_Data+0x412>

		case 0x000D:
			data_struct->Current_Buffer[12] = data;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	88ba      	ldrh	r2, [r7, #4]
 8001f08:	839a      	strh	r2, [r3, #28]
			if((id & 0x0001) == 1)
 8001f0a:	88fb      	ldrh	r3, [r7, #6]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <Process_Data+0x2fc>
				data_struct->Output_Verify |= (1 << 12);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	885b      	ldrh	r3, [r3, #2]
 8001f18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 12);
			break;
 8001f22:	e08a      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 12);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	885b      	ldrh	r3, [r3, #2]
 8001f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	805a      	strh	r2, [r3, #2]
			break;
 8001f32:	e082      	b.n	800203a <Process_Data+0x412>

		case 0x000E:
			data_struct->Current_Buffer[13] = data;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	88ba      	ldrh	r2, [r7, #4]
 8001f38:	83da      	strh	r2, [r3, #30]
			if((id & 0x0001) == 1)
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <Process_Data+0x32c>
				data_struct->Output_Verify |= (1 << 13);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	885b      	ldrh	r3, [r3, #2]
 8001f48:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f4c:	b29a      	uxth	r2, r3
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 13);
			break;
 8001f52:	e072      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 13);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	885b      	ldrh	r3, [r3, #2]
 8001f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	805a      	strh	r2, [r3, #2]
			break;
 8001f62:	e06a      	b.n	800203a <Process_Data+0x412>

		case 0x000F:
			data_struct->Current_Buffer[14] = data;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	88ba      	ldrh	r2, [r7, #4]
 8001f68:	841a      	strh	r2, [r3, #32]
			if((id & 0x0001) == 1)
 8001f6a:	88fb      	ldrh	r3, [r7, #6]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <Process_Data+0x35c>
				data_struct->Output_Verify |= (1 << 14);
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	885b      	ldrh	r3, [r3, #2]
 8001f78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 14);
			break;
 8001f82:	e05a      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 14);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	885b      	ldrh	r3, [r3, #2]
 8001f88:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f8c:	b29a      	uxth	r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	805a      	strh	r2, [r3, #2]
			break;
 8001f92:	e052      	b.n	800203a <Process_Data+0x412>

		case 0x0010:
			data_struct->Current_Buffer[15] = data;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	88ba      	ldrh	r2, [r7, #4]
 8001f98:	845a      	strh	r2, [r3, #34]	; 0x22
			if((id & 0x0001) == 1)
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	f003 0301 	and.w	r3, r3, #1
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d009      	beq.n	8001fb8 <Process_Data+0x390>
				data_struct->Output_Verify |= (1 << 15);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	885b      	ldrh	r3, [r3, #2]
 8001fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fb0:	b29a      	uxth	r2, r3
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	805a      	strh	r2, [r3, #2]
			else
				data_struct->Output_Verify &= ~(1 << 15);
			break;
 8001fb6:	e040      	b.n	800203a <Process_Data+0x412>
				data_struct->Output_Verify &= ~(1 << 15);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	885b      	ldrh	r3, [r3, #2]
 8001fbc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	805a      	strh	r2, [r3, #2]
			break;
 8001fc6:	e038      	b.n	800203a <Process_Data+0x412>

		case 0x0011:
			data_struct->Tempetature_Buffer[0] = data;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	88ba      	ldrh	r2, [r7, #4]
 8001fcc:	859a      	strh	r2, [r3, #44]	; 0x2c
			break;
 8001fce:	e034      	b.n	800203a <Process_Data+0x412>

		case 0x0012:
			data_struct->Tempetature_Buffer[1] = data;
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	88ba      	ldrh	r2, [r7, #4]
 8001fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
			break;
 8001fd6:	e030      	b.n	800203a <Process_Data+0x412>

		case 0x0013:
			data_struct->Tempetature_Buffer[2] = data;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	88ba      	ldrh	r2, [r7, #4]
 8001fdc:	861a      	strh	r2, [r3, #48]	; 0x30
			break;
 8001fde:	e02c      	b.n	800203a <Process_Data+0x412>

		case 0x0014:
			data_struct->Tempetature_Buffer[3] = data;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	88ba      	ldrh	r2, [r7, #4]
 8001fe4:	865a      	strh	r2, [r3, #50]	; 0x32
			break;
 8001fe6:	e028      	b.n	800203a <Process_Data+0x412>

		case 0x0015:
			data_struct->Tempetature_Buffer[4] = data;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	88ba      	ldrh	r2, [r7, #4]
 8001fec:	869a      	strh	r2, [r3, #52]	; 0x34
			break;
 8001fee:	e024      	b.n	800203a <Process_Data+0x412>

		case 0x0016:
			data_struct->Tempetature_Buffer[5] = data;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	88ba      	ldrh	r2, [r7, #4]
 8001ff4:	86da      	strh	r2, [r3, #54]	; 0x36
			break;
 8001ff6:	e020      	b.n	800203a <Process_Data+0x412>

		case 0x0017:
			data_struct->Tempetature_Buffer[6] = data;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	88ba      	ldrh	r2, [r7, #4]
 8001ffc:	871a      	strh	r2, [r3, #56]	; 0x38
			break;
 8001ffe:	e01c      	b.n	800203a <Process_Data+0x412>

		case 0x0018:
			data_struct->Tempetature_Buffer[7] = data;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	88ba      	ldrh	r2, [r7, #4]
 8002004:	875a      	strh	r2, [r3, #58]	; 0x3a
			break;
 8002006:	e018      	b.n	800203a <Process_Data+0x412>

		case 0x0019:
			data_struct->Tempetature_Buffer[8] = data;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	88ba      	ldrh	r2, [r7, #4]
 800200c:	879a      	strh	r2, [r3, #60]	; 0x3c
			break;
 800200e:	e014      	b.n	800203a <Process_Data+0x412>

		case 0x001A:
			data_struct->Input_Voltage = data;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	88ba      	ldrh	r2, [r7, #4]
 8002014:	801a      	strh	r2, [r3, #0]
			break;
 8002016:	e010      	b.n	800203a <Process_Data+0x412>

		case 0x001B:
			data_struct->Duty_Cycle_Buffer[0] = data;
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	88ba      	ldrh	r2, [r7, #4]
 800201c:	849a      	strh	r2, [r3, #36]	; 0x24
			break;
 800201e:	e00c      	b.n	800203a <Process_Data+0x412>

		case 0x001C:
			data_struct->Duty_Cycle_Buffer[1] = data;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	88ba      	ldrh	r2, [r7, #4]
 8002024:	84da      	strh	r2, [r3, #38]	; 0x26
			break;
 8002026:	e008      	b.n	800203a <Process_Data+0x412>

		case 0x001D:
			data_struct->Duty_Cycle_Buffer[2] = data;
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	88ba      	ldrh	r2, [r7, #4]
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
			break;
 800202e:	e004      	b.n	800203a <Process_Data+0x412>

		case 0x001E:
			data_struct->Duty_Cycle_Buffer[3] = data;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	88ba      	ldrh	r2, [r7, #4]
 8002034:	855a      	strh	r2, [r3, #42]	; 0x2a
			break;
 8002036:	e000      	b.n	800203a <Process_Data+0x412>

		default:
			break;
 8002038:	bf00      	nop
	}

	return;
 800203a:	bf00      	nop
}
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop

08002048 <PDM_CAN_FilterConfig>:

HAL_StatusTypeDef PDM_CAN_FilterConfig(CAN_HandleTypeDef* hcan, uint32_t bank_position, uint32_t fifo_assignment)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b090      	sub	sp, #64	; 0x40
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filterID = 0x1E35C000, filterMask = 0x1FFFF000;
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <PDM_CAN_FilterConfig+0x5c>)
 8002056:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002058:	4b13      	ldr	r3, [pc, #76]	; (80020a8 <PDM_CAN_FilterConfig+0x60>)
 800205a:	63bb      	str	r3, [r7, #56]	; 0x38

	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800205c:	2300      	movs	r3, #0
 800205e:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002060:	2301      	movs	r3, #1
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
	sFilterConfig.FilterIdHigh = filterID >> 13;
 8002064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002066:	0b5b      	lsrs	r3, r3, #13
 8002068:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterIdLow = (filterID << 3) & 0xFFF8;
 800206a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	b29b      	uxth	r3, r3
 8002070:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMaskIdHigh = filterMask >> 13;
 8002072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002074:	0b5b      	lsrs	r3, r3, #13
 8002076:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterMaskIdLow = (filterMask << 3) & 0xFFF8;
 8002078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	b29b      	uxth	r3, r3
 800207e:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterBank = bank_position;
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterFIFOAssignment = fifo_assignment;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterActivation = ENABLE;
 8002088:	2301      	movs	r3, #1
 800208a:	633b      	str	r3, [r7, #48]	; 0x30

	return HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 800208c:	f107 0310 	add.w	r3, r7, #16
 8002090:	4619      	mov	r1, r3
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f005 fbb2 	bl	80077fc <HAL_CAN_ConfigFilter>
 8002098:	4603      	mov	r3, r0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3740      	adds	r7, #64	; 0x40
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	1e35c000 	.word	0x1e35c000
 80020a8:	1ffff000 	.word	0x1ffff000

080020ac <PDM_CAN_Process_Data>:

void PDM_CAN_Process_Data(CAN_RxHeaderTypeDef* rx_header, uint8_t* data_buffer, PDM_Data* data_struct)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b088      	sub	sp, #32
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
	uint8_t length = 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	77bb      	strb	r3, [r7, #30]
	uint8_t buffer[8];
	uint16_t id = 0;
 80020bc:	2300      	movs	r3, #0
 80020be:	83bb      	strh	r3, [r7, #28]
	uint16_t data = 0;
 80020c0:	2300      	movs	r3, #0
 80020c2:	837b      	strh	r3, [r7, #26]

	if((rx_header->DLC != CAN_ID_EXT) && ((rx_header->ExtId & 0x1FFFF000) != 0x1E35C000))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d006      	beq.n	80020da <PDM_CAN_Process_Data+0x2e>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <PDM_CAN_Process_Data+0xcc>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	4a29      	ldr	r2, [pc, #164]	; (800217c <PDM_CAN_Process_Data+0xd0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d149      	bne.n	800216e <PDM_CAN_Process_Data+0xc2>
		return;

	length = rx_header->DLC;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	691b      	ldr	r3, [r3, #16]
 80020de:	77bb      	strb	r3, [r7, #30]

	for(uint8_t i = 0; i < length; i++)
 80020e0:	2300      	movs	r3, #0
 80020e2:	77fb      	strb	r3, [r7, #31]
 80020e4:	e00b      	b.n	80020fe <PDM_CAN_Process_Data+0x52>
		buffer[i] = data_buffer[i];
 80020e6:	7ffb      	ldrb	r3, [r7, #31]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	441a      	add	r2, r3
 80020ec:	7ffb      	ldrb	r3, [r7, #31]
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	3320      	adds	r3, #32
 80020f2:	443b      	add	r3, r7
 80020f4:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i = 0; i < length; i++)
 80020f8:	7ffb      	ldrb	r3, [r7, #31]
 80020fa:	3301      	adds	r3, #1
 80020fc:	77fb      	strb	r3, [r7, #31]
 80020fe:	7ffa      	ldrb	r2, [r7, #31]
 8002100:	7fbb      	ldrb	r3, [r7, #30]
 8002102:	429a      	cmp	r2, r3
 8002104:	d3ef      	bcc.n	80020e6 <PDM_CAN_Process_Data+0x3a>

	id  = buffer[0] << 8;
 8002106:	7c3b      	ldrb	r3, [r7, #16]
 8002108:	b29b      	uxth	r3, r3
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	83bb      	strh	r3, [r7, #28]
	id |= buffer[1] & 0xff;
 800210e:	7c7b      	ldrb	r3, [r7, #17]
 8002110:	b29a      	uxth	r2, r3
 8002112:	8bbb      	ldrh	r3, [r7, #28]
 8002114:	4313      	orrs	r3, r2
 8002116:	83bb      	strh	r3, [r7, #28]
	data  = buffer[2] << 8;
 8002118:	7cbb      	ldrb	r3, [r7, #18]
 800211a:	b29b      	uxth	r3, r3
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	837b      	strh	r3, [r7, #26]
	data |= buffer[3] & 0xff;
 8002120:	7cfb      	ldrb	r3, [r7, #19]
 8002122:	b29a      	uxth	r2, r3
 8002124:	8b7b      	ldrh	r3, [r7, #26]
 8002126:	4313      	orrs	r3, r2
 8002128:	837b      	strh	r3, [r7, #26]

	Process_Data(id, data, data_struct);
 800212a:	8b79      	ldrh	r1, [r7, #26]
 800212c:	8bbb      	ldrh	r3, [r7, #28]
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fd79 	bl	8001c28 <Process_Data>

	if(length == 8)
 8002136:	7fbb      	ldrb	r3, [r7, #30]
 8002138:	2b08      	cmp	r3, #8
 800213a:	d119      	bne.n	8002170 <PDM_CAN_Process_Data+0xc4>
	{
		id  = buffer[4] << 8;
 800213c:	7d3b      	ldrb	r3, [r7, #20]
 800213e:	b29b      	uxth	r3, r3
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	83bb      	strh	r3, [r7, #28]
		id |= buffer[5] & 0xff;
 8002144:	7d7b      	ldrb	r3, [r7, #21]
 8002146:	b29a      	uxth	r2, r3
 8002148:	8bbb      	ldrh	r3, [r7, #28]
 800214a:	4313      	orrs	r3, r2
 800214c:	83bb      	strh	r3, [r7, #28]
		data  = buffer[6] << 8;
 800214e:	7dbb      	ldrb	r3, [r7, #22]
 8002150:	b29b      	uxth	r3, r3
 8002152:	021b      	lsls	r3, r3, #8
 8002154:	837b      	strh	r3, [r7, #26]
		data |= buffer[7] & 0xff;
 8002156:	7dfb      	ldrb	r3, [r7, #23]
 8002158:	b29a      	uxth	r2, r3
 800215a:	8b7b      	ldrh	r3, [r7, #26]
 800215c:	4313      	orrs	r3, r2
 800215e:	837b      	strh	r3, [r7, #26]

		Process_Data(id, data, data_struct);
 8002160:	8b79      	ldrh	r1, [r7, #26]
 8002162:	8bbb      	ldrh	r3, [r7, #28]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fd5e 	bl	8001c28 <Process_Data>
 800216c:	e000      	b.n	8002170 <PDM_CAN_Process_Data+0xc4>
		return;
 800216e:	bf00      	nop
	}
}
 8002170:	3720      	adds	r7, #32
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	1ffff000 	.word	0x1ffff000
 800217c:	1e35c000 	.word	0x1e35c000

08002180 <Principal_Verify_LEDs>:
static void Tx_Beacon(CAN_HandleTypeDef* hcan);
static void Save_ECU(CAN_HandleTypeDef* hcan);
static void Save_PDM(CAN_HandleTypeDef* hcan);

void Principal_Verify_LEDs()
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
	verifyADC = 0;
 8002186:	4b2c      	ldr	r3, [pc, #176]	; (8002238 <Principal_Verify_LEDs+0xb8>)
 8002188:	2200      	movs	r2, #0
 800218a:	801a      	strh	r2, [r3, #0]

	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 800218c:	2300      	movs	r3, #0
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	e015      	b.n	80021be <Principal_Verify_LEDs+0x3e>
		if(adcBuffer[i] > ADC_THRESHOLD)
 8002192:	79fb      	ldrb	r3, [r7, #7]
 8002194:	4a29      	ldr	r2, [pc, #164]	; (800223c <Principal_Verify_LEDs+0xbc>)
 8002196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800219a:	2b1e      	cmp	r3, #30
 800219c:	d90c      	bls.n	80021b8 <Principal_Verify_LEDs+0x38>
			verifyADC |= (1 << i);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	2201      	movs	r2, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	b21a      	sxth	r2, r3
 80021a8:	4b23      	ldr	r3, [pc, #140]	; (8002238 <Principal_Verify_LEDs+0xb8>)
 80021aa:	881b      	ldrh	r3, [r3, #0]
 80021ac:	b21b      	sxth	r3, r3
 80021ae:	4313      	orrs	r3, r2
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	4b20      	ldr	r3, [pc, #128]	; (8002238 <Principal_Verify_LEDs+0xb8>)
 80021b6:	801a      	strh	r2, [r3, #0]
	for(uint8_t i = 0; i < NBR_OF_CHANNELS; i++)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	3301      	adds	r3, #1
 80021bc:	71fb      	strb	r3, [r7, #7]
 80021be:	79fb      	ldrb	r3, [r7, #7]
 80021c0:	2b0b      	cmp	r3, #11
 80021c2:	d9e6      	bls.n	8002192 <Principal_Verify_LEDs+0x12>

	HAL_GPIO_TogglePin(LED_OK);
 80021c4:	2101      	movs	r1, #1
 80021c6:	481e      	ldr	r0, [pc, #120]	; (8002240 <Principal_Verify_LEDs+0xc0>)
 80021c8:	f006 ff4f 	bl	800906a <HAL_GPIO_TogglePin>

	if(flagDatalogger == DL_SAVE)
 80021cc:	4b1d      	ldr	r3, [pc, #116]	; (8002244 <Principal_Verify_LEDs+0xc4>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d105      	bne.n	80021e0 <Principal_Verify_LEDs+0x60>
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	2102      	movs	r1, #2
 80021d8:	4819      	ldr	r0, [pc, #100]	; (8002240 <Principal_Verify_LEDs+0xc0>)
 80021da:	f006 ff2d 	bl	8009038 <HAL_GPIO_WritePin>
 80021de:	e004      	b.n	80021ea <Principal_Verify_LEDs+0x6a>
	else
		HAL_GPIO_WritePin(LED_DATALOGGER, GPIO_PIN_RESET);
 80021e0:	2200      	movs	r2, #0
 80021e2:	2102      	movs	r1, #2
 80021e4:	4816      	ldr	r0, [pc, #88]	; (8002240 <Principal_Verify_LEDs+0xc0>)
 80021e6:	f006 ff27 	bl	8009038 <HAL_GPIO_WritePin>

	if((verifyCAN & 1) == 1)
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <Principal_Verify_LEDs+0xc8>)
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d005      	beq.n	8002202 <Principal_Verify_LEDs+0x82>
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_SET);
 80021f6:	2201      	movs	r2, #1
 80021f8:	2104      	movs	r1, #4
 80021fa:	4811      	ldr	r0, [pc, #68]	; (8002240 <Principal_Verify_LEDs+0xc0>)
 80021fc:	f006 ff1c 	bl	8009038 <HAL_GPIO_WritePin>
 8002200:	e004      	b.n	800220c <Principal_Verify_LEDs+0x8c>
	else
		HAL_GPIO_WritePin(LED_CAN_TX, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	2104      	movs	r1, #4
 8002206:	480e      	ldr	r0, [pc, #56]	; (8002240 <Principal_Verify_LEDs+0xc0>)
 8002208:	f006 ff16 	bl	8009038 <HAL_GPIO_WritePin>

	if((verifyCAN & 2) == 2)
 800220c:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <Principal_Verify_LEDs+0xc8>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d005      	beq.n	8002224 <Principal_Verify_LEDs+0xa4>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_SET);
 8002218:	2201      	movs	r2, #1
 800221a:	2108      	movs	r1, #8
 800221c:	4808      	ldr	r0, [pc, #32]	; (8002240 <Principal_Verify_LEDs+0xc0>)
 800221e:	f006 ff0b 	bl	8009038 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);

	return;
 8002222:	e005      	b.n	8002230 <Principal_Verify_LEDs+0xb0>
		HAL_GPIO_WritePin(LED_CAN_RX, GPIO_PIN_RESET);
 8002224:	2200      	movs	r2, #0
 8002226:	2108      	movs	r1, #8
 8002228:	4805      	ldr	r0, [pc, #20]	; (8002240 <Principal_Verify_LEDs+0xc0>)
 800222a:	f006 ff05 	bl	8009038 <HAL_GPIO_WritePin>
	return;
 800222e:	bf00      	nop
}
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20006776 	.word	0x20006776
 800223c:	2000662c 	.word	0x2000662c
 8002240:	40020800 	.word	0x40020800
 8002244:	200066ea 	.word	0x200066ea
 8002248:	20006774 	.word	0x20006774

0800224c <Principal_CAN_Start>:

void Principal_CAN_Start(CAN_HandleTypeDef* hcan)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08e      	sub	sp, #56	; 0x38
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	CAN_FilterTypeDef sFilterConfig;
	uint32_t filter_id = 0, mask_id = 0;
 8002254:	2300      	movs	r3, #0
 8002256:	637b      	str	r3, [r7, #52]	; 0x34
 8002258:	2300      	movs	r3, #0
 800225a:	633b      	str	r3, [r7, #48]	; 0x30

	filter_id = CAN_DAQ_FILTER;
 800225c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8002260:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_DAQ_MASK;
 8002262:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800226c:	2301      	movs	r3, #1
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 8002270:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002272:	0b5b      	lsrs	r3, r3, #13
 8002274:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	b29b      	uxth	r3, r3
 800227c:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 800227e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002280:	0b5b      	lsrs	r3, r3, #13
 8002282:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 8002284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002286:	00db      	lsls	r3, r3, #3
 8002288:	b29b      	uxth	r3, r3
 800228a:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 8002290:	2301      	movs	r3, #1
 8002292:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 14;
 8002298:	230e      	movs	r3, #14
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 800229c:	f107 0308 	add.w	r3, r7, #8
 80022a0:	4619      	mov	r1, r3
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f005 faaa 	bl	80077fc <HAL_CAN_ConfigFilter>

	filter_id = CAN_CFG_FILTER;
 80022a8:	4b20      	ldr	r3, [pc, #128]	; (800232c <Principal_CAN_Start+0xe0>)
 80022aa:	637b      	str	r3, [r7, #52]	; 0x34
	mask_id = CAN_CFG_MASK;
 80022ac:	4b20      	ldr	r3, [pc, #128]	; (8002330 <Principal_CAN_Start+0xe4>)
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	623b      	str	r3, [r7, #32]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80022b4:	2301      	movs	r3, #1
 80022b6:	627b      	str	r3, [r7, #36]	; 0x24
	sFilterConfig.FilterIdHigh = filter_id >> 13;
 80022b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022ba:	0b5b      	lsrs	r3, r3, #13
 80022bc:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterIdLow = (filter_id << 3) & 0xFFF8;
 80022be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterMaskIdHigh = mask_id >> 13;
 80022c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c8:	0b5b      	lsrs	r3, r3, #13
 80022ca:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterMaskIdLow = (mask_id << 3) & 0xFFF8;
 80022cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterActivation = ENABLE;
 80022d8:	2301      	movs	r3, #1
 80022da:	62bb      	str	r3, [r7, #40]	; 0x28
	sFilterConfig.FilterBank = 1;
 80022dc:	2301      	movs	r3, #1
 80022de:	61fb      	str	r3, [r7, #28]
	sFilterConfig.SlaveStartFilterBank = 15;
 80022e0:	230f      	movs	r3, #15
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c

	HAL_CAN_ConfigFilter(hcan, &sFilterConfig);
 80022e4:	f107 0308 	add.w	r3, r7, #8
 80022e8:	4619      	mov	r1, r3
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f005 fa86 	bl	80077fc <HAL_CAN_ConfigFilter>

	FT_CAN_FilterConfig(hcan, FT_Power_ECU, 2, CAN_RX_FIFO0);
 80022f0:	2300      	movs	r3, #0
 80022f2:	2202      	movs	r2, #2
 80022f4:	f240 2181 	movw	r1, #641	; 0x281
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f7fe f95b 	bl	80005b4 <FT_CAN_FilterConfig>
	FT_CAN_FilterConfig(hcan, FT_WBO2_Nano, 3, CAN_RX_FIFO0);
 80022fe:	2300      	movs	r3, #0
 8002300:	2203      	movs	r2, #3
 8002302:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe f954 	bl	80005b4 <FT_CAN_FilterConfig>
	PDM_CAN_FilterConfig(hcan, 4, CAN_RX_FIFO0);
 800230c:	2200      	movs	r2, #0
 800230e:	2104      	movs	r1, #4
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff fe99 	bl	8002048 <PDM_CAN_FilterConfig>

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002316:	2102      	movs	r1, #2
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f005 fdb5 	bl	8007e88 <HAL_CAN_ActivateNotification>

	HAL_CAN_Start(hcan);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f005 fb4c 	bl	80079bc <HAL_CAN_Start>
}
 8002324:	bf00      	nop
 8002326:	3738      	adds	r7, #56	; 0x38
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	1e300000 	.word	0x1e300000
 8002330:	1ff80000 	.word	0x1ff80000

08002334 <Principal_Transmit_Msg>:

void Principal_Transmit_Msg(CAN_HandleTypeDef* hcan, uint8_t msg_number)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	460b      	mov	r3, r1
 800233e:	70fb      	strb	r3, [r7, #3]
	switch(msg_number)
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	2b07      	cmp	r3, #7
 8002344:	d832      	bhi.n	80023ac <Principal_Transmit_Msg+0x78>
 8002346:	a201      	add	r2, pc, #4	; (adr r2, 800234c <Principal_Transmit_Msg+0x18>)
 8002348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800234c:	0800236d 	.word	0x0800236d
 8002350:	08002375 	.word	0x08002375
 8002354:	0800237d 	.word	0x0800237d
 8002358:	0800238d 	.word	0x0800238d
 800235c:	08002385 	.word	0x08002385
 8002360:	08002395 	.word	0x08002395
 8002364:	0800239d 	.word	0x0800239d
 8002368:	080023a5 	.word	0x080023a5
	{
		case ANALOG_1_4:
			Tx_Analog_1_4(hcan);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f821 	bl	80023b4 <Tx_Analog_1_4>
			break;
 8002372:	e01c      	b.n	80023ae <Principal_Transmit_Msg+0x7a>

		case ANALOG_5_8:
			Tx_Analog_5_8(hcan);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f8c7 	bl	8002508 <Tx_Analog_5_8>
			break;
 800237a:	e018      	b.n	80023ae <Principal_Transmit_Msg+0x7a>

		case ANALOG_9_12:
			Tx_Analog_9_12(hcan);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f96d 	bl	800265c <Tx_Analog_9_12>
			break;
 8002382:	e014      	b.n	80023ae <Principal_Transmit_Msg+0x7a>

		case VERIFY_MSG:
			Tx_Verify(hcan);
 8002384:	6878      	ldr	r0, [r7, #4]
 8002386:	f000 faaf 	bl	80028e8 <Tx_Verify>
			break;
 800238a:	e010      	b.n	80023ae <Principal_Transmit_Msg+0x7a>

		case RTC_MSG:
			Tx_RTC(hcan);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fa17 	bl	80027c0 <Tx_RTC>
			break;
 8002392:	e00c      	b.n	80023ae <Principal_Transmit_Msg+0x7a>

		case BEACON_MSG:
			Tx_Beacon(hcan);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 ffab 	bl	80032f0 <Tx_Beacon>
			break;
 800239a:	e008      	b.n	80023ae <Principal_Transmit_Msg+0x7a>

		case ECU_SAVE:
			Save_ECU(hcan);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f001 f851 	bl	8003444 <Save_ECU>
			break;
 80023a2:	e004      	b.n	80023ae <Principal_Transmit_Msg+0x7a>

		case PDM_SAVE:
			Save_PDM(hcan);
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f001 f99b 	bl	80036e0 <Save_PDM>
			break;
 80023aa:	e000      	b.n	80023ae <Principal_Transmit_Msg+0x7a>

		default:
			return;
 80023ac:	bf00      	nop
	}
}
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <Tx_Analog_1_4>:

static void Tx_Analog_1_4(CAN_HandleTypeDef* hcan)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x000f) == 0x0000)
 80023bc:	4b49      	ldr	r3, [pc, #292]	; (80024e4 <Tx_Analog_1_4+0x130>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	f003 030f 	and.w	r3, r3, #15
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d103      	bne.n	80023d0 <Tx_Analog_1_4+0x1c>
	{
		accCAN[ANALOG_1_4] = 0;
 80023c8:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <Tx_Analog_1_4+0x134>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
		return;
 80023ce:	e085      	b.n	80024dc <Tx_Analog_1_4+0x128>
	}

	txHeader.IDE = CAN_ID_STD;
 80023d0:	4b46      	ldr	r3, [pc, #280]	; (80024ec <Tx_Analog_1_4+0x138>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80023d6:	4b45      	ldr	r3, [pc, #276]	; (80024ec <Tx_Analog_1_4+0x138>)
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80023dc:	4b43      	ldr	r3, [pc, #268]	; (80024ec <Tx_Analog_1_4+0x138>)
 80023de:	2200      	movs	r2, #0
 80023e0:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_1_4;
 80023e2:	4b42      	ldr	r3, [pc, #264]	; (80024ec <Tx_Analog_1_4+0x138>)
 80023e4:	f240 5215 	movw	r2, #1301	; 0x515
 80023e8:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 80023ea:	4b40      	ldr	r3, [pc, #256]	; (80024ec <Tx_Analog_1_4+0x138>)
 80023ec:	2208      	movs	r2, #8
 80023ee:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[0] >> 8;
 80023f0:	4b3f      	ldr	r3, [pc, #252]	; (80024f0 <Tx_Analog_1_4+0x13c>)
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	0a1b      	lsrs	r3, r3, #8
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4b3e      	ldr	r3, [pc, #248]	; (80024f4 <Tx_Analog_1_4+0x140>)
 80023fc:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[0] & 0xff;
 80023fe:	4b3c      	ldr	r3, [pc, #240]	; (80024f0 <Tx_Analog_1_4+0x13c>)
 8002400:	881b      	ldrh	r3, [r3, #0]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	4b3b      	ldr	r3, [pc, #236]	; (80024f4 <Tx_Analog_1_4+0x140>)
 8002406:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[1] >> 8;
 8002408:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <Tx_Analog_1_4+0x13c>)
 800240a:	885b      	ldrh	r3, [r3, #2]
 800240c:	0a1b      	lsrs	r3, r3, #8
 800240e:	b29b      	uxth	r3, r3
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <Tx_Analog_1_4+0x140>)
 8002414:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[1] & 0xff;
 8002416:	4b36      	ldr	r3, [pc, #216]	; (80024f0 <Tx_Analog_1_4+0x13c>)
 8002418:	885b      	ldrh	r3, [r3, #2]
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b35      	ldr	r3, [pc, #212]	; (80024f4 <Tx_Analog_1_4+0x140>)
 800241e:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[2] >> 8;
 8002420:	4b33      	ldr	r3, [pc, #204]	; (80024f0 <Tx_Analog_1_4+0x13c>)
 8002422:	889b      	ldrh	r3, [r3, #4]
 8002424:	0a1b      	lsrs	r3, r3, #8
 8002426:	b29b      	uxth	r3, r3
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b32      	ldr	r3, [pc, #200]	; (80024f4 <Tx_Analog_1_4+0x140>)
 800242c:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[2] & 0xff;
 800242e:	4b30      	ldr	r3, [pc, #192]	; (80024f0 <Tx_Analog_1_4+0x13c>)
 8002430:	889b      	ldrh	r3, [r3, #4]
 8002432:	b2da      	uxtb	r2, r3
 8002434:	4b2f      	ldr	r3, [pc, #188]	; (80024f4 <Tx_Analog_1_4+0x140>)
 8002436:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[3] >> 8;
 8002438:	4b2d      	ldr	r3, [pc, #180]	; (80024f0 <Tx_Analog_1_4+0x13c>)
 800243a:	88db      	ldrh	r3, [r3, #6]
 800243c:	0a1b      	lsrs	r3, r3, #8
 800243e:	b29b      	uxth	r3, r3
 8002440:	b2da      	uxtb	r2, r3
 8002442:	4b2c      	ldr	r3, [pc, #176]	; (80024f4 <Tx_Analog_1_4+0x140>)
 8002444:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[3] & 0xff;
 8002446:	4b2a      	ldr	r3, [pc, #168]	; (80024f0 <Tx_Analog_1_4+0x13c>)
 8002448:	88db      	ldrh	r3, [r3, #6]
 800244a:	b2da      	uxtb	r2, r3
 800244c:	4b29      	ldr	r3, [pc, #164]	; (80024f4 <Tx_Analog_1_4+0x140>)
 800244e:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002450:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <Tx_Analog_1_4+0x144>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <Tx_Analog_1_4+0xb6>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <Tx_Analog_1_4+0x138>)
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	4b23      	ldr	r3, [pc, #140]	; (80024ec <Tx_Analog_1_4+0x138>)
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	b2da      	uxtb	r2, r3
 8002462:	4b24      	ldr	r3, [pc, #144]	; (80024f4 <Tx_Analog_1_4+0x140>)
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f003 fd67 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_1_4] >= perCAN[ANALOG_1_4]) && (perCAN[ANALOG_1_4] != MSG_DISABLED))
 800246a:	4b1f      	ldr	r3, [pc, #124]	; (80024e8 <Tx_Analog_1_4+0x134>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a23      	ldr	r2, [pc, #140]	; (80024fc <Tx_Analog_1_4+0x148>)
 8002470:	8812      	ldrh	r2, [r2, #0]
 8002472:	4293      	cmp	r3, r2
 8002474:	d331      	bcc.n	80024da <Tx_Analog_1_4+0x126>
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <Tx_Analog_1_4+0x148>)
 8002478:	881b      	ldrh	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d02d      	beq.n	80024da <Tx_Analog_1_4+0x126>
	{
		accCAN[ANALOG_1_4] -= perCAN[ANALOG_1_4];
 800247e:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <Tx_Analog_1_4+0x134>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <Tx_Analog_1_4+0x148>)
 8002484:	8812      	ldrh	r2, [r2, #0]
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	4a17      	ldr	r2, [pc, #92]	; (80024e8 <Tx_Analog_1_4+0x134>)
 800248a:	6013      	str	r3, [r2, #0]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 800248c:	4b1c      	ldr	r3, [pc, #112]	; (8002500 <Tx_Analog_1_4+0x14c>)
 800248e:	4a19      	ldr	r2, [pc, #100]	; (80024f4 <Tx_Analog_1_4+0x140>)
 8002490:	4916      	ldr	r1, [pc, #88]	; (80024ec <Tx_Analog_1_4+0x138>)
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f005 fad6 	bl	8007a44 <HAL_CAN_AddTxMessage>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <Tx_Analog_1_4+0xfa>
			verifyCAN |= 1;
 800249e:	4b19      	ldr	r3, [pc, #100]	; (8002504 <Tx_Analog_1_4+0x150>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	f043 0301 	orr.w	r3, r3, #1
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <Tx_Analog_1_4+0x150>)
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	e006      	b.n	80024bc <Tx_Analog_1_4+0x108>
		else
			verifyCAN &= 0x02;
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <Tx_Analog_1_4+0x150>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	b2da      	uxtb	r2, r3
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <Tx_Analog_1_4+0x150>)
 80024ba:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e002      	b.n	80024c8 <Tx_Analog_1_4+0x114>
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	3301      	adds	r3, #1
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f005 fb96 	bl	8007bfa <HAL_CAN_GetTxMailboxesFreeLevel>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d002      	beq.n	80024da <Tx_Analog_1_4+0x126>
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d9f3      	bls.n	80024c2 <Tx_Analog_1_4+0x10e>
	}

	return;
 80024da:	bf00      	nop
}
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20006776 	.word	0x20006776
 80024e8:	20006734 	.word	0x20006734
 80024ec:	20006610 	.word	0x20006610
 80024f0:	2000662c 	.word	0x2000662c
 80024f4:	200065e8 	.word	0x200065e8
 80024f8:	200066ea 	.word	0x200066ea
 80024fc:	20006708 	.word	0x20006708
 8002500:	200065f0 	.word	0x200065f0
 8002504:	20006774 	.word	0x20006774

08002508 <Tx_Analog_5_8>:

static void Tx_Analog_5_8(CAN_HandleTypeDef* hcan)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x00f0) == 0x0000)
 8002510:	4b49      	ldr	r3, [pc, #292]	; (8002638 <Tx_Analog_5_8+0x130>)
 8002512:	881b      	ldrh	r3, [r3, #0]
 8002514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d103      	bne.n	8002524 <Tx_Analog_5_8+0x1c>
	{
		accCAN[ANALOG_5_8] = 0;
 800251c:	4b47      	ldr	r3, [pc, #284]	; (800263c <Tx_Analog_5_8+0x134>)
 800251e:	2200      	movs	r2, #0
 8002520:	605a      	str	r2, [r3, #4]
		return;
 8002522:	e085      	b.n	8002630 <Tx_Analog_5_8+0x128>
	}

	txHeader.IDE = CAN_ID_STD;
 8002524:	4b46      	ldr	r3, [pc, #280]	; (8002640 <Tx_Analog_5_8+0x138>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800252a:	4b45      	ldr	r3, [pc, #276]	; (8002640 <Tx_Analog_5_8+0x138>)
 800252c:	2200      	movs	r2, #0
 800252e:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002530:	4b43      	ldr	r3, [pc, #268]	; (8002640 <Tx_Analog_5_8+0x138>)
 8002532:	2200      	movs	r2, #0
 8002534:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_5_8;
 8002536:	4b42      	ldr	r3, [pc, #264]	; (8002640 <Tx_Analog_5_8+0x138>)
 8002538:	f240 5216 	movw	r2, #1302	; 0x516
 800253c:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800253e:	4b40      	ldr	r3, [pc, #256]	; (8002640 <Tx_Analog_5_8+0x138>)
 8002540:	2208      	movs	r2, #8
 8002542:	611a      	str	r2, [r3, #16]

	txData[0] = adcBuffer[4] >> 8;
 8002544:	4b3f      	ldr	r3, [pc, #252]	; (8002644 <Tx_Analog_5_8+0x13c>)
 8002546:	891b      	ldrh	r3, [r3, #8]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	b29b      	uxth	r3, r3
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b3e      	ldr	r3, [pc, #248]	; (8002648 <Tx_Analog_5_8+0x140>)
 8002550:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[4] & 0xff;
 8002552:	4b3c      	ldr	r3, [pc, #240]	; (8002644 <Tx_Analog_5_8+0x13c>)
 8002554:	891b      	ldrh	r3, [r3, #8]
 8002556:	b2da      	uxtb	r2, r3
 8002558:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <Tx_Analog_5_8+0x140>)
 800255a:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[5] >> 8;
 800255c:	4b39      	ldr	r3, [pc, #228]	; (8002644 <Tx_Analog_5_8+0x13c>)
 800255e:	895b      	ldrh	r3, [r3, #10]
 8002560:	0a1b      	lsrs	r3, r3, #8
 8002562:	b29b      	uxth	r3, r3
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <Tx_Analog_5_8+0x140>)
 8002568:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[5] & 0xff;
 800256a:	4b36      	ldr	r3, [pc, #216]	; (8002644 <Tx_Analog_5_8+0x13c>)
 800256c:	895b      	ldrh	r3, [r3, #10]
 800256e:	b2da      	uxtb	r2, r3
 8002570:	4b35      	ldr	r3, [pc, #212]	; (8002648 <Tx_Analog_5_8+0x140>)
 8002572:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[6] >> 8;
 8002574:	4b33      	ldr	r3, [pc, #204]	; (8002644 <Tx_Analog_5_8+0x13c>)
 8002576:	899b      	ldrh	r3, [r3, #12]
 8002578:	0a1b      	lsrs	r3, r3, #8
 800257a:	b29b      	uxth	r3, r3
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b32      	ldr	r3, [pc, #200]	; (8002648 <Tx_Analog_5_8+0x140>)
 8002580:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[6] & 0xff;
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <Tx_Analog_5_8+0x13c>)
 8002584:	899b      	ldrh	r3, [r3, #12]
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <Tx_Analog_5_8+0x140>)
 800258a:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[7] >> 8;
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <Tx_Analog_5_8+0x13c>)
 800258e:	89db      	ldrh	r3, [r3, #14]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	b29b      	uxth	r3, r3
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4b2c      	ldr	r3, [pc, #176]	; (8002648 <Tx_Analog_5_8+0x140>)
 8002598:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[7] & 0xff;
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <Tx_Analog_5_8+0x13c>)
 800259c:	89db      	ldrh	r3, [r3, #14]
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b29      	ldr	r3, [pc, #164]	; (8002648 <Tx_Analog_5_8+0x140>)
 80025a2:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 80025a4:	4b29      	ldr	r3, [pc, #164]	; (800264c <Tx_Analog_5_8+0x144>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d108      	bne.n	80025be <Tx_Analog_5_8+0xb6>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <Tx_Analog_5_8+0x138>)
 80025ae:	6819      	ldr	r1, [r3, #0]
 80025b0:	4b23      	ldr	r3, [pc, #140]	; (8002640 <Tx_Analog_5_8+0x138>)
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <Tx_Analog_5_8+0x140>)
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f003 fcbd 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_5_8] >= perCAN[ANALOG_5_8]) && (perCAN[ANALOG_5_8] != MSG_DISABLED))
 80025be:	4b1f      	ldr	r3, [pc, #124]	; (800263c <Tx_Analog_5_8+0x134>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	4a23      	ldr	r2, [pc, #140]	; (8002650 <Tx_Analog_5_8+0x148>)
 80025c4:	8852      	ldrh	r2, [r2, #2]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d331      	bcc.n	800262e <Tx_Analog_5_8+0x126>
 80025ca:	4b21      	ldr	r3, [pc, #132]	; (8002650 <Tx_Analog_5_8+0x148>)
 80025cc:	885b      	ldrh	r3, [r3, #2]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d02d      	beq.n	800262e <Tx_Analog_5_8+0x126>
	{
		accCAN[ANALOG_5_8] -= perCAN[ANALOG_5_8];
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <Tx_Analog_5_8+0x134>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a1e      	ldr	r2, [pc, #120]	; (8002650 <Tx_Analog_5_8+0x148>)
 80025d8:	8852      	ldrh	r2, [r2, #2]
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	4a17      	ldr	r2, [pc, #92]	; (800263c <Tx_Analog_5_8+0x134>)
 80025de:	6053      	str	r3, [r2, #4]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80025e0:	4b1c      	ldr	r3, [pc, #112]	; (8002654 <Tx_Analog_5_8+0x14c>)
 80025e2:	4a19      	ldr	r2, [pc, #100]	; (8002648 <Tx_Analog_5_8+0x140>)
 80025e4:	4916      	ldr	r1, [pc, #88]	; (8002640 <Tx_Analog_5_8+0x138>)
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f005 fa2c 	bl	8007a44 <HAL_CAN_AddTxMessage>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d107      	bne.n	8002602 <Tx_Analog_5_8+0xfa>
			verifyCAN |= 1;
 80025f2:	4b19      	ldr	r3, [pc, #100]	; (8002658 <Tx_Analog_5_8+0x150>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	4b16      	ldr	r3, [pc, #88]	; (8002658 <Tx_Analog_5_8+0x150>)
 80025fe:	701a      	strb	r2, [r3, #0]
 8002600:	e006      	b.n	8002610 <Tx_Analog_5_8+0x108>
		else
			verifyCAN &= 0x02;
 8002602:	4b15      	ldr	r3, [pc, #84]	; (8002658 <Tx_Analog_5_8+0x150>)
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	b2da      	uxtb	r2, r3
 800260c:	4b12      	ldr	r3, [pc, #72]	; (8002658 <Tx_Analog_5_8+0x150>)
 800260e:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002610:	2300      	movs	r3, #0
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e002      	b.n	800261c <Tx_Analog_5_8+0x114>
 8002616:	7bfb      	ldrb	r3, [r7, #15]
 8002618:	3301      	adds	r3, #1
 800261a:	73fb      	strb	r3, [r7, #15]
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f005 faec 	bl	8007bfa <HAL_CAN_GetTxMailboxesFreeLevel>
 8002622:	4603      	mov	r3, r0
 8002624:	2b03      	cmp	r3, #3
 8002626:	d002      	beq.n	800262e <Tx_Analog_5_8+0x126>
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d9f3      	bls.n	8002616 <Tx_Analog_5_8+0x10e>
	}

	return;
 800262e:	bf00      	nop
}
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20006776 	.word	0x20006776
 800263c:	20006734 	.word	0x20006734
 8002640:	20006610 	.word	0x20006610
 8002644:	2000662c 	.word	0x2000662c
 8002648:	200065e8 	.word	0x200065e8
 800264c:	200066ea 	.word	0x200066ea
 8002650:	20006708 	.word	0x20006708
 8002654:	200065f0 	.word	0x200065f0
 8002658:	20006774 	.word	0x20006774

0800265c <Tx_Analog_9_12>:

static void Tx_Analog_9_12(CAN_HandleTypeDef* hcan)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
	if((verifyADC & 0x0f00) == 0x0000)
 8002664:	4b4d      	ldr	r3, [pc, #308]	; (800279c <Tx_Analog_9_12+0x140>)
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <Tx_Analog_9_12+0x1c>
	{
		accCAN[ANALOG_9_12] = 0;
 8002670:	4b4b      	ldr	r3, [pc, #300]	; (80027a0 <Tx_Analog_9_12+0x144>)
 8002672:	2200      	movs	r2, #0
 8002674:	609a      	str	r2, [r3, #8]
		return;
 8002676:	e08e      	b.n	8002796 <Tx_Analog_9_12+0x13a>
	}

	txHeader.IDE = CAN_ID_STD;
 8002678:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <Tx_Analog_9_12+0x148>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 800267e:	4b49      	ldr	r3, [pc, #292]	; (80027a4 <Tx_Analog_9_12+0x148>)
 8002680:	2200      	movs	r2, #0
 8002682:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8002684:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <Tx_Analog_9_12+0x148>)
 8002686:	2200      	movs	r2, #0
 8002688:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + ANALOG_9_12;
 800268a:	4b46      	ldr	r3, [pc, #280]	; (80027a4 <Tx_Analog_9_12+0x148>)
 800268c:	f240 5217 	movw	r2, #1303	; 0x517
 8002690:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <Tx_Analog_9_12+0x148>)
 8002694:	2208      	movs	r2, #8
 8002696:	611a      	str	r2, [r3, #16]

	if((verifyADC & 0x0f00) == 0)
 8002698:	4b40      	ldr	r3, [pc, #256]	; (800279c <Tx_Analog_9_12+0x140>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d075      	beq.n	8002790 <Tx_Analog_9_12+0x134>
		return;

	txData[0] = adcBuffer[8] >> 8;
 80026a4:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <Tx_Analog_9_12+0x14c>)
 80026a6:	8a1b      	ldrh	r3, [r3, #16]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b3f      	ldr	r3, [pc, #252]	; (80027ac <Tx_Analog_9_12+0x150>)
 80026b0:	701a      	strb	r2, [r3, #0]
	txData[1] = adcBuffer[8] & 0xff;
 80026b2:	4b3d      	ldr	r3, [pc, #244]	; (80027a8 <Tx_Analog_9_12+0x14c>)
 80026b4:	8a1b      	ldrh	r3, [r3, #16]
 80026b6:	b2da      	uxtb	r2, r3
 80026b8:	4b3c      	ldr	r3, [pc, #240]	; (80027ac <Tx_Analog_9_12+0x150>)
 80026ba:	705a      	strb	r2, [r3, #1]
	txData[2] = adcBuffer[9] >> 8;
 80026bc:	4b3a      	ldr	r3, [pc, #232]	; (80027a8 <Tx_Analog_9_12+0x14c>)
 80026be:	8a5b      	ldrh	r3, [r3, #18]
 80026c0:	0a1b      	lsrs	r3, r3, #8
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	4b39      	ldr	r3, [pc, #228]	; (80027ac <Tx_Analog_9_12+0x150>)
 80026c8:	709a      	strb	r2, [r3, #2]
	txData[3] = adcBuffer[9] & 0xff;
 80026ca:	4b37      	ldr	r3, [pc, #220]	; (80027a8 <Tx_Analog_9_12+0x14c>)
 80026cc:	8a5b      	ldrh	r3, [r3, #18]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	4b36      	ldr	r3, [pc, #216]	; (80027ac <Tx_Analog_9_12+0x150>)
 80026d2:	70da      	strb	r2, [r3, #3]
	txData[4] = adcBuffer[10] >> 8;
 80026d4:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <Tx_Analog_9_12+0x14c>)
 80026d6:	8a9b      	ldrh	r3, [r3, #20]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	b29b      	uxth	r3, r3
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b33      	ldr	r3, [pc, #204]	; (80027ac <Tx_Analog_9_12+0x150>)
 80026e0:	711a      	strb	r2, [r3, #4]
	txData[5] = adcBuffer[10] & 0xff;
 80026e2:	4b31      	ldr	r3, [pc, #196]	; (80027a8 <Tx_Analog_9_12+0x14c>)
 80026e4:	8a9b      	ldrh	r3, [r3, #20]
 80026e6:	b2da      	uxtb	r2, r3
 80026e8:	4b30      	ldr	r3, [pc, #192]	; (80027ac <Tx_Analog_9_12+0x150>)
 80026ea:	715a      	strb	r2, [r3, #5]
	txData[6] = adcBuffer[11] >> 8;
 80026ec:	4b2e      	ldr	r3, [pc, #184]	; (80027a8 <Tx_Analog_9_12+0x14c>)
 80026ee:	8adb      	ldrh	r3, [r3, #22]
 80026f0:	0a1b      	lsrs	r3, r3, #8
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	b2da      	uxtb	r2, r3
 80026f6:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <Tx_Analog_9_12+0x150>)
 80026f8:	719a      	strb	r2, [r3, #6]
	txData[7] = adcBuffer[11] & 0xff;
 80026fa:	4b2b      	ldr	r3, [pc, #172]	; (80027a8 <Tx_Analog_9_12+0x14c>)
 80026fc:	8adb      	ldrh	r3, [r3, #22]
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <Tx_Analog_9_12+0x150>)
 8002702:	71da      	strb	r2, [r3, #7]

	if(flagDatalogger == DL_SAVE)
 8002704:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <Tx_Analog_9_12+0x154>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d108      	bne.n	800271e <Tx_Analog_9_12+0xc2>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
 800270c:	4b25      	ldr	r3, [pc, #148]	; (80027a4 <Tx_Analog_9_12+0x148>)
 800270e:	6819      	ldr	r1, [r3, #0]
 8002710:	4b24      	ldr	r3, [pc, #144]	; (80027a4 <Tx_Analog_9_12+0x148>)
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	4b25      	ldr	r3, [pc, #148]	; (80027ac <Tx_Analog_9_12+0x150>)
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f003 fc0d 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	if((accCAN[ANALOG_9_12] >= perCAN[ANALOG_9_12]) && (perCAN[ANALOG_9_12] != MSG_DISABLED))
 800271e:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <Tx_Analog_9_12+0x144>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4a24      	ldr	r2, [pc, #144]	; (80027b4 <Tx_Analog_9_12+0x158>)
 8002724:	8892      	ldrh	r2, [r2, #4]
 8002726:	4293      	cmp	r3, r2
 8002728:	d334      	bcc.n	8002794 <Tx_Analog_9_12+0x138>
 800272a:	4b22      	ldr	r3, [pc, #136]	; (80027b4 <Tx_Analog_9_12+0x158>)
 800272c:	889b      	ldrh	r3, [r3, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d030      	beq.n	8002794 <Tx_Analog_9_12+0x138>
	{
		accCAN[ANALOG_9_12] -= perCAN[ANALOG_9_12];
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <Tx_Analog_9_12+0x144>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <Tx_Analog_9_12+0x158>)
 8002738:	8892      	ldrh	r2, [r2, #4]
 800273a:	1a9b      	subs	r3, r3, r2
 800273c:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <Tx_Analog_9_12+0x144>)
 800273e:	6093      	str	r3, [r2, #8]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002740:	4b1d      	ldr	r3, [pc, #116]	; (80027b8 <Tx_Analog_9_12+0x15c>)
 8002742:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <Tx_Analog_9_12+0x150>)
 8002744:	4917      	ldr	r1, [pc, #92]	; (80027a4 <Tx_Analog_9_12+0x148>)
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f005 f97c 	bl	8007a44 <HAL_CAN_AddTxMessage>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d107      	bne.n	8002762 <Tx_Analog_9_12+0x106>
			verifyCAN |= 1;
 8002752:	4b1a      	ldr	r3, [pc, #104]	; (80027bc <Tx_Analog_9_12+0x160>)
 8002754:	781b      	ldrb	r3, [r3, #0]
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	4b17      	ldr	r3, [pc, #92]	; (80027bc <Tx_Analog_9_12+0x160>)
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	e006      	b.n	8002770 <Tx_Analog_9_12+0x114>
		else
			verifyCAN &= 0x02;
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <Tx_Analog_9_12+0x160>)
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	b2da      	uxtb	r2, r3
 800276c:	4b13      	ldr	r3, [pc, #76]	; (80027bc <Tx_Analog_9_12+0x160>)
 800276e:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	e002      	b.n	800277c <Tx_Analog_9_12+0x120>
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	3301      	adds	r3, #1
 800277a:	73fb      	strb	r3, [r7, #15]
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f005 fa3c 	bl	8007bfa <HAL_CAN_GetTxMailboxesFreeLevel>
 8002782:	4603      	mov	r3, r0
 8002784:	2b03      	cmp	r3, #3
 8002786:	d005      	beq.n	8002794 <Tx_Analog_9_12+0x138>
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d9f3      	bls.n	8002776 <Tx_Analog_9_12+0x11a>
	}

	return;
 800278e:	e001      	b.n	8002794 <Tx_Analog_9_12+0x138>
		return;
 8002790:	bf00      	nop
 8002792:	e000      	b.n	8002796 <Tx_Analog_9_12+0x13a>
	return;
 8002794:	bf00      	nop
}
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	20006776 	.word	0x20006776
 80027a0:	20006734 	.word	0x20006734
 80027a4:	20006610 	.word	0x20006610
 80027a8:	2000662c 	.word	0x2000662c
 80027ac:	200065e8 	.word	0x200065e8
 80027b0:	200066ea 	.word	0x200066ea
 80027b4:	20006708 	.word	0x20006708
 80027b8:	200065f0 	.word	0x200065f0
 80027bc:	20006774 	.word	0x20006774

080027c0 <Tx_RTC>:

static void Tx_RTC(CAN_HandleTypeDef* hcan)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 80027c8:	4b3d      	ldr	r3, [pc, #244]	; (80028c0 <Tx_RTC+0x100>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <Tx_RTC+0x100>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80027d4:	4b3a      	ldr	r3, [pc, #232]	; (80028c0 <Tx_RTC+0x100>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + RTC_MSG;
 80027da:	4b39      	ldr	r3, [pc, #228]	; (80028c0 <Tx_RTC+0x100>)
 80027dc:	f44f 62a3 	mov.w	r2, #1304	; 0x518
 80027e0:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 6;
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <Tx_RTC+0x100>)
 80027e4:	2206      	movs	r2, #6
 80027e6:	611a      	str	r2, [r3, #16]

	HAL_RTC_GetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
 80027e8:	2200      	movs	r2, #0
 80027ea:	4936      	ldr	r1, [pc, #216]	; (80028c4 <Tx_RTC+0x104>)
 80027ec:	4836      	ldr	r0, [pc, #216]	; (80028c8 <Tx_RTC+0x108>)
 80027ee:	f00a f959 	bl	800caa4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
 80027f2:	2200      	movs	r2, #0
 80027f4:	4935      	ldr	r1, [pc, #212]	; (80028cc <Tx_RTC+0x10c>)
 80027f6:	4834      	ldr	r0, [pc, #208]	; (80028c8 <Tx_RTC+0x108>)
 80027f8:	f00a fa36 	bl	800cc68 <HAL_RTC_GetDate>

	txData[0] = rtcDate.Year;
 80027fc:	4b33      	ldr	r3, [pc, #204]	; (80028cc <Tx_RTC+0x10c>)
 80027fe:	78da      	ldrb	r2, [r3, #3]
 8002800:	4b33      	ldr	r3, [pc, #204]	; (80028d0 <Tx_RTC+0x110>)
 8002802:	701a      	strb	r2, [r3, #0]
	txData[1] = rtcDate.Month;
 8002804:	4b31      	ldr	r3, [pc, #196]	; (80028cc <Tx_RTC+0x10c>)
 8002806:	785a      	ldrb	r2, [r3, #1]
 8002808:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <Tx_RTC+0x110>)
 800280a:	705a      	strb	r2, [r3, #1]
	txData[2] = rtcDate.Date;
 800280c:	4b2f      	ldr	r3, [pc, #188]	; (80028cc <Tx_RTC+0x10c>)
 800280e:	789a      	ldrb	r2, [r3, #2]
 8002810:	4b2f      	ldr	r3, [pc, #188]	; (80028d0 <Tx_RTC+0x110>)
 8002812:	709a      	strb	r2, [r3, #2]
	txData[3] = rtcTime.Hours;
 8002814:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <Tx_RTC+0x104>)
 8002816:	781a      	ldrb	r2, [r3, #0]
 8002818:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <Tx_RTC+0x110>)
 800281a:	70da      	strb	r2, [r3, #3]
	txData[4] = rtcTime.Minutes;
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <Tx_RTC+0x104>)
 800281e:	785a      	ldrb	r2, [r3, #1]
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <Tx_RTC+0x110>)
 8002822:	711a      	strb	r2, [r3, #4]
	txData[5] = rtcTime.Seconds;
 8002824:	4b27      	ldr	r3, [pc, #156]	; (80028c4 <Tx_RTC+0x104>)
 8002826:	789a      	ldrb	r2, [r3, #2]
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <Tx_RTC+0x110>)
 800282a:	715a      	strb	r2, [r3, #5]


	if(flagDatalogger == DL_SAVE)
 800282c:	4b29      	ldr	r3, [pc, #164]	; (80028d4 <Tx_RTC+0x114>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	d108      	bne.n	8002846 <Tx_RTC+0x86>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
 8002834:	4b22      	ldr	r3, [pc, #136]	; (80028c0 <Tx_RTC+0x100>)
 8002836:	6819      	ldr	r1, [r3, #0]
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <Tx_RTC+0x100>)
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4b24      	ldr	r3, [pc, #144]	; (80028d0 <Tx_RTC+0x110>)
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f003 fb79 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	if((accCAN[RTC_MSG] >= perCAN[RTC_MSG]) && (perCAN[RTC_MSG] != MSG_DISABLED))
 8002846:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <Tx_RTC+0x118>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4a24      	ldr	r2, [pc, #144]	; (80028dc <Tx_RTC+0x11c>)
 800284c:	88d2      	ldrh	r2, [r2, #6]
 800284e:	4293      	cmp	r3, r2
 8002850:	d332      	bcc.n	80028b8 <Tx_RTC+0xf8>
 8002852:	4b22      	ldr	r3, [pc, #136]	; (80028dc <Tx_RTC+0x11c>)
 8002854:	88db      	ldrh	r3, [r3, #6]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d02e      	beq.n	80028b8 <Tx_RTC+0xf8>
	{
		accCAN[RTC_MSG] -= perCAN[RTC_MSG];
 800285a:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <Tx_RTC+0x118>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	4a1f      	ldr	r2, [pc, #124]	; (80028dc <Tx_RTC+0x11c>)
 8002860:	88d2      	ldrh	r2, [r2, #6]
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	4a1c      	ldr	r2, [pc, #112]	; (80028d8 <Tx_RTC+0x118>)
 8002866:	60d3      	str	r3, [r2, #12]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 8002868:	4b1d      	ldr	r3, [pc, #116]	; (80028e0 <Tx_RTC+0x120>)
 800286a:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <Tx_RTC+0x110>)
 800286c:	4914      	ldr	r1, [pc, #80]	; (80028c0 <Tx_RTC+0x100>)
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f005 f8e8 	bl	8007a44 <HAL_CAN_AddTxMessage>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d107      	bne.n	800288a <Tx_RTC+0xca>
			verifyCAN |= 1;
 800287a:	4b1a      	ldr	r3, [pc, #104]	; (80028e4 <Tx_RTC+0x124>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	f043 0301 	orr.w	r3, r3, #1
 8002882:	b2da      	uxtb	r2, r3
 8002884:	4b17      	ldr	r3, [pc, #92]	; (80028e4 <Tx_RTC+0x124>)
 8002886:	701a      	strb	r2, [r3, #0]
 8002888:	e006      	b.n	8002898 <Tx_RTC+0xd8>
		else
			verifyCAN &= 0x02;
 800288a:	4b16      	ldr	r3, [pc, #88]	; (80028e4 <Tx_RTC+0x124>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	b2da      	uxtb	r2, r3
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <Tx_RTC+0x124>)
 8002896:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e002      	b.n	80028a4 <Tx_RTC+0xe4>
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	3301      	adds	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f005 f9a8 	bl	8007bfa <HAL_CAN_GetTxMailboxesFreeLevel>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b03      	cmp	r3, #3
 80028ae:	d003      	beq.n	80028b8 <Tx_RTC+0xf8>
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d9f3      	bls.n	800289e <Tx_RTC+0xde>
	}

	return;
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
}
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20006610 	.word	0x20006610
 80028c4:	200066f4 	.word	0x200066f4
 80028c8:	20000380 	.word	0x20000380
 80028cc:	200066f0 	.word	0x200066f0
 80028d0:	200065e8 	.word	0x200065e8
 80028d4:	200066ea 	.word	0x200066ea
 80028d8:	20006734 	.word	0x20006734
 80028dc:	20006708 	.word	0x20006708
 80028e0:	200065f0 	.word	0x200065f0
 80028e4:	20006774 	.word	0x20006774

080028e8 <Tx_Verify>:

static void Tx_Verify(CAN_HandleTypeDef* hcan)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	txHeader.IDE = CAN_ID_STD;
 80028f0:	4bc8      	ldr	r3, [pc, #800]	; (8002c14 <Tx_Verify+0x32c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80028f6:	4bc7      	ldr	r3, [pc, #796]	; (8002c14 <Tx_Verify+0x32c>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 80028fc:	4bc5      	ldr	r3, [pc, #788]	; (8002c14 <Tx_Verify+0x32c>)
 80028fe:	2200      	movs	r2, #0
 8002900:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = FIRST_ID + VERIFY_MSG;
 8002902:	4bc4      	ldr	r3, [pc, #784]	; (8002c14 <Tx_Verify+0x32c>)
 8002904:	f240 5219 	movw	r2, #1305	; 0x519
 8002908:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 8;
 800290a:	4bc2      	ldr	r3, [pc, #776]	; (8002c14 <Tx_Verify+0x32c>)
 800290c:	2208      	movs	r2, #8
 800290e:	611a      	str	r2, [r3, #16]

	txData[0] = verifyADC & 0xff;
 8002910:	4bc1      	ldr	r3, [pc, #772]	; (8002c18 <Tx_Verify+0x330>)
 8002912:	881b      	ldrh	r3, [r3, #0]
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4bc1      	ldr	r3, [pc, #772]	; (8002c1c <Tx_Verify+0x334>)
 8002918:	701a      	strb	r2, [r3, #0]
	txData[1] = (verifyADC >> 8) & 0x0f;
 800291a:	4bbf      	ldr	r3, [pc, #764]	; (8002c18 <Tx_Verify+0x330>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	0a1b      	lsrs	r3, r3, #8
 8002920:	b29b      	uxth	r3, r3
 8002922:	b2db      	uxtb	r3, r3
 8002924:	f003 030f 	and.w	r3, r3, #15
 8002928:	b2da      	uxtb	r2, r3
 800292a:	4bbc      	ldr	r3, [pc, #752]	; (8002c1c <Tx_Verify+0x334>)
 800292c:	705a      	strb	r2, [r3, #1]

	if(flagDatalogger == DL_SAVE)
 800292e:	4bbc      	ldr	r3, [pc, #752]	; (8002c20 <Tx_Verify+0x338>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d10d      	bne.n	8002952 <Tx_Verify+0x6a>
	{
		txData[1] |= (1 << 4);
 8002936:	4bb9      	ldr	r3, [pc, #740]	; (8002c1c <Tx_Verify+0x334>)
 8002938:	785b      	ldrb	r3, [r3, #1]
 800293a:	f043 0310 	orr.w	r3, r3, #16
 800293e:	b2da      	uxtb	r2, r3
 8002940:	4bb6      	ldr	r3, [pc, #728]	; (8002c1c <Tx_Verify+0x334>)
 8002942:	705a      	strb	r2, [r3, #1]
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_RESET);
 8002944:	2200      	movs	r2, #0
 8002946:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800294a:	48b6      	ldr	r0, [pc, #728]	; (8002c24 <Tx_Verify+0x33c>)
 800294c:	f006 fb74 	bl	8009038 <HAL_GPIO_WritePin>
 8002950:	e005      	b.n	800295e <Tx_Verify+0x76>
	}
	else
		HAL_GPIO_WritePin(OUT0_GPIO_Port, OUT0_Pin, GPIO_PIN_SET);
 8002952:	2201      	movs	r2, #1
 8002954:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002958:	48b2      	ldr	r0, [pc, #712]	; (8002c24 <Tx_Verify+0x33c>)
 800295a:	f006 fb6d 	bl	8009038 <HAL_GPIO_WritePin>

	if(flagRTC == RTC_OK)
 800295e:	4bb2      	ldr	r3, [pc, #712]	; (8002c28 <Tx_Verify+0x340>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <Tx_Verify+0x8c>
		txData[1] |= (1 << 5);
 8002966:	4bad      	ldr	r3, [pc, #692]	; (8002c1c <Tx_Verify+0x334>)
 8002968:	785b      	ldrb	r3, [r3, #1]
 800296a:	f043 0320 	orr.w	r3, r3, #32
 800296e:	b2da      	uxtb	r2, r3
 8002970:	4baa      	ldr	r3, [pc, #680]	; (8002c1c <Tx_Verify+0x334>)
 8002972:	705a      	strb	r2, [r3, #1]

	__FREQ_TO_BUFFER(txData[2], perMsg[ANALOG_1_4]);
 8002974:	4bad      	ldr	r3, [pc, #692]	; (8002c2c <Tx_Verify+0x344>)
 8002976:	881b      	ldrh	r3, [r3, #0]
 8002978:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800297c:	f000 8081 	beq.w	8002a82 <Tx_Verify+0x19a>
 8002980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002984:	f300 80a9 	bgt.w	8002ada <Tx_Verify+0x1f2>
 8002988:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800298c:	d07d      	beq.n	8002a8a <Tx_Verify+0x1a2>
 800298e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002992:	f300 80a2 	bgt.w	8002ada <Tx_Verify+0x1f2>
 8002996:	2bc8      	cmp	r3, #200	; 0xc8
 8002998:	d07b      	beq.n	8002a92 <Tx_Verify+0x1aa>
 800299a:	2bc8      	cmp	r3, #200	; 0xc8
 800299c:	f300 809d 	bgt.w	8002ada <Tx_Verify+0x1f2>
 80029a0:	2b32      	cmp	r3, #50	; 0x32
 80029a2:	dc6b      	bgt.n	8002a7c <Tx_Verify+0x194>
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	f2c0 8098 	blt.w	8002ada <Tx_Verify+0x1f2>
 80029aa:	3b02      	subs	r3, #2
 80029ac:	2b30      	cmp	r3, #48	; 0x30
 80029ae:	f200 8094 	bhi.w	8002ada <Tx_Verify+0x1f2>
 80029b2:	a201      	add	r2, pc, #4	; (adr r2, 80029b8 <Tx_Verify+0xd0>)
 80029b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b8:	08002ad3 	.word	0x08002ad3
 80029bc:	08002adb 	.word	0x08002adb
 80029c0:	08002acb 	.word	0x08002acb
 80029c4:	08002ac3 	.word	0x08002ac3
 80029c8:	08002adb 	.word	0x08002adb
 80029cc:	08002adb 	.word	0x08002adb
 80029d0:	08002adb 	.word	0x08002adb
 80029d4:	08002adb 	.word	0x08002adb
 80029d8:	08002abb 	.word	0x08002abb
 80029dc:	08002adb 	.word	0x08002adb
 80029e0:	08002adb 	.word	0x08002adb
 80029e4:	08002adb 	.word	0x08002adb
 80029e8:	08002adb 	.word	0x08002adb
 80029ec:	08002adb 	.word	0x08002adb
 80029f0:	08002adb 	.word	0x08002adb
 80029f4:	08002adb 	.word	0x08002adb
 80029f8:	08002adb 	.word	0x08002adb
 80029fc:	08002adb 	.word	0x08002adb
 8002a00:	08002ab3 	.word	0x08002ab3
 8002a04:	08002adb 	.word	0x08002adb
 8002a08:	08002adb 	.word	0x08002adb
 8002a0c:	08002adb 	.word	0x08002adb
 8002a10:	08002adb 	.word	0x08002adb
 8002a14:	08002adb 	.word	0x08002adb
 8002a18:	08002adb 	.word	0x08002adb
 8002a1c:	08002adb 	.word	0x08002adb
 8002a20:	08002adb 	.word	0x08002adb
 8002a24:	08002adb 	.word	0x08002adb
 8002a28:	08002adb 	.word	0x08002adb
 8002a2c:	08002adb 	.word	0x08002adb
 8002a30:	08002adb 	.word	0x08002adb
 8002a34:	08002adb 	.word	0x08002adb
 8002a38:	08002adb 	.word	0x08002adb
 8002a3c:	08002adb 	.word	0x08002adb
 8002a40:	08002adb 	.word	0x08002adb
 8002a44:	08002adb 	.word	0x08002adb
 8002a48:	08002adb 	.word	0x08002adb
 8002a4c:	08002adb 	.word	0x08002adb
 8002a50:	08002aab 	.word	0x08002aab
 8002a54:	08002adb 	.word	0x08002adb
 8002a58:	08002adb 	.word	0x08002adb
 8002a5c:	08002adb 	.word	0x08002adb
 8002a60:	08002adb 	.word	0x08002adb
 8002a64:	08002adb 	.word	0x08002adb
 8002a68:	08002adb 	.word	0x08002adb
 8002a6c:	08002adb 	.word	0x08002adb
 8002a70:	08002adb 	.word	0x08002adb
 8002a74:	08002adb 	.word	0x08002adb
 8002a78:	08002aa3 	.word	0x08002aa3
 8002a7c:	2b64      	cmp	r3, #100	; 0x64
 8002a7e:	d00c      	beq.n	8002a9a <Tx_Verify+0x1b2>
 8002a80:	e02b      	b.n	8002ada <Tx_Verify+0x1f2>
 8002a82:	4b66      	ldr	r3, [pc, #408]	; (8002c1c <Tx_Verify+0x334>)
 8002a84:	2201      	movs	r2, #1
 8002a86:	709a      	strb	r2, [r3, #2]
 8002a88:	e02a      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002a8a:	4b64      	ldr	r3, [pc, #400]	; (8002c1c <Tx_Verify+0x334>)
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	709a      	strb	r2, [r3, #2]
 8002a90:	e026      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002a92:	4b62      	ldr	r3, [pc, #392]	; (8002c1c <Tx_Verify+0x334>)
 8002a94:	2203      	movs	r2, #3
 8002a96:	709a      	strb	r2, [r3, #2]
 8002a98:	e022      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002a9a:	4b60      	ldr	r3, [pc, #384]	; (8002c1c <Tx_Verify+0x334>)
 8002a9c:	2204      	movs	r2, #4
 8002a9e:	709a      	strb	r2, [r3, #2]
 8002aa0:	e01e      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002aa2:	4b5e      	ldr	r3, [pc, #376]	; (8002c1c <Tx_Verify+0x334>)
 8002aa4:	2205      	movs	r2, #5
 8002aa6:	709a      	strb	r2, [r3, #2]
 8002aa8:	e01a      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002aaa:	4b5c      	ldr	r3, [pc, #368]	; (8002c1c <Tx_Verify+0x334>)
 8002aac:	2206      	movs	r2, #6
 8002aae:	709a      	strb	r2, [r3, #2]
 8002ab0:	e016      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002ab2:	4b5a      	ldr	r3, [pc, #360]	; (8002c1c <Tx_Verify+0x334>)
 8002ab4:	2207      	movs	r2, #7
 8002ab6:	709a      	strb	r2, [r3, #2]
 8002ab8:	e012      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002aba:	4b58      	ldr	r3, [pc, #352]	; (8002c1c <Tx_Verify+0x334>)
 8002abc:	2208      	movs	r2, #8
 8002abe:	709a      	strb	r2, [r3, #2]
 8002ac0:	e00e      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002ac2:	4b56      	ldr	r3, [pc, #344]	; (8002c1c <Tx_Verify+0x334>)
 8002ac4:	2209      	movs	r2, #9
 8002ac6:	709a      	strb	r2, [r3, #2]
 8002ac8:	e00a      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002aca:	4b54      	ldr	r3, [pc, #336]	; (8002c1c <Tx_Verify+0x334>)
 8002acc:	220a      	movs	r2, #10
 8002ace:	709a      	strb	r2, [r3, #2]
 8002ad0:	e006      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002ad2:	4b52      	ldr	r3, [pc, #328]	; (8002c1c <Tx_Verify+0x334>)
 8002ad4:	220b      	movs	r2, #11
 8002ad6:	709a      	strb	r2, [r3, #2]
 8002ad8:	e002      	b.n	8002ae0 <Tx_Verify+0x1f8>
 8002ada:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <Tx_Verify+0x334>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	709a      	strb	r2, [r3, #2]
 8002ae0:	bf00      	nop
	__FREQ_TO_BUFFER(txData[3], perMsg[ANALOG_5_8]);
 8002ae2:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <Tx_Verify+0x344>)
 8002ae4:	885b      	ldrh	r3, [r3, #2]
 8002ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002aea:	f000 8082 	beq.w	8002bf2 <Tx_Verify+0x30a>
 8002aee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002af2:	f300 80b9 	bgt.w	8002c68 <Tx_Verify+0x380>
 8002af6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002afa:	d07e      	beq.n	8002bfa <Tx_Verify+0x312>
 8002afc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b00:	f300 80b2 	bgt.w	8002c68 <Tx_Verify+0x380>
 8002b04:	2bc8      	cmp	r3, #200	; 0xc8
 8002b06:	d07c      	beq.n	8002c02 <Tx_Verify+0x31a>
 8002b08:	2bc8      	cmp	r3, #200	; 0xc8
 8002b0a:	f300 80ad 	bgt.w	8002c68 <Tx_Verify+0x380>
 8002b0e:	2b32      	cmp	r3, #50	; 0x32
 8002b10:	dc6c      	bgt.n	8002bec <Tx_Verify+0x304>
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	f2c0 80a8 	blt.w	8002c68 <Tx_Verify+0x380>
 8002b18:	3b02      	subs	r3, #2
 8002b1a:	2b30      	cmp	r3, #48	; 0x30
 8002b1c:	f200 80a4 	bhi.w	8002c68 <Tx_Verify+0x380>
 8002b20:	a201      	add	r2, pc, #4	; (adr r2, 8002b28 <Tx_Verify+0x240>)
 8002b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b26:	bf00      	nop
 8002b28:	08002c61 	.word	0x08002c61
 8002b2c:	08002c69 	.word	0x08002c69
 8002b30:	08002c59 	.word	0x08002c59
 8002b34:	08002c51 	.word	0x08002c51
 8002b38:	08002c69 	.word	0x08002c69
 8002b3c:	08002c69 	.word	0x08002c69
 8002b40:	08002c69 	.word	0x08002c69
 8002b44:	08002c69 	.word	0x08002c69
 8002b48:	08002c49 	.word	0x08002c49
 8002b4c:	08002c69 	.word	0x08002c69
 8002b50:	08002c69 	.word	0x08002c69
 8002b54:	08002c69 	.word	0x08002c69
 8002b58:	08002c69 	.word	0x08002c69
 8002b5c:	08002c69 	.word	0x08002c69
 8002b60:	08002c69 	.word	0x08002c69
 8002b64:	08002c69 	.word	0x08002c69
 8002b68:	08002c69 	.word	0x08002c69
 8002b6c:	08002c69 	.word	0x08002c69
 8002b70:	08002c41 	.word	0x08002c41
 8002b74:	08002c69 	.word	0x08002c69
 8002b78:	08002c69 	.word	0x08002c69
 8002b7c:	08002c69 	.word	0x08002c69
 8002b80:	08002c69 	.word	0x08002c69
 8002b84:	08002c69 	.word	0x08002c69
 8002b88:	08002c69 	.word	0x08002c69
 8002b8c:	08002c69 	.word	0x08002c69
 8002b90:	08002c69 	.word	0x08002c69
 8002b94:	08002c69 	.word	0x08002c69
 8002b98:	08002c69 	.word	0x08002c69
 8002b9c:	08002c69 	.word	0x08002c69
 8002ba0:	08002c69 	.word	0x08002c69
 8002ba4:	08002c69 	.word	0x08002c69
 8002ba8:	08002c69 	.word	0x08002c69
 8002bac:	08002c69 	.word	0x08002c69
 8002bb0:	08002c69 	.word	0x08002c69
 8002bb4:	08002c69 	.word	0x08002c69
 8002bb8:	08002c69 	.word	0x08002c69
 8002bbc:	08002c69 	.word	0x08002c69
 8002bc0:	08002c39 	.word	0x08002c39
 8002bc4:	08002c69 	.word	0x08002c69
 8002bc8:	08002c69 	.word	0x08002c69
 8002bcc:	08002c69 	.word	0x08002c69
 8002bd0:	08002c69 	.word	0x08002c69
 8002bd4:	08002c69 	.word	0x08002c69
 8002bd8:	08002c69 	.word	0x08002c69
 8002bdc:	08002c69 	.word	0x08002c69
 8002be0:	08002c69 	.word	0x08002c69
 8002be4:	08002c69 	.word	0x08002c69
 8002be8:	08002c31 	.word	0x08002c31
 8002bec:	2b64      	cmp	r3, #100	; 0x64
 8002bee:	d00c      	beq.n	8002c0a <Tx_Verify+0x322>
 8002bf0:	e03a      	b.n	8002c68 <Tx_Verify+0x380>
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <Tx_Verify+0x334>)
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	70da      	strb	r2, [r3, #3]
 8002bf8:	e039      	b.n	8002c6e <Tx_Verify+0x386>
 8002bfa:	4b08      	ldr	r3, [pc, #32]	; (8002c1c <Tx_Verify+0x334>)
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	70da      	strb	r2, [r3, #3]
 8002c00:	e035      	b.n	8002c6e <Tx_Verify+0x386>
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <Tx_Verify+0x334>)
 8002c04:	2203      	movs	r2, #3
 8002c06:	70da      	strb	r2, [r3, #3]
 8002c08:	e031      	b.n	8002c6e <Tx_Verify+0x386>
 8002c0a:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <Tx_Verify+0x334>)
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	70da      	strb	r2, [r3, #3]
 8002c10:	e02d      	b.n	8002c6e <Tx_Verify+0x386>
 8002c12:	bf00      	nop
 8002c14:	20006610 	.word	0x20006610
 8002c18:	20006776 	.word	0x20006776
 8002c1c:	200065e8 	.word	0x200065e8
 8002c20:	200066ea 	.word	0x200066ea
 8002c24:	40020400 	.word	0x40020400
 8002c28:	200066eb 	.word	0x200066eb
 8002c2c:	20006714 	.word	0x20006714
 8002c30:	4bc5      	ldr	r3, [pc, #788]	; (8002f48 <Tx_Verify+0x660>)
 8002c32:	2205      	movs	r2, #5
 8002c34:	70da      	strb	r2, [r3, #3]
 8002c36:	e01a      	b.n	8002c6e <Tx_Verify+0x386>
 8002c38:	4bc3      	ldr	r3, [pc, #780]	; (8002f48 <Tx_Verify+0x660>)
 8002c3a:	2206      	movs	r2, #6
 8002c3c:	70da      	strb	r2, [r3, #3]
 8002c3e:	e016      	b.n	8002c6e <Tx_Verify+0x386>
 8002c40:	4bc1      	ldr	r3, [pc, #772]	; (8002f48 <Tx_Verify+0x660>)
 8002c42:	2207      	movs	r2, #7
 8002c44:	70da      	strb	r2, [r3, #3]
 8002c46:	e012      	b.n	8002c6e <Tx_Verify+0x386>
 8002c48:	4bbf      	ldr	r3, [pc, #764]	; (8002f48 <Tx_Verify+0x660>)
 8002c4a:	2208      	movs	r2, #8
 8002c4c:	70da      	strb	r2, [r3, #3]
 8002c4e:	e00e      	b.n	8002c6e <Tx_Verify+0x386>
 8002c50:	4bbd      	ldr	r3, [pc, #756]	; (8002f48 <Tx_Verify+0x660>)
 8002c52:	2209      	movs	r2, #9
 8002c54:	70da      	strb	r2, [r3, #3]
 8002c56:	e00a      	b.n	8002c6e <Tx_Verify+0x386>
 8002c58:	4bbb      	ldr	r3, [pc, #748]	; (8002f48 <Tx_Verify+0x660>)
 8002c5a:	220a      	movs	r2, #10
 8002c5c:	70da      	strb	r2, [r3, #3]
 8002c5e:	e006      	b.n	8002c6e <Tx_Verify+0x386>
 8002c60:	4bb9      	ldr	r3, [pc, #740]	; (8002f48 <Tx_Verify+0x660>)
 8002c62:	220b      	movs	r2, #11
 8002c64:	70da      	strb	r2, [r3, #3]
 8002c66:	e002      	b.n	8002c6e <Tx_Verify+0x386>
 8002c68:	4bb7      	ldr	r3, [pc, #732]	; (8002f48 <Tx_Verify+0x660>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	70da      	strb	r2, [r3, #3]
 8002c6e:	bf00      	nop
	__FREQ_TO_BUFFER(txData[4], perMsg[ANALOG_9_12]);
 8002c70:	4bb6      	ldr	r3, [pc, #728]	; (8002f4c <Tx_Verify+0x664>)
 8002c72:	889b      	ldrh	r3, [r3, #4]
 8002c74:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c78:	f000 8081 	beq.w	8002d7e <Tx_Verify+0x496>
 8002c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c80:	f300 80a9 	bgt.w	8002dd6 <Tx_Verify+0x4ee>
 8002c84:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c88:	d07d      	beq.n	8002d86 <Tx_Verify+0x49e>
 8002c8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c8e:	f300 80a2 	bgt.w	8002dd6 <Tx_Verify+0x4ee>
 8002c92:	2bc8      	cmp	r3, #200	; 0xc8
 8002c94:	d07b      	beq.n	8002d8e <Tx_Verify+0x4a6>
 8002c96:	2bc8      	cmp	r3, #200	; 0xc8
 8002c98:	f300 809d 	bgt.w	8002dd6 <Tx_Verify+0x4ee>
 8002c9c:	2b32      	cmp	r3, #50	; 0x32
 8002c9e:	dc6b      	bgt.n	8002d78 <Tx_Verify+0x490>
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	f2c0 8098 	blt.w	8002dd6 <Tx_Verify+0x4ee>
 8002ca6:	3b02      	subs	r3, #2
 8002ca8:	2b30      	cmp	r3, #48	; 0x30
 8002caa:	f200 8094 	bhi.w	8002dd6 <Tx_Verify+0x4ee>
 8002cae:	a201      	add	r2, pc, #4	; (adr r2, 8002cb4 <Tx_Verify+0x3cc>)
 8002cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb4:	08002dcf 	.word	0x08002dcf
 8002cb8:	08002dd7 	.word	0x08002dd7
 8002cbc:	08002dc7 	.word	0x08002dc7
 8002cc0:	08002dbf 	.word	0x08002dbf
 8002cc4:	08002dd7 	.word	0x08002dd7
 8002cc8:	08002dd7 	.word	0x08002dd7
 8002ccc:	08002dd7 	.word	0x08002dd7
 8002cd0:	08002dd7 	.word	0x08002dd7
 8002cd4:	08002db7 	.word	0x08002db7
 8002cd8:	08002dd7 	.word	0x08002dd7
 8002cdc:	08002dd7 	.word	0x08002dd7
 8002ce0:	08002dd7 	.word	0x08002dd7
 8002ce4:	08002dd7 	.word	0x08002dd7
 8002ce8:	08002dd7 	.word	0x08002dd7
 8002cec:	08002dd7 	.word	0x08002dd7
 8002cf0:	08002dd7 	.word	0x08002dd7
 8002cf4:	08002dd7 	.word	0x08002dd7
 8002cf8:	08002dd7 	.word	0x08002dd7
 8002cfc:	08002daf 	.word	0x08002daf
 8002d00:	08002dd7 	.word	0x08002dd7
 8002d04:	08002dd7 	.word	0x08002dd7
 8002d08:	08002dd7 	.word	0x08002dd7
 8002d0c:	08002dd7 	.word	0x08002dd7
 8002d10:	08002dd7 	.word	0x08002dd7
 8002d14:	08002dd7 	.word	0x08002dd7
 8002d18:	08002dd7 	.word	0x08002dd7
 8002d1c:	08002dd7 	.word	0x08002dd7
 8002d20:	08002dd7 	.word	0x08002dd7
 8002d24:	08002dd7 	.word	0x08002dd7
 8002d28:	08002dd7 	.word	0x08002dd7
 8002d2c:	08002dd7 	.word	0x08002dd7
 8002d30:	08002dd7 	.word	0x08002dd7
 8002d34:	08002dd7 	.word	0x08002dd7
 8002d38:	08002dd7 	.word	0x08002dd7
 8002d3c:	08002dd7 	.word	0x08002dd7
 8002d40:	08002dd7 	.word	0x08002dd7
 8002d44:	08002dd7 	.word	0x08002dd7
 8002d48:	08002dd7 	.word	0x08002dd7
 8002d4c:	08002da7 	.word	0x08002da7
 8002d50:	08002dd7 	.word	0x08002dd7
 8002d54:	08002dd7 	.word	0x08002dd7
 8002d58:	08002dd7 	.word	0x08002dd7
 8002d5c:	08002dd7 	.word	0x08002dd7
 8002d60:	08002dd7 	.word	0x08002dd7
 8002d64:	08002dd7 	.word	0x08002dd7
 8002d68:	08002dd7 	.word	0x08002dd7
 8002d6c:	08002dd7 	.word	0x08002dd7
 8002d70:	08002dd7 	.word	0x08002dd7
 8002d74:	08002d9f 	.word	0x08002d9f
 8002d78:	2b64      	cmp	r3, #100	; 0x64
 8002d7a:	d00c      	beq.n	8002d96 <Tx_Verify+0x4ae>
 8002d7c:	e02b      	b.n	8002dd6 <Tx_Verify+0x4ee>
 8002d7e:	4b72      	ldr	r3, [pc, #456]	; (8002f48 <Tx_Verify+0x660>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	711a      	strb	r2, [r3, #4]
 8002d84:	e02a      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002d86:	4b70      	ldr	r3, [pc, #448]	; (8002f48 <Tx_Verify+0x660>)
 8002d88:	2202      	movs	r2, #2
 8002d8a:	711a      	strb	r2, [r3, #4]
 8002d8c:	e026      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002d8e:	4b6e      	ldr	r3, [pc, #440]	; (8002f48 <Tx_Verify+0x660>)
 8002d90:	2203      	movs	r2, #3
 8002d92:	711a      	strb	r2, [r3, #4]
 8002d94:	e022      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002d96:	4b6c      	ldr	r3, [pc, #432]	; (8002f48 <Tx_Verify+0x660>)
 8002d98:	2204      	movs	r2, #4
 8002d9a:	711a      	strb	r2, [r3, #4]
 8002d9c:	e01e      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	; (8002f48 <Tx_Verify+0x660>)
 8002da0:	2205      	movs	r2, #5
 8002da2:	711a      	strb	r2, [r3, #4]
 8002da4:	e01a      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002da6:	4b68      	ldr	r3, [pc, #416]	; (8002f48 <Tx_Verify+0x660>)
 8002da8:	2206      	movs	r2, #6
 8002daa:	711a      	strb	r2, [r3, #4]
 8002dac:	e016      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002dae:	4b66      	ldr	r3, [pc, #408]	; (8002f48 <Tx_Verify+0x660>)
 8002db0:	2207      	movs	r2, #7
 8002db2:	711a      	strb	r2, [r3, #4]
 8002db4:	e012      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002db6:	4b64      	ldr	r3, [pc, #400]	; (8002f48 <Tx_Verify+0x660>)
 8002db8:	2208      	movs	r2, #8
 8002dba:	711a      	strb	r2, [r3, #4]
 8002dbc:	e00e      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002dbe:	4b62      	ldr	r3, [pc, #392]	; (8002f48 <Tx_Verify+0x660>)
 8002dc0:	2209      	movs	r2, #9
 8002dc2:	711a      	strb	r2, [r3, #4]
 8002dc4:	e00a      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002dc6:	4b60      	ldr	r3, [pc, #384]	; (8002f48 <Tx_Verify+0x660>)
 8002dc8:	220a      	movs	r2, #10
 8002dca:	711a      	strb	r2, [r3, #4]
 8002dcc:	e006      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002dce:	4b5e      	ldr	r3, [pc, #376]	; (8002f48 <Tx_Verify+0x660>)
 8002dd0:	220b      	movs	r2, #11
 8002dd2:	711a      	strb	r2, [r3, #4]
 8002dd4:	e002      	b.n	8002ddc <Tx_Verify+0x4f4>
 8002dd6:	4b5c      	ldr	r3, [pc, #368]	; (8002f48 <Tx_Verify+0x660>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	711a      	strb	r2, [r3, #4]
 8002ddc:	bf00      	nop
	__FREQ_TO_BUFFER(txData[5], perMsg[RTC_MSG]);
 8002dde:	4b5b      	ldr	r3, [pc, #364]	; (8002f4c <Tx_Verify+0x664>)
 8002de0:	88db      	ldrh	r3, [r3, #6]
 8002de2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002de6:	f000 8082 	beq.w	8002eee <Tx_Verify+0x606>
 8002dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dee:	f300 80af 	bgt.w	8002f50 <Tx_Verify+0x668>
 8002df2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002df6:	d07e      	beq.n	8002ef6 <Tx_Verify+0x60e>
 8002df8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dfc:	f300 80a8 	bgt.w	8002f50 <Tx_Verify+0x668>
 8002e00:	2bc8      	cmp	r3, #200	; 0xc8
 8002e02:	d07c      	beq.n	8002efe <Tx_Verify+0x616>
 8002e04:	2bc8      	cmp	r3, #200	; 0xc8
 8002e06:	f300 80a3 	bgt.w	8002f50 <Tx_Verify+0x668>
 8002e0a:	2b32      	cmp	r3, #50	; 0x32
 8002e0c:	dc6c      	bgt.n	8002ee8 <Tx_Verify+0x600>
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	f2c0 809e 	blt.w	8002f50 <Tx_Verify+0x668>
 8002e14:	3b02      	subs	r3, #2
 8002e16:	2b30      	cmp	r3, #48	; 0x30
 8002e18:	f200 809a 	bhi.w	8002f50 <Tx_Verify+0x668>
 8002e1c:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <Tx_Verify+0x53c>)
 8002e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e22:	bf00      	nop
 8002e24:	08002f3f 	.word	0x08002f3f
 8002e28:	08002f51 	.word	0x08002f51
 8002e2c:	08002f37 	.word	0x08002f37
 8002e30:	08002f2f 	.word	0x08002f2f
 8002e34:	08002f51 	.word	0x08002f51
 8002e38:	08002f51 	.word	0x08002f51
 8002e3c:	08002f51 	.word	0x08002f51
 8002e40:	08002f51 	.word	0x08002f51
 8002e44:	08002f27 	.word	0x08002f27
 8002e48:	08002f51 	.word	0x08002f51
 8002e4c:	08002f51 	.word	0x08002f51
 8002e50:	08002f51 	.word	0x08002f51
 8002e54:	08002f51 	.word	0x08002f51
 8002e58:	08002f51 	.word	0x08002f51
 8002e5c:	08002f51 	.word	0x08002f51
 8002e60:	08002f51 	.word	0x08002f51
 8002e64:	08002f51 	.word	0x08002f51
 8002e68:	08002f51 	.word	0x08002f51
 8002e6c:	08002f1f 	.word	0x08002f1f
 8002e70:	08002f51 	.word	0x08002f51
 8002e74:	08002f51 	.word	0x08002f51
 8002e78:	08002f51 	.word	0x08002f51
 8002e7c:	08002f51 	.word	0x08002f51
 8002e80:	08002f51 	.word	0x08002f51
 8002e84:	08002f51 	.word	0x08002f51
 8002e88:	08002f51 	.word	0x08002f51
 8002e8c:	08002f51 	.word	0x08002f51
 8002e90:	08002f51 	.word	0x08002f51
 8002e94:	08002f51 	.word	0x08002f51
 8002e98:	08002f51 	.word	0x08002f51
 8002e9c:	08002f51 	.word	0x08002f51
 8002ea0:	08002f51 	.word	0x08002f51
 8002ea4:	08002f51 	.word	0x08002f51
 8002ea8:	08002f51 	.word	0x08002f51
 8002eac:	08002f51 	.word	0x08002f51
 8002eb0:	08002f51 	.word	0x08002f51
 8002eb4:	08002f51 	.word	0x08002f51
 8002eb8:	08002f51 	.word	0x08002f51
 8002ebc:	08002f17 	.word	0x08002f17
 8002ec0:	08002f51 	.word	0x08002f51
 8002ec4:	08002f51 	.word	0x08002f51
 8002ec8:	08002f51 	.word	0x08002f51
 8002ecc:	08002f51 	.word	0x08002f51
 8002ed0:	08002f51 	.word	0x08002f51
 8002ed4:	08002f51 	.word	0x08002f51
 8002ed8:	08002f51 	.word	0x08002f51
 8002edc:	08002f51 	.word	0x08002f51
 8002ee0:	08002f51 	.word	0x08002f51
 8002ee4:	08002f0f 	.word	0x08002f0f
 8002ee8:	2b64      	cmp	r3, #100	; 0x64
 8002eea:	d00c      	beq.n	8002f06 <Tx_Verify+0x61e>
 8002eec:	e030      	b.n	8002f50 <Tx_Verify+0x668>
 8002eee:	4b16      	ldr	r3, [pc, #88]	; (8002f48 <Tx_Verify+0x660>)
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	715a      	strb	r2, [r3, #5]
 8002ef4:	e02f      	b.n	8002f56 <Tx_Verify+0x66e>
 8002ef6:	4b14      	ldr	r3, [pc, #80]	; (8002f48 <Tx_Verify+0x660>)
 8002ef8:	2202      	movs	r2, #2
 8002efa:	715a      	strb	r2, [r3, #5]
 8002efc:	e02b      	b.n	8002f56 <Tx_Verify+0x66e>
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <Tx_Verify+0x660>)
 8002f00:	2203      	movs	r2, #3
 8002f02:	715a      	strb	r2, [r3, #5]
 8002f04:	e027      	b.n	8002f56 <Tx_Verify+0x66e>
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <Tx_Verify+0x660>)
 8002f08:	2204      	movs	r2, #4
 8002f0a:	715a      	strb	r2, [r3, #5]
 8002f0c:	e023      	b.n	8002f56 <Tx_Verify+0x66e>
 8002f0e:	4b0e      	ldr	r3, [pc, #56]	; (8002f48 <Tx_Verify+0x660>)
 8002f10:	2205      	movs	r2, #5
 8002f12:	715a      	strb	r2, [r3, #5]
 8002f14:	e01f      	b.n	8002f56 <Tx_Verify+0x66e>
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <Tx_Verify+0x660>)
 8002f18:	2206      	movs	r2, #6
 8002f1a:	715a      	strb	r2, [r3, #5]
 8002f1c:	e01b      	b.n	8002f56 <Tx_Verify+0x66e>
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <Tx_Verify+0x660>)
 8002f20:	2207      	movs	r2, #7
 8002f22:	715a      	strb	r2, [r3, #5]
 8002f24:	e017      	b.n	8002f56 <Tx_Verify+0x66e>
 8002f26:	4b08      	ldr	r3, [pc, #32]	; (8002f48 <Tx_Verify+0x660>)
 8002f28:	2208      	movs	r2, #8
 8002f2a:	715a      	strb	r2, [r3, #5]
 8002f2c:	e013      	b.n	8002f56 <Tx_Verify+0x66e>
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <Tx_Verify+0x660>)
 8002f30:	2209      	movs	r2, #9
 8002f32:	715a      	strb	r2, [r3, #5]
 8002f34:	e00f      	b.n	8002f56 <Tx_Verify+0x66e>
 8002f36:	4b04      	ldr	r3, [pc, #16]	; (8002f48 <Tx_Verify+0x660>)
 8002f38:	220a      	movs	r2, #10
 8002f3a:	715a      	strb	r2, [r3, #5]
 8002f3c:	e00b      	b.n	8002f56 <Tx_Verify+0x66e>
 8002f3e:	4b02      	ldr	r3, [pc, #8]	; (8002f48 <Tx_Verify+0x660>)
 8002f40:	220b      	movs	r2, #11
 8002f42:	715a      	strb	r2, [r3, #5]
 8002f44:	e007      	b.n	8002f56 <Tx_Verify+0x66e>
 8002f46:	bf00      	nop
 8002f48:	200065e8 	.word	0x200065e8
 8002f4c:	20006714 	.word	0x20006714
 8002f50:	4bb7      	ldr	r3, [pc, #732]	; (8003230 <Tx_Verify+0x948>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	715a      	strb	r2, [r3, #5]
 8002f56:	bf00      	nop
	__FREQ_TO_BUFFER(txData[6], perMsg[PDM_SAVE]);
 8002f58:	4bb6      	ldr	r3, [pc, #728]	; (8003234 <Tx_Verify+0x94c>)
 8002f5a:	89db      	ldrh	r3, [r3, #14]
 8002f5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f60:	f000 8081 	beq.w	8003066 <Tx_Verify+0x77e>
 8002f64:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f68:	f300 80a9 	bgt.w	80030be <Tx_Verify+0x7d6>
 8002f6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f70:	d07d      	beq.n	800306e <Tx_Verify+0x786>
 8002f72:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f76:	f300 80a2 	bgt.w	80030be <Tx_Verify+0x7d6>
 8002f7a:	2bc8      	cmp	r3, #200	; 0xc8
 8002f7c:	d07b      	beq.n	8003076 <Tx_Verify+0x78e>
 8002f7e:	2bc8      	cmp	r3, #200	; 0xc8
 8002f80:	f300 809d 	bgt.w	80030be <Tx_Verify+0x7d6>
 8002f84:	2b32      	cmp	r3, #50	; 0x32
 8002f86:	dc6b      	bgt.n	8003060 <Tx_Verify+0x778>
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	f2c0 8098 	blt.w	80030be <Tx_Verify+0x7d6>
 8002f8e:	3b02      	subs	r3, #2
 8002f90:	2b30      	cmp	r3, #48	; 0x30
 8002f92:	f200 8094 	bhi.w	80030be <Tx_Verify+0x7d6>
 8002f96:	a201      	add	r2, pc, #4	; (adr r2, 8002f9c <Tx_Verify+0x6b4>)
 8002f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f9c:	080030b7 	.word	0x080030b7
 8002fa0:	080030bf 	.word	0x080030bf
 8002fa4:	080030af 	.word	0x080030af
 8002fa8:	080030a7 	.word	0x080030a7
 8002fac:	080030bf 	.word	0x080030bf
 8002fb0:	080030bf 	.word	0x080030bf
 8002fb4:	080030bf 	.word	0x080030bf
 8002fb8:	080030bf 	.word	0x080030bf
 8002fbc:	0800309f 	.word	0x0800309f
 8002fc0:	080030bf 	.word	0x080030bf
 8002fc4:	080030bf 	.word	0x080030bf
 8002fc8:	080030bf 	.word	0x080030bf
 8002fcc:	080030bf 	.word	0x080030bf
 8002fd0:	080030bf 	.word	0x080030bf
 8002fd4:	080030bf 	.word	0x080030bf
 8002fd8:	080030bf 	.word	0x080030bf
 8002fdc:	080030bf 	.word	0x080030bf
 8002fe0:	080030bf 	.word	0x080030bf
 8002fe4:	08003097 	.word	0x08003097
 8002fe8:	080030bf 	.word	0x080030bf
 8002fec:	080030bf 	.word	0x080030bf
 8002ff0:	080030bf 	.word	0x080030bf
 8002ff4:	080030bf 	.word	0x080030bf
 8002ff8:	080030bf 	.word	0x080030bf
 8002ffc:	080030bf 	.word	0x080030bf
 8003000:	080030bf 	.word	0x080030bf
 8003004:	080030bf 	.word	0x080030bf
 8003008:	080030bf 	.word	0x080030bf
 800300c:	080030bf 	.word	0x080030bf
 8003010:	080030bf 	.word	0x080030bf
 8003014:	080030bf 	.word	0x080030bf
 8003018:	080030bf 	.word	0x080030bf
 800301c:	080030bf 	.word	0x080030bf
 8003020:	080030bf 	.word	0x080030bf
 8003024:	080030bf 	.word	0x080030bf
 8003028:	080030bf 	.word	0x080030bf
 800302c:	080030bf 	.word	0x080030bf
 8003030:	080030bf 	.word	0x080030bf
 8003034:	0800308f 	.word	0x0800308f
 8003038:	080030bf 	.word	0x080030bf
 800303c:	080030bf 	.word	0x080030bf
 8003040:	080030bf 	.word	0x080030bf
 8003044:	080030bf 	.word	0x080030bf
 8003048:	080030bf 	.word	0x080030bf
 800304c:	080030bf 	.word	0x080030bf
 8003050:	080030bf 	.word	0x080030bf
 8003054:	080030bf 	.word	0x080030bf
 8003058:	080030bf 	.word	0x080030bf
 800305c:	08003087 	.word	0x08003087
 8003060:	2b64      	cmp	r3, #100	; 0x64
 8003062:	d00c      	beq.n	800307e <Tx_Verify+0x796>
 8003064:	e02b      	b.n	80030be <Tx_Verify+0x7d6>
 8003066:	4b72      	ldr	r3, [pc, #456]	; (8003230 <Tx_Verify+0x948>)
 8003068:	2201      	movs	r2, #1
 800306a:	719a      	strb	r2, [r3, #6]
 800306c:	e02a      	b.n	80030c4 <Tx_Verify+0x7dc>
 800306e:	4b70      	ldr	r3, [pc, #448]	; (8003230 <Tx_Verify+0x948>)
 8003070:	2202      	movs	r2, #2
 8003072:	719a      	strb	r2, [r3, #6]
 8003074:	e026      	b.n	80030c4 <Tx_Verify+0x7dc>
 8003076:	4b6e      	ldr	r3, [pc, #440]	; (8003230 <Tx_Verify+0x948>)
 8003078:	2203      	movs	r2, #3
 800307a:	719a      	strb	r2, [r3, #6]
 800307c:	e022      	b.n	80030c4 <Tx_Verify+0x7dc>
 800307e:	4b6c      	ldr	r3, [pc, #432]	; (8003230 <Tx_Verify+0x948>)
 8003080:	2204      	movs	r2, #4
 8003082:	719a      	strb	r2, [r3, #6]
 8003084:	e01e      	b.n	80030c4 <Tx_Verify+0x7dc>
 8003086:	4b6a      	ldr	r3, [pc, #424]	; (8003230 <Tx_Verify+0x948>)
 8003088:	2205      	movs	r2, #5
 800308a:	719a      	strb	r2, [r3, #6]
 800308c:	e01a      	b.n	80030c4 <Tx_Verify+0x7dc>
 800308e:	4b68      	ldr	r3, [pc, #416]	; (8003230 <Tx_Verify+0x948>)
 8003090:	2206      	movs	r2, #6
 8003092:	719a      	strb	r2, [r3, #6]
 8003094:	e016      	b.n	80030c4 <Tx_Verify+0x7dc>
 8003096:	4b66      	ldr	r3, [pc, #408]	; (8003230 <Tx_Verify+0x948>)
 8003098:	2207      	movs	r2, #7
 800309a:	719a      	strb	r2, [r3, #6]
 800309c:	e012      	b.n	80030c4 <Tx_Verify+0x7dc>
 800309e:	4b64      	ldr	r3, [pc, #400]	; (8003230 <Tx_Verify+0x948>)
 80030a0:	2208      	movs	r2, #8
 80030a2:	719a      	strb	r2, [r3, #6]
 80030a4:	e00e      	b.n	80030c4 <Tx_Verify+0x7dc>
 80030a6:	4b62      	ldr	r3, [pc, #392]	; (8003230 <Tx_Verify+0x948>)
 80030a8:	2209      	movs	r2, #9
 80030aa:	719a      	strb	r2, [r3, #6]
 80030ac:	e00a      	b.n	80030c4 <Tx_Verify+0x7dc>
 80030ae:	4b60      	ldr	r3, [pc, #384]	; (8003230 <Tx_Verify+0x948>)
 80030b0:	220a      	movs	r2, #10
 80030b2:	719a      	strb	r2, [r3, #6]
 80030b4:	e006      	b.n	80030c4 <Tx_Verify+0x7dc>
 80030b6:	4b5e      	ldr	r3, [pc, #376]	; (8003230 <Tx_Verify+0x948>)
 80030b8:	220b      	movs	r2, #11
 80030ba:	719a      	strb	r2, [r3, #6]
 80030bc:	e002      	b.n	80030c4 <Tx_Verify+0x7dc>
 80030be:	4b5c      	ldr	r3, [pc, #368]	; (8003230 <Tx_Verify+0x948>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	719a      	strb	r2, [r3, #6]
 80030c4:	bf00      	nop
	__FREQ_TO_BUFFER(txData[7], perMsg[ECU_SAVE]);
 80030c6:	4b5b      	ldr	r3, [pc, #364]	; (8003234 <Tx_Verify+0x94c>)
 80030c8:	899b      	ldrh	r3, [r3, #12]
 80030ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ce:	f000 8082 	beq.w	80031d6 <Tx_Verify+0x8ee>
 80030d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030d6:	f300 80af 	bgt.w	8003238 <Tx_Verify+0x950>
 80030da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030de:	d07e      	beq.n	80031de <Tx_Verify+0x8f6>
 80030e0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80030e4:	f300 80a8 	bgt.w	8003238 <Tx_Verify+0x950>
 80030e8:	2bc8      	cmp	r3, #200	; 0xc8
 80030ea:	d07c      	beq.n	80031e6 <Tx_Verify+0x8fe>
 80030ec:	2bc8      	cmp	r3, #200	; 0xc8
 80030ee:	f300 80a3 	bgt.w	8003238 <Tx_Verify+0x950>
 80030f2:	2b32      	cmp	r3, #50	; 0x32
 80030f4:	dc6c      	bgt.n	80031d0 <Tx_Verify+0x8e8>
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	f2c0 809e 	blt.w	8003238 <Tx_Verify+0x950>
 80030fc:	3b02      	subs	r3, #2
 80030fe:	2b30      	cmp	r3, #48	; 0x30
 8003100:	f200 809a 	bhi.w	8003238 <Tx_Verify+0x950>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <Tx_Verify+0x824>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	08003227 	.word	0x08003227
 8003110:	08003239 	.word	0x08003239
 8003114:	0800321f 	.word	0x0800321f
 8003118:	08003217 	.word	0x08003217
 800311c:	08003239 	.word	0x08003239
 8003120:	08003239 	.word	0x08003239
 8003124:	08003239 	.word	0x08003239
 8003128:	08003239 	.word	0x08003239
 800312c:	0800320f 	.word	0x0800320f
 8003130:	08003239 	.word	0x08003239
 8003134:	08003239 	.word	0x08003239
 8003138:	08003239 	.word	0x08003239
 800313c:	08003239 	.word	0x08003239
 8003140:	08003239 	.word	0x08003239
 8003144:	08003239 	.word	0x08003239
 8003148:	08003239 	.word	0x08003239
 800314c:	08003239 	.word	0x08003239
 8003150:	08003239 	.word	0x08003239
 8003154:	08003207 	.word	0x08003207
 8003158:	08003239 	.word	0x08003239
 800315c:	08003239 	.word	0x08003239
 8003160:	08003239 	.word	0x08003239
 8003164:	08003239 	.word	0x08003239
 8003168:	08003239 	.word	0x08003239
 800316c:	08003239 	.word	0x08003239
 8003170:	08003239 	.word	0x08003239
 8003174:	08003239 	.word	0x08003239
 8003178:	08003239 	.word	0x08003239
 800317c:	08003239 	.word	0x08003239
 8003180:	08003239 	.word	0x08003239
 8003184:	08003239 	.word	0x08003239
 8003188:	08003239 	.word	0x08003239
 800318c:	08003239 	.word	0x08003239
 8003190:	08003239 	.word	0x08003239
 8003194:	08003239 	.word	0x08003239
 8003198:	08003239 	.word	0x08003239
 800319c:	08003239 	.word	0x08003239
 80031a0:	08003239 	.word	0x08003239
 80031a4:	080031ff 	.word	0x080031ff
 80031a8:	08003239 	.word	0x08003239
 80031ac:	08003239 	.word	0x08003239
 80031b0:	08003239 	.word	0x08003239
 80031b4:	08003239 	.word	0x08003239
 80031b8:	08003239 	.word	0x08003239
 80031bc:	08003239 	.word	0x08003239
 80031c0:	08003239 	.word	0x08003239
 80031c4:	08003239 	.word	0x08003239
 80031c8:	08003239 	.word	0x08003239
 80031cc:	080031f7 	.word	0x080031f7
 80031d0:	2b64      	cmp	r3, #100	; 0x64
 80031d2:	d00c      	beq.n	80031ee <Tx_Verify+0x906>
 80031d4:	e030      	b.n	8003238 <Tx_Verify+0x950>
 80031d6:	4b16      	ldr	r3, [pc, #88]	; (8003230 <Tx_Verify+0x948>)
 80031d8:	2201      	movs	r2, #1
 80031da:	71da      	strb	r2, [r3, #7]
 80031dc:	e02f      	b.n	800323e <Tx_Verify+0x956>
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <Tx_Verify+0x948>)
 80031e0:	2202      	movs	r2, #2
 80031e2:	71da      	strb	r2, [r3, #7]
 80031e4:	e02b      	b.n	800323e <Tx_Verify+0x956>
 80031e6:	4b12      	ldr	r3, [pc, #72]	; (8003230 <Tx_Verify+0x948>)
 80031e8:	2203      	movs	r2, #3
 80031ea:	71da      	strb	r2, [r3, #7]
 80031ec:	e027      	b.n	800323e <Tx_Verify+0x956>
 80031ee:	4b10      	ldr	r3, [pc, #64]	; (8003230 <Tx_Verify+0x948>)
 80031f0:	2204      	movs	r2, #4
 80031f2:	71da      	strb	r2, [r3, #7]
 80031f4:	e023      	b.n	800323e <Tx_Verify+0x956>
 80031f6:	4b0e      	ldr	r3, [pc, #56]	; (8003230 <Tx_Verify+0x948>)
 80031f8:	2205      	movs	r2, #5
 80031fa:	71da      	strb	r2, [r3, #7]
 80031fc:	e01f      	b.n	800323e <Tx_Verify+0x956>
 80031fe:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <Tx_Verify+0x948>)
 8003200:	2206      	movs	r2, #6
 8003202:	71da      	strb	r2, [r3, #7]
 8003204:	e01b      	b.n	800323e <Tx_Verify+0x956>
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <Tx_Verify+0x948>)
 8003208:	2207      	movs	r2, #7
 800320a:	71da      	strb	r2, [r3, #7]
 800320c:	e017      	b.n	800323e <Tx_Verify+0x956>
 800320e:	4b08      	ldr	r3, [pc, #32]	; (8003230 <Tx_Verify+0x948>)
 8003210:	2208      	movs	r2, #8
 8003212:	71da      	strb	r2, [r3, #7]
 8003214:	e013      	b.n	800323e <Tx_Verify+0x956>
 8003216:	4b06      	ldr	r3, [pc, #24]	; (8003230 <Tx_Verify+0x948>)
 8003218:	2209      	movs	r2, #9
 800321a:	71da      	strb	r2, [r3, #7]
 800321c:	e00f      	b.n	800323e <Tx_Verify+0x956>
 800321e:	4b04      	ldr	r3, [pc, #16]	; (8003230 <Tx_Verify+0x948>)
 8003220:	220a      	movs	r2, #10
 8003222:	71da      	strb	r2, [r3, #7]
 8003224:	e00b      	b.n	800323e <Tx_Verify+0x956>
 8003226:	4b02      	ldr	r3, [pc, #8]	; (8003230 <Tx_Verify+0x948>)
 8003228:	220b      	movs	r2, #11
 800322a:	71da      	strb	r2, [r3, #7]
 800322c:	e007      	b.n	800323e <Tx_Verify+0x956>
 800322e:	bf00      	nop
 8003230:	200065e8 	.word	0x200065e8
 8003234:	20006714 	.word	0x20006714
 8003238:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <Tx_Verify+0x9ec>)
 800323a:	2200      	movs	r2, #0
 800323c:	71da      	strb	r2, [r3, #7]
 800323e:	bf00      	nop

	if(flagDatalogger == DL_SAVE)
 8003240:	4b25      	ldr	r3, [pc, #148]	; (80032d8 <Tx_Verify+0x9f0>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d108      	bne.n	800325a <Tx_Verify+0x972>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
 8003248:	4b24      	ldr	r3, [pc, #144]	; (80032dc <Tx_Verify+0x9f4>)
 800324a:	6819      	ldr	r1, [r3, #0]
 800324c:	4b23      	ldr	r3, [pc, #140]	; (80032dc <Tx_Verify+0x9f4>)
 800324e:	691b      	ldr	r3, [r3, #16]
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <Tx_Verify+0x9ec>)
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f002 fe6f 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	if((accCAN[VERIFY_MSG] >= perCAN[VERIFY_MSG]) && (perCAN[VERIFY_MSG] != MSG_DISABLED))
 800325a:	4b21      	ldr	r3, [pc, #132]	; (80032e0 <Tx_Verify+0x9f8>)
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <Tx_Verify+0x9fc>)
 8003260:	8912      	ldrh	r2, [r2, #8]
 8003262:	4293      	cmp	r3, r2
 8003264:	d332      	bcc.n	80032cc <Tx_Verify+0x9e4>
 8003266:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <Tx_Verify+0x9fc>)
 8003268:	891b      	ldrh	r3, [r3, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d02e      	beq.n	80032cc <Tx_Verify+0x9e4>
	{
		accCAN[VERIFY_MSG] -= perCAN[VERIFY_MSG];
 800326e:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <Tx_Verify+0x9f8>)
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	4a1c      	ldr	r2, [pc, #112]	; (80032e4 <Tx_Verify+0x9fc>)
 8003274:	8912      	ldrh	r2, [r2, #8]
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	4a19      	ldr	r2, [pc, #100]	; (80032e0 <Tx_Verify+0x9f8>)
 800327a:	6113      	str	r3, [r2, #16]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <Tx_Verify+0xa00>)
 800327e:	4a15      	ldr	r2, [pc, #84]	; (80032d4 <Tx_Verify+0x9ec>)
 8003280:	4916      	ldr	r1, [pc, #88]	; (80032dc <Tx_Verify+0x9f4>)
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f004 fbde 	bl	8007a44 <HAL_CAN_AddTxMessage>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <Tx_Verify+0x9b6>
			verifyCAN |= 1;
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <Tx_Verify+0xa04>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	b2da      	uxtb	r2, r3
 8003298:	4b14      	ldr	r3, [pc, #80]	; (80032ec <Tx_Verify+0xa04>)
 800329a:	701a      	strb	r2, [r3, #0]
 800329c:	e006      	b.n	80032ac <Tx_Verify+0x9c4>
		else
			verifyCAN &= 0x02;
 800329e:	4b13      	ldr	r3, [pc, #76]	; (80032ec <Tx_Verify+0xa04>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <Tx_Verify+0xa04>)
 80032aa:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
 80032b0:	e002      	b.n	80032b8 <Tx_Verify+0x9d0>
 80032b2:	7bfb      	ldrb	r3, [r7, #15]
 80032b4:	3301      	adds	r3, #1
 80032b6:	73fb      	strb	r3, [r7, #15]
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f004 fc9e 	bl	8007bfa <HAL_CAN_GetTxMailboxesFreeLevel>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d003      	beq.n	80032cc <Tx_Verify+0x9e4>
 80032c4:	7bfb      	ldrb	r3, [r7, #15]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d9f3      	bls.n	80032b2 <Tx_Verify+0x9ca>
	}

	return;
 80032ca:	bf00      	nop
 80032cc:	bf00      	nop
}
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}
 80032d4:	200065e8 	.word	0x200065e8
 80032d8:	200066ea 	.word	0x200066ea
 80032dc:	20006610 	.word	0x20006610
 80032e0:	20006734 	.word	0x20006734
 80032e4:	20006708 	.word	0x20006708
 80032e8:	200065f0 	.word	0x200065f0
 80032ec:	20006774 	.word	0x20006774

080032f0 <Tx_Beacon>:

static void Tx_Beacon(CAN_HandleTypeDef* hcan)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	uint16_t buffer[3];

	txHeader.IDE = CAN_ID_STD;
 80032f8:	4b47      	ldr	r3, [pc, #284]	; (8003418 <Tx_Beacon+0x128>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	609a      	str	r2, [r3, #8]
	txHeader.RTR = CAN_RTR_DATA;
 80032fe:	4b46      	ldr	r3, [pc, #280]	; (8003418 <Tx_Beacon+0x128>)
 8003300:	2200      	movs	r2, #0
 8003302:	60da      	str	r2, [r3, #12]
	txHeader.TransmitGlobalTime = DISABLE;
 8003304:	4b44      	ldr	r3, [pc, #272]	; (8003418 <Tx_Beacon+0x128>)
 8003306:	2200      	movs	r2, #0
 8003308:	751a      	strb	r2, [r3, #20]
	txHeader.StdId = BEACON_ID;
 800330a:	4b43      	ldr	r3, [pc, #268]	; (8003418 <Tx_Beacon+0x128>)
 800330c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8003310:	601a      	str	r2, [r3, #0]
	txHeader.DLC = 5;
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <Tx_Beacon+0x128>)
 8003314:	2205      	movs	r2, #5
 8003316:	611a      	str	r2, [r3, #16]

	buffer[0] = accLap / 60000;
 8003318:	4b40      	ldr	r3, [pc, #256]	; (800341c <Tx_Beacon+0x12c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a40      	ldr	r2, [pc, #256]	; (8003420 <Tx_Beacon+0x130>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	0b9b      	lsrs	r3, r3, #14
 8003324:	b29b      	uxth	r3, r3
 8003326:	813b      	strh	r3, [r7, #8]
	buffer[1] = accLap / 1000;
 8003328:	4b3c      	ldr	r3, [pc, #240]	; (800341c <Tx_Beacon+0x12c>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a3d      	ldr	r2, [pc, #244]	; (8003424 <Tx_Beacon+0x134>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	099b      	lsrs	r3, r3, #6
 8003334:	b29b      	uxth	r3, r3
 8003336:	817b      	strh	r3, [r7, #10]
	buffer[2] = accLap % 1000;
 8003338:	4b38      	ldr	r3, [pc, #224]	; (800341c <Tx_Beacon+0x12c>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b39      	ldr	r3, [pc, #228]	; (8003424 <Tx_Beacon+0x134>)
 800333e:	fba3 1302 	umull	r1, r3, r3, r2
 8003342:	099b      	lsrs	r3, r3, #6
 8003344:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	b29b      	uxth	r3, r3
 8003350:	81bb      	strh	r3, [r7, #12]

	accLap = 0;
 8003352:	4b32      	ldr	r3, [pc, #200]	; (800341c <Tx_Beacon+0x12c>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

	txData[0] = lapNumber;
 8003358:	4b33      	ldr	r3, [pc, #204]	; (8003428 <Tx_Beacon+0x138>)
 800335a:	781a      	ldrb	r2, [r3, #0]
 800335c:	4b33      	ldr	r3, [pc, #204]	; (800342c <Tx_Beacon+0x13c>)
 800335e:	701a      	strb	r2, [r3, #0]
	txData[1] = buffer[0] & 0xff;
 8003360:	893b      	ldrh	r3, [r7, #8]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	4b31      	ldr	r3, [pc, #196]	; (800342c <Tx_Beacon+0x13c>)
 8003366:	705a      	strb	r2, [r3, #1]
	txData[2] = buffer[1] & 0xff;
 8003368:	897b      	ldrh	r3, [r7, #10]
 800336a:	b2da      	uxtb	r2, r3
 800336c:	4b2f      	ldr	r3, [pc, #188]	; (800342c <Tx_Beacon+0x13c>)
 800336e:	709a      	strb	r2, [r3, #2]
	txData[3] = buffer[2] >> 8;
 8003370:	89bb      	ldrh	r3, [r7, #12]
 8003372:	0a1b      	lsrs	r3, r3, #8
 8003374:	b29b      	uxth	r3, r3
 8003376:	b2da      	uxtb	r2, r3
 8003378:	4b2c      	ldr	r3, [pc, #176]	; (800342c <Tx_Beacon+0x13c>)
 800337a:	70da      	strb	r2, [r3, #3]
	txData[4] = buffer[2] & 0xff;
 800337c:	89bb      	ldrh	r3, [r7, #12]
 800337e:	b2da      	uxtb	r2, r3
 8003380:	4b2a      	ldr	r3, [pc, #168]	; (800342c <Tx_Beacon+0x13c>)
 8003382:	711a      	strb	r2, [r3, #4]

	if(flagDatalogger == DL_SAVE)
 8003384:	4b2a      	ldr	r3, [pc, #168]	; (8003430 <Tx_Beacon+0x140>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d108      	bne.n	800339e <Tx_Beacon+0xae>
		Principal_Datalogger_Save_Buffer(hcan, txHeader.StdId, txHeader.DLC, txData);
 800338c:	4b22      	ldr	r3, [pc, #136]	; (8003418 <Tx_Beacon+0x128>)
 800338e:	6819      	ldr	r1, [r3, #0]
 8003390:	4b21      	ldr	r3, [pc, #132]	; (8003418 <Tx_Beacon+0x128>)
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	b2da      	uxtb	r2, r3
 8003396:	4b25      	ldr	r3, [pc, #148]	; (800342c <Tx_Beacon+0x13c>)
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f002 fdcd 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	if((accCAN[BEACON_MSG] >= perCAN[BEACON_MSG]) && (perCAN[BEACON_MSG] != MSG_DISABLED))
 800339e:	4b25      	ldr	r3, [pc, #148]	; (8003434 <Tx_Beacon+0x144>)
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	4a25      	ldr	r2, [pc, #148]	; (8003438 <Tx_Beacon+0x148>)
 80033a4:	8952      	ldrh	r2, [r2, #10]
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d332      	bcc.n	8003410 <Tx_Beacon+0x120>
 80033aa:	4b23      	ldr	r3, [pc, #140]	; (8003438 <Tx_Beacon+0x148>)
 80033ac:	895b      	ldrh	r3, [r3, #10]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d02e      	beq.n	8003410 <Tx_Beacon+0x120>
	{
		accCAN[BEACON_MSG] -= perCAN[BEACON_MSG];
 80033b2:	4b20      	ldr	r3, [pc, #128]	; (8003434 <Tx_Beacon+0x144>)
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	4a20      	ldr	r2, [pc, #128]	; (8003438 <Tx_Beacon+0x148>)
 80033b8:	8952      	ldrh	r2, [r2, #10]
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	4a1d      	ldr	r2, [pc, #116]	; (8003434 <Tx_Beacon+0x144>)
 80033be:	6153      	str	r3, [r2, #20]

		if(HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) == HAL_OK)
 80033c0:	4b1e      	ldr	r3, [pc, #120]	; (800343c <Tx_Beacon+0x14c>)
 80033c2:	4a1a      	ldr	r2, [pc, #104]	; (800342c <Tx_Beacon+0x13c>)
 80033c4:	4914      	ldr	r1, [pc, #80]	; (8003418 <Tx_Beacon+0x128>)
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f004 fb3c 	bl	8007a44 <HAL_CAN_AddTxMessage>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d107      	bne.n	80033e2 <Tx_Beacon+0xf2>
			verifyCAN |= 1;
 80033d2:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <Tx_Beacon+0x150>)
 80033d4:	781b      	ldrb	r3, [r3, #0]
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	b2da      	uxtb	r2, r3
 80033dc:	4b18      	ldr	r3, [pc, #96]	; (8003440 <Tx_Beacon+0x150>)
 80033de:	701a      	strb	r2, [r3, #0]
 80033e0:	e006      	b.n	80033f0 <Tx_Beacon+0x100>
		else
			verifyCAN &= 0x02;
 80033e2:	4b17      	ldr	r3, [pc, #92]	; (8003440 <Tx_Beacon+0x150>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	b2da      	uxtb	r2, r3
 80033ec:	4b14      	ldr	r3, [pc, #80]	; (8003440 <Tx_Beacon+0x150>)
 80033ee:	701a      	strb	r2, [r3, #0]

		//Wait Transmission finish
		for(uint8_t i = 0; HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3 && i < 3; i++);
 80033f0:	2300      	movs	r3, #0
 80033f2:	73fb      	strb	r3, [r7, #15]
 80033f4:	e002      	b.n	80033fc <Tx_Beacon+0x10c>
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
 80033f8:	3301      	adds	r3, #1
 80033fa:	73fb      	strb	r3, [r7, #15]
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f004 fbfc 	bl	8007bfa <HAL_CAN_GetTxMailboxesFreeLevel>
 8003402:	4603      	mov	r3, r0
 8003404:	2b03      	cmp	r3, #3
 8003406:	d003      	beq.n	8003410 <Tx_Beacon+0x120>
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d9f3      	bls.n	80033f6 <Tx_Beacon+0x106>
	}

	return;
 800340e:	bf00      	nop
 8003410:	bf00      	nop
}
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20006610 	.word	0x20006610
 800341c:	20006770 	.word	0x20006770
 8003420:	45e7b273 	.word	0x45e7b273
 8003424:	10624dd3 	.word	0x10624dd3
 8003428:	20006628 	.word	0x20006628
 800342c:	200065e8 	.word	0x200065e8
 8003430:	200066ea 	.word	0x200066ea
 8003434:	20006734 	.word	0x20006734
 8003438:	20006708 	.word	0x20006708
 800343c:	200065f0 	.word	0x200065f0
 8003440:	20006774 	.word	0x20006774

08003444 <Save_ECU>:

static void Save_ECU(CAN_HandleTypeDef* hcan)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
	uint8_t id = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	75fb      	strb	r3, [r7, #23]
	uint8_t length = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	75bb      	strb	r3, [r7, #22]
	uint8_t buffer[8];

	if(flagDatalogger != DL_SAVE)
 8003454:	4ba0      	ldr	r3, [pc, #640]	; (80036d8 <Save_ECU+0x294>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	f040 8139 	bne.w	80036d0 <Save_ECU+0x28c>
		return;

	id = ECU_FIRST_ID;
 800345e:	2301      	movs	r3, #1
 8003460:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003462:	2308      	movs	r3, #8
 8003464:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.rpm >> 8;
 8003466:	4b9d      	ldr	r3, [pc, #628]	; (80036dc <Save_ECU+0x298>)
 8003468:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 800346c:	121b      	asrs	r3, r3, #8
 800346e:	b21b      	sxth	r3, r3
 8003470:	b2db      	uxtb	r3, r3
 8003472:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.rpm & 0xff;
 8003474:	4b99      	ldr	r3, [pc, #612]	; (80036dc <Save_ECU+0x298>)
 8003476:	f9b3 304e 	ldrsh.w	r3, [r3, #78]	; 0x4e
 800347a:	b2db      	uxtb	r3, r3
 800347c:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.tps >> 8;
 800347e:	4b97      	ldr	r3, [pc, #604]	; (80036dc <Save_ECU+0x298>)
 8003480:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8003484:	121b      	asrs	r3, r3, #8
 8003486:	b21b      	sxth	r3, r3
 8003488:	b2db      	uxtb	r3, r3
 800348a:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.tps & 0xff;
 800348c:	4b93      	ldr	r3, [pc, #588]	; (80036dc <Save_ECU+0x298>)
 800348e:	f9b3 3050 	ldrsh.w	r3, [r3, #80]	; 0x50
 8003492:	b2db      	uxtb	r3, r3
 8003494:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.iat >> 8;
 8003496:	4b91      	ldr	r3, [pc, #580]	; (80036dc <Save_ECU+0x298>)
 8003498:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800349c:	121b      	asrs	r3, r3, #8
 800349e:	b21b      	sxth	r3, r3
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.iat & 0xff;
 80034a4:	4b8d      	ldr	r3, [pc, #564]	; (80036dc <Save_ECU+0x298>)
 80034a6:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.ect >> 8;
 80034ae:	4b8b      	ldr	r3, [pc, #556]	; (80036dc <Save_ECU+0x298>)
 80034b0:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80034b4:	121b      	asrs	r3, r3, #8
 80034b6:	b21b      	sxth	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.ect & 0xff;
 80034bc:	4b87      	ldr	r3, [pc, #540]	; (80036dc <Save_ECU+0x298>)
 80034be:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 80034c6:	7df9      	ldrb	r1, [r7, #23]
 80034c8:	f107 030c 	add.w	r3, r7, #12
 80034cc:	7dba      	ldrb	r2, [r7, #22]
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f002 fd32 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 1;
 80034d4:	2302      	movs	r3, #2
 80034d6:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80034d8:	2308      	movs	r3, #8
 80034da:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.map >> 8;
 80034dc:	4b7f      	ldr	r3, [pc, #508]	; (80036dc <Save_ECU+0x298>)
 80034de:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80034e2:	121b      	asrs	r3, r3, #8
 80034e4:	b21b      	sxth	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.map & 0xff;
 80034ea:	4b7c      	ldr	r3, [pc, #496]	; (80036dc <Save_ECU+0x298>)
 80034ec:	f9b3 3046 	ldrsh.w	r3, [r3, #70]	; 0x46
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.fuel_pressure >> 8;
 80034f4:	4b79      	ldr	r3, [pc, #484]	; (80036dc <Save_ECU+0x298>)
 80034f6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80034fa:	121b      	asrs	r3, r3, #8
 80034fc:	b21b      	sxth	r3, r3
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.fuel_pressure & 0xff;
 8003502:	4b76      	ldr	r3, [pc, #472]	; (80036dc <Save_ECU+0x298>)
 8003504:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8003508:	b2db      	uxtb	r3, r3
 800350a:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.oil_pressure >> 8;
 800350c:	4b73      	ldr	r3, [pc, #460]	; (80036dc <Save_ECU+0x298>)
 800350e:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003512:	121b      	asrs	r3, r3, #8
 8003514:	b21b      	sxth	r3, r3
 8003516:	b2db      	uxtb	r3, r3
 8003518:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.oil_pressure & 0xff;
 800351a:	4b70      	ldr	r3, [pc, #448]	; (80036dc <Save_ECU+0x298>)
 800351c:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 8003520:	b2db      	uxtb	r3, r3
 8003522:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.coolant_pressure >> 8;
 8003524:	4b6d      	ldr	r3, [pc, #436]	; (80036dc <Save_ECU+0x298>)
 8003526:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800352a:	121b      	asrs	r3, r3, #8
 800352c:	b21b      	sxth	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.coolant_pressure & 0xff;
 8003532:	4b6a      	ldr	r3, [pc, #424]	; (80036dc <Save_ECU+0x298>)
 8003534:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8003538:	b2db      	uxtb	r3, r3
 800353a:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 800353c:	7df9      	ldrb	r1, [r7, #23]
 800353e:	f107 030c 	add.w	r3, r7, #12
 8003542:	7dba      	ldrb	r2, [r7, #22]
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f002 fcf7 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 2;
 800354a:	2303      	movs	r3, #3
 800354c:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800354e:	2308      	movs	r3, #8
 8003550:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.lambda >> 8;
 8003552:	4b62      	ldr	r3, [pc, #392]	; (80036dc <Save_ECU+0x298>)
 8003554:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003558:	121b      	asrs	r3, r3, #8
 800355a:	b21b      	sxth	r3, r3
 800355c:	b2db      	uxtb	r3, r3
 800355e:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.lambda & 0xff;
 8003560:	4b5e      	ldr	r3, [pc, #376]	; (80036dc <Save_ECU+0x298>)
 8003562:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8003566:	b2db      	uxtb	r3, r3
 8003568:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.oil_temperature >> 8;
 800356a:	4b5c      	ldr	r3, [pc, #368]	; (80036dc <Save_ECU+0x298>)
 800356c:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 8003570:	121b      	asrs	r3, r3, #8
 8003572:	b21b      	sxth	r3, r3
 8003574:	b2db      	uxtb	r3, r3
 8003576:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.oil_temperature & 0xff;
 8003578:	4b58      	ldr	r3, [pc, #352]	; (80036dc <Save_ECU+0x298>)
 800357a:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800357e:	b2db      	uxtb	r3, r3
 8003580:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.wheel_speed_fl;
 8003582:	4b56      	ldr	r3, [pc, #344]	; (80036dc <Save_ECU+0x298>)
 8003584:	f9b3 3052 	ldrsh.w	r3, [r3, #82]	; 0x52
 8003588:	b2db      	uxtb	r3, r3
 800358a:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.wheel_speed_fr;
 800358c:	4b53      	ldr	r3, [pc, #332]	; (80036dc <Save_ECU+0x298>)
 800358e:	f9b3 3054 	ldrsh.w	r3, [r3, #84]	; 0x54
 8003592:	b2db      	uxtb	r3, r3
 8003594:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.wheel_speed_rl;
 8003596:	4b51      	ldr	r3, [pc, #324]	; (80036dc <Save_ECU+0x298>)
 8003598:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 800359c:	b2db      	uxtb	r3, r3
 800359e:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.wheel_speed_rr;
 80035a0:	4b4e      	ldr	r3, [pc, #312]	; (80036dc <Save_ECU+0x298>)
 80035a2:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 80035aa:	7df9      	ldrb	r1, [r7, #23]
 80035ac:	f107 030c 	add.w	r3, r7, #12
 80035b0:	7dba      	ldrb	r2, [r7, #22]
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f002 fcc0 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 3;
 80035b8:	2304      	movs	r3, #4
 80035ba:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80035bc:	2308      	movs	r3, #8
 80035be:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.battery_voltage >> 8;
 80035c0:	4b46      	ldr	r3, [pc, #280]	; (80036dc <Save_ECU+0x298>)
 80035c2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80035c6:	121b      	asrs	r3, r3, #8
 80035c8:	b21b      	sxth	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.battery_voltage & 0xff;
 80035ce:	4b43      	ldr	r3, [pc, #268]	; (80036dc <Save_ECU+0x298>)
 80035d0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.fuel_flow_total >> 8;
 80035d8:	4b40      	ldr	r3, [pc, #256]	; (80036dc <Save_ECU+0x298>)
 80035da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80035de:	121b      	asrs	r3, r3, #8
 80035e0:	b21b      	sxth	r3, r3
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.fuel_flow_total & 0xff;
 80035e6:	4b3d      	ldr	r3, [pc, #244]	; (80036dc <Save_ECU+0x298>)
 80035e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.gear & 0xff;
 80035f0:	4b3a      	ldr	r3, [pc, #232]	; (80036dc <Save_ECU+0x298>)
 80035f2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.electro_fan & 0xff;
 80035fa:	4b38      	ldr	r3, [pc, #224]	; (80036dc <Save_ECU+0x298>)
 80035fc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.injection_bank_a_time >> 8;
 8003604:	4b35      	ldr	r3, [pc, #212]	; (80036dc <Save_ECU+0x298>)
 8003606:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800360a:	121b      	asrs	r3, r3, #8
 800360c:	b21b      	sxth	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.injection_bank_a_time & 0xff;
 8003612:	4b32      	ldr	r3, [pc, #200]	; (80036dc <Save_ECU+0x298>)
 8003614:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003618:	b2db      	uxtb	r3, r3
 800361a:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 800361c:	7df9      	ldrb	r1, [r7, #23]
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	7dba      	ldrb	r2, [r7, #22]
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f002 fc87 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 4;
 800362a:	2305      	movs	r3, #5
 800362c:	75fb      	strb	r3, [r7, #23]
	length = 2;
 800362e:	2302      	movs	r3, #2
 8003630:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.lambda_correction >> 8;
 8003632:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <Save_ECU+0x298>)
 8003634:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8003638:	121b      	asrs	r3, r3, #8
 800363a:	b21b      	sxth	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.lambda_correction & 0xff;
 8003640:	4b26      	ldr	r3, [pc, #152]	; (80036dc <Save_ECU+0x298>)
 8003642:	f9b3 3044 	ldrsh.w	r3, [r3, #68]	; 0x44
 8003646:	b2db      	uxtb	r3, r3
 8003648:	737b      	strb	r3, [r7, #13]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 800364a:	7df9      	ldrb	r1, [r7, #23]
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	7dba      	ldrb	r2, [r7, #22]
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f002 fc70 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = ECU_FIRST_ID + 5;
 8003658:	2306      	movs	r3, #6
 800365a:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800365c:	2308      	movs	r3, #8
 800365e:	75bb      	strb	r3, [r7, #22]

	buffer[0] = ecuData.accel_long >> 8;
 8003660:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <Save_ECU+0x298>)
 8003662:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003666:	121b      	asrs	r3, r3, #8
 8003668:	b21b      	sxth	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	733b      	strb	r3, [r7, #12]
	buffer[1] = ecuData.accel_long & 0xff;
 800366e:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <Save_ECU+0x298>)
 8003670:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003674:	b2db      	uxtb	r3, r3
 8003676:	737b      	strb	r3, [r7, #13]
	buffer[2] = ecuData.accel_lat >> 8;
 8003678:	4b18      	ldr	r3, [pc, #96]	; (80036dc <Save_ECU+0x298>)
 800367a:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800367e:	121b      	asrs	r3, r3, #8
 8003680:	b21b      	sxth	r3, r3
 8003682:	b2db      	uxtb	r3, r3
 8003684:	73bb      	strb	r3, [r7, #14]
	buffer[3] = ecuData.accel_lat & 0xff;
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <Save_ECU+0x298>)
 8003688:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800368c:	b2db      	uxtb	r3, r3
 800368e:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ecuData.yaw_rate_pitch >> 8;
 8003690:	4b12      	ldr	r3, [pc, #72]	; (80036dc <Save_ECU+0x298>)
 8003692:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8003696:	121b      	asrs	r3, r3, #8
 8003698:	b21b      	sxth	r3, r3
 800369a:	b2db      	uxtb	r3, r3
 800369c:	743b      	strb	r3, [r7, #16]
	buffer[5] = ecuData.yaw_rate_pitch & 0xff;
 800369e:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <Save_ECU+0x298>)
 80036a0:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	747b      	strb	r3, [r7, #17]
	buffer[6] = ecuData.yaw_rate_roll >> 8;
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <Save_ECU+0x298>)
 80036aa:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80036ae:	121b      	asrs	r3, r3, #8
 80036b0:	b21b      	sxth	r3, r3
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	74bb      	strb	r3, [r7, #18]
	buffer[7] = ecuData.yaw_rate_roll & 0xff;
 80036b6:	4b09      	ldr	r3, [pc, #36]	; (80036dc <Save_ECU+0x298>)
 80036b8:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 80036c0:	7df9      	ldrb	r1, [r7, #23]
 80036c2:	f107 030c 	add.w	r3, r7, #12
 80036c6:	7dba      	ldrb	r2, [r7, #22]
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f002 fc35 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	return;
 80036ce:	e000      	b.n	80036d2 <Save_ECU+0x28e>
		return;
 80036d0:	bf00      	nop
}
 80036d2:	3718      	adds	r7, #24
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	200066ea 	.word	0x200066ea
 80036dc:	20006644 	.word	0x20006644

080036e0 <Save_PDM>:

static void Save_PDM(CAN_HandleTypeDef* hcan)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
	uint8_t id = 0, length = 0, buffer[8];
 80036e8:	2300      	movs	r3, #0
 80036ea:	75fb      	strb	r3, [r7, #23]
 80036ec:	2300      	movs	r3, #0
 80036ee:	75bb      	strb	r3, [r7, #22]

	if(flagDatalogger != DL_SAVE)
 80036f0:	4b8a      	ldr	r3, [pc, #552]	; (800391c <Save_PDM+0x23c>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f040 810d 	bne.w	8003914 <Save_PDM+0x234>
		return;

	id = PDM_FIRST_ID;
 80036fa:	230a      	movs	r3, #10
 80036fc:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80036fe:	2308      	movs	r3, #8
 8003700:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[0] << 8;
 8003702:	2300      	movs	r3, #0
 8003704:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[0] & 0xff;
 8003706:	4b86      	ldr	r3, [pc, #536]	; (8003920 <Save_PDM+0x240>)
 8003708:	889b      	ldrh	r3, [r3, #4]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[1] << 8;
 800370e:	2300      	movs	r3, #0
 8003710:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[1] & 0xff;
 8003712:	4b83      	ldr	r3, [pc, #524]	; (8003920 <Save_PDM+0x240>)
 8003714:	88db      	ldrh	r3, [r3, #6]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[2] << 8;
 800371a:	2300      	movs	r3, #0
 800371c:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[2] & 0xff;
 800371e:	4b80      	ldr	r3, [pc, #512]	; (8003920 <Save_PDM+0x240>)
 8003720:	891b      	ldrh	r3, [r3, #8]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[3] << 8;
 8003726:	2300      	movs	r3, #0
 8003728:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[3] & 0xff;
 800372a:	4b7d      	ldr	r3, [pc, #500]	; (8003920 <Save_PDM+0x240>)
 800372c:	895b      	ldrh	r3, [r3, #10]
 800372e:	b2db      	uxtb	r3, r3
 8003730:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 8003732:	7df9      	ldrb	r1, [r7, #23]
 8003734:	f107 030c 	add.w	r3, r7, #12
 8003738:	7dba      	ldrb	r2, [r7, #22]
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f002 fbfc 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 1;
 8003740:	230b      	movs	r3, #11
 8003742:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003744:	2308      	movs	r3, #8
 8003746:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[4] << 8;
 8003748:	2300      	movs	r3, #0
 800374a:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[4] & 0xff;
 800374c:	4b74      	ldr	r3, [pc, #464]	; (8003920 <Save_PDM+0x240>)
 800374e:	899b      	ldrh	r3, [r3, #12]
 8003750:	b2db      	uxtb	r3, r3
 8003752:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[5] << 8;
 8003754:	2300      	movs	r3, #0
 8003756:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[5] & 0xff;
 8003758:	4b71      	ldr	r3, [pc, #452]	; (8003920 <Save_PDM+0x240>)
 800375a:	89db      	ldrh	r3, [r3, #14]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[6] << 8;
 8003760:	2300      	movs	r3, #0
 8003762:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[6] & 0xff;
 8003764:	4b6e      	ldr	r3, [pc, #440]	; (8003920 <Save_PDM+0x240>)
 8003766:	8a1b      	ldrh	r3, [r3, #16]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[7] << 8;
 800376c:	2300      	movs	r3, #0
 800376e:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[7] & 0xff;
 8003770:	4b6b      	ldr	r3, [pc, #428]	; (8003920 <Save_PDM+0x240>)
 8003772:	8a5b      	ldrh	r3, [r3, #18]
 8003774:	b2db      	uxtb	r3, r3
 8003776:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 8003778:	7df9      	ldrb	r1, [r7, #23]
 800377a:	f107 030c 	add.w	r3, r7, #12
 800377e:	7dba      	ldrb	r2, [r7, #22]
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f002 fbd9 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 2;
 8003786:	230c      	movs	r3, #12
 8003788:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800378a:	2308      	movs	r3, #8
 800378c:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[8] << 8;
 800378e:	2300      	movs	r3, #0
 8003790:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[8] & 0xff;
 8003792:	4b63      	ldr	r3, [pc, #396]	; (8003920 <Save_PDM+0x240>)
 8003794:	8a9b      	ldrh	r3, [r3, #20]
 8003796:	b2db      	uxtb	r3, r3
 8003798:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[9] << 8;
 800379a:	2300      	movs	r3, #0
 800379c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[9] & 0xff;
 800379e:	4b60      	ldr	r3, [pc, #384]	; (8003920 <Save_PDM+0x240>)
 80037a0:	8adb      	ldrh	r3, [r3, #22]
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[10] << 8;
 80037a6:	2300      	movs	r3, #0
 80037a8:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[10] & 0xff;
 80037aa:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <Save_PDM+0x240>)
 80037ac:	8b1b      	ldrh	r3, [r3, #24]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[11] << 8;
 80037b2:	2300      	movs	r3, #0
 80037b4:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[11] & 0xff;
 80037b6:	4b5a      	ldr	r3, [pc, #360]	; (8003920 <Save_PDM+0x240>)
 80037b8:	8b5b      	ldrh	r3, [r3, #26]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 80037be:	7df9      	ldrb	r1, [r7, #23]
 80037c0:	f107 030c 	add.w	r3, r7, #12
 80037c4:	7dba      	ldrb	r2, [r7, #22]
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f002 fbb6 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 3;
 80037cc:	230d      	movs	r3, #13
 80037ce:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80037d0:	2308      	movs	r3, #8
 80037d2:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Current_Buffer[12] << 8;
 80037d4:	2300      	movs	r3, #0
 80037d6:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Current_Buffer[12] & 0xff;
 80037d8:	4b51      	ldr	r3, [pc, #324]	; (8003920 <Save_PDM+0x240>)
 80037da:	8b9b      	ldrh	r3, [r3, #28]
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Current_Buffer[13] << 8;
 80037e0:	2300      	movs	r3, #0
 80037e2:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Current_Buffer[13] & 0xff;
 80037e4:	4b4e      	ldr	r3, [pc, #312]	; (8003920 <Save_PDM+0x240>)
 80037e6:	8bdb      	ldrh	r3, [r3, #30]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Current_Buffer[14] << 8;
 80037ec:	2300      	movs	r3, #0
 80037ee:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Current_Buffer[14] & 0xff;
 80037f0:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <Save_PDM+0x240>)
 80037f2:	8c1b      	ldrh	r3, [r3, #32]
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Current_Buffer[15] << 8;
 80037f8:	2300      	movs	r3, #0
 80037fa:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Current_Buffer[15] & 0xff;
 80037fc:	4b48      	ldr	r3, [pc, #288]	; (8003920 <Save_PDM+0x240>)
 80037fe:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8003800:	b2db      	uxtb	r3, r3
 8003802:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 8003804:	7df9      	ldrb	r1, [r7, #23]
 8003806:	f107 030c 	add.w	r3, r7, #12
 800380a:	7dba      	ldrb	r2, [r7, #22]
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f002 fb93 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 4;
 8003812:	230e      	movs	r3, #14
 8003814:	75fb      	strb	r3, [r7, #23]
	length = 8;
 8003816:	2308      	movs	r3, #8
 8003818:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Tempetature_Buffer[0] << 8;
 800381a:	2300      	movs	r3, #0
 800381c:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Tempetature_Buffer[0] & 0xff;
 800381e:	4b40      	ldr	r3, [pc, #256]	; (8003920 <Save_PDM+0x240>)
 8003820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003822:	b2db      	uxtb	r3, r3
 8003824:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Tempetature_Buffer[1] << 8;
 8003826:	2300      	movs	r3, #0
 8003828:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Tempetature_Buffer[1] & 0xff;
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <Save_PDM+0x240>)
 800382c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800382e:	b2db      	uxtb	r3, r3
 8003830:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Tempetature_Buffer[2] << 8;
 8003832:	2300      	movs	r3, #0
 8003834:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Tempetature_Buffer[2] & 0xff;
 8003836:	4b3a      	ldr	r3, [pc, #232]	; (8003920 <Save_PDM+0x240>)
 8003838:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800383a:	b2db      	uxtb	r3, r3
 800383c:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Tempetature_Buffer[3] << 8;
 800383e:	2300      	movs	r3, #0
 8003840:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Tempetature_Buffer[3] & 0xff;
 8003842:	4b37      	ldr	r3, [pc, #220]	; (8003920 <Save_PDM+0x240>)
 8003844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003846:	b2db      	uxtb	r3, r3
 8003848:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 800384a:	7df9      	ldrb	r1, [r7, #23]
 800384c:	f107 030c 	add.w	r3, r7, #12
 8003850:	7dba      	ldrb	r2, [r7, #22]
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f002 fb70 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 5;
 8003858:	230f      	movs	r3, #15
 800385a:	75fb      	strb	r3, [r7, #23]
	length = 8;
 800385c:	2308      	movs	r3, #8
 800385e:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Tempetature_Buffer[4] << 8;
 8003860:	2300      	movs	r3, #0
 8003862:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Tempetature_Buffer[4] & 0xff;
 8003864:	4b2e      	ldr	r3, [pc, #184]	; (8003920 <Save_PDM+0x240>)
 8003866:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8003868:	b2db      	uxtb	r3, r3
 800386a:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Tempetature_Buffer[5] << 8;
 800386c:	2300      	movs	r3, #0
 800386e:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Tempetature_Buffer[5] & 0xff;
 8003870:	4b2b      	ldr	r3, [pc, #172]	; (8003920 <Save_PDM+0x240>)
 8003872:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003874:	b2db      	uxtb	r3, r3
 8003876:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Tempetature_Buffer[6] << 8;
 8003878:	2300      	movs	r3, #0
 800387a:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Tempetature_Buffer[6] & 0xff;
 800387c:	4b28      	ldr	r3, [pc, #160]	; (8003920 <Save_PDM+0x240>)
 800387e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003880:	b2db      	uxtb	r3, r3
 8003882:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Tempetature_Buffer[7] << 8;
 8003884:	2300      	movs	r3, #0
 8003886:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Tempetature_Buffer[7] & 0xff;
 8003888:	4b25      	ldr	r3, [pc, #148]	; (8003920 <Save_PDM+0x240>)
 800388a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800388c:	b2db      	uxtb	r3, r3
 800388e:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 8003890:	7df9      	ldrb	r1, [r7, #23]
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	7dba      	ldrb	r2, [r7, #22]
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f002 fb4d 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 6;
 800389e:	2310      	movs	r3, #16
 80038a0:	75fb      	strb	r3, [r7, #23]
	length = 8;
 80038a2:	2308      	movs	r3, #8
 80038a4:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Duty_Cycle_Buffer[0] << 8;
 80038a6:	2300      	movs	r3, #0
 80038a8:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Duty_Cycle_Buffer[0] & 0xff;
 80038aa:	4b1d      	ldr	r3, [pc, #116]	; (8003920 <Save_PDM+0x240>)
 80038ac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Duty_Cycle_Buffer[1] << 8;
 80038b2:	2300      	movs	r3, #0
 80038b4:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Duty_Cycle_Buffer[1] & 0xff;
 80038b6:	4b1a      	ldr	r3, [pc, #104]	; (8003920 <Save_PDM+0x240>)
 80038b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pdmReadings.Duty_Cycle_Buffer[2] << 8;
 80038be:	2300      	movs	r3, #0
 80038c0:	743b      	strb	r3, [r7, #16]
	buffer[5] = pdmReadings.Duty_Cycle_Buffer[2] & 0xff;
 80038c2:	4b17      	ldr	r3, [pc, #92]	; (8003920 <Save_PDM+0x240>)
 80038c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	747b      	strb	r3, [r7, #17]
	buffer[6] = pdmReadings.Duty_Cycle_Buffer[3] << 8;
 80038ca:	2300      	movs	r3, #0
 80038cc:	74bb      	strb	r3, [r7, #18]
	buffer[7] = pdmReadings.Duty_Cycle_Buffer[3] & 0xff;
 80038ce:	4b14      	ldr	r3, [pc, #80]	; (8003920 <Save_PDM+0x240>)
 80038d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	74fb      	strb	r3, [r7, #19]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 80038d6:	7df9      	ldrb	r1, [r7, #23]
 80038d8:	f107 030c 	add.w	r3, r7, #12
 80038dc:	7dba      	ldrb	r2, [r7, #22]
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f002 fb2a 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	id = PDM_FIRST_ID + 7;
 80038e4:	2311      	movs	r3, #17
 80038e6:	75fb      	strb	r3, [r7, #23]
	length = 4;
 80038e8:	2304      	movs	r3, #4
 80038ea:	75bb      	strb	r3, [r7, #22]

	buffer[0] = pdmReadings.Input_Voltage << 8;
 80038ec:	2300      	movs	r3, #0
 80038ee:	733b      	strb	r3, [r7, #12]
	buffer[1] = pdmReadings.Input_Voltage & 0xff;
 80038f0:	4b0b      	ldr	r3, [pc, #44]	; (8003920 <Save_PDM+0x240>)
 80038f2:	881b      	ldrh	r3, [r3, #0]
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	737b      	strb	r3, [r7, #13]
	buffer[2] = pdmReadings.Output_Verify << 8;
 80038f8:	2300      	movs	r3, #0
 80038fa:	73bb      	strb	r3, [r7, #14]
	buffer[3] = pdmReadings.Output_Verify & 0xff;
 80038fc:	4b08      	ldr	r3, [pc, #32]	; (8003920 <Save_PDM+0x240>)
 80038fe:	885b      	ldrh	r3, [r3, #2]
 8003900:	b2db      	uxtb	r3, r3
 8003902:	73fb      	strb	r3, [r7, #15]

	Principal_Datalogger_Save_Buffer(hcan, id, length, buffer);
 8003904:	7df9      	ldrb	r1, [r7, #23]
 8003906:	f107 030c 	add.w	r3, r7, #12
 800390a:	7dba      	ldrb	r2, [r7, #22]
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f002 fb13 	bl	8005f38 <Principal_Datalogger_Save_Buffer>

	return;
 8003912:	e000      	b.n	8003916 <Save_PDM+0x236>
		return;
 8003914:	bf00      	nop
}
 8003916:	3718      	adds	r7, #24
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	200066ea 	.word	0x200066ea
 8003920:	200066ac 	.word	0x200066ac

08003924 <Principal_Init>:

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c);
static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c);

void Principal_Init(CAN_HandleTypeDef* hcan, I2C_HandleTypeDef* hi2c, TIM_HandleTypeDef* htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	60f8      	str	r0, [r7, #12]
 800392c:	60b9      	str	r1, [r7, #8]
 800392e:	607a      	str	r2, [r7, #4]
	if(Load_EEPROM(hi2c) != HAL_OK)
 8003930:	68b8      	ldr	r0, [r7, #8]
 8003932:	f000 fd2f 	bl	8004394 <Load_EEPROM>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <Principal_Init+0x1c>
		Principal_Hard_Code_Config();
 800393c:	f000 fcda 	bl	80042f4 <Principal_Hard_Code_Config>
//	HAL_RTCEx_SetCoarseCalib(&hrtc, RTC_CALIBSIGN_NEGATIVE, 55);
//	HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN);
//	HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN);
//	HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);

	if(HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_DR1) == RTC_STORE_DATA)
 8003940:	2101      	movs	r1, #1
 8003942:	4812      	ldr	r0, [pc, #72]	; (800398c <Principal_Init+0x68>)
 8003944:	f009 fab6 	bl	800ceb4 <HAL_RTCEx_BKUPRead>
 8003948:	4603      	mov	r3, r0
 800394a:	f24e 325c 	movw	r2, #58204	; 0xe35c
 800394e:	4293      	cmp	r3, r2
 8003950:	d103      	bne.n	800395a <Principal_Init+0x36>
		flagRTC = RTC_OK;
 8003952:	4b0f      	ldr	r3, [pc, #60]	; (8003990 <Principal_Init+0x6c>)
 8003954:	2200      	movs	r2, #0
 8003956:	701a      	strb	r2, [r3, #0]
 8003958:	e002      	b.n	8003960 <Principal_Init+0x3c>
	else
		flagRTC = RTC_LOST;
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <Principal_Init+0x6c>)
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &adcBuffer[6], 6);
 8003960:	2206      	movs	r2, #6
 8003962:	490c      	ldr	r1, [pc, #48]	; (8003994 <Principal_Init+0x70>)
 8003964:	480c      	ldr	r0, [pc, #48]	; (8003998 <Principal_Init+0x74>)
 8003966:	f003 fa6f 	bl	8006e48 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*) &adcBuffer[0], 6);
 800396a:	2206      	movs	r2, #6
 800396c:	490b      	ldr	r1, [pc, #44]	; (800399c <Principal_Init+0x78>)
 800396e:	480c      	ldr	r0, [pc, #48]	; (80039a0 <Principal_Init+0x7c>)
 8003970:	f003 fa6a 	bl	8006e48 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(htim);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f00b f985 	bl	800ec84 <HAL_TIM_Base_Start_IT>

	Principal_Datalogger_Init();
 800397a:	f002 f999 	bl	8005cb0 <Principal_Datalogger_Init>

	Principal_CAN_Start(hcan);
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f7fe fc64 	bl	800224c <Principal_CAN_Start>
}
 8003984:	bf00      	nop
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	20000380 	.word	0x20000380
 8003990:	200066eb 	.word	0x200066eb
 8003994:	20006638 	.word	0x20006638
 8003998:	200001b4 	.word	0x200001b4
 800399c:	2000662c 	.word	0x2000662c
 80039a0:	200001fc 	.word	0x200001fc

080039a4 <Principal_Receive_Config>:

HAL_StatusTypeDef Principal_Receive_Config(I2C_HandleTypeDef* hi2c, uint8_t* data, uint32_t length)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
	HAL_SD_StateTypeDef retVal = HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	75fb      	strb	r3, [r7, #23]

	switch(data[0])
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b03      	cmp	r3, #3
 80039ba:	f200 847e 	bhi.w	80042ba <Principal_Receive_Config+0x916>
 80039be:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <Principal_Receive_Config+0x20>)
 80039c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c4:	080039d5 	.word	0x080039d5
 80039c8:	08003e69 	.word	0x08003e69
 80039cc:	080041c9 	.word	0x080041c9
 80039d0:	08004247 	.word	0x08004247
	{
		case 0:
			if(length != 8)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b08      	cmp	r3, #8
 80039d8:	f040 8471 	bne.w	80042be <Principal_Receive_Config+0x91a>
				break;

			__BUFFER_TO_FREQ(data[1], perMsg[ANALOG_1_4]);
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	3301      	adds	r3, #1
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	2b0a      	cmp	r3, #10
 80039e6:	d847      	bhi.n	8003a78 <Principal_Receive_Config+0xd4>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <Principal_Receive_Config+0x4c>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a1d 	.word	0x08003a1d
 80039f4:	08003a27 	.word	0x08003a27
 80039f8:	08003a31 	.word	0x08003a31
 80039fc:	08003a39 	.word	0x08003a39
 8003a00:	08003a41 	.word	0x08003a41
 8003a04:	08003a49 	.word	0x08003a49
 8003a08:	08003a51 	.word	0x08003a51
 8003a0c:	08003a59 	.word	0x08003a59
 8003a10:	08003a61 	.word	0x08003a61
 8003a14:	08003a69 	.word	0x08003a69
 8003a18:	08003a71 	.word	0x08003a71
 8003a1c:	4ba8      	ldr	r3, [pc, #672]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a22:	801a      	strh	r2, [r3, #0]
 8003a24:	e02b      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a26:	4ba6      	ldr	r3, [pc, #664]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a28:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003a2c:	801a      	strh	r2, [r3, #0]
 8003a2e:	e026      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a30:	4ba3      	ldr	r3, [pc, #652]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a32:	22c8      	movs	r2, #200	; 0xc8
 8003a34:	801a      	strh	r2, [r3, #0]
 8003a36:	e022      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a38:	4ba1      	ldr	r3, [pc, #644]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a3a:	2264      	movs	r2, #100	; 0x64
 8003a3c:	801a      	strh	r2, [r3, #0]
 8003a3e:	e01e      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a40:	4b9f      	ldr	r3, [pc, #636]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a42:	2232      	movs	r2, #50	; 0x32
 8003a44:	801a      	strh	r2, [r3, #0]
 8003a46:	e01a      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a48:	4b9d      	ldr	r3, [pc, #628]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a4a:	2228      	movs	r2, #40	; 0x28
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	e016      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a50:	4b9b      	ldr	r3, [pc, #620]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a52:	2214      	movs	r2, #20
 8003a54:	801a      	strh	r2, [r3, #0]
 8003a56:	e012      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a58:	4b99      	ldr	r3, [pc, #612]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a5a:	220a      	movs	r2, #10
 8003a5c:	801a      	strh	r2, [r3, #0]
 8003a5e:	e00e      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a60:	4b97      	ldr	r3, [pc, #604]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a62:	2205      	movs	r2, #5
 8003a64:	801a      	strh	r2, [r3, #0]
 8003a66:	e00a      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a68:	4b95      	ldr	r3, [pc, #596]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a6a:	2204      	movs	r2, #4
 8003a6c:	801a      	strh	r2, [r3, #0]
 8003a6e:	e006      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a70:	4b93      	ldr	r3, [pc, #588]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a72:	2202      	movs	r2, #2
 8003a74:	801a      	strh	r2, [r3, #0]
 8003a76:	e002      	b.n	8003a7e <Principal_Receive_Config+0xda>
 8003a78:	4b91      	ldr	r3, [pc, #580]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	801a      	strh	r2, [r3, #0]
 8003a7e:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perMsg[ANALOG_5_8]);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	3302      	adds	r3, #2
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	3b01      	subs	r3, #1
 8003a88:	2b0a      	cmp	r3, #10
 8003a8a:	d847      	bhi.n	8003b1c <Principal_Receive_Config+0x178>
 8003a8c:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <Principal_Receive_Config+0xf0>)
 8003a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a92:	bf00      	nop
 8003a94:	08003ac1 	.word	0x08003ac1
 8003a98:	08003acb 	.word	0x08003acb
 8003a9c:	08003ad5 	.word	0x08003ad5
 8003aa0:	08003add 	.word	0x08003add
 8003aa4:	08003ae5 	.word	0x08003ae5
 8003aa8:	08003aed 	.word	0x08003aed
 8003aac:	08003af5 	.word	0x08003af5
 8003ab0:	08003afd 	.word	0x08003afd
 8003ab4:	08003b05 	.word	0x08003b05
 8003ab8:	08003b0d 	.word	0x08003b0d
 8003abc:	08003b15 	.word	0x08003b15
 8003ac0:	4b7f      	ldr	r3, [pc, #508]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003ac2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ac6:	805a      	strh	r2, [r3, #2]
 8003ac8:	e02b      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003aca:	4b7d      	ldr	r3, [pc, #500]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003acc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ad0:	805a      	strh	r2, [r3, #2]
 8003ad2:	e026      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003ad4:	4b7a      	ldr	r3, [pc, #488]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003ad6:	22c8      	movs	r2, #200	; 0xc8
 8003ad8:	805a      	strh	r2, [r3, #2]
 8003ada:	e022      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003adc:	4b78      	ldr	r3, [pc, #480]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003ade:	2264      	movs	r2, #100	; 0x64
 8003ae0:	805a      	strh	r2, [r3, #2]
 8003ae2:	e01e      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003ae4:	4b76      	ldr	r3, [pc, #472]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003ae6:	2232      	movs	r2, #50	; 0x32
 8003ae8:	805a      	strh	r2, [r3, #2]
 8003aea:	e01a      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003aec:	4b74      	ldr	r3, [pc, #464]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003aee:	2228      	movs	r2, #40	; 0x28
 8003af0:	805a      	strh	r2, [r3, #2]
 8003af2:	e016      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003af4:	4b72      	ldr	r3, [pc, #456]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003af6:	2214      	movs	r2, #20
 8003af8:	805a      	strh	r2, [r3, #2]
 8003afa:	e012      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003afc:	4b70      	ldr	r3, [pc, #448]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003afe:	220a      	movs	r2, #10
 8003b00:	805a      	strh	r2, [r3, #2]
 8003b02:	e00e      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003b04:	4b6e      	ldr	r3, [pc, #440]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b06:	2205      	movs	r2, #5
 8003b08:	805a      	strh	r2, [r3, #2]
 8003b0a:	e00a      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003b0c:	4b6c      	ldr	r3, [pc, #432]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b0e:	2204      	movs	r2, #4
 8003b10:	805a      	strh	r2, [r3, #2]
 8003b12:	e006      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003b14:	4b6a      	ldr	r3, [pc, #424]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b16:	2202      	movs	r2, #2
 8003b18:	805a      	strh	r2, [r3, #2]
 8003b1a:	e002      	b.n	8003b22 <Principal_Receive_Config+0x17e>
 8003b1c:	4b68      	ldr	r3, [pc, #416]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	805a      	strh	r2, [r3, #2]
 8003b22:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perMsg[ANALOG_9_12]);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	3303      	adds	r3, #3
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	2b0a      	cmp	r3, #10
 8003b2e:	d847      	bhi.n	8003bc0 <Principal_Receive_Config+0x21c>
 8003b30:	a201      	add	r2, pc, #4	; (adr r2, 8003b38 <Principal_Receive_Config+0x194>)
 8003b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b36:	bf00      	nop
 8003b38:	08003b65 	.word	0x08003b65
 8003b3c:	08003b6f 	.word	0x08003b6f
 8003b40:	08003b79 	.word	0x08003b79
 8003b44:	08003b81 	.word	0x08003b81
 8003b48:	08003b89 	.word	0x08003b89
 8003b4c:	08003b91 	.word	0x08003b91
 8003b50:	08003b99 	.word	0x08003b99
 8003b54:	08003ba1 	.word	0x08003ba1
 8003b58:	08003ba9 	.word	0x08003ba9
 8003b5c:	08003bb1 	.word	0x08003bb1
 8003b60:	08003bb9 	.word	0x08003bb9
 8003b64:	4b56      	ldr	r3, [pc, #344]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b6a:	809a      	strh	r2, [r3, #4]
 8003b6c:	e02b      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003b6e:	4b54      	ldr	r3, [pc, #336]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b70:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003b74:	809a      	strh	r2, [r3, #4]
 8003b76:	e026      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003b78:	4b51      	ldr	r3, [pc, #324]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b7a:	22c8      	movs	r2, #200	; 0xc8
 8003b7c:	809a      	strh	r2, [r3, #4]
 8003b7e:	e022      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003b80:	4b4f      	ldr	r3, [pc, #316]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b82:	2264      	movs	r2, #100	; 0x64
 8003b84:	809a      	strh	r2, [r3, #4]
 8003b86:	e01e      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003b88:	4b4d      	ldr	r3, [pc, #308]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b8a:	2232      	movs	r2, #50	; 0x32
 8003b8c:	809a      	strh	r2, [r3, #4]
 8003b8e:	e01a      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003b90:	4b4b      	ldr	r3, [pc, #300]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b92:	2228      	movs	r2, #40	; 0x28
 8003b94:	809a      	strh	r2, [r3, #4]
 8003b96:	e016      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003b98:	4b49      	ldr	r3, [pc, #292]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003b9a:	2214      	movs	r2, #20
 8003b9c:	809a      	strh	r2, [r3, #4]
 8003b9e:	e012      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003ba0:	4b47      	ldr	r3, [pc, #284]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003ba2:	220a      	movs	r2, #10
 8003ba4:	809a      	strh	r2, [r3, #4]
 8003ba6:	e00e      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003ba8:	4b45      	ldr	r3, [pc, #276]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003baa:	2205      	movs	r2, #5
 8003bac:	809a      	strh	r2, [r3, #4]
 8003bae:	e00a      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003bb0:	4b43      	ldr	r3, [pc, #268]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	809a      	strh	r2, [r3, #4]
 8003bb6:	e006      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003bb8:	4b41      	ldr	r3, [pc, #260]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003bba:	2202      	movs	r2, #2
 8003bbc:	809a      	strh	r2, [r3, #4]
 8003bbe:	e002      	b.n	8003bc6 <Principal_Receive_Config+0x222>
 8003bc0:	4b3f      	ldr	r3, [pc, #252]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	809a      	strh	r2, [r3, #4]
 8003bc6:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perMsg[RTC_MSG]);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	3304      	adds	r3, #4
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	2b0a      	cmp	r3, #10
 8003bd2:	d847      	bhi.n	8003c64 <Principal_Receive_Config+0x2c0>
 8003bd4:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <Principal_Receive_Config+0x238>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003c09 	.word	0x08003c09
 8003be0:	08003c13 	.word	0x08003c13
 8003be4:	08003c1d 	.word	0x08003c1d
 8003be8:	08003c25 	.word	0x08003c25
 8003bec:	08003c2d 	.word	0x08003c2d
 8003bf0:	08003c35 	.word	0x08003c35
 8003bf4:	08003c3d 	.word	0x08003c3d
 8003bf8:	08003c45 	.word	0x08003c45
 8003bfc:	08003c4d 	.word	0x08003c4d
 8003c00:	08003c55 	.word	0x08003c55
 8003c04:	08003c5d 	.word	0x08003c5d
 8003c08:	4b2d      	ldr	r3, [pc, #180]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c0e:	80da      	strh	r2, [r3, #6]
 8003c10:	e02b      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c12:	4b2b      	ldr	r3, [pc, #172]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c14:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003c18:	80da      	strh	r2, [r3, #6]
 8003c1a:	e026      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c1c:	4b28      	ldr	r3, [pc, #160]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c1e:	22c8      	movs	r2, #200	; 0xc8
 8003c20:	80da      	strh	r2, [r3, #6]
 8003c22:	e022      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c24:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c26:	2264      	movs	r2, #100	; 0x64
 8003c28:	80da      	strh	r2, [r3, #6]
 8003c2a:	e01e      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c2c:	4b24      	ldr	r3, [pc, #144]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c2e:	2232      	movs	r2, #50	; 0x32
 8003c30:	80da      	strh	r2, [r3, #6]
 8003c32:	e01a      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c34:	4b22      	ldr	r3, [pc, #136]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c36:	2228      	movs	r2, #40	; 0x28
 8003c38:	80da      	strh	r2, [r3, #6]
 8003c3a:	e016      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c3c:	4b20      	ldr	r3, [pc, #128]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c3e:	2214      	movs	r2, #20
 8003c40:	80da      	strh	r2, [r3, #6]
 8003c42:	e012      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c44:	4b1e      	ldr	r3, [pc, #120]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c46:	220a      	movs	r2, #10
 8003c48:	80da      	strh	r2, [r3, #6]
 8003c4a:	e00e      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c4c:	4b1c      	ldr	r3, [pc, #112]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c4e:	2205      	movs	r2, #5
 8003c50:	80da      	strh	r2, [r3, #6]
 8003c52:	e00a      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c54:	4b1a      	ldr	r3, [pc, #104]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c56:	2204      	movs	r2, #4
 8003c58:	80da      	strh	r2, [r3, #6]
 8003c5a:	e006      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c5c:	4b18      	ldr	r3, [pc, #96]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c5e:	2202      	movs	r2, #2
 8003c60:	80da      	strh	r2, [r3, #6]
 8003c62:	e002      	b.n	8003c6a <Principal_Receive_Config+0x2c6>
 8003c64:	4b16      	ldr	r3, [pc, #88]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	80da      	strh	r2, [r3, #6]
 8003c6a:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perMsg[VERIFY_MSG]);
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	3305      	adds	r3, #5
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	2b0a      	cmp	r3, #10
 8003c76:	d849      	bhi.n	8003d0c <Principal_Receive_Config+0x368>
 8003c78:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <Principal_Receive_Config+0x2dc>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003cb7 	.word	0x08003cb7
 8003c88:	08003cc5 	.word	0x08003cc5
 8003c8c:	08003ccd 	.word	0x08003ccd
 8003c90:	08003cd5 	.word	0x08003cd5
 8003c94:	08003cdd 	.word	0x08003cdd
 8003c98:	08003ce5 	.word	0x08003ce5
 8003c9c:	08003ced 	.word	0x08003ced
 8003ca0:	08003cf5 	.word	0x08003cf5
 8003ca4:	08003cfd 	.word	0x08003cfd
 8003ca8:	08003d05 	.word	0x08003d05
 8003cac:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003cae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003cb2:	811a      	strh	r2, [r3, #8]
 8003cb4:	e02d      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003cb6:	4b02      	ldr	r3, [pc, #8]	; (8003cc0 <Principal_Receive_Config+0x31c>)
 8003cb8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003cbc:	811a      	strh	r2, [r3, #8]
 8003cbe:	e028      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003cc0:	20006714 	.word	0x20006714
 8003cc4:	4ba8      	ldr	r3, [pc, #672]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003cc6:	22c8      	movs	r2, #200	; 0xc8
 8003cc8:	811a      	strh	r2, [r3, #8]
 8003cca:	e022      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003ccc:	4ba6      	ldr	r3, [pc, #664]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003cce:	2264      	movs	r2, #100	; 0x64
 8003cd0:	811a      	strh	r2, [r3, #8]
 8003cd2:	e01e      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003cd4:	4ba4      	ldr	r3, [pc, #656]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003cd6:	2232      	movs	r2, #50	; 0x32
 8003cd8:	811a      	strh	r2, [r3, #8]
 8003cda:	e01a      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003cdc:	4ba2      	ldr	r3, [pc, #648]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003cde:	2228      	movs	r2, #40	; 0x28
 8003ce0:	811a      	strh	r2, [r3, #8]
 8003ce2:	e016      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003ce4:	4ba0      	ldr	r3, [pc, #640]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003ce6:	2214      	movs	r2, #20
 8003ce8:	811a      	strh	r2, [r3, #8]
 8003cea:	e012      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003cec:	4b9e      	ldr	r3, [pc, #632]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003cee:	220a      	movs	r2, #10
 8003cf0:	811a      	strh	r2, [r3, #8]
 8003cf2:	e00e      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003cf4:	4b9c      	ldr	r3, [pc, #624]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003cf6:	2205      	movs	r2, #5
 8003cf8:	811a      	strh	r2, [r3, #8]
 8003cfa:	e00a      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003cfc:	4b9a      	ldr	r3, [pc, #616]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003cfe:	2204      	movs	r2, #4
 8003d00:	811a      	strh	r2, [r3, #8]
 8003d02:	e006      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003d04:	4b98      	ldr	r3, [pc, #608]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d06:	2202      	movs	r2, #2
 8003d08:	811a      	strh	r2, [r3, #8]
 8003d0a:	e002      	b.n	8003d12 <Principal_Receive_Config+0x36e>
 8003d0c:	4b96      	ldr	r3, [pc, #600]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d0e:	2200      	movs	r2, #0
 8003d10:	811a      	strh	r2, [r3, #8]
 8003d12:	bf00      	nop
			__BUFFER_TO_FREQ(data[6], perMsg[ECU_SAVE]);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	3306      	adds	r3, #6
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	2b0a      	cmp	r3, #10
 8003d1e:	d847      	bhi.n	8003db0 <Principal_Receive_Config+0x40c>
 8003d20:	a201      	add	r2, pc, #4	; (adr r2, 8003d28 <Principal_Receive_Config+0x384>)
 8003d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d26:	bf00      	nop
 8003d28:	08003d55 	.word	0x08003d55
 8003d2c:	08003d5f 	.word	0x08003d5f
 8003d30:	08003d69 	.word	0x08003d69
 8003d34:	08003d71 	.word	0x08003d71
 8003d38:	08003d79 	.word	0x08003d79
 8003d3c:	08003d81 	.word	0x08003d81
 8003d40:	08003d89 	.word	0x08003d89
 8003d44:	08003d91 	.word	0x08003d91
 8003d48:	08003d99 	.word	0x08003d99
 8003d4c:	08003da1 	.word	0x08003da1
 8003d50:	08003da9 	.word	0x08003da9
 8003d54:	4b84      	ldr	r3, [pc, #528]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d5a:	819a      	strh	r2, [r3, #12]
 8003d5c:	e02b      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003d5e:	4b82      	ldr	r3, [pc, #520]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003d64:	819a      	strh	r2, [r3, #12]
 8003d66:	e026      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003d68:	4b7f      	ldr	r3, [pc, #508]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d6a:	22c8      	movs	r2, #200	; 0xc8
 8003d6c:	819a      	strh	r2, [r3, #12]
 8003d6e:	e022      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003d70:	4b7d      	ldr	r3, [pc, #500]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d72:	2264      	movs	r2, #100	; 0x64
 8003d74:	819a      	strh	r2, [r3, #12]
 8003d76:	e01e      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003d78:	4b7b      	ldr	r3, [pc, #492]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d7a:	2232      	movs	r2, #50	; 0x32
 8003d7c:	819a      	strh	r2, [r3, #12]
 8003d7e:	e01a      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003d80:	4b79      	ldr	r3, [pc, #484]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d82:	2228      	movs	r2, #40	; 0x28
 8003d84:	819a      	strh	r2, [r3, #12]
 8003d86:	e016      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003d88:	4b77      	ldr	r3, [pc, #476]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d8a:	2214      	movs	r2, #20
 8003d8c:	819a      	strh	r2, [r3, #12]
 8003d8e:	e012      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003d90:	4b75      	ldr	r3, [pc, #468]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d92:	220a      	movs	r2, #10
 8003d94:	819a      	strh	r2, [r3, #12]
 8003d96:	e00e      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003d98:	4b73      	ldr	r3, [pc, #460]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003d9a:	2205      	movs	r2, #5
 8003d9c:	819a      	strh	r2, [r3, #12]
 8003d9e:	e00a      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003da0:	4b71      	ldr	r3, [pc, #452]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003da2:	2204      	movs	r2, #4
 8003da4:	819a      	strh	r2, [r3, #12]
 8003da6:	e006      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003da8:	4b6f      	ldr	r3, [pc, #444]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003daa:	2202      	movs	r2, #2
 8003dac:	819a      	strh	r2, [r3, #12]
 8003dae:	e002      	b.n	8003db6 <Principal_Receive_Config+0x412>
 8003db0:	4b6d      	ldr	r3, [pc, #436]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	819a      	strh	r2, [r3, #12]
 8003db6:	bf00      	nop
			__BUFFER_TO_FREQ(data[7], perMsg[PDM_SAVE]);
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	3307      	adds	r3, #7
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	2b0a      	cmp	r3, #10
 8003dc2:	d847      	bhi.n	8003e54 <Principal_Receive_Config+0x4b0>
 8003dc4:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <Principal_Receive_Config+0x428>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003df9 	.word	0x08003df9
 8003dd0:	08003e03 	.word	0x08003e03
 8003dd4:	08003e0d 	.word	0x08003e0d
 8003dd8:	08003e15 	.word	0x08003e15
 8003ddc:	08003e1d 	.word	0x08003e1d
 8003de0:	08003e25 	.word	0x08003e25
 8003de4:	08003e2d 	.word	0x08003e2d
 8003de8:	08003e35 	.word	0x08003e35
 8003dec:	08003e3d 	.word	0x08003e3d
 8003df0:	08003e45 	.word	0x08003e45
 8003df4:	08003e4d 	.word	0x08003e4d
 8003df8:	4b5b      	ldr	r3, [pc, #364]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003dfa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003dfe:	81da      	strh	r2, [r3, #14]
 8003e00:	e02b      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e02:	4b59      	ldr	r3, [pc, #356]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e08:	81da      	strh	r2, [r3, #14]
 8003e0a:	e026      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e0c:	4b56      	ldr	r3, [pc, #344]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e0e:	22c8      	movs	r2, #200	; 0xc8
 8003e10:	81da      	strh	r2, [r3, #14]
 8003e12:	e022      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e14:	4b54      	ldr	r3, [pc, #336]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e16:	2264      	movs	r2, #100	; 0x64
 8003e18:	81da      	strh	r2, [r3, #14]
 8003e1a:	e01e      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e1c:	4b52      	ldr	r3, [pc, #328]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e1e:	2232      	movs	r2, #50	; 0x32
 8003e20:	81da      	strh	r2, [r3, #14]
 8003e22:	e01a      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e26:	2228      	movs	r2, #40	; 0x28
 8003e28:	81da      	strh	r2, [r3, #14]
 8003e2a:	e016      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e2c:	4b4e      	ldr	r3, [pc, #312]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e2e:	2214      	movs	r2, #20
 8003e30:	81da      	strh	r2, [r3, #14]
 8003e32:	e012      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e34:	4b4c      	ldr	r3, [pc, #304]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e36:	220a      	movs	r2, #10
 8003e38:	81da      	strh	r2, [r3, #14]
 8003e3a:	e00e      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e3c:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e3e:	2205      	movs	r2, #5
 8003e40:	81da      	strh	r2, [r3, #14]
 8003e42:	e00a      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e44:	4b48      	ldr	r3, [pc, #288]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e46:	2204      	movs	r2, #4
 8003e48:	81da      	strh	r2, [r3, #14]
 8003e4a:	e006      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e4c:	4b46      	ldr	r3, [pc, #280]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e4e:	2202      	movs	r2, #2
 8003e50:	81da      	strh	r2, [r3, #14]
 8003e52:	e002      	b.n	8003e5a <Principal_Receive_Config+0x4b6>
 8003e54:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <Principal_Receive_Config+0x5c4>)
 8003e56:	2200      	movs	r2, #0
 8003e58:	81da      	strh	r2, [r3, #14]
 8003e5a:	bf00      	nop

			retVal = Save_EEPROM(hi2c);
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 feb9 	bl	8004bd4 <Save_EEPROM>
 8003e62:	4603      	mov	r3, r0
 8003e64:	75fb      	strb	r3, [r7, #23]
			break;
 8003e66:	e231      	b.n	80042cc <Principal_Receive_Config+0x928>

		case 1:
			if(length != 7)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b07      	cmp	r3, #7
 8003e6c:	f040 8229 	bne.w	80042c2 <Principal_Receive_Config+0x91e>
				break;

			__BUFFER_TO_FREQ(data[1], perCAN[ANALOG_1_4]);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	3301      	adds	r3, #1
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	2b0a      	cmp	r3, #10
 8003e7a:	d847      	bhi.n	8003f0c <Principal_Receive_Config+0x568>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <Principal_Receive_Config+0x4e0>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003eb1 	.word	0x08003eb1
 8003e88:	08003ebb 	.word	0x08003ebb
 8003e8c:	08003ec5 	.word	0x08003ec5
 8003e90:	08003ecd 	.word	0x08003ecd
 8003e94:	08003ed5 	.word	0x08003ed5
 8003e98:	08003edd 	.word	0x08003edd
 8003e9c:	08003ee5 	.word	0x08003ee5
 8003ea0:	08003eed 	.word	0x08003eed
 8003ea4:	08003ef5 	.word	0x08003ef5
 8003ea8:	08003efd 	.word	0x08003efd
 8003eac:	08003f05 	.word	0x08003f05
 8003eb0:	4b2e      	ldr	r3, [pc, #184]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003eb2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003eb6:	801a      	strh	r2, [r3, #0]
 8003eb8:	e02b      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003eba:	4b2c      	ldr	r3, [pc, #176]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003ebc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003ec0:	801a      	strh	r2, [r3, #0]
 8003ec2:	e026      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003ec4:	4b29      	ldr	r3, [pc, #164]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003ec6:	22c8      	movs	r2, #200	; 0xc8
 8003ec8:	801a      	strh	r2, [r3, #0]
 8003eca:	e022      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003ecc:	4b27      	ldr	r3, [pc, #156]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003ece:	2264      	movs	r2, #100	; 0x64
 8003ed0:	801a      	strh	r2, [r3, #0]
 8003ed2:	e01e      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003ed4:	4b25      	ldr	r3, [pc, #148]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003ed6:	2232      	movs	r2, #50	; 0x32
 8003ed8:	801a      	strh	r2, [r3, #0]
 8003eda:	e01a      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003edc:	4b23      	ldr	r3, [pc, #140]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003ede:	2228      	movs	r2, #40	; 0x28
 8003ee0:	801a      	strh	r2, [r3, #0]
 8003ee2:	e016      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003ee4:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003ee6:	2214      	movs	r2, #20
 8003ee8:	801a      	strh	r2, [r3, #0]
 8003eea:	e012      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003eec:	4b1f      	ldr	r3, [pc, #124]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003eee:	220a      	movs	r2, #10
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	e00e      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003ef4:	4b1d      	ldr	r3, [pc, #116]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003ef6:	2205      	movs	r2, #5
 8003ef8:	801a      	strh	r2, [r3, #0]
 8003efa:	e00a      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003efc:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003efe:	2204      	movs	r2, #4
 8003f00:	801a      	strh	r2, [r3, #0]
 8003f02:	e006      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003f04:	4b19      	ldr	r3, [pc, #100]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003f06:	2202      	movs	r2, #2
 8003f08:	801a      	strh	r2, [r3, #0]
 8003f0a:	e002      	b.n	8003f12 <Principal_Receive_Config+0x56e>
 8003f0c:	4b17      	ldr	r3, [pc, #92]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	bf00      	nop
			__BUFFER_TO_FREQ(data[2], perCAN[ANALOG_5_8]);
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	3302      	adds	r3, #2
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	2b0a      	cmp	r3, #10
 8003f1e:	d84b      	bhi.n	8003fb8 <Principal_Receive_Config+0x614>
 8003f20:	a201      	add	r2, pc, #4	; (adr r2, 8003f28 <Principal_Receive_Config+0x584>)
 8003f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f26:	bf00      	nop
 8003f28:	08003f55 	.word	0x08003f55
 8003f2c:	08003f5f 	.word	0x08003f5f
 8003f30:	08003f71 	.word	0x08003f71
 8003f34:	08003f79 	.word	0x08003f79
 8003f38:	08003f81 	.word	0x08003f81
 8003f3c:	08003f89 	.word	0x08003f89
 8003f40:	08003f91 	.word	0x08003f91
 8003f44:	08003f99 	.word	0x08003f99
 8003f48:	08003fa1 	.word	0x08003fa1
 8003f4c:	08003fa9 	.word	0x08003fa9
 8003f50:	08003fb1 	.word	0x08003fb1
 8003f54:	4b05      	ldr	r3, [pc, #20]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f5a:	805a      	strh	r2, [r3, #2]
 8003f5c:	e02f      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003f5e:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <Principal_Receive_Config+0x5c8>)
 8003f60:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003f64:	805a      	strh	r2, [r3, #2]
 8003f66:	e02a      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003f68:	20006714 	.word	0x20006714
 8003f6c:	20006708 	.word	0x20006708
 8003f70:	4b93      	ldr	r3, [pc, #588]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8003f72:	22c8      	movs	r2, #200	; 0xc8
 8003f74:	805a      	strh	r2, [r3, #2]
 8003f76:	e022      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003f78:	4b91      	ldr	r3, [pc, #580]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8003f7a:	2264      	movs	r2, #100	; 0x64
 8003f7c:	805a      	strh	r2, [r3, #2]
 8003f7e:	e01e      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003f80:	4b8f      	ldr	r3, [pc, #572]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8003f82:	2232      	movs	r2, #50	; 0x32
 8003f84:	805a      	strh	r2, [r3, #2]
 8003f86:	e01a      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003f88:	4b8d      	ldr	r3, [pc, #564]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8003f8a:	2228      	movs	r2, #40	; 0x28
 8003f8c:	805a      	strh	r2, [r3, #2]
 8003f8e:	e016      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003f90:	4b8b      	ldr	r3, [pc, #556]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8003f92:	2214      	movs	r2, #20
 8003f94:	805a      	strh	r2, [r3, #2]
 8003f96:	e012      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003f98:	4b89      	ldr	r3, [pc, #548]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8003f9a:	220a      	movs	r2, #10
 8003f9c:	805a      	strh	r2, [r3, #2]
 8003f9e:	e00e      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003fa0:	4b87      	ldr	r3, [pc, #540]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8003fa2:	2205      	movs	r2, #5
 8003fa4:	805a      	strh	r2, [r3, #2]
 8003fa6:	e00a      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003fa8:	4b85      	ldr	r3, [pc, #532]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8003faa:	2204      	movs	r2, #4
 8003fac:	805a      	strh	r2, [r3, #2]
 8003fae:	e006      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003fb0:	4b83      	ldr	r3, [pc, #524]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	805a      	strh	r2, [r3, #2]
 8003fb6:	e002      	b.n	8003fbe <Principal_Receive_Config+0x61a>
 8003fb8:	4b81      	ldr	r3, [pc, #516]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	805a      	strh	r2, [r3, #2]
 8003fbe:	bf00      	nop
			__BUFFER_TO_FREQ(data[3], perCAN[ANALOG_9_12]);
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	3303      	adds	r3, #3
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	2b0a      	cmp	r3, #10
 8003fca:	d847      	bhi.n	800405c <Principal_Receive_Config+0x6b8>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <Principal_Receive_Config+0x630>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08004001 	.word	0x08004001
 8003fd8:	0800400b 	.word	0x0800400b
 8003fdc:	08004015 	.word	0x08004015
 8003fe0:	0800401d 	.word	0x0800401d
 8003fe4:	08004025 	.word	0x08004025
 8003fe8:	0800402d 	.word	0x0800402d
 8003fec:	08004035 	.word	0x08004035
 8003ff0:	0800403d 	.word	0x0800403d
 8003ff4:	08004045 	.word	0x08004045
 8003ff8:	0800404d 	.word	0x0800404d
 8003ffc:	08004055 	.word	0x08004055
 8004000:	4b6f      	ldr	r3, [pc, #444]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004002:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004006:	809a      	strh	r2, [r3, #4]
 8004008:	e02b      	b.n	8004062 <Principal_Receive_Config+0x6be>
 800400a:	4b6d      	ldr	r3, [pc, #436]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800400c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004010:	809a      	strh	r2, [r3, #4]
 8004012:	e026      	b.n	8004062 <Principal_Receive_Config+0x6be>
 8004014:	4b6a      	ldr	r3, [pc, #424]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004016:	22c8      	movs	r2, #200	; 0xc8
 8004018:	809a      	strh	r2, [r3, #4]
 800401a:	e022      	b.n	8004062 <Principal_Receive_Config+0x6be>
 800401c:	4b68      	ldr	r3, [pc, #416]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800401e:	2264      	movs	r2, #100	; 0x64
 8004020:	809a      	strh	r2, [r3, #4]
 8004022:	e01e      	b.n	8004062 <Principal_Receive_Config+0x6be>
 8004024:	4b66      	ldr	r3, [pc, #408]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004026:	2232      	movs	r2, #50	; 0x32
 8004028:	809a      	strh	r2, [r3, #4]
 800402a:	e01a      	b.n	8004062 <Principal_Receive_Config+0x6be>
 800402c:	4b64      	ldr	r3, [pc, #400]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800402e:	2228      	movs	r2, #40	; 0x28
 8004030:	809a      	strh	r2, [r3, #4]
 8004032:	e016      	b.n	8004062 <Principal_Receive_Config+0x6be>
 8004034:	4b62      	ldr	r3, [pc, #392]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004036:	2214      	movs	r2, #20
 8004038:	809a      	strh	r2, [r3, #4]
 800403a:	e012      	b.n	8004062 <Principal_Receive_Config+0x6be>
 800403c:	4b60      	ldr	r3, [pc, #384]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800403e:	220a      	movs	r2, #10
 8004040:	809a      	strh	r2, [r3, #4]
 8004042:	e00e      	b.n	8004062 <Principal_Receive_Config+0x6be>
 8004044:	4b5e      	ldr	r3, [pc, #376]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004046:	2205      	movs	r2, #5
 8004048:	809a      	strh	r2, [r3, #4]
 800404a:	e00a      	b.n	8004062 <Principal_Receive_Config+0x6be>
 800404c:	4b5c      	ldr	r3, [pc, #368]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800404e:	2204      	movs	r2, #4
 8004050:	809a      	strh	r2, [r3, #4]
 8004052:	e006      	b.n	8004062 <Principal_Receive_Config+0x6be>
 8004054:	4b5a      	ldr	r3, [pc, #360]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004056:	2202      	movs	r2, #2
 8004058:	809a      	strh	r2, [r3, #4]
 800405a:	e002      	b.n	8004062 <Principal_Receive_Config+0x6be>
 800405c:	4b58      	ldr	r3, [pc, #352]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800405e:	2200      	movs	r2, #0
 8004060:	809a      	strh	r2, [r3, #4]
 8004062:	bf00      	nop
			__BUFFER_TO_FREQ(data[4], perCAN[RTC_MSG]);
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	3304      	adds	r3, #4
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	3b01      	subs	r3, #1
 800406c:	2b0a      	cmp	r3, #10
 800406e:	d847      	bhi.n	8004100 <Principal_Receive_Config+0x75c>
 8004070:	a201      	add	r2, pc, #4	; (adr r2, 8004078 <Principal_Receive_Config+0x6d4>)
 8004072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004076:	bf00      	nop
 8004078:	080040a5 	.word	0x080040a5
 800407c:	080040af 	.word	0x080040af
 8004080:	080040b9 	.word	0x080040b9
 8004084:	080040c1 	.word	0x080040c1
 8004088:	080040c9 	.word	0x080040c9
 800408c:	080040d1 	.word	0x080040d1
 8004090:	080040d9 	.word	0x080040d9
 8004094:	080040e1 	.word	0x080040e1
 8004098:	080040e9 	.word	0x080040e9
 800409c:	080040f1 	.word	0x080040f1
 80040a0:	080040f9 	.word	0x080040f9
 80040a4:	4b46      	ldr	r3, [pc, #280]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040aa:	80da      	strh	r2, [r3, #6]
 80040ac:	e02b      	b.n	8004106 <Principal_Receive_Config+0x762>
 80040ae:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80040b4:	80da      	strh	r2, [r3, #6]
 80040b6:	e026      	b.n	8004106 <Principal_Receive_Config+0x762>
 80040b8:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040ba:	22c8      	movs	r2, #200	; 0xc8
 80040bc:	80da      	strh	r2, [r3, #6]
 80040be:	e022      	b.n	8004106 <Principal_Receive_Config+0x762>
 80040c0:	4b3f      	ldr	r3, [pc, #252]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040c2:	2264      	movs	r2, #100	; 0x64
 80040c4:	80da      	strh	r2, [r3, #6]
 80040c6:	e01e      	b.n	8004106 <Principal_Receive_Config+0x762>
 80040c8:	4b3d      	ldr	r3, [pc, #244]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040ca:	2232      	movs	r2, #50	; 0x32
 80040cc:	80da      	strh	r2, [r3, #6]
 80040ce:	e01a      	b.n	8004106 <Principal_Receive_Config+0x762>
 80040d0:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040d2:	2228      	movs	r2, #40	; 0x28
 80040d4:	80da      	strh	r2, [r3, #6]
 80040d6:	e016      	b.n	8004106 <Principal_Receive_Config+0x762>
 80040d8:	4b39      	ldr	r3, [pc, #228]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040da:	2214      	movs	r2, #20
 80040dc:	80da      	strh	r2, [r3, #6]
 80040de:	e012      	b.n	8004106 <Principal_Receive_Config+0x762>
 80040e0:	4b37      	ldr	r3, [pc, #220]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040e2:	220a      	movs	r2, #10
 80040e4:	80da      	strh	r2, [r3, #6]
 80040e6:	e00e      	b.n	8004106 <Principal_Receive_Config+0x762>
 80040e8:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040ea:	2205      	movs	r2, #5
 80040ec:	80da      	strh	r2, [r3, #6]
 80040ee:	e00a      	b.n	8004106 <Principal_Receive_Config+0x762>
 80040f0:	4b33      	ldr	r3, [pc, #204]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040f2:	2204      	movs	r2, #4
 80040f4:	80da      	strh	r2, [r3, #6]
 80040f6:	e006      	b.n	8004106 <Principal_Receive_Config+0x762>
 80040f8:	4b31      	ldr	r3, [pc, #196]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80040fa:	2202      	movs	r2, #2
 80040fc:	80da      	strh	r2, [r3, #6]
 80040fe:	e002      	b.n	8004106 <Principal_Receive_Config+0x762>
 8004100:	4b2f      	ldr	r3, [pc, #188]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004102:	2200      	movs	r2, #0
 8004104:	80da      	strh	r2, [r3, #6]
 8004106:	bf00      	nop
			__BUFFER_TO_FREQ(data[5], perCAN[VERIFY_MSG]);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	3305      	adds	r3, #5
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	3b01      	subs	r3, #1
 8004110:	2b0a      	cmp	r3, #10
 8004112:	d847      	bhi.n	80041a4 <Principal_Receive_Config+0x800>
 8004114:	a201      	add	r2, pc, #4	; (adr r2, 800411c <Principal_Receive_Config+0x778>)
 8004116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800411a:	bf00      	nop
 800411c:	08004149 	.word	0x08004149
 8004120:	08004153 	.word	0x08004153
 8004124:	0800415d 	.word	0x0800415d
 8004128:	08004165 	.word	0x08004165
 800412c:	0800416d 	.word	0x0800416d
 8004130:	08004175 	.word	0x08004175
 8004134:	0800417d 	.word	0x0800417d
 8004138:	08004185 	.word	0x08004185
 800413c:	0800418d 	.word	0x0800418d
 8004140:	08004195 	.word	0x08004195
 8004144:	0800419d 	.word	0x0800419d
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800414a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800414e:	811a      	strh	r2, [r3, #8]
 8004150:	e02b      	b.n	80041aa <Principal_Receive_Config+0x806>
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004154:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004158:	811a      	strh	r2, [r3, #8]
 800415a:	e026      	b.n	80041aa <Principal_Receive_Config+0x806>
 800415c:	4b18      	ldr	r3, [pc, #96]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800415e:	22c8      	movs	r2, #200	; 0xc8
 8004160:	811a      	strh	r2, [r3, #8]
 8004162:	e022      	b.n	80041aa <Principal_Receive_Config+0x806>
 8004164:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004166:	2264      	movs	r2, #100	; 0x64
 8004168:	811a      	strh	r2, [r3, #8]
 800416a:	e01e      	b.n	80041aa <Principal_Receive_Config+0x806>
 800416c:	4b14      	ldr	r3, [pc, #80]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800416e:	2232      	movs	r2, #50	; 0x32
 8004170:	811a      	strh	r2, [r3, #8]
 8004172:	e01a      	b.n	80041aa <Principal_Receive_Config+0x806>
 8004174:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004176:	2228      	movs	r2, #40	; 0x28
 8004178:	811a      	strh	r2, [r3, #8]
 800417a:	e016      	b.n	80041aa <Principal_Receive_Config+0x806>
 800417c:	4b10      	ldr	r3, [pc, #64]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800417e:	2214      	movs	r2, #20
 8004180:	811a      	strh	r2, [r3, #8]
 8004182:	e012      	b.n	80041aa <Principal_Receive_Config+0x806>
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004186:	220a      	movs	r2, #10
 8004188:	811a      	strh	r2, [r3, #8]
 800418a:	e00e      	b.n	80041aa <Principal_Receive_Config+0x806>
 800418c:	4b0c      	ldr	r3, [pc, #48]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800418e:	2205      	movs	r2, #5
 8004190:	811a      	strh	r2, [r3, #8]
 8004192:	e00a      	b.n	80041aa <Principal_Receive_Config+0x806>
 8004194:	4b0a      	ldr	r3, [pc, #40]	; (80041c0 <Principal_Receive_Config+0x81c>)
 8004196:	2204      	movs	r2, #4
 8004198:	811a      	strh	r2, [r3, #8]
 800419a:	e006      	b.n	80041aa <Principal_Receive_Config+0x806>
 800419c:	4b08      	ldr	r3, [pc, #32]	; (80041c0 <Principal_Receive_Config+0x81c>)
 800419e:	2202      	movs	r2, #2
 80041a0:	811a      	strh	r2, [r3, #8]
 80041a2:	e002      	b.n	80041aa <Principal_Receive_Config+0x806>
 80041a4:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <Principal_Receive_Config+0x81c>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	811a      	strh	r2, [r3, #8]
 80041aa:	bf00      	nop
			inputConfig = data[6];
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	799a      	ldrb	r2, [r3, #6]
 80041b0:	4b04      	ldr	r3, [pc, #16]	; (80041c4 <Principal_Receive_Config+0x820>)
 80041b2:	701a      	strb	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 fd0d 	bl	8004bd4 <Save_EEPROM>
 80041ba:	4603      	mov	r3, r0
 80041bc:	75fb      	strb	r3, [r7, #23]
			break;
 80041be:	e085      	b.n	80042cc <Principal_Receive_Config+0x928>
 80041c0:	20006708 	.word	0x20006708
 80041c4:	200066ec 	.word	0x200066ec

		case 2:
			if(length != 7)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b07      	cmp	r3, #7
 80041cc:	d17b      	bne.n	80042c6 <Principal_Receive_Config+0x922>
				break;

			thresholdBeacon  = data[1] << 8;
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	3301      	adds	r3, #1
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	021b      	lsls	r3, r3, #8
 80041d6:	b21a      	sxth	r2, r3
 80041d8:	4b3f      	ldr	r3, [pc, #252]	; (80042d8 <Principal_Receive_Config+0x934>)
 80041da:	801a      	strh	r2, [r3, #0]
			thresholdBeacon |= data[2] & 0xff;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	3302      	adds	r3, #2
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	b21a      	sxth	r2, r3
 80041e4:	4b3c      	ldr	r3, [pc, #240]	; (80042d8 <Principal_Receive_Config+0x934>)
 80041e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	b21a      	sxth	r2, r3
 80041ee:	4b3a      	ldr	r3, [pc, #232]	; (80042d8 <Principal_Receive_Config+0x934>)
 80041f0:	801a      	strh	r2, [r3, #0]
			thresholdRPM	 = data[3] << 8;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	3303      	adds	r3, #3
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	b21a      	sxth	r2, r3
 80041fc:	4b37      	ldr	r3, [pc, #220]	; (80042dc <Principal_Receive_Config+0x938>)
 80041fe:	801a      	strh	r2, [r3, #0]
			thresholdRPM	|= data[4] & 0xff;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	3304      	adds	r3, #4
 8004204:	781b      	ldrb	r3, [r3, #0]
 8004206:	b21a      	sxth	r2, r3
 8004208:	4b34      	ldr	r3, [pc, #208]	; (80042dc <Principal_Receive_Config+0x938>)
 800420a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800420e:	4313      	orrs	r3, r2
 8004210:	b21a      	sxth	r2, r3
 8004212:	4b32      	ldr	r3, [pc, #200]	; (80042dc <Principal_Receive_Config+0x938>)
 8004214:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	 = data[5] << 8;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	3305      	adds	r3, #5
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	b21a      	sxth	r2, r3
 8004220:	4b2f      	ldr	r3, [pc, #188]	; (80042e0 <Principal_Receive_Config+0x93c>)
 8004222:	801a      	strh	r2, [r3, #0]
			thresholdSpeed	|= data[6] & 0xff;
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	3306      	adds	r3, #6
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	b21a      	sxth	r2, r3
 800422c:	4b2c      	ldr	r3, [pc, #176]	; (80042e0 <Principal_Receive_Config+0x93c>)
 800422e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004232:	4313      	orrs	r3, r2
 8004234:	b21a      	sxth	r2, r3
 8004236:	4b2a      	ldr	r3, [pc, #168]	; (80042e0 <Principal_Receive_Config+0x93c>)
 8004238:	801a      	strh	r2, [r3, #0]

			retVal = Save_EEPROM(hi2c);
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 fcca 	bl	8004bd4 <Save_EEPROM>
 8004240:	4603      	mov	r3, r0
 8004242:	75fb      	strb	r3, [r7, #23]
			break;
 8004244:	e042      	b.n	80042cc <Principal_Receive_Config+0x928>

		case 3:
			if(length != 7)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b07      	cmp	r3, #7
 800424a:	d13e      	bne.n	80042ca <Principal_Receive_Config+0x926>
				break;

			rtcDate.Year	= data[1];
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	785a      	ldrb	r2, [r3, #1]
 8004250:	4b24      	ldr	r3, [pc, #144]	; (80042e4 <Principal_Receive_Config+0x940>)
 8004252:	70da      	strb	r2, [r3, #3]
			rtcDate.Month	= data[2];
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	789a      	ldrb	r2, [r3, #2]
 8004258:	4b22      	ldr	r3, [pc, #136]	; (80042e4 <Principal_Receive_Config+0x940>)
 800425a:	705a      	strb	r2, [r3, #1]
			rtcDate.Date	= data[3];
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	78da      	ldrb	r2, [r3, #3]
 8004260:	4b20      	ldr	r3, [pc, #128]	; (80042e4 <Principal_Receive_Config+0x940>)
 8004262:	709a      	strb	r2, [r3, #2]
			rtcTime.Hours	= data[4];
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	791a      	ldrb	r2, [r3, #4]
 8004268:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <Principal_Receive_Config+0x944>)
 800426a:	701a      	strb	r2, [r3, #0]
			rtcTime.Minutes = data[5];
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	795a      	ldrb	r2, [r3, #5]
 8004270:	4b1d      	ldr	r3, [pc, #116]	; (80042e8 <Principal_Receive_Config+0x944>)
 8004272:	705a      	strb	r2, [r3, #1]
			rtcTime.Seconds = data[6];
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	799a      	ldrb	r2, [r3, #6]
 8004278:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <Principal_Receive_Config+0x944>)
 800427a:	709a      	strb	r2, [r3, #2]

			if((HAL_RTC_SetDate(&hrtc, &rtcDate, RTC_FORMAT_BIN) == HAL_OK)
 800427c:	2200      	movs	r2, #0
 800427e:	4919      	ldr	r1, [pc, #100]	; (80042e4 <Principal_Receive_Config+0x940>)
 8004280:	481a      	ldr	r0, [pc, #104]	; (80042ec <Principal_Receive_Config+0x948>)
 8004282:	f008 fc6d 	bl	800cb60 <HAL_RTC_SetDate>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d113      	bne.n	80042b4 <Principal_Receive_Config+0x910>
				&& (HAL_RTC_SetTime(&hrtc, &rtcTime, RTC_FORMAT_BIN) == HAL_OK))
 800428c:	2200      	movs	r2, #0
 800428e:	4916      	ldr	r1, [pc, #88]	; (80042e8 <Principal_Receive_Config+0x944>)
 8004290:	4816      	ldr	r0, [pc, #88]	; (80042ec <Principal_Receive_Config+0x948>)
 8004292:	f008 fb6d 	bl	800c970 <HAL_RTC_SetTime>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d10b      	bne.n	80042b4 <Principal_Receive_Config+0x910>
			{
				HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_DR1, RTC_STORE_DATA);
 800429c:	f24e 325c 	movw	r2, #58204	; 0xe35c
 80042a0:	2101      	movs	r1, #1
 80042a2:	4812      	ldr	r0, [pc, #72]	; (80042ec <Principal_Receive_Config+0x948>)
 80042a4:	f008 fdec 	bl	800ce80 <HAL_RTCEx_BKUPWrite>
				flagRTC = RTC_OK;
 80042a8:	4b11      	ldr	r3, [pc, #68]	; (80042f0 <Principal_Receive_Config+0x94c>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
				retVal = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	75fb      	strb	r3, [r7, #23]
			}
			else
				retVal = HAL_ERROR;

			break;
 80042b2:	e00b      	b.n	80042cc <Principal_Receive_Config+0x928>
				retVal = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	75fb      	strb	r3, [r7, #23]
			break;
 80042b8:	e008      	b.n	80042cc <Principal_Receive_Config+0x928>

		default:
			break;
 80042ba:	bf00      	nop
 80042bc:	e006      	b.n	80042cc <Principal_Receive_Config+0x928>
				break;
 80042be:	bf00      	nop
 80042c0:	e004      	b.n	80042cc <Principal_Receive_Config+0x928>
				break;
 80042c2:	bf00      	nop
 80042c4:	e002      	b.n	80042cc <Principal_Receive_Config+0x928>
				break;
 80042c6:	bf00      	nop
 80042c8:	e000      	b.n	80042cc <Principal_Receive_Config+0x928>
				break;
 80042ca:	bf00      	nop
	}

	return retVal;
 80042cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	200065da 	.word	0x200065da
 80042dc:	200065dc 	.word	0x200065dc
 80042e0:	200065de 	.word	0x200065de
 80042e4:	200066f0 	.word	0x200066f0
 80042e8:	200066f4 	.word	0x200066f4
 80042ec:	20000380 	.word	0x20000380
 80042f0:	200066eb 	.word	0x200066eb

080042f4 <Principal_Hard_Code_Config>:

__weak void Principal_Hard_Code_Config(){
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
	perMsg[ANALOG_1_4] = MSG_FREQ_250HZ;
 80042f8:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <Principal_Hard_Code_Config+0x84>)
 80042fa:	2204      	movs	r2, #4
 80042fc:	801a      	strh	r2, [r3, #0]
	perMsg[ANALOG_5_8] = MSG_FREQ_500HZ;
 80042fe:	4b1e      	ldr	r3, [pc, #120]	; (8004378 <Principal_Hard_Code_Config+0x84>)
 8004300:	2202      	movs	r2, #2
 8004302:	805a      	strh	r2, [r3, #2]
	perMsg[ANALOG_9_12] = MSG_DISABLED;
 8004304:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <Principal_Hard_Code_Config+0x84>)
 8004306:	2200      	movs	r2, #0
 8004308:	809a      	strh	r2, [r3, #4]
	perMsg[RTC_MSG] = MSG_FREQ_2HZ;
 800430a:	4b1b      	ldr	r3, [pc, #108]	; (8004378 <Principal_Hard_Code_Config+0x84>)
 800430c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004310:	80da      	strh	r2, [r3, #6]
	perMsg[VERIFY_MSG] = MSG_FREQ_5HZ;
 8004312:	4b19      	ldr	r3, [pc, #100]	; (8004378 <Principal_Hard_Code_Config+0x84>)
 8004314:	22c8      	movs	r2, #200	; 0xc8
 8004316:	811a      	strh	r2, [r3, #8]
	perMsg[BEACON_MSG] = MSG_FREQ_10HZ;
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <Principal_Hard_Code_Config+0x84>)
 800431a:	2264      	movs	r2, #100	; 0x64
 800431c:	815a      	strh	r2, [r3, #10]
	perMsg[ECU_SAVE] = MSG_FREQ_100HZ;
 800431e:	4b16      	ldr	r3, [pc, #88]	; (8004378 <Principal_Hard_Code_Config+0x84>)
 8004320:	220a      	movs	r2, #10
 8004322:	819a      	strh	r2, [r3, #12]
	perMsg[PDM_SAVE] = MSG_FREQ_100HZ;
 8004324:	4b14      	ldr	r3, [pc, #80]	; (8004378 <Principal_Hard_Code_Config+0x84>)
 8004326:	220a      	movs	r2, #10
 8004328:	81da      	strh	r2, [r3, #14]

	perCAN[ANALOG_1_4] = MSG_FREQ_10HZ;
 800432a:	4b14      	ldr	r3, [pc, #80]	; (800437c <Principal_Hard_Code_Config+0x88>)
 800432c:	2264      	movs	r2, #100	; 0x64
 800432e:	801a      	strh	r2, [r3, #0]
	perCAN[ANALOG_5_8] = MSG_FREQ_10HZ;
 8004330:	4b12      	ldr	r3, [pc, #72]	; (800437c <Principal_Hard_Code_Config+0x88>)
 8004332:	2264      	movs	r2, #100	; 0x64
 8004334:	805a      	strh	r2, [r3, #2]
	perCAN[ANALOG_9_12] = MSG_DISABLED;
 8004336:	4b11      	ldr	r3, [pc, #68]	; (800437c <Principal_Hard_Code_Config+0x88>)
 8004338:	2200      	movs	r2, #0
 800433a:	809a      	strh	r2, [r3, #4]
	perCAN[RTC_MSG] = MSG_FREQ_2HZ;
 800433c:	4b0f      	ldr	r3, [pc, #60]	; (800437c <Principal_Hard_Code_Config+0x88>)
 800433e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004342:	80da      	strh	r2, [r3, #6]
	perCAN[VERIFY_MSG] = MSG_FREQ_5HZ;
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <Principal_Hard_Code_Config+0x88>)
 8004346:	22c8      	movs	r2, #200	; 0xc8
 8004348:	811a      	strh	r2, [r3, #8]
	perCAN[BEACON_MSG] = MSG_FREQ_5HZ;
 800434a:	4b0c      	ldr	r3, [pc, #48]	; (800437c <Principal_Hard_Code_Config+0x88>)
 800434c:	22c8      	movs	r2, #200	; 0xc8
 800434e:	815a      	strh	r2, [r3, #10]

	inputConfig = INPUT_BEACON_PIN_1 | INPUT_DATALOGGER_PIN_0 | INPUT_BEACON_FALLING_EDGE | INPUT_DATALOGGER_FALLING_EDGE;
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <Principal_Hard_Code_Config+0x8c>)
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]

	thresholdBeacon = 1000;
 8004356:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <Principal_Hard_Code_Config+0x90>)
 8004358:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800435c:	801a      	strh	r2, [r3, #0]
	thresholdRPM = 5000;
 800435e:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <Principal_Hard_Code_Config+0x94>)
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	801a      	strh	r2, [r3, #0]
	thresholdSpeed = 1;
 8004366:	4b09      	ldr	r3, [pc, #36]	; (800438c <Principal_Hard_Code_Config+0x98>)
 8004368:	2201      	movs	r2, #1
 800436a:	801a      	strh	r2, [r3, #0]

	Save_EEPROM(&hi2c1);
 800436c:	4808      	ldr	r0, [pc, #32]	; (8004390 <Principal_Hard_Code_Config+0x9c>)
 800436e:	f000 fc31 	bl	8004bd4 <Save_EEPROM>
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	20006714 	.word	0x20006714
 800437c:	20006708 	.word	0x20006708
 8004380:	200066ec 	.word	0x200066ec
 8004384:	200065da 	.word	0x200065da
 8004388:	200065dc 	.word	0x200065dc
 800438c:	200065de 	.word	0x200065de
 8004390:	2000032c 	.word	0x2000032c

08004394 <Load_EEPROM>:

static HAL_StatusTypeDef Load_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af02      	add	r7, sp, #8
 800439a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE_READ];
	HAL_StatusTypeDef retVal = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	77fb      	strb	r3, [r7, #31]

	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, 0x00, 1, EEPROM_TIMEOUT_WRITE);
 80043a0:	230a      	movs	r3, #10
 80043a2:	9300      	str	r3, [sp, #0]
 80043a4:	2301      	movs	r3, #1
 80043a6:	2200      	movs	r2, #0
 80043a8:	21a0      	movs	r1, #160	; 0xa0
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f004 ffd4 	bl	8009358 <HAL_I2C_Master_Transmit>

	retVal = HAL_I2C_Master_Receive(hi2c, EEPROM_ADDRESS_READ, buffer, EEPROM_BUFFER_SIZE_READ, EEPROM_TIMEOUT_READ);
 80043b0:	f107 020c 	add.w	r2, r7, #12
 80043b4:	2305      	movs	r3, #5
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	2313      	movs	r3, #19
 80043ba:	21a1      	movs	r1, #161	; 0xa1
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f005 f8c9 	bl	8009554 <HAL_I2C_Master_Receive>
 80043c2:	4603      	mov	r3, r0
 80043c4:	77fb      	strb	r3, [r7, #31]

	if(retVal != HAL_OK)
 80043c6:	7ffb      	ldrb	r3, [r7, #31]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <Load_EEPROM+0x3c>
		return retVal;
 80043cc:	7ffb      	ldrb	r3, [r7, #31]
 80043ce:	e3f3      	b.n	8004bb8 <Load_EEPROM+0x824>

	__BUFFER_TO_FREQ(buffer[0], perMsg[ANALOG_1_4]);
 80043d0:	7b3b      	ldrb	r3, [r7, #12]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	2b0a      	cmp	r3, #10
 80043d6:	d847      	bhi.n	8004468 <Load_EEPROM+0xd4>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <Load_EEPROM+0x4c>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	0800440d 	.word	0x0800440d
 80043e4:	08004417 	.word	0x08004417
 80043e8:	08004421 	.word	0x08004421
 80043ec:	08004429 	.word	0x08004429
 80043f0:	08004431 	.word	0x08004431
 80043f4:	08004439 	.word	0x08004439
 80043f8:	08004441 	.word	0x08004441
 80043fc:	08004449 	.word	0x08004449
 8004400:	08004451 	.word	0x08004451
 8004404:	08004459 	.word	0x08004459
 8004408:	08004461 	.word	0x08004461
 800440c:	4ba8      	ldr	r3, [pc, #672]	; (80046b0 <Load_EEPROM+0x31c>)
 800440e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004412:	801a      	strh	r2, [r3, #0]
 8004414:	e02b      	b.n	800446e <Load_EEPROM+0xda>
 8004416:	4ba6      	ldr	r3, [pc, #664]	; (80046b0 <Load_EEPROM+0x31c>)
 8004418:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800441c:	801a      	strh	r2, [r3, #0]
 800441e:	e026      	b.n	800446e <Load_EEPROM+0xda>
 8004420:	4ba3      	ldr	r3, [pc, #652]	; (80046b0 <Load_EEPROM+0x31c>)
 8004422:	22c8      	movs	r2, #200	; 0xc8
 8004424:	801a      	strh	r2, [r3, #0]
 8004426:	e022      	b.n	800446e <Load_EEPROM+0xda>
 8004428:	4ba1      	ldr	r3, [pc, #644]	; (80046b0 <Load_EEPROM+0x31c>)
 800442a:	2264      	movs	r2, #100	; 0x64
 800442c:	801a      	strh	r2, [r3, #0]
 800442e:	e01e      	b.n	800446e <Load_EEPROM+0xda>
 8004430:	4b9f      	ldr	r3, [pc, #636]	; (80046b0 <Load_EEPROM+0x31c>)
 8004432:	2232      	movs	r2, #50	; 0x32
 8004434:	801a      	strh	r2, [r3, #0]
 8004436:	e01a      	b.n	800446e <Load_EEPROM+0xda>
 8004438:	4b9d      	ldr	r3, [pc, #628]	; (80046b0 <Load_EEPROM+0x31c>)
 800443a:	2228      	movs	r2, #40	; 0x28
 800443c:	801a      	strh	r2, [r3, #0]
 800443e:	e016      	b.n	800446e <Load_EEPROM+0xda>
 8004440:	4b9b      	ldr	r3, [pc, #620]	; (80046b0 <Load_EEPROM+0x31c>)
 8004442:	2214      	movs	r2, #20
 8004444:	801a      	strh	r2, [r3, #0]
 8004446:	e012      	b.n	800446e <Load_EEPROM+0xda>
 8004448:	4b99      	ldr	r3, [pc, #612]	; (80046b0 <Load_EEPROM+0x31c>)
 800444a:	220a      	movs	r2, #10
 800444c:	801a      	strh	r2, [r3, #0]
 800444e:	e00e      	b.n	800446e <Load_EEPROM+0xda>
 8004450:	4b97      	ldr	r3, [pc, #604]	; (80046b0 <Load_EEPROM+0x31c>)
 8004452:	2205      	movs	r2, #5
 8004454:	801a      	strh	r2, [r3, #0]
 8004456:	e00a      	b.n	800446e <Load_EEPROM+0xda>
 8004458:	4b95      	ldr	r3, [pc, #596]	; (80046b0 <Load_EEPROM+0x31c>)
 800445a:	2204      	movs	r2, #4
 800445c:	801a      	strh	r2, [r3, #0]
 800445e:	e006      	b.n	800446e <Load_EEPROM+0xda>
 8004460:	4b93      	ldr	r3, [pc, #588]	; (80046b0 <Load_EEPROM+0x31c>)
 8004462:	2202      	movs	r2, #2
 8004464:	801a      	strh	r2, [r3, #0]
 8004466:	e002      	b.n	800446e <Load_EEPROM+0xda>
 8004468:	4b91      	ldr	r3, [pc, #580]	; (80046b0 <Load_EEPROM+0x31c>)
 800446a:	2200      	movs	r2, #0
 800446c:	801a      	strh	r2, [r3, #0]
 800446e:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[1], perMsg[ANALOG_5_8]);
 8004470:	7b7b      	ldrb	r3, [r7, #13]
 8004472:	3b01      	subs	r3, #1
 8004474:	2b0a      	cmp	r3, #10
 8004476:	d847      	bhi.n	8004508 <Load_EEPROM+0x174>
 8004478:	a201      	add	r2, pc, #4	; (adr r2, 8004480 <Load_EEPROM+0xec>)
 800447a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447e:	bf00      	nop
 8004480:	080044ad 	.word	0x080044ad
 8004484:	080044b7 	.word	0x080044b7
 8004488:	080044c1 	.word	0x080044c1
 800448c:	080044c9 	.word	0x080044c9
 8004490:	080044d1 	.word	0x080044d1
 8004494:	080044d9 	.word	0x080044d9
 8004498:	080044e1 	.word	0x080044e1
 800449c:	080044e9 	.word	0x080044e9
 80044a0:	080044f1 	.word	0x080044f1
 80044a4:	080044f9 	.word	0x080044f9
 80044a8:	08004501 	.word	0x08004501
 80044ac:	4b80      	ldr	r3, [pc, #512]	; (80046b0 <Load_EEPROM+0x31c>)
 80044ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80044b2:	805a      	strh	r2, [r3, #2]
 80044b4:	e02b      	b.n	800450e <Load_EEPROM+0x17a>
 80044b6:	4b7e      	ldr	r3, [pc, #504]	; (80046b0 <Load_EEPROM+0x31c>)
 80044b8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044bc:	805a      	strh	r2, [r3, #2]
 80044be:	e026      	b.n	800450e <Load_EEPROM+0x17a>
 80044c0:	4b7b      	ldr	r3, [pc, #492]	; (80046b0 <Load_EEPROM+0x31c>)
 80044c2:	22c8      	movs	r2, #200	; 0xc8
 80044c4:	805a      	strh	r2, [r3, #2]
 80044c6:	e022      	b.n	800450e <Load_EEPROM+0x17a>
 80044c8:	4b79      	ldr	r3, [pc, #484]	; (80046b0 <Load_EEPROM+0x31c>)
 80044ca:	2264      	movs	r2, #100	; 0x64
 80044cc:	805a      	strh	r2, [r3, #2]
 80044ce:	e01e      	b.n	800450e <Load_EEPROM+0x17a>
 80044d0:	4b77      	ldr	r3, [pc, #476]	; (80046b0 <Load_EEPROM+0x31c>)
 80044d2:	2232      	movs	r2, #50	; 0x32
 80044d4:	805a      	strh	r2, [r3, #2]
 80044d6:	e01a      	b.n	800450e <Load_EEPROM+0x17a>
 80044d8:	4b75      	ldr	r3, [pc, #468]	; (80046b0 <Load_EEPROM+0x31c>)
 80044da:	2228      	movs	r2, #40	; 0x28
 80044dc:	805a      	strh	r2, [r3, #2]
 80044de:	e016      	b.n	800450e <Load_EEPROM+0x17a>
 80044e0:	4b73      	ldr	r3, [pc, #460]	; (80046b0 <Load_EEPROM+0x31c>)
 80044e2:	2214      	movs	r2, #20
 80044e4:	805a      	strh	r2, [r3, #2]
 80044e6:	e012      	b.n	800450e <Load_EEPROM+0x17a>
 80044e8:	4b71      	ldr	r3, [pc, #452]	; (80046b0 <Load_EEPROM+0x31c>)
 80044ea:	220a      	movs	r2, #10
 80044ec:	805a      	strh	r2, [r3, #2]
 80044ee:	e00e      	b.n	800450e <Load_EEPROM+0x17a>
 80044f0:	4b6f      	ldr	r3, [pc, #444]	; (80046b0 <Load_EEPROM+0x31c>)
 80044f2:	2205      	movs	r2, #5
 80044f4:	805a      	strh	r2, [r3, #2]
 80044f6:	e00a      	b.n	800450e <Load_EEPROM+0x17a>
 80044f8:	4b6d      	ldr	r3, [pc, #436]	; (80046b0 <Load_EEPROM+0x31c>)
 80044fa:	2204      	movs	r2, #4
 80044fc:	805a      	strh	r2, [r3, #2]
 80044fe:	e006      	b.n	800450e <Load_EEPROM+0x17a>
 8004500:	4b6b      	ldr	r3, [pc, #428]	; (80046b0 <Load_EEPROM+0x31c>)
 8004502:	2202      	movs	r2, #2
 8004504:	805a      	strh	r2, [r3, #2]
 8004506:	e002      	b.n	800450e <Load_EEPROM+0x17a>
 8004508:	4b69      	ldr	r3, [pc, #420]	; (80046b0 <Load_EEPROM+0x31c>)
 800450a:	2200      	movs	r2, #0
 800450c:	805a      	strh	r2, [r3, #2]
 800450e:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[2], perMsg[ANALOG_9_12]);
 8004510:	7bbb      	ldrb	r3, [r7, #14]
 8004512:	3b01      	subs	r3, #1
 8004514:	2b0a      	cmp	r3, #10
 8004516:	d847      	bhi.n	80045a8 <Load_EEPROM+0x214>
 8004518:	a201      	add	r2, pc, #4	; (adr r2, 8004520 <Load_EEPROM+0x18c>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	0800454d 	.word	0x0800454d
 8004524:	08004557 	.word	0x08004557
 8004528:	08004561 	.word	0x08004561
 800452c:	08004569 	.word	0x08004569
 8004530:	08004571 	.word	0x08004571
 8004534:	08004579 	.word	0x08004579
 8004538:	08004581 	.word	0x08004581
 800453c:	08004589 	.word	0x08004589
 8004540:	08004591 	.word	0x08004591
 8004544:	08004599 	.word	0x08004599
 8004548:	080045a1 	.word	0x080045a1
 800454c:	4b58      	ldr	r3, [pc, #352]	; (80046b0 <Load_EEPROM+0x31c>)
 800454e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004552:	809a      	strh	r2, [r3, #4]
 8004554:	e02b      	b.n	80045ae <Load_EEPROM+0x21a>
 8004556:	4b56      	ldr	r3, [pc, #344]	; (80046b0 <Load_EEPROM+0x31c>)
 8004558:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800455c:	809a      	strh	r2, [r3, #4]
 800455e:	e026      	b.n	80045ae <Load_EEPROM+0x21a>
 8004560:	4b53      	ldr	r3, [pc, #332]	; (80046b0 <Load_EEPROM+0x31c>)
 8004562:	22c8      	movs	r2, #200	; 0xc8
 8004564:	809a      	strh	r2, [r3, #4]
 8004566:	e022      	b.n	80045ae <Load_EEPROM+0x21a>
 8004568:	4b51      	ldr	r3, [pc, #324]	; (80046b0 <Load_EEPROM+0x31c>)
 800456a:	2264      	movs	r2, #100	; 0x64
 800456c:	809a      	strh	r2, [r3, #4]
 800456e:	e01e      	b.n	80045ae <Load_EEPROM+0x21a>
 8004570:	4b4f      	ldr	r3, [pc, #316]	; (80046b0 <Load_EEPROM+0x31c>)
 8004572:	2232      	movs	r2, #50	; 0x32
 8004574:	809a      	strh	r2, [r3, #4]
 8004576:	e01a      	b.n	80045ae <Load_EEPROM+0x21a>
 8004578:	4b4d      	ldr	r3, [pc, #308]	; (80046b0 <Load_EEPROM+0x31c>)
 800457a:	2228      	movs	r2, #40	; 0x28
 800457c:	809a      	strh	r2, [r3, #4]
 800457e:	e016      	b.n	80045ae <Load_EEPROM+0x21a>
 8004580:	4b4b      	ldr	r3, [pc, #300]	; (80046b0 <Load_EEPROM+0x31c>)
 8004582:	2214      	movs	r2, #20
 8004584:	809a      	strh	r2, [r3, #4]
 8004586:	e012      	b.n	80045ae <Load_EEPROM+0x21a>
 8004588:	4b49      	ldr	r3, [pc, #292]	; (80046b0 <Load_EEPROM+0x31c>)
 800458a:	220a      	movs	r2, #10
 800458c:	809a      	strh	r2, [r3, #4]
 800458e:	e00e      	b.n	80045ae <Load_EEPROM+0x21a>
 8004590:	4b47      	ldr	r3, [pc, #284]	; (80046b0 <Load_EEPROM+0x31c>)
 8004592:	2205      	movs	r2, #5
 8004594:	809a      	strh	r2, [r3, #4]
 8004596:	e00a      	b.n	80045ae <Load_EEPROM+0x21a>
 8004598:	4b45      	ldr	r3, [pc, #276]	; (80046b0 <Load_EEPROM+0x31c>)
 800459a:	2204      	movs	r2, #4
 800459c:	809a      	strh	r2, [r3, #4]
 800459e:	e006      	b.n	80045ae <Load_EEPROM+0x21a>
 80045a0:	4b43      	ldr	r3, [pc, #268]	; (80046b0 <Load_EEPROM+0x31c>)
 80045a2:	2202      	movs	r2, #2
 80045a4:	809a      	strh	r2, [r3, #4]
 80045a6:	e002      	b.n	80045ae <Load_EEPROM+0x21a>
 80045a8:	4b41      	ldr	r3, [pc, #260]	; (80046b0 <Load_EEPROM+0x31c>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	809a      	strh	r2, [r3, #4]
 80045ae:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[3], perMsg[RTC_MSG]);
 80045b0:	7bfb      	ldrb	r3, [r7, #15]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	2b0a      	cmp	r3, #10
 80045b6:	d847      	bhi.n	8004648 <Load_EEPROM+0x2b4>
 80045b8:	a201      	add	r2, pc, #4	; (adr r2, 80045c0 <Load_EEPROM+0x22c>)
 80045ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045be:	bf00      	nop
 80045c0:	080045ed 	.word	0x080045ed
 80045c4:	080045f7 	.word	0x080045f7
 80045c8:	08004601 	.word	0x08004601
 80045cc:	08004609 	.word	0x08004609
 80045d0:	08004611 	.word	0x08004611
 80045d4:	08004619 	.word	0x08004619
 80045d8:	08004621 	.word	0x08004621
 80045dc:	08004629 	.word	0x08004629
 80045e0:	08004631 	.word	0x08004631
 80045e4:	08004639 	.word	0x08004639
 80045e8:	08004641 	.word	0x08004641
 80045ec:	4b30      	ldr	r3, [pc, #192]	; (80046b0 <Load_EEPROM+0x31c>)
 80045ee:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80045f2:	80da      	strh	r2, [r3, #6]
 80045f4:	e02b      	b.n	800464e <Load_EEPROM+0x2ba>
 80045f6:	4b2e      	ldr	r3, [pc, #184]	; (80046b0 <Load_EEPROM+0x31c>)
 80045f8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80045fc:	80da      	strh	r2, [r3, #6]
 80045fe:	e026      	b.n	800464e <Load_EEPROM+0x2ba>
 8004600:	4b2b      	ldr	r3, [pc, #172]	; (80046b0 <Load_EEPROM+0x31c>)
 8004602:	22c8      	movs	r2, #200	; 0xc8
 8004604:	80da      	strh	r2, [r3, #6]
 8004606:	e022      	b.n	800464e <Load_EEPROM+0x2ba>
 8004608:	4b29      	ldr	r3, [pc, #164]	; (80046b0 <Load_EEPROM+0x31c>)
 800460a:	2264      	movs	r2, #100	; 0x64
 800460c:	80da      	strh	r2, [r3, #6]
 800460e:	e01e      	b.n	800464e <Load_EEPROM+0x2ba>
 8004610:	4b27      	ldr	r3, [pc, #156]	; (80046b0 <Load_EEPROM+0x31c>)
 8004612:	2232      	movs	r2, #50	; 0x32
 8004614:	80da      	strh	r2, [r3, #6]
 8004616:	e01a      	b.n	800464e <Load_EEPROM+0x2ba>
 8004618:	4b25      	ldr	r3, [pc, #148]	; (80046b0 <Load_EEPROM+0x31c>)
 800461a:	2228      	movs	r2, #40	; 0x28
 800461c:	80da      	strh	r2, [r3, #6]
 800461e:	e016      	b.n	800464e <Load_EEPROM+0x2ba>
 8004620:	4b23      	ldr	r3, [pc, #140]	; (80046b0 <Load_EEPROM+0x31c>)
 8004622:	2214      	movs	r2, #20
 8004624:	80da      	strh	r2, [r3, #6]
 8004626:	e012      	b.n	800464e <Load_EEPROM+0x2ba>
 8004628:	4b21      	ldr	r3, [pc, #132]	; (80046b0 <Load_EEPROM+0x31c>)
 800462a:	220a      	movs	r2, #10
 800462c:	80da      	strh	r2, [r3, #6]
 800462e:	e00e      	b.n	800464e <Load_EEPROM+0x2ba>
 8004630:	4b1f      	ldr	r3, [pc, #124]	; (80046b0 <Load_EEPROM+0x31c>)
 8004632:	2205      	movs	r2, #5
 8004634:	80da      	strh	r2, [r3, #6]
 8004636:	e00a      	b.n	800464e <Load_EEPROM+0x2ba>
 8004638:	4b1d      	ldr	r3, [pc, #116]	; (80046b0 <Load_EEPROM+0x31c>)
 800463a:	2204      	movs	r2, #4
 800463c:	80da      	strh	r2, [r3, #6]
 800463e:	e006      	b.n	800464e <Load_EEPROM+0x2ba>
 8004640:	4b1b      	ldr	r3, [pc, #108]	; (80046b0 <Load_EEPROM+0x31c>)
 8004642:	2202      	movs	r2, #2
 8004644:	80da      	strh	r2, [r3, #6]
 8004646:	e002      	b.n	800464e <Load_EEPROM+0x2ba>
 8004648:	4b19      	ldr	r3, [pc, #100]	; (80046b0 <Load_EEPROM+0x31c>)
 800464a:	2200      	movs	r2, #0
 800464c:	80da      	strh	r2, [r3, #6]
 800464e:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[4], perMsg[VERIFY_MSG]);
 8004650:	7c3b      	ldrb	r3, [r7, #16]
 8004652:	3b01      	subs	r3, #1
 8004654:	2b0a      	cmp	r3, #10
 8004656:	d849      	bhi.n	80046ec <Load_EEPROM+0x358>
 8004658:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <Load_EEPROM+0x2cc>)
 800465a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800465e:	bf00      	nop
 8004660:	0800468d 	.word	0x0800468d
 8004664:	08004697 	.word	0x08004697
 8004668:	080046a1 	.word	0x080046a1
 800466c:	080046a9 	.word	0x080046a9
 8004670:	080046b5 	.word	0x080046b5
 8004674:	080046bd 	.word	0x080046bd
 8004678:	080046c5 	.word	0x080046c5
 800467c:	080046cd 	.word	0x080046cd
 8004680:	080046d5 	.word	0x080046d5
 8004684:	080046dd 	.word	0x080046dd
 8004688:	080046e5 	.word	0x080046e5
 800468c:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <Load_EEPROM+0x31c>)
 800468e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004692:	811a      	strh	r2, [r3, #8]
 8004694:	e02d      	b.n	80046f2 <Load_EEPROM+0x35e>
 8004696:	4b06      	ldr	r3, [pc, #24]	; (80046b0 <Load_EEPROM+0x31c>)
 8004698:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800469c:	811a      	strh	r2, [r3, #8]
 800469e:	e028      	b.n	80046f2 <Load_EEPROM+0x35e>
 80046a0:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <Load_EEPROM+0x31c>)
 80046a2:	22c8      	movs	r2, #200	; 0xc8
 80046a4:	811a      	strh	r2, [r3, #8]
 80046a6:	e024      	b.n	80046f2 <Load_EEPROM+0x35e>
 80046a8:	4b01      	ldr	r3, [pc, #4]	; (80046b0 <Load_EEPROM+0x31c>)
 80046aa:	2264      	movs	r2, #100	; 0x64
 80046ac:	811a      	strh	r2, [r3, #8]
 80046ae:	e020      	b.n	80046f2 <Load_EEPROM+0x35e>
 80046b0:	20006714 	.word	0x20006714
 80046b4:	4ba7      	ldr	r3, [pc, #668]	; (8004954 <Load_EEPROM+0x5c0>)
 80046b6:	2232      	movs	r2, #50	; 0x32
 80046b8:	811a      	strh	r2, [r3, #8]
 80046ba:	e01a      	b.n	80046f2 <Load_EEPROM+0x35e>
 80046bc:	4ba5      	ldr	r3, [pc, #660]	; (8004954 <Load_EEPROM+0x5c0>)
 80046be:	2228      	movs	r2, #40	; 0x28
 80046c0:	811a      	strh	r2, [r3, #8]
 80046c2:	e016      	b.n	80046f2 <Load_EEPROM+0x35e>
 80046c4:	4ba3      	ldr	r3, [pc, #652]	; (8004954 <Load_EEPROM+0x5c0>)
 80046c6:	2214      	movs	r2, #20
 80046c8:	811a      	strh	r2, [r3, #8]
 80046ca:	e012      	b.n	80046f2 <Load_EEPROM+0x35e>
 80046cc:	4ba1      	ldr	r3, [pc, #644]	; (8004954 <Load_EEPROM+0x5c0>)
 80046ce:	220a      	movs	r2, #10
 80046d0:	811a      	strh	r2, [r3, #8]
 80046d2:	e00e      	b.n	80046f2 <Load_EEPROM+0x35e>
 80046d4:	4b9f      	ldr	r3, [pc, #636]	; (8004954 <Load_EEPROM+0x5c0>)
 80046d6:	2205      	movs	r2, #5
 80046d8:	811a      	strh	r2, [r3, #8]
 80046da:	e00a      	b.n	80046f2 <Load_EEPROM+0x35e>
 80046dc:	4b9d      	ldr	r3, [pc, #628]	; (8004954 <Load_EEPROM+0x5c0>)
 80046de:	2204      	movs	r2, #4
 80046e0:	811a      	strh	r2, [r3, #8]
 80046e2:	e006      	b.n	80046f2 <Load_EEPROM+0x35e>
 80046e4:	4b9b      	ldr	r3, [pc, #620]	; (8004954 <Load_EEPROM+0x5c0>)
 80046e6:	2202      	movs	r2, #2
 80046e8:	811a      	strh	r2, [r3, #8]
 80046ea:	e002      	b.n	80046f2 <Load_EEPROM+0x35e>
 80046ec:	4b99      	ldr	r3, [pc, #612]	; (8004954 <Load_EEPROM+0x5c0>)
 80046ee:	2200      	movs	r2, #0
 80046f0:	811a      	strh	r2, [r3, #8]
 80046f2:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[5], perMsg[ECU_SAVE]);
 80046f4:	7c7b      	ldrb	r3, [r7, #17]
 80046f6:	3b01      	subs	r3, #1
 80046f8:	2b0a      	cmp	r3, #10
 80046fa:	d847      	bhi.n	800478c <Load_EEPROM+0x3f8>
 80046fc:	a201      	add	r2, pc, #4	; (adr r2, 8004704 <Load_EEPROM+0x370>)
 80046fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004702:	bf00      	nop
 8004704:	08004731 	.word	0x08004731
 8004708:	0800473b 	.word	0x0800473b
 800470c:	08004745 	.word	0x08004745
 8004710:	0800474d 	.word	0x0800474d
 8004714:	08004755 	.word	0x08004755
 8004718:	0800475d 	.word	0x0800475d
 800471c:	08004765 	.word	0x08004765
 8004720:	0800476d 	.word	0x0800476d
 8004724:	08004775 	.word	0x08004775
 8004728:	0800477d 	.word	0x0800477d
 800472c:	08004785 	.word	0x08004785
 8004730:	4b88      	ldr	r3, [pc, #544]	; (8004954 <Load_EEPROM+0x5c0>)
 8004732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004736:	819a      	strh	r2, [r3, #12]
 8004738:	e02b      	b.n	8004792 <Load_EEPROM+0x3fe>
 800473a:	4b86      	ldr	r3, [pc, #536]	; (8004954 <Load_EEPROM+0x5c0>)
 800473c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004740:	819a      	strh	r2, [r3, #12]
 8004742:	e026      	b.n	8004792 <Load_EEPROM+0x3fe>
 8004744:	4b83      	ldr	r3, [pc, #524]	; (8004954 <Load_EEPROM+0x5c0>)
 8004746:	22c8      	movs	r2, #200	; 0xc8
 8004748:	819a      	strh	r2, [r3, #12]
 800474a:	e022      	b.n	8004792 <Load_EEPROM+0x3fe>
 800474c:	4b81      	ldr	r3, [pc, #516]	; (8004954 <Load_EEPROM+0x5c0>)
 800474e:	2264      	movs	r2, #100	; 0x64
 8004750:	819a      	strh	r2, [r3, #12]
 8004752:	e01e      	b.n	8004792 <Load_EEPROM+0x3fe>
 8004754:	4b7f      	ldr	r3, [pc, #508]	; (8004954 <Load_EEPROM+0x5c0>)
 8004756:	2232      	movs	r2, #50	; 0x32
 8004758:	819a      	strh	r2, [r3, #12]
 800475a:	e01a      	b.n	8004792 <Load_EEPROM+0x3fe>
 800475c:	4b7d      	ldr	r3, [pc, #500]	; (8004954 <Load_EEPROM+0x5c0>)
 800475e:	2228      	movs	r2, #40	; 0x28
 8004760:	819a      	strh	r2, [r3, #12]
 8004762:	e016      	b.n	8004792 <Load_EEPROM+0x3fe>
 8004764:	4b7b      	ldr	r3, [pc, #492]	; (8004954 <Load_EEPROM+0x5c0>)
 8004766:	2214      	movs	r2, #20
 8004768:	819a      	strh	r2, [r3, #12]
 800476a:	e012      	b.n	8004792 <Load_EEPROM+0x3fe>
 800476c:	4b79      	ldr	r3, [pc, #484]	; (8004954 <Load_EEPROM+0x5c0>)
 800476e:	220a      	movs	r2, #10
 8004770:	819a      	strh	r2, [r3, #12]
 8004772:	e00e      	b.n	8004792 <Load_EEPROM+0x3fe>
 8004774:	4b77      	ldr	r3, [pc, #476]	; (8004954 <Load_EEPROM+0x5c0>)
 8004776:	2205      	movs	r2, #5
 8004778:	819a      	strh	r2, [r3, #12]
 800477a:	e00a      	b.n	8004792 <Load_EEPROM+0x3fe>
 800477c:	4b75      	ldr	r3, [pc, #468]	; (8004954 <Load_EEPROM+0x5c0>)
 800477e:	2204      	movs	r2, #4
 8004780:	819a      	strh	r2, [r3, #12]
 8004782:	e006      	b.n	8004792 <Load_EEPROM+0x3fe>
 8004784:	4b73      	ldr	r3, [pc, #460]	; (8004954 <Load_EEPROM+0x5c0>)
 8004786:	2202      	movs	r2, #2
 8004788:	819a      	strh	r2, [r3, #12]
 800478a:	e002      	b.n	8004792 <Load_EEPROM+0x3fe>
 800478c:	4b71      	ldr	r3, [pc, #452]	; (8004954 <Load_EEPROM+0x5c0>)
 800478e:	2200      	movs	r2, #0
 8004790:	819a      	strh	r2, [r3, #12]
 8004792:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[6], perMsg[PDM_SAVE]);
 8004794:	7cbb      	ldrb	r3, [r7, #18]
 8004796:	3b01      	subs	r3, #1
 8004798:	2b0a      	cmp	r3, #10
 800479a:	d847      	bhi.n	800482c <Load_EEPROM+0x498>
 800479c:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <Load_EEPROM+0x410>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	080047db 	.word	0x080047db
 80047ac:	080047e5 	.word	0x080047e5
 80047b0:	080047ed 	.word	0x080047ed
 80047b4:	080047f5 	.word	0x080047f5
 80047b8:	080047fd 	.word	0x080047fd
 80047bc:	08004805 	.word	0x08004805
 80047c0:	0800480d 	.word	0x0800480d
 80047c4:	08004815 	.word	0x08004815
 80047c8:	0800481d 	.word	0x0800481d
 80047cc:	08004825 	.word	0x08004825
 80047d0:	4b60      	ldr	r3, [pc, #384]	; (8004954 <Load_EEPROM+0x5c0>)
 80047d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80047d6:	81da      	strh	r2, [r3, #14]
 80047d8:	e02b      	b.n	8004832 <Load_EEPROM+0x49e>
 80047da:	4b5e      	ldr	r3, [pc, #376]	; (8004954 <Load_EEPROM+0x5c0>)
 80047dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80047e0:	81da      	strh	r2, [r3, #14]
 80047e2:	e026      	b.n	8004832 <Load_EEPROM+0x49e>
 80047e4:	4b5b      	ldr	r3, [pc, #364]	; (8004954 <Load_EEPROM+0x5c0>)
 80047e6:	22c8      	movs	r2, #200	; 0xc8
 80047e8:	81da      	strh	r2, [r3, #14]
 80047ea:	e022      	b.n	8004832 <Load_EEPROM+0x49e>
 80047ec:	4b59      	ldr	r3, [pc, #356]	; (8004954 <Load_EEPROM+0x5c0>)
 80047ee:	2264      	movs	r2, #100	; 0x64
 80047f0:	81da      	strh	r2, [r3, #14]
 80047f2:	e01e      	b.n	8004832 <Load_EEPROM+0x49e>
 80047f4:	4b57      	ldr	r3, [pc, #348]	; (8004954 <Load_EEPROM+0x5c0>)
 80047f6:	2232      	movs	r2, #50	; 0x32
 80047f8:	81da      	strh	r2, [r3, #14]
 80047fa:	e01a      	b.n	8004832 <Load_EEPROM+0x49e>
 80047fc:	4b55      	ldr	r3, [pc, #340]	; (8004954 <Load_EEPROM+0x5c0>)
 80047fe:	2228      	movs	r2, #40	; 0x28
 8004800:	81da      	strh	r2, [r3, #14]
 8004802:	e016      	b.n	8004832 <Load_EEPROM+0x49e>
 8004804:	4b53      	ldr	r3, [pc, #332]	; (8004954 <Load_EEPROM+0x5c0>)
 8004806:	2214      	movs	r2, #20
 8004808:	81da      	strh	r2, [r3, #14]
 800480a:	e012      	b.n	8004832 <Load_EEPROM+0x49e>
 800480c:	4b51      	ldr	r3, [pc, #324]	; (8004954 <Load_EEPROM+0x5c0>)
 800480e:	220a      	movs	r2, #10
 8004810:	81da      	strh	r2, [r3, #14]
 8004812:	e00e      	b.n	8004832 <Load_EEPROM+0x49e>
 8004814:	4b4f      	ldr	r3, [pc, #316]	; (8004954 <Load_EEPROM+0x5c0>)
 8004816:	2205      	movs	r2, #5
 8004818:	81da      	strh	r2, [r3, #14]
 800481a:	e00a      	b.n	8004832 <Load_EEPROM+0x49e>
 800481c:	4b4d      	ldr	r3, [pc, #308]	; (8004954 <Load_EEPROM+0x5c0>)
 800481e:	2204      	movs	r2, #4
 8004820:	81da      	strh	r2, [r3, #14]
 8004822:	e006      	b.n	8004832 <Load_EEPROM+0x49e>
 8004824:	4b4b      	ldr	r3, [pc, #300]	; (8004954 <Load_EEPROM+0x5c0>)
 8004826:	2202      	movs	r2, #2
 8004828:	81da      	strh	r2, [r3, #14]
 800482a:	e002      	b.n	8004832 <Load_EEPROM+0x49e>
 800482c:	4b49      	ldr	r3, [pc, #292]	; (8004954 <Load_EEPROM+0x5c0>)
 800482e:	2200      	movs	r2, #0
 8004830:	81da      	strh	r2, [r3, #14]
 8004832:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[7], perCAN[ANALOG_1_4]);
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	3b01      	subs	r3, #1
 8004838:	2b0a      	cmp	r3, #10
 800483a:	d847      	bhi.n	80048cc <Load_EEPROM+0x538>
 800483c:	a201      	add	r2, pc, #4	; (adr r2, 8004844 <Load_EEPROM+0x4b0>)
 800483e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004842:	bf00      	nop
 8004844:	08004871 	.word	0x08004871
 8004848:	0800487b 	.word	0x0800487b
 800484c:	08004885 	.word	0x08004885
 8004850:	0800488d 	.word	0x0800488d
 8004854:	08004895 	.word	0x08004895
 8004858:	0800489d 	.word	0x0800489d
 800485c:	080048a5 	.word	0x080048a5
 8004860:	080048ad 	.word	0x080048ad
 8004864:	080048b5 	.word	0x080048b5
 8004868:	080048bd 	.word	0x080048bd
 800486c:	080048c5 	.word	0x080048c5
 8004870:	4b39      	ldr	r3, [pc, #228]	; (8004958 <Load_EEPROM+0x5c4>)
 8004872:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004876:	801a      	strh	r2, [r3, #0]
 8004878:	e02b      	b.n	80048d2 <Load_EEPROM+0x53e>
 800487a:	4b37      	ldr	r3, [pc, #220]	; (8004958 <Load_EEPROM+0x5c4>)
 800487c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004880:	801a      	strh	r2, [r3, #0]
 8004882:	e026      	b.n	80048d2 <Load_EEPROM+0x53e>
 8004884:	4b34      	ldr	r3, [pc, #208]	; (8004958 <Load_EEPROM+0x5c4>)
 8004886:	22c8      	movs	r2, #200	; 0xc8
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	e022      	b.n	80048d2 <Load_EEPROM+0x53e>
 800488c:	4b32      	ldr	r3, [pc, #200]	; (8004958 <Load_EEPROM+0x5c4>)
 800488e:	2264      	movs	r2, #100	; 0x64
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	e01e      	b.n	80048d2 <Load_EEPROM+0x53e>
 8004894:	4b30      	ldr	r3, [pc, #192]	; (8004958 <Load_EEPROM+0x5c4>)
 8004896:	2232      	movs	r2, #50	; 0x32
 8004898:	801a      	strh	r2, [r3, #0]
 800489a:	e01a      	b.n	80048d2 <Load_EEPROM+0x53e>
 800489c:	4b2e      	ldr	r3, [pc, #184]	; (8004958 <Load_EEPROM+0x5c4>)
 800489e:	2228      	movs	r2, #40	; 0x28
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	e016      	b.n	80048d2 <Load_EEPROM+0x53e>
 80048a4:	4b2c      	ldr	r3, [pc, #176]	; (8004958 <Load_EEPROM+0x5c4>)
 80048a6:	2214      	movs	r2, #20
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	e012      	b.n	80048d2 <Load_EEPROM+0x53e>
 80048ac:	4b2a      	ldr	r3, [pc, #168]	; (8004958 <Load_EEPROM+0x5c4>)
 80048ae:	220a      	movs	r2, #10
 80048b0:	801a      	strh	r2, [r3, #0]
 80048b2:	e00e      	b.n	80048d2 <Load_EEPROM+0x53e>
 80048b4:	4b28      	ldr	r3, [pc, #160]	; (8004958 <Load_EEPROM+0x5c4>)
 80048b6:	2205      	movs	r2, #5
 80048b8:	801a      	strh	r2, [r3, #0]
 80048ba:	e00a      	b.n	80048d2 <Load_EEPROM+0x53e>
 80048bc:	4b26      	ldr	r3, [pc, #152]	; (8004958 <Load_EEPROM+0x5c4>)
 80048be:	2204      	movs	r2, #4
 80048c0:	801a      	strh	r2, [r3, #0]
 80048c2:	e006      	b.n	80048d2 <Load_EEPROM+0x53e>
 80048c4:	4b24      	ldr	r3, [pc, #144]	; (8004958 <Load_EEPROM+0x5c4>)
 80048c6:	2202      	movs	r2, #2
 80048c8:	801a      	strh	r2, [r3, #0]
 80048ca:	e002      	b.n	80048d2 <Load_EEPROM+0x53e>
 80048cc:	4b22      	ldr	r3, [pc, #136]	; (8004958 <Load_EEPROM+0x5c4>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	801a      	strh	r2, [r3, #0]
 80048d2:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[8], perCAN[ANALOG_5_8]);
 80048d4:	7d3b      	ldrb	r3, [r7, #20]
 80048d6:	3b01      	subs	r3, #1
 80048d8:	2b0a      	cmp	r3, #10
 80048da:	d84b      	bhi.n	8004974 <Load_EEPROM+0x5e0>
 80048dc:	a201      	add	r2, pc, #4	; (adr r2, 80048e4 <Load_EEPROM+0x550>)
 80048de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e2:	bf00      	nop
 80048e4:	08004911 	.word	0x08004911
 80048e8:	0800491b 	.word	0x0800491b
 80048ec:	08004925 	.word	0x08004925
 80048f0:	0800492d 	.word	0x0800492d
 80048f4:	08004935 	.word	0x08004935
 80048f8:	0800493d 	.word	0x0800493d
 80048fc:	08004945 	.word	0x08004945
 8004900:	0800494d 	.word	0x0800494d
 8004904:	0800495d 	.word	0x0800495d
 8004908:	08004965 	.word	0x08004965
 800490c:	0800496d 	.word	0x0800496d
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <Load_EEPROM+0x5c4>)
 8004912:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004916:	805a      	strh	r2, [r3, #2]
 8004918:	e02f      	b.n	800497a <Load_EEPROM+0x5e6>
 800491a:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <Load_EEPROM+0x5c4>)
 800491c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004920:	805a      	strh	r2, [r3, #2]
 8004922:	e02a      	b.n	800497a <Load_EEPROM+0x5e6>
 8004924:	4b0c      	ldr	r3, [pc, #48]	; (8004958 <Load_EEPROM+0x5c4>)
 8004926:	22c8      	movs	r2, #200	; 0xc8
 8004928:	805a      	strh	r2, [r3, #2]
 800492a:	e026      	b.n	800497a <Load_EEPROM+0x5e6>
 800492c:	4b0a      	ldr	r3, [pc, #40]	; (8004958 <Load_EEPROM+0x5c4>)
 800492e:	2264      	movs	r2, #100	; 0x64
 8004930:	805a      	strh	r2, [r3, #2]
 8004932:	e022      	b.n	800497a <Load_EEPROM+0x5e6>
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <Load_EEPROM+0x5c4>)
 8004936:	2232      	movs	r2, #50	; 0x32
 8004938:	805a      	strh	r2, [r3, #2]
 800493a:	e01e      	b.n	800497a <Load_EEPROM+0x5e6>
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <Load_EEPROM+0x5c4>)
 800493e:	2228      	movs	r2, #40	; 0x28
 8004940:	805a      	strh	r2, [r3, #2]
 8004942:	e01a      	b.n	800497a <Load_EEPROM+0x5e6>
 8004944:	4b04      	ldr	r3, [pc, #16]	; (8004958 <Load_EEPROM+0x5c4>)
 8004946:	2214      	movs	r2, #20
 8004948:	805a      	strh	r2, [r3, #2]
 800494a:	e016      	b.n	800497a <Load_EEPROM+0x5e6>
 800494c:	4b02      	ldr	r3, [pc, #8]	; (8004958 <Load_EEPROM+0x5c4>)
 800494e:	220a      	movs	r2, #10
 8004950:	805a      	strh	r2, [r3, #2]
 8004952:	e012      	b.n	800497a <Load_EEPROM+0x5e6>
 8004954:	20006714 	.word	0x20006714
 8004958:	20006708 	.word	0x20006708
 800495c:	4b98      	ldr	r3, [pc, #608]	; (8004bc0 <Load_EEPROM+0x82c>)
 800495e:	2205      	movs	r2, #5
 8004960:	805a      	strh	r2, [r3, #2]
 8004962:	e00a      	b.n	800497a <Load_EEPROM+0x5e6>
 8004964:	4b96      	ldr	r3, [pc, #600]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004966:	2204      	movs	r2, #4
 8004968:	805a      	strh	r2, [r3, #2]
 800496a:	e006      	b.n	800497a <Load_EEPROM+0x5e6>
 800496c:	4b94      	ldr	r3, [pc, #592]	; (8004bc0 <Load_EEPROM+0x82c>)
 800496e:	2202      	movs	r2, #2
 8004970:	805a      	strh	r2, [r3, #2]
 8004972:	e002      	b.n	800497a <Load_EEPROM+0x5e6>
 8004974:	4b92      	ldr	r3, [pc, #584]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004976:	2200      	movs	r2, #0
 8004978:	805a      	strh	r2, [r3, #2]
 800497a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[9], perCAN[ANALOG_9_12]);
 800497c:	7d7b      	ldrb	r3, [r7, #21]
 800497e:	3b01      	subs	r3, #1
 8004980:	2b0a      	cmp	r3, #10
 8004982:	d847      	bhi.n	8004a14 <Load_EEPROM+0x680>
 8004984:	a201      	add	r2, pc, #4	; (adr r2, 800498c <Load_EEPROM+0x5f8>)
 8004986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800498a:	bf00      	nop
 800498c:	080049b9 	.word	0x080049b9
 8004990:	080049c3 	.word	0x080049c3
 8004994:	080049cd 	.word	0x080049cd
 8004998:	080049d5 	.word	0x080049d5
 800499c:	080049dd 	.word	0x080049dd
 80049a0:	080049e5 	.word	0x080049e5
 80049a4:	080049ed 	.word	0x080049ed
 80049a8:	080049f5 	.word	0x080049f5
 80049ac:	080049fd 	.word	0x080049fd
 80049b0:	08004a05 	.word	0x08004a05
 80049b4:	08004a0d 	.word	0x08004a0d
 80049b8:	4b81      	ldr	r3, [pc, #516]	; (8004bc0 <Load_EEPROM+0x82c>)
 80049ba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049be:	809a      	strh	r2, [r3, #4]
 80049c0:	e02b      	b.n	8004a1a <Load_EEPROM+0x686>
 80049c2:	4b7f      	ldr	r3, [pc, #508]	; (8004bc0 <Load_EEPROM+0x82c>)
 80049c4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80049c8:	809a      	strh	r2, [r3, #4]
 80049ca:	e026      	b.n	8004a1a <Load_EEPROM+0x686>
 80049cc:	4b7c      	ldr	r3, [pc, #496]	; (8004bc0 <Load_EEPROM+0x82c>)
 80049ce:	22c8      	movs	r2, #200	; 0xc8
 80049d0:	809a      	strh	r2, [r3, #4]
 80049d2:	e022      	b.n	8004a1a <Load_EEPROM+0x686>
 80049d4:	4b7a      	ldr	r3, [pc, #488]	; (8004bc0 <Load_EEPROM+0x82c>)
 80049d6:	2264      	movs	r2, #100	; 0x64
 80049d8:	809a      	strh	r2, [r3, #4]
 80049da:	e01e      	b.n	8004a1a <Load_EEPROM+0x686>
 80049dc:	4b78      	ldr	r3, [pc, #480]	; (8004bc0 <Load_EEPROM+0x82c>)
 80049de:	2232      	movs	r2, #50	; 0x32
 80049e0:	809a      	strh	r2, [r3, #4]
 80049e2:	e01a      	b.n	8004a1a <Load_EEPROM+0x686>
 80049e4:	4b76      	ldr	r3, [pc, #472]	; (8004bc0 <Load_EEPROM+0x82c>)
 80049e6:	2228      	movs	r2, #40	; 0x28
 80049e8:	809a      	strh	r2, [r3, #4]
 80049ea:	e016      	b.n	8004a1a <Load_EEPROM+0x686>
 80049ec:	4b74      	ldr	r3, [pc, #464]	; (8004bc0 <Load_EEPROM+0x82c>)
 80049ee:	2214      	movs	r2, #20
 80049f0:	809a      	strh	r2, [r3, #4]
 80049f2:	e012      	b.n	8004a1a <Load_EEPROM+0x686>
 80049f4:	4b72      	ldr	r3, [pc, #456]	; (8004bc0 <Load_EEPROM+0x82c>)
 80049f6:	220a      	movs	r2, #10
 80049f8:	809a      	strh	r2, [r3, #4]
 80049fa:	e00e      	b.n	8004a1a <Load_EEPROM+0x686>
 80049fc:	4b70      	ldr	r3, [pc, #448]	; (8004bc0 <Load_EEPROM+0x82c>)
 80049fe:	2205      	movs	r2, #5
 8004a00:	809a      	strh	r2, [r3, #4]
 8004a02:	e00a      	b.n	8004a1a <Load_EEPROM+0x686>
 8004a04:	4b6e      	ldr	r3, [pc, #440]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a06:	2204      	movs	r2, #4
 8004a08:	809a      	strh	r2, [r3, #4]
 8004a0a:	e006      	b.n	8004a1a <Load_EEPROM+0x686>
 8004a0c:	4b6c      	ldr	r3, [pc, #432]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a0e:	2202      	movs	r2, #2
 8004a10:	809a      	strh	r2, [r3, #4]
 8004a12:	e002      	b.n	8004a1a <Load_EEPROM+0x686>
 8004a14:	4b6a      	ldr	r3, [pc, #424]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	809a      	strh	r2, [r3, #4]
 8004a1a:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[10], perCAN[RTC_MSG]);
 8004a1c:	7dbb      	ldrb	r3, [r7, #22]
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	2b0a      	cmp	r3, #10
 8004a22:	d847      	bhi.n	8004ab4 <Load_EEPROM+0x720>
 8004a24:	a201      	add	r2, pc, #4	; (adr r2, 8004a2c <Load_EEPROM+0x698>)
 8004a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a2a:	bf00      	nop
 8004a2c:	08004a59 	.word	0x08004a59
 8004a30:	08004a63 	.word	0x08004a63
 8004a34:	08004a6d 	.word	0x08004a6d
 8004a38:	08004a75 	.word	0x08004a75
 8004a3c:	08004a7d 	.word	0x08004a7d
 8004a40:	08004a85 	.word	0x08004a85
 8004a44:	08004a8d 	.word	0x08004a8d
 8004a48:	08004a95 	.word	0x08004a95
 8004a4c:	08004a9d 	.word	0x08004a9d
 8004a50:	08004aa5 	.word	0x08004aa5
 8004a54:	08004aad 	.word	0x08004aad
 8004a58:	4b59      	ldr	r3, [pc, #356]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004a5e:	80da      	strh	r2, [r3, #6]
 8004a60:	e02b      	b.n	8004aba <Load_EEPROM+0x726>
 8004a62:	4b57      	ldr	r3, [pc, #348]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a64:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004a68:	80da      	strh	r2, [r3, #6]
 8004a6a:	e026      	b.n	8004aba <Load_EEPROM+0x726>
 8004a6c:	4b54      	ldr	r3, [pc, #336]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a6e:	22c8      	movs	r2, #200	; 0xc8
 8004a70:	80da      	strh	r2, [r3, #6]
 8004a72:	e022      	b.n	8004aba <Load_EEPROM+0x726>
 8004a74:	4b52      	ldr	r3, [pc, #328]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a76:	2264      	movs	r2, #100	; 0x64
 8004a78:	80da      	strh	r2, [r3, #6]
 8004a7a:	e01e      	b.n	8004aba <Load_EEPROM+0x726>
 8004a7c:	4b50      	ldr	r3, [pc, #320]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a7e:	2232      	movs	r2, #50	; 0x32
 8004a80:	80da      	strh	r2, [r3, #6]
 8004a82:	e01a      	b.n	8004aba <Load_EEPROM+0x726>
 8004a84:	4b4e      	ldr	r3, [pc, #312]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a86:	2228      	movs	r2, #40	; 0x28
 8004a88:	80da      	strh	r2, [r3, #6]
 8004a8a:	e016      	b.n	8004aba <Load_EEPROM+0x726>
 8004a8c:	4b4c      	ldr	r3, [pc, #304]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a8e:	2214      	movs	r2, #20
 8004a90:	80da      	strh	r2, [r3, #6]
 8004a92:	e012      	b.n	8004aba <Load_EEPROM+0x726>
 8004a94:	4b4a      	ldr	r3, [pc, #296]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a96:	220a      	movs	r2, #10
 8004a98:	80da      	strh	r2, [r3, #6]
 8004a9a:	e00e      	b.n	8004aba <Load_EEPROM+0x726>
 8004a9c:	4b48      	ldr	r3, [pc, #288]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004a9e:	2205      	movs	r2, #5
 8004aa0:	80da      	strh	r2, [r3, #6]
 8004aa2:	e00a      	b.n	8004aba <Load_EEPROM+0x726>
 8004aa4:	4b46      	ldr	r3, [pc, #280]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004aa6:	2204      	movs	r2, #4
 8004aa8:	80da      	strh	r2, [r3, #6]
 8004aaa:	e006      	b.n	8004aba <Load_EEPROM+0x726>
 8004aac:	4b44      	ldr	r3, [pc, #272]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004aae:	2202      	movs	r2, #2
 8004ab0:	80da      	strh	r2, [r3, #6]
 8004ab2:	e002      	b.n	8004aba <Load_EEPROM+0x726>
 8004ab4:	4b42      	ldr	r3, [pc, #264]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	80da      	strh	r2, [r3, #6]
 8004aba:	bf00      	nop
	__BUFFER_TO_FREQ(buffer[11], perCAN[VERIFY_MSG]);
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	2b0a      	cmp	r3, #10
 8004ac2:	d847      	bhi.n	8004b54 <Load_EEPROM+0x7c0>
 8004ac4:	a201      	add	r2, pc, #4	; (adr r2, 8004acc <Load_EEPROM+0x738>)
 8004ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aca:	bf00      	nop
 8004acc:	08004af9 	.word	0x08004af9
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	08004b0d 	.word	0x08004b0d
 8004ad8:	08004b15 	.word	0x08004b15
 8004adc:	08004b1d 	.word	0x08004b1d
 8004ae0:	08004b25 	.word	0x08004b25
 8004ae4:	08004b2d 	.word	0x08004b2d
 8004ae8:	08004b35 	.word	0x08004b35
 8004aec:	08004b3d 	.word	0x08004b3d
 8004af0:	08004b45 	.word	0x08004b45
 8004af4:	08004b4d 	.word	0x08004b4d
 8004af8:	4b31      	ldr	r3, [pc, #196]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004afa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004afe:	811a      	strh	r2, [r3, #8]
 8004b00:	e02b      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b02:	4b2f      	ldr	r3, [pc, #188]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b04:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b08:	811a      	strh	r2, [r3, #8]
 8004b0a:	e026      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b0c:	4b2c      	ldr	r3, [pc, #176]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b0e:	22c8      	movs	r2, #200	; 0xc8
 8004b10:	811a      	strh	r2, [r3, #8]
 8004b12:	e022      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b14:	4b2a      	ldr	r3, [pc, #168]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b16:	2264      	movs	r2, #100	; 0x64
 8004b18:	811a      	strh	r2, [r3, #8]
 8004b1a:	e01e      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b1c:	4b28      	ldr	r3, [pc, #160]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b1e:	2232      	movs	r2, #50	; 0x32
 8004b20:	811a      	strh	r2, [r3, #8]
 8004b22:	e01a      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b24:	4b26      	ldr	r3, [pc, #152]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b26:	2228      	movs	r2, #40	; 0x28
 8004b28:	811a      	strh	r2, [r3, #8]
 8004b2a:	e016      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b2c:	4b24      	ldr	r3, [pc, #144]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b2e:	2214      	movs	r2, #20
 8004b30:	811a      	strh	r2, [r3, #8]
 8004b32:	e012      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b34:	4b22      	ldr	r3, [pc, #136]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b36:	220a      	movs	r2, #10
 8004b38:	811a      	strh	r2, [r3, #8]
 8004b3a:	e00e      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b3c:	4b20      	ldr	r3, [pc, #128]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b3e:	2205      	movs	r2, #5
 8004b40:	811a      	strh	r2, [r3, #8]
 8004b42:	e00a      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b44:	4b1e      	ldr	r3, [pc, #120]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b46:	2204      	movs	r2, #4
 8004b48:	811a      	strh	r2, [r3, #8]
 8004b4a:	e006      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b4c:	4b1c      	ldr	r3, [pc, #112]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b4e:	2202      	movs	r2, #2
 8004b50:	811a      	strh	r2, [r3, #8]
 8004b52:	e002      	b.n	8004b5a <Load_EEPROM+0x7c6>
 8004b54:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <Load_EEPROM+0x82c>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	811a      	strh	r2, [r3, #8]
 8004b5a:	bf00      	nop

	inputConfig 	 = buffer[12];
 8004b5c:	7e3a      	ldrb	r2, [r7, #24]
 8004b5e:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <Load_EEPROM+0x830>)
 8004b60:	701a      	strb	r2, [r3, #0]
	thresholdBeacon	 = buffer[13] << 8;
 8004b62:	7e7b      	ldrb	r3, [r7, #25]
 8004b64:	021b      	lsls	r3, r3, #8
 8004b66:	b21a      	sxth	r2, r3
 8004b68:	4b17      	ldr	r3, [pc, #92]	; (8004bc8 <Load_EEPROM+0x834>)
 8004b6a:	801a      	strh	r2, [r3, #0]
	thresholdBeacon |= buffer[14] & 0xff;
 8004b6c:	7ebb      	ldrb	r3, [r7, #26]
 8004b6e:	b21a      	sxth	r2, r3
 8004b70:	4b15      	ldr	r3, [pc, #84]	; (8004bc8 <Load_EEPROM+0x834>)
 8004b72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	b21a      	sxth	r2, r3
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <Load_EEPROM+0x834>)
 8004b7c:	801a      	strh	r2, [r3, #0]
	thresholdRPM	 = buffer[15] << 8;
 8004b7e:	7efb      	ldrb	r3, [r7, #27]
 8004b80:	021b      	lsls	r3, r3, #8
 8004b82:	b21a      	sxth	r2, r3
 8004b84:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <Load_EEPROM+0x838>)
 8004b86:	801a      	strh	r2, [r3, #0]
	thresholdRPM	|= buffer[16] & 0xff;
 8004b88:	7f3b      	ldrb	r3, [r7, #28]
 8004b8a:	b21a      	sxth	r2, r3
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <Load_EEPROM+0x838>)
 8004b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	b21a      	sxth	r2, r3
 8004b96:	4b0d      	ldr	r3, [pc, #52]	; (8004bcc <Load_EEPROM+0x838>)
 8004b98:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	 = buffer[17] << 8;
 8004b9a:	7f7b      	ldrb	r3, [r7, #29]
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	b21a      	sxth	r2, r3
 8004ba0:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <Load_EEPROM+0x83c>)
 8004ba2:	801a      	strh	r2, [r3, #0]
	thresholdSpeed	|= buffer[18] & 0xff;
 8004ba4:	7fbb      	ldrb	r3, [r7, #30]
 8004ba6:	b21a      	sxth	r2, r3
 8004ba8:	4b09      	ldr	r3, [pc, #36]	; (8004bd0 <Load_EEPROM+0x83c>)
 8004baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	b21a      	sxth	r2, r3
 8004bb2:	4b07      	ldr	r3, [pc, #28]	; (8004bd0 <Load_EEPROM+0x83c>)
 8004bb4:	801a      	strh	r2, [r3, #0]

	return retVal;
 8004bb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3720      	adds	r7, #32
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	20006708 	.word	0x20006708
 8004bc4:	200066ec 	.word	0x200066ec
 8004bc8:	200065da 	.word	0x200065da
 8004bcc:	200065dc 	.word	0x200065dc
 8004bd0:	200065de 	.word	0x200065de

08004bd4 <Save_EEPROM>:

static HAL_StatusTypeDef Save_EEPROM(I2C_HandleTypeDef* hi2c)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b08a      	sub	sp, #40	; 0x28
 8004bd8:	af02      	add	r7, sp, #8
 8004bda:	6078      	str	r0, [r7, #4]
	uint8_t buffer[EEPROM_BUFFER_SIZE_WRITE];
//	HAL_StatusTypeDef retVal = HAL_OK;

	buffer[0] = 0x00;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	733b      	strb	r3, [r7, #12]

	__FREQ_TO_BUFFER(buffer[1], perMsg[ANALOG_1_4]);
 8004be0:	4ba9      	ldr	r3, [pc, #676]	; (8004e88 <Save_EEPROM+0x2b4>)
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004be8:	f000 8081 	beq.w	8004cee <Save_EEPROM+0x11a>
 8004bec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bf0:	f300 809e 	bgt.w	8004d30 <Save_EEPROM+0x15c>
 8004bf4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004bf8:	d07c      	beq.n	8004cf4 <Save_EEPROM+0x120>
 8004bfa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004bfe:	f300 8097 	bgt.w	8004d30 <Save_EEPROM+0x15c>
 8004c02:	2bc8      	cmp	r3, #200	; 0xc8
 8004c04:	d079      	beq.n	8004cfa <Save_EEPROM+0x126>
 8004c06:	2bc8      	cmp	r3, #200	; 0xc8
 8004c08:	f300 8092 	bgt.w	8004d30 <Save_EEPROM+0x15c>
 8004c0c:	2b32      	cmp	r3, #50	; 0x32
 8004c0e:	dc6b      	bgt.n	8004ce8 <Save_EEPROM+0x114>
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	f2c0 808d 	blt.w	8004d30 <Save_EEPROM+0x15c>
 8004c16:	3b02      	subs	r3, #2
 8004c18:	2b30      	cmp	r3, #48	; 0x30
 8004c1a:	f200 8089 	bhi.w	8004d30 <Save_EEPROM+0x15c>
 8004c1e:	a201      	add	r2, pc, #4	; (adr r2, 8004c24 <Save_EEPROM+0x50>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004d2b 	.word	0x08004d2b
 8004c28:	08004d31 	.word	0x08004d31
 8004c2c:	08004d25 	.word	0x08004d25
 8004c30:	08004d1f 	.word	0x08004d1f
 8004c34:	08004d31 	.word	0x08004d31
 8004c38:	08004d31 	.word	0x08004d31
 8004c3c:	08004d31 	.word	0x08004d31
 8004c40:	08004d31 	.word	0x08004d31
 8004c44:	08004d19 	.word	0x08004d19
 8004c48:	08004d31 	.word	0x08004d31
 8004c4c:	08004d31 	.word	0x08004d31
 8004c50:	08004d31 	.word	0x08004d31
 8004c54:	08004d31 	.word	0x08004d31
 8004c58:	08004d31 	.word	0x08004d31
 8004c5c:	08004d31 	.word	0x08004d31
 8004c60:	08004d31 	.word	0x08004d31
 8004c64:	08004d31 	.word	0x08004d31
 8004c68:	08004d31 	.word	0x08004d31
 8004c6c:	08004d13 	.word	0x08004d13
 8004c70:	08004d31 	.word	0x08004d31
 8004c74:	08004d31 	.word	0x08004d31
 8004c78:	08004d31 	.word	0x08004d31
 8004c7c:	08004d31 	.word	0x08004d31
 8004c80:	08004d31 	.word	0x08004d31
 8004c84:	08004d31 	.word	0x08004d31
 8004c88:	08004d31 	.word	0x08004d31
 8004c8c:	08004d31 	.word	0x08004d31
 8004c90:	08004d31 	.word	0x08004d31
 8004c94:	08004d31 	.word	0x08004d31
 8004c98:	08004d31 	.word	0x08004d31
 8004c9c:	08004d31 	.word	0x08004d31
 8004ca0:	08004d31 	.word	0x08004d31
 8004ca4:	08004d31 	.word	0x08004d31
 8004ca8:	08004d31 	.word	0x08004d31
 8004cac:	08004d31 	.word	0x08004d31
 8004cb0:	08004d31 	.word	0x08004d31
 8004cb4:	08004d31 	.word	0x08004d31
 8004cb8:	08004d31 	.word	0x08004d31
 8004cbc:	08004d0d 	.word	0x08004d0d
 8004cc0:	08004d31 	.word	0x08004d31
 8004cc4:	08004d31 	.word	0x08004d31
 8004cc8:	08004d31 	.word	0x08004d31
 8004ccc:	08004d31 	.word	0x08004d31
 8004cd0:	08004d31 	.word	0x08004d31
 8004cd4:	08004d31 	.word	0x08004d31
 8004cd8:	08004d31 	.word	0x08004d31
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004d31 	.word	0x08004d31
 8004ce4:	08004d07 	.word	0x08004d07
 8004ce8:	2b64      	cmp	r3, #100	; 0x64
 8004cea:	d009      	beq.n	8004d00 <Save_EEPROM+0x12c>
 8004cec:	e020      	b.n	8004d30 <Save_EEPROM+0x15c>
 8004cee:	2301      	movs	r3, #1
 8004cf0:	737b      	strb	r3, [r7, #13]
 8004cf2:	e01f      	b.n	8004d34 <Save_EEPROM+0x160>
 8004cf4:	2302      	movs	r3, #2
 8004cf6:	737b      	strb	r3, [r7, #13]
 8004cf8:	e01c      	b.n	8004d34 <Save_EEPROM+0x160>
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	737b      	strb	r3, [r7, #13]
 8004cfe:	e019      	b.n	8004d34 <Save_EEPROM+0x160>
 8004d00:	2304      	movs	r3, #4
 8004d02:	737b      	strb	r3, [r7, #13]
 8004d04:	e016      	b.n	8004d34 <Save_EEPROM+0x160>
 8004d06:	2305      	movs	r3, #5
 8004d08:	737b      	strb	r3, [r7, #13]
 8004d0a:	e013      	b.n	8004d34 <Save_EEPROM+0x160>
 8004d0c:	2306      	movs	r3, #6
 8004d0e:	737b      	strb	r3, [r7, #13]
 8004d10:	e010      	b.n	8004d34 <Save_EEPROM+0x160>
 8004d12:	2307      	movs	r3, #7
 8004d14:	737b      	strb	r3, [r7, #13]
 8004d16:	e00d      	b.n	8004d34 <Save_EEPROM+0x160>
 8004d18:	2308      	movs	r3, #8
 8004d1a:	737b      	strb	r3, [r7, #13]
 8004d1c:	e00a      	b.n	8004d34 <Save_EEPROM+0x160>
 8004d1e:	2309      	movs	r3, #9
 8004d20:	737b      	strb	r3, [r7, #13]
 8004d22:	e007      	b.n	8004d34 <Save_EEPROM+0x160>
 8004d24:	230a      	movs	r3, #10
 8004d26:	737b      	strb	r3, [r7, #13]
 8004d28:	e004      	b.n	8004d34 <Save_EEPROM+0x160>
 8004d2a:	230b      	movs	r3, #11
 8004d2c:	737b      	strb	r3, [r7, #13]
 8004d2e:	e001      	b.n	8004d34 <Save_EEPROM+0x160>
 8004d30:	2300      	movs	r3, #0
 8004d32:	737b      	strb	r3, [r7, #13]
 8004d34:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[2], perMsg[ANALOG_5_8]);
 8004d36:	4b54      	ldr	r3, [pc, #336]	; (8004e88 <Save_EEPROM+0x2b4>)
 8004d38:	885b      	ldrh	r3, [r3, #2]
 8004d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d3e:	f000 8082 	beq.w	8004e46 <Save_EEPROM+0x272>
 8004d42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d46:	f300 80a1 	bgt.w	8004e8c <Save_EEPROM+0x2b8>
 8004d4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d4e:	d07d      	beq.n	8004e4c <Save_EEPROM+0x278>
 8004d50:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d54:	f300 809a 	bgt.w	8004e8c <Save_EEPROM+0x2b8>
 8004d58:	2bc8      	cmp	r3, #200	; 0xc8
 8004d5a:	d07a      	beq.n	8004e52 <Save_EEPROM+0x27e>
 8004d5c:	2bc8      	cmp	r3, #200	; 0xc8
 8004d5e:	f300 8095 	bgt.w	8004e8c <Save_EEPROM+0x2b8>
 8004d62:	2b32      	cmp	r3, #50	; 0x32
 8004d64:	dc6c      	bgt.n	8004e40 <Save_EEPROM+0x26c>
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	f2c0 8090 	blt.w	8004e8c <Save_EEPROM+0x2b8>
 8004d6c:	3b02      	subs	r3, #2
 8004d6e:	2b30      	cmp	r3, #48	; 0x30
 8004d70:	f200 808c 	bhi.w	8004e8c <Save_EEPROM+0x2b8>
 8004d74:	a201      	add	r2, pc, #4	; (adr r2, 8004d7c <Save_EEPROM+0x1a8>)
 8004d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d7a:	bf00      	nop
 8004d7c:	08004e83 	.word	0x08004e83
 8004d80:	08004e8d 	.word	0x08004e8d
 8004d84:	08004e7d 	.word	0x08004e7d
 8004d88:	08004e77 	.word	0x08004e77
 8004d8c:	08004e8d 	.word	0x08004e8d
 8004d90:	08004e8d 	.word	0x08004e8d
 8004d94:	08004e8d 	.word	0x08004e8d
 8004d98:	08004e8d 	.word	0x08004e8d
 8004d9c:	08004e71 	.word	0x08004e71
 8004da0:	08004e8d 	.word	0x08004e8d
 8004da4:	08004e8d 	.word	0x08004e8d
 8004da8:	08004e8d 	.word	0x08004e8d
 8004dac:	08004e8d 	.word	0x08004e8d
 8004db0:	08004e8d 	.word	0x08004e8d
 8004db4:	08004e8d 	.word	0x08004e8d
 8004db8:	08004e8d 	.word	0x08004e8d
 8004dbc:	08004e8d 	.word	0x08004e8d
 8004dc0:	08004e8d 	.word	0x08004e8d
 8004dc4:	08004e6b 	.word	0x08004e6b
 8004dc8:	08004e8d 	.word	0x08004e8d
 8004dcc:	08004e8d 	.word	0x08004e8d
 8004dd0:	08004e8d 	.word	0x08004e8d
 8004dd4:	08004e8d 	.word	0x08004e8d
 8004dd8:	08004e8d 	.word	0x08004e8d
 8004ddc:	08004e8d 	.word	0x08004e8d
 8004de0:	08004e8d 	.word	0x08004e8d
 8004de4:	08004e8d 	.word	0x08004e8d
 8004de8:	08004e8d 	.word	0x08004e8d
 8004dec:	08004e8d 	.word	0x08004e8d
 8004df0:	08004e8d 	.word	0x08004e8d
 8004df4:	08004e8d 	.word	0x08004e8d
 8004df8:	08004e8d 	.word	0x08004e8d
 8004dfc:	08004e8d 	.word	0x08004e8d
 8004e00:	08004e8d 	.word	0x08004e8d
 8004e04:	08004e8d 	.word	0x08004e8d
 8004e08:	08004e8d 	.word	0x08004e8d
 8004e0c:	08004e8d 	.word	0x08004e8d
 8004e10:	08004e8d 	.word	0x08004e8d
 8004e14:	08004e65 	.word	0x08004e65
 8004e18:	08004e8d 	.word	0x08004e8d
 8004e1c:	08004e8d 	.word	0x08004e8d
 8004e20:	08004e8d 	.word	0x08004e8d
 8004e24:	08004e8d 	.word	0x08004e8d
 8004e28:	08004e8d 	.word	0x08004e8d
 8004e2c:	08004e8d 	.word	0x08004e8d
 8004e30:	08004e8d 	.word	0x08004e8d
 8004e34:	08004e8d 	.word	0x08004e8d
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004e5f 	.word	0x08004e5f
 8004e40:	2b64      	cmp	r3, #100	; 0x64
 8004e42:	d009      	beq.n	8004e58 <Save_EEPROM+0x284>
 8004e44:	e022      	b.n	8004e8c <Save_EEPROM+0x2b8>
 8004e46:	2301      	movs	r3, #1
 8004e48:	73bb      	strb	r3, [r7, #14]
 8004e4a:	e021      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	73bb      	strb	r3, [r7, #14]
 8004e50:	e01e      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e52:	2303      	movs	r3, #3
 8004e54:	73bb      	strb	r3, [r7, #14]
 8004e56:	e01b      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e58:	2304      	movs	r3, #4
 8004e5a:	73bb      	strb	r3, [r7, #14]
 8004e5c:	e018      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e5e:	2305      	movs	r3, #5
 8004e60:	73bb      	strb	r3, [r7, #14]
 8004e62:	e015      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e64:	2306      	movs	r3, #6
 8004e66:	73bb      	strb	r3, [r7, #14]
 8004e68:	e012      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e6a:	2307      	movs	r3, #7
 8004e6c:	73bb      	strb	r3, [r7, #14]
 8004e6e:	e00f      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e70:	2308      	movs	r3, #8
 8004e72:	73bb      	strb	r3, [r7, #14]
 8004e74:	e00c      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e76:	2309      	movs	r3, #9
 8004e78:	73bb      	strb	r3, [r7, #14]
 8004e7a:	e009      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e7c:	230a      	movs	r3, #10
 8004e7e:	73bb      	strb	r3, [r7, #14]
 8004e80:	e006      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e82:	230b      	movs	r3, #11
 8004e84:	73bb      	strb	r3, [r7, #14]
 8004e86:	e003      	b.n	8004e90 <Save_EEPROM+0x2bc>
 8004e88:	20006714 	.word	0x20006714
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	73bb      	strb	r3, [r7, #14]
 8004e90:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[3], perMsg[ANALOG_9_12]);
 8004e92:	4baa      	ldr	r3, [pc, #680]	; (800513c <Save_EEPROM+0x568>)
 8004e94:	889b      	ldrh	r3, [r3, #4]
 8004e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e9a:	f000 8082 	beq.w	8004fa2 <Save_EEPROM+0x3ce>
 8004e9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ea2:	f300 809f 	bgt.w	8004fe4 <Save_EEPROM+0x410>
 8004ea6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004eaa:	d07d      	beq.n	8004fa8 <Save_EEPROM+0x3d4>
 8004eac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004eb0:	f300 8098 	bgt.w	8004fe4 <Save_EEPROM+0x410>
 8004eb4:	2bc8      	cmp	r3, #200	; 0xc8
 8004eb6:	d07a      	beq.n	8004fae <Save_EEPROM+0x3da>
 8004eb8:	2bc8      	cmp	r3, #200	; 0xc8
 8004eba:	f300 8093 	bgt.w	8004fe4 <Save_EEPROM+0x410>
 8004ebe:	2b32      	cmp	r3, #50	; 0x32
 8004ec0:	dc6c      	bgt.n	8004f9c <Save_EEPROM+0x3c8>
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	f2c0 808e 	blt.w	8004fe4 <Save_EEPROM+0x410>
 8004ec8:	3b02      	subs	r3, #2
 8004eca:	2b30      	cmp	r3, #48	; 0x30
 8004ecc:	f200 808a 	bhi.w	8004fe4 <Save_EEPROM+0x410>
 8004ed0:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <Save_EEPROM+0x304>)
 8004ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed6:	bf00      	nop
 8004ed8:	08004fdf 	.word	0x08004fdf
 8004edc:	08004fe5 	.word	0x08004fe5
 8004ee0:	08004fd9 	.word	0x08004fd9
 8004ee4:	08004fd3 	.word	0x08004fd3
 8004ee8:	08004fe5 	.word	0x08004fe5
 8004eec:	08004fe5 	.word	0x08004fe5
 8004ef0:	08004fe5 	.word	0x08004fe5
 8004ef4:	08004fe5 	.word	0x08004fe5
 8004ef8:	08004fcd 	.word	0x08004fcd
 8004efc:	08004fe5 	.word	0x08004fe5
 8004f00:	08004fe5 	.word	0x08004fe5
 8004f04:	08004fe5 	.word	0x08004fe5
 8004f08:	08004fe5 	.word	0x08004fe5
 8004f0c:	08004fe5 	.word	0x08004fe5
 8004f10:	08004fe5 	.word	0x08004fe5
 8004f14:	08004fe5 	.word	0x08004fe5
 8004f18:	08004fe5 	.word	0x08004fe5
 8004f1c:	08004fe5 	.word	0x08004fe5
 8004f20:	08004fc7 	.word	0x08004fc7
 8004f24:	08004fe5 	.word	0x08004fe5
 8004f28:	08004fe5 	.word	0x08004fe5
 8004f2c:	08004fe5 	.word	0x08004fe5
 8004f30:	08004fe5 	.word	0x08004fe5
 8004f34:	08004fe5 	.word	0x08004fe5
 8004f38:	08004fe5 	.word	0x08004fe5
 8004f3c:	08004fe5 	.word	0x08004fe5
 8004f40:	08004fe5 	.word	0x08004fe5
 8004f44:	08004fe5 	.word	0x08004fe5
 8004f48:	08004fe5 	.word	0x08004fe5
 8004f4c:	08004fe5 	.word	0x08004fe5
 8004f50:	08004fe5 	.word	0x08004fe5
 8004f54:	08004fe5 	.word	0x08004fe5
 8004f58:	08004fe5 	.word	0x08004fe5
 8004f5c:	08004fe5 	.word	0x08004fe5
 8004f60:	08004fe5 	.word	0x08004fe5
 8004f64:	08004fe5 	.word	0x08004fe5
 8004f68:	08004fe5 	.word	0x08004fe5
 8004f6c:	08004fe5 	.word	0x08004fe5
 8004f70:	08004fc1 	.word	0x08004fc1
 8004f74:	08004fe5 	.word	0x08004fe5
 8004f78:	08004fe5 	.word	0x08004fe5
 8004f7c:	08004fe5 	.word	0x08004fe5
 8004f80:	08004fe5 	.word	0x08004fe5
 8004f84:	08004fe5 	.word	0x08004fe5
 8004f88:	08004fe5 	.word	0x08004fe5
 8004f8c:	08004fe5 	.word	0x08004fe5
 8004f90:	08004fe5 	.word	0x08004fe5
 8004f94:	08004fe5 	.word	0x08004fe5
 8004f98:	08004fbb 	.word	0x08004fbb
 8004f9c:	2b64      	cmp	r3, #100	; 0x64
 8004f9e:	d009      	beq.n	8004fb4 <Save_EEPROM+0x3e0>
 8004fa0:	e020      	b.n	8004fe4 <Save_EEPROM+0x410>
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
 8004fa6:	e01f      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	73fb      	strb	r3, [r7, #15]
 8004fac:	e01c      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fae:	2303      	movs	r3, #3
 8004fb0:	73fb      	strb	r3, [r7, #15]
 8004fb2:	e019      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fb4:	2304      	movs	r3, #4
 8004fb6:	73fb      	strb	r3, [r7, #15]
 8004fb8:	e016      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fba:	2305      	movs	r3, #5
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	e013      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fc0:	2306      	movs	r3, #6
 8004fc2:	73fb      	strb	r3, [r7, #15]
 8004fc4:	e010      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fc6:	2307      	movs	r3, #7
 8004fc8:	73fb      	strb	r3, [r7, #15]
 8004fca:	e00d      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fcc:	2308      	movs	r3, #8
 8004fce:	73fb      	strb	r3, [r7, #15]
 8004fd0:	e00a      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fd2:	2309      	movs	r3, #9
 8004fd4:	73fb      	strb	r3, [r7, #15]
 8004fd6:	e007      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fd8:	230a      	movs	r3, #10
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	e004      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fde:	230b      	movs	r3, #11
 8004fe0:	73fb      	strb	r3, [r7, #15]
 8004fe2:	e001      	b.n	8004fe8 <Save_EEPROM+0x414>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	73fb      	strb	r3, [r7, #15]
 8004fe8:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[4], perMsg[RTC_MSG]);
 8004fea:	4b54      	ldr	r3, [pc, #336]	; (800513c <Save_EEPROM+0x568>)
 8004fec:	88db      	ldrh	r3, [r3, #6]
 8004fee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ff2:	f000 8082 	beq.w	80050fa <Save_EEPROM+0x526>
 8004ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ffa:	f300 80a1 	bgt.w	8005140 <Save_EEPROM+0x56c>
 8004ffe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005002:	d07d      	beq.n	8005100 <Save_EEPROM+0x52c>
 8005004:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005008:	f300 809a 	bgt.w	8005140 <Save_EEPROM+0x56c>
 800500c:	2bc8      	cmp	r3, #200	; 0xc8
 800500e:	d07a      	beq.n	8005106 <Save_EEPROM+0x532>
 8005010:	2bc8      	cmp	r3, #200	; 0xc8
 8005012:	f300 8095 	bgt.w	8005140 <Save_EEPROM+0x56c>
 8005016:	2b32      	cmp	r3, #50	; 0x32
 8005018:	dc6c      	bgt.n	80050f4 <Save_EEPROM+0x520>
 800501a:	2b02      	cmp	r3, #2
 800501c:	f2c0 8090 	blt.w	8005140 <Save_EEPROM+0x56c>
 8005020:	3b02      	subs	r3, #2
 8005022:	2b30      	cmp	r3, #48	; 0x30
 8005024:	f200 808c 	bhi.w	8005140 <Save_EEPROM+0x56c>
 8005028:	a201      	add	r2, pc, #4	; (adr r2, 8005030 <Save_EEPROM+0x45c>)
 800502a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800502e:	bf00      	nop
 8005030:	08005137 	.word	0x08005137
 8005034:	08005141 	.word	0x08005141
 8005038:	08005131 	.word	0x08005131
 800503c:	0800512b 	.word	0x0800512b
 8005040:	08005141 	.word	0x08005141
 8005044:	08005141 	.word	0x08005141
 8005048:	08005141 	.word	0x08005141
 800504c:	08005141 	.word	0x08005141
 8005050:	08005125 	.word	0x08005125
 8005054:	08005141 	.word	0x08005141
 8005058:	08005141 	.word	0x08005141
 800505c:	08005141 	.word	0x08005141
 8005060:	08005141 	.word	0x08005141
 8005064:	08005141 	.word	0x08005141
 8005068:	08005141 	.word	0x08005141
 800506c:	08005141 	.word	0x08005141
 8005070:	08005141 	.word	0x08005141
 8005074:	08005141 	.word	0x08005141
 8005078:	0800511f 	.word	0x0800511f
 800507c:	08005141 	.word	0x08005141
 8005080:	08005141 	.word	0x08005141
 8005084:	08005141 	.word	0x08005141
 8005088:	08005141 	.word	0x08005141
 800508c:	08005141 	.word	0x08005141
 8005090:	08005141 	.word	0x08005141
 8005094:	08005141 	.word	0x08005141
 8005098:	08005141 	.word	0x08005141
 800509c:	08005141 	.word	0x08005141
 80050a0:	08005141 	.word	0x08005141
 80050a4:	08005141 	.word	0x08005141
 80050a8:	08005141 	.word	0x08005141
 80050ac:	08005141 	.word	0x08005141
 80050b0:	08005141 	.word	0x08005141
 80050b4:	08005141 	.word	0x08005141
 80050b8:	08005141 	.word	0x08005141
 80050bc:	08005141 	.word	0x08005141
 80050c0:	08005141 	.word	0x08005141
 80050c4:	08005141 	.word	0x08005141
 80050c8:	08005119 	.word	0x08005119
 80050cc:	08005141 	.word	0x08005141
 80050d0:	08005141 	.word	0x08005141
 80050d4:	08005141 	.word	0x08005141
 80050d8:	08005141 	.word	0x08005141
 80050dc:	08005141 	.word	0x08005141
 80050e0:	08005141 	.word	0x08005141
 80050e4:	08005141 	.word	0x08005141
 80050e8:	08005141 	.word	0x08005141
 80050ec:	08005141 	.word	0x08005141
 80050f0:	08005113 	.word	0x08005113
 80050f4:	2b64      	cmp	r3, #100	; 0x64
 80050f6:	d009      	beq.n	800510c <Save_EEPROM+0x538>
 80050f8:	e022      	b.n	8005140 <Save_EEPROM+0x56c>
 80050fa:	2301      	movs	r3, #1
 80050fc:	743b      	strb	r3, [r7, #16]
 80050fe:	e021      	b.n	8005144 <Save_EEPROM+0x570>
 8005100:	2302      	movs	r3, #2
 8005102:	743b      	strb	r3, [r7, #16]
 8005104:	e01e      	b.n	8005144 <Save_EEPROM+0x570>
 8005106:	2303      	movs	r3, #3
 8005108:	743b      	strb	r3, [r7, #16]
 800510a:	e01b      	b.n	8005144 <Save_EEPROM+0x570>
 800510c:	2304      	movs	r3, #4
 800510e:	743b      	strb	r3, [r7, #16]
 8005110:	e018      	b.n	8005144 <Save_EEPROM+0x570>
 8005112:	2305      	movs	r3, #5
 8005114:	743b      	strb	r3, [r7, #16]
 8005116:	e015      	b.n	8005144 <Save_EEPROM+0x570>
 8005118:	2306      	movs	r3, #6
 800511a:	743b      	strb	r3, [r7, #16]
 800511c:	e012      	b.n	8005144 <Save_EEPROM+0x570>
 800511e:	2307      	movs	r3, #7
 8005120:	743b      	strb	r3, [r7, #16]
 8005122:	e00f      	b.n	8005144 <Save_EEPROM+0x570>
 8005124:	2308      	movs	r3, #8
 8005126:	743b      	strb	r3, [r7, #16]
 8005128:	e00c      	b.n	8005144 <Save_EEPROM+0x570>
 800512a:	2309      	movs	r3, #9
 800512c:	743b      	strb	r3, [r7, #16]
 800512e:	e009      	b.n	8005144 <Save_EEPROM+0x570>
 8005130:	230a      	movs	r3, #10
 8005132:	743b      	strb	r3, [r7, #16]
 8005134:	e006      	b.n	8005144 <Save_EEPROM+0x570>
 8005136:	230b      	movs	r3, #11
 8005138:	743b      	strb	r3, [r7, #16]
 800513a:	e003      	b.n	8005144 <Save_EEPROM+0x570>
 800513c:	20006714 	.word	0x20006714
 8005140:	2300      	movs	r3, #0
 8005142:	743b      	strb	r3, [r7, #16]
 8005144:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[5], perMsg[VERIFY_MSG]);
 8005146:	4baa      	ldr	r3, [pc, #680]	; (80053f0 <Save_EEPROM+0x81c>)
 8005148:	891b      	ldrh	r3, [r3, #8]
 800514a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800514e:	f000 8082 	beq.w	8005256 <Save_EEPROM+0x682>
 8005152:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005156:	f300 809f 	bgt.w	8005298 <Save_EEPROM+0x6c4>
 800515a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800515e:	d07d      	beq.n	800525c <Save_EEPROM+0x688>
 8005160:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005164:	f300 8098 	bgt.w	8005298 <Save_EEPROM+0x6c4>
 8005168:	2bc8      	cmp	r3, #200	; 0xc8
 800516a:	d07a      	beq.n	8005262 <Save_EEPROM+0x68e>
 800516c:	2bc8      	cmp	r3, #200	; 0xc8
 800516e:	f300 8093 	bgt.w	8005298 <Save_EEPROM+0x6c4>
 8005172:	2b32      	cmp	r3, #50	; 0x32
 8005174:	dc6c      	bgt.n	8005250 <Save_EEPROM+0x67c>
 8005176:	2b02      	cmp	r3, #2
 8005178:	f2c0 808e 	blt.w	8005298 <Save_EEPROM+0x6c4>
 800517c:	3b02      	subs	r3, #2
 800517e:	2b30      	cmp	r3, #48	; 0x30
 8005180:	f200 808a 	bhi.w	8005298 <Save_EEPROM+0x6c4>
 8005184:	a201      	add	r2, pc, #4	; (adr r2, 800518c <Save_EEPROM+0x5b8>)
 8005186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518a:	bf00      	nop
 800518c:	08005293 	.word	0x08005293
 8005190:	08005299 	.word	0x08005299
 8005194:	0800528d 	.word	0x0800528d
 8005198:	08005287 	.word	0x08005287
 800519c:	08005299 	.word	0x08005299
 80051a0:	08005299 	.word	0x08005299
 80051a4:	08005299 	.word	0x08005299
 80051a8:	08005299 	.word	0x08005299
 80051ac:	08005281 	.word	0x08005281
 80051b0:	08005299 	.word	0x08005299
 80051b4:	08005299 	.word	0x08005299
 80051b8:	08005299 	.word	0x08005299
 80051bc:	08005299 	.word	0x08005299
 80051c0:	08005299 	.word	0x08005299
 80051c4:	08005299 	.word	0x08005299
 80051c8:	08005299 	.word	0x08005299
 80051cc:	08005299 	.word	0x08005299
 80051d0:	08005299 	.word	0x08005299
 80051d4:	0800527b 	.word	0x0800527b
 80051d8:	08005299 	.word	0x08005299
 80051dc:	08005299 	.word	0x08005299
 80051e0:	08005299 	.word	0x08005299
 80051e4:	08005299 	.word	0x08005299
 80051e8:	08005299 	.word	0x08005299
 80051ec:	08005299 	.word	0x08005299
 80051f0:	08005299 	.word	0x08005299
 80051f4:	08005299 	.word	0x08005299
 80051f8:	08005299 	.word	0x08005299
 80051fc:	08005299 	.word	0x08005299
 8005200:	08005299 	.word	0x08005299
 8005204:	08005299 	.word	0x08005299
 8005208:	08005299 	.word	0x08005299
 800520c:	08005299 	.word	0x08005299
 8005210:	08005299 	.word	0x08005299
 8005214:	08005299 	.word	0x08005299
 8005218:	08005299 	.word	0x08005299
 800521c:	08005299 	.word	0x08005299
 8005220:	08005299 	.word	0x08005299
 8005224:	08005275 	.word	0x08005275
 8005228:	08005299 	.word	0x08005299
 800522c:	08005299 	.word	0x08005299
 8005230:	08005299 	.word	0x08005299
 8005234:	08005299 	.word	0x08005299
 8005238:	08005299 	.word	0x08005299
 800523c:	08005299 	.word	0x08005299
 8005240:	08005299 	.word	0x08005299
 8005244:	08005299 	.word	0x08005299
 8005248:	08005299 	.word	0x08005299
 800524c:	0800526f 	.word	0x0800526f
 8005250:	2b64      	cmp	r3, #100	; 0x64
 8005252:	d009      	beq.n	8005268 <Save_EEPROM+0x694>
 8005254:	e020      	b.n	8005298 <Save_EEPROM+0x6c4>
 8005256:	2301      	movs	r3, #1
 8005258:	747b      	strb	r3, [r7, #17]
 800525a:	e01f      	b.n	800529c <Save_EEPROM+0x6c8>
 800525c:	2302      	movs	r3, #2
 800525e:	747b      	strb	r3, [r7, #17]
 8005260:	e01c      	b.n	800529c <Save_EEPROM+0x6c8>
 8005262:	2303      	movs	r3, #3
 8005264:	747b      	strb	r3, [r7, #17]
 8005266:	e019      	b.n	800529c <Save_EEPROM+0x6c8>
 8005268:	2304      	movs	r3, #4
 800526a:	747b      	strb	r3, [r7, #17]
 800526c:	e016      	b.n	800529c <Save_EEPROM+0x6c8>
 800526e:	2305      	movs	r3, #5
 8005270:	747b      	strb	r3, [r7, #17]
 8005272:	e013      	b.n	800529c <Save_EEPROM+0x6c8>
 8005274:	2306      	movs	r3, #6
 8005276:	747b      	strb	r3, [r7, #17]
 8005278:	e010      	b.n	800529c <Save_EEPROM+0x6c8>
 800527a:	2307      	movs	r3, #7
 800527c:	747b      	strb	r3, [r7, #17]
 800527e:	e00d      	b.n	800529c <Save_EEPROM+0x6c8>
 8005280:	2308      	movs	r3, #8
 8005282:	747b      	strb	r3, [r7, #17]
 8005284:	e00a      	b.n	800529c <Save_EEPROM+0x6c8>
 8005286:	2309      	movs	r3, #9
 8005288:	747b      	strb	r3, [r7, #17]
 800528a:	e007      	b.n	800529c <Save_EEPROM+0x6c8>
 800528c:	230a      	movs	r3, #10
 800528e:	747b      	strb	r3, [r7, #17]
 8005290:	e004      	b.n	800529c <Save_EEPROM+0x6c8>
 8005292:	230b      	movs	r3, #11
 8005294:	747b      	strb	r3, [r7, #17]
 8005296:	e001      	b.n	800529c <Save_EEPROM+0x6c8>
 8005298:	2300      	movs	r3, #0
 800529a:	747b      	strb	r3, [r7, #17]
 800529c:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[6], perMsg[ECU_SAVE]);
 800529e:	4b54      	ldr	r3, [pc, #336]	; (80053f0 <Save_EEPROM+0x81c>)
 80052a0:	899b      	ldrh	r3, [r3, #12]
 80052a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052a6:	f000 8082 	beq.w	80053ae <Save_EEPROM+0x7da>
 80052aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052ae:	f300 80a1 	bgt.w	80053f4 <Save_EEPROM+0x820>
 80052b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80052b6:	d07d      	beq.n	80053b4 <Save_EEPROM+0x7e0>
 80052b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80052bc:	f300 809a 	bgt.w	80053f4 <Save_EEPROM+0x820>
 80052c0:	2bc8      	cmp	r3, #200	; 0xc8
 80052c2:	d07a      	beq.n	80053ba <Save_EEPROM+0x7e6>
 80052c4:	2bc8      	cmp	r3, #200	; 0xc8
 80052c6:	f300 8095 	bgt.w	80053f4 <Save_EEPROM+0x820>
 80052ca:	2b32      	cmp	r3, #50	; 0x32
 80052cc:	dc6c      	bgt.n	80053a8 <Save_EEPROM+0x7d4>
 80052ce:	2b02      	cmp	r3, #2
 80052d0:	f2c0 8090 	blt.w	80053f4 <Save_EEPROM+0x820>
 80052d4:	3b02      	subs	r3, #2
 80052d6:	2b30      	cmp	r3, #48	; 0x30
 80052d8:	f200 808c 	bhi.w	80053f4 <Save_EEPROM+0x820>
 80052dc:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <Save_EEPROM+0x710>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	080053eb 	.word	0x080053eb
 80052e8:	080053f5 	.word	0x080053f5
 80052ec:	080053e5 	.word	0x080053e5
 80052f0:	080053df 	.word	0x080053df
 80052f4:	080053f5 	.word	0x080053f5
 80052f8:	080053f5 	.word	0x080053f5
 80052fc:	080053f5 	.word	0x080053f5
 8005300:	080053f5 	.word	0x080053f5
 8005304:	080053d9 	.word	0x080053d9
 8005308:	080053f5 	.word	0x080053f5
 800530c:	080053f5 	.word	0x080053f5
 8005310:	080053f5 	.word	0x080053f5
 8005314:	080053f5 	.word	0x080053f5
 8005318:	080053f5 	.word	0x080053f5
 800531c:	080053f5 	.word	0x080053f5
 8005320:	080053f5 	.word	0x080053f5
 8005324:	080053f5 	.word	0x080053f5
 8005328:	080053f5 	.word	0x080053f5
 800532c:	080053d3 	.word	0x080053d3
 8005330:	080053f5 	.word	0x080053f5
 8005334:	080053f5 	.word	0x080053f5
 8005338:	080053f5 	.word	0x080053f5
 800533c:	080053f5 	.word	0x080053f5
 8005340:	080053f5 	.word	0x080053f5
 8005344:	080053f5 	.word	0x080053f5
 8005348:	080053f5 	.word	0x080053f5
 800534c:	080053f5 	.word	0x080053f5
 8005350:	080053f5 	.word	0x080053f5
 8005354:	080053f5 	.word	0x080053f5
 8005358:	080053f5 	.word	0x080053f5
 800535c:	080053f5 	.word	0x080053f5
 8005360:	080053f5 	.word	0x080053f5
 8005364:	080053f5 	.word	0x080053f5
 8005368:	080053f5 	.word	0x080053f5
 800536c:	080053f5 	.word	0x080053f5
 8005370:	080053f5 	.word	0x080053f5
 8005374:	080053f5 	.word	0x080053f5
 8005378:	080053f5 	.word	0x080053f5
 800537c:	080053cd 	.word	0x080053cd
 8005380:	080053f5 	.word	0x080053f5
 8005384:	080053f5 	.word	0x080053f5
 8005388:	080053f5 	.word	0x080053f5
 800538c:	080053f5 	.word	0x080053f5
 8005390:	080053f5 	.word	0x080053f5
 8005394:	080053f5 	.word	0x080053f5
 8005398:	080053f5 	.word	0x080053f5
 800539c:	080053f5 	.word	0x080053f5
 80053a0:	080053f5 	.word	0x080053f5
 80053a4:	080053c7 	.word	0x080053c7
 80053a8:	2b64      	cmp	r3, #100	; 0x64
 80053aa:	d009      	beq.n	80053c0 <Save_EEPROM+0x7ec>
 80053ac:	e022      	b.n	80053f4 <Save_EEPROM+0x820>
 80053ae:	2301      	movs	r3, #1
 80053b0:	74bb      	strb	r3, [r7, #18]
 80053b2:	e021      	b.n	80053f8 <Save_EEPROM+0x824>
 80053b4:	2302      	movs	r3, #2
 80053b6:	74bb      	strb	r3, [r7, #18]
 80053b8:	e01e      	b.n	80053f8 <Save_EEPROM+0x824>
 80053ba:	2303      	movs	r3, #3
 80053bc:	74bb      	strb	r3, [r7, #18]
 80053be:	e01b      	b.n	80053f8 <Save_EEPROM+0x824>
 80053c0:	2304      	movs	r3, #4
 80053c2:	74bb      	strb	r3, [r7, #18]
 80053c4:	e018      	b.n	80053f8 <Save_EEPROM+0x824>
 80053c6:	2305      	movs	r3, #5
 80053c8:	74bb      	strb	r3, [r7, #18]
 80053ca:	e015      	b.n	80053f8 <Save_EEPROM+0x824>
 80053cc:	2306      	movs	r3, #6
 80053ce:	74bb      	strb	r3, [r7, #18]
 80053d0:	e012      	b.n	80053f8 <Save_EEPROM+0x824>
 80053d2:	2307      	movs	r3, #7
 80053d4:	74bb      	strb	r3, [r7, #18]
 80053d6:	e00f      	b.n	80053f8 <Save_EEPROM+0x824>
 80053d8:	2308      	movs	r3, #8
 80053da:	74bb      	strb	r3, [r7, #18]
 80053dc:	e00c      	b.n	80053f8 <Save_EEPROM+0x824>
 80053de:	2309      	movs	r3, #9
 80053e0:	74bb      	strb	r3, [r7, #18]
 80053e2:	e009      	b.n	80053f8 <Save_EEPROM+0x824>
 80053e4:	230a      	movs	r3, #10
 80053e6:	74bb      	strb	r3, [r7, #18]
 80053e8:	e006      	b.n	80053f8 <Save_EEPROM+0x824>
 80053ea:	230b      	movs	r3, #11
 80053ec:	74bb      	strb	r3, [r7, #18]
 80053ee:	e003      	b.n	80053f8 <Save_EEPROM+0x824>
 80053f0:	20006714 	.word	0x20006714
 80053f4:	2300      	movs	r3, #0
 80053f6:	74bb      	strb	r3, [r7, #18]
 80053f8:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[7], perMsg[PDM_SAVE]);
 80053fa:	4baa      	ldr	r3, [pc, #680]	; (80056a4 <Save_EEPROM+0xad0>)
 80053fc:	89db      	ldrh	r3, [r3, #14]
 80053fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005402:	f000 8082 	beq.w	800550a <Save_EEPROM+0x936>
 8005406:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800540a:	f300 809f 	bgt.w	800554c <Save_EEPROM+0x978>
 800540e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005412:	d07d      	beq.n	8005510 <Save_EEPROM+0x93c>
 8005414:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005418:	f300 8098 	bgt.w	800554c <Save_EEPROM+0x978>
 800541c:	2bc8      	cmp	r3, #200	; 0xc8
 800541e:	d07a      	beq.n	8005516 <Save_EEPROM+0x942>
 8005420:	2bc8      	cmp	r3, #200	; 0xc8
 8005422:	f300 8093 	bgt.w	800554c <Save_EEPROM+0x978>
 8005426:	2b32      	cmp	r3, #50	; 0x32
 8005428:	dc6c      	bgt.n	8005504 <Save_EEPROM+0x930>
 800542a:	2b02      	cmp	r3, #2
 800542c:	f2c0 808e 	blt.w	800554c <Save_EEPROM+0x978>
 8005430:	3b02      	subs	r3, #2
 8005432:	2b30      	cmp	r3, #48	; 0x30
 8005434:	f200 808a 	bhi.w	800554c <Save_EEPROM+0x978>
 8005438:	a201      	add	r2, pc, #4	; (adr r2, 8005440 <Save_EEPROM+0x86c>)
 800543a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543e:	bf00      	nop
 8005440:	08005547 	.word	0x08005547
 8005444:	0800554d 	.word	0x0800554d
 8005448:	08005541 	.word	0x08005541
 800544c:	0800553b 	.word	0x0800553b
 8005450:	0800554d 	.word	0x0800554d
 8005454:	0800554d 	.word	0x0800554d
 8005458:	0800554d 	.word	0x0800554d
 800545c:	0800554d 	.word	0x0800554d
 8005460:	08005535 	.word	0x08005535
 8005464:	0800554d 	.word	0x0800554d
 8005468:	0800554d 	.word	0x0800554d
 800546c:	0800554d 	.word	0x0800554d
 8005470:	0800554d 	.word	0x0800554d
 8005474:	0800554d 	.word	0x0800554d
 8005478:	0800554d 	.word	0x0800554d
 800547c:	0800554d 	.word	0x0800554d
 8005480:	0800554d 	.word	0x0800554d
 8005484:	0800554d 	.word	0x0800554d
 8005488:	0800552f 	.word	0x0800552f
 800548c:	0800554d 	.word	0x0800554d
 8005490:	0800554d 	.word	0x0800554d
 8005494:	0800554d 	.word	0x0800554d
 8005498:	0800554d 	.word	0x0800554d
 800549c:	0800554d 	.word	0x0800554d
 80054a0:	0800554d 	.word	0x0800554d
 80054a4:	0800554d 	.word	0x0800554d
 80054a8:	0800554d 	.word	0x0800554d
 80054ac:	0800554d 	.word	0x0800554d
 80054b0:	0800554d 	.word	0x0800554d
 80054b4:	0800554d 	.word	0x0800554d
 80054b8:	0800554d 	.word	0x0800554d
 80054bc:	0800554d 	.word	0x0800554d
 80054c0:	0800554d 	.word	0x0800554d
 80054c4:	0800554d 	.word	0x0800554d
 80054c8:	0800554d 	.word	0x0800554d
 80054cc:	0800554d 	.word	0x0800554d
 80054d0:	0800554d 	.word	0x0800554d
 80054d4:	0800554d 	.word	0x0800554d
 80054d8:	08005529 	.word	0x08005529
 80054dc:	0800554d 	.word	0x0800554d
 80054e0:	0800554d 	.word	0x0800554d
 80054e4:	0800554d 	.word	0x0800554d
 80054e8:	0800554d 	.word	0x0800554d
 80054ec:	0800554d 	.word	0x0800554d
 80054f0:	0800554d 	.word	0x0800554d
 80054f4:	0800554d 	.word	0x0800554d
 80054f8:	0800554d 	.word	0x0800554d
 80054fc:	0800554d 	.word	0x0800554d
 8005500:	08005523 	.word	0x08005523
 8005504:	2b64      	cmp	r3, #100	; 0x64
 8005506:	d009      	beq.n	800551c <Save_EEPROM+0x948>
 8005508:	e020      	b.n	800554c <Save_EEPROM+0x978>
 800550a:	2301      	movs	r3, #1
 800550c:	74fb      	strb	r3, [r7, #19]
 800550e:	e01f      	b.n	8005550 <Save_EEPROM+0x97c>
 8005510:	2302      	movs	r3, #2
 8005512:	74fb      	strb	r3, [r7, #19]
 8005514:	e01c      	b.n	8005550 <Save_EEPROM+0x97c>
 8005516:	2303      	movs	r3, #3
 8005518:	74fb      	strb	r3, [r7, #19]
 800551a:	e019      	b.n	8005550 <Save_EEPROM+0x97c>
 800551c:	2304      	movs	r3, #4
 800551e:	74fb      	strb	r3, [r7, #19]
 8005520:	e016      	b.n	8005550 <Save_EEPROM+0x97c>
 8005522:	2305      	movs	r3, #5
 8005524:	74fb      	strb	r3, [r7, #19]
 8005526:	e013      	b.n	8005550 <Save_EEPROM+0x97c>
 8005528:	2306      	movs	r3, #6
 800552a:	74fb      	strb	r3, [r7, #19]
 800552c:	e010      	b.n	8005550 <Save_EEPROM+0x97c>
 800552e:	2307      	movs	r3, #7
 8005530:	74fb      	strb	r3, [r7, #19]
 8005532:	e00d      	b.n	8005550 <Save_EEPROM+0x97c>
 8005534:	2308      	movs	r3, #8
 8005536:	74fb      	strb	r3, [r7, #19]
 8005538:	e00a      	b.n	8005550 <Save_EEPROM+0x97c>
 800553a:	2309      	movs	r3, #9
 800553c:	74fb      	strb	r3, [r7, #19]
 800553e:	e007      	b.n	8005550 <Save_EEPROM+0x97c>
 8005540:	230a      	movs	r3, #10
 8005542:	74fb      	strb	r3, [r7, #19]
 8005544:	e004      	b.n	8005550 <Save_EEPROM+0x97c>
 8005546:	230b      	movs	r3, #11
 8005548:	74fb      	strb	r3, [r7, #19]
 800554a:	e001      	b.n	8005550 <Save_EEPROM+0x97c>
 800554c:	2300      	movs	r3, #0
 800554e:	74fb      	strb	r3, [r7, #19]
 8005550:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[8], perCAN[ANALOG_1_4]);
 8005552:	4b55      	ldr	r3, [pc, #340]	; (80056a8 <Save_EEPROM+0xad4>)
 8005554:	881b      	ldrh	r3, [r3, #0]
 8005556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800555a:	f000 8082 	beq.w	8005662 <Save_EEPROM+0xa8e>
 800555e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005562:	f300 80a3 	bgt.w	80056ac <Save_EEPROM+0xad8>
 8005566:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800556a:	d07d      	beq.n	8005668 <Save_EEPROM+0xa94>
 800556c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005570:	f300 809c 	bgt.w	80056ac <Save_EEPROM+0xad8>
 8005574:	2bc8      	cmp	r3, #200	; 0xc8
 8005576:	d07a      	beq.n	800566e <Save_EEPROM+0xa9a>
 8005578:	2bc8      	cmp	r3, #200	; 0xc8
 800557a:	f300 8097 	bgt.w	80056ac <Save_EEPROM+0xad8>
 800557e:	2b32      	cmp	r3, #50	; 0x32
 8005580:	dc6c      	bgt.n	800565c <Save_EEPROM+0xa88>
 8005582:	2b02      	cmp	r3, #2
 8005584:	f2c0 8092 	blt.w	80056ac <Save_EEPROM+0xad8>
 8005588:	3b02      	subs	r3, #2
 800558a:	2b30      	cmp	r3, #48	; 0x30
 800558c:	f200 808e 	bhi.w	80056ac <Save_EEPROM+0xad8>
 8005590:	a201      	add	r2, pc, #4	; (adr r2, 8005598 <Save_EEPROM+0x9c4>)
 8005592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005596:	bf00      	nop
 8005598:	0800569f 	.word	0x0800569f
 800559c:	080056ad 	.word	0x080056ad
 80055a0:	08005699 	.word	0x08005699
 80055a4:	08005693 	.word	0x08005693
 80055a8:	080056ad 	.word	0x080056ad
 80055ac:	080056ad 	.word	0x080056ad
 80055b0:	080056ad 	.word	0x080056ad
 80055b4:	080056ad 	.word	0x080056ad
 80055b8:	0800568d 	.word	0x0800568d
 80055bc:	080056ad 	.word	0x080056ad
 80055c0:	080056ad 	.word	0x080056ad
 80055c4:	080056ad 	.word	0x080056ad
 80055c8:	080056ad 	.word	0x080056ad
 80055cc:	080056ad 	.word	0x080056ad
 80055d0:	080056ad 	.word	0x080056ad
 80055d4:	080056ad 	.word	0x080056ad
 80055d8:	080056ad 	.word	0x080056ad
 80055dc:	080056ad 	.word	0x080056ad
 80055e0:	08005687 	.word	0x08005687
 80055e4:	080056ad 	.word	0x080056ad
 80055e8:	080056ad 	.word	0x080056ad
 80055ec:	080056ad 	.word	0x080056ad
 80055f0:	080056ad 	.word	0x080056ad
 80055f4:	080056ad 	.word	0x080056ad
 80055f8:	080056ad 	.word	0x080056ad
 80055fc:	080056ad 	.word	0x080056ad
 8005600:	080056ad 	.word	0x080056ad
 8005604:	080056ad 	.word	0x080056ad
 8005608:	080056ad 	.word	0x080056ad
 800560c:	080056ad 	.word	0x080056ad
 8005610:	080056ad 	.word	0x080056ad
 8005614:	080056ad 	.word	0x080056ad
 8005618:	080056ad 	.word	0x080056ad
 800561c:	080056ad 	.word	0x080056ad
 8005620:	080056ad 	.word	0x080056ad
 8005624:	080056ad 	.word	0x080056ad
 8005628:	080056ad 	.word	0x080056ad
 800562c:	080056ad 	.word	0x080056ad
 8005630:	08005681 	.word	0x08005681
 8005634:	080056ad 	.word	0x080056ad
 8005638:	080056ad 	.word	0x080056ad
 800563c:	080056ad 	.word	0x080056ad
 8005640:	080056ad 	.word	0x080056ad
 8005644:	080056ad 	.word	0x080056ad
 8005648:	080056ad 	.word	0x080056ad
 800564c:	080056ad 	.word	0x080056ad
 8005650:	080056ad 	.word	0x080056ad
 8005654:	080056ad 	.word	0x080056ad
 8005658:	0800567b 	.word	0x0800567b
 800565c:	2b64      	cmp	r3, #100	; 0x64
 800565e:	d009      	beq.n	8005674 <Save_EEPROM+0xaa0>
 8005660:	e024      	b.n	80056ac <Save_EEPROM+0xad8>
 8005662:	2301      	movs	r3, #1
 8005664:	753b      	strb	r3, [r7, #20]
 8005666:	e023      	b.n	80056b0 <Save_EEPROM+0xadc>
 8005668:	2302      	movs	r3, #2
 800566a:	753b      	strb	r3, [r7, #20]
 800566c:	e020      	b.n	80056b0 <Save_EEPROM+0xadc>
 800566e:	2303      	movs	r3, #3
 8005670:	753b      	strb	r3, [r7, #20]
 8005672:	e01d      	b.n	80056b0 <Save_EEPROM+0xadc>
 8005674:	2304      	movs	r3, #4
 8005676:	753b      	strb	r3, [r7, #20]
 8005678:	e01a      	b.n	80056b0 <Save_EEPROM+0xadc>
 800567a:	2305      	movs	r3, #5
 800567c:	753b      	strb	r3, [r7, #20]
 800567e:	e017      	b.n	80056b0 <Save_EEPROM+0xadc>
 8005680:	2306      	movs	r3, #6
 8005682:	753b      	strb	r3, [r7, #20]
 8005684:	e014      	b.n	80056b0 <Save_EEPROM+0xadc>
 8005686:	2307      	movs	r3, #7
 8005688:	753b      	strb	r3, [r7, #20]
 800568a:	e011      	b.n	80056b0 <Save_EEPROM+0xadc>
 800568c:	2308      	movs	r3, #8
 800568e:	753b      	strb	r3, [r7, #20]
 8005690:	e00e      	b.n	80056b0 <Save_EEPROM+0xadc>
 8005692:	2309      	movs	r3, #9
 8005694:	753b      	strb	r3, [r7, #20]
 8005696:	e00b      	b.n	80056b0 <Save_EEPROM+0xadc>
 8005698:	230a      	movs	r3, #10
 800569a:	753b      	strb	r3, [r7, #20]
 800569c:	e008      	b.n	80056b0 <Save_EEPROM+0xadc>
 800569e:	230b      	movs	r3, #11
 80056a0:	753b      	strb	r3, [r7, #20]
 80056a2:	e005      	b.n	80056b0 <Save_EEPROM+0xadc>
 80056a4:	20006714 	.word	0x20006714
 80056a8:	20006708 	.word	0x20006708
 80056ac:	2300      	movs	r3, #0
 80056ae:	753b      	strb	r3, [r7, #20]
 80056b0:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[9], perCAN[ANALOG_5_8]);
 80056b2:	4baa      	ldr	r3, [pc, #680]	; (800595c <Save_EEPROM+0xd88>)
 80056b4:	885b      	ldrh	r3, [r3, #2]
 80056b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056ba:	f000 8082 	beq.w	80057c2 <Save_EEPROM+0xbee>
 80056be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056c2:	f300 809f 	bgt.w	8005804 <Save_EEPROM+0xc30>
 80056c6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80056ca:	d07d      	beq.n	80057c8 <Save_EEPROM+0xbf4>
 80056cc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80056d0:	f300 8098 	bgt.w	8005804 <Save_EEPROM+0xc30>
 80056d4:	2bc8      	cmp	r3, #200	; 0xc8
 80056d6:	d07a      	beq.n	80057ce <Save_EEPROM+0xbfa>
 80056d8:	2bc8      	cmp	r3, #200	; 0xc8
 80056da:	f300 8093 	bgt.w	8005804 <Save_EEPROM+0xc30>
 80056de:	2b32      	cmp	r3, #50	; 0x32
 80056e0:	dc6c      	bgt.n	80057bc <Save_EEPROM+0xbe8>
 80056e2:	2b02      	cmp	r3, #2
 80056e4:	f2c0 808e 	blt.w	8005804 <Save_EEPROM+0xc30>
 80056e8:	3b02      	subs	r3, #2
 80056ea:	2b30      	cmp	r3, #48	; 0x30
 80056ec:	f200 808a 	bhi.w	8005804 <Save_EEPROM+0xc30>
 80056f0:	a201      	add	r2, pc, #4	; (adr r2, 80056f8 <Save_EEPROM+0xb24>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	080057ff 	.word	0x080057ff
 80056fc:	08005805 	.word	0x08005805
 8005700:	080057f9 	.word	0x080057f9
 8005704:	080057f3 	.word	0x080057f3
 8005708:	08005805 	.word	0x08005805
 800570c:	08005805 	.word	0x08005805
 8005710:	08005805 	.word	0x08005805
 8005714:	08005805 	.word	0x08005805
 8005718:	080057ed 	.word	0x080057ed
 800571c:	08005805 	.word	0x08005805
 8005720:	08005805 	.word	0x08005805
 8005724:	08005805 	.word	0x08005805
 8005728:	08005805 	.word	0x08005805
 800572c:	08005805 	.word	0x08005805
 8005730:	08005805 	.word	0x08005805
 8005734:	08005805 	.word	0x08005805
 8005738:	08005805 	.word	0x08005805
 800573c:	08005805 	.word	0x08005805
 8005740:	080057e7 	.word	0x080057e7
 8005744:	08005805 	.word	0x08005805
 8005748:	08005805 	.word	0x08005805
 800574c:	08005805 	.word	0x08005805
 8005750:	08005805 	.word	0x08005805
 8005754:	08005805 	.word	0x08005805
 8005758:	08005805 	.word	0x08005805
 800575c:	08005805 	.word	0x08005805
 8005760:	08005805 	.word	0x08005805
 8005764:	08005805 	.word	0x08005805
 8005768:	08005805 	.word	0x08005805
 800576c:	08005805 	.word	0x08005805
 8005770:	08005805 	.word	0x08005805
 8005774:	08005805 	.word	0x08005805
 8005778:	08005805 	.word	0x08005805
 800577c:	08005805 	.word	0x08005805
 8005780:	08005805 	.word	0x08005805
 8005784:	08005805 	.word	0x08005805
 8005788:	08005805 	.word	0x08005805
 800578c:	08005805 	.word	0x08005805
 8005790:	080057e1 	.word	0x080057e1
 8005794:	08005805 	.word	0x08005805
 8005798:	08005805 	.word	0x08005805
 800579c:	08005805 	.word	0x08005805
 80057a0:	08005805 	.word	0x08005805
 80057a4:	08005805 	.word	0x08005805
 80057a8:	08005805 	.word	0x08005805
 80057ac:	08005805 	.word	0x08005805
 80057b0:	08005805 	.word	0x08005805
 80057b4:	08005805 	.word	0x08005805
 80057b8:	080057db 	.word	0x080057db
 80057bc:	2b64      	cmp	r3, #100	; 0x64
 80057be:	d009      	beq.n	80057d4 <Save_EEPROM+0xc00>
 80057c0:	e020      	b.n	8005804 <Save_EEPROM+0xc30>
 80057c2:	2301      	movs	r3, #1
 80057c4:	757b      	strb	r3, [r7, #21]
 80057c6:	e01f      	b.n	8005808 <Save_EEPROM+0xc34>
 80057c8:	2302      	movs	r3, #2
 80057ca:	757b      	strb	r3, [r7, #21]
 80057cc:	e01c      	b.n	8005808 <Save_EEPROM+0xc34>
 80057ce:	2303      	movs	r3, #3
 80057d0:	757b      	strb	r3, [r7, #21]
 80057d2:	e019      	b.n	8005808 <Save_EEPROM+0xc34>
 80057d4:	2304      	movs	r3, #4
 80057d6:	757b      	strb	r3, [r7, #21]
 80057d8:	e016      	b.n	8005808 <Save_EEPROM+0xc34>
 80057da:	2305      	movs	r3, #5
 80057dc:	757b      	strb	r3, [r7, #21]
 80057de:	e013      	b.n	8005808 <Save_EEPROM+0xc34>
 80057e0:	2306      	movs	r3, #6
 80057e2:	757b      	strb	r3, [r7, #21]
 80057e4:	e010      	b.n	8005808 <Save_EEPROM+0xc34>
 80057e6:	2307      	movs	r3, #7
 80057e8:	757b      	strb	r3, [r7, #21]
 80057ea:	e00d      	b.n	8005808 <Save_EEPROM+0xc34>
 80057ec:	2308      	movs	r3, #8
 80057ee:	757b      	strb	r3, [r7, #21]
 80057f0:	e00a      	b.n	8005808 <Save_EEPROM+0xc34>
 80057f2:	2309      	movs	r3, #9
 80057f4:	757b      	strb	r3, [r7, #21]
 80057f6:	e007      	b.n	8005808 <Save_EEPROM+0xc34>
 80057f8:	230a      	movs	r3, #10
 80057fa:	757b      	strb	r3, [r7, #21]
 80057fc:	e004      	b.n	8005808 <Save_EEPROM+0xc34>
 80057fe:	230b      	movs	r3, #11
 8005800:	757b      	strb	r3, [r7, #21]
 8005802:	e001      	b.n	8005808 <Save_EEPROM+0xc34>
 8005804:	2300      	movs	r3, #0
 8005806:	757b      	strb	r3, [r7, #21]
 8005808:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[10], perCAN[ANALOG_9_12]);
 800580a:	4b54      	ldr	r3, [pc, #336]	; (800595c <Save_EEPROM+0xd88>)
 800580c:	889b      	ldrh	r3, [r3, #4]
 800580e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005812:	f000 8082 	beq.w	800591a <Save_EEPROM+0xd46>
 8005816:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800581a:	f300 80a1 	bgt.w	8005960 <Save_EEPROM+0xd8c>
 800581e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005822:	d07d      	beq.n	8005920 <Save_EEPROM+0xd4c>
 8005824:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005828:	f300 809a 	bgt.w	8005960 <Save_EEPROM+0xd8c>
 800582c:	2bc8      	cmp	r3, #200	; 0xc8
 800582e:	d07a      	beq.n	8005926 <Save_EEPROM+0xd52>
 8005830:	2bc8      	cmp	r3, #200	; 0xc8
 8005832:	f300 8095 	bgt.w	8005960 <Save_EEPROM+0xd8c>
 8005836:	2b32      	cmp	r3, #50	; 0x32
 8005838:	dc6c      	bgt.n	8005914 <Save_EEPROM+0xd40>
 800583a:	2b02      	cmp	r3, #2
 800583c:	f2c0 8090 	blt.w	8005960 <Save_EEPROM+0xd8c>
 8005840:	3b02      	subs	r3, #2
 8005842:	2b30      	cmp	r3, #48	; 0x30
 8005844:	f200 808c 	bhi.w	8005960 <Save_EEPROM+0xd8c>
 8005848:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <Save_EEPROM+0xc7c>)
 800584a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584e:	bf00      	nop
 8005850:	08005957 	.word	0x08005957
 8005854:	08005961 	.word	0x08005961
 8005858:	08005951 	.word	0x08005951
 800585c:	0800594b 	.word	0x0800594b
 8005860:	08005961 	.word	0x08005961
 8005864:	08005961 	.word	0x08005961
 8005868:	08005961 	.word	0x08005961
 800586c:	08005961 	.word	0x08005961
 8005870:	08005945 	.word	0x08005945
 8005874:	08005961 	.word	0x08005961
 8005878:	08005961 	.word	0x08005961
 800587c:	08005961 	.word	0x08005961
 8005880:	08005961 	.word	0x08005961
 8005884:	08005961 	.word	0x08005961
 8005888:	08005961 	.word	0x08005961
 800588c:	08005961 	.word	0x08005961
 8005890:	08005961 	.word	0x08005961
 8005894:	08005961 	.word	0x08005961
 8005898:	0800593f 	.word	0x0800593f
 800589c:	08005961 	.word	0x08005961
 80058a0:	08005961 	.word	0x08005961
 80058a4:	08005961 	.word	0x08005961
 80058a8:	08005961 	.word	0x08005961
 80058ac:	08005961 	.word	0x08005961
 80058b0:	08005961 	.word	0x08005961
 80058b4:	08005961 	.word	0x08005961
 80058b8:	08005961 	.word	0x08005961
 80058bc:	08005961 	.word	0x08005961
 80058c0:	08005961 	.word	0x08005961
 80058c4:	08005961 	.word	0x08005961
 80058c8:	08005961 	.word	0x08005961
 80058cc:	08005961 	.word	0x08005961
 80058d0:	08005961 	.word	0x08005961
 80058d4:	08005961 	.word	0x08005961
 80058d8:	08005961 	.word	0x08005961
 80058dc:	08005961 	.word	0x08005961
 80058e0:	08005961 	.word	0x08005961
 80058e4:	08005961 	.word	0x08005961
 80058e8:	08005939 	.word	0x08005939
 80058ec:	08005961 	.word	0x08005961
 80058f0:	08005961 	.word	0x08005961
 80058f4:	08005961 	.word	0x08005961
 80058f8:	08005961 	.word	0x08005961
 80058fc:	08005961 	.word	0x08005961
 8005900:	08005961 	.word	0x08005961
 8005904:	08005961 	.word	0x08005961
 8005908:	08005961 	.word	0x08005961
 800590c:	08005961 	.word	0x08005961
 8005910:	08005933 	.word	0x08005933
 8005914:	2b64      	cmp	r3, #100	; 0x64
 8005916:	d009      	beq.n	800592c <Save_EEPROM+0xd58>
 8005918:	e022      	b.n	8005960 <Save_EEPROM+0xd8c>
 800591a:	2301      	movs	r3, #1
 800591c:	75bb      	strb	r3, [r7, #22]
 800591e:	e021      	b.n	8005964 <Save_EEPROM+0xd90>
 8005920:	2302      	movs	r3, #2
 8005922:	75bb      	strb	r3, [r7, #22]
 8005924:	e01e      	b.n	8005964 <Save_EEPROM+0xd90>
 8005926:	2303      	movs	r3, #3
 8005928:	75bb      	strb	r3, [r7, #22]
 800592a:	e01b      	b.n	8005964 <Save_EEPROM+0xd90>
 800592c:	2304      	movs	r3, #4
 800592e:	75bb      	strb	r3, [r7, #22]
 8005930:	e018      	b.n	8005964 <Save_EEPROM+0xd90>
 8005932:	2305      	movs	r3, #5
 8005934:	75bb      	strb	r3, [r7, #22]
 8005936:	e015      	b.n	8005964 <Save_EEPROM+0xd90>
 8005938:	2306      	movs	r3, #6
 800593a:	75bb      	strb	r3, [r7, #22]
 800593c:	e012      	b.n	8005964 <Save_EEPROM+0xd90>
 800593e:	2307      	movs	r3, #7
 8005940:	75bb      	strb	r3, [r7, #22]
 8005942:	e00f      	b.n	8005964 <Save_EEPROM+0xd90>
 8005944:	2308      	movs	r3, #8
 8005946:	75bb      	strb	r3, [r7, #22]
 8005948:	e00c      	b.n	8005964 <Save_EEPROM+0xd90>
 800594a:	2309      	movs	r3, #9
 800594c:	75bb      	strb	r3, [r7, #22]
 800594e:	e009      	b.n	8005964 <Save_EEPROM+0xd90>
 8005950:	230a      	movs	r3, #10
 8005952:	75bb      	strb	r3, [r7, #22]
 8005954:	e006      	b.n	8005964 <Save_EEPROM+0xd90>
 8005956:	230b      	movs	r3, #11
 8005958:	75bb      	strb	r3, [r7, #22]
 800595a:	e003      	b.n	8005964 <Save_EEPROM+0xd90>
 800595c:	20006708 	.word	0x20006708
 8005960:	2300      	movs	r3, #0
 8005962:	75bb      	strb	r3, [r7, #22]
 8005964:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[11], perCAN[RTC_MSG]);
 8005966:	4bcd      	ldr	r3, [pc, #820]	; (8005c9c <Save_EEPROM+0x10c8>)
 8005968:	88db      	ldrh	r3, [r3, #6]
 800596a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800596e:	f000 8082 	beq.w	8005a76 <Save_EEPROM+0xea2>
 8005972:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005976:	f300 809f 	bgt.w	8005ab8 <Save_EEPROM+0xee4>
 800597a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800597e:	d07d      	beq.n	8005a7c <Save_EEPROM+0xea8>
 8005980:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005984:	f300 8098 	bgt.w	8005ab8 <Save_EEPROM+0xee4>
 8005988:	2bc8      	cmp	r3, #200	; 0xc8
 800598a:	d07a      	beq.n	8005a82 <Save_EEPROM+0xeae>
 800598c:	2bc8      	cmp	r3, #200	; 0xc8
 800598e:	f300 8093 	bgt.w	8005ab8 <Save_EEPROM+0xee4>
 8005992:	2b32      	cmp	r3, #50	; 0x32
 8005994:	dc6c      	bgt.n	8005a70 <Save_EEPROM+0xe9c>
 8005996:	2b02      	cmp	r3, #2
 8005998:	f2c0 808e 	blt.w	8005ab8 <Save_EEPROM+0xee4>
 800599c:	3b02      	subs	r3, #2
 800599e:	2b30      	cmp	r3, #48	; 0x30
 80059a0:	f200 808a 	bhi.w	8005ab8 <Save_EEPROM+0xee4>
 80059a4:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <Save_EEPROM+0xdd8>)
 80059a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059aa:	bf00      	nop
 80059ac:	08005ab3 	.word	0x08005ab3
 80059b0:	08005ab9 	.word	0x08005ab9
 80059b4:	08005aad 	.word	0x08005aad
 80059b8:	08005aa7 	.word	0x08005aa7
 80059bc:	08005ab9 	.word	0x08005ab9
 80059c0:	08005ab9 	.word	0x08005ab9
 80059c4:	08005ab9 	.word	0x08005ab9
 80059c8:	08005ab9 	.word	0x08005ab9
 80059cc:	08005aa1 	.word	0x08005aa1
 80059d0:	08005ab9 	.word	0x08005ab9
 80059d4:	08005ab9 	.word	0x08005ab9
 80059d8:	08005ab9 	.word	0x08005ab9
 80059dc:	08005ab9 	.word	0x08005ab9
 80059e0:	08005ab9 	.word	0x08005ab9
 80059e4:	08005ab9 	.word	0x08005ab9
 80059e8:	08005ab9 	.word	0x08005ab9
 80059ec:	08005ab9 	.word	0x08005ab9
 80059f0:	08005ab9 	.word	0x08005ab9
 80059f4:	08005a9b 	.word	0x08005a9b
 80059f8:	08005ab9 	.word	0x08005ab9
 80059fc:	08005ab9 	.word	0x08005ab9
 8005a00:	08005ab9 	.word	0x08005ab9
 8005a04:	08005ab9 	.word	0x08005ab9
 8005a08:	08005ab9 	.word	0x08005ab9
 8005a0c:	08005ab9 	.word	0x08005ab9
 8005a10:	08005ab9 	.word	0x08005ab9
 8005a14:	08005ab9 	.word	0x08005ab9
 8005a18:	08005ab9 	.word	0x08005ab9
 8005a1c:	08005ab9 	.word	0x08005ab9
 8005a20:	08005ab9 	.word	0x08005ab9
 8005a24:	08005ab9 	.word	0x08005ab9
 8005a28:	08005ab9 	.word	0x08005ab9
 8005a2c:	08005ab9 	.word	0x08005ab9
 8005a30:	08005ab9 	.word	0x08005ab9
 8005a34:	08005ab9 	.word	0x08005ab9
 8005a38:	08005ab9 	.word	0x08005ab9
 8005a3c:	08005ab9 	.word	0x08005ab9
 8005a40:	08005ab9 	.word	0x08005ab9
 8005a44:	08005a95 	.word	0x08005a95
 8005a48:	08005ab9 	.word	0x08005ab9
 8005a4c:	08005ab9 	.word	0x08005ab9
 8005a50:	08005ab9 	.word	0x08005ab9
 8005a54:	08005ab9 	.word	0x08005ab9
 8005a58:	08005ab9 	.word	0x08005ab9
 8005a5c:	08005ab9 	.word	0x08005ab9
 8005a60:	08005ab9 	.word	0x08005ab9
 8005a64:	08005ab9 	.word	0x08005ab9
 8005a68:	08005ab9 	.word	0x08005ab9
 8005a6c:	08005a8f 	.word	0x08005a8f
 8005a70:	2b64      	cmp	r3, #100	; 0x64
 8005a72:	d009      	beq.n	8005a88 <Save_EEPROM+0xeb4>
 8005a74:	e020      	b.n	8005ab8 <Save_EEPROM+0xee4>
 8005a76:	2301      	movs	r3, #1
 8005a78:	75fb      	strb	r3, [r7, #23]
 8005a7a:	e01f      	b.n	8005abc <Save_EEPROM+0xee8>
 8005a7c:	2302      	movs	r3, #2
 8005a7e:	75fb      	strb	r3, [r7, #23]
 8005a80:	e01c      	b.n	8005abc <Save_EEPROM+0xee8>
 8005a82:	2303      	movs	r3, #3
 8005a84:	75fb      	strb	r3, [r7, #23]
 8005a86:	e019      	b.n	8005abc <Save_EEPROM+0xee8>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	75fb      	strb	r3, [r7, #23]
 8005a8c:	e016      	b.n	8005abc <Save_EEPROM+0xee8>
 8005a8e:	2305      	movs	r3, #5
 8005a90:	75fb      	strb	r3, [r7, #23]
 8005a92:	e013      	b.n	8005abc <Save_EEPROM+0xee8>
 8005a94:	2306      	movs	r3, #6
 8005a96:	75fb      	strb	r3, [r7, #23]
 8005a98:	e010      	b.n	8005abc <Save_EEPROM+0xee8>
 8005a9a:	2307      	movs	r3, #7
 8005a9c:	75fb      	strb	r3, [r7, #23]
 8005a9e:	e00d      	b.n	8005abc <Save_EEPROM+0xee8>
 8005aa0:	2308      	movs	r3, #8
 8005aa2:	75fb      	strb	r3, [r7, #23]
 8005aa4:	e00a      	b.n	8005abc <Save_EEPROM+0xee8>
 8005aa6:	2309      	movs	r3, #9
 8005aa8:	75fb      	strb	r3, [r7, #23]
 8005aaa:	e007      	b.n	8005abc <Save_EEPROM+0xee8>
 8005aac:	230a      	movs	r3, #10
 8005aae:	75fb      	strb	r3, [r7, #23]
 8005ab0:	e004      	b.n	8005abc <Save_EEPROM+0xee8>
 8005ab2:	230b      	movs	r3, #11
 8005ab4:	75fb      	strb	r3, [r7, #23]
 8005ab6:	e001      	b.n	8005abc <Save_EEPROM+0xee8>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	75fb      	strb	r3, [r7, #23]
 8005abc:	bf00      	nop
	__FREQ_TO_BUFFER(buffer[12], perCAN[VERIFY_MSG]);
 8005abe:	4b77      	ldr	r3, [pc, #476]	; (8005c9c <Save_EEPROM+0x10c8>)
 8005ac0:	891b      	ldrh	r3, [r3, #8]
 8005ac2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac6:	f000 8082 	beq.w	8005bce <Save_EEPROM+0xffa>
 8005aca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ace:	f300 809f 	bgt.w	8005c10 <Save_EEPROM+0x103c>
 8005ad2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005ad6:	d07d      	beq.n	8005bd4 <Save_EEPROM+0x1000>
 8005ad8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005adc:	f300 8098 	bgt.w	8005c10 <Save_EEPROM+0x103c>
 8005ae0:	2bc8      	cmp	r3, #200	; 0xc8
 8005ae2:	d07a      	beq.n	8005bda <Save_EEPROM+0x1006>
 8005ae4:	2bc8      	cmp	r3, #200	; 0xc8
 8005ae6:	f300 8093 	bgt.w	8005c10 <Save_EEPROM+0x103c>
 8005aea:	2b32      	cmp	r3, #50	; 0x32
 8005aec:	dc6c      	bgt.n	8005bc8 <Save_EEPROM+0xff4>
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	f2c0 808e 	blt.w	8005c10 <Save_EEPROM+0x103c>
 8005af4:	3b02      	subs	r3, #2
 8005af6:	2b30      	cmp	r3, #48	; 0x30
 8005af8:	f200 808a 	bhi.w	8005c10 <Save_EEPROM+0x103c>
 8005afc:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <Save_EEPROM+0xf30>)
 8005afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b02:	bf00      	nop
 8005b04:	08005c0b 	.word	0x08005c0b
 8005b08:	08005c11 	.word	0x08005c11
 8005b0c:	08005c05 	.word	0x08005c05
 8005b10:	08005bff 	.word	0x08005bff
 8005b14:	08005c11 	.word	0x08005c11
 8005b18:	08005c11 	.word	0x08005c11
 8005b1c:	08005c11 	.word	0x08005c11
 8005b20:	08005c11 	.word	0x08005c11
 8005b24:	08005bf9 	.word	0x08005bf9
 8005b28:	08005c11 	.word	0x08005c11
 8005b2c:	08005c11 	.word	0x08005c11
 8005b30:	08005c11 	.word	0x08005c11
 8005b34:	08005c11 	.word	0x08005c11
 8005b38:	08005c11 	.word	0x08005c11
 8005b3c:	08005c11 	.word	0x08005c11
 8005b40:	08005c11 	.word	0x08005c11
 8005b44:	08005c11 	.word	0x08005c11
 8005b48:	08005c11 	.word	0x08005c11
 8005b4c:	08005bf3 	.word	0x08005bf3
 8005b50:	08005c11 	.word	0x08005c11
 8005b54:	08005c11 	.word	0x08005c11
 8005b58:	08005c11 	.word	0x08005c11
 8005b5c:	08005c11 	.word	0x08005c11
 8005b60:	08005c11 	.word	0x08005c11
 8005b64:	08005c11 	.word	0x08005c11
 8005b68:	08005c11 	.word	0x08005c11
 8005b6c:	08005c11 	.word	0x08005c11
 8005b70:	08005c11 	.word	0x08005c11
 8005b74:	08005c11 	.word	0x08005c11
 8005b78:	08005c11 	.word	0x08005c11
 8005b7c:	08005c11 	.word	0x08005c11
 8005b80:	08005c11 	.word	0x08005c11
 8005b84:	08005c11 	.word	0x08005c11
 8005b88:	08005c11 	.word	0x08005c11
 8005b8c:	08005c11 	.word	0x08005c11
 8005b90:	08005c11 	.word	0x08005c11
 8005b94:	08005c11 	.word	0x08005c11
 8005b98:	08005c11 	.word	0x08005c11
 8005b9c:	08005bed 	.word	0x08005bed
 8005ba0:	08005c11 	.word	0x08005c11
 8005ba4:	08005c11 	.word	0x08005c11
 8005ba8:	08005c11 	.word	0x08005c11
 8005bac:	08005c11 	.word	0x08005c11
 8005bb0:	08005c11 	.word	0x08005c11
 8005bb4:	08005c11 	.word	0x08005c11
 8005bb8:	08005c11 	.word	0x08005c11
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005c11 	.word	0x08005c11
 8005bc4:	08005be7 	.word	0x08005be7
 8005bc8:	2b64      	cmp	r3, #100	; 0x64
 8005bca:	d009      	beq.n	8005be0 <Save_EEPROM+0x100c>
 8005bcc:	e020      	b.n	8005c10 <Save_EEPROM+0x103c>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	763b      	strb	r3, [r7, #24]
 8005bd2:	e01f      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	763b      	strb	r3, [r7, #24]
 8005bd8:	e01c      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005bda:	2303      	movs	r3, #3
 8005bdc:	763b      	strb	r3, [r7, #24]
 8005bde:	e019      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005be0:	2304      	movs	r3, #4
 8005be2:	763b      	strb	r3, [r7, #24]
 8005be4:	e016      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005be6:	2305      	movs	r3, #5
 8005be8:	763b      	strb	r3, [r7, #24]
 8005bea:	e013      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005bec:	2306      	movs	r3, #6
 8005bee:	763b      	strb	r3, [r7, #24]
 8005bf0:	e010      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005bf2:	2307      	movs	r3, #7
 8005bf4:	763b      	strb	r3, [r7, #24]
 8005bf6:	e00d      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005bf8:	2308      	movs	r3, #8
 8005bfa:	763b      	strb	r3, [r7, #24]
 8005bfc:	e00a      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005bfe:	2309      	movs	r3, #9
 8005c00:	763b      	strb	r3, [r7, #24]
 8005c02:	e007      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005c04:	230a      	movs	r3, #10
 8005c06:	763b      	strb	r3, [r7, #24]
 8005c08:	e004      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005c0a:	230b      	movs	r3, #11
 8005c0c:	763b      	strb	r3, [r7, #24]
 8005c0e:	e001      	b.n	8005c14 <Save_EEPROM+0x1040>
 8005c10:	2300      	movs	r3, #0
 8005c12:	763b      	strb	r3, [r7, #24]
 8005c14:	bf00      	nop

	buffer[13] = inputConfig;
 8005c16:	4b22      	ldr	r3, [pc, #136]	; (8005ca0 <Save_EEPROM+0x10cc>)
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	767b      	strb	r3, [r7, #25]
	buffer[14] = thresholdBeacon >> 8;
 8005c1c:	4b21      	ldr	r3, [pc, #132]	; (8005ca4 <Save_EEPROM+0x10d0>)
 8005c1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c22:	121b      	asrs	r3, r3, #8
 8005c24:	b21b      	sxth	r3, r3
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	76bb      	strb	r3, [r7, #26]
	buffer[15] = thresholdBeacon & 0xff;
 8005c2a:	4b1e      	ldr	r3, [pc, #120]	; (8005ca4 <Save_EEPROM+0x10d0>)
 8005c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	76fb      	strb	r3, [r7, #27]
	buffer[16] = thresholdRPM >> 8;
 8005c34:	4b1c      	ldr	r3, [pc, #112]	; (8005ca8 <Save_EEPROM+0x10d4>)
 8005c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c3a:	121b      	asrs	r3, r3, #8
 8005c3c:	b21b      	sxth	r3, r3
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	773b      	strb	r3, [r7, #28]

	HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, buffer, EEPROM_BUFFER_SIZE_WRITE, EEPROM_TIMEOUT_WRITE);
 8005c42:	f107 020c 	add.w	r2, r7, #12
 8005c46:	230a      	movs	r3, #10
 8005c48:	9300      	str	r3, [sp, #0]
 8005c4a:	2311      	movs	r3, #17
 8005c4c:	21a0      	movs	r1, #160	; 0xa0
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f003 fb82 	bl	8009358 <HAL_I2C_Master_Transmit>

	HAL_Delay(EEPROM_TIMEOUT_WRITE);
 8005c54:	200a      	movs	r0, #10
 8005c56:	f001 f88f 	bl	8006d78 <HAL_Delay>

	buffer[0] = 0x10;
 8005c5a:	2310      	movs	r3, #16
 8005c5c:	733b      	strb	r3, [r7, #12]
	buffer[1] = thresholdRPM & 0xff;
 8005c5e:	4b12      	ldr	r3, [pc, #72]	; (8005ca8 <Save_EEPROM+0x10d4>)
 8005c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	737b      	strb	r3, [r7, #13]
	buffer[2] = thresholdSpeed >> 8;
 8005c68:	4b10      	ldr	r3, [pc, #64]	; (8005cac <Save_EEPROM+0x10d8>)
 8005c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c6e:	121b      	asrs	r3, r3, #8
 8005c70:	b21b      	sxth	r3, r3
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	73bb      	strb	r3, [r7, #14]
	buffer[3] = thresholdSpeed & 0xff;
 8005c76:	4b0d      	ldr	r3, [pc, #52]	; (8005cac <Save_EEPROM+0x10d8>)
 8005c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	73fb      	strb	r3, [r7, #15]

	return HAL_I2C_Master_Transmit(hi2c, EEPROM_ADDRESS_WRITE, buffer, 4, EEPROM_TIMEOUT_WRITE);
 8005c80:	f107 020c 	add.w	r2, r7, #12
 8005c84:	230a      	movs	r3, #10
 8005c86:	9300      	str	r3, [sp, #0]
 8005c88:	2304      	movs	r3, #4
 8005c8a:	21a0      	movs	r1, #160	; 0xa0
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f003 fb63 	bl	8009358 <HAL_I2C_Master_Transmit>
 8005c92:	4603      	mov	r3, r0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3720      	adds	r7, #32
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20006708 	.word	0x20006708
 8005ca0:	200066ec 	.word	0x200066ec
 8005ca4:	200065da 	.word	0x200065da
 8005ca8:	200065dc 	.word	0x200065dc
 8005cac:	200065de 	.word	0x200065de

08005cb0 <Principal_Datalogger_Init>:
int16_t thresholdRPM;
int16_t thresholdSpeed;


FRESULT Principal_Datalogger_Init()
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
	FRESULT retVal = FR_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005cba:	2180      	movs	r1, #128	; 0x80
 8005cbc:	481a      	ldr	r0, [pc, #104]	; (8005d28 <Principal_Datalogger_Init+0x78>)
 8005cbe:	f003 f9a3 	bl	8009008 <HAL_GPIO_ReadPin>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d10a      	bne.n	8005cde <Principal_Datalogger_Init+0x2e>
	{
		flagDatalogger = DL_NO_CARD;
 8005cc8:	4b18      	ldr	r3, [pc, #96]	; (8005d2c <Principal_Datalogger_Init+0x7c>)
 8005cca:	2202      	movs	r2, #2
 8005ccc:	701a      	strb	r2, [r3, #0]
		memset(&fatfsStruct, '\0', sizeof(FATFS));
 8005cce:	f241 0234 	movw	r2, #4148	; 0x1034
 8005cd2:	2100      	movs	r1, #0
 8005cd4:	4816      	ldr	r0, [pc, #88]	; (8005d30 <Principal_Datalogger_Init+0x80>)
 8005cd6:	f012 f849 	bl	8017d6c <memset>
		return FR_DISK_ERR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e020      	b.n	8005d20 <Principal_Datalogger_Init+0x70>
	}

	BSP_SD_Init();
 8005cde:	f00b fca3 	bl	8011628 <BSP_SD_Init>

	retVal = f_mount(&fatfsStruct, SDPath, 1);
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	4913      	ldr	r1, [pc, #76]	; (8005d34 <Principal_Datalogger_Init+0x84>)
 8005ce6:	4812      	ldr	r0, [pc, #72]	; (8005d30 <Principal_Datalogger_Init+0x80>)
 8005ce8:	f010 fe24 	bl	8016934 <f_mount>
 8005cec:	4603      	mov	r3, r0
 8005cee:	71fb      	strb	r3, [r7, #7]

	flagDatalogger = DL_NO_SAVE;
 8005cf0:	4b0e      	ldr	r3, [pc, #56]	; (8005d2c <Principal_Datalogger_Init+0x7c>)
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	701a      	strb	r2, [r3, #0]

	if(retVal != FR_OK)
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00d      	beq.n	8005d18 <Principal_Datalogger_Init+0x68>
	{
		flagDatalogger = DL_ERROR;
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <Principal_Datalogger_Init+0x7c>)
 8005cfe:	2204      	movs	r2, #4
 8005d00:	701a      	strb	r2, [r3, #0]
		f_mount(0, SDPath, 0);
 8005d02:	2200      	movs	r2, #0
 8005d04:	490b      	ldr	r1, [pc, #44]	; (8005d34 <Principal_Datalogger_Init+0x84>)
 8005d06:	2000      	movs	r0, #0
 8005d08:	f010 fe14 	bl	8016934 <f_mount>
		memset(&fatfsStruct, '\0', sizeof(FATFS));
 8005d0c:	f241 0234 	movw	r2, #4148	; 0x1034
 8005d10:	2100      	movs	r1, #0
 8005d12:	4807      	ldr	r0, [pc, #28]	; (8005d30 <Principal_Datalogger_Init+0x80>)
 8005d14:	f012 f82a 	bl	8017d6c <memset>
	}

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <Principal_Datalogger_Init+0x88>)
 8005d1a:	22fa      	movs	r2, #250	; 0xfa
 8005d1c:	601a      	str	r2, [r3, #0]

	return retVal;
 8005d1e:	79fb      	ldrb	r3, [r7, #7]
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	40020800 	.word	0x40020800
 8005d2c:	200066ea 	.word	0x200066ea
 8005d30:	20004530 	.word	0x20004530
 8005d34:	20006784 	.word	0x20006784
 8005d38:	20006728 	.word	0x20006728

08005d3c <Principal_Datalogger_Start>:

FRESULT Principal_Datalogger_Start()
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b08a      	sub	sp, #40	; 0x28
 8005d40:	af02      	add	r7, sp, #8
	FRESULT retVal = FR_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	77fb      	strb	r3, [r7, #31]

	if((flagDatalogger == DL_BUT_PRESS) && (accDatalogger[DL_ACC_COOLDOWN] > 0))
 8005d46:	4b46      	ldr	r3, [pc, #280]	; (8005e60 <Principal_Datalogger_Start+0x124>)
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d108      	bne.n	8005d60 <Principal_Datalogger_Start+0x24>
 8005d4e:	4b45      	ldr	r3, [pc, #276]	; (8005e64 <Principal_Datalogger_Start+0x128>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d004      	beq.n	8005d60 <Principal_Datalogger_Start+0x24>
	{
		flagDatalogger = DL_NO_SAVE;
 8005d56:	4b42      	ldr	r3, [pc, #264]	; (8005e60 <Principal_Datalogger_Start+0x124>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	e07b      	b.n	8005e58 <Principal_Datalogger_Start+0x11c>
	}

	else if((HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005d60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005d64:	4840      	ldr	r0, [pc, #256]	; (8005e68 <Principal_Datalogger_Start+0x12c>)
 8005d66:	f003 f94f 	bl	8009008 <HAL_GPIO_ReadPin>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d036      	beq.n	8005dde <Principal_Datalogger_Start+0xa2>
			|| (HAL_GPIO_ReadPin(SDIO_CD_PIN) == GPIO_PIN_SET)
 8005d70:	2180      	movs	r1, #128	; 0x80
 8005d72:	483e      	ldr	r0, [pc, #248]	; (8005e6c <Principal_Datalogger_Start+0x130>)
 8005d74:	f003 f948 	bl	8009008 <HAL_GPIO_ReadPin>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d02f      	beq.n	8005dde <Principal_Datalogger_Start+0xa2>
			|| (flagRTC != RTC_OK)
 8005d7e:	4b3c      	ldr	r3, [pc, #240]	; (8005e70 <Principal_Datalogger_Start+0x134>)
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d12b      	bne.n	8005dde <Principal_Datalogger_Start+0xa2>
			|| ((flagDatalogger != DL_BUT_PRESS)
 8005d86:	4b36      	ldr	r3, [pc, #216]	; (8005e60 <Principal_Datalogger_Start+0x124>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b03      	cmp	r3, #3
 8005d8c:	d02c      	beq.n	8005de8 <Principal_Datalogger_Start+0xac>
			&& (ecuData.rpm < thresholdRPM)
 8005d8e:	4b39      	ldr	r3, [pc, #228]	; (8005e74 <Principal_Datalogger_Start+0x138>)
 8005d90:	f9b3 204e 	ldrsh.w	r2, [r3, #78]	; 0x4e
 8005d94:	4b38      	ldr	r3, [pc, #224]	; (8005e78 <Principal_Datalogger_Start+0x13c>)
 8005d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	da24      	bge.n	8005de8 <Principal_Datalogger_Start+0xac>
			&& (ecuData.wheel_speed_fl < thresholdSpeed)
 8005d9e:	4b35      	ldr	r3, [pc, #212]	; (8005e74 <Principal_Datalogger_Start+0x138>)
 8005da0:	f9b3 2052 	ldrsh.w	r2, [r3, #82]	; 0x52
 8005da4:	4b35      	ldr	r3, [pc, #212]	; (8005e7c <Principal_Datalogger_Start+0x140>)
 8005da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	da1c      	bge.n	8005de8 <Principal_Datalogger_Start+0xac>
			&& (ecuData.wheel_speed_fr < thresholdSpeed)
 8005dae:	4b31      	ldr	r3, [pc, #196]	; (8005e74 <Principal_Datalogger_Start+0x138>)
 8005db0:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 8005db4:	4b31      	ldr	r3, [pc, #196]	; (8005e7c <Principal_Datalogger_Start+0x140>)
 8005db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	da14      	bge.n	8005de8 <Principal_Datalogger_Start+0xac>
			&& (ecuData.wheel_speed_rl < thresholdSpeed)
 8005dbe:	4b2d      	ldr	r3, [pc, #180]	; (8005e74 <Principal_Datalogger_Start+0x138>)
 8005dc0:	f9b3 2056 	ldrsh.w	r2, [r3, #86]	; 0x56
 8005dc4:	4b2d      	ldr	r3, [pc, #180]	; (8005e7c <Principal_Datalogger_Start+0x140>)
 8005dc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	da0c      	bge.n	8005de8 <Principal_Datalogger_Start+0xac>
			&& (ecuData.wheel_speed_rr < thresholdSpeed)))
 8005dce:	4b29      	ldr	r3, [pc, #164]	; (8005e74 <Principal_Datalogger_Start+0x138>)
 8005dd0:	f9b3 2058 	ldrsh.w	r2, [r3, #88]	; 0x58
 8005dd4:	4b29      	ldr	r3, [pc, #164]	; (8005e7c <Principal_Datalogger_Start+0x140>)
 8005dd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	da04      	bge.n	8005de8 <Principal_Datalogger_Start+0xac>
	{
		flagDatalogger = DL_NO_SAVE;
 8005dde:	4b20      	ldr	r3, [pc, #128]	; (8005e60 <Principal_Datalogger_Start+0x124>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	e037      	b.n	8005e58 <Principal_Datalogger_Start+0x11c>
	}

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 8005de8:	4b1e      	ldr	r3, [pc, #120]	; (8005e64 <Principal_Datalogger_Start+0x128>)
 8005dea:	22fa      	movs	r2, #250	; 0xfa
 8005dec:	601a      	str	r2, [r3, #0]

	dataloggerBufferPosition = 0;
 8005dee:	4b24      	ldr	r3, [pc, #144]	; (8005e80 <Principal_Datalogger_Start+0x144>)
 8005df0:	2200      	movs	r2, #0
 8005df2:	801a      	strh	r2, [r3, #0]
#else

	RTC_DateTypeDef sDate;
	RTC_TimeTypeDef sTime;

	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8005df4:	1d3b      	adds	r3, r7, #4
 8005df6:	2200      	movs	r2, #0
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4822      	ldr	r0, [pc, #136]	; (8005e84 <Principal_Datalogger_Start+0x148>)
 8005dfc:	f006 fe52 	bl	800caa4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8005e00:	f107 0318 	add.w	r3, r7, #24
 8005e04:	2200      	movs	r2, #0
 8005e06:	4619      	mov	r1, r3
 8005e08:	481e      	ldr	r0, [pc, #120]	; (8005e84 <Principal_Datalogger_Start+0x148>)
 8005e0a:	f006 ff2d 	bl	800cc68 <HAL_RTC_GetDate>

#if _USE_LFN == 0
	sprintf(logString, "%02d%02d%02d.sd", sTime.Hours, sTime.Minutes, sTime.Seconds);
 8005e0e:	793b      	ldrb	r3, [r7, #4]
 8005e10:	461a      	mov	r2, r3
 8005e12:	797b      	ldrb	r3, [r7, #5]
 8005e14:	4619      	mov	r1, r3
 8005e16:	79bb      	ldrb	r3, [r7, #6]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	491a      	ldr	r1, [pc, #104]	; (8005e88 <Principal_Datalogger_Start+0x14c>)
 8005e1e:	481b      	ldr	r0, [pc, #108]	; (8005e8c <Principal_Datalogger_Start+0x150>)
 8005e20:	f011 ffac 	bl	8017d7c <siprintf>
		if(retVal == FR_OK)
		{
#endif

#ifdef DATALOGGER_SYNC
			retVal = f_open(&fileStruct, logString, FA_WRITE | FA_CREATE_ALWAYS);
 8005e24:	220a      	movs	r2, #10
 8005e26:	4919      	ldr	r1, [pc, #100]	; (8005e8c <Principal_Datalogger_Start+0x150>)
 8005e28:	4819      	ldr	r0, [pc, #100]	; (8005e90 <Principal_Datalogger_Start+0x154>)
 8005e2a:	f010 fdc7 	bl	80169bc <f_open>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	77fb      	strb	r3, [r7, #31]
#endif

			if(retVal == FR_OK)
 8005e32:	7ffb      	ldrb	r3, [r7, #31]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d108      	bne.n	8005e4a <Principal_Datalogger_Start+0x10e>
			{
				flagDatalogger = DL_SAVE;
 8005e38:	4b09      	ldr	r3, [pc, #36]	; (8005e60 <Principal_Datalogger_Start+0x124>)
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	701a      	strb	r2, [r3, #0]
				accDatalogger[DL_ACC_TIMING] = 0;
 8005e3e:	4b09      	ldr	r3, [pc, #36]	; (8005e64 <Principal_Datalogger_Start+0x128>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	609a      	str	r2, [r3, #8]
				accDatalogger[DL_ACC_TIMEOUT] = 0;
 8005e44:	4b07      	ldr	r3, [pc, #28]	; (8005e64 <Principal_Datalogger_Start+0x128>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	605a      	str	r2, [r3, #4]
	}
#endif

#endif

	if(retVal != FR_OK)
 8005e4a:	7ffb      	ldrb	r3, [r7, #31]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <Principal_Datalogger_Start+0x11a>
		flagDatalogger = DL_ERROR;
 8005e50:	4b03      	ldr	r3, [pc, #12]	; (8005e60 <Principal_Datalogger_Start+0x124>)
 8005e52:	2204      	movs	r2, #4
 8005e54:	701a      	strb	r2, [r3, #0]

	return retVal;
 8005e56:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3720      	adds	r7, #32
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	200066ea 	.word	0x200066ea
 8005e64:	20006728 	.word	0x20006728
 8005e68:	40020000 	.word	0x40020000
 8005e6c:	40020800 	.word	0x40020800
 8005e70:	200066eb 	.word	0x200066eb
 8005e74:	20006644 	.word	0x20006644
 8005e78:	200065dc 	.word	0x200065dc
 8005e7c:	200065de 	.word	0x200065de
 8005e80:	2000452c 	.word	0x2000452c
 8005e84:	20000380 	.word	0x20000380
 8005e88:	08018670 	.word	0x08018670
 8005e8c:	200065bc 	.word	0x200065bc
 8005e90:	20005590 	.word	0x20005590

08005e94 <Principal_Datalogger_Finish>:

FRESULT Principal_Datalogger_Finish()
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b082      	sub	sp, #8
 8005e98:	af00      	add	r7, sp, #0
	FRESULT retVal = FR_OK;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	71fb      	strb	r3, [r7, #7]

	if(HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005e9e:	2180      	movs	r1, #128	; 0x80
 8005ea0:	481e      	ldr	r0, [pc, #120]	; (8005f1c <Principal_Datalogger_Finish+0x88>)
 8005ea2:	f003 f8b1 	bl	8009008 <HAL_GPIO_ReadPin>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d11b      	bne.n	8005ee4 <Principal_Datalogger_Finish+0x50>
	{
		retVal = FR_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	71fb      	strb	r3, [r7, #7]
		f_mount(0, SDPath, 0);
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	491b      	ldr	r1, [pc, #108]	; (8005f20 <Principal_Datalogger_Finish+0x8c>)
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	f010 fd3d 	bl	8016934 <f_mount>
		memset(&fileStruct, '\0', sizeof(FIL));
 8005eba:	f241 022c 	movw	r2, #4140	; 0x102c
 8005ebe:	2100      	movs	r1, #0
 8005ec0:	4818      	ldr	r0, [pc, #96]	; (8005f24 <Principal_Datalogger_Finish+0x90>)
 8005ec2:	f011 ff53 	bl	8017d6c <memset>
		memset(&dirStruct, '\0', sizeof(DIR));
 8005ec6:	222c      	movs	r2, #44	; 0x2c
 8005ec8:	2100      	movs	r1, #0
 8005eca:	4817      	ldr	r0, [pc, #92]	; (8005f28 <Principal_Datalogger_Finish+0x94>)
 8005ecc:	f011 ff4e 	bl	8017d6c <memset>
		memset(&fatfsStruct, '\0', sizeof(FATFS));
 8005ed0:	f241 0234 	movw	r2, #4148	; 0x1034
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4815      	ldr	r0, [pc, #84]	; (8005f2c <Principal_Datalogger_Finish+0x98>)
 8005ed8:	f011 ff48 	bl	8017d6c <memset>
		flagDatalogger = DL_NO_CARD;
 8005edc:	4b14      	ldr	r3, [pc, #80]	; (8005f30 <Principal_Datalogger_Finish+0x9c>)
 8005ede:	2202      	movs	r2, #2
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	e006      	b.n	8005ef2 <Principal_Datalogger_Finish+0x5e>
	}

	else if(flagDatalogger != DL_ERROR)
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <Principal_Datalogger_Finish+0x9c>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d002      	beq.n	8005ef2 <Principal_Datalogger_Finish+0x5e>
		flagDatalogger = DL_NO_SAVE;
 8005eec:	4b10      	ldr	r3, [pc, #64]	; (8005f30 <Principal_Datalogger_Finish+0x9c>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	701a      	strb	r2, [r3, #0]

	if(flagDatalogger != DL_NO_CARD)
 8005ef2:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <Principal_Datalogger_Finish+0x9c>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d007      	beq.n	8005f0a <Principal_Datalogger_Finish+0x76>
	{
#ifdef DATALOGGER_SYNC
		retVal = f_close(&fileStruct);
 8005efa:	480a      	ldr	r0, [pc, #40]	; (8005f24 <Principal_Datalogger_Finish+0x90>)
 8005efc:	f011 f909 	bl	8017112 <f_close>
 8005f00:	4603      	mov	r3, r0
 8005f02:	71fb      	strb	r3, [r7, #7]
#endif
		f_closedir(&dirStruct);
 8005f04:	4808      	ldr	r0, [pc, #32]	; (8005f28 <Principal_Datalogger_Finish+0x94>)
 8005f06:	f011 f924 	bl	8017152 <f_closedir>
	}

	accDatalogger[DL_ACC_COOLDOWN] = DATALOGGER_COOLDOWN;
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <Principal_Datalogger_Finish+0xa0>)
 8005f0c:	22fa      	movs	r2, #250	; 0xfa
 8005f0e:	601a      	str	r2, [r3, #0]

	return retVal;
 8005f10:	79fb      	ldrb	r3, [r7, #7]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	40020800 	.word	0x40020800
 8005f20:	20006784 	.word	0x20006784
 8005f24:	20005590 	.word	0x20005590
 8005f28:	20005564 	.word	0x20005564
 8005f2c:	20004530 	.word	0x20004530
 8005f30:	200066ea 	.word	0x200066ea
 8005f34:	20006728 	.word	0x20006728

08005f38 <Principal_Datalogger_Save_Buffer>:

void Principal_Datalogger_Save_Buffer(CAN_HandleTypeDef* hcan, uint32_t data_id, uint8_t data_length, uint8_t* data_buffer)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b088      	sub	sp, #32
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	603b      	str	r3, [r7, #0]
 8005f44:	4613      	mov	r3, r2
 8005f46:	71fb      	strb	r3, [r7, #7]
//	uint8_t buffer[5 + data_length];
	uint16_t index = 0;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	83fb      	strh	r3, [r7, #30]
	UINT writeSize = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	61bb      	str	r3, [r7, #24]
	FRESULT verify[2];

	HAL_CAN_DeactivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005f50:	2102      	movs	r1, #2
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f001 ffbe 	bl	8007ed4 <HAL_CAN_DeactivateNotification>

	if((HAL_GPIO_ReadPin(SDIO_CD_GPIO_Port, SDIO_CD_Pin) == GPIO_PIN_SET)
 8005f58:	2180      	movs	r1, #128	; 0x80
 8005f5a:	4851      	ldr	r0, [pc, #324]	; (80060a0 <Principal_Datalogger_Save_Buffer+0x168>)
 8005f5c:	f003 f854 	bl	8009008 <HAL_GPIO_ReadPin>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d00b      	beq.n	8005f7e <Principal_Datalogger_Save_Buffer+0x46>
		|| (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_SET)
 8005f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f6a:	484e      	ldr	r0, [pc, #312]	; (80060a4 <Principal_Datalogger_Save_Buffer+0x16c>)
 8005f6c:	f003 f84c 	bl	8009008 <HAL_GPIO_ReadPin>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d003      	beq.n	8005f7e <Principal_Datalogger_Save_Buffer+0x46>
		|| (flagDatalogger != DL_SAVE))
 8005f76:	4b4c      	ldr	r3, [pc, #304]	; (80060a8 <Principal_Datalogger_Save_Buffer+0x170>)
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d008      	beq.n	8005f90 <Principal_Datalogger_Save_Buffer+0x58>
	{
		Principal_Datalogger_Finish(&dirStruct, &fileStruct);
 8005f7e:	494b      	ldr	r1, [pc, #300]	; (80060ac <Principal_Datalogger_Save_Buffer+0x174>)
 8005f80:	484b      	ldr	r0, [pc, #300]	; (80060b0 <Principal_Datalogger_Save_Buffer+0x178>)
 8005f82:	f7ff ff87 	bl	8005e94 <Principal_Datalogger_Finish>

		HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8005f86:	2102      	movs	r1, #2
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f001 ff7d 	bl	8007e88 <HAL_CAN_ActivateNotification>

		return;
 8005f8e:	e083      	b.n	8006098 <Principal_Datalogger_Save_Buffer+0x160>
//	for(uint8_t i = 0; i < data_length; i++)
//		buffer[5 + i] = data_buffer[i];

//	memcpy(&dataloggerBuffer[dataloggerBufferPosition], buffer, 5 + data_length);

	index = dataloggerBufferPosition;
 8005f90:	4b48      	ldr	r3, [pc, #288]	; (80060b4 <Principal_Datalogger_Save_Buffer+0x17c>)
 8005f92:	881b      	ldrh	r3, [r3, #0]
 8005f94:	83fb      	strh	r3, [r7, #30]

	dataloggerBuffer[index] 	= 'D';
 8005f96:	8bfb      	ldrh	r3, [r7, #30]
 8005f98:	4a47      	ldr	r2, [pc, #284]	; (80060b8 <Principal_Datalogger_Save_Buffer+0x180>)
 8005f9a:	2144      	movs	r1, #68	; 0x44
 8005f9c:	54d1      	strb	r1, [r2, r3]
	dataloggerBuffer[index + 1] = 'L';
 8005f9e:	8bfb      	ldrh	r3, [r7, #30]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	4a45      	ldr	r2, [pc, #276]	; (80060b8 <Principal_Datalogger_Save_Buffer+0x180>)
 8005fa4:	214c      	movs	r1, #76	; 0x4c
 8005fa6:	54d1      	strb	r1, [r2, r3]
	dataloggerBuffer[index + 2] = data_id & 0xff;
 8005fa8:	8bfb      	ldrh	r3, [r7, #30]
 8005faa:	3302      	adds	r3, #2
 8005fac:	68ba      	ldr	r2, [r7, #8]
 8005fae:	b2d1      	uxtb	r1, r2
 8005fb0:	4a41      	ldr	r2, [pc, #260]	; (80060b8 <Principal_Datalogger_Save_Buffer+0x180>)
 8005fb2:	54d1      	strb	r1, [r2, r3]
	dataloggerBuffer[index + 3] = data_length;
 8005fb4:	8bfb      	ldrh	r3, [r7, #30]
 8005fb6:	3303      	adds	r3, #3
 8005fb8:	493f      	ldr	r1, [pc, #252]	; (80060b8 <Principal_Datalogger_Save_Buffer+0x180>)
 8005fba:	79fa      	ldrb	r2, [r7, #7]
 8005fbc:	54ca      	strb	r2, [r1, r3]
	dataloggerBuffer[index + 4] = accDatalogger[DL_ACC_TIMING];
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <Principal_Datalogger_Save_Buffer+0x184>)
 8005fc0:	689a      	ldr	r2, [r3, #8]
 8005fc2:	8bfb      	ldrh	r3, [r7, #30]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	b2d1      	uxtb	r1, r2
 8005fc8:	4a3b      	ldr	r2, [pc, #236]	; (80060b8 <Principal_Datalogger_Save_Buffer+0x180>)
 8005fca:	54d1      	strb	r1, [r2, r3]

	accDatalogger[DL_ACC_TIMING] = 0;
 8005fcc:	4b3b      	ldr	r3, [pc, #236]	; (80060bc <Principal_Datalogger_Save_Buffer+0x184>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	609a      	str	r2, [r3, #8]

	index += 5;
 8005fd2:	8bfb      	ldrh	r3, [r7, #30]
 8005fd4:	3305      	adds	r3, #5
 8005fd6:	83fb      	strh	r3, [r7, #30]

	for(uint8_t i = 0; i < data_length; i++, index++)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	777b      	strb	r3, [r7, #29]
 8005fdc:	e00c      	b.n	8005ff8 <Principal_Datalogger_Save_Buffer+0xc0>
		dataloggerBuffer[index] = data_buffer[i];
 8005fde:	7f7b      	ldrb	r3, [r7, #29]
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	441a      	add	r2, r3
 8005fe4:	8bfb      	ldrh	r3, [r7, #30]
 8005fe6:	7811      	ldrb	r1, [r2, #0]
 8005fe8:	4a33      	ldr	r2, [pc, #204]	; (80060b8 <Principal_Datalogger_Save_Buffer+0x180>)
 8005fea:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < data_length; i++, index++)
 8005fec:	7f7b      	ldrb	r3, [r7, #29]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	777b      	strb	r3, [r7, #29]
 8005ff2:	8bfb      	ldrh	r3, [r7, #30]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	83fb      	strh	r3, [r7, #30]
 8005ff8:	7f7a      	ldrb	r2, [r7, #29]
 8005ffa:	79fb      	ldrb	r3, [r7, #7]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d3ee      	bcc.n	8005fde <Principal_Datalogger_Save_Buffer+0xa6>

	dataloggerBufferPosition += (5 + data_length);
 8006000:	79fb      	ldrb	r3, [r7, #7]
 8006002:	b29a      	uxth	r2, r3
 8006004:	4b2b      	ldr	r3, [pc, #172]	; (80060b4 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	4413      	add	r3, r2
 800600a:	b29b      	uxth	r3, r3
 800600c:	3305      	adds	r3, #5
 800600e:	b29a      	uxth	r2, r3
 8006010:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006012:	801a      	strh	r2, [r3, #0]

	if((dataloggerBufferPosition > DATALOGGER_SAVE_THR))// || (accDatalogger[DL_ACC_TIMEOUT] > DATALOGGER_SAVE_TIME_THR))
 8006014:	4b27      	ldr	r3, [pc, #156]	; (80060b4 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006016:	881b      	ldrh	r3, [r3, #0]
 8006018:	f643 72f3 	movw	r2, #16371	; 0x3ff3
 800601c:	4293      	cmp	r3, r2
 800601e:	d936      	bls.n	800608e <Principal_Datalogger_Save_Buffer+0x156>
	{
		for(; dataloggerBufferPosition < DATALOGGER_BUFFER_SIZE; dataloggerBufferPosition++)
 8006020:	e00b      	b.n	800603a <Principal_Datalogger_Save_Buffer+0x102>
			dataloggerBuffer[dataloggerBufferPosition] = 0;
 8006022:	4b24      	ldr	r3, [pc, #144]	; (80060b4 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006024:	881b      	ldrh	r3, [r3, #0]
 8006026:	461a      	mov	r2, r3
 8006028:	4b23      	ldr	r3, [pc, #140]	; (80060b8 <Principal_Datalogger_Save_Buffer+0x180>)
 800602a:	2100      	movs	r1, #0
 800602c:	5499      	strb	r1, [r3, r2]
		for(; dataloggerBufferPosition < DATALOGGER_BUFFER_SIZE; dataloggerBufferPosition++)
 800602e:	4b21      	ldr	r3, [pc, #132]	; (80060b4 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006030:	881b      	ldrh	r3, [r3, #0]
 8006032:	3301      	adds	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	4b1f      	ldr	r3, [pc, #124]	; (80060b4 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <Principal_Datalogger_Save_Buffer+0x17c>)
 800603c:	881b      	ldrh	r3, [r3, #0]
 800603e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006042:	d3ee      	bcc.n	8006022 <Principal_Datalogger_Save_Buffer+0xea>

#ifdef DATALOGGER_SYNC
		verify[0] = f_write(&fileStruct, dataloggerBuffer, dataloggerBufferPosition, &writeSize);
 8006044:	4b1b      	ldr	r3, [pc, #108]	; (80060b4 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006046:	881b      	ldrh	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	f107 0318 	add.w	r3, r7, #24
 800604e:	491a      	ldr	r1, [pc, #104]	; (80060b8 <Principal_Datalogger_Save_Buffer+0x180>)
 8006050:	4816      	ldr	r0, [pc, #88]	; (80060ac <Principal_Datalogger_Save_Buffer+0x174>)
 8006052:	f010 fe4c 	bl	8016cee <f_write>
 8006056:	4603      	mov	r3, r0
 8006058:	753b      	strb	r3, [r7, #20]
		verify[1] = f_sync(&fileStruct);
 800605a:	4814      	ldr	r0, [pc, #80]	; (80060ac <Principal_Datalogger_Save_Buffer+0x174>)
 800605c:	f010 ffdb 	bl	8017016 <f_sync>
 8006060:	4603      	mov	r3, r0
 8006062:	757b      	strb	r3, [r7, #21]
			verify[0] = f_write(&fileStruct, dataloggerBuffer, dataloggerBufferPosition, &writeSize);
			verify[1] = f_close(&fileStruct);
		}
#endif

		if((verify[0] != FR_OK) || (verify[1] != FR_OK))// || (writeSize != dataloggerBufferPosition))
 8006064:	7d3b      	ldrb	r3, [r7, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d102      	bne.n	8006070 <Principal_Datalogger_Save_Buffer+0x138>
 800606a:	7d7b      	ldrb	r3, [r7, #21]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <Principal_Datalogger_Save_Buffer+0x14a>
		{
			if(flagDatalogger == DL_SAVE)
 8006070:	4b0d      	ldr	r3, [pc, #52]	; (80060a8 <Principal_Datalogger_Save_Buffer+0x170>)
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d102      	bne.n	800607e <Principal_Datalogger_Save_Buffer+0x146>
				flagDatalogger = DL_ERROR;
 8006078:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <Principal_Datalogger_Save_Buffer+0x170>)
 800607a:	2204      	movs	r2, #4
 800607c:	701a      	strb	r2, [r3, #0]

			Principal_Datalogger_Finish();
 800607e:	f7ff ff09 	bl	8005e94 <Principal_Datalogger_Finish>
		}

		dataloggerBufferPosition = 0;
 8006082:	4b0c      	ldr	r3, [pc, #48]	; (80060b4 <Principal_Datalogger_Save_Buffer+0x17c>)
 8006084:	2200      	movs	r2, #0
 8006086:	801a      	strh	r2, [r3, #0]
		accDatalogger[DL_ACC_TIMEOUT] = 0;
 8006088:	4b0c      	ldr	r3, [pc, #48]	; (80060bc <Principal_Datalogger_Save_Buffer+0x184>)
 800608a:	2200      	movs	r2, #0
 800608c:	605a      	str	r2, [r3, #4]
	}

	HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 800608e:	2102      	movs	r1, #2
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f001 fef9 	bl	8007e88 <HAL_CAN_ActivateNotification>

	return;
 8006096:	bf00      	nop
}
 8006098:	3720      	adds	r7, #32
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	40020800 	.word	0x40020800
 80060a4:	40020000 	.word	0x40020000
 80060a8:	200066ea 	.word	0x200066ea
 80060ac:	20005590 	.word	0x20005590
 80060b0:	20005564 	.word	0x20005564
 80060b4:	2000452c 	.word	0x2000452c
 80060b8:	2000052c 	.word	0x2000052c
 80060bc:	20006728 	.word	0x20006728

080060c0 <Principal_Datalogger_Button>:

void Principal_Datalogger_Button()
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0
	if(accDatalogger[DL_ACC_COOLDOWN] == 0)
 80060c4:	4b0d      	ldr	r3, [pc, #52]	; (80060fc <Principal_Datalogger_Button+0x3c>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d115      	bne.n	80060f8 <Principal_Datalogger_Button+0x38>
	{
		if((flagDatalogger == DL_NO_SAVE) && (HAL_GPIO_ReadPin(VBUS_PIN) == GPIO_PIN_RESET))
 80060cc:	4b0c      	ldr	r3, [pc, #48]	; (8006100 <Principal_Datalogger_Button+0x40>)
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10b      	bne.n	80060ec <Principal_Datalogger_Button+0x2c>
 80060d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060d8:	480a      	ldr	r0, [pc, #40]	; (8006104 <Principal_Datalogger_Button+0x44>)
 80060da:	f002 ff95 	bl	8009008 <HAL_GPIO_ReadPin>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d103      	bne.n	80060ec <Principal_Datalogger_Button+0x2c>
			flagDatalogger = DL_BUT_PRESS;
 80060e4:	4b06      	ldr	r3, [pc, #24]	; (8006100 <Principal_Datalogger_Button+0x40>)
 80060e6:	2203      	movs	r2, #3
 80060e8:	701a      	strb	r2, [r3, #0]

		else if(flagDatalogger == DL_SAVE)
			Principal_Datalogger_Finish();
	}
}
 80060ea:	e005      	b.n	80060f8 <Principal_Datalogger_Button+0x38>
		else if(flagDatalogger == DL_SAVE)
 80060ec:	4b04      	ldr	r3, [pc, #16]	; (8006100 <Principal_Datalogger_Button+0x40>)
 80060ee:	781b      	ldrb	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <Principal_Datalogger_Button+0x38>
			Principal_Datalogger_Finish();
 80060f4:	f7ff fece 	bl	8005e94 <Principal_Datalogger_Finish>
}
 80060f8:	bf00      	nop
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	20006728 	.word	0x20006728
 8006100:	200066ea 	.word	0x200066ea
 8006104:	40020000 	.word	0x40020000

08006108 <Principal_Card_Detection>:

void Principal_Card_Detection()
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b082      	sub	sp, #8
 800610c:	af00      	add	r7, sp, #0
	GPIO_PinState cd_pin = HAL_GPIO_ReadPin(SDIO_CD_PIN);
 800610e:	2180      	movs	r1, #128	; 0x80
 8006110:	480d      	ldr	r0, [pc, #52]	; (8006148 <Principal_Card_Detection+0x40>)
 8006112:	f002 ff79 	bl	8009008 <HAL_GPIO_ReadPin>
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]

	if((cd_pin == GPIO_PIN_SET) && (flagDatalogger != DL_NO_CARD))
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d106      	bne.n	800612e <Principal_Card_Detection+0x26>
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <Principal_Card_Detection+0x44>)
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2b02      	cmp	r3, #2
 8006126:	d002      	beq.n	800612e <Principal_Card_Detection+0x26>
		Principal_Datalogger_Finish();
 8006128:	f7ff feb4 	bl	8005e94 <Principal_Datalogger_Finish>

	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
		Principal_Datalogger_Init();
}
 800612c:	e008      	b.n	8006140 <Principal_Card_Detection+0x38>
	else if((cd_pin == GPIO_PIN_RESET) && (flagDatalogger == DL_NO_CARD))
 800612e:	79fb      	ldrb	r3, [r7, #7]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <Principal_Card_Detection+0x38>
 8006134:	4b05      	ldr	r3, [pc, #20]	; (800614c <Principal_Card_Detection+0x44>)
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b02      	cmp	r3, #2
 800613a:	d101      	bne.n	8006140 <Principal_Card_Detection+0x38>
		Principal_Datalogger_Init();
 800613c:	f7ff fdb8 	bl	8005cb0 <Principal_Datalogger_Init>
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40020800 	.word	0x40020800
 800614c:	200066ea 	.word	0x200066ea

08006150 <Principal_Beacon_Detect>:

void Principal_Beacon_Detect()
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
	if(accLap < thresholdBeacon)
 8006154:	4b0a      	ldr	r3, [pc, #40]	; (8006180 <Principal_Beacon_Detect+0x30>)
 8006156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800615a:	461a      	mov	r2, r3
 800615c:	4b09      	ldr	r3, [pc, #36]	; (8006184 <Principal_Beacon_Detect+0x34>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	429a      	cmp	r2, r3
 8006162:	d80a      	bhi.n	800617a <Principal_Beacon_Detect+0x2a>
		return;

	lapNumber++;
 8006164:	4b08      	ldr	r3, [pc, #32]	; (8006188 <Principal_Beacon_Detect+0x38>)
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	b2da      	uxtb	r2, r3
 800616c:	4b06      	ldr	r3, [pc, #24]	; (8006188 <Principal_Beacon_Detect+0x38>)
 800616e:	701a      	strb	r2, [r3, #0]

	Principal_Transmit_Msg(&hcan1, BEACON_MSG);
 8006170:	2105      	movs	r1, #5
 8006172:	4806      	ldr	r0, [pc, #24]	; (800618c <Principal_Beacon_Detect+0x3c>)
 8006174:	f7fc f8de 	bl	8002334 <Principal_Transmit_Msg>
 8006178:	e000      	b.n	800617c <Principal_Beacon_Detect+0x2c>
		return;
 800617a:	bf00      	nop
}
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200065da 	.word	0x200065da
 8006184:	20006770 	.word	0x20006770
 8006188:	20006628 	.word	0x20006628
 800618c:	20000304 	.word	0x20000304

08006190 <HAL_CAN_RxFifo0MsgPendingCallback>:
 */

#include "principal.h"

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
	if(HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK)
 8006198:	4b28      	ldr	r3, [pc, #160]	; (800623c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800619a:	4a29      	ldr	r2, [pc, #164]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 800619c:	2100      	movs	r1, #0
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f001 fd60 	bl	8007c64 <HAL_CAN_GetRxMessage>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d13d      	bne.n	8006226 <HAL_CAN_RxFifo0MsgPendingCallback+0x96>
	{
		verifyCAN |= 2;
 80061aa:	4b26      	ldr	r3, [pc, #152]	; (8006244 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	f043 0302 	orr.w	r3, r3, #2
 80061b2:	b2da      	uxtb	r2, r3
 80061b4:	4b23      	ldr	r3, [pc, #140]	; (8006244 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 80061b6:	701a      	strb	r2, [r3, #0]

		if((rxHeader.IDE == CAN_ID_STD) && ((rxHeader.StdId & CAN_DAQ_MASK) == CAN_DAQ_FILTER) && (flagDatalogger == DL_SAVE))
 80061b8:	4b21      	ldr	r3, [pc, #132]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d114      	bne.n	80061ea <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 80061c0:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80061c8:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80061cc:	d10d      	bne.n	80061ea <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
 80061ce:	4b1e      	ldr	r3, [pc, #120]	; (8006248 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d109      	bne.n	80061ea <HAL_CAN_RxFifo0MsgPendingCallback+0x5a>
			Principal_Datalogger_Save_Buffer(hcan, rxHeader.StdId, rxHeader.DLC, rxData);
 80061d6:	4b1a      	ldr	r3, [pc, #104]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80061d8:	6819      	ldr	r1, [r3, #0]
 80061da:	4b19      	ldr	r3, [pc, #100]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	4b16      	ldr	r3, [pc, #88]	; (800623c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7ff fea8 	bl	8005f38 <Principal_Datalogger_Save_Buffer>
		}
	}

	else
		verifyCAN &= 1;
}
 80061e8:	e024      	b.n	8006234 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
		else if(rxHeader.IDE == CAN_ID_EXT)
 80061ea:	4b15      	ldr	r3, [pc, #84]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d120      	bne.n	8006234 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
			if((rxHeader.ExtId & CAN_CFG_MASK) == CAN_CFG_FILTER)
 80061f2:	4b13      	ldr	r3, [pc, #76]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	4b15      	ldr	r3, [pc, #84]	; (800624c <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 80061f8:	4013      	ands	r3, r2
 80061fa:	4a15      	ldr	r2, [pc, #84]	; (8006250 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d107      	bne.n	8006210 <HAL_CAN_RxFifo0MsgPendingCallback+0x80>
				Principal_Receive_Config(&hi2c1, rxData, rxHeader.DLC);
 8006200:	4b0f      	ldr	r3, [pc, #60]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	461a      	mov	r2, r3
 8006206:	490d      	ldr	r1, [pc, #52]	; (800623c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8006208:	4812      	ldr	r0, [pc, #72]	; (8006254 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 800620a:	f7fd fbcb 	bl	80039a4 <Principal_Receive_Config>
}
 800620e:	e011      	b.n	8006234 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
				PDM_CAN_Process_Data(&rxHeader, rxData, &pdmReadings);
 8006210:	4a11      	ldr	r2, [pc, #68]	; (8006258 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8006212:	490a      	ldr	r1, [pc, #40]	; (800623c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8006214:	480a      	ldr	r0, [pc, #40]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006216:	f7fb ff49 	bl	80020ac <PDM_CAN_Process_Data>
				FT_CAN_ReceiveData(&rxHeader, rxData, &ecuData);
 800621a:	4a10      	ldr	r2, [pc, #64]	; (800625c <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 800621c:	4907      	ldr	r1, [pc, #28]	; (800623c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800621e:	4808      	ldr	r0, [pc, #32]	; (8006240 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8006220:	f7fa f9fe 	bl	8000620 <FT_CAN_ReceiveData>
}
 8006224:	e006      	b.n	8006234 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>
		verifyCAN &= 1;
 8006226:	4b07      	ldr	r3, [pc, #28]	; (8006244 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	b2da      	uxtb	r2, r3
 8006230:	4b04      	ldr	r3, [pc, #16]	; (8006244 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8006232:	701a      	strb	r2, [r3, #0]
}
 8006234:	bf00      	nop
 8006236:	3708      	adds	r7, #8
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	200065e0 	.word	0x200065e0
 8006240:	200065f4 	.word	0x200065f4
 8006244:	20006774 	.word	0x20006774
 8006248:	200066ea 	.word	0x200066ea
 800624c:	1ff80000 	.word	0x1ff80000
 8006250:	1e300000 	.word	0x1e300000
 8006254:	2000032c 	.word	0x2000032c
 8006258:	200066ac 	.word	0x200066ac
 800625c:	20006644 	.word	0x20006644

08006260 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b084      	sub	sp, #16
 8006264:	af00      	add	r7, sp, #0
 8006266:	4603      	mov	r3, r0
 8006268:	80fb      	strh	r3, [r7, #6]
	GPIO_PinState pinLevel;

	if(GPIO_Pin == EXTI0_Pin)
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006270:	d13a      	bne.n	80062e8 <HAL_GPIO_EXTI_Callback+0x88>
	{
		pinLevel = HAL_GPIO_ReadPin(EXTI0_GPIO_Port, EXTI0_Pin);
 8006272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006276:	483e      	ldr	r0, [pc, #248]	; (8006370 <HAL_GPIO_EXTI_Callback+0x110>)
 8006278:	f002 fec6 	bl	8009008 <HAL_GPIO_ReadPin>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]

		if(((inputConfig & 0x01) == INPUT_BEACON_PIN_0)
 8006280:	4b3c      	ldr	r3, [pc, #240]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b00      	cmp	r3, #0
 800628a:	d113      	bne.n	80062b4 <HAL_GPIO_EXTI_Callback+0x54>
				&& ((((inputConfig & 0x04) == INPUT_BEACON_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 800628c:	4b39      	ldr	r3, [pc, #228]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	f003 0304 	and.w	r3, r3, #4
 8006294:	2b00      	cmp	r3, #0
 8006296:	d102      	bne.n	800629e <HAL_GPIO_EXTI_Callback+0x3e>
 8006298:	7bfb      	ldrb	r3, [r7, #15]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d008      	beq.n	80062b0 <HAL_GPIO_EXTI_Callback+0x50>
				|| (((inputConfig & 0x04) == INPUT_BEACON_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 800629e:	4b35      	ldr	r3, [pc, #212]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 80062a0:	781b      	ldrb	r3, [r3, #0]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d004      	beq.n	80062b4 <HAL_GPIO_EXTI_Callback+0x54>
 80062aa:	7bfb      	ldrb	r3, [r7, #15]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_GPIO_EXTI_Callback+0x54>
			Principal_Beacon_Detect();
 80062b0:	f7ff ff4e 	bl	8006150 <Principal_Beacon_Detect>

		if(((inputConfig & 0x02) == INPUT_DATALOGGER_PIN_0)
 80062b4:	4b2f      	ldr	r3, [pc, #188]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d113      	bne.n	80062e8 <HAL_GPIO_EXTI_Callback+0x88>
				&& ((((inputConfig & 0x08) == INPUT_DATALOGGER_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 80062c0:	4b2c      	ldr	r3, [pc, #176]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <HAL_GPIO_EXTI_Callback+0x72>
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d008      	beq.n	80062e4 <HAL_GPIO_EXTI_Callback+0x84>
				|| (((inputConfig & 0x08) == INPUT_DATALOGGER_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 80062d2:	4b28      	ldr	r3, [pc, #160]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d004      	beq.n	80062e8 <HAL_GPIO_EXTI_Callback+0x88>
 80062de:	7bfb      	ldrb	r3, [r7, #15]
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d101      	bne.n	80062e8 <HAL_GPIO_EXTI_Callback+0x88>
			Principal_Datalogger_Button();
 80062e4:	f7ff feec 	bl	80060c0 <Principal_Datalogger_Button>
	}

	if(GPIO_Pin == EXTI1_Pin)
 80062e8:	88fb      	ldrh	r3, [r7, #6]
 80062ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ee:	d13a      	bne.n	8006366 <HAL_GPIO_EXTI_Callback+0x106>
	{
		pinLevel = HAL_GPIO_ReadPin(EXTI1_GPIO_Port, EXTI1_Pin);
 80062f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062f4:	481e      	ldr	r0, [pc, #120]	; (8006370 <HAL_GPIO_EXTI_Callback+0x110>)
 80062f6:	f002 fe87 	bl	8009008 <HAL_GPIO_ReadPin>
 80062fa:	4603      	mov	r3, r0
 80062fc:	73fb      	strb	r3, [r7, #15]

		if(((inputConfig & 0x01) == INPUT_BEACON_PIN_1)
 80062fe:	4b1d      	ldr	r3, [pc, #116]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b00      	cmp	r3, #0
 8006308:	d013      	beq.n	8006332 <HAL_GPIO_EXTI_Callback+0xd2>
				&& ((((inputConfig & 0x04) == INPUT_BEACON_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 800630a:	4b1a      	ldr	r3, [pc, #104]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	f003 0304 	and.w	r3, r3, #4
 8006312:	2b00      	cmp	r3, #0
 8006314:	d102      	bne.n	800631c <HAL_GPIO_EXTI_Callback+0xbc>
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d008      	beq.n	800632e <HAL_GPIO_EXTI_Callback+0xce>
				|| (((inputConfig & 0x04) == INPUT_BEACON_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 800631c:	4b15      	ldr	r3, [pc, #84]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <HAL_GPIO_EXTI_Callback+0xd2>
 8006328:	7bfb      	ldrb	r3, [r7, #15]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d101      	bne.n	8006332 <HAL_GPIO_EXTI_Callback+0xd2>
			Principal_Beacon_Detect();
 800632e:	f7ff ff0f 	bl	8006150 <Principal_Beacon_Detect>

		if(((inputConfig & 0x02) == INPUT_DATALOGGER_PIN_1)
 8006332:	4b10      	ldr	r3, [pc, #64]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	f003 0302 	and.w	r3, r3, #2
 800633a:	2b00      	cmp	r3, #0
 800633c:	d013      	beq.n	8006366 <HAL_GPIO_EXTI_Callback+0x106>
				&& ((((inputConfig & 0x08) == INPUT_DATALOGGER_FALLING_EDGE) && (pinLevel == GPIO_PIN_RESET))
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 8006340:	781b      	ldrb	r3, [r3, #0]
 8006342:	f003 0308 	and.w	r3, r3, #8
 8006346:	2b00      	cmp	r3, #0
 8006348:	d102      	bne.n	8006350 <HAL_GPIO_EXTI_Callback+0xf0>
 800634a:	7bfb      	ldrb	r3, [r7, #15]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d008      	beq.n	8006362 <HAL_GPIO_EXTI_Callback+0x102>
				|| (((inputConfig & 0x08) == INPUT_DATALOGGER_RISING_EDGE) && (pinLevel == GPIO_PIN_SET))))
 8006350:	4b08      	ldr	r3, [pc, #32]	; (8006374 <HAL_GPIO_EXTI_Callback+0x114>)
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	f003 0308 	and.w	r3, r3, #8
 8006358:	2b00      	cmp	r3, #0
 800635a:	d004      	beq.n	8006366 <HAL_GPIO_EXTI_Callback+0x106>
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d101      	bne.n	8006366 <HAL_GPIO_EXTI_Callback+0x106>
			Principal_Datalogger_Button();
 8006362:	f7ff fead 	bl	80060c0 <Principal_Datalogger_Button>
	}
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	40020400 	.word	0x40020400
 8006374:	200066ec 	.word	0x200066ec

08006378 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a35      	ldr	r2, [pc, #212]	; (800645c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d162      	bne.n	8006450 <HAL_TIM_PeriodElapsedCallback+0xd8>
	{
		accDatalogger[DL_ACC_TIMING]++;
 800638a:	4b35      	ldr	r3, [pc, #212]	; (8006460 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	3301      	adds	r3, #1
 8006390:	4a33      	ldr	r2, [pc, #204]	; (8006460 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8006392:	6093      	str	r3, [r2, #8]
		accDatalogger[DL_ACC_TIMEOUT]++;
 8006394:	4b32      	ldr	r3, [pc, #200]	; (8006460 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	3301      	adds	r3, #1
 800639a:	4a31      	ldr	r2, [pc, #196]	; (8006460 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800639c:	6053      	str	r3, [r2, #4]
		if(accDatalogger[DL_ACC_COOLDOWN] > 0) accDatalogger[DL_ACC_COOLDOWN]--;
 800639e:	4b30      	ldr	r3, [pc, #192]	; (8006460 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d004      	beq.n	80063b0 <HAL_TIM_PeriodElapsedCallback+0x38>
 80063a6:	4b2e      	ldr	r3, [pc, #184]	; (8006460 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	4a2c      	ldr	r2, [pc, #176]	; (8006460 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80063ae:	6013      	str	r3, [r2, #0]

		accCAN[ANALOG_1_4]++;
 80063b0:	4b2c      	ldr	r3, [pc, #176]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	3301      	adds	r3, #1
 80063b6:	4a2b      	ldr	r2, [pc, #172]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063b8:	6013      	str	r3, [r2, #0]
		accCAN[ANALOG_5_8]++;
 80063ba:	4b2a      	ldr	r3, [pc, #168]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	3301      	adds	r3, #1
 80063c0:	4a28      	ldr	r2, [pc, #160]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063c2:	6053      	str	r3, [r2, #4]
		accCAN[ANALOG_9_12]++;
 80063c4:	4b27      	ldr	r3, [pc, #156]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	3301      	adds	r3, #1
 80063ca:	4a26      	ldr	r2, [pc, #152]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063cc:	6093      	str	r3, [r2, #8]
		accCAN[RTC_MSG]++;
 80063ce:	4b25      	ldr	r3, [pc, #148]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	3301      	adds	r3, #1
 80063d4:	4a23      	ldr	r2, [pc, #140]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063d6:	60d3      	str	r3, [r2, #12]
		accCAN[VERIFY_MSG]++;
 80063d8:	4b22      	ldr	r3, [pc, #136]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	3301      	adds	r3, #1
 80063de:	4a21      	ldr	r2, [pc, #132]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063e0:	6113      	str	r3, [r2, #16]
		accCAN[BEACON_MSG]++;
 80063e2:	4b20      	ldr	r3, [pc, #128]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	3301      	adds	r3, #1
 80063e8:	4a1e      	ldr	r2, [pc, #120]	; (8006464 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80063ea:	6153      	str	r3, [r2, #20]

		accMsg[ANALOG_1_4]++;
 80063ec:	4b1e      	ldr	r3, [pc, #120]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	3301      	adds	r3, #1
 80063f2:	4a1d      	ldr	r2, [pc, #116]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80063f4:	6013      	str	r3, [r2, #0]
		accMsg[ANALOG_5_8]++;
 80063f6:	4b1c      	ldr	r3, [pc, #112]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	3301      	adds	r3, #1
 80063fc:	4a1a      	ldr	r2, [pc, #104]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80063fe:	6053      	str	r3, [r2, #4]
		accMsg[ANALOG_9_12]++;
 8006400:	4b19      	ldr	r3, [pc, #100]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	3301      	adds	r3, #1
 8006406:	4a18      	ldr	r2, [pc, #96]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006408:	6093      	str	r3, [r2, #8]
		accMsg[RTC_MSG]++;
 800640a:	4b17      	ldr	r3, [pc, #92]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	4a15      	ldr	r2, [pc, #84]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006412:	60d3      	str	r3, [r2, #12]
		accMsg[VERIFY_MSG]++;
 8006414:	4b14      	ldr	r3, [pc, #80]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	3301      	adds	r3, #1
 800641a:	4a13      	ldr	r2, [pc, #76]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800641c:	6113      	str	r3, [r2, #16]
		accMsg[BEACON_MSG]++;
 800641e:	4b12      	ldr	r3, [pc, #72]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	3301      	adds	r3, #1
 8006424:	4a10      	ldr	r2, [pc, #64]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006426:	6153      	str	r3, [r2, #20]
		accMsg[ECU_SAVE]++;
 8006428:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	3301      	adds	r3, #1
 800642e:	4a0e      	ldr	r2, [pc, #56]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006430:	6193      	str	r3, [r2, #24]
		accMsg[PDM_SAVE]++;
 8006432:	4b0d      	ldr	r3, [pc, #52]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	3301      	adds	r3, #1
 8006438:	4a0b      	ldr	r2, [pc, #44]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800643a:	61d3      	str	r3, [r2, #28]
		accMsg[VERIFY_LEDS]++;
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	3301      	adds	r3, #1
 8006442:	4a09      	ldr	r2, [pc, #36]	; (8006468 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8006444:	6213      	str	r3, [r2, #32]

		accLap++;
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3301      	adds	r3, #1
 800644c:	4a07      	ldr	r2, [pc, #28]	; (800646c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800644e:	6013      	str	r3, [r2, #0]
	}
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	40001400 	.word	0x40001400
 8006460:	20006728 	.word	0x20006728
 8006464:	20006734 	.word	0x20006734
 8006468:	2000674c 	.word	0x2000674c
 800646c:	20006770 	.word	0x20006770

08006470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006476:	2300      	movs	r3, #0
 8006478:	607b      	str	r3, [r7, #4]
 800647a:	4b10      	ldr	r3, [pc, #64]	; (80064bc <HAL_MspInit+0x4c>)
 800647c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647e:	4a0f      	ldr	r2, [pc, #60]	; (80064bc <HAL_MspInit+0x4c>)
 8006480:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006484:	6453      	str	r3, [r2, #68]	; 0x44
 8006486:	4b0d      	ldr	r3, [pc, #52]	; (80064bc <HAL_MspInit+0x4c>)
 8006488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800648a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800648e:	607b      	str	r3, [r7, #4]
 8006490:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006492:	2300      	movs	r3, #0
 8006494:	603b      	str	r3, [r7, #0]
 8006496:	4b09      	ldr	r3, [pc, #36]	; (80064bc <HAL_MspInit+0x4c>)
 8006498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649a:	4a08      	ldr	r2, [pc, #32]	; (80064bc <HAL_MspInit+0x4c>)
 800649c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064a0:	6413      	str	r3, [r2, #64]	; 0x40
 80064a2:	4b06      	ldr	r3, [pc, #24]	; (80064bc <HAL_MspInit+0x4c>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064aa:	603b      	str	r3, [r7, #0]
 80064ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40023800 	.word	0x40023800

080064c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b08e      	sub	sp, #56	; 0x38
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	605a      	str	r2, [r3, #4]
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	60da      	str	r2, [r3, #12]
 80064d6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a79      	ldr	r2, [pc, #484]	; (80066c4 <HAL_ADC_MspInit+0x204>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	f040 808d 	bne.w	80065fe <HAL_ADC_MspInit+0x13e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80064e4:	2300      	movs	r3, #0
 80064e6:	623b      	str	r3, [r7, #32]
 80064e8:	4b77      	ldr	r3, [pc, #476]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 80064ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ec:	4a76      	ldr	r2, [pc, #472]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 80064ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064f2:	6453      	str	r3, [r2, #68]	; 0x44
 80064f4:	4b74      	ldr	r3, [pc, #464]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 80064f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fc:	623b      	str	r3, [r7, #32]
 80064fe:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]
 8006504:	4b70      	ldr	r3, [pc, #448]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	4a6f      	ldr	r2, [pc, #444]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 800650a:	f043 0301 	orr.w	r3, r3, #1
 800650e:	6313      	str	r3, [r2, #48]	; 0x30
 8006510:	4b6d      	ldr	r3, [pc, #436]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 8006512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	61fb      	str	r3, [r7, #28]
 800651a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800651c:	2300      	movs	r3, #0
 800651e:	61bb      	str	r3, [r7, #24]
 8006520:	4b69      	ldr	r3, [pc, #420]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 8006522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006524:	4a68      	ldr	r2, [pc, #416]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 8006526:	f043 0304 	orr.w	r3, r3, #4
 800652a:	6313      	str	r3, [r2, #48]	; 0x30
 800652c:	4b66      	ldr	r3, [pc, #408]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 800652e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	61bb      	str	r3, [r7, #24]
 8006536:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	4b62      	ldr	r3, [pc, #392]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 800653e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006540:	4a61      	ldr	r2, [pc, #388]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 8006542:	f043 0302 	orr.w	r3, r3, #2
 8006546:	6313      	str	r3, [r2, #48]	; 0x30
 8006548:	4b5f      	ldr	r3, [pc, #380]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	617b      	str	r3, [r7, #20]
 8006552:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006554:	23c0      	movs	r3, #192	; 0xc0
 8006556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006558:	2303      	movs	r3, #3
 800655a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800655c:	2300      	movs	r3, #0
 800655e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006564:	4619      	mov	r1, r3
 8006566:	4859      	ldr	r0, [pc, #356]	; (80066cc <HAL_ADC_MspInit+0x20c>)
 8006568:	f002 fbba 	bl	8008ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800656c:	2330      	movs	r3, #48	; 0x30
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006570:	2303      	movs	r3, #3
 8006572:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006574:	2300      	movs	r3, #0
 8006576:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800657c:	4619      	mov	r1, r3
 800657e:	4854      	ldr	r0, [pc, #336]	; (80066d0 <HAL_ADC_MspInit+0x210>)
 8006580:	f002 fbae 	bl	8008ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006584:	2303      	movs	r3, #3
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006588:	2303      	movs	r3, #3
 800658a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800658c:	2300      	movs	r3, #0
 800658e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006594:	4619      	mov	r1, r3
 8006596:	484f      	ldr	r0, [pc, #316]	; (80066d4 <HAL_ADC_MspInit+0x214>)
 8006598:	f002 fba2 	bl	8008ce0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800659c:	4b4e      	ldr	r3, [pc, #312]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 800659e:	4a4f      	ldr	r2, [pc, #316]	; (80066dc <HAL_ADC_MspInit+0x21c>)
 80065a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80065a2:	4b4d      	ldr	r3, [pc, #308]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80065a8:	4b4b      	ldr	r3, [pc, #300]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065aa:	2200      	movs	r2, #0
 80065ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80065ae:	4b4a      	ldr	r3, [pc, #296]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065b0:	2200      	movs	r2, #0
 80065b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80065b4:	4b48      	ldr	r3, [pc, #288]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80065bc:	4b46      	ldr	r3, [pc, #280]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80065c4:	4b44      	ldr	r3, [pc, #272]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065ca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80065cc:	4b42      	ldr	r3, [pc, #264]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065d2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80065d4:	4b40      	ldr	r3, [pc, #256]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065da:	4b3f      	ldr	r3, [pc, #252]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065dc:	2200      	movs	r2, #0
 80065de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80065e0:	483d      	ldr	r0, [pc, #244]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065e2:	f001 ffdf 	bl	80085a4 <HAL_DMA_Init>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 80065ec:	f7fb fb16 	bl	8001c1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a39      	ldr	r2, [pc, #228]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065f4:	639a      	str	r2, [r3, #56]	; 0x38
 80065f6:	4a38      	ldr	r2, [pc, #224]	; (80066d8 <HAL_ADC_MspInit+0x218>)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80065fc:	e05d      	b.n	80066ba <HAL_ADC_MspInit+0x1fa>
  else if(hadc->Instance==ADC2)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a37      	ldr	r2, [pc, #220]	; (80066e0 <HAL_ADC_MspInit+0x220>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d158      	bne.n	80066ba <HAL_ADC_MspInit+0x1fa>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006608:	2300      	movs	r3, #0
 800660a:	613b      	str	r3, [r7, #16]
 800660c:	4b2e      	ldr	r3, [pc, #184]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 800660e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006610:	4a2d      	ldr	r2, [pc, #180]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 8006612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006616:	6453      	str	r3, [r2, #68]	; 0x44
 8006618:	4b2b      	ldr	r3, [pc, #172]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 800661a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800661c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006620:	613b      	str	r3, [r7, #16]
 8006622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	4b27      	ldr	r3, [pc, #156]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	4a26      	ldr	r2, [pc, #152]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 800662e:	f043 0301 	orr.w	r3, r3, #1
 8006632:	6313      	str	r3, [r2, #48]	; 0x30
 8006634:	4b24      	ldr	r3, [pc, #144]	; (80066c8 <HAL_ADC_MspInit+0x208>)
 8006636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006640:	233f      	movs	r3, #63	; 0x3f
 8006642:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006644:	2303      	movs	r3, #3
 8006646:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006648:	2300      	movs	r3, #0
 800664a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800664c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006650:	4619      	mov	r1, r3
 8006652:	481e      	ldr	r0, [pc, #120]	; (80066cc <HAL_ADC_MspInit+0x20c>)
 8006654:	f002 fb44 	bl	8008ce0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006658:	4b22      	ldr	r3, [pc, #136]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 800665a:	4a23      	ldr	r2, [pc, #140]	; (80066e8 <HAL_ADC_MspInit+0x228>)
 800665c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800665e:	4b21      	ldr	r3, [pc, #132]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 8006660:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006664:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006666:	4b1f      	ldr	r3, [pc, #124]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 8006668:	2200      	movs	r2, #0
 800666a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800666c:	4b1d      	ldr	r3, [pc, #116]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 800666e:	2200      	movs	r2, #0
 8006670:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006672:	4b1c      	ldr	r3, [pc, #112]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 8006674:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006678:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800667a:	4b1a      	ldr	r3, [pc, #104]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 800667c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006680:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006682:	4b18      	ldr	r3, [pc, #96]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 8006684:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006688:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800668a:	4b16      	ldr	r3, [pc, #88]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 800668c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006690:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8006692:	4b14      	ldr	r3, [pc, #80]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 8006694:	2200      	movs	r2, #0
 8006696:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006698:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 800669a:	2200      	movs	r2, #0
 800669c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800669e:	4811      	ldr	r0, [pc, #68]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 80066a0:	f001 ff80 	bl	80085a4 <HAL_DMA_Init>
 80066a4:	4603      	mov	r3, r0
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d001      	beq.n	80066ae <HAL_ADC_MspInit+0x1ee>
      Error_Handler();
 80066aa:	f7fb fab7 	bl	8001c1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a0c      	ldr	r2, [pc, #48]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 80066b2:	639a      	str	r2, [r3, #56]	; 0x38
 80066b4:	4a0b      	ldr	r2, [pc, #44]	; (80066e4 <HAL_ADC_MspInit+0x224>)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80066ba:	bf00      	nop
 80066bc:	3738      	adds	r7, #56	; 0x38
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	40012000 	.word	0x40012000
 80066c8:	40023800 	.word	0x40023800
 80066cc:	40020000 	.word	0x40020000
 80066d0:	40020800 	.word	0x40020800
 80066d4:	40020400 	.word	0x40020400
 80066d8:	20000244 	.word	0x20000244
 80066dc:	40026410 	.word	0x40026410
 80066e0:	40012100 	.word	0x40012100
 80066e4:	200002a4 	.word	0x200002a4
 80066e8:	40026440 	.word	0x40026440

080066ec <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b08a      	sub	sp, #40	; 0x28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066f4:	f107 0314 	add.w	r3, r7, #20
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	60da      	str	r2, [r3, #12]
 8006702:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1d      	ldr	r2, [pc, #116]	; (8006780 <HAL_CAN_MspInit+0x94>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d134      	bne.n	8006778 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	613b      	str	r3, [r7, #16]
 8006712:	4b1c      	ldr	r3, [pc, #112]	; (8006784 <HAL_CAN_MspInit+0x98>)
 8006714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006716:	4a1b      	ldr	r2, [pc, #108]	; (8006784 <HAL_CAN_MspInit+0x98>)
 8006718:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800671c:	6413      	str	r3, [r2, #64]	; 0x40
 800671e:	4b19      	ldr	r3, [pc, #100]	; (8006784 <HAL_CAN_MspInit+0x98>)
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800672a:	2300      	movs	r3, #0
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	4b15      	ldr	r3, [pc, #84]	; (8006784 <HAL_CAN_MspInit+0x98>)
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	4a14      	ldr	r2, [pc, #80]	; (8006784 <HAL_CAN_MspInit+0x98>)
 8006734:	f043 0302 	orr.w	r3, r3, #2
 8006738:	6313      	str	r3, [r2, #48]	; 0x30
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <HAL_CAN_MspInit+0x98>)
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	f003 0302 	and.w	r3, r3, #2
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006746:	f44f 7340 	mov.w	r3, #768	; 0x300
 800674a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800674c:	2302      	movs	r3, #2
 800674e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006750:	2300      	movs	r3, #0
 8006752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006754:	2303      	movs	r3, #3
 8006756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006758:	2309      	movs	r3, #9
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800675c:	f107 0314 	add.w	r3, r7, #20
 8006760:	4619      	mov	r1, r3
 8006762:	4809      	ldr	r0, [pc, #36]	; (8006788 <HAL_CAN_MspInit+0x9c>)
 8006764:	f002 fabc 	bl	8008ce0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8006768:	2200      	movs	r2, #0
 800676a:	2101      	movs	r1, #1
 800676c:	2014      	movs	r0, #20
 800676e:	f001 fee2 	bl	8008536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006772:	2014      	movs	r0, #20
 8006774:	f001 fefb 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8006778:	bf00      	nop
 800677a:	3728      	adds	r7, #40	; 0x28
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	40006400 	.word	0x40006400
 8006784:	40023800 	.word	0x40023800
 8006788:	40020400 	.word	0x40020400

0800678c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b08a      	sub	sp, #40	; 0x28
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006794:	f107 0314 	add.w	r3, r7, #20
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	609a      	str	r2, [r3, #8]
 80067a0:	60da      	str	r2, [r3, #12]
 80067a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a19      	ldr	r2, [pc, #100]	; (8006810 <HAL_I2C_MspInit+0x84>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d12b      	bne.n	8006806 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80067ae:	2300      	movs	r3, #0
 80067b0:	613b      	str	r3, [r7, #16]
 80067b2:	4b18      	ldr	r3, [pc, #96]	; (8006814 <HAL_I2C_MspInit+0x88>)
 80067b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067b6:	4a17      	ldr	r2, [pc, #92]	; (8006814 <HAL_I2C_MspInit+0x88>)
 80067b8:	f043 0302 	orr.w	r3, r3, #2
 80067bc:	6313      	str	r3, [r2, #48]	; 0x30
 80067be:	4b15      	ldr	r3, [pc, #84]	; (8006814 <HAL_I2C_MspInit+0x88>)
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80067ca:	23c0      	movs	r3, #192	; 0xc0
 80067cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80067ce:	2312      	movs	r3, #18
 80067d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80067d6:	2303      	movs	r3, #3
 80067d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80067da:	2304      	movs	r3, #4
 80067dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80067de:	f107 0314 	add.w	r3, r7, #20
 80067e2:	4619      	mov	r1, r3
 80067e4:	480c      	ldr	r0, [pc, #48]	; (8006818 <HAL_I2C_MspInit+0x8c>)
 80067e6:	f002 fa7b 	bl	8008ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
 80067ee:	4b09      	ldr	r3, [pc, #36]	; (8006814 <HAL_I2C_MspInit+0x88>)
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	4a08      	ldr	r2, [pc, #32]	; (8006814 <HAL_I2C_MspInit+0x88>)
 80067f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80067f8:	6413      	str	r3, [r2, #64]	; 0x40
 80067fa:	4b06      	ldr	r3, [pc, #24]	; (8006814 <HAL_I2C_MspInit+0x88>)
 80067fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8006806:	bf00      	nop
 8006808:	3728      	adds	r7, #40	; 0x28
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40005400 	.word	0x40005400
 8006814:	40023800 	.word	0x40023800
 8006818:	40020400 	.word	0x40020400

0800681c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b09a      	sub	sp, #104	; 0x68
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006824:	f107 030c 	add.w	r3, r7, #12
 8006828:	225c      	movs	r2, #92	; 0x5c
 800682a:	2100      	movs	r1, #0
 800682c:	4618      	mov	r0, r3
 800682e:	f011 fa9d 	bl	8017d6c <memset>
  if(hrtc->Instance==RTC)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a0c      	ldr	r2, [pc, #48]	; (8006868 <HAL_RTC_MspInit+0x4c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d111      	bne.n	8006860 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800683c:	2320      	movs	r3, #32
 800683e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8006840:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006844:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006846:	f107 030c 	add.w	r3, r7, #12
 800684a:	4618      	mov	r0, r3
 800684c:	f005 f822 	bl	800b894 <HAL_RCCEx_PeriphCLKConfig>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8006856:	f7fb f9e1 	bl	8001c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800685a:	4b04      	ldr	r3, [pc, #16]	; (800686c <HAL_RTC_MspInit+0x50>)
 800685c:	2201      	movs	r2, #1
 800685e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8006860:	bf00      	nop
 8006862:	3768      	adds	r7, #104	; 0x68
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}
 8006868:	40002800 	.word	0x40002800
 800686c:	42470e3c 	.word	0x42470e3c

08006870 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08a      	sub	sp, #40	; 0x28
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006878:	f107 0314 	add.w	r3, r7, #20
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	605a      	str	r2, [r3, #4]
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a69      	ldr	r2, [pc, #420]	; (8006a34 <HAL_SD_MspInit+0x1c4>)
 800688e:	4293      	cmp	r3, r2
 8006890:	f040 80cb 	bne.w	8006a2a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006894:	2300      	movs	r3, #0
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	4b67      	ldr	r3, [pc, #412]	; (8006a38 <HAL_SD_MspInit+0x1c8>)
 800689a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800689c:	4a66      	ldr	r2, [pc, #408]	; (8006a38 <HAL_SD_MspInit+0x1c8>)
 800689e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80068a2:	6453      	str	r3, [r2, #68]	; 0x44
 80068a4:	4b64      	ldr	r3, [pc, #400]	; (8006a38 <HAL_SD_MspInit+0x1c8>)
 80068a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ac:	613b      	str	r3, [r7, #16]
 80068ae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068b0:	2300      	movs	r3, #0
 80068b2:	60fb      	str	r3, [r7, #12]
 80068b4:	4b60      	ldr	r3, [pc, #384]	; (8006a38 <HAL_SD_MspInit+0x1c8>)
 80068b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b8:	4a5f      	ldr	r2, [pc, #380]	; (8006a38 <HAL_SD_MspInit+0x1c8>)
 80068ba:	f043 0304 	orr.w	r3, r3, #4
 80068be:	6313      	str	r3, [r2, #48]	; 0x30
 80068c0:	4b5d      	ldr	r3, [pc, #372]	; (8006a38 <HAL_SD_MspInit+0x1c8>)
 80068c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c4:	f003 0304 	and.w	r3, r3, #4
 80068c8:	60fb      	str	r3, [r7, #12]
 80068ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068cc:	2300      	movs	r3, #0
 80068ce:	60bb      	str	r3, [r7, #8]
 80068d0:	4b59      	ldr	r3, [pc, #356]	; (8006a38 <HAL_SD_MspInit+0x1c8>)
 80068d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d4:	4a58      	ldr	r2, [pc, #352]	; (8006a38 <HAL_SD_MspInit+0x1c8>)
 80068d6:	f043 0308 	orr.w	r3, r3, #8
 80068da:	6313      	str	r3, [r2, #48]	; 0x30
 80068dc:	4b56      	ldr	r3, [pc, #344]	; (8006a38 <HAL_SD_MspInit+0x1c8>)
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	f003 0308 	and.w	r3, r3, #8
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80068e8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80068ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068ee:	2302      	movs	r3, #2
 80068f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068f6:	2303      	movs	r3, #3
 80068f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80068fa:	230c      	movs	r3, #12
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068fe:	f107 0314 	add.w	r3, r7, #20
 8006902:	4619      	mov	r1, r3
 8006904:	484d      	ldr	r0, [pc, #308]	; (8006a3c <HAL_SD_MspInit+0x1cc>)
 8006906:	f002 f9eb 	bl	8008ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800690a:	2304      	movs	r3, #4
 800690c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800690e:	2302      	movs	r3, #2
 8006910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006916:	2303      	movs	r3, #3
 8006918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800691a:	230c      	movs	r3, #12
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800691e:	f107 0314 	add.w	r3, r7, #20
 8006922:	4619      	mov	r1, r3
 8006924:	4846      	ldr	r0, [pc, #280]	; (8006a40 <HAL_SD_MspInit+0x1d0>)
 8006926:	f002 f9db 	bl	8008ce0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 800692a:	4b46      	ldr	r3, [pc, #280]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 800692c:	4a46      	ldr	r2, [pc, #280]	; (8006a48 <HAL_SD_MspInit+0x1d8>)
 800692e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006930:	4b44      	ldr	r3, [pc, #272]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 8006932:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006936:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006938:	4b42      	ldr	r3, [pc, #264]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 800693a:	2200      	movs	r2, #0
 800693c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800693e:	4b41      	ldr	r3, [pc, #260]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 8006940:	2200      	movs	r2, #0
 8006942:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006944:	4b3f      	ldr	r3, [pc, #252]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 8006946:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800694a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800694c:	4b3d      	ldr	r3, [pc, #244]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 800694e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006952:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006954:	4b3b      	ldr	r3, [pc, #236]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 8006956:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800695a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 800695c:	4b39      	ldr	r3, [pc, #228]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 800695e:	2220      	movs	r2, #32
 8006960:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006962:	4b38      	ldr	r3, [pc, #224]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 8006964:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006968:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800696a:	4b36      	ldr	r3, [pc, #216]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 800696c:	2204      	movs	r2, #4
 800696e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006970:	4b34      	ldr	r3, [pc, #208]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 8006972:	2203      	movs	r2, #3
 8006974:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006976:	4b33      	ldr	r3, [pc, #204]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 8006978:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800697c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800697e:	4b31      	ldr	r3, [pc, #196]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 8006980:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006984:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006986:	482f      	ldr	r0, [pc, #188]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 8006988:	f001 fe0c 	bl	80085a4 <HAL_DMA_Init>
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006992:	f7fb f943 	bl	8001c1c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a2a      	ldr	r2, [pc, #168]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 800699a:	641a      	str	r2, [r3, #64]	; 0x40
 800699c:	4a29      	ldr	r2, [pc, #164]	; (8006a44 <HAL_SD_MspInit+0x1d4>)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 80069a2:	4b2a      	ldr	r3, [pc, #168]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069a4:	4a2a      	ldr	r2, [pc, #168]	; (8006a50 <HAL_SD_MspInit+0x1e0>)
 80069a6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80069a8:	4b28      	ldr	r3, [pc, #160]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80069ae:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069b0:	4b26      	ldr	r3, [pc, #152]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069b2:	2240      	movs	r2, #64	; 0x40
 80069b4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80069b6:	4b25      	ldr	r3, [pc, #148]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069b8:	2200      	movs	r2, #0
 80069ba:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80069bc:	4b23      	ldr	r3, [pc, #140]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069c2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80069c4:	4b21      	ldr	r3, [pc, #132]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80069ca:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80069cc:	4b1f      	ldr	r3, [pc, #124]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80069d2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80069d4:	4b1d      	ldr	r3, [pc, #116]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069d6:	2220      	movs	r2, #32
 80069d8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80069da:	4b1c      	ldr	r3, [pc, #112]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069dc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80069e0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80069e2:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069e4:	2204      	movs	r2, #4
 80069e6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80069e8:	4b18      	ldr	r3, [pc, #96]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069ea:	2203      	movs	r2, #3
 80069ec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80069ee:	4b17      	ldr	r3, [pc, #92]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80069f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80069f6:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 80069f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80069fc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80069fe:	4813      	ldr	r0, [pc, #76]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 8006a00:	f001 fdd0 	bl	80085a4 <HAL_DMA_Init>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006a0a:	f7fb f907 	bl	8001c1c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	4a0e      	ldr	r2, [pc, #56]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 8006a12:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a14:	4a0d      	ldr	r2, [pc, #52]	; (8006a4c <HAL_SD_MspInit+0x1dc>)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	2031      	movs	r0, #49	; 0x31
 8006a20:	f001 fd89 	bl	8008536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006a24:	2031      	movs	r0, #49	; 0x31
 8006a26:	f001 fda2 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006a2a:	bf00      	nop
 8006a2c:	3728      	adds	r7, #40	; 0x28
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	40012c00 	.word	0x40012c00
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	40020800 	.word	0x40020800
 8006a40:	40020c00 	.word	0x40020c00
 8006a44:	20000424 	.word	0x20000424
 8006a48:	40026458 	.word	0x40026458
 8006a4c:	20000484 	.word	0x20000484
 8006a50:	400264a0 	.word	0x400264a0

08006a54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a0e      	ldr	r2, [pc, #56]	; (8006a9c <HAL_TIM_Base_MspInit+0x48>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d115      	bne.n	8006a92 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
 8006a6a:	4b0d      	ldr	r3, [pc, #52]	; (8006aa0 <HAL_TIM_Base_MspInit+0x4c>)
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a6e:	4a0c      	ldr	r2, [pc, #48]	; (8006aa0 <HAL_TIM_Base_MspInit+0x4c>)
 8006a70:	f043 0320 	orr.w	r3, r3, #32
 8006a74:	6413      	str	r3, [r2, #64]	; 0x40
 8006a76:	4b0a      	ldr	r3, [pc, #40]	; (8006aa0 <HAL_TIM_Base_MspInit+0x4c>)
 8006a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7a:	f003 0320 	and.w	r3, r3, #32
 8006a7e:	60fb      	str	r3, [r7, #12]
 8006a80:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8006a82:	2200      	movs	r2, #0
 8006a84:	2100      	movs	r1, #0
 8006a86:	2037      	movs	r0, #55	; 0x37
 8006a88:	f001 fd55 	bl	8008536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006a8c:	2037      	movs	r0, #55	; 0x37
 8006a8e:	f001 fd6e 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40001400 	.word	0x40001400
 8006aa0:	40023800 	.word	0x40023800

08006aa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006aa8:	e7fe      	b.n	8006aa8 <NMI_Handler+0x4>

08006aaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006aae:	e7fe      	b.n	8006aae <HardFault_Handler+0x4>

08006ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006ab4:	e7fe      	b.n	8006ab4 <MemManage_Handler+0x4>

08006ab6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006aba:	e7fe      	b.n	8006aba <BusFault_Handler+0x4>

08006abc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006abc:	b480      	push	{r7}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ac0:	e7fe      	b.n	8006ac0 <UsageFault_Handler+0x4>

08006ac2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006ac6:	bf00      	nop
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006ad4:	bf00      	nop
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006ae2:	bf00      	nop
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aea:	4770      	bx	lr

08006aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006af0:	f000 f922 	bl	8006d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006af4:	bf00      	nop
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006afc:	4802      	ldr	r0, [pc, #8]	; (8006b08 <CAN1_RX0_IRQHandler+0x10>)
 8006afe:	f001 fa10 	bl	8007f22 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8006b02:	bf00      	nop
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	20000304 	.word	0x20000304

08006b0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI0_Pin);
 8006b10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006b14:	f002 fac4 	bl	80090a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(EXTI1_Pin);
 8006b18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006b1c:	f002 fac0 	bl	80090a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006b20:	bf00      	nop
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006b28:	4802      	ldr	r0, [pc, #8]	; (8006b34 <SDIO_IRQHandler+0x10>)
 8006b2a:	f006 ffb1 	bl	800da90 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006b2e:	bf00      	nop
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	200003a0 	.word	0x200003a0

08006b38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006b3c:	4802      	ldr	r0, [pc, #8]	; (8006b48 <TIM7_IRQHandler+0x10>)
 8006b3e:	f008 f911 	bl	800ed64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006b42:	bf00      	nop
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	200004e4 	.word	0x200004e4

08006b4c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006b50:	4802      	ldr	r0, [pc, #8]	; (8006b5c <DMA2_Stream0_IRQHandler+0x10>)
 8006b52:	f001 fe4f 	bl	80087f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8006b56:	bf00      	nop
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20000244 	.word	0x20000244

08006b60 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006b64:	4802      	ldr	r0, [pc, #8]	; (8006b70 <DMA2_Stream2_IRQHandler+0x10>)
 8006b66:	f001 fe45 	bl	80087f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006b6a:	bf00      	nop
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	200002a4 	.word	0x200002a4

08006b74 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006b78:	4802      	ldr	r0, [pc, #8]	; (8006b84 <DMA2_Stream3_IRQHandler+0x10>)
 8006b7a:	f001 fe3b 	bl	80087f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006b7e:	bf00      	nop
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20000424 	.word	0x20000424

08006b88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006b8c:	4802      	ldr	r0, [pc, #8]	; (8006b98 <OTG_FS_IRQHandler+0x10>)
 8006b8e:	f003 fb8b 	bl	800a2a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8006b92:	bf00      	nop
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20006c84 	.word	0x20006c84

08006b9c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006ba0:	4802      	ldr	r0, [pc, #8]	; (8006bac <DMA2_Stream6_IRQHandler+0x10>)
 8006ba2:	f001 fe27 	bl	80087f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006ba6:	bf00      	nop
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000484 	.word	0x20000484

08006bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006bb8:	4a14      	ldr	r2, [pc, #80]	; (8006c0c <_sbrk+0x5c>)
 8006bba:	4b15      	ldr	r3, [pc, #84]	; (8006c10 <_sbrk+0x60>)
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006bc4:	4b13      	ldr	r3, [pc, #76]	; (8006c14 <_sbrk+0x64>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d102      	bne.n	8006bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006bcc:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <_sbrk+0x64>)
 8006bce:	4a12      	ldr	r2, [pc, #72]	; (8006c18 <_sbrk+0x68>)
 8006bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006bd2:	4b10      	ldr	r3, [pc, #64]	; (8006c14 <_sbrk+0x64>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4413      	add	r3, r2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d207      	bcs.n	8006bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006be0:	f011 f89a 	bl	8017d18 <__errno>
 8006be4:	4603      	mov	r3, r0
 8006be6:	220c      	movs	r2, #12
 8006be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006bea:	f04f 33ff 	mov.w	r3, #4294967295
 8006bee:	e009      	b.n	8006c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006bf0:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <_sbrk+0x64>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006bf6:	4b07      	ldr	r3, [pc, #28]	; (8006c14 <_sbrk+0x64>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	4a05      	ldr	r2, [pc, #20]	; (8006c14 <_sbrk+0x64>)
 8006c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006c02:	68fb      	ldr	r3, [r7, #12]
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3718      	adds	r7, #24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20020000 	.word	0x20020000
 8006c10:	0000ffff 	.word	0x0000ffff
 8006c14:	20006778 	.word	0x20006778
 8006c18:	20007418 	.word	0x20007418

08006c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006c20:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <SystemInit+0x20>)
 8006c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c26:	4a05      	ldr	r2, [pc, #20]	; (8006c3c <SystemInit+0x20>)
 8006c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006c30:	bf00      	nop
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	e000ed00 	.word	0xe000ed00

08006c40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006c40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006c78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006c44:	480d      	ldr	r0, [pc, #52]	; (8006c7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006c46:	490e      	ldr	r1, [pc, #56]	; (8006c80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006c48:	4a0e      	ldr	r2, [pc, #56]	; (8006c84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006c4c:	e002      	b.n	8006c54 <LoopCopyDataInit>

08006c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006c52:	3304      	adds	r3, #4

08006c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006c58:	d3f9      	bcc.n	8006c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006c5a:	4a0b      	ldr	r2, [pc, #44]	; (8006c88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006c5c:	4c0b      	ldr	r4, [pc, #44]	; (8006c8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8006c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006c60:	e001      	b.n	8006c66 <LoopFillZerobss>

08006c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006c64:	3204      	adds	r2, #4

08006c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006c68:	d3fb      	bcc.n	8006c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006c6a:	f7ff ffd7 	bl	8006c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006c6e:	f011 f859 	bl	8017d24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006c72:	f7fa fb61 	bl	8001338 <main>
  bx  lr    
 8006c76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006c78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006c7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006c80:	20000198 	.word	0x20000198
  ldr r2, =_sidata
 8006c84:	08018820 	.word	0x08018820
  ldr r2, =_sbss
 8006c88:	20000198 	.word	0x20000198
  ldr r4, =_ebss
 8006c8c:	20007418 	.word	0x20007418

08006c90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006c90:	e7fe      	b.n	8006c90 <ADC_IRQHandler>
	...

08006c94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c98:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <HAL_Init+0x40>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a0d      	ldr	r2, [pc, #52]	; (8006cd4 <HAL_Init+0x40>)
 8006c9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ca2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <HAL_Init+0x40>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a0a      	ldr	r2, [pc, #40]	; (8006cd4 <HAL_Init+0x40>)
 8006caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006cb0:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <HAL_Init+0x40>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a07      	ldr	r2, [pc, #28]	; (8006cd4 <HAL_Init+0x40>)
 8006cb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006cbc:	2003      	movs	r0, #3
 8006cbe:	f001 fc2f 	bl	8008520 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006cc2:	200f      	movs	r0, #15
 8006cc4:	f000 f808 	bl	8006cd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006cc8:	f7ff fbd2 	bl	8006470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40023c00 	.word	0x40023c00

08006cd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ce0:	4b12      	ldr	r3, [pc, #72]	; (8006d2c <HAL_InitTick+0x54>)
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	4b12      	ldr	r3, [pc, #72]	; (8006d30 <HAL_InitTick+0x58>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 fc47 	bl	800858a <HAL_SYSTICK_Config>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e00e      	b.n	8006d24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b0f      	cmp	r3, #15
 8006d0a:	d80a      	bhi.n	8006d22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	f04f 30ff 	mov.w	r0, #4294967295
 8006d14:	f001 fc0f 	bl	8008536 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006d18:	4a06      	ldr	r2, [pc, #24]	; (8006d34 <HAL_InitTick+0x5c>)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	e000      	b.n	8006d24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	3708      	adds	r7, #8
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	20000000 	.word	0x20000000
 8006d30:	20000008 	.word	0x20000008
 8006d34:	20000004 	.word	0x20000004

08006d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006d3c:	4b06      	ldr	r3, [pc, #24]	; (8006d58 <HAL_IncTick+0x20>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <HAL_IncTick+0x24>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4413      	add	r3, r2
 8006d48:	4a04      	ldr	r2, [pc, #16]	; (8006d5c <HAL_IncTick+0x24>)
 8006d4a:	6013      	str	r3, [r2, #0]
}
 8006d4c:	bf00      	nop
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr
 8006d56:	bf00      	nop
 8006d58:	20000008 	.word	0x20000008
 8006d5c:	2000677c 	.word	0x2000677c

08006d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006d60:	b480      	push	{r7}
 8006d62:	af00      	add	r7, sp, #0
  return uwTick;
 8006d64:	4b03      	ldr	r3, [pc, #12]	; (8006d74 <HAL_GetTick+0x14>)
 8006d66:	681b      	ldr	r3, [r3, #0]
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	2000677c 	.word	0x2000677c

08006d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006d80:	f7ff ffee 	bl	8006d60 <HAL_GetTick>
 8006d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d90:	d005      	beq.n	8006d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d92:	4b0a      	ldr	r3, [pc, #40]	; (8006dbc <HAL_Delay+0x44>)
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006d9e:	bf00      	nop
 8006da0:	f7ff ffde 	bl	8006d60 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d8f7      	bhi.n	8006da0 <HAL_Delay+0x28>
  {
  }
}
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	20000008 	.word	0x20000008

08006dc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e033      	b.n	8006e3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d109      	bne.n	8006df2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff fb6e 	bl	80064c0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2200      	movs	r2, #0
 8006de8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df6:	f003 0310 	and.w	r3, r3, #16
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d118      	bne.n	8006e30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8006e06:	f023 0302 	bic.w	r3, r3, #2
 8006e0a:	f043 0202 	orr.w	r2, r3, #2
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 fa78 	bl	8007308 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e22:	f023 0303 	bic.w	r3, r3, #3
 8006e26:	f043 0201 	orr.w	r2, r3, #1
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	641a      	str	r2, [r3, #64]	; 0x40
 8006e2e:	e001      	b.n	8006e34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b086      	sub	sp, #24
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	60f8      	str	r0, [r7, #12]
 8006e50:	60b9      	str	r1, [r7, #8]
 8006e52:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_ADC_Start_DMA+0x1e>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e0e9      	b.n	800703a <HAL_ADC_Start_DMA+0x1f2>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	689b      	ldr	r3, [r3, #8]
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d018      	beq.n	8006eae <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f042 0201 	orr.w	r2, r2, #1
 8006e8a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006e8c:	4b6d      	ldr	r3, [pc, #436]	; (8007044 <HAL_ADC_Start_DMA+0x1fc>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4a6d      	ldr	r2, [pc, #436]	; (8007048 <HAL_ADC_Start_DMA+0x200>)
 8006e92:	fba2 2303 	umull	r2, r3, r2, r3
 8006e96:	0c9a      	lsrs	r2, r3, #18
 8006e98:	4613      	mov	r3, r2
 8006e9a:	005b      	lsls	r3, r3, #1
 8006e9c:	4413      	add	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ea0:	e002      	b.n	8006ea8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1f9      	bne.n	8006ea2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006ebc:	d107      	bne.n	8006ece <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	689a      	ldr	r2, [r3, #8]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ecc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	f040 80a1 	bne.w	8007020 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006ee6:	f023 0301 	bic.w	r3, r3, #1
 8006eea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d007      	beq.n	8006f10 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f04:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006f08:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006f18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f1c:	d106      	bne.n	8006f2c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f22:	f023 0206 	bic.w	r2, r3, #6
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	645a      	str	r2, [r3, #68]	; 0x44
 8006f2a:	e002      	b.n	8006f32 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006f3a:	4b44      	ldr	r3, [pc, #272]	; (800704c <HAL_ADC_Start_DMA+0x204>)
 8006f3c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f42:	4a43      	ldr	r2, [pc, #268]	; (8007050 <HAL_ADC_Start_DMA+0x208>)
 8006f44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	4a42      	ldr	r2, [pc, #264]	; (8007054 <HAL_ADC_Start_DMA+0x20c>)
 8006f4c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f52:	4a41      	ldr	r2, [pc, #260]	; (8007058 <HAL_ADC_Start_DMA+0x210>)
 8006f54:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8006f5e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685a      	ldr	r2, [r3, #4]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8006f6e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689a      	ldr	r2, [r3, #8]
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f7e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	334c      	adds	r3, #76	; 0x4c
 8006f8a:	4619      	mov	r1, r3
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f001 fbb6 	bl	8008700 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f003 031f 	and.w	r3, r3, #31
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d12a      	bne.n	8006ff6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a2d      	ldr	r2, [pc, #180]	; (800705c <HAL_ADC_Start_DMA+0x214>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d015      	beq.n	8006fd6 <HAL_ADC_Start_DMA+0x18e>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a2c      	ldr	r2, [pc, #176]	; (8007060 <HAL_ADC_Start_DMA+0x218>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d105      	bne.n	8006fc0 <HAL_ADC_Start_DMA+0x178>
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <HAL_ADC_Start_DMA+0x204>)
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	f003 031f 	and.w	r3, r3, #31
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a27      	ldr	r2, [pc, #156]	; (8007064 <HAL_ADC_Start_DMA+0x21c>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d136      	bne.n	8007038 <HAL_ADC_Start_DMA+0x1f0>
 8006fca:	4b20      	ldr	r3, [pc, #128]	; (800704c <HAL_ADC_Start_DMA+0x204>)
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f003 0310 	and.w	r3, r3, #16
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d130      	bne.n	8007038 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d129      	bne.n	8007038 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006ff2:	609a      	str	r2, [r3, #8]
 8006ff4:	e020      	b.n	8007038 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a18      	ldr	r2, [pc, #96]	; (800705c <HAL_ADC_Start_DMA+0x214>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d11b      	bne.n	8007038 <HAL_ADC_Start_DMA+0x1f0>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800700a:	2b00      	cmp	r3, #0
 800700c:	d114      	bne.n	8007038 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	689a      	ldr	r2, [r3, #8]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800701c:	609a      	str	r2, [r3, #8]
 800701e:	e00b      	b.n	8007038 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007024:	f043 0210 	orr.w	r2, r3, #16
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007030:	f043 0201 	orr.w	r2, r3, #1
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000000 	.word	0x20000000
 8007048:	431bde83 	.word	0x431bde83
 800704c:	40012300 	.word	0x40012300
 8007050:	08007501 	.word	0x08007501
 8007054:	080075bb 	.word	0x080075bb
 8007058:	080075d7 	.word	0x080075d7
 800705c:	40012000 	.word	0x40012000
 8007060:	40012100 	.word	0x40012100
 8007064:	40012200 	.word	0x40012200

08007068 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007068:	b480      	push	{r7}
 800706a:	b083      	sub	sp, #12
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007070:	bf00      	nop
 8007072:	370c      	adds	r7, #12
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80070ae:	2300      	movs	r3, #0
 80070b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_ADC_ConfigChannel+0x1c>
 80070bc:	2302      	movs	r3, #2
 80070be:	e113      	b.n	80072e8 <HAL_ADC_ConfigChannel+0x244>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b09      	cmp	r3, #9
 80070ce:	d925      	bls.n	800711c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68d9      	ldr	r1, [r3, #12]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	461a      	mov	r2, r3
 80070de:	4613      	mov	r3, r2
 80070e0:	005b      	lsls	r3, r3, #1
 80070e2:	4413      	add	r3, r2
 80070e4:	3b1e      	subs	r3, #30
 80070e6:	2207      	movs	r2, #7
 80070e8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ec:	43da      	mvns	r2, r3
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	400a      	ands	r2, r1
 80070f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68d9      	ldr	r1, [r3, #12]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	b29b      	uxth	r3, r3
 8007106:	4618      	mov	r0, r3
 8007108:	4603      	mov	r3, r0
 800710a:	005b      	lsls	r3, r3, #1
 800710c:	4403      	add	r3, r0
 800710e:	3b1e      	subs	r3, #30
 8007110:	409a      	lsls	r2, r3
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	430a      	orrs	r2, r1
 8007118:	60da      	str	r2, [r3, #12]
 800711a:	e022      	b.n	8007162 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	6919      	ldr	r1, [r3, #16]
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	461a      	mov	r2, r3
 800712a:	4613      	mov	r3, r2
 800712c:	005b      	lsls	r3, r3, #1
 800712e:	4413      	add	r3, r2
 8007130:	2207      	movs	r2, #7
 8007132:	fa02 f303 	lsl.w	r3, r2, r3
 8007136:	43da      	mvns	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	400a      	ands	r2, r1
 800713e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	6919      	ldr	r1, [r3, #16]
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	689a      	ldr	r2, [r3, #8]
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	b29b      	uxth	r3, r3
 8007150:	4618      	mov	r0, r3
 8007152:	4603      	mov	r3, r0
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	4403      	add	r3, r0
 8007158:	409a      	lsls	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	430a      	orrs	r2, r1
 8007160:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2b06      	cmp	r3, #6
 8007168:	d824      	bhi.n	80071b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	3b05      	subs	r3, #5
 800717c:	221f      	movs	r2, #31
 800717e:	fa02 f303 	lsl.w	r3, r2, r3
 8007182:	43da      	mvns	r2, r3
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	400a      	ands	r2, r1
 800718a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	b29b      	uxth	r3, r3
 8007198:	4618      	mov	r0, r3
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	685a      	ldr	r2, [r3, #4]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	3b05      	subs	r3, #5
 80071a6:	fa00 f203 	lsl.w	r2, r0, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	430a      	orrs	r2, r1
 80071b0:	635a      	str	r2, [r3, #52]	; 0x34
 80071b2:	e04c      	b.n	800724e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	2b0c      	cmp	r3, #12
 80071ba:	d824      	bhi.n	8007206 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4413      	add	r3, r2
 80071cc:	3b23      	subs	r3, #35	; 0x23
 80071ce:	221f      	movs	r2, #31
 80071d0:	fa02 f303 	lsl.w	r3, r2, r3
 80071d4:	43da      	mvns	r2, r3
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	400a      	ands	r2, r1
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	4618      	mov	r0, r3
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	685a      	ldr	r2, [r3, #4]
 80071f0:	4613      	mov	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	4413      	add	r3, r2
 80071f6:	3b23      	subs	r3, #35	; 0x23
 80071f8:	fa00 f203 	lsl.w	r2, r0, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	430a      	orrs	r2, r1
 8007202:	631a      	str	r2, [r3, #48]	; 0x30
 8007204:	e023      	b.n	800724e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	685a      	ldr	r2, [r3, #4]
 8007210:	4613      	mov	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	4413      	add	r3, r2
 8007216:	3b41      	subs	r3, #65	; 0x41
 8007218:	221f      	movs	r2, #31
 800721a:	fa02 f303 	lsl.w	r3, r2, r3
 800721e:	43da      	mvns	r2, r3
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	400a      	ands	r2, r1
 8007226:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	b29b      	uxth	r3, r3
 8007234:	4618      	mov	r0, r3
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685a      	ldr	r2, [r3, #4]
 800723a:	4613      	mov	r3, r2
 800723c:	009b      	lsls	r3, r3, #2
 800723e:	4413      	add	r3, r2
 8007240:	3b41      	subs	r3, #65	; 0x41
 8007242:	fa00 f203 	lsl.w	r2, r0, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800724e:	4b29      	ldr	r3, [pc, #164]	; (80072f4 <HAL_ADC_ConfigChannel+0x250>)
 8007250:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <HAL_ADC_ConfigChannel+0x254>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d10f      	bne.n	800727c <HAL_ADC_ConfigChannel+0x1d8>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b12      	cmp	r3, #18
 8007262:	d10b      	bne.n	800727c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1d      	ldr	r2, [pc, #116]	; (80072f8 <HAL_ADC_ConfigChannel+0x254>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d12b      	bne.n	80072de <HAL_ADC_ConfigChannel+0x23a>
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a1c      	ldr	r2, [pc, #112]	; (80072fc <HAL_ADC_ConfigChannel+0x258>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d003      	beq.n	8007298 <HAL_ADC_ConfigChannel+0x1f4>
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b11      	cmp	r3, #17
 8007296:	d122      	bne.n	80072de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a11      	ldr	r2, [pc, #68]	; (80072fc <HAL_ADC_ConfigChannel+0x258>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d111      	bne.n	80072de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80072ba:	4b11      	ldr	r3, [pc, #68]	; (8007300 <HAL_ADC_ConfigChannel+0x25c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a11      	ldr	r2, [pc, #68]	; (8007304 <HAL_ADC_ConfigChannel+0x260>)
 80072c0:	fba2 2303 	umull	r2, r3, r2, r3
 80072c4:	0c9a      	lsrs	r2, r3, #18
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	005b      	lsls	r3, r3, #1
 80072ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80072d0:	e002      	b.n	80072d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1f9      	bne.n	80072d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	40012300 	.word	0x40012300
 80072f8:	40012000 	.word	0x40012000
 80072fc:	10000012 	.word	0x10000012
 8007300:	20000000 	.word	0x20000000
 8007304:	431bde83 	.word	0x431bde83

08007308 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007310:	4b79      	ldr	r3, [pc, #484]	; (80074f8 <ADC_Init+0x1f0>)
 8007312:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	431a      	orrs	r2, r3
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800733c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	6859      	ldr	r1, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	691b      	ldr	r3, [r3, #16]
 8007348:	021a      	lsls	r2, r3, #8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	430a      	orrs	r2, r1
 8007350:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6859      	ldr	r1, [r3, #4]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	430a      	orrs	r2, r1
 8007372:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	689a      	ldr	r2, [r3, #8]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6899      	ldr	r1, [r3, #8]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739a:	4a58      	ldr	r2, [pc, #352]	; (80074fc <ADC_Init+0x1f4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d022      	beq.n	80073e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	6899      	ldr	r1, [r3, #8]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	430a      	orrs	r2, r1
 80073c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80073d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6899      	ldr	r1, [r3, #8]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	430a      	orrs	r2, r1
 80073e2:	609a      	str	r2, [r3, #8]
 80073e4:	e00f      	b.n	8007406 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80073f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689a      	ldr	r2, [r3, #8]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007404:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689a      	ldr	r2, [r3, #8]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0202 	bic.w	r2, r2, #2
 8007414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	6899      	ldr	r1, [r3, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	7e1b      	ldrb	r3, [r3, #24]
 8007420:	005a      	lsls	r2, r3, #1
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	430a      	orrs	r2, r1
 8007428:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d01b      	beq.n	800746c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685a      	ldr	r2, [r3, #4]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007442:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007452:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	6859      	ldr	r1, [r3, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745e:	3b01      	subs	r3, #1
 8007460:	035a      	lsls	r2, r3, #13
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	430a      	orrs	r2, r1
 8007468:	605a      	str	r2, [r3, #4]
 800746a:	e007      	b.n	800747c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800747a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800748a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	69db      	ldr	r3, [r3, #28]
 8007496:	3b01      	subs	r3, #1
 8007498:	051a      	lsls	r2, r3, #20
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	689a      	ldr	r2, [r3, #8]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80074b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6899      	ldr	r1, [r3, #8]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80074be:	025a      	lsls	r2, r3, #9
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	430a      	orrs	r2, r1
 80074c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6899      	ldr	r1, [r3, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	695b      	ldr	r3, [r3, #20]
 80074e2:	029a      	lsls	r2, r3, #10
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	609a      	str	r2, [r3, #8]
}
 80074ec:	bf00      	nop
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	40012300 	.word	0x40012300
 80074fc:	0f000001 	.word	0x0f000001

08007500 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800750c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007516:	2b00      	cmp	r3, #0
 8007518:	d13c      	bne.n	8007594 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d12b      	bne.n	800758c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007538:	2b00      	cmp	r3, #0
 800753a:	d127      	bne.n	800758c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007546:	2b00      	cmp	r3, #0
 8007548:	d006      	beq.n	8007558 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007554:	2b00      	cmp	r3, #0
 8007556:	d119      	bne.n	800758c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f022 0220 	bic.w	r2, r2, #32
 8007566:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d105      	bne.n	800758c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007584:	f043 0201 	orr.w	r2, r3, #1
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff fd6b 	bl	8007068 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007592:	e00e      	b.n	80075b2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80075a0:	68f8      	ldr	r0, [r7, #12]
 80075a2:	f7ff fd75 	bl	8007090 <HAL_ADC_ErrorCallback>
}
 80075a6:	e004      	b.n	80075b2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	4798      	blx	r3
}
 80075b2:	bf00      	nop
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	f7ff fd57 	bl	800707c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80075ce:	bf00      	nop
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b084      	sub	sp, #16
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2240      	movs	r2, #64	; 0x40
 80075e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075ee:	f043 0204 	orr.w	r2, r3, #4
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fd4a 	bl	8007090 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80075fc:	bf00      	nop
 80075fe:	3710      	adds	r7, #16
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b084      	sub	sp, #16
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e0ed      	b.n	80077f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f893 3020 	ldrb.w	r3, [r3, #32]
 800761c:	b2db      	uxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	d102      	bne.n	8007628 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7ff f862 	bl	80066ec <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f042 0201 	orr.w	r2, r2, #1
 8007636:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007638:	f7ff fb92 	bl	8006d60 <HAL_GetTick>
 800763c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800763e:	e012      	b.n	8007666 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007640:	f7ff fb8e 	bl	8006d60 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	2b0a      	cmp	r3, #10
 800764c:	d90b      	bls.n	8007666 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007652:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2205      	movs	r2, #5
 800765e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e0c5      	b.n	80077f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f003 0301 	and.w	r3, r3, #1
 8007670:	2b00      	cmp	r3, #0
 8007672:	d0e5      	beq.n	8007640 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0202 	bic.w	r2, r2, #2
 8007682:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007684:	f7ff fb6c 	bl	8006d60 <HAL_GetTick>
 8007688:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800768a:	e012      	b.n	80076b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800768c:	f7ff fb68 	bl	8006d60 <HAL_GetTick>
 8007690:	4602      	mov	r2, r0
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2b0a      	cmp	r3, #10
 8007698:	d90b      	bls.n	80076b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2205      	movs	r2, #5
 80076aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e09f      	b.n	80077f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e5      	bne.n	800768c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	7e1b      	ldrb	r3, [r3, #24]
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d108      	bne.n	80076da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	e007      	b.n	80076ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80076e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	7e5b      	ldrb	r3, [r3, #25]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d108      	bne.n	8007704 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681a      	ldr	r2, [r3, #0]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007700:	601a      	str	r2, [r3, #0]
 8007702:	e007      	b.n	8007714 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681a      	ldr	r2, [r3, #0]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007712:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	7e9b      	ldrb	r3, [r3, #26]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d108      	bne.n	800772e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0220 	orr.w	r2, r2, #32
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	e007      	b.n	800773e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0220 	bic.w	r2, r2, #32
 800773c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	7edb      	ldrb	r3, [r3, #27]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d108      	bne.n	8007758 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681a      	ldr	r2, [r3, #0]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f022 0210 	bic.w	r2, r2, #16
 8007754:	601a      	str	r2, [r3, #0]
 8007756:	e007      	b.n	8007768 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681a      	ldr	r2, [r3, #0]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f042 0210 	orr.w	r2, r2, #16
 8007766:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	7f1b      	ldrb	r3, [r3, #28]
 800776c:	2b01      	cmp	r3, #1
 800776e:	d108      	bne.n	8007782 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f042 0208 	orr.w	r2, r2, #8
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e007      	b.n	8007792 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f022 0208 	bic.w	r2, r2, #8
 8007790:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	7f5b      	ldrb	r3, [r3, #29]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d108      	bne.n	80077ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f042 0204 	orr.w	r2, r2, #4
 80077a8:	601a      	str	r2, [r3, #0]
 80077aa:	e007      	b.n	80077bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	681a      	ldr	r2, [r3, #0]
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f022 0204 	bic.w	r2, r2, #4
 80077ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	689a      	ldr	r2, [r3, #8]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	431a      	orrs	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	431a      	orrs	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	695b      	ldr	r3, [r3, #20]
 80077d0:	ea42 0103 	orr.w	r1, r2, r3
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	1e5a      	subs	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	430a      	orrs	r2, r1
 80077e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b087      	sub	sp, #28
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007812:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8007814:	7cfb      	ldrb	r3, [r7, #19]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d003      	beq.n	8007822 <HAL_CAN_ConfigFilter+0x26>
 800781a:	7cfb      	ldrb	r3, [r7, #19]
 800781c:	2b02      	cmp	r3, #2
 800781e:	f040 80be 	bne.w	800799e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8007822:	4b65      	ldr	r3, [pc, #404]	; (80079b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8007824:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800782c:	f043 0201 	orr.w	r2, r3, #1
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800783c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007850:	021b      	lsls	r3, r3, #8
 8007852:	431a      	orrs	r2, r3
 8007854:	697b      	ldr	r3, [r7, #20]
 8007856:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	f003 031f 	and.w	r3, r3, #31
 8007862:	2201      	movs	r2, #1
 8007864:	fa02 f303 	lsl.w	r3, r2, r3
 8007868:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	43db      	mvns	r3, r3
 8007874:	401a      	ands	r2, r3
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	69db      	ldr	r3, [r3, #28]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d123      	bne.n	80078cc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	43db      	mvns	r3, r3
 800788e:	401a      	ands	r2, r3
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80078a2:	683a      	ldr	r2, [r7, #0]
 80078a4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80078a6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	3248      	adds	r2, #72	; 0x48
 80078ac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80078c0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80078c2:	6979      	ldr	r1, [r7, #20]
 80078c4:	3348      	adds	r3, #72	; 0x48
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	440b      	add	r3, r1
 80078ca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	69db      	ldr	r3, [r3, #28]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d122      	bne.n	800791a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	431a      	orrs	r2, r3
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80078f4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	3248      	adds	r2, #72	; 0x48
 80078fa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	68db      	ldr	r3, [r3, #12]
 8007908:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800790e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007910:	6979      	ldr	r1, [r7, #20]
 8007912:	3348      	adds	r3, #72	; 0x48
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	440b      	add	r3, r1
 8007918:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	699b      	ldr	r3, [r3, #24]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d109      	bne.n	8007936 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	43db      	mvns	r3, r3
 800792c:	401a      	ands	r2, r3
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8007934:	e007      	b.n	8007946 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8007936:	697b      	ldr	r3, [r7, #20]
 8007938:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	431a      	orrs	r2, r3
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d109      	bne.n	8007962 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	43db      	mvns	r3, r3
 8007958:	401a      	ands	r2, r3
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8007960:	e007      	b.n	8007972 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	431a      	orrs	r2, r3
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d107      	bne.n	800798a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	431a      	orrs	r2, r3
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007990:	f023 0201 	bic.w	r2, r3, #1
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	e006      	b.n	80079ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
  }
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	371c      	adds	r7, #28
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	40006400 	.word	0x40006400

080079bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d12e      	bne.n	8007a2e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2202      	movs	r2, #2
 80079d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f022 0201 	bic.w	r2, r2, #1
 80079e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80079e8:	f7ff f9ba 	bl	8006d60 <HAL_GetTick>
 80079ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80079ee:	e012      	b.n	8007a16 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80079f0:	f7ff f9b6 	bl	8006d60 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b0a      	cmp	r3, #10
 80079fc:	d90b      	bls.n	8007a16 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2205      	movs	r2, #5
 8007a0e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e012      	b.n	8007a3c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d1e5      	bne.n	80079f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e006      	b.n	8007a3c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a32:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
  }
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b089      	sub	sp, #36	; 0x24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007a58:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8007a62:	7ffb      	ldrb	r3, [r7, #31]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d003      	beq.n	8007a70 <HAL_CAN_AddTxMessage+0x2c>
 8007a68:	7ffb      	ldrb	r3, [r7, #31]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	f040 80b8 	bne.w	8007be0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007a7a:	69bb      	ldr	r3, [r7, #24]
 8007a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d105      	bne.n	8007a90 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	f000 80a0 	beq.w	8007bd0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	0e1b      	lsrs	r3, r3, #24
 8007a94:	f003 0303 	and.w	r3, r3, #3
 8007a98:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d907      	bls.n	8007ab0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e09e      	b.n	8007bee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	409a      	lsls	r2, r3
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d10d      	bne.n	8007ade <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007acc:	68f9      	ldr	r1, [r7, #12]
 8007ace:	6809      	ldr	r1, [r1, #0]
 8007ad0:	431a      	orrs	r2, r3
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	3318      	adds	r3, #24
 8007ad6:	011b      	lsls	r3, r3, #4
 8007ad8:	440b      	add	r3, r1
 8007ada:	601a      	str	r2, [r3, #0]
 8007adc:	e00f      	b.n	8007afe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007ae8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007aee:	68f9      	ldr	r1, [r7, #12]
 8007af0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007af2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	3318      	adds	r3, #24
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	440b      	add	r3, r1
 8007afc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6819      	ldr	r1, [r3, #0]
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	691a      	ldr	r2, [r3, #16]
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	3318      	adds	r3, #24
 8007b0a:	011b      	lsls	r3, r3, #4
 8007b0c:	440b      	add	r3, r1
 8007b0e:	3304      	adds	r3, #4
 8007b10:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	7d1b      	ldrb	r3, [r3, #20]
 8007b16:	2b01      	cmp	r3, #1
 8007b18:	d111      	bne.n	8007b3e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	3318      	adds	r3, #24
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	4413      	add	r3, r2
 8007b26:	3304      	adds	r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68fa      	ldr	r2, [r7, #12]
 8007b2c:	6811      	ldr	r1, [r2, #0]
 8007b2e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	3318      	adds	r3, #24
 8007b36:	011b      	lsls	r3, r3, #4
 8007b38:	440b      	add	r3, r1
 8007b3a:	3304      	adds	r3, #4
 8007b3c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3307      	adds	r3, #7
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	061a      	lsls	r2, r3, #24
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	3306      	adds	r3, #6
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	041b      	lsls	r3, r3, #16
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3305      	adds	r3, #5
 8007b54:	781b      	ldrb	r3, [r3, #0]
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	687a      	ldr	r2, [r7, #4]
 8007b5c:	3204      	adds	r2, #4
 8007b5e:	7812      	ldrb	r2, [r2, #0]
 8007b60:	4610      	mov	r0, r2
 8007b62:	68fa      	ldr	r2, [r7, #12]
 8007b64:	6811      	ldr	r1, [r2, #0]
 8007b66:	ea43 0200 	orr.w	r2, r3, r0
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	440b      	add	r3, r1
 8007b70:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8007b74:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	3303      	adds	r3, #3
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	061a      	lsls	r2, r3, #24
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	3302      	adds	r3, #2
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	041b      	lsls	r3, r3, #16
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	021b      	lsls	r3, r3, #8
 8007b90:	4313      	orrs	r3, r2
 8007b92:	687a      	ldr	r2, [r7, #4]
 8007b94:	7812      	ldrb	r2, [r2, #0]
 8007b96:	4610      	mov	r0, r2
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	6811      	ldr	r1, [r2, #0]
 8007b9c:	ea43 0200 	orr.w	r2, r3, r0
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	011b      	lsls	r3, r3, #4
 8007ba4:	440b      	add	r3, r1
 8007ba6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8007baa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	697b      	ldr	r3, [r7, #20]
 8007bb2:	3318      	adds	r3, #24
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	4413      	add	r3, r2
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68fa      	ldr	r2, [r7, #12]
 8007bbc:	6811      	ldr	r1, [r2, #0]
 8007bbe:	f043 0201 	orr.w	r2, r3, #1
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	3318      	adds	r3, #24
 8007bc6:	011b      	lsls	r3, r3, #4
 8007bc8:	440b      	add	r3, r1
 8007bca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	e00e      	b.n	8007bee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e006      	b.n	8007bee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
  }
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3724      	adds	r7, #36	; 0x24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8007bfa:	b480      	push	{r7}
 8007bfc:	b085      	sub	sp, #20
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c0c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8007c0e:	7afb      	ldrb	r3, [r7, #11]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d002      	beq.n	8007c1a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007c14:	7afb      	ldrb	r3, [r7, #11]
 8007c16:	2b02      	cmp	r3, #2
 8007c18:	d11d      	bne.n	8007c56 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d002      	beq.n	8007c42 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d002      	beq.n	8007c56 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8007c56:	68fb      	ldr	r3, [r7, #12]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3714      	adds	r7, #20
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c62:	4770      	bx	lr

08007c64 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8007c64:	b480      	push	{r7}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
 8007c70:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c78:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007c7a:	7dfb      	ldrb	r3, [r7, #23]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d003      	beq.n	8007c88 <HAL_CAN_GetRxMessage+0x24>
 8007c80:	7dfb      	ldrb	r3, [r7, #23]
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	f040 80f3 	bne.w	8007e6e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10e      	bne.n	8007cac <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0303 	and.w	r3, r3, #3
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d116      	bne.n	8007cca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007ca8:	2301      	movs	r3, #1
 8007caa:	e0e7      	b.n	8007e7c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d107      	bne.n	8007cca <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e0d8      	b.n	8007e7c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	331b      	adds	r3, #27
 8007cd2:	011b      	lsls	r3, r3, #4
 8007cd4:	4413      	add	r3, r2
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0204 	and.w	r2, r3, #4
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10c      	bne.n	8007d02 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681a      	ldr	r2, [r3, #0]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	331b      	adds	r3, #27
 8007cf0:	011b      	lsls	r3, r3, #4
 8007cf2:	4413      	add	r3, r2
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	0d5b      	lsrs	r3, r3, #21
 8007cf8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	601a      	str	r2, [r3, #0]
 8007d00:	e00b      	b.n	8007d1a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	331b      	adds	r3, #27
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	4413      	add	r3, r2
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	08db      	lsrs	r3, r3, #3
 8007d12:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	331b      	adds	r3, #27
 8007d22:	011b      	lsls	r3, r3, #4
 8007d24:	4413      	add	r3, r2
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0202 	and.w	r2, r3, #2
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	331b      	adds	r3, #27
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	4413      	add	r3, r2
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f003 020f 	and.w	r2, r3, #15
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	331b      	adds	r3, #27
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	4413      	add	r3, r2
 8007d54:	3304      	adds	r3, #4
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	0a1b      	lsrs	r3, r3, #8
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	331b      	adds	r3, #27
 8007d68:	011b      	lsls	r3, r3, #4
 8007d6a:	4413      	add	r3, r2
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	0c1b      	lsrs	r3, r3, #16
 8007d72:	b29a      	uxth	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681a      	ldr	r2, [r3, #0]
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	011b      	lsls	r3, r3, #4
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	b2da      	uxtb	r2, r3
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	0a1a      	lsrs	r2, r3, #8
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	3301      	adds	r3, #1
 8007da4:	b2d2      	uxtb	r2, r2
 8007da6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	011b      	lsls	r3, r3, #4
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	0c1a      	lsrs	r2, r3, #16
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	3302      	adds	r3, #2
 8007dbe:	b2d2      	uxtb	r2, r2
 8007dc0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	011b      	lsls	r3, r3, #4
 8007dca:	4413      	add	r3, r2
 8007dcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	0e1a      	lsrs	r2, r3, #24
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	3303      	adds	r3, #3
 8007dd8:	b2d2      	uxtb	r2, r2
 8007dda:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	3304      	adds	r3, #4
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	011b      	lsls	r3, r3, #4
 8007dfc:	4413      	add	r3, r2
 8007dfe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	0a1a      	lsrs	r2, r3, #8
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	3305      	adds	r3, #5
 8007e0a:	b2d2      	uxtb	r2, r2
 8007e0c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	011b      	lsls	r3, r3, #4
 8007e16:	4413      	add	r3, r2
 8007e18:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	0c1a      	lsrs	r2, r3, #16
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	3306      	adds	r3, #6
 8007e24:	b2d2      	uxtb	r2, r2
 8007e26:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	011b      	lsls	r3, r3, #4
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	0e1a      	lsrs	r2, r3, #24
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	3307      	adds	r3, #7
 8007e3e:	b2d2      	uxtb	r2, r2
 8007e40:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d108      	bne.n	8007e5a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	68da      	ldr	r2, [r3, #12]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0220 	orr.w	r2, r2, #32
 8007e56:	60da      	str	r2, [r3, #12]
 8007e58:	e007      	b.n	8007e6a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f042 0220 	orr.w	r2, r2, #32
 8007e68:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	e006      	b.n	8007e7c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007e7a:	2301      	movs	r3, #1
  }
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	371c      	adds	r7, #28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e86:	4770      	bx	lr

08007e88 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b085      	sub	sp, #20
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
 8007e90:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e98:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d002      	beq.n	8007ea6 <HAL_CAN_ActivateNotification+0x1e>
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	2b02      	cmp	r3, #2
 8007ea4:	d109      	bne.n	8007eba <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	6959      	ldr	r1, [r3, #20]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	683a      	ldr	r2, [r7, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	e006      	b.n	8007ec8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
  }
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3714      	adds	r7, #20
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ee4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d002      	beq.n	8007ef2 <HAL_CAN_DeactivateNotification+0x1e>
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d10a      	bne.n	8007f08 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6959      	ldr	r1, [r3, #20]
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	43da      	mvns	r2, r3
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	400a      	ands	r2, r1
 8007f02:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	e006      	b.n	8007f16 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007f14:	2301      	movs	r3, #1
  }
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3714      	adds	r7, #20
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b08a      	sub	sp, #40	; 0x28
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8007f5e:	6a3b      	ldr	r3, [r7, #32]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d07c      	beq.n	8008062 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007f68:	69bb      	ldr	r3, [r7, #24]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d023      	beq.n	8007fba <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	2201      	movs	r2, #1
 8007f78:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007f7a:	69bb      	ldr	r3, [r7, #24]
 8007f7c:	f003 0302 	and.w	r3, r3, #2
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d003      	beq.n	8007f8c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f983 	bl	8008290 <HAL_CAN_TxMailbox0CompleteCallback>
 8007f8a:	e016      	b.n	8007fba <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007f8c:	69bb      	ldr	r3, [r7, #24]
 8007f8e:	f003 0304 	and.w	r3, r3, #4
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d004      	beq.n	8007fa0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007f9e:	e00c      	b.n	8007fba <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	f003 0308 	and.w	r3, r3, #8
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d004      	beq.n	8007fb4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
 8007fb2:	e002      	b.n	8007fba <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 f989 	bl	80082cc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d024      	beq.n	800800e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007fcc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d003      	beq.n	8007fe0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 f963 	bl	80082a4 <HAL_CAN_TxMailbox1CompleteCallback>
 8007fde:	e016      	b.n	800800e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d004      	beq.n	8007ff4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff2:	e00c      	b.n	800800e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d004      	beq.n	8008008 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
 8008006:	e002      	b.n	800800e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 f969 	bl	80082e0 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800800e:	69bb      	ldr	r3, [r7, #24]
 8008010:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008014:	2b00      	cmp	r3, #0
 8008016:	d024      	beq.n	8008062 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008020:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008028:	2b00      	cmp	r3, #0
 800802a:	d003      	beq.n	8008034 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f943 	bl	80082b8 <HAL_CAN_TxMailbox2CompleteCallback>
 8008032:	e016      	b.n	8008062 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d004      	beq.n	8008048 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008044:	627b      	str	r3, [r7, #36]	; 0x24
 8008046:	e00c      	b.n	8008062 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800804e:	2b00      	cmp	r3, #0
 8008050:	d004      	beq.n	800805c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
 800805a:	e002      	b.n	8008062 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f949 	bl	80082f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	f003 0308 	and.w	r3, r3, #8
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00c      	beq.n	8008086 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	f003 0310 	and.w	r3, r3, #16
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8008076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008078:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800807c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2210      	movs	r2, #16
 8008084:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	f003 0304 	and.w	r3, r3, #4
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00b      	beq.n	80080a8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b00      	cmp	r3, #0
 8008098:	d006      	beq.n	80080a8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2208      	movs	r2, #8
 80080a0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f930 	bl	8008308 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	f003 0302 	and.w	r3, r3, #2
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d009      	beq.n	80080c6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	f003 0303 	and.w	r3, r3, #3
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d002      	beq.n	80080c6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f7fe f865 	bl	8006190 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00c      	beq.n	80080ea <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	f003 0310 	and.w	r3, r3, #16
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d007      	beq.n	80080ea <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80080e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	2210      	movs	r2, #16
 80080e8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	f003 0320 	and.w	r3, r3, #32
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d00b      	beq.n	800810c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d006      	beq.n	800810c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2208      	movs	r2, #8
 8008104:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 f912 	bl	8008330 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800810c:	6a3b      	ldr	r3, [r7, #32]
 800810e:	f003 0310 	and.w	r3, r3, #16
 8008112:	2b00      	cmp	r3, #0
 8008114:	d009      	beq.n	800812a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	691b      	ldr	r3, [r3, #16]
 800811c:	f003 0303 	and.w	r3, r3, #3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f000 f8f9 	bl	800831c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008130:	2b00      	cmp	r3, #0
 8008132:	d00b      	beq.n	800814c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f003 0310 	and.w	r3, r3, #16
 800813a:	2b00      	cmp	r3, #0
 800813c:	d006      	beq.n	800814c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	2210      	movs	r2, #16
 8008144:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 f8fc 	bl	8008344 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800814c:	6a3b      	ldr	r3, [r7, #32]
 800814e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00b      	beq.n	800816e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	f003 0308 	and.w	r3, r3, #8
 800815c:	2b00      	cmp	r3, #0
 800815e:	d006      	beq.n	800816e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2208      	movs	r2, #8
 8008166:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f000 f8f5 	bl	8008358 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800816e:	6a3b      	ldr	r3, [r7, #32]
 8008170:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d07b      	beq.n	8008270 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d072      	beq.n	8008268 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008188:	2b00      	cmp	r3, #0
 800818a:	d008      	beq.n	800819e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8008192:	2b00      	cmp	r3, #0
 8008194:	d003      	beq.n	800819e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	f043 0301 	orr.w	r3, r3, #1
 800819c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d008      	beq.n	80081ba <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80081b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b4:	f043 0302 	orr.w	r3, r3, #2
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80081ba:	6a3b      	ldr	r3, [r7, #32]
 80081bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d008      	beq.n	80081d6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d003      	beq.n	80081d6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80081ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d0:	f043 0304 	orr.w	r3, r3, #4
 80081d4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d043      	beq.n	8008268 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d03e      	beq.n	8008268 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80081f0:	2b60      	cmp	r3, #96	; 0x60
 80081f2:	d02b      	beq.n	800824c <HAL_CAN_IRQHandler+0x32a>
 80081f4:	2b60      	cmp	r3, #96	; 0x60
 80081f6:	d82e      	bhi.n	8008256 <HAL_CAN_IRQHandler+0x334>
 80081f8:	2b50      	cmp	r3, #80	; 0x50
 80081fa:	d022      	beq.n	8008242 <HAL_CAN_IRQHandler+0x320>
 80081fc:	2b50      	cmp	r3, #80	; 0x50
 80081fe:	d82a      	bhi.n	8008256 <HAL_CAN_IRQHandler+0x334>
 8008200:	2b40      	cmp	r3, #64	; 0x40
 8008202:	d019      	beq.n	8008238 <HAL_CAN_IRQHandler+0x316>
 8008204:	2b40      	cmp	r3, #64	; 0x40
 8008206:	d826      	bhi.n	8008256 <HAL_CAN_IRQHandler+0x334>
 8008208:	2b30      	cmp	r3, #48	; 0x30
 800820a:	d010      	beq.n	800822e <HAL_CAN_IRQHandler+0x30c>
 800820c:	2b30      	cmp	r3, #48	; 0x30
 800820e:	d822      	bhi.n	8008256 <HAL_CAN_IRQHandler+0x334>
 8008210:	2b10      	cmp	r3, #16
 8008212:	d002      	beq.n	800821a <HAL_CAN_IRQHandler+0x2f8>
 8008214:	2b20      	cmp	r3, #32
 8008216:	d005      	beq.n	8008224 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8008218:	e01d      	b.n	8008256 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	f043 0308 	orr.w	r3, r3, #8
 8008220:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008222:	e019      	b.n	8008258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	f043 0310 	orr.w	r3, r3, #16
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800822c:	e014      	b.n	8008258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800822e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008230:	f043 0320 	orr.w	r3, r3, #32
 8008234:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008236:	e00f      	b.n	8008258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8008238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800823a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800823e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008240:	e00a      	b.n	8008258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8008242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800824a:	e005      	b.n	8008258 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8008254:	e000      	b.n	8008258 <HAL_CAN_IRQHandler+0x336>
            break;
 8008256:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8008266:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2204      	movs	r2, #4
 800826e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8008270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008272:	2b00      	cmp	r3, #0
 8008274:	d008      	beq.n	8008288 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800827a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827c:	431a      	orrs	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f872 	bl	800836c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8008288:	bf00      	nop
 800828a:	3728      	adds	r7, #40	; 0x28
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}

08008290 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8008298:	bf00      	nop
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a2:	4770      	bx	lr

080082a4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b083      	sub	sp, #12
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80082ac:	bf00      	nop
 80082ae:	370c      	adds	r7, #12
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr

080082cc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8008310:	bf00      	nop
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008390:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <__NVIC_SetPriorityGrouping+0x44>)
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008396:	68ba      	ldr	r2, [r7, #8]
 8008398:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800839c:	4013      	ands	r3, r2
 800839e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80083ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083b2:	4a04      	ldr	r2, [pc, #16]	; (80083c4 <__NVIC_SetPriorityGrouping+0x44>)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	60d3      	str	r3, [r2, #12]
}
 80083b8:	bf00      	nop
 80083ba:	3714      	adds	r7, #20
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	e000ed00 	.word	0xe000ed00

080083c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80083c8:	b480      	push	{r7}
 80083ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80083cc:	4b04      	ldr	r3, [pc, #16]	; (80083e0 <__NVIC_GetPriorityGrouping+0x18>)
 80083ce:	68db      	ldr	r3, [r3, #12]
 80083d0:	0a1b      	lsrs	r3, r3, #8
 80083d2:	f003 0307 	and.w	r3, r3, #7
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	e000ed00 	.word	0xe000ed00

080083e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	4603      	mov	r3, r0
 80083ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80083ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	db0b      	blt.n	800840e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	f003 021f 	and.w	r2, r3, #31
 80083fc:	4907      	ldr	r1, [pc, #28]	; (800841c <__NVIC_EnableIRQ+0x38>)
 80083fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008402:	095b      	lsrs	r3, r3, #5
 8008404:	2001      	movs	r0, #1
 8008406:	fa00 f202 	lsl.w	r2, r0, r2
 800840a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800840e:	bf00      	nop
 8008410:	370c      	adds	r7, #12
 8008412:	46bd      	mov	sp, r7
 8008414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008418:	4770      	bx	lr
 800841a:	bf00      	nop
 800841c:	e000e100 	.word	0xe000e100

08008420 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	6039      	str	r1, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800842c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008430:	2b00      	cmp	r3, #0
 8008432:	db0a      	blt.n	800844a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	b2da      	uxtb	r2, r3
 8008438:	490c      	ldr	r1, [pc, #48]	; (800846c <__NVIC_SetPriority+0x4c>)
 800843a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800843e:	0112      	lsls	r2, r2, #4
 8008440:	b2d2      	uxtb	r2, r2
 8008442:	440b      	add	r3, r1
 8008444:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008448:	e00a      	b.n	8008460 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	b2da      	uxtb	r2, r3
 800844e:	4908      	ldr	r1, [pc, #32]	; (8008470 <__NVIC_SetPriority+0x50>)
 8008450:	79fb      	ldrb	r3, [r7, #7]
 8008452:	f003 030f 	and.w	r3, r3, #15
 8008456:	3b04      	subs	r3, #4
 8008458:	0112      	lsls	r2, r2, #4
 800845a:	b2d2      	uxtb	r2, r2
 800845c:	440b      	add	r3, r1
 800845e:	761a      	strb	r2, [r3, #24]
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	e000e100 	.word	0xe000e100
 8008470:	e000ed00 	.word	0xe000ed00

08008474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008474:	b480      	push	{r7}
 8008476:	b089      	sub	sp, #36	; 0x24
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	60b9      	str	r1, [r7, #8]
 800847e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008488:	69fb      	ldr	r3, [r7, #28]
 800848a:	f1c3 0307 	rsb	r3, r3, #7
 800848e:	2b04      	cmp	r3, #4
 8008490:	bf28      	it	cs
 8008492:	2304      	movcs	r3, #4
 8008494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008496:	69fb      	ldr	r3, [r7, #28]
 8008498:	3304      	adds	r3, #4
 800849a:	2b06      	cmp	r3, #6
 800849c:	d902      	bls.n	80084a4 <NVIC_EncodePriority+0x30>
 800849e:	69fb      	ldr	r3, [r7, #28]
 80084a0:	3b03      	subs	r3, #3
 80084a2:	e000      	b.n	80084a6 <NVIC_EncodePriority+0x32>
 80084a4:	2300      	movs	r3, #0
 80084a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084a8:	f04f 32ff 	mov.w	r2, #4294967295
 80084ac:	69bb      	ldr	r3, [r7, #24]
 80084ae:	fa02 f303 	lsl.w	r3, r2, r3
 80084b2:	43da      	mvns	r2, r3
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	401a      	ands	r2, r3
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084bc:	f04f 31ff 	mov.w	r1, #4294967295
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	fa01 f303 	lsl.w	r3, r1, r3
 80084c6:	43d9      	mvns	r1, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084cc:	4313      	orrs	r3, r2
         );
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3724      	adds	r7, #36	; 0x24
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
	...

080084dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3b01      	subs	r3, #1
 80084e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084ec:	d301      	bcc.n	80084f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084ee:	2301      	movs	r3, #1
 80084f0:	e00f      	b.n	8008512 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084f2:	4a0a      	ldr	r2, [pc, #40]	; (800851c <SysTick_Config+0x40>)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3b01      	subs	r3, #1
 80084f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084fa:	210f      	movs	r1, #15
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	f7ff ff8e 	bl	8008420 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008504:	4b05      	ldr	r3, [pc, #20]	; (800851c <SysTick_Config+0x40>)
 8008506:	2200      	movs	r2, #0
 8008508:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800850a:	4b04      	ldr	r3, [pc, #16]	; (800851c <SysTick_Config+0x40>)
 800850c:	2207      	movs	r2, #7
 800850e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	e000e010 	.word	0xe000e010

08008520 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b082      	sub	sp, #8
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7ff ff29 	bl	8008380 <__NVIC_SetPriorityGrouping>
}
 800852e:	bf00      	nop
 8008530:	3708      	adds	r7, #8
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008536:	b580      	push	{r7, lr}
 8008538:	b086      	sub	sp, #24
 800853a:	af00      	add	r7, sp, #0
 800853c:	4603      	mov	r3, r0
 800853e:	60b9      	str	r1, [r7, #8]
 8008540:	607a      	str	r2, [r7, #4]
 8008542:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008544:	2300      	movs	r3, #0
 8008546:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008548:	f7ff ff3e 	bl	80083c8 <__NVIC_GetPriorityGrouping>
 800854c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	6978      	ldr	r0, [r7, #20]
 8008554:	f7ff ff8e 	bl	8008474 <NVIC_EncodePriority>
 8008558:	4602      	mov	r2, r0
 800855a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff ff5d 	bl	8008420 <__NVIC_SetPriority>
}
 8008566:	bf00      	nop
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	4603      	mov	r3, r0
 8008576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800857c:	4618      	mov	r0, r3
 800857e:	f7ff ff31 	bl	80083e4 <__NVIC_EnableIRQ>
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff ffa2 	bl	80084dc <SysTick_Config>
 8008598:	4603      	mov	r3, r0
}
 800859a:	4618      	mov	r0, r3
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
	...

080085a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80085ac:	2300      	movs	r3, #0
 80085ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80085b0:	f7fe fbd6 	bl	8006d60 <HAL_GetTick>
 80085b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d101      	bne.n	80085c0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e099      	b.n	80086f4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2202      	movs	r2, #2
 80085c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f022 0201 	bic.w	r2, r2, #1
 80085de:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80085e0:	e00f      	b.n	8008602 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80085e2:	f7fe fbbd 	bl	8006d60 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b05      	cmp	r3, #5
 80085ee:	d908      	bls.n	8008602 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2203      	movs	r2, #3
 80085fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e078      	b.n	80086f4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d1e8      	bne.n	80085e2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008618:	697a      	ldr	r2, [r7, #20]
 800861a:	4b38      	ldr	r3, [pc, #224]	; (80086fc <HAL_DMA_Init+0x158>)
 800861c:	4013      	ands	r3, r2
 800861e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	685a      	ldr	r2, [r3, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800862e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800863a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008646:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a1b      	ldr	r3, [r3, #32]
 800864c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800864e:	697a      	ldr	r2, [r7, #20]
 8008650:	4313      	orrs	r3, r2
 8008652:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008658:	2b04      	cmp	r3, #4
 800865a:	d107      	bne.n	800866c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008664:	4313      	orrs	r3, r2
 8008666:	697a      	ldr	r2, [r7, #20]
 8008668:	4313      	orrs	r3, r2
 800866a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	697a      	ldr	r2, [r7, #20]
 8008672:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	f023 0307 	bic.w	r3, r3, #7
 8008682:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008688:	697a      	ldr	r2, [r7, #20]
 800868a:	4313      	orrs	r3, r2
 800868c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008692:	2b04      	cmp	r3, #4
 8008694:	d117      	bne.n	80086c6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	4313      	orrs	r3, r2
 800869e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00e      	beq.n	80086c6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fa9d 	bl	8008be8 <DMA_CheckFifoParam>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d008      	beq.n	80086c6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2240      	movs	r2, #64	; 0x40
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2201      	movs	r2, #1
 80086be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80086c2:	2301      	movs	r3, #1
 80086c4:	e016      	b.n	80086f4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 fa54 	bl	8008b7c <DMA_CalcBaseAndBitshift>
 80086d4:	4603      	mov	r3, r0
 80086d6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086dc:	223f      	movs	r2, #63	; 0x3f
 80086de:	409a      	lsls	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2200      	movs	r2, #0
 80086e8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80086f2:	2300      	movs	r3, #0
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3718      	adds	r7, #24
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}
 80086fc:	f010803f 	.word	0xf010803f

08008700 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800870e:	2300      	movs	r3, #0
 8008710:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008716:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800871e:	2b01      	cmp	r3, #1
 8008720:	d101      	bne.n	8008726 <HAL_DMA_Start_IT+0x26>
 8008722:	2302      	movs	r3, #2
 8008724:	e040      	b.n	80087a8 <HAL_DMA_Start_IT+0xa8>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008734:	b2db      	uxtb	r3, r3
 8008736:	2b01      	cmp	r3, #1
 8008738:	d12f      	bne.n	800879a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2202      	movs	r2, #2
 800873e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	687a      	ldr	r2, [r7, #4]
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	68f8      	ldr	r0, [r7, #12]
 8008750:	f000 f9e6 	bl	8008b20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008758:	223f      	movs	r2, #63	; 0x3f
 800875a:	409a      	lsls	r2, r3
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f042 0216 	orr.w	r2, r2, #22
 800876e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f042 0208 	orr.w	r2, r2, #8
 8008786:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	601a      	str	r2, [r3, #0]
 8008798:	e005      	b.n	80087a6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2200      	movs	r2, #0
 800879e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80087a2:	2302      	movs	r3, #2
 80087a4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d004      	beq.n	80087ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2280      	movs	r2, #128	; 0x80
 80087c8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80087ca:	2301      	movs	r3, #1
 80087cc:	e00c      	b.n	80087e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2205      	movs	r2, #5
 80087d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681a      	ldr	r2, [r3, #0]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	f022 0201 	bic.w	r2, r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80087e6:	2300      	movs	r3, #0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	370c      	adds	r7, #12
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008800:	4b8e      	ldr	r3, [pc, #568]	; (8008a3c <HAL_DMA_IRQHandler+0x248>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a8e      	ldr	r2, [pc, #568]	; (8008a40 <HAL_DMA_IRQHandler+0x24c>)
 8008806:	fba2 2303 	umull	r2, r3, r2, r3
 800880a:	0a9b      	lsrs	r3, r3, #10
 800880c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800881e:	2208      	movs	r2, #8
 8008820:	409a      	lsls	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	4013      	ands	r3, r2
 8008826:	2b00      	cmp	r3, #0
 8008828:	d01a      	beq.n	8008860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
 8008834:	2b00      	cmp	r3, #0
 8008836:	d013      	beq.n	8008860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f022 0204 	bic.w	r2, r2, #4
 8008846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800884c:	2208      	movs	r2, #8
 800884e:	409a      	lsls	r2, r3
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008858:	f043 0201 	orr.w	r2, r3, #1
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008864:	2201      	movs	r2, #1
 8008866:	409a      	lsls	r2, r3
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4013      	ands	r3, r2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d012      	beq.n	8008896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00b      	beq.n	8008896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008882:	2201      	movs	r2, #1
 8008884:	409a      	lsls	r2, r3
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800888e:	f043 0202 	orr.w	r2, r3, #2
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800889a:	2204      	movs	r2, #4
 800889c:	409a      	lsls	r2, r3
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	4013      	ands	r3, r2
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d012      	beq.n	80088cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088b8:	2204      	movs	r2, #4
 80088ba:	409a      	lsls	r2, r3
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088c4:	f043 0204 	orr.w	r2, r3, #4
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d0:	2210      	movs	r2, #16
 80088d2:	409a      	lsls	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4013      	ands	r3, r2
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d043      	beq.n	8008964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0308 	and.w	r3, r3, #8
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d03c      	beq.n	8008964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088ee:	2210      	movs	r2, #16
 80088f0:	409a      	lsls	r2, r3
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008900:	2b00      	cmp	r3, #0
 8008902:	d018      	beq.n	8008936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d108      	bne.n	8008924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d024      	beq.n	8008964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	4798      	blx	r3
 8008922:	e01f      	b.n	8008964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008928:	2b00      	cmp	r3, #0
 800892a:	d01b      	beq.n	8008964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
 8008934:	e016      	b.n	8008964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008940:	2b00      	cmp	r3, #0
 8008942:	d107      	bne.n	8008954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f022 0208 	bic.w	r2, r2, #8
 8008952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	2b00      	cmp	r3, #0
 800895a:	d003      	beq.n	8008964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008968:	2220      	movs	r2, #32
 800896a:	409a      	lsls	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4013      	ands	r3, r2
 8008970:	2b00      	cmp	r3, #0
 8008972:	f000 808f 	beq.w	8008a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f003 0310 	and.w	r3, r3, #16
 8008980:	2b00      	cmp	r3, #0
 8008982:	f000 8087 	beq.w	8008a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898a:	2220      	movs	r2, #32
 800898c:	409a      	lsls	r2, r3
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b05      	cmp	r3, #5
 800899c:	d136      	bne.n	8008a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f022 0216 	bic.w	r2, r2, #22
 80089ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	695a      	ldr	r2, [r3, #20]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80089bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d103      	bne.n	80089ce <HAL_DMA_IRQHandler+0x1da>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d007      	beq.n	80089de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f022 0208 	bic.w	r2, r2, #8
 80089dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089e2:	223f      	movs	r2, #63	; 0x3f
 80089e4:	409a      	lsls	r2, r3
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2201      	movs	r2, #1
 80089ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d07e      	beq.n	8008b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	4798      	blx	r3
        }
        return;
 8008a0a:	e079      	b.n	8008b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01d      	beq.n	8008a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10d      	bne.n	8008a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d031      	beq.n	8008a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
 8008a38:	e02c      	b.n	8008a94 <HAL_DMA_IRQHandler+0x2a0>
 8008a3a:	bf00      	nop
 8008a3c:	20000000 	.word	0x20000000
 8008a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d023      	beq.n	8008a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	4798      	blx	r3
 8008a54:	e01e      	b.n	8008a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10f      	bne.n	8008a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 0210 	bic.w	r2, r2, #16
 8008a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2201      	movs	r2, #1
 8008a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d003      	beq.n	8008a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d032      	beq.n	8008b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa0:	f003 0301 	and.w	r3, r3, #1
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d022      	beq.n	8008aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2205      	movs	r2, #5
 8008aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0201 	bic.w	r2, r2, #1
 8008abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60bb      	str	r3, [r7, #8]
 8008ac6:	697a      	ldr	r2, [r7, #20]
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d307      	bcc.n	8008adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f003 0301 	and.w	r3, r3, #1
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d1f2      	bne.n	8008ac0 <HAL_DMA_IRQHandler+0x2cc>
 8008ada:	e000      	b.n	8008ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8008adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d005      	beq.n	8008b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	4798      	blx	r3
 8008afe:	e000      	b.n	8008b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8008b00:	bf00      	nop
    }
  }
}
 8008b02:	3718      	adds	r7, #24
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	370c      	adds	r7, #12
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b085      	sub	sp, #20
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	681a      	ldr	r2, [r3, #0]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	689b      	ldr	r3, [r3, #8]
 8008b4a:	2b40      	cmp	r3, #64	; 0x40
 8008b4c:	d108      	bne.n	8008b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68ba      	ldr	r2, [r7, #8]
 8008b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008b5e:	e007      	b.n	8008b70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	60da      	str	r2, [r3, #12]
}
 8008b70:	bf00      	nop
 8008b72:	3714      	adds	r7, #20
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	3b10      	subs	r3, #16
 8008b8c:	4a14      	ldr	r2, [pc, #80]	; (8008be0 <DMA_CalcBaseAndBitshift+0x64>)
 8008b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008b92:	091b      	lsrs	r3, r3, #4
 8008b94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008b96:	4a13      	ldr	r2, [pc, #76]	; (8008be4 <DMA_CalcBaseAndBitshift+0x68>)
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d909      	bls.n	8008bbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008bb2:	f023 0303 	bic.w	r3, r3, #3
 8008bb6:	1d1a      	adds	r2, r3, #4
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	659a      	str	r2, [r3, #88]	; 0x58
 8008bbc:	e007      	b.n	8008bce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008bc6:	f023 0303 	bic.w	r3, r3, #3
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	aaaaaaab 	.word	0xaaaaaaab
 8008be4:	0801871c 	.word	0x0801871c

08008be8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d11f      	bne.n	8008c42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	2b03      	cmp	r3, #3
 8008c06:	d856      	bhi.n	8008cb6 <DMA_CheckFifoParam+0xce>
 8008c08:	a201      	add	r2, pc, #4	; (adr r2, 8008c10 <DMA_CheckFifoParam+0x28>)
 8008c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0e:	bf00      	nop
 8008c10:	08008c21 	.word	0x08008c21
 8008c14:	08008c33 	.word	0x08008c33
 8008c18:	08008c21 	.word	0x08008c21
 8008c1c:	08008cb7 	.word	0x08008cb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d046      	beq.n	8008cba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c30:	e043      	b.n	8008cba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c36:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c3a:	d140      	bne.n	8008cbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c40:	e03d      	b.n	8008cbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	699b      	ldr	r3, [r3, #24]
 8008c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c4a:	d121      	bne.n	8008c90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008c4c:	68bb      	ldr	r3, [r7, #8]
 8008c4e:	2b03      	cmp	r3, #3
 8008c50:	d837      	bhi.n	8008cc2 <DMA_CheckFifoParam+0xda>
 8008c52:	a201      	add	r2, pc, #4	; (adr r2, 8008c58 <DMA_CheckFifoParam+0x70>)
 8008c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c58:	08008c69 	.word	0x08008c69
 8008c5c:	08008c6f 	.word	0x08008c6f
 8008c60:	08008c69 	.word	0x08008c69
 8008c64:	08008c81 	.word	0x08008c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6c:	e030      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d025      	beq.n	8008cc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c7e:	e022      	b.n	8008cc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c84:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008c88:	d11f      	bne.n	8008cca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008c8e:	e01c      	b.n	8008cca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2b02      	cmp	r3, #2
 8008c94:	d903      	bls.n	8008c9e <DMA_CheckFifoParam+0xb6>
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	2b03      	cmp	r3, #3
 8008c9a:	d003      	beq.n	8008ca4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008c9c:	e018      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca2:	e015      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00e      	beq.n	8008cce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8008cb4:	e00b      	b.n	8008cce <DMA_CheckFifoParam+0xe6>
      break;
 8008cb6:	bf00      	nop
 8008cb8:	e00a      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8008cba:	bf00      	nop
 8008cbc:	e008      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8008cbe:	bf00      	nop
 8008cc0:	e006      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8008cc2:	bf00      	nop
 8008cc4:	e004      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8008cc6:	bf00      	nop
 8008cc8:	e002      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8008cca:	bf00      	nop
 8008ccc:	e000      	b.n	8008cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8008cce:	bf00      	nop
    }
  } 
  
  return status; 
 8008cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr
 8008cde:	bf00      	nop

08008ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b089      	sub	sp, #36	; 0x24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	e165      	b.n	8008fc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	fa02 f303 	lsl.w	r3, r2, r3
 8008d04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	4013      	ands	r3, r2
 8008d0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	697b      	ldr	r3, [r7, #20]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	f040 8154 	bne.w	8008fc2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f003 0303 	and.w	r3, r3, #3
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d005      	beq.n	8008d32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	685b      	ldr	r3, [r3, #4]
 8008d2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d130      	bne.n	8008d94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008d38:	69fb      	ldr	r3, [r7, #28]
 8008d3a:	005b      	lsls	r3, r3, #1
 8008d3c:	2203      	movs	r2, #3
 8008d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d42:	43db      	mvns	r3, r3
 8008d44:	69ba      	ldr	r2, [r7, #24]
 8008d46:	4013      	ands	r3, r2
 8008d48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	68da      	ldr	r2, [r3, #12]
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	005b      	lsls	r3, r3, #1
 8008d52:	fa02 f303 	lsl.w	r3, r2, r3
 8008d56:	69ba      	ldr	r2, [r7, #24]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008d68:	2201      	movs	r2, #1
 8008d6a:	69fb      	ldr	r3, [r7, #28]
 8008d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d70:	43db      	mvns	r3, r3
 8008d72:	69ba      	ldr	r2, [r7, #24]
 8008d74:	4013      	ands	r3, r2
 8008d76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	091b      	lsrs	r3, r3, #4
 8008d7e:	f003 0201 	and.w	r2, r3, #1
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	fa02 f303 	lsl.w	r3, r2, r3
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	4313      	orrs	r3, r2
 8008d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	69ba      	ldr	r2, [r7, #24]
 8008d92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	f003 0303 	and.w	r3, r3, #3
 8008d9c:	2b03      	cmp	r3, #3
 8008d9e:	d017      	beq.n	8008dd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008da6:	69fb      	ldr	r3, [r7, #28]
 8008da8:	005b      	lsls	r3, r3, #1
 8008daa:	2203      	movs	r2, #3
 8008dac:	fa02 f303 	lsl.w	r3, r2, r3
 8008db0:	43db      	mvns	r3, r3
 8008db2:	69ba      	ldr	r2, [r7, #24]
 8008db4:	4013      	ands	r3, r2
 8008db6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	689a      	ldr	r2, [r3, #8]
 8008dbc:	69fb      	ldr	r3, [r7, #28]
 8008dbe:	005b      	lsls	r3, r3, #1
 8008dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	69ba      	ldr	r2, [r7, #24]
 8008dce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	f003 0303 	and.w	r3, r3, #3
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d123      	bne.n	8008e24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	08da      	lsrs	r2, r3, #3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	3208      	adds	r2, #8
 8008de4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	220f      	movs	r2, #15
 8008df4:	fa02 f303 	lsl.w	r3, r2, r3
 8008df8:	43db      	mvns	r3, r3
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	691a      	ldr	r2, [r3, #16]
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	08da      	lsrs	r2, r3, #3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	3208      	adds	r2, #8
 8008e1e:	69b9      	ldr	r1, [r7, #24]
 8008e20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	005b      	lsls	r3, r3, #1
 8008e2e:	2203      	movs	r2, #3
 8008e30:	fa02 f303 	lsl.w	r3, r2, r3
 8008e34:	43db      	mvns	r3, r3
 8008e36:	69ba      	ldr	r2, [r7, #24]
 8008e38:	4013      	ands	r3, r2
 8008e3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f003 0203 	and.w	r2, r3, #3
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	005b      	lsls	r3, r3, #1
 8008e48:	fa02 f303 	lsl.w	r3, r2, r3
 8008e4c:	69ba      	ldr	r2, [r7, #24]
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	69ba      	ldr	r2, [r7, #24]
 8008e56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 80ae 	beq.w	8008fc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008e66:	2300      	movs	r3, #0
 8008e68:	60fb      	str	r3, [r7, #12]
 8008e6a:	4b5d      	ldr	r3, [pc, #372]	; (8008fe0 <HAL_GPIO_Init+0x300>)
 8008e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e6e:	4a5c      	ldr	r2, [pc, #368]	; (8008fe0 <HAL_GPIO_Init+0x300>)
 8008e70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e74:	6453      	str	r3, [r2, #68]	; 0x44
 8008e76:	4b5a      	ldr	r3, [pc, #360]	; (8008fe0 <HAL_GPIO_Init+0x300>)
 8008e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008e82:	4a58      	ldr	r2, [pc, #352]	; (8008fe4 <HAL_GPIO_Init+0x304>)
 8008e84:	69fb      	ldr	r3, [r7, #28]
 8008e86:	089b      	lsrs	r3, r3, #2
 8008e88:	3302      	adds	r3, #2
 8008e8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008e90:	69fb      	ldr	r3, [r7, #28]
 8008e92:	f003 0303 	and.w	r3, r3, #3
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	220f      	movs	r2, #15
 8008e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e9e:	43db      	mvns	r3, r3
 8008ea0:	69ba      	ldr	r2, [r7, #24]
 8008ea2:	4013      	ands	r3, r2
 8008ea4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	4a4f      	ldr	r2, [pc, #316]	; (8008fe8 <HAL_GPIO_Init+0x308>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d025      	beq.n	8008efa <HAL_GPIO_Init+0x21a>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	4a4e      	ldr	r2, [pc, #312]	; (8008fec <HAL_GPIO_Init+0x30c>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d01f      	beq.n	8008ef6 <HAL_GPIO_Init+0x216>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	4a4d      	ldr	r2, [pc, #308]	; (8008ff0 <HAL_GPIO_Init+0x310>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d019      	beq.n	8008ef2 <HAL_GPIO_Init+0x212>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4a4c      	ldr	r2, [pc, #304]	; (8008ff4 <HAL_GPIO_Init+0x314>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d013      	beq.n	8008eee <HAL_GPIO_Init+0x20e>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	4a4b      	ldr	r2, [pc, #300]	; (8008ff8 <HAL_GPIO_Init+0x318>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d00d      	beq.n	8008eea <HAL_GPIO_Init+0x20a>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	4a4a      	ldr	r2, [pc, #296]	; (8008ffc <HAL_GPIO_Init+0x31c>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d007      	beq.n	8008ee6 <HAL_GPIO_Init+0x206>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a49      	ldr	r2, [pc, #292]	; (8009000 <HAL_GPIO_Init+0x320>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d101      	bne.n	8008ee2 <HAL_GPIO_Init+0x202>
 8008ede:	2306      	movs	r3, #6
 8008ee0:	e00c      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008ee2:	2307      	movs	r3, #7
 8008ee4:	e00a      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008ee6:	2305      	movs	r3, #5
 8008ee8:	e008      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008eea:	2304      	movs	r3, #4
 8008eec:	e006      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e004      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008ef2:	2302      	movs	r3, #2
 8008ef4:	e002      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <HAL_GPIO_Init+0x21c>
 8008efa:	2300      	movs	r3, #0
 8008efc:	69fa      	ldr	r2, [r7, #28]
 8008efe:	f002 0203 	and.w	r2, r2, #3
 8008f02:	0092      	lsls	r2, r2, #2
 8008f04:	4093      	lsls	r3, r2
 8008f06:	69ba      	ldr	r2, [r7, #24]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008f0c:	4935      	ldr	r1, [pc, #212]	; (8008fe4 <HAL_GPIO_Init+0x304>)
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	089b      	lsrs	r3, r3, #2
 8008f12:	3302      	adds	r3, #2
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008f1a:	4b3a      	ldr	r3, [pc, #232]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f1c:	689b      	ldr	r3, [r3, #8]
 8008f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f20:	693b      	ldr	r3, [r7, #16]
 8008f22:	43db      	mvns	r3, r3
 8008f24:	69ba      	ldr	r2, [r7, #24]
 8008f26:	4013      	ands	r3, r2
 8008f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d003      	beq.n	8008f3e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8008f36:	69ba      	ldr	r2, [r7, #24]
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008f3e:	4a31      	ldr	r2, [pc, #196]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008f44:	4b2f      	ldr	r3, [pc, #188]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	43db      	mvns	r3, r3
 8008f4e:	69ba      	ldr	r2, [r7, #24]
 8008f50:	4013      	ands	r3, r2
 8008f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d003      	beq.n	8008f68 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8008f60:	69ba      	ldr	r2, [r7, #24]
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	4313      	orrs	r3, r2
 8008f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008f68:	4a26      	ldr	r2, [pc, #152]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008f6e:	4b25      	ldr	r3, [pc, #148]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	43db      	mvns	r3, r3
 8008f78:	69ba      	ldr	r2, [r7, #24]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d003      	beq.n	8008f92 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008f92:	4a1c      	ldr	r2, [pc, #112]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008f98:	4b1a      	ldr	r3, [pc, #104]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	43db      	mvns	r3, r3
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008fbc:	4a11      	ldr	r2, [pc, #68]	; (8009004 <HAL_GPIO_Init+0x324>)
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	61fb      	str	r3, [r7, #28]
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	2b0f      	cmp	r3, #15
 8008fcc:	f67f ae96 	bls.w	8008cfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008fd0:	bf00      	nop
 8008fd2:	bf00      	nop
 8008fd4:	3724      	adds	r7, #36	; 0x24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fdc:	4770      	bx	lr
 8008fde:	bf00      	nop
 8008fe0:	40023800 	.word	0x40023800
 8008fe4:	40013800 	.word	0x40013800
 8008fe8:	40020000 	.word	0x40020000
 8008fec:	40020400 	.word	0x40020400
 8008ff0:	40020800 	.word	0x40020800
 8008ff4:	40020c00 	.word	0x40020c00
 8008ff8:	40021000 	.word	0x40021000
 8008ffc:	40021400 	.word	0x40021400
 8009000:	40021800 	.word	0x40021800
 8009004:	40013c00 	.word	0x40013c00

08009008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	460b      	mov	r3, r1
 8009012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	691a      	ldr	r2, [r3, #16]
 8009018:	887b      	ldrh	r3, [r7, #2]
 800901a:	4013      	ands	r3, r2
 800901c:	2b00      	cmp	r3, #0
 800901e:	d002      	beq.n	8009026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009020:	2301      	movs	r3, #1
 8009022:	73fb      	strb	r3, [r7, #15]
 8009024:	e001      	b.n	800902a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009026:	2300      	movs	r3, #0
 8009028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3714      	adds	r7, #20
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009038:	b480      	push	{r7}
 800903a:	b083      	sub	sp, #12
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	807b      	strh	r3, [r7, #2]
 8009044:	4613      	mov	r3, r2
 8009046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009048:	787b      	ldrb	r3, [r7, #1]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d003      	beq.n	8009056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800904e:	887a      	ldrh	r2, [r7, #2]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009054:	e003      	b.n	800905e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009056:	887b      	ldrh	r3, [r7, #2]
 8009058:	041a      	lsls	r2, r3, #16
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	619a      	str	r2, [r3, #24]
}
 800905e:	bf00      	nop
 8009060:	370c      	adds	r7, #12
 8009062:	46bd      	mov	sp, r7
 8009064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009068:	4770      	bx	lr

0800906a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800906a:	b480      	push	{r7}
 800906c:	b085      	sub	sp, #20
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800907c:	887a      	ldrh	r2, [r7, #2]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	4013      	ands	r3, r2
 8009082:	041a      	lsls	r2, r3, #16
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	43d9      	mvns	r1, r3
 8009088:	887b      	ldrh	r3, [r7, #2]
 800908a:	400b      	ands	r3, r1
 800908c:	431a      	orrs	r2, r3
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	619a      	str	r2, [r3, #24]
}
 8009092:	bf00      	nop
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
	...

080090a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	4603      	mov	r3, r0
 80090a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80090aa:	4b08      	ldr	r3, [pc, #32]	; (80090cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090ac:	695a      	ldr	r2, [r3, #20]
 80090ae:	88fb      	ldrh	r3, [r7, #6]
 80090b0:	4013      	ands	r3, r2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d006      	beq.n	80090c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80090b6:	4a05      	ldr	r2, [pc, #20]	; (80090cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80090b8:	88fb      	ldrh	r3, [r7, #6]
 80090ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	4618      	mov	r0, r3
 80090c0:	f7fd f8ce 	bl	8006260 <HAL_GPIO_EXTI_Callback>
  }
}
 80090c4:	bf00      	nop
 80090c6:	3708      	adds	r7, #8
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40013c00 	.word	0x40013c00

080090d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b084      	sub	sp, #16
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e12b      	b.n	800933a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d106      	bne.n	80090fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2200      	movs	r2, #0
 80090f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f7fd fb48 	bl	800678c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2224      	movs	r2, #36	; 0x24
 8009100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	f022 0201 	bic.w	r2, r2, #1
 8009112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009134:	f002 fb9a 	bl	800b86c <HAL_RCC_GetPCLK1Freq>
 8009138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	4a81      	ldr	r2, [pc, #516]	; (8009344 <HAL_I2C_Init+0x274>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d807      	bhi.n	8009154 <HAL_I2C_Init+0x84>
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4a80      	ldr	r2, [pc, #512]	; (8009348 <HAL_I2C_Init+0x278>)
 8009148:	4293      	cmp	r3, r2
 800914a:	bf94      	ite	ls
 800914c:	2301      	movls	r3, #1
 800914e:	2300      	movhi	r3, #0
 8009150:	b2db      	uxtb	r3, r3
 8009152:	e006      	b.n	8009162 <HAL_I2C_Init+0x92>
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4a7d      	ldr	r2, [pc, #500]	; (800934c <HAL_I2C_Init+0x27c>)
 8009158:	4293      	cmp	r3, r2
 800915a:	bf94      	ite	ls
 800915c:	2301      	movls	r3, #1
 800915e:	2300      	movhi	r3, #0
 8009160:	b2db      	uxtb	r3, r3
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e0e7      	b.n	800933a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	4a78      	ldr	r2, [pc, #480]	; (8009350 <HAL_I2C_Init+0x280>)
 800916e:	fba2 2303 	umull	r2, r3, r2, r3
 8009172:	0c9b      	lsrs	r3, r3, #18
 8009174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68ba      	ldr	r2, [r7, #8]
 8009186:	430a      	orrs	r2, r1
 8009188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6a1b      	ldr	r3, [r3, #32]
 8009190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	4a6a      	ldr	r2, [pc, #424]	; (8009344 <HAL_I2C_Init+0x274>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d802      	bhi.n	80091a4 <HAL_I2C_Init+0xd4>
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	3301      	adds	r3, #1
 80091a2:	e009      	b.n	80091b8 <HAL_I2C_Init+0xe8>
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80091aa:	fb02 f303 	mul.w	r3, r2, r3
 80091ae:	4a69      	ldr	r2, [pc, #420]	; (8009354 <HAL_I2C_Init+0x284>)
 80091b0:	fba2 2303 	umull	r2, r3, r2, r3
 80091b4:	099b      	lsrs	r3, r3, #6
 80091b6:	3301      	adds	r3, #1
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6812      	ldr	r2, [r2, #0]
 80091bc:	430b      	orrs	r3, r1
 80091be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	69db      	ldr	r3, [r3, #28]
 80091c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80091ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	495c      	ldr	r1, [pc, #368]	; (8009344 <HAL_I2C_Init+0x274>)
 80091d4:	428b      	cmp	r3, r1
 80091d6:	d819      	bhi.n	800920c <HAL_I2C_Init+0x13c>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	1e59      	subs	r1, r3, #1
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	005b      	lsls	r3, r3, #1
 80091e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80091e6:	1c59      	adds	r1, r3, #1
 80091e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80091ec:	400b      	ands	r3, r1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00a      	beq.n	8009208 <HAL_I2C_Init+0x138>
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	1e59      	subs	r1, r3, #1
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	005b      	lsls	r3, r3, #1
 80091fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8009200:	3301      	adds	r3, #1
 8009202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009206:	e051      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 8009208:	2304      	movs	r3, #4
 800920a:	e04f      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d111      	bne.n	8009238 <HAL_I2C_Init+0x168>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	1e58      	subs	r0, r3, #1
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6859      	ldr	r1, [r3, #4]
 800921c:	460b      	mov	r3, r1
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	440b      	add	r3, r1
 8009222:	fbb0 f3f3 	udiv	r3, r0, r3
 8009226:	3301      	adds	r3, #1
 8009228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800922c:	2b00      	cmp	r3, #0
 800922e:	bf0c      	ite	eq
 8009230:	2301      	moveq	r3, #1
 8009232:	2300      	movne	r3, #0
 8009234:	b2db      	uxtb	r3, r3
 8009236:	e012      	b.n	800925e <HAL_I2C_Init+0x18e>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	1e58      	subs	r0, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6859      	ldr	r1, [r3, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	440b      	add	r3, r1
 8009246:	0099      	lsls	r1, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	fbb0 f3f3 	udiv	r3, r0, r3
 800924e:	3301      	adds	r3, #1
 8009250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009254:	2b00      	cmp	r3, #0
 8009256:	bf0c      	ite	eq
 8009258:	2301      	moveq	r3, #1
 800925a:	2300      	movne	r3, #0
 800925c:	b2db      	uxtb	r3, r3
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <HAL_I2C_Init+0x196>
 8009262:	2301      	movs	r3, #1
 8009264:	e022      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	689b      	ldr	r3, [r3, #8]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10e      	bne.n	800928c <HAL_I2C_Init+0x1bc>
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1e58      	subs	r0, r3, #1
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6859      	ldr	r1, [r3, #4]
 8009276:	460b      	mov	r3, r1
 8009278:	005b      	lsls	r3, r3, #1
 800927a:	440b      	add	r3, r1
 800927c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009280:	3301      	adds	r3, #1
 8009282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800928a:	e00f      	b.n	80092ac <HAL_I2C_Init+0x1dc>
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	1e58      	subs	r0, r3, #1
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6859      	ldr	r1, [r3, #4]
 8009294:	460b      	mov	r3, r1
 8009296:	009b      	lsls	r3, r3, #2
 8009298:	440b      	add	r3, r1
 800929a:	0099      	lsls	r1, r3, #2
 800929c:	440b      	add	r3, r1
 800929e:	fbb0 f3f3 	udiv	r3, r0, r3
 80092a2:	3301      	adds	r3, #1
 80092a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80092a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80092ac:	6879      	ldr	r1, [r7, #4]
 80092ae:	6809      	ldr	r1, [r1, #0]
 80092b0:	4313      	orrs	r3, r2
 80092b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	69da      	ldr	r2, [r3, #28]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	431a      	orrs	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	430a      	orrs	r2, r1
 80092ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689b      	ldr	r3, [r3, #8]
 80092d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80092da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092de:	687a      	ldr	r2, [r7, #4]
 80092e0:	6911      	ldr	r1, [r2, #16]
 80092e2:	687a      	ldr	r2, [r7, #4]
 80092e4:	68d2      	ldr	r2, [r2, #12]
 80092e6:	4311      	orrs	r1, r2
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	6812      	ldr	r2, [r2, #0]
 80092ec:	430b      	orrs	r3, r1
 80092ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	695a      	ldr	r2, [r3, #20]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	699b      	ldr	r3, [r3, #24]
 8009302:	431a      	orrs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	430a      	orrs	r2, r1
 800930a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f042 0201 	orr.w	r2, r2, #1
 800931a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2200      	movs	r2, #0
 8009320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2220      	movs	r2, #32
 8009326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3710      	adds	r7, #16
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	000186a0 	.word	0x000186a0
 8009348:	001e847f 	.word	0x001e847f
 800934c:	003d08ff 	.word	0x003d08ff
 8009350:	431bde83 	.word	0x431bde83
 8009354:	10624dd3 	.word	0x10624dd3

08009358 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af02      	add	r7, sp, #8
 800935e:	60f8      	str	r0, [r7, #12]
 8009360:	607a      	str	r2, [r7, #4]
 8009362:	461a      	mov	r2, r3
 8009364:	460b      	mov	r3, r1
 8009366:	817b      	strh	r3, [r7, #10]
 8009368:	4613      	mov	r3, r2
 800936a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800936c:	f7fd fcf8 	bl	8006d60 <HAL_GetTick>
 8009370:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b20      	cmp	r3, #32
 800937c:	f040 80e0 	bne.w	8009540 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	9300      	str	r3, [sp, #0]
 8009384:	2319      	movs	r3, #25
 8009386:	2201      	movs	r2, #1
 8009388:	4970      	ldr	r1, [pc, #448]	; (800954c <HAL_I2C_Master_Transmit+0x1f4>)
 800938a:	68f8      	ldr	r0, [r7, #12]
 800938c:	f000 fc58 	bl	8009c40 <I2C_WaitOnFlagUntilTimeout>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d001      	beq.n	800939a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009396:	2302      	movs	r3, #2
 8009398:	e0d3      	b.n	8009542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093a0:	2b01      	cmp	r3, #1
 80093a2:	d101      	bne.n	80093a8 <HAL_I2C_Master_Transmit+0x50>
 80093a4:	2302      	movs	r3, #2
 80093a6:	e0cc      	b.n	8009542 <HAL_I2C_Master_Transmit+0x1ea>
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 0301 	and.w	r3, r3, #1
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d007      	beq.n	80093ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f042 0201 	orr.w	r2, r2, #1
 80093cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	681a      	ldr	r2, [r3, #0]
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2221      	movs	r2, #33	; 0x21
 80093e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2210      	movs	r2, #16
 80093ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	893a      	ldrh	r2, [r7, #8]
 80093fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009404:	b29a      	uxth	r2, r3
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	4a50      	ldr	r2, [pc, #320]	; (8009550 <HAL_I2C_Master_Transmit+0x1f8>)
 800940e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009410:	8979      	ldrh	r1, [r7, #10]
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	6a3a      	ldr	r2, [r7, #32]
 8009416:	68f8      	ldr	r0, [r7, #12]
 8009418:	f000 fac2 	bl	80099a0 <I2C_MasterRequestWrite>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d001      	beq.n	8009426 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e08d      	b.n	8009542 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009426:	2300      	movs	r3, #0
 8009428:	613b      	str	r3, [r7, #16]
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	695b      	ldr	r3, [r3, #20]
 8009430:	613b      	str	r3, [r7, #16]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	699b      	ldr	r3, [r3, #24]
 8009438:	613b      	str	r3, [r7, #16]
 800943a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800943c:	e066      	b.n	800950c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800943e:	697a      	ldr	r2, [r7, #20]
 8009440:	6a39      	ldr	r1, [r7, #32]
 8009442:	68f8      	ldr	r0, [r7, #12]
 8009444:	f000 fcd2 	bl	8009dec <I2C_WaitOnTXEFlagUntilTimeout>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	d00d      	beq.n	800946a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009452:	2b04      	cmp	r3, #4
 8009454:	d107      	bne.n	8009466 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681a      	ldr	r2, [r3, #0]
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009464:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009466:	2301      	movs	r3, #1
 8009468:	e06b      	b.n	8009542 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946e:	781a      	ldrb	r2, [r3, #0]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009484:	b29b      	uxth	r3, r3
 8009486:	3b01      	subs	r3, #1
 8009488:	b29a      	uxth	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009492:	3b01      	subs	r3, #1
 8009494:	b29a      	uxth	r2, r3
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d11b      	bne.n	80094e0 <HAL_I2C_Master_Transmit+0x188>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d017      	beq.n	80094e0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b4:	781a      	ldrb	r2, [r3, #0]
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c0:	1c5a      	adds	r2, r3, #1
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	3b01      	subs	r3, #1
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094d8:	3b01      	subs	r3, #1
 80094da:	b29a      	uxth	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80094e0:	697a      	ldr	r2, [r7, #20]
 80094e2:	6a39      	ldr	r1, [r7, #32]
 80094e4:	68f8      	ldr	r0, [r7, #12]
 80094e6:	f000 fcc2 	bl	8009e6e <I2C_WaitOnBTFFlagUntilTimeout>
 80094ea:	4603      	mov	r3, r0
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d00d      	beq.n	800950c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f4:	2b04      	cmp	r3, #4
 80094f6:	d107      	bne.n	8009508 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009506:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	e01a      	b.n	8009542 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009510:	2b00      	cmp	r3, #0
 8009512:	d194      	bne.n	800943e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009522:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2220      	movs	r2, #32
 8009528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2200      	movs	r2, #0
 8009538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800953c:	2300      	movs	r3, #0
 800953e:	e000      	b.n	8009542 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009540:	2302      	movs	r3, #2
  }
}
 8009542:	4618      	mov	r0, r3
 8009544:	3718      	adds	r7, #24
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	00100002 	.word	0x00100002
 8009550:	ffff0000 	.word	0xffff0000

08009554 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b08c      	sub	sp, #48	; 0x30
 8009558:	af02      	add	r7, sp, #8
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	607a      	str	r2, [r7, #4]
 800955e:	461a      	mov	r2, r3
 8009560:	460b      	mov	r3, r1
 8009562:	817b      	strh	r3, [r7, #10]
 8009564:	4613      	mov	r3, r2
 8009566:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009568:	f7fd fbfa 	bl	8006d60 <HAL_GetTick>
 800956c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009574:	b2db      	uxtb	r3, r3
 8009576:	2b20      	cmp	r3, #32
 8009578:	f040 820b 	bne.w	8009992 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	2319      	movs	r3, #25
 8009582:	2201      	movs	r2, #1
 8009584:	497c      	ldr	r1, [pc, #496]	; (8009778 <HAL_I2C_Master_Receive+0x224>)
 8009586:	68f8      	ldr	r0, [r7, #12]
 8009588:	f000 fb5a 	bl	8009c40 <I2C_WaitOnFlagUntilTimeout>
 800958c:	4603      	mov	r3, r0
 800958e:	2b00      	cmp	r3, #0
 8009590:	d001      	beq.n	8009596 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009592:	2302      	movs	r3, #2
 8009594:	e1fe      	b.n	8009994 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800959c:	2b01      	cmp	r3, #1
 800959e:	d101      	bne.n	80095a4 <HAL_I2C_Master_Receive+0x50>
 80095a0:	2302      	movs	r3, #2
 80095a2:	e1f7      	b.n	8009994 <HAL_I2C_Master_Receive+0x440>
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2201      	movs	r2, #1
 80095a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d007      	beq.n	80095ca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	681a      	ldr	r2, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f042 0201 	orr.w	r2, r2, #1
 80095c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	2222      	movs	r2, #34	; 0x22
 80095de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2210      	movs	r2, #16
 80095e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	893a      	ldrh	r2, [r7, #8]
 80095fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009600:	b29a      	uxth	r2, r3
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	4a5c      	ldr	r2, [pc, #368]	; (800977c <HAL_I2C_Master_Receive+0x228>)
 800960a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800960c:	8979      	ldrh	r1, [r7, #10]
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fa46 	bl	8009aa4 <I2C_MasterRequestRead>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e1b8      	b.n	8009994 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009626:	2b00      	cmp	r3, #0
 8009628:	d113      	bne.n	8009652 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800962a:	2300      	movs	r3, #0
 800962c:	623b      	str	r3, [r7, #32]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	695b      	ldr	r3, [r3, #20]
 8009634:	623b      	str	r3, [r7, #32]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	699b      	ldr	r3, [r3, #24]
 800963c:	623b      	str	r3, [r7, #32]
 800963e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	e18c      	b.n	800996c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009656:	2b01      	cmp	r3, #1
 8009658:	d11b      	bne.n	8009692 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009668:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800966a:	2300      	movs	r3, #0
 800966c:	61fb      	str	r3, [r7, #28]
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	695b      	ldr	r3, [r3, #20]
 8009674:	61fb      	str	r3, [r7, #28]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800968e:	601a      	str	r2, [r3, #0]
 8009690:	e16c      	b.n	800996c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009696:	2b02      	cmp	r3, #2
 8009698:	d11b      	bne.n	80096d2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	681a      	ldr	r2, [r3, #0]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096ba:	2300      	movs	r3, #0
 80096bc:	61bb      	str	r3, [r7, #24]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	695b      	ldr	r3, [r3, #20]
 80096c4:	61bb      	str	r3, [r7, #24]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	699b      	ldr	r3, [r3, #24]
 80096cc:	61bb      	str	r3, [r7, #24]
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	e14c      	b.n	800996c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80096e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80096e2:	2300      	movs	r3, #0
 80096e4:	617b      	str	r3, [r7, #20]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	617b      	str	r3, [r7, #20]
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	699b      	ldr	r3, [r3, #24]
 80096f4:	617b      	str	r3, [r7, #20]
 80096f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80096f8:	e138      	b.n	800996c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096fe:	2b03      	cmp	r3, #3
 8009700:	f200 80f1 	bhi.w	80098e6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009708:	2b01      	cmp	r3, #1
 800970a:	d123      	bne.n	8009754 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800970c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800970e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f000 fbed 	bl	8009ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009716:	4603      	mov	r3, r0
 8009718:	2b00      	cmp	r3, #0
 800971a:	d001      	beq.n	8009720 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	e139      	b.n	8009994 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	691a      	ldr	r2, [r3, #16]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	b2d2      	uxtb	r2, r2
 800972c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800973c:	3b01      	subs	r3, #1
 800973e:	b29a      	uxth	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009748:	b29b      	uxth	r3, r3
 800974a:	3b01      	subs	r3, #1
 800974c:	b29a      	uxth	r2, r3
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009752:	e10b      	b.n	800996c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009758:	2b02      	cmp	r3, #2
 800975a:	d14e      	bne.n	80097fa <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800975c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800975e:	9300      	str	r3, [sp, #0]
 8009760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009762:	2200      	movs	r2, #0
 8009764:	4906      	ldr	r1, [pc, #24]	; (8009780 <HAL_I2C_Master_Receive+0x22c>)
 8009766:	68f8      	ldr	r0, [r7, #12]
 8009768:	f000 fa6a 	bl	8009c40 <I2C_WaitOnFlagUntilTimeout>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d008      	beq.n	8009784 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e10e      	b.n	8009994 <HAL_I2C_Master_Receive+0x440>
 8009776:	bf00      	nop
 8009778:	00100002 	.word	0x00100002
 800977c:	ffff0000 	.word	0xffff0000
 8009780:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	681a      	ldr	r2, [r3, #0]
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	691a      	ldr	r2, [r3, #16]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800979e:	b2d2      	uxtb	r2, r2
 80097a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a6:	1c5a      	adds	r2, r3, #1
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097b0:	3b01      	subs	r3, #1
 80097b2:	b29a      	uxth	r2, r3
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097bc:	b29b      	uxth	r3, r3
 80097be:	3b01      	subs	r3, #1
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	691a      	ldr	r2, [r3, #16]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d0:	b2d2      	uxtb	r2, r2
 80097d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d8:	1c5a      	adds	r2, r3, #1
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80097e2:	3b01      	subs	r3, #1
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	3b01      	subs	r3, #1
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80097f8:	e0b8      	b.n	800996c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80097fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097fc:	9300      	str	r3, [sp, #0]
 80097fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009800:	2200      	movs	r2, #0
 8009802:	4966      	ldr	r1, [pc, #408]	; (800999c <HAL_I2C_Master_Receive+0x448>)
 8009804:	68f8      	ldr	r0, [r7, #12]
 8009806:	f000 fa1b 	bl	8009c40 <I2C_WaitOnFlagUntilTimeout>
 800980a:	4603      	mov	r3, r0
 800980c:	2b00      	cmp	r3, #0
 800980e:	d001      	beq.n	8009814 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e0bf      	b.n	8009994 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	691a      	ldr	r2, [r3, #16]
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982e:	b2d2      	uxtb	r2, r2
 8009830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009840:	3b01      	subs	r3, #1
 8009842:	b29a      	uxth	r2, r3
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800984c:	b29b      	uxth	r3, r3
 800984e:	3b01      	subs	r3, #1
 8009850:	b29a      	uxth	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	9300      	str	r3, [sp, #0]
 800985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800985c:	2200      	movs	r2, #0
 800985e:	494f      	ldr	r1, [pc, #316]	; (800999c <HAL_I2C_Master_Receive+0x448>)
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f9ed 	bl	8009c40 <I2C_WaitOnFlagUntilTimeout>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e091      	b.n	8009994 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800987e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	691a      	ldr	r2, [r3, #16]
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	b2d2      	uxtb	r2, r2
 800988c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	1c5a      	adds	r2, r3, #1
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800989c:	3b01      	subs	r3, #1
 800989e:	b29a      	uxth	r2, r3
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098a8:	b29b      	uxth	r3, r3
 80098aa:	3b01      	subs	r3, #1
 80098ac:	b29a      	uxth	r2, r3
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	691a      	ldr	r2, [r3, #16]
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098bc:	b2d2      	uxtb	r2, r2
 80098be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c4:	1c5a      	adds	r2, r3, #1
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ce:	3b01      	subs	r3, #1
 80098d0:	b29a      	uxth	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098da:	b29b      	uxth	r3, r3
 80098dc:	3b01      	subs	r3, #1
 80098de:	b29a      	uxth	r2, r3
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80098e4:	e042      	b.n	800996c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80098e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80098ea:	68f8      	ldr	r0, [r7, #12]
 80098ec:	f000 fb00 	bl	8009ef0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d001      	beq.n	80098fa <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	e04c      	b.n	8009994 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	691a      	ldr	r2, [r3, #16]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009904:	b2d2      	uxtb	r2, r2
 8009906:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800990c:	1c5a      	adds	r2, r3, #1
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009916:	3b01      	subs	r3, #1
 8009918:	b29a      	uxth	r2, r3
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009922:	b29b      	uxth	r3, r3
 8009924:	3b01      	subs	r3, #1
 8009926:	b29a      	uxth	r2, r3
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	f003 0304 	and.w	r3, r3, #4
 8009936:	2b04      	cmp	r3, #4
 8009938:	d118      	bne.n	800996c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	691a      	ldr	r2, [r3, #16]
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009944:	b2d2      	uxtb	r2, r2
 8009946:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994c:	1c5a      	adds	r2, r3, #1
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009956:	3b01      	subs	r3, #1
 8009958:	b29a      	uxth	r2, r3
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009962:	b29b      	uxth	r3, r3
 8009964:	3b01      	subs	r3, #1
 8009966:	b29a      	uxth	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009970:	2b00      	cmp	r3, #0
 8009972:	f47f aec2 	bne.w	80096fa <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	2220      	movs	r2, #32
 800997a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	2200      	movs	r2, #0
 8009982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2200      	movs	r2, #0
 800998a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	e000      	b.n	8009994 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8009992:	2302      	movs	r3, #2
  }
}
 8009994:	4618      	mov	r0, r3
 8009996:	3728      	adds	r7, #40	; 0x28
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	00010004 	.word	0x00010004

080099a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b088      	sub	sp, #32
 80099a4:	af02      	add	r7, sp, #8
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	607a      	str	r2, [r7, #4]
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	460b      	mov	r3, r1
 80099ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	2b08      	cmp	r3, #8
 80099ba:	d006      	beq.n	80099ca <I2C_MasterRequestWrite+0x2a>
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d003      	beq.n	80099ca <I2C_MasterRequestWrite+0x2a>
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80099c8:	d108      	bne.n	80099dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099d8:	601a      	str	r2, [r3, #0]
 80099da:	e00b      	b.n	80099f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099e0:	2b12      	cmp	r3, #18
 80099e2:	d107      	bne.n	80099f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	9300      	str	r3, [sp, #0]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2200      	movs	r2, #0
 80099fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f000 f91d 	bl	8009c40 <I2C_WaitOnFlagUntilTimeout>
 8009a06:	4603      	mov	r3, r0
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d00d      	beq.n	8009a28 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a1a:	d103      	bne.n	8009a24 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009a22:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a24:	2303      	movs	r3, #3
 8009a26:	e035      	b.n	8009a94 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	691b      	ldr	r3, [r3, #16]
 8009a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a30:	d108      	bne.n	8009a44 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009a32:	897b      	ldrh	r3, [r7, #10]
 8009a34:	b2db      	uxtb	r3, r3
 8009a36:	461a      	mov	r2, r3
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009a40:	611a      	str	r2, [r3, #16]
 8009a42:	e01b      	b.n	8009a7c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009a44:	897b      	ldrh	r3, [r7, #10]
 8009a46:	11db      	asrs	r3, r3, #7
 8009a48:	b2db      	uxtb	r3, r3
 8009a4a:	f003 0306 	and.w	r3, r3, #6
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	f063 030f 	orn	r3, r3, #15
 8009a54:	b2da      	uxtb	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	490e      	ldr	r1, [pc, #56]	; (8009a9c <I2C_MasterRequestWrite+0xfc>)
 8009a62:	68f8      	ldr	r0, [r7, #12]
 8009a64:	f000 f943 	bl	8009cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d001      	beq.n	8009a72 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e010      	b.n	8009a94 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009a72:	897b      	ldrh	r3, [r7, #10]
 8009a74:	b2da      	uxtb	r2, r3
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	4907      	ldr	r1, [pc, #28]	; (8009aa0 <I2C_MasterRequestWrite+0x100>)
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f000 f933 	bl	8009cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e000      	b.n	8009a94 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	00010008 	.word	0x00010008
 8009aa0:	00010002 	.word	0x00010002

08009aa4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af02      	add	r7, sp, #8
 8009aaa:	60f8      	str	r0, [r7, #12]
 8009aac:	607a      	str	r2, [r7, #4]
 8009aae:	603b      	str	r3, [r7, #0]
 8009ab0:	460b      	mov	r3, r1
 8009ab2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ac8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	2b08      	cmp	r3, #8
 8009ace:	d006      	beq.n	8009ade <I2C_MasterRequestRead+0x3a>
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d003      	beq.n	8009ade <I2C_MasterRequestRead+0x3a>
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009adc:	d108      	bne.n	8009af0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	e00b      	b.n	8009b08 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af4:	2b11      	cmp	r3, #17
 8009af6:	d107      	bne.n	8009b08 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b06:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 f893 	bl	8009c40 <I2C_WaitOnFlagUntilTimeout>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00d      	beq.n	8009b3c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b2e:	d103      	bne.n	8009b38 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009b36:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009b38:	2303      	movs	r3, #3
 8009b3a:	e079      	b.n	8009c30 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	691b      	ldr	r3, [r3, #16]
 8009b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b44:	d108      	bne.n	8009b58 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009b46:	897b      	ldrh	r3, [r7, #10]
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	f043 0301 	orr.w	r3, r3, #1
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	611a      	str	r2, [r3, #16]
 8009b56:	e05f      	b.n	8009c18 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8009b58:	897b      	ldrh	r3, [r7, #10]
 8009b5a:	11db      	asrs	r3, r3, #7
 8009b5c:	b2db      	uxtb	r3, r3
 8009b5e:	f003 0306 	and.w	r3, r3, #6
 8009b62:	b2db      	uxtb	r3, r3
 8009b64:	f063 030f 	orn	r3, r3, #15
 8009b68:	b2da      	uxtb	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4930      	ldr	r1, [pc, #192]	; (8009c38 <I2C_MasterRequestRead+0x194>)
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f000 f8b9 	bl	8009cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d001      	beq.n	8009b86 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	e054      	b.n	8009c30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8009b86:	897b      	ldrh	r3, [r7, #10]
 8009b88:	b2da      	uxtb	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	4929      	ldr	r1, [pc, #164]	; (8009c3c <I2C_MasterRequestRead+0x198>)
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f000 f8a9 	bl	8009cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e044      	b.n	8009c30 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	613b      	str	r3, [r7, #16]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	695b      	ldr	r3, [r3, #20]
 8009bb0:	613b      	str	r3, [r7, #16]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	699b      	ldr	r3, [r3, #24]
 8009bb8:	613b      	str	r3, [r7, #16]
 8009bba:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	681a      	ldr	r2, [r3, #0]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009bca:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	9300      	str	r3, [sp, #0]
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f000 f831 	bl	8009c40 <I2C_WaitOnFlagUntilTimeout>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d00d      	beq.n	8009c00 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bf2:	d103      	bne.n	8009bfc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bfa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e017      	b.n	8009c30 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8009c00:	897b      	ldrh	r3, [r7, #10]
 8009c02:	11db      	asrs	r3, r3, #7
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	f003 0306 	and.w	r3, r3, #6
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	f063 030e 	orn	r3, r3, #14
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	4907      	ldr	r1, [pc, #28]	; (8009c3c <I2C_MasterRequestRead+0x198>)
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 f865 	bl	8009cee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	e000      	b.n	8009c30 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8009c2e:	2300      	movs	r3, #0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3718      	adds	r7, #24
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	00010008 	.word	0x00010008
 8009c3c:	00010002 	.word	0x00010002

08009c40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	4613      	mov	r3, r2
 8009c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c50:	e025      	b.n	8009c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c58:	d021      	beq.n	8009c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c5a:	f7fd f881 	bl	8006d60 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	69bb      	ldr	r3, [r7, #24]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	683a      	ldr	r2, [r7, #0]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d302      	bcc.n	8009c70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d116      	bne.n	8009c9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8a:	f043 0220 	orr.w	r2, r3, #32
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	e023      	b.n	8009ce6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	0c1b      	lsrs	r3, r3, #16
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b01      	cmp	r3, #1
 8009ca6:	d10d      	bne.n	8009cc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	43da      	mvns	r2, r3
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	4013      	ands	r3, r2
 8009cb4:	b29b      	uxth	r3, r3
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	bf0c      	ite	eq
 8009cba:	2301      	moveq	r3, #1
 8009cbc:	2300      	movne	r3, #0
 8009cbe:	b2db      	uxtb	r3, r3
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	e00c      	b.n	8009cde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	699b      	ldr	r3, [r3, #24]
 8009cca:	43da      	mvns	r2, r3
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	4013      	ands	r3, r2
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	bf0c      	ite	eq
 8009cd6:	2301      	moveq	r3, #1
 8009cd8:	2300      	movne	r3, #0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	461a      	mov	r2, r3
 8009cde:	79fb      	ldrb	r3, [r7, #7]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d0b6      	beq.n	8009c52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009ce4:	2300      	movs	r3, #0
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3710      	adds	r7, #16
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	60f8      	str	r0, [r7, #12]
 8009cf6:	60b9      	str	r1, [r7, #8]
 8009cf8:	607a      	str	r2, [r7, #4]
 8009cfa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009cfc:	e051      	b.n	8009da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	695b      	ldr	r3, [r3, #20]
 8009d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d0c:	d123      	bne.n	8009d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d1c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009d26:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	2220      	movs	r2, #32
 8009d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d42:	f043 0204 	orr.w	r2, r3, #4
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e046      	b.n	8009de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d5c:	d021      	beq.n	8009da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d5e:	f7fc ffff 	bl	8006d60 <HAL_GetTick>
 8009d62:	4602      	mov	r2, r0
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	1ad3      	subs	r3, r2, r3
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	429a      	cmp	r2, r3
 8009d6c:	d302      	bcc.n	8009d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d116      	bne.n	8009da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2200      	movs	r2, #0
 8009d78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2220      	movs	r2, #32
 8009d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8e:	f043 0220 	orr.w	r2, r3, #32
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e020      	b.n	8009de4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009da2:	68bb      	ldr	r3, [r7, #8]
 8009da4:	0c1b      	lsrs	r3, r3, #16
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	d10c      	bne.n	8009dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	43da      	mvns	r2, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	4013      	ands	r3, r2
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	bf14      	ite	ne
 8009dbe:	2301      	movne	r3, #1
 8009dc0:	2300      	moveq	r3, #0
 8009dc2:	b2db      	uxtb	r3, r3
 8009dc4:	e00b      	b.n	8009dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	699b      	ldr	r3, [r3, #24]
 8009dcc:	43da      	mvns	r2, r3
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	bf14      	ite	ne
 8009dd8:	2301      	movne	r3, #1
 8009dda:	2300      	moveq	r3, #0
 8009ddc:	b2db      	uxtb	r3, r3
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d18d      	bne.n	8009cfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8009de2:	2300      	movs	r3, #0
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}

08009dec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009df8:	e02d      	b.n	8009e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f000 f8ce 	bl	8009f9c <I2C_IsAcknowledgeFailed>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d001      	beq.n	8009e0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e02d      	b.n	8009e66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e10:	d021      	beq.n	8009e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e12:	f7fc ffa5 	bl	8006d60 <HAL_GetTick>
 8009e16:	4602      	mov	r2, r0
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	1ad3      	subs	r3, r2, r3
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d302      	bcc.n	8009e28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d116      	bne.n	8009e56 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	2220      	movs	r2, #32
 8009e32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e42:	f043 0220 	orr.w	r2, r3, #32
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e007      	b.n	8009e66 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	695b      	ldr	r3, [r3, #20]
 8009e5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e60:	2b80      	cmp	r3, #128	; 0x80
 8009e62:	d1ca      	bne.n	8009dfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009e7a:	e02d      	b.n	8009ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009e7c:	68f8      	ldr	r0, [r7, #12]
 8009e7e:	f000 f88d 	bl	8009f9c <I2C_IsAcknowledgeFailed>
 8009e82:	4603      	mov	r3, r0
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d001      	beq.n	8009e8c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e02d      	b.n	8009ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e92:	d021      	beq.n	8009ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009e94:	f7fc ff64 	bl	8006d60 <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d302      	bcc.n	8009eaa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d116      	bne.n	8009ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2200      	movs	r2, #0
 8009eae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	2220      	movs	r2, #32
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec4:	f043 0220 	orr.w	r2, r3, #32
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009ed4:	2301      	movs	r3, #1
 8009ed6:	e007      	b.n	8009ee8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	f003 0304 	and.w	r3, r3, #4
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d1ca      	bne.n	8009e7c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3710      	adds	r7, #16
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b084      	sub	sp, #16
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	60f8      	str	r0, [r7, #12]
 8009ef8:	60b9      	str	r1, [r7, #8]
 8009efa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009efc:	e042      	b.n	8009f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	f003 0310 	and.w	r3, r3, #16
 8009f08:	2b10      	cmp	r3, #16
 8009f0a:	d119      	bne.n	8009f40 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f06f 0210 	mvn.w	r2, #16
 8009f14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	2220      	movs	r2, #32
 8009f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2200      	movs	r2, #0
 8009f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2200      	movs	r2, #0
 8009f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	e029      	b.n	8009f94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f40:	f7fc ff0e 	bl	8006d60 <HAL_GetTick>
 8009f44:	4602      	mov	r2, r0
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	1ad3      	subs	r3, r2, r3
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d302      	bcc.n	8009f56 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d116      	bne.n	8009f84 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2220      	movs	r2, #32
 8009f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f70:	f043 0220 	orr.w	r2, r3, #32
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009f80:	2301      	movs	r3, #1
 8009f82:	e007      	b.n	8009f94 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	695b      	ldr	r3, [r3, #20]
 8009f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f8e:	2b40      	cmp	r3, #64	; 0x40
 8009f90:	d1b5      	bne.n	8009efe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009f92:	2300      	movs	r3, #0
}
 8009f94:	4618      	mov	r0, r3
 8009f96:	3710      	adds	r7, #16
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}

08009f9c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fb2:	d11b      	bne.n	8009fec <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009fbc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2220      	movs	r2, #32
 8009fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fd8:	f043 0204 	orr.w	r2, r3, #4
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e000      	b.n	8009fee <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	370c      	adds	r7, #12
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff8:	4770      	bx	lr

08009ffa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ffc:	b08f      	sub	sp, #60	; 0x3c
 8009ffe:	af0a      	add	r7, sp, #40	; 0x28
 800a000:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d101      	bne.n	800a00c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800a008:	2301      	movs	r3, #1
 800a00a:	e116      	b.n	800a23a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d106      	bne.n	800a02c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f00d fae6 	bl	80175f8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2203      	movs	r2, #3
 800a030:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d102      	bne.n	800a046 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2200      	movs	r2, #0
 800a044:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f005 ff73 	bl	800ff36 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	603b      	str	r3, [r7, #0]
 800a056:	687e      	ldr	r6, [r7, #4]
 800a058:	466d      	mov	r5, sp
 800a05a:	f106 0410 	add.w	r4, r6, #16
 800a05e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a060:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a062:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a064:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a066:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a06a:	e885 0003 	stmia.w	r5, {r0, r1}
 800a06e:	1d33      	adds	r3, r6, #4
 800a070:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a072:	6838      	ldr	r0, [r7, #0]
 800a074:	f005 fe4a 	bl	800fd0c <USB_CoreInit>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d005      	beq.n	800a08a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2202      	movs	r2, #2
 800a082:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a086:	2301      	movs	r3, #1
 800a088:	e0d7      	b.n	800a23a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2100      	movs	r1, #0
 800a090:	4618      	mov	r0, r3
 800a092:	f005 ff61 	bl	800ff58 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a096:	2300      	movs	r3, #0
 800a098:	73fb      	strb	r3, [r7, #15]
 800a09a:	e04a      	b.n	800a132 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800a09c:	7bfa      	ldrb	r2, [r7, #15]
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	00db      	lsls	r3, r3, #3
 800a0a4:	4413      	add	r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	440b      	add	r3, r1
 800a0aa:	333d      	adds	r3, #61	; 0x3d
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800a0b0:	7bfa      	ldrb	r2, [r7, #15]
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	00db      	lsls	r3, r3, #3
 800a0b8:	4413      	add	r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	440b      	add	r3, r1
 800a0be:	333c      	adds	r3, #60	; 0x3c
 800a0c0:	7bfa      	ldrb	r2, [r7, #15]
 800a0c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800a0c4:	7bfa      	ldrb	r2, [r7, #15]
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
 800a0c8:	b298      	uxth	r0, r3
 800a0ca:	6879      	ldr	r1, [r7, #4]
 800a0cc:	4613      	mov	r3, r2
 800a0ce:	00db      	lsls	r3, r3, #3
 800a0d0:	4413      	add	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	440b      	add	r3, r1
 800a0d6:	3344      	adds	r3, #68	; 0x44
 800a0d8:	4602      	mov	r2, r0
 800a0da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800a0dc:	7bfa      	ldrb	r2, [r7, #15]
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	00db      	lsls	r3, r3, #3
 800a0e4:	4413      	add	r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	440b      	add	r3, r1
 800a0ea:	3340      	adds	r3, #64	; 0x40
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800a0f0:	7bfa      	ldrb	r2, [r7, #15]
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	4613      	mov	r3, r2
 800a0f6:	00db      	lsls	r3, r3, #3
 800a0f8:	4413      	add	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	440b      	add	r3, r1
 800a0fe:	3348      	adds	r3, #72	; 0x48
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800a104:	7bfa      	ldrb	r2, [r7, #15]
 800a106:	6879      	ldr	r1, [r7, #4]
 800a108:	4613      	mov	r3, r2
 800a10a:	00db      	lsls	r3, r3, #3
 800a10c:	4413      	add	r3, r2
 800a10e:	009b      	lsls	r3, r3, #2
 800a110:	440b      	add	r3, r1
 800a112:	334c      	adds	r3, #76	; 0x4c
 800a114:	2200      	movs	r2, #0
 800a116:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800a118:	7bfa      	ldrb	r2, [r7, #15]
 800a11a:	6879      	ldr	r1, [r7, #4]
 800a11c:	4613      	mov	r3, r2
 800a11e:	00db      	lsls	r3, r3, #3
 800a120:	4413      	add	r3, r2
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	440b      	add	r3, r1
 800a126:	3354      	adds	r3, #84	; 0x54
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a12c:	7bfb      	ldrb	r3, [r7, #15]
 800a12e:	3301      	adds	r3, #1
 800a130:	73fb      	strb	r3, [r7, #15]
 800a132:	7bfa      	ldrb	r2, [r7, #15]
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	429a      	cmp	r2, r3
 800a13a:	d3af      	bcc.n	800a09c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a13c:	2300      	movs	r3, #0
 800a13e:	73fb      	strb	r3, [r7, #15]
 800a140:	e044      	b.n	800a1cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800a142:	7bfa      	ldrb	r2, [r7, #15]
 800a144:	6879      	ldr	r1, [r7, #4]
 800a146:	4613      	mov	r3, r2
 800a148:	00db      	lsls	r3, r3, #3
 800a14a:	4413      	add	r3, r2
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	440b      	add	r3, r1
 800a150:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800a154:	2200      	movs	r2, #0
 800a156:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800a158:	7bfa      	ldrb	r2, [r7, #15]
 800a15a:	6879      	ldr	r1, [r7, #4]
 800a15c:	4613      	mov	r3, r2
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	4413      	add	r3, r2
 800a162:	009b      	lsls	r3, r3, #2
 800a164:	440b      	add	r3, r1
 800a166:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800a16a:	7bfa      	ldrb	r2, [r7, #15]
 800a16c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800a16e:	7bfa      	ldrb	r2, [r7, #15]
 800a170:	6879      	ldr	r1, [r7, #4]
 800a172:	4613      	mov	r3, r2
 800a174:	00db      	lsls	r3, r3, #3
 800a176:	4413      	add	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	440b      	add	r3, r1
 800a17c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a180:	2200      	movs	r2, #0
 800a182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800a184:	7bfa      	ldrb	r2, [r7, #15]
 800a186:	6879      	ldr	r1, [r7, #4]
 800a188:	4613      	mov	r3, r2
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	440b      	add	r3, r1
 800a192:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800a196:	2200      	movs	r2, #0
 800a198:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800a19a:	7bfa      	ldrb	r2, [r7, #15]
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	00db      	lsls	r3, r3, #3
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	440b      	add	r3, r1
 800a1a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800a1b0:	7bfa      	ldrb	r2, [r7, #15]
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	00db      	lsls	r3, r3, #3
 800a1b8:	4413      	add	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	440b      	add	r3, r1
 800a1be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	73fb      	strb	r3, [r7, #15]
 800a1cc:	7bfa      	ldrb	r2, [r7, #15]
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d3b5      	bcc.n	800a142 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	603b      	str	r3, [r7, #0]
 800a1dc:	687e      	ldr	r6, [r7, #4]
 800a1de:	466d      	mov	r5, sp
 800a1e0:	f106 0410 	add.w	r4, r6, #16
 800a1e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a1ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a1ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a1f0:	e885 0003 	stmia.w	r5, {r0, r1}
 800a1f4:	1d33      	adds	r3, r6, #4
 800a1f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1f8:	6838      	ldr	r0, [r7, #0]
 800a1fa:	f005 fef9 	bl	800fff0 <USB_DevInit>
 800a1fe:	4603      	mov	r3, r0
 800a200:	2b00      	cmp	r3, #0
 800a202:	d005      	beq.n	800a210 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2202      	movs	r2, #2
 800a208:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e014      	b.n	800a23a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2200      	movs	r2, #0
 800a214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	2201      	movs	r2, #1
 800a21c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a224:	2b01      	cmp	r3, #1
 800a226:	d102      	bne.n	800a22e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f001 f9b9 	bl	800b5a0 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4618      	mov	r0, r3
 800a234:	f007 f83b 	bl	80112ae <USB_DevDisconnect>

  return HAL_OK;
 800a238:	2300      	movs	r3, #0
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a242 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800a242:	b580      	push	{r7, lr}
 800a244:	b084      	sub	sp, #16
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800a256:	2b01      	cmp	r3, #1
 800a258:	d101      	bne.n	800a25e <HAL_PCD_Start+0x1c>
 800a25a:	2302      	movs	r3, #2
 800a25c:	e020      	b.n	800a2a0 <HAL_PCD_Start+0x5e>
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2201      	movs	r2, #1
 800a262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d109      	bne.n	800a282 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800a272:	2b01      	cmp	r3, #1
 800a274:	d005      	beq.n	800a282 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a27a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4618      	mov	r0, r3
 800a288:	f005 fe44 	bl	800ff14 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4618      	mov	r0, r3
 800a292:	f006 ffeb 	bl	801126c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800a29e:	2300      	movs	r3, #0
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3710      	adds	r7, #16
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800a2a8:	b590      	push	{r4, r7, lr}
 800a2aa:	b08d      	sub	sp, #52	; 0x34
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2b6:	6a3b      	ldr	r3, [r7, #32]
 800a2b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	4618      	mov	r0, r3
 800a2c0:	f007 f8a9 	bl	8011416 <USB_GetMode>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	f040 84b7 	bne.w	800ac3a <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f007 f80d 	bl	80112f0 <USB_ReadInterrupts>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	f000 84ad 	beq.w	800ac38 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2e4:	689b      	ldr	r3, [r3, #8]
 800a2e6:	0a1b      	lsrs	r3, r3, #8
 800a2e8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f006 fffa 	bl	80112f0 <USB_ReadInterrupts>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f003 0302 	and.w	r3, r3, #2
 800a302:	2b02      	cmp	r3, #2
 800a304:	d107      	bne.n	800a316 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	695a      	ldr	r2, [r3, #20]
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f002 0202 	and.w	r2, r2, #2
 800a314:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4618      	mov	r0, r3
 800a31c:	f006 ffe8 	bl	80112f0 <USB_ReadInterrupts>
 800a320:	4603      	mov	r3, r0
 800a322:	f003 0310 	and.w	r3, r3, #16
 800a326:	2b10      	cmp	r3, #16
 800a328:	d161      	bne.n	800a3ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	699a      	ldr	r2, [r3, #24]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	f022 0210 	bic.w	r2, r2, #16
 800a338:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	f003 020f 	and.w	r2, r3, #15
 800a346:	4613      	mov	r3, r2
 800a348:	00db      	lsls	r3, r3, #3
 800a34a:	4413      	add	r3, r2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a352:	687a      	ldr	r2, [r7, #4]
 800a354:	4413      	add	r3, r2
 800a356:	3304      	adds	r3, #4
 800a358:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800a35a:	69bb      	ldr	r3, [r7, #24]
 800a35c:	0c5b      	lsrs	r3, r3, #17
 800a35e:	f003 030f 	and.w	r3, r3, #15
 800a362:	2b02      	cmp	r3, #2
 800a364:	d124      	bne.n	800a3b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800a366:	69ba      	ldr	r2, [r7, #24]
 800a368:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800a36c:	4013      	ands	r3, r2
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d035      	beq.n	800a3de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	091b      	lsrs	r3, r3, #4
 800a37a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800a37c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a380:	b29b      	uxth	r3, r3
 800a382:	461a      	mov	r2, r3
 800a384:	6a38      	ldr	r0, [r7, #32]
 800a386:	f006 fe1f 	bl	8010fc8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	691a      	ldr	r2, [r3, #16]
 800a38e:	69bb      	ldr	r3, [r7, #24]
 800a390:	091b      	lsrs	r3, r3, #4
 800a392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a396:	441a      	add	r2, r3
 800a398:	697b      	ldr	r3, [r7, #20]
 800a39a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	6a1a      	ldr	r2, [r3, #32]
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	091b      	lsrs	r3, r3, #4
 800a3a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3a8:	441a      	add	r2, r3
 800a3aa:	697b      	ldr	r3, [r7, #20]
 800a3ac:	621a      	str	r2, [r3, #32]
 800a3ae:	e016      	b.n	800a3de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800a3b0:	69bb      	ldr	r3, [r7, #24]
 800a3b2:	0c5b      	lsrs	r3, r3, #17
 800a3b4:	f003 030f 	and.w	r3, r3, #15
 800a3b8:	2b06      	cmp	r3, #6
 800a3ba:	d110      	bne.n	800a3de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a3c2:	2208      	movs	r2, #8
 800a3c4:	4619      	mov	r1, r3
 800a3c6:	6a38      	ldr	r0, [r7, #32]
 800a3c8:	f006 fdfe 	bl	8010fc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	6a1a      	ldr	r2, [r3, #32]
 800a3d0:	69bb      	ldr	r3, [r7, #24]
 800a3d2:	091b      	lsrs	r3, r3, #4
 800a3d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a3d8:	441a      	add	r2, r3
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	699a      	ldr	r2, [r3, #24]
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	f042 0210 	orr.w	r2, r2, #16
 800a3ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f006 ff7c 	bl	80112f0 <USB_ReadInterrupts>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a402:	f040 80a7 	bne.w	800a554 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800a406:	2300      	movs	r3, #0
 800a408:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	4618      	mov	r0, r3
 800a410:	f006 ff81 	bl	8011316 <USB_ReadDevAllOutEpInterrupt>
 800a414:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800a416:	e099      	b.n	800a54c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f000 808e 	beq.w	800a540 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	4611      	mov	r1, r2
 800a42e:	4618      	mov	r0, r3
 800a430:	f006 ffa5 	bl	801137e <USB_ReadDevOutEPInterrupt>
 800a434:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d00c      	beq.n	800a45a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	4413      	add	r3, r2
 800a448:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a44c:	461a      	mov	r2, r3
 800a44e:	2301      	movs	r3, #1
 800a450:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800a452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a454:	6878      	ldr	r0, [r7, #4]
 800a456:	f000 ff1d 	bl	800b294 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800a45a:	693b      	ldr	r3, [r7, #16]
 800a45c:	f003 0308 	and.w	r3, r3, #8
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00c      	beq.n	800a47e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800a464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	69fb      	ldr	r3, [r7, #28]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a470:	461a      	mov	r2, r3
 800a472:	2308      	movs	r3, #8
 800a474:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800a476:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f000 fff3 	bl	800b464 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800a47e:	693b      	ldr	r3, [r7, #16]
 800a480:	f003 0310 	and.w	r3, r3, #16
 800a484:	2b00      	cmp	r3, #0
 800a486:	d008      	beq.n	800a49a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800a488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48a:	015a      	lsls	r2, r3, #5
 800a48c:	69fb      	ldr	r3, [r7, #28]
 800a48e:	4413      	add	r3, r2
 800a490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a494:	461a      	mov	r2, r3
 800a496:	2310      	movs	r3, #16
 800a498:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f003 0302 	and.w	r3, r3, #2
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d030      	beq.n	800a506 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800a4a4:	6a3b      	ldr	r3, [r7, #32]
 800a4a6:	695b      	ldr	r3, [r3, #20]
 800a4a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4ac:	2b80      	cmp	r3, #128	; 0x80
 800a4ae:	d109      	bne.n	800a4c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4b6:	685b      	ldr	r3, [r3, #4]
 800a4b8:	69fa      	ldr	r2, [r7, #28]
 800a4ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a4c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800a4c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	00db      	lsls	r3, r3, #3
 800a4ca:	4413      	add	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800a4d2:	687a      	ldr	r2, [r7, #4]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	3304      	adds	r3, #4
 800a4d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a4da:	697b      	ldr	r3, [r7, #20]
 800a4dc:	78db      	ldrb	r3, [r3, #3]
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d108      	bne.n	800a4f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800a4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	4619      	mov	r1, r3
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f00d f996 	bl	8017820 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	015a      	lsls	r2, r3, #5
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a500:	461a      	mov	r2, r3
 800a502:	2302      	movs	r3, #2
 800a504:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	f003 0320 	and.w	r3, r3, #32
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d008      	beq.n	800a522 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51c:	461a      	mov	r2, r3
 800a51e:	2320      	movs	r3, #32
 800a520:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d009      	beq.n	800a540 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800a52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52e:	015a      	lsls	r2, r3, #5
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	4413      	add	r3, r2
 800a534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a538:	461a      	mov	r2, r3
 800a53a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a53e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800a540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a542:	3301      	adds	r3, #1
 800a544:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	085b      	lsrs	r3, r3, #1
 800a54a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a54c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54e:	2b00      	cmp	r3, #0
 800a550:	f47f af62 	bne.w	800a418 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4618      	mov	r0, r3
 800a55a:	f006 fec9 	bl	80112f0 <USB_ReadInterrupts>
 800a55e:	4603      	mov	r3, r0
 800a560:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a564:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a568:	f040 80db 	bne.w	800a722 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4618      	mov	r0, r3
 800a572:	f006 feea 	bl	801134a <USB_ReadDevAllInEpInterrupt>
 800a576:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800a578:	2300      	movs	r3, #0
 800a57a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800a57c:	e0cd      	b.n	800a71a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800a57e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a580:	f003 0301 	and.w	r3, r3, #1
 800a584:	2b00      	cmp	r3, #0
 800a586:	f000 80c2 	beq.w	800a70e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a590:	b2d2      	uxtb	r2, r2
 800a592:	4611      	mov	r1, r2
 800a594:	4618      	mov	r0, r3
 800a596:	f006 ff10 	bl	80113ba <USB_ReadDevInEPInterrupt>
 800a59a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d057      	beq.n	800a656 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a8:	f003 030f 	and.w	r3, r3, #15
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a5b4:	69fb      	ldr	r3, [r7, #28]
 800a5b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	43db      	mvns	r3, r3
 800a5c0:	69f9      	ldr	r1, [r7, #28]
 800a5c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5c6:	4013      	ands	r3, r2
 800a5c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800a5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5cc:	015a      	lsls	r2, r3, #5
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	2301      	movs	r3, #1
 800a5da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	691b      	ldr	r3, [r3, #16]
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d132      	bne.n	800a64a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800a5e4:	6879      	ldr	r1, [r7, #4]
 800a5e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5e8:	4613      	mov	r3, r2
 800a5ea:	00db      	lsls	r3, r3, #3
 800a5ec:	4413      	add	r3, r2
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	440b      	add	r3, r1
 800a5f2:	334c      	adds	r3, #76	; 0x4c
 800a5f4:	6819      	ldr	r1, [r3, #0]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5fa:	4613      	mov	r3, r2
 800a5fc:	00db      	lsls	r3, r3, #3
 800a5fe:	4413      	add	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4403      	add	r3, r0
 800a604:	3348      	adds	r3, #72	; 0x48
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4419      	add	r1, r3
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a60e:	4613      	mov	r3, r2
 800a610:	00db      	lsls	r3, r3, #3
 800a612:	4413      	add	r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4403      	add	r3, r0
 800a618:	334c      	adds	r3, #76	; 0x4c
 800a61a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800a61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d113      	bne.n	800a64a <HAL_PCD_IRQHandler+0x3a2>
 800a622:	6879      	ldr	r1, [r7, #4]
 800a624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a626:	4613      	mov	r3, r2
 800a628:	00db      	lsls	r3, r3, #3
 800a62a:	4413      	add	r3, r2
 800a62c:	009b      	lsls	r3, r3, #2
 800a62e:	440b      	add	r3, r1
 800a630:	3354      	adds	r3, #84	; 0x54
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d108      	bne.n	800a64a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6818      	ldr	r0, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a642:	461a      	mov	r2, r3
 800a644:	2101      	movs	r1, #1
 800a646:	f006 ff17 	bl	8011478 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800a64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64c:	b2db      	uxtb	r3, r3
 800a64e:	4619      	mov	r1, r3
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f00d f860 	bl	8017716 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	f003 0308 	and.w	r3, r3, #8
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d008      	beq.n	800a672 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800a660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a662:	015a      	lsls	r2, r3, #5
 800a664:	69fb      	ldr	r3, [r7, #28]
 800a666:	4413      	add	r3, r2
 800a668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a66c:	461a      	mov	r2, r3
 800a66e:	2308      	movs	r3, #8
 800a670:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	f003 0310 	and.w	r3, r3, #16
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d008      	beq.n	800a68e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800a67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67e:	015a      	lsls	r2, r3, #5
 800a680:	69fb      	ldr	r3, [r7, #28]
 800a682:	4413      	add	r3, r2
 800a684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a688:	461a      	mov	r2, r3
 800a68a:	2310      	movs	r3, #16
 800a68c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a694:	2b00      	cmp	r3, #0
 800a696:	d008      	beq.n	800a6aa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800a698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	2340      	movs	r3, #64	; 0x40
 800a6a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800a6aa:	693b      	ldr	r3, [r7, #16]
 800a6ac:	f003 0302 	and.w	r3, r3, #2
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d023      	beq.n	800a6fc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800a6b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a6b6:	6a38      	ldr	r0, [r7, #32]
 800a6b8:	f005 fdf8 	bl	80102ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800a6bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6be:	4613      	mov	r3, r2
 800a6c0:	00db      	lsls	r3, r3, #3
 800a6c2:	4413      	add	r3, r2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	3338      	adds	r3, #56	; 0x38
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	3304      	adds	r3, #4
 800a6ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	78db      	ldrb	r3, [r3, #3]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d108      	bne.n	800a6ea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800a6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	f00d f8ad 	bl	8017844 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800a6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	2302      	movs	r3, #2
 800a6fa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a702:	2b00      	cmp	r3, #0
 800a704:	d003      	beq.n	800a70e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800a706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 fd35 	bl	800b178 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800a70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a710:	3301      	adds	r3, #1
 800a712:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800a714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a716:	085b      	lsrs	r3, r3, #1
 800a718:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800a71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f47f af2e 	bne.w	800a57e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4618      	mov	r0, r3
 800a728:	f006 fde2 	bl	80112f0 <USB_ReadInterrupts>
 800a72c:	4603      	mov	r3, r0
 800a72e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a736:	d122      	bne.n	800a77e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a738:	69fb      	ldr	r3, [r7, #28]
 800a73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	69fa      	ldr	r2, [r7, #28]
 800a742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a746:	f023 0301 	bic.w	r3, r3, #1
 800a74a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a752:	2b01      	cmp	r3, #1
 800a754:	d108      	bne.n	800a768 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800a75e:	2100      	movs	r1, #0
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f00d fa47 	bl	8017bf4 <HAL_PCDEx_LPM_Callback>
 800a766:	e002      	b.n	800a76e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f00d f84b 	bl	8017804 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	695a      	ldr	r2, [r3, #20]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800a77c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	4618      	mov	r0, r3
 800a784:	f006 fdb4 	bl	80112f0 <USB_ReadInterrupts>
 800a788:	4603      	mov	r3, r0
 800a78a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a78e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a792:	d112      	bne.n	800a7ba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800a794:	69fb      	ldr	r3, [r7, #28]
 800a796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a79a:	689b      	ldr	r3, [r3, #8]
 800a79c:	f003 0301 	and.w	r3, r3, #1
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d102      	bne.n	800a7aa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a7a4:	6878      	ldr	r0, [r7, #4]
 800a7a6:	f00d f807 	bl	80177b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	695a      	ldr	r2, [r3, #20]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800a7b8:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f006 fd96 	bl	80112f0 <USB_ReadInterrupts>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a7ce:	d121      	bne.n	800a814 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	695a      	ldr	r2, [r3, #20]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800a7de:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d111      	bne.n	800a80e <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7f8:	089b      	lsrs	r3, r3, #2
 800a7fa:	f003 020f 	and.w	r2, r3, #15
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a804:	2101      	movs	r1, #1
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f00d f9f4 	bl	8017bf4 <HAL_PCDEx_LPM_Callback>
 800a80c:	e002      	b.n	800a814 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f00c ffd2 	bl	80177b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4618      	mov	r0, r3
 800a81a:	f006 fd69 	bl	80112f0 <USB_ReadInterrupts>
 800a81e:	4603      	mov	r3, r0
 800a820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a824:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a828:	f040 80b7 	bne.w	800a99a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a832:	685b      	ldr	r3, [r3, #4]
 800a834:	69fa      	ldr	r2, [r7, #28]
 800a836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a83a:	f023 0301 	bic.w	r3, r3, #1
 800a83e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2110      	movs	r1, #16
 800a846:	4618      	mov	r0, r3
 800a848:	f005 fd30 	bl	80102ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a84c:	2300      	movs	r3, #0
 800a84e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a850:	e046      	b.n	800a8e0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800a852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	69fb      	ldr	r3, [r7, #28]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a85e:	461a      	mov	r2, r3
 800a860:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a864:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a868:	015a      	lsls	r2, r3, #5
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	4413      	add	r3, r2
 800a86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a876:	0151      	lsls	r1, r2, #5
 800a878:	69fa      	ldr	r2, [r7, #28]
 800a87a:	440a      	add	r2, r1
 800a87c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a880:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a884:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800a886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	69fb      	ldr	r3, [r7, #28]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a892:	461a      	mov	r2, r3
 800a894:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a898:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a89c:	015a      	lsls	r2, r3, #5
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8aa:	0151      	lsls	r1, r2, #5
 800a8ac:	69fa      	ldr	r2, [r7, #28]
 800a8ae:	440a      	add	r2, r1
 800a8b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8b4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a8b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8bc:	015a      	lsls	r2, r3, #5
 800a8be:	69fb      	ldr	r3, [r7, #28]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ca:	0151      	lsls	r1, r2, #5
 800a8cc:	69fa      	ldr	r2, [r7, #28]
 800a8ce:	440a      	add	r2, r1
 800a8d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8d4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a8d8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800a8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8dc:	3301      	adds	r3, #1
 800a8de:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	685b      	ldr	r3, [r3, #4]
 800a8e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d3b3      	bcc.n	800a852 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8f0:	69db      	ldr	r3, [r3, #28]
 800a8f2:	69fa      	ldr	r2, [r7, #28]
 800a8f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a8f8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800a8fc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a902:	2b00      	cmp	r3, #0
 800a904:	d016      	beq.n	800a934 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a90c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a910:	69fa      	ldr	r2, [r7, #28]
 800a912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a916:	f043 030b 	orr.w	r3, r3, #11
 800a91a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800a91e:	69fb      	ldr	r3, [r7, #28]
 800a920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a926:	69fa      	ldr	r2, [r7, #28]
 800a928:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a92c:	f043 030b 	orr.w	r3, r3, #11
 800a930:	6453      	str	r3, [r2, #68]	; 0x44
 800a932:	e015      	b.n	800a960 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800a934:	69fb      	ldr	r3, [r7, #28]
 800a936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a946:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800a94a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800a94c:	69fb      	ldr	r3, [r7, #28]
 800a94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a952:	691b      	ldr	r3, [r3, #16]
 800a954:	69fa      	ldr	r2, [r7, #28]
 800a956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a95a:	f043 030b 	orr.w	r3, r3, #11
 800a95e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	69fa      	ldr	r2, [r7, #28]
 800a96a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a96e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a972:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6818      	ldr	r0, [r3, #0]
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800a984:	461a      	mov	r2, r3
 800a986:	f006 fd77 	bl	8011478 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	695a      	ldr	r2, [r3, #20]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800a998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f006 fca6 	bl	80112f0 <USB_ReadInterrupts>
 800a9a4:	4603      	mov	r3, r0
 800a9a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a9aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9ae:	d124      	bne.n	800a9fa <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4618      	mov	r0, r3
 800a9b6:	f006 fd3c 	bl	8011432 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f005 fcf1 	bl	80103a6 <USB_GetDevSpeed>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681c      	ldr	r4, [r3, #0]
 800a9d0:	f000 ff40 	bl	800b854 <HAL_RCC_GetHCLKFreq>
 800a9d4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800a9da:	b2db      	uxtb	r3, r3
 800a9dc:	461a      	mov	r2, r3
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f005 f9f6 	bl	800fdd0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f00c febe 	bl	8017766 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	695a      	ldr	r2, [r3, #20]
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800a9f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f006 fc76 	bl	80112f0 <USB_ReadInterrupts>
 800aa04:	4603      	mov	r3, r0
 800aa06:	f003 0308 	and.w	r3, r3, #8
 800aa0a:	2b08      	cmp	r3, #8
 800aa0c:	d10a      	bne.n	800aa24 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f00c fe9b 	bl	801774a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	695a      	ldr	r2, [r3, #20]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f002 0208 	and.w	r2, r2, #8
 800aa22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f006 fc61 	bl	80112f0 <USB_ReadInterrupts>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa34:	2b80      	cmp	r3, #128	; 0x80
 800aa36:	d122      	bne.n	800aa7e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800aa38:	6a3b      	ldr	r3, [r7, #32]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa40:	6a3b      	ldr	r3, [r7, #32]
 800aa42:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa44:	2301      	movs	r3, #1
 800aa46:	627b      	str	r3, [r7, #36]	; 0x24
 800aa48:	e014      	b.n	800aa74 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800aa4a:	6879      	ldr	r1, [r7, #4]
 800aa4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4e:	4613      	mov	r3, r2
 800aa50:	00db      	lsls	r3, r3, #3
 800aa52:	4413      	add	r3, r2
 800aa54:	009b      	lsls	r3, r3, #2
 800aa56:	440b      	add	r3, r1
 800aa58:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d105      	bne.n	800aa6e <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	4619      	mov	r1, r3
 800aa68:	6878      	ldr	r0, [r7, #4]
 800aa6a:	f000 fb27 	bl	800b0bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	3301      	adds	r3, #1
 800aa72:	627b      	str	r3, [r7, #36]	; 0x24
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d3e5      	bcc.n	800aa4a <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4618      	mov	r0, r3
 800aa84:	f006 fc34 	bl	80112f0 <USB_ReadInterrupts>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa92:	d13b      	bne.n	800ab0c <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aa94:	2301      	movs	r3, #1
 800aa96:	627b      	str	r3, [r7, #36]	; 0x24
 800aa98:	e02b      	b.n	800aaf2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800aa9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa9c:	015a      	lsls	r2, r3, #5
 800aa9e:	69fb      	ldr	r3, [r7, #28]
 800aaa0:	4413      	add	r3, r2
 800aaa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800aaaa:	6879      	ldr	r1, [r7, #4]
 800aaac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaae:	4613      	mov	r3, r2
 800aab0:	00db      	lsls	r3, r3, #3
 800aab2:	4413      	add	r3, r2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	440b      	add	r3, r1
 800aab8:	3340      	adds	r3, #64	; 0x40
 800aaba:	781b      	ldrb	r3, [r3, #0]
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d115      	bne.n	800aaec <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800aac0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	da12      	bge.n	800aaec <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800aac6:	6879      	ldr	r1, [r7, #4]
 800aac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaca:	4613      	mov	r3, r2
 800aacc:	00db      	lsls	r3, r3, #3
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	440b      	add	r3, r1
 800aad4:	333f      	adds	r3, #63	; 0x3f
 800aad6:	2201      	movs	r2, #1
 800aad8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800aada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800aae2:	b2db      	uxtb	r3, r3
 800aae4:	4619      	mov	r1, r3
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 fae8 	bl	800b0bc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	3301      	adds	r3, #1
 800aaf0:	627b      	str	r3, [r7, #36]	; 0x24
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaf8:	429a      	cmp	r2, r3
 800aafa:	d3ce      	bcc.n	800aa9a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	695a      	ldr	r2, [r3, #20]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ab0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	4618      	mov	r0, r3
 800ab12:	f006 fbed 	bl	80112f0 <USB_ReadInterrupts>
 800ab16:	4603      	mov	r3, r0
 800ab18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab20:	d155      	bne.n	800abce <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ab22:	2301      	movs	r3, #1
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24
 800ab26:	e045      	b.n	800abb4 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800ab28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2a:	015a      	lsls	r2, r3, #5
 800ab2c:	69fb      	ldr	r3, [r7, #28]
 800ab2e:	4413      	add	r3, r2
 800ab30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab38:	6879      	ldr	r1, [r7, #4]
 800ab3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab3c:	4613      	mov	r3, r2
 800ab3e:	00db      	lsls	r3, r3, #3
 800ab40:	4413      	add	r3, r2
 800ab42:	009b      	lsls	r3, r3, #2
 800ab44:	440b      	add	r3, r1
 800ab46:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800ab4a:	781b      	ldrb	r3, [r3, #0]
 800ab4c:	2b01      	cmp	r3, #1
 800ab4e:	d12e      	bne.n	800abae <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ab50:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	da2b      	bge.n	800abae <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800ab56:	69bb      	ldr	r3, [r7, #24]
 800ab58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800ab62:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800ab66:	429a      	cmp	r2, r3
 800ab68:	d121      	bne.n	800abae <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800ab6a:	6879      	ldr	r1, [r7, #4]
 800ab6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab6e:	4613      	mov	r3, r2
 800ab70:	00db      	lsls	r3, r3, #3
 800ab72:	4413      	add	r3, r2
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	440b      	add	r3, r1
 800ab78:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800ab80:	6a3b      	ldr	r3, [r7, #32]
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ab88:	6a3b      	ldr	r3, [r7, #32]
 800ab8a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	695b      	ldr	r3, [r3, #20]
 800ab90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d10a      	bne.n	800abae <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	69fa      	ldr	r2, [r7, #28]
 800aba2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aba6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abaa:	6053      	str	r3, [r2, #4]
            break;
 800abac:	e007      	b.n	800abbe <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800abae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb0:	3301      	adds	r3, #1
 800abb2:	627b      	str	r3, [r7, #36]	; 0x24
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abba:	429a      	cmp	r2, r3
 800abbc:	d3b4      	bcc.n	800ab28 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	695a      	ldr	r2, [r3, #20]
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800abcc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4618      	mov	r0, r3
 800abd4:	f006 fb8c 	bl	80112f0 <USB_ReadInterrupts>
 800abd8:	4603      	mov	r3, r0
 800abda:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800abde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe2:	d10a      	bne.n	800abfa <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f00c fe3f 	bl	8017868 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	695a      	ldr	r2, [r3, #20]
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800abf8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4618      	mov	r0, r3
 800ac00:	f006 fb76 	bl	80112f0 <USB_ReadInterrupts>
 800ac04:	4603      	mov	r3, r0
 800ac06:	f003 0304 	and.w	r3, r3, #4
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	d115      	bne.n	800ac3a <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	f003 0304 	and.w	r3, r3, #4
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f00c fe2f 	bl	8017884 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	6859      	ldr	r1, [r3, #4]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	69ba      	ldr	r2, [r7, #24]
 800ac32:	430a      	orrs	r2, r1
 800ac34:	605a      	str	r2, [r3, #4]
 800ac36:	e000      	b.n	800ac3a <HAL_PCD_IRQHandler+0x992>
      return;
 800ac38:	bf00      	nop
    }
  }
}
 800ac3a:	3734      	adds	r7, #52	; 0x34
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd90      	pop	{r4, r7, pc}

0800ac40 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d101      	bne.n	800ac5a <HAL_PCD_SetAddress+0x1a>
 800ac56:	2302      	movs	r3, #2
 800ac58:	e013      	b.n	800ac82 <HAL_PCD_SetAddress+0x42>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	78fa      	ldrb	r2, [r7, #3]
 800ac66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	78fa      	ldrb	r2, [r7, #3]
 800ac70:	4611      	mov	r1, r2
 800ac72:	4618      	mov	r0, r3
 800ac74:	f006 fad4 	bl	8011220 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800ac80:	2300      	movs	r3, #0
}
 800ac82:	4618      	mov	r0, r3
 800ac84:	3708      	adds	r7, #8
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800ac8a:	b580      	push	{r7, lr}
 800ac8c:	b084      	sub	sp, #16
 800ac8e:	af00      	add	r7, sp, #0
 800ac90:	6078      	str	r0, [r7, #4]
 800ac92:	4608      	mov	r0, r1
 800ac94:	4611      	mov	r1, r2
 800ac96:	461a      	mov	r2, r3
 800ac98:	4603      	mov	r3, r0
 800ac9a:	70fb      	strb	r3, [r7, #3]
 800ac9c:	460b      	mov	r3, r1
 800ac9e:	803b      	strh	r3, [r7, #0]
 800aca0:	4613      	mov	r3, r2
 800aca2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800aca4:	2300      	movs	r3, #0
 800aca6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800aca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800acac:	2b00      	cmp	r3, #0
 800acae:	da0f      	bge.n	800acd0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	f003 020f 	and.w	r2, r3, #15
 800acb6:	4613      	mov	r3, r2
 800acb8:	00db      	lsls	r3, r3, #3
 800acba:	4413      	add	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	3338      	adds	r3, #56	; 0x38
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	4413      	add	r3, r2
 800acc4:	3304      	adds	r3, #4
 800acc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2201      	movs	r2, #1
 800accc:	705a      	strb	r2, [r3, #1]
 800acce:	e00f      	b.n	800acf0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800acd0:	78fb      	ldrb	r3, [r7, #3]
 800acd2:	f003 020f 	and.w	r2, r3, #15
 800acd6:	4613      	mov	r3, r2
 800acd8:	00db      	lsls	r3, r3, #3
 800acda:	4413      	add	r3, r2
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ace2:	687a      	ldr	r2, [r7, #4]
 800ace4:	4413      	add	r3, r2
 800ace6:	3304      	adds	r3, #4
 800ace8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2200      	movs	r2, #0
 800acee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800acf0:	78fb      	ldrb	r3, [r7, #3]
 800acf2:	f003 030f 	and.w	r3, r3, #15
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800acfc:	883a      	ldrh	r2, [r7, #0]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	78ba      	ldrb	r2, [r7, #2]
 800ad06:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	785b      	ldrb	r3, [r3, #1]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d004      	beq.n	800ad1a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	b29a      	uxth	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ad1a:	78bb      	ldrb	r3, [r7, #2]
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d102      	bne.n	800ad26 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d101      	bne.n	800ad34 <HAL_PCD_EP_Open+0xaa>
 800ad30:	2302      	movs	r3, #2
 800ad32:	e00e      	b.n	800ad52 <HAL_PCD_EP_Open+0xc8>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68f9      	ldr	r1, [r7, #12]
 800ad42:	4618      	mov	r0, r3
 800ad44:	f005 fb54 	bl	80103f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800ad50:	7afb      	ldrb	r3, [r7, #11]
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3710      	adds	r7, #16
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}

0800ad5a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ad5a:	b580      	push	{r7, lr}
 800ad5c:	b084      	sub	sp, #16
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
 800ad62:	460b      	mov	r3, r1
 800ad64:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ad66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	da0f      	bge.n	800ad8e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ad6e:	78fb      	ldrb	r3, [r7, #3]
 800ad70:	f003 020f 	and.w	r2, r3, #15
 800ad74:	4613      	mov	r3, r2
 800ad76:	00db      	lsls	r3, r3, #3
 800ad78:	4413      	add	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	3338      	adds	r3, #56	; 0x38
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	4413      	add	r3, r2
 800ad82:	3304      	adds	r3, #4
 800ad84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2201      	movs	r2, #1
 800ad8a:	705a      	strb	r2, [r3, #1]
 800ad8c:	e00f      	b.n	800adae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ad8e:	78fb      	ldrb	r3, [r7, #3]
 800ad90:	f003 020f 	and.w	r2, r3, #15
 800ad94:	4613      	mov	r3, r2
 800ad96:	00db      	lsls	r3, r3, #3
 800ad98:	4413      	add	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	4413      	add	r3, r2
 800ada4:	3304      	adds	r3, #4
 800ada6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	2200      	movs	r2, #0
 800adac:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800adae:	78fb      	ldrb	r3, [r7, #3]
 800adb0:	f003 030f 	and.w	r3, r3, #15
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d101      	bne.n	800adc8 <HAL_PCD_EP_Close+0x6e>
 800adc4:	2302      	movs	r3, #2
 800adc6:	e00e      	b.n	800ade6 <HAL_PCD_EP_Close+0x8c>
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2201      	movs	r2, #1
 800adcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68f9      	ldr	r1, [r7, #12]
 800add6:	4618      	mov	r0, r3
 800add8:	f005 fb92 	bl	8010500 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800ade4:	2300      	movs	r3, #0
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3710      	adds	r7, #16
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}

0800adee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800adee:	b580      	push	{r7, lr}
 800adf0:	b086      	sub	sp, #24
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	607a      	str	r2, [r7, #4]
 800adf8:	603b      	str	r3, [r7, #0]
 800adfa:	460b      	mov	r3, r1
 800adfc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800adfe:	7afb      	ldrb	r3, [r7, #11]
 800ae00:	f003 020f 	and.w	r2, r3, #15
 800ae04:	4613      	mov	r3, r2
 800ae06:	00db      	lsls	r3, r3, #3
 800ae08:	4413      	add	r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800ae10:	68fa      	ldr	r2, [r7, #12]
 800ae12:	4413      	add	r3, r2
 800ae14:	3304      	adds	r3, #4
 800ae16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	687a      	ldr	r2, [r7, #4]
 800ae1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	683a      	ldr	r2, [r7, #0]
 800ae22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	2200      	movs	r2, #0
 800ae28:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ae30:	7afb      	ldrb	r3, [r7, #11]
 800ae32:	f003 030f 	and.w	r3, r3, #15
 800ae36:	b2da      	uxtb	r2, r3
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d102      	bne.n	800ae4a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ae4a:	7afb      	ldrb	r3, [r7, #11]
 800ae4c:	f003 030f 	and.w	r3, r3, #15
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d109      	bne.n	800ae68 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	6818      	ldr	r0, [r3, #0]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	691b      	ldr	r3, [r3, #16]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	461a      	mov	r2, r3
 800ae60:	6979      	ldr	r1, [r7, #20]
 800ae62:	f005 fe71 	bl	8010b48 <USB_EP0StartXfer>
 800ae66:	e008      	b.n	800ae7a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	6818      	ldr	r0, [r3, #0]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	691b      	ldr	r3, [r3, #16]
 800ae70:	b2db      	uxtb	r3, r3
 800ae72:	461a      	mov	r2, r3
 800ae74:	6979      	ldr	r1, [r7, #20]
 800ae76:	f005 fc1f 	bl	80106b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800ae7a:	2300      	movs	r3, #0
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3718      	adds	r7, #24
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ae84:	b480      	push	{r7}
 800ae86:	b083      	sub	sp, #12
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	f003 020f 	and.w	r2, r3, #15
 800ae96:	6879      	ldr	r1, [r7, #4]
 800ae98:	4613      	mov	r3, r2
 800ae9a:	00db      	lsls	r3, r3, #3
 800ae9c:	4413      	add	r3, r2
 800ae9e:	009b      	lsls	r3, r3, #2
 800aea0:	440b      	add	r3, r1
 800aea2:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800aea6:	681b      	ldr	r3, [r3, #0]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	370c      	adds	r7, #12
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr

0800aeb4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b086      	sub	sp, #24
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	607a      	str	r2, [r7, #4]
 800aebe:	603b      	str	r3, [r7, #0]
 800aec0:	460b      	mov	r3, r1
 800aec2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800aec4:	7afb      	ldrb	r3, [r7, #11]
 800aec6:	f003 020f 	and.w	r2, r3, #15
 800aeca:	4613      	mov	r3, r2
 800aecc:	00db      	lsls	r3, r3, #3
 800aece:	4413      	add	r3, r2
 800aed0:	009b      	lsls	r3, r3, #2
 800aed2:	3338      	adds	r3, #56	; 0x38
 800aed4:	68fa      	ldr	r2, [r7, #12]
 800aed6:	4413      	add	r3, r2
 800aed8:	3304      	adds	r3, #4
 800aeda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	687a      	ldr	r2, [r7, #4]
 800aee0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	2200      	movs	r2, #0
 800aeec:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2201      	movs	r2, #1
 800aef2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800aef4:	7afb      	ldrb	r3, [r7, #11]
 800aef6:	f003 030f 	and.w	r3, r3, #15
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	2b01      	cmp	r3, #1
 800af06:	d102      	bne.n	800af0e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800af08:	687a      	ldr	r2, [r7, #4]
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800af0e:	7afb      	ldrb	r3, [r7, #11]
 800af10:	f003 030f 	and.w	r3, r3, #15
 800af14:	2b00      	cmp	r3, #0
 800af16:	d109      	bne.n	800af2c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6818      	ldr	r0, [r3, #0]
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	b2db      	uxtb	r3, r3
 800af22:	461a      	mov	r2, r3
 800af24:	6979      	ldr	r1, [r7, #20]
 800af26:	f005 fe0f 	bl	8010b48 <USB_EP0StartXfer>
 800af2a:	e008      	b.n	800af3e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	461a      	mov	r2, r3
 800af38:	6979      	ldr	r1, [r7, #20]
 800af3a:	f005 fbbd 	bl	80106b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3718      	adds	r7, #24
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800af54:	78fb      	ldrb	r3, [r7, #3]
 800af56:	f003 020f 	and.w	r2, r3, #15
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d901      	bls.n	800af66 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e050      	b.n	800b008 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800af66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	da0f      	bge.n	800af8e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800af6e:	78fb      	ldrb	r3, [r7, #3]
 800af70:	f003 020f 	and.w	r2, r3, #15
 800af74:	4613      	mov	r3, r2
 800af76:	00db      	lsls	r3, r3, #3
 800af78:	4413      	add	r3, r2
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	3338      	adds	r3, #56	; 0x38
 800af7e:	687a      	ldr	r2, [r7, #4]
 800af80:	4413      	add	r3, r2
 800af82:	3304      	adds	r3, #4
 800af84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	2201      	movs	r2, #1
 800af8a:	705a      	strb	r2, [r3, #1]
 800af8c:	e00d      	b.n	800afaa <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800af8e:	78fa      	ldrb	r2, [r7, #3]
 800af90:	4613      	mov	r3, r2
 800af92:	00db      	lsls	r3, r3, #3
 800af94:	4413      	add	r3, r2
 800af96:	009b      	lsls	r3, r3, #2
 800af98:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	4413      	add	r3, r2
 800afa0:	3304      	adds	r3, #4
 800afa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2200      	movs	r2, #0
 800afa8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	2201      	movs	r2, #1
 800afae:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	f003 030f 	and.w	r3, r3, #15
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800afc2:	2b01      	cmp	r3, #1
 800afc4:	d101      	bne.n	800afca <HAL_PCD_EP_SetStall+0x82>
 800afc6:	2302      	movs	r3, #2
 800afc8:	e01e      	b.n	800b008 <HAL_PCD_EP_SetStall+0xc0>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2201      	movs	r2, #1
 800afce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	68f9      	ldr	r1, [r7, #12]
 800afd8:	4618      	mov	r0, r3
 800afda:	f006 f84d 	bl	8011078 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800afde:	78fb      	ldrb	r3, [r7, #3]
 800afe0:	f003 030f 	and.w	r3, r3, #15
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d10a      	bne.n	800affe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6818      	ldr	r0, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	691b      	ldr	r3, [r3, #16]
 800aff0:	b2d9      	uxtb	r1, r3
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800aff8:	461a      	mov	r2, r3
 800affa:	f006 fa3d 	bl	8011478 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b084      	sub	sp, #16
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b01c:	78fb      	ldrb	r3, [r7, #3]
 800b01e:	f003 020f 	and.w	r2, r3, #15
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	429a      	cmp	r2, r3
 800b028:	d901      	bls.n	800b02e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800b02a:	2301      	movs	r3, #1
 800b02c:	e042      	b.n	800b0b4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800b02e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b032:	2b00      	cmp	r3, #0
 800b034:	da0f      	bge.n	800b056 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b036:	78fb      	ldrb	r3, [r7, #3]
 800b038:	f003 020f 	and.w	r2, r3, #15
 800b03c:	4613      	mov	r3, r2
 800b03e:	00db      	lsls	r3, r3, #3
 800b040:	4413      	add	r3, r2
 800b042:	009b      	lsls	r3, r3, #2
 800b044:	3338      	adds	r3, #56	; 0x38
 800b046:	687a      	ldr	r2, [r7, #4]
 800b048:	4413      	add	r3, r2
 800b04a:	3304      	adds	r3, #4
 800b04c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2201      	movs	r2, #1
 800b052:	705a      	strb	r2, [r3, #1]
 800b054:	e00f      	b.n	800b076 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b056:	78fb      	ldrb	r3, [r7, #3]
 800b058:	f003 020f 	and.w	r2, r3, #15
 800b05c:	4613      	mov	r3, r2
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	4413      	add	r3, r2
 800b062:	009b      	lsls	r3, r3, #2
 800b064:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b068:	687a      	ldr	r2, [r7, #4]
 800b06a:	4413      	add	r3, r2
 800b06c:	3304      	adds	r3, #4
 800b06e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	2200      	movs	r2, #0
 800b07a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b07c:	78fb      	ldrb	r3, [r7, #3]
 800b07e:	f003 030f 	and.w	r3, r3, #15
 800b082:	b2da      	uxtb	r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b08e:	2b01      	cmp	r3, #1
 800b090:	d101      	bne.n	800b096 <HAL_PCD_EP_ClrStall+0x86>
 800b092:	2302      	movs	r3, #2
 800b094:	e00e      	b.n	800b0b4 <HAL_PCD_EP_ClrStall+0xa4>
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2201      	movs	r2, #1
 800b09a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	68f9      	ldr	r1, [r7, #12]
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f006 f855 	bl	8011154 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b0b2:	2300      	movs	r3, #0
}
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	3710      	adds	r7, #16
 800b0b8:	46bd      	mov	sp, r7
 800b0ba:	bd80      	pop	{r7, pc}

0800b0bc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b0bc:	b580      	push	{r7, lr}
 800b0be:	b084      	sub	sp, #16
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800b0c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	da0c      	bge.n	800b0ea <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b0d0:	78fb      	ldrb	r3, [r7, #3]
 800b0d2:	f003 020f 	and.w	r2, r3, #15
 800b0d6:	4613      	mov	r3, r2
 800b0d8:	00db      	lsls	r3, r3, #3
 800b0da:	4413      	add	r3, r2
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	3338      	adds	r3, #56	; 0x38
 800b0e0:	687a      	ldr	r2, [r7, #4]
 800b0e2:	4413      	add	r3, r2
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	60fb      	str	r3, [r7, #12]
 800b0e8:	e00c      	b.n	800b104 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b0ea:	78fb      	ldrb	r3, [r7, #3]
 800b0ec:	f003 020f 	and.w	r2, r3, #15
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	00db      	lsls	r3, r3, #3
 800b0f4:	4413      	add	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b0fc:	687a      	ldr	r2, [r7, #4]
 800b0fe:	4413      	add	r3, r2
 800b100:	3304      	adds	r3, #4
 800b102:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	68f9      	ldr	r1, [r7, #12]
 800b10a:	4618      	mov	r0, r3
 800b10c:	f005 fe74 	bl	8010df8 <USB_EPStopXfer>
 800b110:	4603      	mov	r3, r0
 800b112:	72fb      	strb	r3, [r7, #11]

  return ret;
 800b114:	7afb      	ldrb	r3, [r7, #11]
}
 800b116:	4618      	mov	r0, r3
 800b118:	3710      	adds	r7, #16
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}

0800b11e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b11e:	b580      	push	{r7, lr}
 800b120:	b082      	sub	sp, #8
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	460b      	mov	r3, r1
 800b128:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b130:	2b01      	cmp	r3, #1
 800b132:	d101      	bne.n	800b138 <HAL_PCD_EP_Flush+0x1a>
 800b134:	2302      	movs	r3, #2
 800b136:	e01b      	b.n	800b170 <HAL_PCD_EP_Flush+0x52>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((ep_addr & 0x80U) == 0x80U)
 800b140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b144:	2b00      	cmp	r3, #0
 800b146:	da09      	bge.n	800b15c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681a      	ldr	r2, [r3, #0]
 800b14c:	78fb      	ldrb	r3, [r7, #3]
 800b14e:	f003 030f 	and.w	r3, r3, #15
 800b152:	4619      	mov	r1, r3
 800b154:	4610      	mov	r0, r2
 800b156:	f005 f8a9 	bl	80102ac <USB_FlushTxFifo>
 800b15a:	e004      	b.n	800b166 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4618      	mov	r0, r3
 800b162:	f005 f8d7 	bl	8010314 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3708      	adds	r7, #8
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b08a      	sub	sp, #40	; 0x28
 800b17c:	af02      	add	r7, sp, #8
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800b18c:	683a      	ldr	r2, [r7, #0]
 800b18e:	4613      	mov	r3, r2
 800b190:	00db      	lsls	r3, r3, #3
 800b192:	4413      	add	r3, r2
 800b194:	009b      	lsls	r3, r3, #2
 800b196:	3338      	adds	r3, #56	; 0x38
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	4413      	add	r3, r2
 800b19c:	3304      	adds	r3, #4
 800b19e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	6a1a      	ldr	r2, [r3, #32]
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	699b      	ldr	r3, [r3, #24]
 800b1a8:	429a      	cmp	r2, r3
 800b1aa:	d901      	bls.n	800b1b0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	e06c      	b.n	800b28a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	699a      	ldr	r2, [r3, #24]
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	1ad3      	subs	r3, r2, r3
 800b1ba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	68db      	ldr	r3, [r3, #12]
 800b1c0:	69fa      	ldr	r2, [r7, #28]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d902      	bls.n	800b1cc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	68db      	ldr	r3, [r3, #12]
 800b1ca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800b1cc:	69fb      	ldr	r3, [r7, #28]
 800b1ce:	3303      	adds	r3, #3
 800b1d0:	089b      	lsrs	r3, r3, #2
 800b1d2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b1d4:	e02b      	b.n	800b22e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	699a      	ldr	r2, [r3, #24]
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	69fa      	ldr	r2, [r7, #28]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d902      	bls.n	800b1f2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	68db      	ldr	r3, [r3, #12]
 800b1f0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	3303      	adds	r3, #3
 800b1f6:	089b      	lsrs	r3, r3, #2
 800b1f8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6919      	ldr	r1, [r3, #16]
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	b2da      	uxtb	r2, r3
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	9300      	str	r3, [sp, #0]
 800b20e:	4603      	mov	r3, r0
 800b210:	6978      	ldr	r0, [r7, #20]
 800b212:	f005 fe9b 	bl	8010f4c <USB_WritePacket>

    ep->xfer_buff  += len;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	691a      	ldr	r2, [r3, #16]
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	441a      	add	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6a1a      	ldr	r2, [r3, #32]
 800b226:	69fb      	ldr	r3, [r7, #28]
 800b228:	441a      	add	r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	015a      	lsls	r2, r3, #5
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	4413      	add	r3, r2
 800b236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	69ba      	ldr	r2, [r7, #24]
 800b240:	429a      	cmp	r2, r3
 800b242:	d809      	bhi.n	800b258 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6a1a      	ldr	r2, [r3, #32]
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d203      	bcs.n	800b258 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	699b      	ldr	r3, [r3, #24]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d1be      	bne.n	800b1d6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	699a      	ldr	r2, [r3, #24]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6a1b      	ldr	r3, [r3, #32]
 800b260:	429a      	cmp	r2, r3
 800b262:	d811      	bhi.n	800b288 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	f003 030f 	and.w	r3, r3, #15
 800b26a:	2201      	movs	r2, #1
 800b26c:	fa02 f303 	lsl.w	r3, r2, r3
 800b270:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	43db      	mvns	r3, r3
 800b27e:	6939      	ldr	r1, [r7, #16]
 800b280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b284:	4013      	ands	r3, r2
 800b286:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3720      	adds	r7, #32
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
	...

0800b294 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b088      	sub	sp, #32
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	333c      	adds	r3, #60	; 0x3c
 800b2ac:	3304      	adds	r3, #4
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b2b2:	683b      	ldr	r3, [r7, #0]
 800b2b4:	015a      	lsls	r2, r3, #5
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d17b      	bne.n	800b3c2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	f003 0308 	and.w	r3, r3, #8
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d015      	beq.n	800b300 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b2d4:	697b      	ldr	r3, [r7, #20]
 800b2d6:	4a61      	ldr	r2, [pc, #388]	; (800b45c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	f240 80b9 	bls.w	800b450 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	f000 80b3 	beq.w	800b450 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	015a      	lsls	r2, r3, #5
 800b2ee:	69bb      	ldr	r3, [r7, #24]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2fc:	6093      	str	r3, [r2, #8]
 800b2fe:	e0a7      	b.n	800b450 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	f003 0320 	and.w	r3, r3, #32
 800b306:	2b00      	cmp	r3, #0
 800b308:	d009      	beq.n	800b31e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	015a      	lsls	r2, r3, #5
 800b30e:	69bb      	ldr	r3, [r7, #24]
 800b310:	4413      	add	r3, r2
 800b312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b316:	461a      	mov	r2, r3
 800b318:	2320      	movs	r3, #32
 800b31a:	6093      	str	r3, [r2, #8]
 800b31c:	e098      	b.n	800b450 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b324:	2b00      	cmp	r3, #0
 800b326:	f040 8093 	bne.w	800b450 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	4a4b      	ldr	r2, [pc, #300]	; (800b45c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d90f      	bls.n	800b352 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d00a      	beq.n	800b352 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	015a      	lsls	r2, r3, #5
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	4413      	add	r3, r2
 800b344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b348:	461a      	mov	r2, r3
 800b34a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b34e:	6093      	str	r3, [r2, #8]
 800b350:	e07e      	b.n	800b450 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800b352:	683a      	ldr	r2, [r7, #0]
 800b354:	4613      	mov	r3, r2
 800b356:	00db      	lsls	r3, r3, #3
 800b358:	4413      	add	r3, r2
 800b35a:	009b      	lsls	r3, r3, #2
 800b35c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	4413      	add	r3, r2
 800b364:	3304      	adds	r3, #4
 800b366:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	69da      	ldr	r2, [r3, #28]
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	0159      	lsls	r1, r3, #5
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	440b      	add	r3, r1
 800b374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b37e:	1ad2      	subs	r2, r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d114      	bne.n	800b3b4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	699b      	ldr	r3, [r3, #24]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d109      	bne.n	800b3a6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6818      	ldr	r0, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b39c:	461a      	mov	r2, r3
 800b39e:	2101      	movs	r1, #1
 800b3a0:	f006 f86a 	bl	8011478 <USB_EP0_OutStart>
 800b3a4:	e006      	b.n	800b3b4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	691a      	ldr	r2, [r3, #16]
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	441a      	add	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f00c f990 	bl	80176e0 <HAL_PCD_DataOutStageCallback>
 800b3c0:	e046      	b.n	800b450 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	4a26      	ldr	r2, [pc, #152]	; (800b460 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d124      	bne.n	800b414 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d00a      	beq.n	800b3ea <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	015a      	lsls	r2, r3, #5
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	4413      	add	r3, r2
 800b3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e0:	461a      	mov	r2, r3
 800b3e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b3e6:	6093      	str	r3, [r2, #8]
 800b3e8:	e032      	b.n	800b450 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	f003 0320 	and.w	r3, r3, #32
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d008      	beq.n	800b406 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b3f4:	683b      	ldr	r3, [r7, #0]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	69bb      	ldr	r3, [r7, #24]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b400:	461a      	mov	r2, r3
 800b402:	2320      	movs	r3, #32
 800b404:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b406:	683b      	ldr	r3, [r7, #0]
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	4619      	mov	r1, r3
 800b40c:	6878      	ldr	r0, [r7, #4]
 800b40e:	f00c f967 	bl	80176e0 <HAL_PCD_DataOutStageCallback>
 800b412:	e01d      	b.n	800b450 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d114      	bne.n	800b444 <PCD_EP_OutXfrComplete_int+0x1b0>
 800b41a:	6879      	ldr	r1, [r7, #4]
 800b41c:	683a      	ldr	r2, [r7, #0]
 800b41e:	4613      	mov	r3, r2
 800b420:	00db      	lsls	r3, r3, #3
 800b422:	4413      	add	r3, r2
 800b424:	009b      	lsls	r3, r3, #2
 800b426:	440b      	add	r3, r1
 800b428:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d108      	bne.n	800b444 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6818      	ldr	r0, [r3, #0]
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b43c:	461a      	mov	r2, r3
 800b43e:	2100      	movs	r1, #0
 800b440:	f006 f81a 	bl	8011478 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	b2db      	uxtb	r3, r3
 800b448:	4619      	mov	r1, r3
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f00c f948 	bl	80176e0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3720      	adds	r7, #32
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	4f54300a 	.word	0x4f54300a
 800b460:	4f54310a 	.word	0x4f54310a

0800b464 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b086      	sub	sp, #24
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]
 800b46c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	333c      	adds	r3, #60	; 0x3c
 800b47c:	3304      	adds	r3, #4
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48e:	689b      	ldr	r3, [r3, #8]
 800b490:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	4a15      	ldr	r2, [pc, #84]	; (800b4ec <PCD_EP_OutSetupPacket_int+0x88>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d90e      	bls.n	800b4b8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d009      	beq.n	800b4b8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4b6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b4b8:	6878      	ldr	r0, [r7, #4]
 800b4ba:	f00c f8ff 	bl	80176bc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	4a0a      	ldr	r2, [pc, #40]	; (800b4ec <PCD_EP_OutSetupPacket_int+0x88>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d90c      	bls.n	800b4e0 <PCD_EP_OutSetupPacket_int+0x7c>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	691b      	ldr	r3, [r3, #16]
 800b4ca:	2b01      	cmp	r3, #1
 800b4cc:	d108      	bne.n	800b4e0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b4d8:	461a      	mov	r2, r3
 800b4da:	2101      	movs	r1, #1
 800b4dc:	f005 ffcc 	bl	8011478 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	4f54300a 	.word	0x4f54300a

0800b4f0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	70fb      	strb	r3, [r7, #3]
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b506:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800b508:	78fb      	ldrb	r3, [r7, #3]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d107      	bne.n	800b51e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b50e:	883b      	ldrh	r3, [r7, #0]
 800b510:	0419      	lsls	r1, r3, #16
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	68ba      	ldr	r2, [r7, #8]
 800b518:	430a      	orrs	r2, r1
 800b51a:	629a      	str	r2, [r3, #40]	; 0x28
 800b51c:	e028      	b.n	800b570 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b524:	0c1b      	lsrs	r3, r3, #16
 800b526:	68ba      	ldr	r2, [r7, #8]
 800b528:	4413      	add	r3, r2
 800b52a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b52c:	2300      	movs	r3, #0
 800b52e:	73fb      	strb	r3, [r7, #15]
 800b530:	e00d      	b.n	800b54e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681a      	ldr	r2, [r3, #0]
 800b536:	7bfb      	ldrb	r3, [r7, #15]
 800b538:	3340      	adds	r3, #64	; 0x40
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	4413      	add	r3, r2
 800b53e:	685b      	ldr	r3, [r3, #4]
 800b540:	0c1b      	lsrs	r3, r3, #16
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	4413      	add	r3, r2
 800b546:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800b548:	7bfb      	ldrb	r3, [r7, #15]
 800b54a:	3301      	adds	r3, #1
 800b54c:	73fb      	strb	r3, [r7, #15]
 800b54e:	7bfa      	ldrb	r2, [r7, #15]
 800b550:	78fb      	ldrb	r3, [r7, #3]
 800b552:	3b01      	subs	r3, #1
 800b554:	429a      	cmp	r2, r3
 800b556:	d3ec      	bcc.n	800b532 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b558:	883b      	ldrh	r3, [r7, #0]
 800b55a:	0418      	lsls	r0, r3, #16
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6819      	ldr	r1, [r3, #0]
 800b560:	78fb      	ldrb	r3, [r7, #3]
 800b562:	3b01      	subs	r3, #1
 800b564:	68ba      	ldr	r2, [r7, #8]
 800b566:	4302      	orrs	r2, r0
 800b568:	3340      	adds	r3, #64	; 0x40
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	440b      	add	r3, r1
 800b56e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr

0800b57e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b57e:	b480      	push	{r7}
 800b580:	b083      	sub	sp, #12
 800b582:	af00      	add	r7, sp, #0
 800b584:	6078      	str	r0, [r7, #4]
 800b586:	460b      	mov	r3, r1
 800b588:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	887a      	ldrh	r2, [r7, #2]
 800b590:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800b592:	2300      	movs	r3, #0
}
 800b594:	4618      	mov	r0, r3
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b5a0:	b480      	push	{r7}
 800b5a2:	b085      	sub	sp, #20
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	699b      	ldr	r3, [r3, #24]
 800b5c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5d2:	f043 0303 	orr.w	r3, r3, #3
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b5da:	2300      	movs	r3, #0
}
 800b5dc:	4618      	mov	r0, r3
 800b5de:	3714      	adds	r7, #20
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b082      	sub	sp, #8
 800b5ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	603b      	str	r3, [r7, #0]
 800b5f6:	4b20      	ldr	r3, [pc, #128]	; (800b678 <HAL_PWREx_EnableOverDrive+0x90>)
 800b5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5fa:	4a1f      	ldr	r2, [pc, #124]	; (800b678 <HAL_PWREx_EnableOverDrive+0x90>)
 800b5fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b600:	6413      	str	r3, [r2, #64]	; 0x40
 800b602:	4b1d      	ldr	r3, [pc, #116]	; (800b678 <HAL_PWREx_EnableOverDrive+0x90>)
 800b604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b60a:	603b      	str	r3, [r7, #0]
 800b60c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b60e:	4b1b      	ldr	r3, [pc, #108]	; (800b67c <HAL_PWREx_EnableOverDrive+0x94>)
 800b610:	2201      	movs	r2, #1
 800b612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b614:	f7fb fba4 	bl	8006d60 <HAL_GetTick>
 800b618:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b61a:	e009      	b.n	800b630 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b61c:	f7fb fba0 	bl	8006d60 <HAL_GetTick>
 800b620:	4602      	mov	r2, r0
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	1ad3      	subs	r3, r2, r3
 800b626:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b62a:	d901      	bls.n	800b630 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b62c:	2303      	movs	r3, #3
 800b62e:	e01f      	b.n	800b670 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b630:	4b13      	ldr	r3, [pc, #76]	; (800b680 <HAL_PWREx_EnableOverDrive+0x98>)
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b63c:	d1ee      	bne.n	800b61c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b63e:	4b11      	ldr	r3, [pc, #68]	; (800b684 <HAL_PWREx_EnableOverDrive+0x9c>)
 800b640:	2201      	movs	r2, #1
 800b642:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b644:	f7fb fb8c 	bl	8006d60 <HAL_GetTick>
 800b648:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b64a:	e009      	b.n	800b660 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b64c:	f7fb fb88 	bl	8006d60 <HAL_GetTick>
 800b650:	4602      	mov	r2, r0
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	1ad3      	subs	r3, r2, r3
 800b656:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b65a:	d901      	bls.n	800b660 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e007      	b.n	800b670 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b660:	4b07      	ldr	r3, [pc, #28]	; (800b680 <HAL_PWREx_EnableOverDrive+0x98>)
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b66c:	d1ee      	bne.n	800b64c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b66e:	2300      	movs	r3, #0
}
 800b670:	4618      	mov	r0, r3
 800b672:	3708      	adds	r7, #8
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	40023800 	.word	0x40023800
 800b67c:	420e0040 	.word	0x420e0040
 800b680:	40007000 	.word	0x40007000
 800b684:	420e0044 	.word	0x420e0044

0800b688 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b084      	sub	sp, #16
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d101      	bne.n	800b69c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b698:	2301      	movs	r3, #1
 800b69a:	e0cc      	b.n	800b836 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b69c:	4b68      	ldr	r3, [pc, #416]	; (800b840 <HAL_RCC_ClockConfig+0x1b8>)
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	f003 030f 	and.w	r3, r3, #15
 800b6a4:	683a      	ldr	r2, [r7, #0]
 800b6a6:	429a      	cmp	r2, r3
 800b6a8:	d90c      	bls.n	800b6c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6aa:	4b65      	ldr	r3, [pc, #404]	; (800b840 <HAL_RCC_ClockConfig+0x1b8>)
 800b6ac:	683a      	ldr	r2, [r7, #0]
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6b2:	4b63      	ldr	r3, [pc, #396]	; (800b840 <HAL_RCC_ClockConfig+0x1b8>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	f003 030f 	and.w	r3, r3, #15
 800b6ba:	683a      	ldr	r2, [r7, #0]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d001      	beq.n	800b6c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e0b8      	b.n	800b836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	f003 0302 	and.w	r3, r3, #2
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d020      	beq.n	800b712 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f003 0304 	and.w	r3, r3, #4
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d005      	beq.n	800b6e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b6dc:	4b59      	ldr	r3, [pc, #356]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b6de:	689b      	ldr	r3, [r3, #8]
 800b6e0:	4a58      	ldr	r2, [pc, #352]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b6e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b6e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	f003 0308 	and.w	r3, r3, #8
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d005      	beq.n	800b700 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b6f4:	4b53      	ldr	r3, [pc, #332]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b6f6:	689b      	ldr	r3, [r3, #8]
 800b6f8:	4a52      	ldr	r2, [pc, #328]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b6fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b6fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b700:	4b50      	ldr	r3, [pc, #320]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b702:	689b      	ldr	r3, [r3, #8]
 800b704:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	494d      	ldr	r1, [pc, #308]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b70e:	4313      	orrs	r3, r2
 800b710:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 0301 	and.w	r3, r3, #1
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d044      	beq.n	800b7a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d107      	bne.n	800b736 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b726:	4b47      	ldr	r3, [pc, #284]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d119      	bne.n	800b766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b732:	2301      	movs	r3, #1
 800b734:	e07f      	b.n	800b836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	2b02      	cmp	r3, #2
 800b73c:	d003      	beq.n	800b746 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b742:	2b03      	cmp	r3, #3
 800b744:	d107      	bne.n	800b756 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b746:	4b3f      	ldr	r3, [pc, #252]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d109      	bne.n	800b766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b752:	2301      	movs	r3, #1
 800b754:	e06f      	b.n	800b836 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b756:	4b3b      	ldr	r3, [pc, #236]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f003 0302 	and.w	r3, r3, #2
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d101      	bne.n	800b766 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b762:	2301      	movs	r3, #1
 800b764:	e067      	b.n	800b836 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b766:	4b37      	ldr	r3, [pc, #220]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	f023 0203 	bic.w	r2, r3, #3
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	4934      	ldr	r1, [pc, #208]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b774:	4313      	orrs	r3, r2
 800b776:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b778:	f7fb faf2 	bl	8006d60 <HAL_GetTick>
 800b77c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b77e:	e00a      	b.n	800b796 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b780:	f7fb faee 	bl	8006d60 <HAL_GetTick>
 800b784:	4602      	mov	r2, r0
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b78e:	4293      	cmp	r3, r2
 800b790:	d901      	bls.n	800b796 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b792:	2303      	movs	r3, #3
 800b794:	e04f      	b.n	800b836 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b796:	4b2b      	ldr	r3, [pc, #172]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	f003 020c 	and.w	r2, r3, #12
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d1eb      	bne.n	800b780 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b7a8:	4b25      	ldr	r3, [pc, #148]	; (800b840 <HAL_RCC_ClockConfig+0x1b8>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f003 030f 	and.w	r3, r3, #15
 800b7b0:	683a      	ldr	r2, [r7, #0]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d20c      	bcs.n	800b7d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7b6:	4b22      	ldr	r3, [pc, #136]	; (800b840 <HAL_RCC_ClockConfig+0x1b8>)
 800b7b8:	683a      	ldr	r2, [r7, #0]
 800b7ba:	b2d2      	uxtb	r2, r2
 800b7bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7be:	4b20      	ldr	r3, [pc, #128]	; (800b840 <HAL_RCC_ClockConfig+0x1b8>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f003 030f 	and.w	r3, r3, #15
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d001      	beq.n	800b7d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e032      	b.n	800b836 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 0304 	and.w	r3, r3, #4
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d008      	beq.n	800b7ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b7dc:	4b19      	ldr	r3, [pc, #100]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b7de:	689b      	ldr	r3, [r3, #8]
 800b7e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	68db      	ldr	r3, [r3, #12]
 800b7e8:	4916      	ldr	r1, [pc, #88]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b7ea:	4313      	orrs	r3, r2
 800b7ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f003 0308 	and.w	r3, r3, #8
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d009      	beq.n	800b80e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b7fa:	4b12      	ldr	r3, [pc, #72]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b7fc:	689b      	ldr	r3, [r3, #8]
 800b7fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	00db      	lsls	r3, r3, #3
 800b808:	490e      	ldr	r1, [pc, #56]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b80a:	4313      	orrs	r3, r2
 800b80c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b80e:	f000 fb6b 	bl	800bee8 <HAL_RCC_GetSysClockFreq>
 800b812:	4602      	mov	r2, r0
 800b814:	4b0b      	ldr	r3, [pc, #44]	; (800b844 <HAL_RCC_ClockConfig+0x1bc>)
 800b816:	689b      	ldr	r3, [r3, #8]
 800b818:	091b      	lsrs	r3, r3, #4
 800b81a:	f003 030f 	and.w	r3, r3, #15
 800b81e:	490a      	ldr	r1, [pc, #40]	; (800b848 <HAL_RCC_ClockConfig+0x1c0>)
 800b820:	5ccb      	ldrb	r3, [r1, r3]
 800b822:	fa22 f303 	lsr.w	r3, r2, r3
 800b826:	4a09      	ldr	r2, [pc, #36]	; (800b84c <HAL_RCC_ClockConfig+0x1c4>)
 800b828:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800b82a:	4b09      	ldr	r3, [pc, #36]	; (800b850 <HAL_RCC_ClockConfig+0x1c8>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fb fa52 	bl	8006cd8 <HAL_InitTick>

  return HAL_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	40023c00 	.word	0x40023c00
 800b844:	40023800 	.word	0x40023800
 800b848:	08018704 	.word	0x08018704
 800b84c:	20000000 	.word	0x20000000
 800b850:	20000004 	.word	0x20000004

0800b854 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b854:	b480      	push	{r7}
 800b856:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b858:	4b03      	ldr	r3, [pc, #12]	; (800b868 <HAL_RCC_GetHCLKFreq+0x14>)
 800b85a:	681b      	ldr	r3, [r3, #0]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	46bd      	mov	sp, r7
 800b860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	20000000 	.word	0x20000000

0800b86c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b86c:	b580      	push	{r7, lr}
 800b86e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b870:	f7ff fff0 	bl	800b854 <HAL_RCC_GetHCLKFreq>
 800b874:	4602      	mov	r2, r0
 800b876:	4b05      	ldr	r3, [pc, #20]	; (800b88c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b878:	689b      	ldr	r3, [r3, #8]
 800b87a:	0a9b      	lsrs	r3, r3, #10
 800b87c:	f003 0307 	and.w	r3, r3, #7
 800b880:	4903      	ldr	r1, [pc, #12]	; (800b890 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b882:	5ccb      	ldrb	r3, [r1, r3]
 800b884:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b888:	4618      	mov	r0, r3
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	40023800 	.word	0x40023800
 800b890:	08018714 	.word	0x08018714

0800b894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b08c      	sub	sp, #48	; 0x30
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b89c:	2300      	movs	r3, #0
 800b89e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	f003 0301 	and.w	r3, r3, #1
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d010      	beq.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800b8cc:	4b6f      	ldr	r3, [pc, #444]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b8ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8d2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8da:	496c      	ldr	r1, [pc, #432]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b8dc:	4313      	orrs	r3, r2
 800b8de:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d101      	bne.n	800b8ee <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f003 0302 	and.w	r3, r3, #2
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d010      	beq.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800b8fa:	4b64      	ldr	r3, [pc, #400]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b8fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b900:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b908:	4960      	ldr	r1, [pc, #384]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b90a:	4313      	orrs	r3, r2
 800b90c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d101      	bne.n	800b91c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800b918:	2301      	movs	r3, #1
 800b91a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	f003 0304 	and.w	r3, r3, #4
 800b924:	2b00      	cmp	r3, #0
 800b926:	d017      	beq.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b928:	4b58      	ldr	r3, [pc, #352]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b92a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b92e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b936:	4955      	ldr	r1, [pc, #340]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b938:	4313      	orrs	r3, r2
 800b93a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b946:	d101      	bne.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800b948:	2301      	movs	r3, #1
 800b94a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b950:	2b00      	cmp	r3, #0
 800b952:	d101      	bne.n	800b958 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 800b954:	2301      	movs	r3, #1
 800b956:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 0308 	and.w	r3, r3, #8
 800b960:	2b00      	cmp	r3, #0
 800b962:	d017      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b964:	4b49      	ldr	r3, [pc, #292]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b966:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b96a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b972:	4946      	ldr	r1, [pc, #280]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b974:	4313      	orrs	r3, r2
 800b976:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b982:	d101      	bne.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800b984:	2301      	movs	r3, #1
 800b986:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d101      	bne.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800b990:	2301      	movs	r3, #1
 800b992:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	f003 0320 	and.w	r3, r3, #32
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	f000 808a 	beq.w	800bab6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	60bb      	str	r3, [r7, #8]
 800b9a6:	4b39      	ldr	r3, [pc, #228]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9aa:	4a38      	ldr	r2, [pc, #224]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9b0:	6413      	str	r3, [r2, #64]	; 0x40
 800b9b2:	4b36      	ldr	r3, [pc, #216]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9ba:	60bb      	str	r3, [r7, #8]
 800b9bc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b9be:	4b34      	ldr	r3, [pc, #208]	; (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a33      	ldr	r2, [pc, #204]	; (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b9c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b9c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b9ca:	f7fb f9c9 	bl	8006d60 <HAL_GetTick>
 800b9ce:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b9d0:	e008      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b9d2:	f7fb f9c5 	bl	8006d60 <HAL_GetTick>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9da:	1ad3      	subs	r3, r2, r3
 800b9dc:	2b02      	cmp	r3, #2
 800b9de:	d901      	bls.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	e278      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b9e4:	4b2a      	ldr	r3, [pc, #168]	; (800ba90 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d0f0      	beq.n	800b9d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b9f0:	4b26      	ldr	r3, [pc, #152]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800b9f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b9f8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b9fa:	6a3b      	ldr	r3, [r7, #32]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d02f      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba08:	6a3a      	ldr	r2, [r7, #32]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d028      	beq.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ba0e:	4b1f      	ldr	r3, [pc, #124]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba16:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ba18:	4b1e      	ldr	r3, [pc, #120]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ba1e:	4b1d      	ldr	r3, [pc, #116]	; (800ba94 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800ba20:	2200      	movs	r2, #0
 800ba22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800ba24:	4a19      	ldr	r2, [pc, #100]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba26:	6a3b      	ldr	r3, [r7, #32]
 800ba28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ba2a:	4b18      	ldr	r3, [pc, #96]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba2e:	f003 0301 	and.w	r3, r3, #1
 800ba32:	2b01      	cmp	r3, #1
 800ba34:	d114      	bne.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800ba36:	f7fb f993 	bl	8006d60 <HAL_GetTick>
 800ba3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba3c:	e00a      	b.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba3e:	f7fb f98f 	bl	8006d60 <HAL_GetTick>
 800ba42:	4602      	mov	r2, r0
 800ba44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d901      	bls.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800ba50:	2303      	movs	r3, #3
 800ba52:	e240      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba54:	4b0d      	ldr	r3, [pc, #52]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba58:	f003 0302 	and.w	r3, r3, #2
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d0ee      	beq.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba6c:	d114      	bne.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800ba6e:	4b07      	ldr	r3, [pc, #28]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ba7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba82:	4902      	ldr	r1, [pc, #8]	; (800ba8c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800ba84:	4313      	orrs	r3, r2
 800ba86:	608b      	str	r3, [r1, #8]
 800ba88:	e00c      	b.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800ba8a:	bf00      	nop
 800ba8c:	40023800 	.word	0x40023800
 800ba90:	40007000 	.word	0x40007000
 800ba94:	42470e40 	.word	0x42470e40
 800ba98:	4b4a      	ldr	r3, [pc, #296]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	4a49      	ldr	r2, [pc, #292]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800ba9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800baa2:	6093      	str	r3, [r2, #8]
 800baa4:	4b47      	ldr	r3, [pc, #284]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800baa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bab0:	4944      	ldr	r1, [pc, #272]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bab2:	4313      	orrs	r3, r2
 800bab4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f003 0310 	and.w	r3, r3, #16
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d004      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 800bac8:	4b3f      	ldr	r3, [pc, #252]	; (800bbc8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800baca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00a      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800bad8:	4b3a      	ldr	r3, [pc, #232]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bade:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bae6:	4937      	ldr	r1, [pc, #220]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bae8:	4313      	orrs	r3, r2
 800baea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d00a      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bafa:	4b32      	ldr	r3, [pc, #200]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bafc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb00:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb08:	492e      	ldr	r1, [pc, #184]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb0a:	4313      	orrs	r3, r2
 800bb0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d011      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bb1c:	4b29      	ldr	r3, [pc, #164]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb22:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2a:	4926      	ldr	r1, [pc, #152]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb3a:	d101      	bne.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d00a      	beq.n	800bb62 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800bb4c:	4b1d      	ldr	r3, [pc, #116]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb52:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb5a:	491a      	ldr	r1, [pc, #104]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d011      	beq.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800bb6e:	4b15      	ldr	r3, [pc, #84]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb74:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb7c:	4911      	ldr	r1, [pc, #68]	; (800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800bb7e:	4313      	orrs	r3, r2
 800bb80:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb8c:	d101      	bne.n	800bb92 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800bb8e:	2301      	movs	r3, #1
 800bb90:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800bb92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb94:	2b01      	cmp	r3, #1
 800bb96:	d005      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bba0:	f040 80ff 	bne.w	800bda2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800bba4:	4b09      	ldr	r3, [pc, #36]	; (800bbcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800bba6:	2200      	movs	r2, #0
 800bba8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bbaa:	f7fb f8d9 	bl	8006d60 <HAL_GetTick>
 800bbae:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bbb0:	e00e      	b.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bbb2:	f7fb f8d5 	bl	8006d60 <HAL_GetTick>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbba:	1ad3      	subs	r3, r2, r3
 800bbbc:	2b02      	cmp	r3, #2
 800bbbe:	d907      	bls.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bbc0:	2303      	movs	r3, #3
 800bbc2:	e188      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800bbc4:	40023800 	.word	0x40023800
 800bbc8:	424711e0 	.word	0x424711e0
 800bbcc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800bbd0:	4b7e      	ldr	r3, [pc, #504]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1ea      	bne.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f003 0301 	and.w	r3, r3, #1
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d003      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d009      	beq.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d028      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d124      	bne.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bc04:	4b71      	ldr	r3, [pc, #452]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bc06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc0a:	0c1b      	lsrs	r3, r3, #16
 800bc0c:	f003 0303 	and.w	r3, r3, #3
 800bc10:	3301      	adds	r3, #1
 800bc12:	005b      	lsls	r3, r3, #1
 800bc14:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800bc16:	4b6d      	ldr	r3, [pc, #436]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bc18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc1c:	0e1b      	lsrs	r3, r3, #24
 800bc1e:	f003 030f 	and.w	r3, r3, #15
 800bc22:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685a      	ldr	r2, [r3, #4]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	689b      	ldr	r3, [r3, #8]
 800bc2c:	019b      	lsls	r3, r3, #6
 800bc2e:	431a      	orrs	r2, r3
 800bc30:	69fb      	ldr	r3, [r7, #28]
 800bc32:	085b      	lsrs	r3, r3, #1
 800bc34:	3b01      	subs	r3, #1
 800bc36:	041b      	lsls	r3, r3, #16
 800bc38:	431a      	orrs	r2, r3
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	061b      	lsls	r3, r3, #24
 800bc3e:	431a      	orrs	r2, r3
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	695b      	ldr	r3, [r3, #20]
 800bc44:	071b      	lsls	r3, r3, #28
 800bc46:	4961      	ldr	r1, [pc, #388]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f003 0304 	and.w	r3, r3, #4
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d004      	beq.n	800bc64 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc62:	d00a      	beq.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d035      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc78:	d130      	bne.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bc7a:	4b54      	ldr	r3, [pc, #336]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bc7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc80:	0c1b      	lsrs	r3, r3, #16
 800bc82:	f003 0303 	and.w	r3, r3, #3
 800bc86:	3301      	adds	r3, #1
 800bc88:	005b      	lsls	r3, r3, #1
 800bc8a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bc8c:	4b4f      	ldr	r3, [pc, #316]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bc8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc92:	0f1b      	lsrs	r3, r3, #28
 800bc94:	f003 0307 	and.w	r3, r3, #7
 800bc98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	685a      	ldr	r2, [r3, #4]
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	689b      	ldr	r3, [r3, #8]
 800bca2:	019b      	lsls	r3, r3, #6
 800bca4:	431a      	orrs	r2, r3
 800bca6:	69fb      	ldr	r3, [r7, #28]
 800bca8:	085b      	lsrs	r3, r3, #1
 800bcaa:	3b01      	subs	r3, #1
 800bcac:	041b      	lsls	r3, r3, #16
 800bcae:	431a      	orrs	r2, r3
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	691b      	ldr	r3, [r3, #16]
 800bcb4:	061b      	lsls	r3, r3, #24
 800bcb6:	431a      	orrs	r2, r3
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	071b      	lsls	r3, r3, #28
 800bcbc:	4943      	ldr	r1, [pc, #268]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bcc4:	4b41      	ldr	r3, [pc, #260]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bcc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bcca:	f023 021f 	bic.w	r2, r3, #31
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	493d      	ldr	r1, [pc, #244]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d029      	beq.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bcf0:	d124      	bne.n	800bd3c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800bcf2:	4b36      	ldr	r3, [pc, #216]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bcf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcf8:	0c1b      	lsrs	r3, r3, #16
 800bcfa:	f003 0303 	and.w	r3, r3, #3
 800bcfe:	3301      	adds	r3, #1
 800bd00:	005b      	lsls	r3, r3, #1
 800bd02:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800bd04:	4b31      	ldr	r3, [pc, #196]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bd0a:	0f1b      	lsrs	r3, r3, #28
 800bd0c:	f003 0307 	and.w	r3, r3, #7
 800bd10:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	685a      	ldr	r2, [r3, #4]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	689b      	ldr	r3, [r3, #8]
 800bd1a:	019b      	lsls	r3, r3, #6
 800bd1c:	431a      	orrs	r2, r3
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	68db      	ldr	r3, [r3, #12]
 800bd22:	085b      	lsrs	r3, r3, #1
 800bd24:	3b01      	subs	r3, #1
 800bd26:	041b      	lsls	r3, r3, #16
 800bd28:	431a      	orrs	r2, r3
 800bd2a:	69bb      	ldr	r3, [r7, #24]
 800bd2c:	061b      	lsls	r3, r3, #24
 800bd2e:	431a      	orrs	r2, r3
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	071b      	lsls	r3, r3, #28
 800bd34:	4925      	ldr	r1, [pc, #148]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd36:	4313      	orrs	r3, r2
 800bd38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d016      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	685a      	ldr	r2, [r3, #4]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	689b      	ldr	r3, [r3, #8]
 800bd50:	019b      	lsls	r3, r3, #6
 800bd52:	431a      	orrs	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	085b      	lsrs	r3, r3, #1
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	041b      	lsls	r3, r3, #16
 800bd5e:	431a      	orrs	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	061b      	lsls	r3, r3, #24
 800bd66:	431a      	orrs	r2, r3
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	695b      	ldr	r3, [r3, #20]
 800bd6c:	071b      	lsls	r3, r3, #28
 800bd6e:	4917      	ldr	r1, [pc, #92]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd70:	4313      	orrs	r3, r2
 800bd72:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bd76:	4b16      	ldr	r3, [pc, #88]	; (800bdd0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800bd78:	2201      	movs	r2, #1
 800bd7a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bd7c:	f7fa fff0 	bl	8006d60 <HAL_GetTick>
 800bd80:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bd82:	e008      	b.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bd84:	f7fa ffec 	bl	8006d60 <HAL_GetTick>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	2b02      	cmp	r3, #2
 800bd90:	d901      	bls.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bd92:	2303      	movs	r3, #3
 800bd94:	e09f      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bd96:	4b0d      	ldr	r3, [pc, #52]	; (800bdcc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0f0      	beq.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800bda2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	f040 8095 	bne.w	800bed4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bdaa:	4b0a      	ldr	r3, [pc, #40]	; (800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800bdac:	2200      	movs	r2, #0
 800bdae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bdb0:	f7fa ffd6 	bl	8006d60 <HAL_GetTick>
 800bdb4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bdb6:	e00f      	b.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bdb8:	f7fa ffd2 	bl	8006d60 <HAL_GetTick>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	2b02      	cmp	r3, #2
 800bdc4:	d908      	bls.n	800bdd8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bdc6:	2303      	movs	r3, #3
 800bdc8:	e085      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800bdca:	bf00      	nop
 800bdcc:	40023800 	.word	0x40023800
 800bdd0:	42470068 	.word	0x42470068
 800bdd4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bdd8:	4b41      	ldr	r3, [pc, #260]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bde0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bde4:	d0e8      	beq.n	800bdb8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 0304 	and.w	r3, r3, #4
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d003      	beq.n	800bdfa <HAL_RCCEx_PeriphCLKConfig+0x566>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d009      	beq.n	800be0e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800be02:	2b00      	cmp	r3, #0
 800be04:	d02b      	beq.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d127      	bne.n	800be5e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800be0e:	4b34      	ldr	r3, [pc, #208]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800be10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be14:	0c1b      	lsrs	r3, r3, #16
 800be16:	f003 0303 	and.w	r3, r3, #3
 800be1a:	3301      	adds	r3, #1
 800be1c:	005b      	lsls	r3, r3, #1
 800be1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	699a      	ldr	r2, [r3, #24]
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	69db      	ldr	r3, [r3, #28]
 800be28:	019b      	lsls	r3, r3, #6
 800be2a:	431a      	orrs	r2, r3
 800be2c:	693b      	ldr	r3, [r7, #16]
 800be2e:	085b      	lsrs	r3, r3, #1
 800be30:	3b01      	subs	r3, #1
 800be32:	041b      	lsls	r3, r3, #16
 800be34:	431a      	orrs	r2, r3
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be3a:	061b      	lsls	r3, r3, #24
 800be3c:	4928      	ldr	r1, [pc, #160]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800be3e:	4313      	orrs	r3, r2
 800be40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800be44:	4b26      	ldr	r3, [pc, #152]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800be46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be4a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be52:	3b01      	subs	r3, #1
 800be54:	021b      	lsls	r3, r3, #8
 800be56:	4922      	ldr	r1, [pc, #136]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800be58:	4313      	orrs	r3, r2
 800be5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be66:	2b00      	cmp	r3, #0
 800be68:	d01d      	beq.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be72:	d118      	bne.n	800bea6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800be74:	4b1a      	ldr	r3, [pc, #104]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800be76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be7a:	0e1b      	lsrs	r3, r3, #24
 800be7c:	f003 030f 	and.w	r3, r3, #15
 800be80:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	699a      	ldr	r2, [r3, #24]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	69db      	ldr	r3, [r3, #28]
 800be8a:	019b      	lsls	r3, r3, #6
 800be8c:	431a      	orrs	r2, r3
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a1b      	ldr	r3, [r3, #32]
 800be92:	085b      	lsrs	r3, r3, #1
 800be94:	3b01      	subs	r3, #1
 800be96:	041b      	lsls	r3, r3, #16
 800be98:	431a      	orrs	r2, r3
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	061b      	lsls	r3, r3, #24
 800be9e:	4910      	ldr	r1, [pc, #64]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bea0:	4313      	orrs	r3, r2
 800bea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800bea6:	4b0f      	ldr	r3, [pc, #60]	; (800bee4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800bea8:	2201      	movs	r2, #1
 800beaa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800beac:	f7fa ff58 	bl	8006d60 <HAL_GetTick>
 800beb0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800beb2:	e008      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800beb4:	f7fa ff54 	bl	8006d60 <HAL_GetTick>
 800beb8:	4602      	mov	r2, r0
 800beba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bebc:	1ad3      	subs	r3, r2, r3
 800bebe:	2b02      	cmp	r3, #2
 800bec0:	d901      	bls.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bec2:	2303      	movs	r3, #3
 800bec4:	e007      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800bec6:	4b06      	ldr	r3, [pc, #24]	; (800bee0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed2:	d1ef      	bne.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3730      	adds	r7, #48	; 0x30
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	40023800 	.word	0x40023800
 800bee4:	42470070 	.word	0x42470070

0800bee8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bee8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800beec:	b0ae      	sub	sp, #184	; 0xb8
 800beee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800bef0:	2300      	movs	r3, #0
 800bef2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800bef6:	2300      	movs	r3, #0
 800bef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800befc:	2300      	movs	r3, #0
 800befe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800bf02:	2300      	movs	r3, #0
 800bf04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bf0e:	4bcb      	ldr	r3, [pc, #812]	; (800c23c <HAL_RCC_GetSysClockFreq+0x354>)
 800bf10:	689b      	ldr	r3, [r3, #8]
 800bf12:	f003 030c 	and.w	r3, r3, #12
 800bf16:	2b0c      	cmp	r3, #12
 800bf18:	f200 8206 	bhi.w	800c328 <HAL_RCC_GetSysClockFreq+0x440>
 800bf1c:	a201      	add	r2, pc, #4	; (adr r2, 800bf24 <HAL_RCC_GetSysClockFreq+0x3c>)
 800bf1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf22:	bf00      	nop
 800bf24:	0800bf59 	.word	0x0800bf59
 800bf28:	0800c329 	.word	0x0800c329
 800bf2c:	0800c329 	.word	0x0800c329
 800bf30:	0800c329 	.word	0x0800c329
 800bf34:	0800bf61 	.word	0x0800bf61
 800bf38:	0800c329 	.word	0x0800c329
 800bf3c:	0800c329 	.word	0x0800c329
 800bf40:	0800c329 	.word	0x0800c329
 800bf44:	0800bf69 	.word	0x0800bf69
 800bf48:	0800c329 	.word	0x0800c329
 800bf4c:	0800c329 	.word	0x0800c329
 800bf50:	0800c329 	.word	0x0800c329
 800bf54:	0800c159 	.word	0x0800c159
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bf58:	4bb9      	ldr	r3, [pc, #740]	; (800c240 <HAL_RCC_GetSysClockFreq+0x358>)
 800bf5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800bf5e:	e1e7      	b.n	800c330 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bf60:	4bb8      	ldr	r3, [pc, #736]	; (800c244 <HAL_RCC_GetSysClockFreq+0x35c>)
 800bf62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800bf66:	e1e3      	b.n	800c330 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bf68:	4bb4      	ldr	r3, [pc, #720]	; (800c23c <HAL_RCC_GetSysClockFreq+0x354>)
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bf70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bf74:	4bb1      	ldr	r3, [pc, #708]	; (800c23c <HAL_RCC_GetSysClockFreq+0x354>)
 800bf76:	685b      	ldr	r3, [r3, #4]
 800bf78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d071      	beq.n	800c064 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf80:	4bae      	ldr	r3, [pc, #696]	; (800c23c <HAL_RCC_GetSysClockFreq+0x354>)
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	099b      	lsrs	r3, r3, #6
 800bf86:	2200      	movs	r2, #0
 800bf88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bf8c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800bf90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bfa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bfa6:	4622      	mov	r2, r4
 800bfa8:	462b      	mov	r3, r5
 800bfaa:	f04f 0000 	mov.w	r0, #0
 800bfae:	f04f 0100 	mov.w	r1, #0
 800bfb2:	0159      	lsls	r1, r3, #5
 800bfb4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800bfb8:	0150      	lsls	r0, r2, #5
 800bfba:	4602      	mov	r2, r0
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4621      	mov	r1, r4
 800bfc0:	1a51      	subs	r1, r2, r1
 800bfc2:	6439      	str	r1, [r7, #64]	; 0x40
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	eb63 0301 	sbc.w	r3, r3, r1
 800bfca:	647b      	str	r3, [r7, #68]	; 0x44
 800bfcc:	f04f 0200 	mov.w	r2, #0
 800bfd0:	f04f 0300 	mov.w	r3, #0
 800bfd4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800bfd8:	4649      	mov	r1, r9
 800bfda:	018b      	lsls	r3, r1, #6
 800bfdc:	4641      	mov	r1, r8
 800bfde:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800bfe2:	4641      	mov	r1, r8
 800bfe4:	018a      	lsls	r2, r1, #6
 800bfe6:	4641      	mov	r1, r8
 800bfe8:	1a51      	subs	r1, r2, r1
 800bfea:	63b9      	str	r1, [r7, #56]	; 0x38
 800bfec:	4649      	mov	r1, r9
 800bfee:	eb63 0301 	sbc.w	r3, r3, r1
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff4:	f04f 0200 	mov.w	r2, #0
 800bff8:	f04f 0300 	mov.w	r3, #0
 800bffc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800c000:	4649      	mov	r1, r9
 800c002:	00cb      	lsls	r3, r1, #3
 800c004:	4641      	mov	r1, r8
 800c006:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c00a:	4641      	mov	r1, r8
 800c00c:	00ca      	lsls	r2, r1, #3
 800c00e:	4610      	mov	r0, r2
 800c010:	4619      	mov	r1, r3
 800c012:	4603      	mov	r3, r0
 800c014:	4622      	mov	r2, r4
 800c016:	189b      	adds	r3, r3, r2
 800c018:	633b      	str	r3, [r7, #48]	; 0x30
 800c01a:	462b      	mov	r3, r5
 800c01c:	460a      	mov	r2, r1
 800c01e:	eb42 0303 	adc.w	r3, r2, r3
 800c022:	637b      	str	r3, [r7, #52]	; 0x34
 800c024:	f04f 0200 	mov.w	r2, #0
 800c028:	f04f 0300 	mov.w	r3, #0
 800c02c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c030:	4629      	mov	r1, r5
 800c032:	024b      	lsls	r3, r1, #9
 800c034:	4621      	mov	r1, r4
 800c036:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c03a:	4621      	mov	r1, r4
 800c03c:	024a      	lsls	r2, r1, #9
 800c03e:	4610      	mov	r0, r2
 800c040:	4619      	mov	r1, r3
 800c042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c046:	2200      	movs	r2, #0
 800c048:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c04c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c050:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c054:	f7f4 f92c 	bl	80002b0 <__aeabi_uldivmod>
 800c058:	4602      	mov	r2, r0
 800c05a:	460b      	mov	r3, r1
 800c05c:	4613      	mov	r3, r2
 800c05e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c062:	e067      	b.n	800c134 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c064:	4b75      	ldr	r3, [pc, #468]	; (800c23c <HAL_RCC_GetSysClockFreq+0x354>)
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	099b      	lsrs	r3, r3, #6
 800c06a:	2200      	movs	r2, #0
 800c06c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c070:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c074:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c07c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c07e:	2300      	movs	r3, #0
 800c080:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c082:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c086:	4622      	mov	r2, r4
 800c088:	462b      	mov	r3, r5
 800c08a:	f04f 0000 	mov.w	r0, #0
 800c08e:	f04f 0100 	mov.w	r1, #0
 800c092:	0159      	lsls	r1, r3, #5
 800c094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c098:	0150      	lsls	r0, r2, #5
 800c09a:	4602      	mov	r2, r0
 800c09c:	460b      	mov	r3, r1
 800c09e:	4621      	mov	r1, r4
 800c0a0:	1a51      	subs	r1, r2, r1
 800c0a2:	62b9      	str	r1, [r7, #40]	; 0x28
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	eb63 0301 	sbc.w	r3, r3, r1
 800c0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c0ac:	f04f 0200 	mov.w	r2, #0
 800c0b0:	f04f 0300 	mov.w	r3, #0
 800c0b4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800c0b8:	4649      	mov	r1, r9
 800c0ba:	018b      	lsls	r3, r1, #6
 800c0bc:	4641      	mov	r1, r8
 800c0be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c0c2:	4641      	mov	r1, r8
 800c0c4:	018a      	lsls	r2, r1, #6
 800c0c6:	4641      	mov	r1, r8
 800c0c8:	ebb2 0a01 	subs.w	sl, r2, r1
 800c0cc:	4649      	mov	r1, r9
 800c0ce:	eb63 0b01 	sbc.w	fp, r3, r1
 800c0d2:	f04f 0200 	mov.w	r2, #0
 800c0d6:	f04f 0300 	mov.w	r3, #0
 800c0da:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c0de:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c0e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c0e6:	4692      	mov	sl, r2
 800c0e8:	469b      	mov	fp, r3
 800c0ea:	4623      	mov	r3, r4
 800c0ec:	eb1a 0303 	adds.w	r3, sl, r3
 800c0f0:	623b      	str	r3, [r7, #32]
 800c0f2:	462b      	mov	r3, r5
 800c0f4:	eb4b 0303 	adc.w	r3, fp, r3
 800c0f8:	627b      	str	r3, [r7, #36]	; 0x24
 800c0fa:	f04f 0200 	mov.w	r2, #0
 800c0fe:	f04f 0300 	mov.w	r3, #0
 800c102:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c106:	4629      	mov	r1, r5
 800c108:	028b      	lsls	r3, r1, #10
 800c10a:	4621      	mov	r1, r4
 800c10c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c110:	4621      	mov	r1, r4
 800c112:	028a      	lsls	r2, r1, #10
 800c114:	4610      	mov	r0, r2
 800c116:	4619      	mov	r1, r3
 800c118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c11c:	2200      	movs	r2, #0
 800c11e:	673b      	str	r3, [r7, #112]	; 0x70
 800c120:	677a      	str	r2, [r7, #116]	; 0x74
 800c122:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c126:	f7f4 f8c3 	bl	80002b0 <__aeabi_uldivmod>
 800c12a:	4602      	mov	r2, r0
 800c12c:	460b      	mov	r3, r1
 800c12e:	4613      	mov	r3, r2
 800c130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c134:	4b41      	ldr	r3, [pc, #260]	; (800c23c <HAL_RCC_GetSysClockFreq+0x354>)
 800c136:	685b      	ldr	r3, [r3, #4]
 800c138:	0c1b      	lsrs	r3, r3, #16
 800c13a:	f003 0303 	and.w	r3, r3, #3
 800c13e:	3301      	adds	r3, #1
 800c140:	005b      	lsls	r3, r3, #1
 800c142:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800c146:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c14a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c152:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c156:	e0eb      	b.n	800c330 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c158:	4b38      	ldr	r3, [pc, #224]	; (800c23c <HAL_RCC_GetSysClockFreq+0x354>)
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c164:	4b35      	ldr	r3, [pc, #212]	; (800c23c <HAL_RCC_GetSysClockFreq+0x354>)
 800c166:	685b      	ldr	r3, [r3, #4]
 800c168:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d06b      	beq.n	800c248 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c170:	4b32      	ldr	r3, [pc, #200]	; (800c23c <HAL_RCC_GetSysClockFreq+0x354>)
 800c172:	685b      	ldr	r3, [r3, #4]
 800c174:	099b      	lsrs	r3, r3, #6
 800c176:	2200      	movs	r2, #0
 800c178:	66bb      	str	r3, [r7, #104]	; 0x68
 800c17a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c17c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c17e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c182:	663b      	str	r3, [r7, #96]	; 0x60
 800c184:	2300      	movs	r3, #0
 800c186:	667b      	str	r3, [r7, #100]	; 0x64
 800c188:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c18c:	4622      	mov	r2, r4
 800c18e:	462b      	mov	r3, r5
 800c190:	f04f 0000 	mov.w	r0, #0
 800c194:	f04f 0100 	mov.w	r1, #0
 800c198:	0159      	lsls	r1, r3, #5
 800c19a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c19e:	0150      	lsls	r0, r2, #5
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4621      	mov	r1, r4
 800c1a6:	1a51      	subs	r1, r2, r1
 800c1a8:	61b9      	str	r1, [r7, #24]
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	eb63 0301 	sbc.w	r3, r3, r1
 800c1b0:	61fb      	str	r3, [r7, #28]
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	f04f 0300 	mov.w	r3, #0
 800c1ba:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c1be:	4659      	mov	r1, fp
 800c1c0:	018b      	lsls	r3, r1, #6
 800c1c2:	4651      	mov	r1, sl
 800c1c4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c1c8:	4651      	mov	r1, sl
 800c1ca:	018a      	lsls	r2, r1, #6
 800c1cc:	4651      	mov	r1, sl
 800c1ce:	ebb2 0801 	subs.w	r8, r2, r1
 800c1d2:	4659      	mov	r1, fp
 800c1d4:	eb63 0901 	sbc.w	r9, r3, r1
 800c1d8:	f04f 0200 	mov.w	r2, #0
 800c1dc:	f04f 0300 	mov.w	r3, #0
 800c1e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c1e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c1e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c1ec:	4690      	mov	r8, r2
 800c1ee:	4699      	mov	r9, r3
 800c1f0:	4623      	mov	r3, r4
 800c1f2:	eb18 0303 	adds.w	r3, r8, r3
 800c1f6:	613b      	str	r3, [r7, #16]
 800c1f8:	462b      	mov	r3, r5
 800c1fa:	eb49 0303 	adc.w	r3, r9, r3
 800c1fe:	617b      	str	r3, [r7, #20]
 800c200:	f04f 0200 	mov.w	r2, #0
 800c204:	f04f 0300 	mov.w	r3, #0
 800c208:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c20c:	4629      	mov	r1, r5
 800c20e:	024b      	lsls	r3, r1, #9
 800c210:	4621      	mov	r1, r4
 800c212:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c216:	4621      	mov	r1, r4
 800c218:	024a      	lsls	r2, r1, #9
 800c21a:	4610      	mov	r0, r2
 800c21c:	4619      	mov	r1, r3
 800c21e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c222:	2200      	movs	r2, #0
 800c224:	65bb      	str	r3, [r7, #88]	; 0x58
 800c226:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c228:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c22c:	f7f4 f840 	bl	80002b0 <__aeabi_uldivmod>
 800c230:	4602      	mov	r2, r0
 800c232:	460b      	mov	r3, r1
 800c234:	4613      	mov	r3, r2
 800c236:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c23a:	e065      	b.n	800c308 <HAL_RCC_GetSysClockFreq+0x420>
 800c23c:	40023800 	.word	0x40023800
 800c240:	00f42400 	.word	0x00f42400
 800c244:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c248:	4b3d      	ldr	r3, [pc, #244]	; (800c340 <HAL_RCC_GetSysClockFreq+0x458>)
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	099b      	lsrs	r3, r3, #6
 800c24e:	2200      	movs	r2, #0
 800c250:	4618      	mov	r0, r3
 800c252:	4611      	mov	r1, r2
 800c254:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c258:	653b      	str	r3, [r7, #80]	; 0x50
 800c25a:	2300      	movs	r3, #0
 800c25c:	657b      	str	r3, [r7, #84]	; 0x54
 800c25e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800c262:	4642      	mov	r2, r8
 800c264:	464b      	mov	r3, r9
 800c266:	f04f 0000 	mov.w	r0, #0
 800c26a:	f04f 0100 	mov.w	r1, #0
 800c26e:	0159      	lsls	r1, r3, #5
 800c270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c274:	0150      	lsls	r0, r2, #5
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	4641      	mov	r1, r8
 800c27c:	1a51      	subs	r1, r2, r1
 800c27e:	60b9      	str	r1, [r7, #8]
 800c280:	4649      	mov	r1, r9
 800c282:	eb63 0301 	sbc.w	r3, r3, r1
 800c286:	60fb      	str	r3, [r7, #12]
 800c288:	f04f 0200 	mov.w	r2, #0
 800c28c:	f04f 0300 	mov.w	r3, #0
 800c290:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c294:	4659      	mov	r1, fp
 800c296:	018b      	lsls	r3, r1, #6
 800c298:	4651      	mov	r1, sl
 800c29a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c29e:	4651      	mov	r1, sl
 800c2a0:	018a      	lsls	r2, r1, #6
 800c2a2:	4651      	mov	r1, sl
 800c2a4:	1a54      	subs	r4, r2, r1
 800c2a6:	4659      	mov	r1, fp
 800c2a8:	eb63 0501 	sbc.w	r5, r3, r1
 800c2ac:	f04f 0200 	mov.w	r2, #0
 800c2b0:	f04f 0300 	mov.w	r3, #0
 800c2b4:	00eb      	lsls	r3, r5, #3
 800c2b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c2ba:	00e2      	lsls	r2, r4, #3
 800c2bc:	4614      	mov	r4, r2
 800c2be:	461d      	mov	r5, r3
 800c2c0:	4643      	mov	r3, r8
 800c2c2:	18e3      	adds	r3, r4, r3
 800c2c4:	603b      	str	r3, [r7, #0]
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	eb45 0303 	adc.w	r3, r5, r3
 800c2cc:	607b      	str	r3, [r7, #4]
 800c2ce:	f04f 0200 	mov.w	r2, #0
 800c2d2:	f04f 0300 	mov.w	r3, #0
 800c2d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c2da:	4629      	mov	r1, r5
 800c2dc:	028b      	lsls	r3, r1, #10
 800c2de:	4621      	mov	r1, r4
 800c2e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c2e4:	4621      	mov	r1, r4
 800c2e6:	028a      	lsls	r2, r1, #10
 800c2e8:	4610      	mov	r0, r2
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c2f0:	2200      	movs	r2, #0
 800c2f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c2f4:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c2f6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c2fa:	f7f3 ffd9 	bl	80002b0 <__aeabi_uldivmod>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4613      	mov	r3, r2
 800c304:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c308:	4b0d      	ldr	r3, [pc, #52]	; (800c340 <HAL_RCC_GetSysClockFreq+0x458>)
 800c30a:	685b      	ldr	r3, [r3, #4]
 800c30c:	0f1b      	lsrs	r3, r3, #28
 800c30e:	f003 0307 	and.w	r3, r3, #7
 800c312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800c316:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c31a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c31e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c326:	e003      	b.n	800c330 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c328:	4b06      	ldr	r3, [pc, #24]	; (800c344 <HAL_RCC_GetSysClockFreq+0x45c>)
 800c32a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c32e:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800c334:	4618      	mov	r0, r3
 800c336:	37b8      	adds	r7, #184	; 0xb8
 800c338:	46bd      	mov	sp, r7
 800c33a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c33e:	bf00      	nop
 800c340:	40023800 	.word	0x40023800
 800c344:	00f42400 	.word	0x00f42400

0800c348 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b086      	sub	sp, #24
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d101      	bne.n	800c35a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	e28d      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f003 0301 	and.w	r3, r3, #1
 800c362:	2b00      	cmp	r3, #0
 800c364:	f000 8083 	beq.w	800c46e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c368:	4b94      	ldr	r3, [pc, #592]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	f003 030c 	and.w	r3, r3, #12
 800c370:	2b04      	cmp	r3, #4
 800c372:	d019      	beq.n	800c3a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c374:	4b91      	ldr	r3, [pc, #580]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c37c:	2b08      	cmp	r3, #8
 800c37e:	d106      	bne.n	800c38e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c380:	4b8e      	ldr	r3, [pc, #568]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c382:	685b      	ldr	r3, [r3, #4]
 800c384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c38c:	d00c      	beq.n	800c3a8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c38e:	4b8b      	ldr	r3, [pc, #556]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c396:	2b0c      	cmp	r3, #12
 800c398:	d112      	bne.n	800c3c0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c39a:	4b88      	ldr	r3, [pc, #544]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c3a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c3a6:	d10b      	bne.n	800c3c0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3a8:	4b84      	ldr	r3, [pc, #528]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d05b      	beq.n	800c46c <HAL_RCC_OscConfig+0x124>
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d157      	bne.n	800c46c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e25a      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	685b      	ldr	r3, [r3, #4]
 800c3c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3c8:	d106      	bne.n	800c3d8 <HAL_RCC_OscConfig+0x90>
 800c3ca:	4b7c      	ldr	r3, [pc, #496]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	4a7b      	ldr	r2, [pc, #492]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c3d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3d4:	6013      	str	r3, [r2, #0]
 800c3d6:	e01d      	b.n	800c414 <HAL_RCC_OscConfig+0xcc>
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c3e0:	d10c      	bne.n	800c3fc <HAL_RCC_OscConfig+0xb4>
 800c3e2:	4b76      	ldr	r3, [pc, #472]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	4a75      	ldr	r2, [pc, #468]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c3e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c3ec:	6013      	str	r3, [r2, #0]
 800c3ee:	4b73      	ldr	r3, [pc, #460]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4a72      	ldr	r2, [pc, #456]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c3f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c3f8:	6013      	str	r3, [r2, #0]
 800c3fa:	e00b      	b.n	800c414 <HAL_RCC_OscConfig+0xcc>
 800c3fc:	4b6f      	ldr	r3, [pc, #444]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	4a6e      	ldr	r2, [pc, #440]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c406:	6013      	str	r3, [r2, #0]
 800c408:	4b6c      	ldr	r3, [pc, #432]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4a6b      	ldr	r2, [pc, #428]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c40e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c412:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d013      	beq.n	800c444 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c41c:	f7fa fca0 	bl	8006d60 <HAL_GetTick>
 800c420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c422:	e008      	b.n	800c436 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c424:	f7fa fc9c 	bl	8006d60 <HAL_GetTick>
 800c428:	4602      	mov	r2, r0
 800c42a:	693b      	ldr	r3, [r7, #16]
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	2b64      	cmp	r3, #100	; 0x64
 800c430:	d901      	bls.n	800c436 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c432:	2303      	movs	r3, #3
 800c434:	e21f      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c436:	4b61      	ldr	r3, [pc, #388]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d0f0      	beq.n	800c424 <HAL_RCC_OscConfig+0xdc>
 800c442:	e014      	b.n	800c46e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c444:	f7fa fc8c 	bl	8006d60 <HAL_GetTick>
 800c448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c44a:	e008      	b.n	800c45e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c44c:	f7fa fc88 	bl	8006d60 <HAL_GetTick>
 800c450:	4602      	mov	r2, r0
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	1ad3      	subs	r3, r2, r3
 800c456:	2b64      	cmp	r3, #100	; 0x64
 800c458:	d901      	bls.n	800c45e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c45a:	2303      	movs	r3, #3
 800c45c:	e20b      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c45e:	4b57      	ldr	r3, [pc, #348]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d1f0      	bne.n	800c44c <HAL_RCC_OscConfig+0x104>
 800c46a:	e000      	b.n	800c46e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c46c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0302 	and.w	r3, r3, #2
 800c476:	2b00      	cmp	r3, #0
 800c478:	d06f      	beq.n	800c55a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c47a:	4b50      	ldr	r3, [pc, #320]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	f003 030c 	and.w	r3, r3, #12
 800c482:	2b00      	cmp	r3, #0
 800c484:	d017      	beq.n	800c4b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c486:	4b4d      	ldr	r3, [pc, #308]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c488:	689b      	ldr	r3, [r3, #8]
 800c48a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c48e:	2b08      	cmp	r3, #8
 800c490:	d105      	bne.n	800c49e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c492:	4b4a      	ldr	r3, [pc, #296]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00b      	beq.n	800c4b6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c49e:	4b47      	ldr	r3, [pc, #284]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c4a6:	2b0c      	cmp	r3, #12
 800c4a8:	d11c      	bne.n	800c4e4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c4aa:	4b44      	ldr	r3, [pc, #272]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d116      	bne.n	800c4e4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4b6:	4b41      	ldr	r3, [pc, #260]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f003 0302 	and.w	r3, r3, #2
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d005      	beq.n	800c4ce <HAL_RCC_OscConfig+0x186>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68db      	ldr	r3, [r3, #12]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	d001      	beq.n	800c4ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e1d3      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4ce:	4b3b      	ldr	r3, [pc, #236]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	691b      	ldr	r3, [r3, #16]
 800c4da:	00db      	lsls	r3, r3, #3
 800c4dc:	4937      	ldr	r1, [pc, #220]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c4e2:	e03a      	b.n	800c55a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	68db      	ldr	r3, [r3, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d020      	beq.n	800c52e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c4ec:	4b34      	ldr	r3, [pc, #208]	; (800c5c0 <HAL_RCC_OscConfig+0x278>)
 800c4ee:	2201      	movs	r2, #1
 800c4f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4f2:	f7fa fc35 	bl	8006d60 <HAL_GetTick>
 800c4f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c4f8:	e008      	b.n	800c50c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c4fa:	f7fa fc31 	bl	8006d60 <HAL_GetTick>
 800c4fe:	4602      	mov	r2, r0
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	2b02      	cmp	r3, #2
 800c506:	d901      	bls.n	800c50c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c508:	2303      	movs	r3, #3
 800c50a:	e1b4      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c50c:	4b2b      	ldr	r3, [pc, #172]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 0302 	and.w	r3, r3, #2
 800c514:	2b00      	cmp	r3, #0
 800c516:	d0f0      	beq.n	800c4fa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c518:	4b28      	ldr	r3, [pc, #160]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	691b      	ldr	r3, [r3, #16]
 800c524:	00db      	lsls	r3, r3, #3
 800c526:	4925      	ldr	r1, [pc, #148]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c528:	4313      	orrs	r3, r2
 800c52a:	600b      	str	r3, [r1, #0]
 800c52c:	e015      	b.n	800c55a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c52e:	4b24      	ldr	r3, [pc, #144]	; (800c5c0 <HAL_RCC_OscConfig+0x278>)
 800c530:	2200      	movs	r2, #0
 800c532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c534:	f7fa fc14 	bl	8006d60 <HAL_GetTick>
 800c538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c53a:	e008      	b.n	800c54e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c53c:	f7fa fc10 	bl	8006d60 <HAL_GetTick>
 800c540:	4602      	mov	r2, r0
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	1ad3      	subs	r3, r2, r3
 800c546:	2b02      	cmp	r3, #2
 800c548:	d901      	bls.n	800c54e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c54a:	2303      	movs	r3, #3
 800c54c:	e193      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c54e:	4b1b      	ldr	r3, [pc, #108]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 0302 	and.w	r3, r3, #2
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1f0      	bne.n	800c53c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f003 0308 	and.w	r3, r3, #8
 800c562:	2b00      	cmp	r3, #0
 800c564:	d036      	beq.n	800c5d4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	695b      	ldr	r3, [r3, #20]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d016      	beq.n	800c59c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c56e:	4b15      	ldr	r3, [pc, #84]	; (800c5c4 <HAL_RCC_OscConfig+0x27c>)
 800c570:	2201      	movs	r2, #1
 800c572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c574:	f7fa fbf4 	bl	8006d60 <HAL_GetTick>
 800c578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c57a:	e008      	b.n	800c58e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c57c:	f7fa fbf0 	bl	8006d60 <HAL_GetTick>
 800c580:	4602      	mov	r2, r0
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	1ad3      	subs	r3, r2, r3
 800c586:	2b02      	cmp	r3, #2
 800c588:	d901      	bls.n	800c58e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c58a:	2303      	movs	r3, #3
 800c58c:	e173      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c58e:	4b0b      	ldr	r3, [pc, #44]	; (800c5bc <HAL_RCC_OscConfig+0x274>)
 800c590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c592:	f003 0302 	and.w	r3, r3, #2
 800c596:	2b00      	cmp	r3, #0
 800c598:	d0f0      	beq.n	800c57c <HAL_RCC_OscConfig+0x234>
 800c59a:	e01b      	b.n	800c5d4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c59c:	4b09      	ldr	r3, [pc, #36]	; (800c5c4 <HAL_RCC_OscConfig+0x27c>)
 800c59e:	2200      	movs	r2, #0
 800c5a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5a2:	f7fa fbdd 	bl	8006d60 <HAL_GetTick>
 800c5a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5a8:	e00e      	b.n	800c5c8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c5aa:	f7fa fbd9 	bl	8006d60 <HAL_GetTick>
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	1ad3      	subs	r3, r2, r3
 800c5b4:	2b02      	cmp	r3, #2
 800c5b6:	d907      	bls.n	800c5c8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	e15c      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
 800c5bc:	40023800 	.word	0x40023800
 800c5c0:	42470000 	.word	0x42470000
 800c5c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c5c8:	4b8a      	ldr	r3, [pc, #552]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5cc:	f003 0302 	and.w	r3, r3, #2
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1ea      	bne.n	800c5aa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f003 0304 	and.w	r3, r3, #4
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	f000 8097 	beq.w	800c710 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c5e6:	4b83      	ldr	r3, [pc, #524]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d10f      	bne.n	800c612 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	60bb      	str	r3, [r7, #8]
 800c5f6:	4b7f      	ldr	r3, [pc, #508]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fa:	4a7e      	ldr	r2, [pc, #504]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c5fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c600:	6413      	str	r3, [r2, #64]	; 0x40
 800c602:	4b7c      	ldr	r3, [pc, #496]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c60a:	60bb      	str	r3, [r7, #8]
 800c60c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c60e:	2301      	movs	r3, #1
 800c610:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c612:	4b79      	ldr	r3, [pc, #484]	; (800c7f8 <HAL_RCC_OscConfig+0x4b0>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d118      	bne.n	800c650 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c61e:	4b76      	ldr	r3, [pc, #472]	; (800c7f8 <HAL_RCC_OscConfig+0x4b0>)
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	4a75      	ldr	r2, [pc, #468]	; (800c7f8 <HAL_RCC_OscConfig+0x4b0>)
 800c624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c62a:	f7fa fb99 	bl	8006d60 <HAL_GetTick>
 800c62e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c630:	e008      	b.n	800c644 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c632:	f7fa fb95 	bl	8006d60 <HAL_GetTick>
 800c636:	4602      	mov	r2, r0
 800c638:	693b      	ldr	r3, [r7, #16]
 800c63a:	1ad3      	subs	r3, r2, r3
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	d901      	bls.n	800c644 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800c640:	2303      	movs	r3, #3
 800c642:	e118      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c644:	4b6c      	ldr	r3, [pc, #432]	; (800c7f8 <HAL_RCC_OscConfig+0x4b0>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d0f0      	beq.n	800c632 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	2b01      	cmp	r3, #1
 800c656:	d106      	bne.n	800c666 <HAL_RCC_OscConfig+0x31e>
 800c658:	4b66      	ldr	r3, [pc, #408]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c65a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c65c:	4a65      	ldr	r2, [pc, #404]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c65e:	f043 0301 	orr.w	r3, r3, #1
 800c662:	6713      	str	r3, [r2, #112]	; 0x70
 800c664:	e01c      	b.n	800c6a0 <HAL_RCC_OscConfig+0x358>
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	689b      	ldr	r3, [r3, #8]
 800c66a:	2b05      	cmp	r3, #5
 800c66c:	d10c      	bne.n	800c688 <HAL_RCC_OscConfig+0x340>
 800c66e:	4b61      	ldr	r3, [pc, #388]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c672:	4a60      	ldr	r2, [pc, #384]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c674:	f043 0304 	orr.w	r3, r3, #4
 800c678:	6713      	str	r3, [r2, #112]	; 0x70
 800c67a:	4b5e      	ldr	r3, [pc, #376]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c67c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c67e:	4a5d      	ldr	r2, [pc, #372]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c680:	f043 0301 	orr.w	r3, r3, #1
 800c684:	6713      	str	r3, [r2, #112]	; 0x70
 800c686:	e00b      	b.n	800c6a0 <HAL_RCC_OscConfig+0x358>
 800c688:	4b5a      	ldr	r3, [pc, #360]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c68a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c68c:	4a59      	ldr	r2, [pc, #356]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c68e:	f023 0301 	bic.w	r3, r3, #1
 800c692:	6713      	str	r3, [r2, #112]	; 0x70
 800c694:	4b57      	ldr	r3, [pc, #348]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c698:	4a56      	ldr	r2, [pc, #344]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c69a:	f023 0304 	bic.w	r3, r3, #4
 800c69e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	689b      	ldr	r3, [r3, #8]
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d015      	beq.n	800c6d4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6a8:	f7fa fb5a 	bl	8006d60 <HAL_GetTick>
 800c6ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6ae:	e00a      	b.n	800c6c6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6b0:	f7fa fb56 	bl	8006d60 <HAL_GetTick>
 800c6b4:	4602      	mov	r2, r0
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	1ad3      	subs	r3, r2, r3
 800c6ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6be:	4293      	cmp	r3, r2
 800c6c0:	d901      	bls.n	800c6c6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800c6c2:	2303      	movs	r3, #3
 800c6c4:	e0d7      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c6c6:	4b4b      	ldr	r3, [pc, #300]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c6c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6ca:	f003 0302 	and.w	r3, r3, #2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d0ee      	beq.n	800c6b0 <HAL_RCC_OscConfig+0x368>
 800c6d2:	e014      	b.n	800c6fe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6d4:	f7fa fb44 	bl	8006d60 <HAL_GetTick>
 800c6d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6da:	e00a      	b.n	800c6f2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c6dc:	f7fa fb40 	bl	8006d60 <HAL_GetTick>
 800c6e0:	4602      	mov	r2, r0
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	1ad3      	subs	r3, r2, r3
 800c6e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c6ea:	4293      	cmp	r3, r2
 800c6ec:	d901      	bls.n	800c6f2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800c6ee:	2303      	movs	r3, #3
 800c6f0:	e0c1      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c6f2:	4b40      	ldr	r3, [pc, #256]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6f6:	f003 0302 	and.w	r3, r3, #2
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d1ee      	bne.n	800c6dc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c6fe:	7dfb      	ldrb	r3, [r7, #23]
 800c700:	2b01      	cmp	r3, #1
 800c702:	d105      	bne.n	800c710 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c704:	4b3b      	ldr	r3, [pc, #236]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c708:	4a3a      	ldr	r2, [pc, #232]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c70a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c70e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	699b      	ldr	r3, [r3, #24]
 800c714:	2b00      	cmp	r3, #0
 800c716:	f000 80ad 	beq.w	800c874 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c71a:	4b36      	ldr	r3, [pc, #216]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c71c:	689b      	ldr	r3, [r3, #8]
 800c71e:	f003 030c 	and.w	r3, r3, #12
 800c722:	2b08      	cmp	r3, #8
 800c724:	d060      	beq.n	800c7e8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	699b      	ldr	r3, [r3, #24]
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d145      	bne.n	800c7ba <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c72e:	4b33      	ldr	r3, [pc, #204]	; (800c7fc <HAL_RCC_OscConfig+0x4b4>)
 800c730:	2200      	movs	r2, #0
 800c732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c734:	f7fa fb14 	bl	8006d60 <HAL_GetTick>
 800c738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c73a:	e008      	b.n	800c74e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c73c:	f7fa fb10 	bl	8006d60 <HAL_GetTick>
 800c740:	4602      	mov	r2, r0
 800c742:	693b      	ldr	r3, [r7, #16]
 800c744:	1ad3      	subs	r3, r2, r3
 800c746:	2b02      	cmp	r3, #2
 800c748:	d901      	bls.n	800c74e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800c74a:	2303      	movs	r3, #3
 800c74c:	e093      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c74e:	4b29      	ldr	r3, [pc, #164]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1f0      	bne.n	800c73c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	69da      	ldr	r2, [r3, #28]
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6a1b      	ldr	r3, [r3, #32]
 800c762:	431a      	orrs	r2, r3
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c768:	019b      	lsls	r3, r3, #6
 800c76a:	431a      	orrs	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c770:	085b      	lsrs	r3, r3, #1
 800c772:	3b01      	subs	r3, #1
 800c774:	041b      	lsls	r3, r3, #16
 800c776:	431a      	orrs	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77c:	061b      	lsls	r3, r3, #24
 800c77e:	431a      	orrs	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c784:	071b      	lsls	r3, r3, #28
 800c786:	491b      	ldr	r1, [pc, #108]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c788:	4313      	orrs	r3, r2
 800c78a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c78c:	4b1b      	ldr	r3, [pc, #108]	; (800c7fc <HAL_RCC_OscConfig+0x4b4>)
 800c78e:	2201      	movs	r2, #1
 800c790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c792:	f7fa fae5 	bl	8006d60 <HAL_GetTick>
 800c796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c798:	e008      	b.n	800c7ac <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c79a:	f7fa fae1 	bl	8006d60 <HAL_GetTick>
 800c79e:	4602      	mov	r2, r0
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d901      	bls.n	800c7ac <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800c7a8:	2303      	movs	r3, #3
 800c7aa:	e064      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7ac:	4b11      	ldr	r3, [pc, #68]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d0f0      	beq.n	800c79a <HAL_RCC_OscConfig+0x452>
 800c7b8:	e05c      	b.n	800c874 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7ba:	4b10      	ldr	r3, [pc, #64]	; (800c7fc <HAL_RCC_OscConfig+0x4b4>)
 800c7bc:	2200      	movs	r2, #0
 800c7be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7c0:	f7fa face 	bl	8006d60 <HAL_GetTick>
 800c7c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7c6:	e008      	b.n	800c7da <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c7c8:	f7fa faca 	bl	8006d60 <HAL_GetTick>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	1ad3      	subs	r3, r2, r3
 800c7d2:	2b02      	cmp	r3, #2
 800c7d4:	d901      	bls.n	800c7da <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800c7d6:	2303      	movs	r3, #3
 800c7d8:	e04d      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c7da:	4b06      	ldr	r3, [pc, #24]	; (800c7f4 <HAL_RCC_OscConfig+0x4ac>)
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d1f0      	bne.n	800c7c8 <HAL_RCC_OscConfig+0x480>
 800c7e6:	e045      	b.n	800c874 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	699b      	ldr	r3, [r3, #24]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d107      	bne.n	800c800 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e040      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
 800c7f4:	40023800 	.word	0x40023800
 800c7f8:	40007000 	.word	0x40007000
 800c7fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c800:	4b1f      	ldr	r3, [pc, #124]	; (800c880 <HAL_RCC_OscConfig+0x538>)
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	699b      	ldr	r3, [r3, #24]
 800c80a:	2b01      	cmp	r3, #1
 800c80c:	d030      	beq.n	800c870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c818:	429a      	cmp	r2, r3
 800c81a:	d129      	bne.n	800c870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c826:	429a      	cmp	r2, r3
 800c828:	d122      	bne.n	800c870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c830:	4013      	ands	r3, r2
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c836:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c838:	4293      	cmp	r3, r2
 800c83a:	d119      	bne.n	800c870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c846:	085b      	lsrs	r3, r3, #1
 800c848:	3b01      	subs	r3, #1
 800c84a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c84c:	429a      	cmp	r2, r3
 800c84e:	d10f      	bne.n	800c870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c85c:	429a      	cmp	r2, r3
 800c85e:	d107      	bne.n	800c870 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c86a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800c86c:	429a      	cmp	r2, r3
 800c86e:	d001      	beq.n	800c874 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800c870:	2301      	movs	r3, #1
 800c872:	e000      	b.n	800c876 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3718      	adds	r7, #24
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	40023800 	.word	0x40023800

0800c884 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c88c:	2301      	movs	r3, #1
 800c88e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d101      	bne.n	800c89a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800c896:	2301      	movs	r3, #1
 800c898:	e066      	b.n	800c968 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	7f5b      	ldrb	r3, [r3, #29]
 800c89e:	b2db      	uxtb	r3, r3
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d105      	bne.n	800c8b0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800c8aa:	6878      	ldr	r0, [r7, #4]
 800c8ac:	f7f9 ffb6 	bl	800681c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2202      	movs	r2, #2
 800c8b4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	22ca      	movs	r2, #202	; 0xca
 800c8bc:	625a      	str	r2, [r3, #36]	; 0x24
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2253      	movs	r2, #83	; 0x53
 800c8c4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fa45 	bl	800cd56 <RTC_EnterInitMode>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d12c      	bne.n	800c930 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	687a      	ldr	r2, [r7, #4]
 800c8de:	6812      	ldr	r2, [r2, #0]
 800c8e0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c8e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8e8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	6899      	ldr	r1, [r3, #8]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	691b      	ldr	r3, [r3, #16]
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	695b      	ldr	r3, [r3, #20]
 800c8fe:	431a      	orrs	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	430a      	orrs	r2, r1
 800c906:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	68d2      	ldr	r2, [r2, #12]
 800c910:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	6919      	ldr	r1, [r3, #16]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	041a      	lsls	r2, r3, #16
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	430a      	orrs	r2, r1
 800c924:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f000 fa4c 	bl	800cdc4 <RTC_ExitInitMode>
 800c92c:	4603      	mov	r3, r0
 800c92e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800c930:	7bfb      	ldrb	r3, [r7, #15]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d113      	bne.n	800c95e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c944:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	699a      	ldr	r2, [r3, #24]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	430a      	orrs	r2, r1
 800c956:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	22ff      	movs	r2, #255	; 0xff
 800c964:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 800c966:	7bfb      	ldrb	r3, [r7, #15]
}
 800c968:	4618      	mov	r0, r3
 800c96a:	3710      	adds	r7, #16
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c970:	b590      	push	{r4, r7, lr}
 800c972:	b087      	sub	sp, #28
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800c97c:	2300      	movs	r3, #0
 800c97e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	7f1b      	ldrb	r3, [r3, #28]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d101      	bne.n	800c98c <HAL_RTC_SetTime+0x1c>
 800c988:	2302      	movs	r3, #2
 800c98a:	e087      	b.n	800ca9c <HAL_RTC_SetTime+0x12c>
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2201      	movs	r2, #1
 800c990:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2202      	movs	r2, #2
 800c996:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d126      	bne.n	800c9ec <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d102      	bne.n	800c9b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	2200      	movs	r2, #0
 800c9b0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	781b      	ldrb	r3, [r3, #0]
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f000 fa29 	bl	800ce0e <RTC_ByteToBcd2>
 800c9bc:	4603      	mov	r3, r0
 800c9be:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	785b      	ldrb	r3, [r3, #1]
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f000 fa22 	bl	800ce0e <RTC_ByteToBcd2>
 800c9ca:	4603      	mov	r3, r0
 800c9cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9ce:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	789b      	ldrb	r3, [r3, #2]
 800c9d4:	4618      	mov	r0, r3
 800c9d6:	f000 fa1a 	bl	800ce0e <RTC_ByteToBcd2>
 800c9da:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c9dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	78db      	ldrb	r3, [r3, #3]
 800c9e4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c9e6:	4313      	orrs	r3, r2
 800c9e8:	617b      	str	r3, [r7, #20]
 800c9ea:	e018      	b.n	800ca1e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d102      	bne.n	800ca00 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	781b      	ldrb	r3, [r3, #0]
 800ca04:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	785b      	ldrb	r3, [r3, #1]
 800ca0a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ca0c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800ca12:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	78db      	ldrb	r3, [r3, #3]
 800ca18:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	22ca      	movs	r2, #202	; 0xca
 800ca24:	625a      	str	r2, [r3, #36]	; 0x24
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	2253      	movs	r2, #83	; 0x53
 800ca2c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800ca2e:	68f8      	ldr	r0, [r7, #12]
 800ca30:	f000 f991 	bl	800cd56 <RTC_EnterInitMode>
 800ca34:	4603      	mov	r3, r0
 800ca36:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800ca38:	7cfb      	ldrb	r3, [r7, #19]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d120      	bne.n	800ca80 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	697b      	ldr	r3, [r7, #20]
 800ca44:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800ca48:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800ca4c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	689a      	ldr	r2, [r3, #8]
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ca5c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	6899      	ldr	r1, [r3, #8]
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	68da      	ldr	r2, [r3, #12]
 800ca68:	68bb      	ldr	r3, [r7, #8]
 800ca6a:	691b      	ldr	r3, [r3, #16]
 800ca6c:	431a      	orrs	r2, r3
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	430a      	orrs	r2, r1
 800ca74:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f000 f9a4 	bl	800cdc4 <RTC_ExitInitMode>
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800ca80:	7cfb      	ldrb	r3, [r7, #19]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d102      	bne.n	800ca8c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	22ff      	movs	r2, #255	; 0xff
 800ca92:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2200      	movs	r2, #0
 800ca98:	771a      	strb	r2, [r3, #28]

  return status;
 800ca9a:	7cfb      	ldrb	r3, [r7, #19]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	371c      	adds	r7, #28
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd90      	pop	{r4, r7, pc}

0800caa4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b086      	sub	sp, #24
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800cab0:	2300      	movs	r3, #0
 800cab2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	691b      	ldr	r3, [r3, #16]
 800cac4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cac8:	68bb      	ldr	r3, [r7, #8]
 800caca:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800cad6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800cada:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	0c1b      	lsrs	r3, r3, #16
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cae6:	b2da      	uxtb	r2, r3
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800caec:	697b      	ldr	r3, [r7, #20]
 800caee:	0a1b      	lsrs	r3, r3, #8
 800caf0:	b2db      	uxtb	r3, r3
 800caf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	68bb      	ldr	r3, [r7, #8]
 800cafa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	b2db      	uxtb	r3, r3
 800cb00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb04:	b2da      	uxtb	r2, r3
 800cb06:	68bb      	ldr	r3, [r7, #8]
 800cb08:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800cb0a:	697b      	ldr	r3, [r7, #20]
 800cb0c:	0d9b      	lsrs	r3, r3, #22
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	f003 0301 	and.w	r3, r3, #1
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	68bb      	ldr	r3, [r7, #8]
 800cb18:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d11a      	bne.n	800cb56 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cb20:	68bb      	ldr	r3, [r7, #8]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	4618      	mov	r0, r3
 800cb26:	f000 f98f 	bl	800ce48 <RTC_Bcd2ToByte>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	461a      	mov	r2, r3
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	785b      	ldrb	r3, [r3, #1]
 800cb36:	4618      	mov	r0, r3
 800cb38:	f000 f986 	bl	800ce48 <RTC_Bcd2ToByte>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	461a      	mov	r2, r3
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	789b      	ldrb	r3, [r3, #2]
 800cb48:	4618      	mov	r0, r3
 800cb4a:	f000 f97d 	bl	800ce48 <RTC_Bcd2ToByte>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	461a      	mov	r2, r3
 800cb52:	68bb      	ldr	r3, [r7, #8]
 800cb54:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3718      	adds	r7, #24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cb60:	b590      	push	{r4, r7, lr}
 800cb62:	b087      	sub	sp, #28
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	60f8      	str	r0, [r7, #12]
 800cb68:	60b9      	str	r1, [r7, #8]
 800cb6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	7f1b      	ldrb	r3, [r3, #28]
 800cb74:	2b01      	cmp	r3, #1
 800cb76:	d101      	bne.n	800cb7c <HAL_RTC_SetDate+0x1c>
 800cb78:	2302      	movs	r3, #2
 800cb7a:	e071      	b.n	800cc60 <HAL_RTC_SetDate+0x100>
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	2201      	movs	r2, #1
 800cb80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	2202      	movs	r2, #2
 800cb86:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d10e      	bne.n	800cbac <HAL_RTC_SetDate+0x4c>
 800cb8e:	68bb      	ldr	r3, [r7, #8]
 800cb90:	785b      	ldrb	r3, [r3, #1]
 800cb92:	f003 0310 	and.w	r3, r3, #16
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d008      	beq.n	800cbac <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	785b      	ldrb	r3, [r3, #1]
 800cb9e:	f023 0310 	bic.w	r3, r3, #16
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	330a      	adds	r3, #10
 800cba6:	b2da      	uxtb	r2, r3
 800cba8:	68bb      	ldr	r3, [r7, #8]
 800cbaa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d11c      	bne.n	800cbec <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	78db      	ldrb	r3, [r3, #3]
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f000 f929 	bl	800ce0e <RTC_ByteToBcd2>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	785b      	ldrb	r3, [r3, #1]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 f922 	bl	800ce0e <RTC_ByteToBcd2>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cbce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	789b      	ldrb	r3, [r3, #2]
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	f000 f91a 	bl	800ce0e <RTC_ByteToBcd2>
 800cbda:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cbdc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	617b      	str	r3, [r7, #20]
 800cbea:	e00e      	b.n	800cc0a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cbec:	68bb      	ldr	r3, [r7, #8]
 800cbee:	78db      	ldrb	r3, [r3, #3]
 800cbf0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	785b      	ldrb	r3, [r3, #1]
 800cbf6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cbf8:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800cbfa:	68ba      	ldr	r2, [r7, #8]
 800cbfc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800cbfe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800cc06:	4313      	orrs	r3, r2
 800cc08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	22ca      	movs	r2, #202	; 0xca
 800cc10:	625a      	str	r2, [r3, #36]	; 0x24
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	2253      	movs	r2, #83	; 0x53
 800cc18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f000 f89b 	bl	800cd56 <RTC_EnterInitMode>
 800cc20:	4603      	mov	r3, r0
 800cc22:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800cc24:	7cfb      	ldrb	r3, [r7, #19]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d10c      	bne.n	800cc44 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc34:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc38:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800cc3a:	68f8      	ldr	r0, [r7, #12]
 800cc3c:	f000 f8c2 	bl	800cdc4 <RTC_ExitInitMode>
 800cc40:	4603      	mov	r3, r0
 800cc42:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800cc44:	7cfb      	ldrb	r3, [r7, #19]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d102      	bne.n	800cc50 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	22ff      	movs	r2, #255	; 0xff
 800cc56:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	771a      	strb	r2, [r3, #28]

  return status;
 800cc5e:	7cfb      	ldrb	r3, [r7, #19]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	371c      	adds	r7, #28
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd90      	pop	{r4, r7, pc}

0800cc68 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800cc74:	2300      	movs	r3, #0
 800cc76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800cc82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800cc86:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	0c1b      	lsrs	r3, r3, #16
 800cc8c:	b2da      	uxtb	r2, r3
 800cc8e:	68bb      	ldr	r3, [r7, #8]
 800cc90:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800cc92:	697b      	ldr	r3, [r7, #20]
 800cc94:	0a1b      	lsrs	r3, r3, #8
 800cc96:	b2db      	uxtb	r3, r3
 800cc98:	f003 031f 	and.w	r3, r3, #31
 800cc9c:	b2da      	uxtb	r2, r3
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccaa:	b2da      	uxtb	r2, r3
 800ccac:	68bb      	ldr	r3, [r7, #8]
 800ccae:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	0b5b      	lsrs	r3, r3, #13
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	f003 0307 	and.w	r3, r3, #7
 800ccba:	b2da      	uxtb	r2, r3
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d11a      	bne.n	800ccfc <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	78db      	ldrb	r3, [r3, #3]
 800ccca:	4618      	mov	r0, r3
 800cccc:	f000 f8bc 	bl	800ce48 <RTC_Bcd2ToByte>
 800ccd0:	4603      	mov	r3, r0
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	68bb      	ldr	r3, [r7, #8]
 800ccd6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	785b      	ldrb	r3, [r3, #1]
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f000 f8b3 	bl	800ce48 <RTC_Bcd2ToByte>
 800cce2:	4603      	mov	r3, r0
 800cce4:	461a      	mov	r2, r3
 800cce6:	68bb      	ldr	r3, [r7, #8]
 800cce8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800ccea:	68bb      	ldr	r3, [r7, #8]
 800ccec:	789b      	ldrb	r3, [r3, #2]
 800ccee:	4618      	mov	r0, r3
 800ccf0:	f000 f8aa 	bl	800ce48 <RTC_Bcd2ToByte>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800ccfc:	2300      	movs	r3, #0
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}

0800cd06 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800cd06:	b580      	push	{r7, lr}
 800cd08:	b084      	sub	sp, #16
 800cd0a:	af00      	add	r7, sp, #0
 800cd0c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	68da      	ldr	r2, [r3, #12]
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800cd20:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cd22:	f7fa f81d 	bl	8006d60 <HAL_GetTick>
 800cd26:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cd28:	e009      	b.n	800cd3e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cd2a:	f7fa f819 	bl	8006d60 <HAL_GetTick>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	1ad3      	subs	r3, r2, r3
 800cd34:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd38:	d901      	bls.n	800cd3e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	e007      	b.n	800cd4e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	f003 0320 	and.w	r3, r3, #32
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d0ee      	beq.n	800cd2a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800cd4c:	2300      	movs	r3, #0
}
 800cd4e:	4618      	mov	r0, r3
 800cd50:	3710      	adds	r7, #16
 800cd52:	46bd      	mov	sp, r7
 800cd54:	bd80      	pop	{r7, pc}

0800cd56 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800cd56:	b580      	push	{r7, lr}
 800cd58:	b084      	sub	sp, #16
 800cd5a:	af00      	add	r7, sp, #0
 800cd5c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800cd5e:	2300      	movs	r3, #0
 800cd60:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d122      	bne.n	800cdba <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68da      	ldr	r2, [r3, #12]
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800cd82:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800cd84:	f7f9 ffec 	bl	8006d60 <HAL_GetTick>
 800cd88:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cd8a:	e00c      	b.n	800cda6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800cd8c:	f7f9 ffe8 	bl	8006d60 <HAL_GetTick>
 800cd90:	4602      	mov	r2, r0
 800cd92:	68bb      	ldr	r3, [r7, #8]
 800cd94:	1ad3      	subs	r3, r2, r3
 800cd96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cd9a:	d904      	bls.n	800cda6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2204      	movs	r2, #4
 800cda0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800cda2:	2301      	movs	r3, #1
 800cda4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68db      	ldr	r3, [r3, #12]
 800cdac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d102      	bne.n	800cdba <RTC_EnterInitMode+0x64>
 800cdb4:	7bfb      	ldrb	r3, [r7, #15]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d1e8      	bne.n	800cd8c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800cdba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdbc:	4618      	mov	r0, r3
 800cdbe:	3710      	adds	r7, #16
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	68da      	ldr	r2, [r3, #12]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cdde:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	f003 0320 	and.w	r3, r3, #32
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d10a      	bne.n	800ce04 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f7ff ff89 	bl	800cd06 <HAL_RTC_WaitForSynchro>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d004      	beq.n	800ce04 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2204      	movs	r2, #4
 800cdfe:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800ce00:	2301      	movs	r3, #1
 800ce02:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ce04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3710      	adds	r7, #16
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800ce0e:	b480      	push	{r7}
 800ce10:	b085      	sub	sp, #20
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	4603      	mov	r3, r0
 800ce16:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800ce1c:	e005      	b.n	800ce2a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
 800ce20:	3301      	adds	r3, #1
 800ce22:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800ce24:	79fb      	ldrb	r3, [r7, #7]
 800ce26:	3b0a      	subs	r3, #10
 800ce28:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800ce2a:	79fb      	ldrb	r3, [r7, #7]
 800ce2c:	2b09      	cmp	r3, #9
 800ce2e:	d8f6      	bhi.n	800ce1e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800ce30:	7bfb      	ldrb	r3, [r7, #15]
 800ce32:	011b      	lsls	r3, r3, #4
 800ce34:	b2da      	uxtb	r2, r3
 800ce36:	79fb      	ldrb	r3, [r7, #7]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	b2db      	uxtb	r3, r3
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3714      	adds	r7, #20
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr

0800ce48 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b085      	sub	sp, #20
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800ce52:	2300      	movs	r3, #0
 800ce54:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ce56:	79fb      	ldrb	r3, [r7, #7]
 800ce58:	091b      	lsrs	r3, r3, #4
 800ce5a:	b2db      	uxtb	r3, r3
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	0092      	lsls	r2, r2, #2
 800ce60:	4413      	add	r3, r2
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800ce66:	79fb      	ldrb	r3, [r7, #7]
 800ce68:	f003 030f 	and.w	r3, r3, #15
 800ce6c:	b2da      	uxtb	r2, r3
 800ce6e:	7bfb      	ldrb	r3, [r7, #15]
 800ce70:	4413      	add	r3, r2
 800ce72:	b2db      	uxtb	r3, r3
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3714      	adds	r7, #20
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce7e:	4770      	bx	lr

0800ce80 <HAL_RTCEx_BKUPWrite>:
  *                                 to specify the register.
  * @param  Data Data to be written in the specified RTC Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b087      	sub	sp, #28
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	3350      	adds	r3, #80	; 0x50
 800ce96:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	697a      	ldr	r2, [r7, #20]
 800ce9e:	4413      	add	r3, r2
 800cea0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	601a      	str	r2, [r3, #0]
}
 800cea8:	bf00      	nop
 800ceaa:	371c      	adds	r7, #28
 800ceac:	46bd      	mov	sp, r7
 800ceae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb2:	4770      	bx	lr

0800ceb4 <HAL_RTCEx_BKUPRead>:
  *          This parameter can be: RTC_BKP_DRx (where x can be from 0 to 19)
  *                                 to specify the register.
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	b085      	sub	sp, #20
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
 800cebc:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0U;
 800cebe:	2300      	movs	r3, #0
 800cec0:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3350      	adds	r3, #80	; 0x50
 800cec8:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	68fa      	ldr	r2, [r7, #12]
 800ced0:	4413      	add	r3, r2
 800ced2:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	681b      	ldr	r3, [r3, #0]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3714      	adds	r7, #20
 800cedc:	46bd      	mov	sp, r7
 800cede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee2:	4770      	bx	lr

0800cee4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cee4:	b580      	push	{r7, lr}
 800cee6:	b082      	sub	sp, #8
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d101      	bne.n	800cef6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
 800cef4:	e022      	b.n	800cf3c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cefc:	b2db      	uxtb	r3, r3
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d105      	bne.n	800cf0e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f7f9 fcb1 	bl	8006870 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2203      	movs	r2, #3
 800cf12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f000 f814 	bl	800cf44 <HAL_SD_InitCard>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d001      	beq.n	800cf26 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf22:	2301      	movs	r3, #1
 800cf24:	e00a      	b.n	800cf3c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2201      	movs	r2, #1
 800cf36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cf3a:	2300      	movs	r3, #0
}
 800cf3c:	4618      	mov	r0, r3
 800cf3e:	3708      	adds	r7, #8
 800cf40:	46bd      	mov	sp, r7
 800cf42:	bd80      	pop	{r7, pc}

0800cf44 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cf44:	b5b0      	push	{r4, r5, r7, lr}
 800cf46:	b08e      	sub	sp, #56	; 0x38
 800cf48:	af04      	add	r7, sp, #16
 800cf4a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800cf50:	2300      	movs	r3, #0
 800cf52:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800cf54:	2300      	movs	r3, #0
 800cf56:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800cf5c:	2300      	movs	r3, #0
 800cf5e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800cf60:	2376      	movs	r3, #118	; 0x76
 800cf62:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	681d      	ldr	r5, [r3, #0]
 800cf68:	466c      	mov	r4, sp
 800cf6a:	f107 0314 	add.w	r3, r7, #20
 800cf6e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cf76:	f107 0308 	add.w	r3, r7, #8
 800cf7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cf7c:	4628      	mov	r0, r5
 800cf7e:	f002 f951 	bl	800f224 <SDIO_Init>
 800cf82:	4603      	mov	r3, r0
 800cf84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800cf88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d001      	beq.n	800cf94 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800cf90:	2301      	movs	r3, #1
 800cf92:	e04f      	b.n	800d034 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800cf94:	4b29      	ldr	r3, [pc, #164]	; (800d03c <HAL_SD_InitCard+0xf8>)
 800cf96:	2200      	movs	r2, #0
 800cf98:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	f002 f989 	bl	800f2b6 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800cfa4:	4b25      	ldr	r3, [pc, #148]	; (800d03c <HAL_SD_InitCard+0xf8>)
 800cfa6:	2201      	movs	r2, #1
 800cfa8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800cfaa:	2002      	movs	r0, #2
 800cfac:	f7f9 fee4 	bl	8006d78 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f001 fb53 	bl	800e65c <SD_PowerON>
 800cfb6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfb8:	6a3b      	ldr	r3, [r7, #32]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d00b      	beq.n	800cfd6 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2201      	movs	r2, #1
 800cfc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cfca:	6a3b      	ldr	r3, [r7, #32]
 800cfcc:	431a      	orrs	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e02e      	b.n	800d034 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f001 fa72 	bl	800e4c0 <SD_InitCard>
 800cfdc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cfde:	6a3b      	ldr	r3, [r7, #32]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d00b      	beq.n	800cffc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2201      	movs	r2, #1
 800cfe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cff0:	6a3b      	ldr	r3, [r7, #32]
 800cff2:	431a      	orrs	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cff8:	2301      	movs	r3, #1
 800cffa:	e01b      	b.n	800d034 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d004:	4618      	mov	r0, r3
 800d006:	f002 f9e8 	bl	800f3da <SDMMC_CmdBlockLength>
 800d00a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d00c:	6a3b      	ldr	r3, [r7, #32]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d00f      	beq.n	800d032 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4a0a      	ldr	r2, [pc, #40]	; (800d040 <HAL_SD_InitCard+0xfc>)
 800d018:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d01e:	6a3b      	ldr	r3, [r7, #32]
 800d020:	431a      	orrs	r2, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2201      	movs	r2, #1
 800d02a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	e000      	b.n	800d034 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800d032:	2300      	movs	r3, #0
}
 800d034:	4618      	mov	r0, r3
 800d036:	3728      	adds	r7, #40	; 0x28
 800d038:	46bd      	mov	sp, r7
 800d03a:	bdb0      	pop	{r4, r5, r7, pc}
 800d03c:	422580a0 	.word	0x422580a0
 800d040:	004005ff 	.word	0x004005ff

0800d044 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b092      	sub	sp, #72	; 0x48
 800d048:	af00      	add	r7, sp, #0
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
 800d050:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d052:	f7f9 fe85 	bl	8006d60 <HAL_GetTick>
 800d056:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d107      	bne.n	800d076 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d06a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d072:	2301      	movs	r3, #1
 800d074:	e1bd      	b.n	800d3f2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b01      	cmp	r3, #1
 800d080:	f040 81b0 	bne.w	800d3e4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2200      	movs	r2, #0
 800d088:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d08a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	441a      	add	r2, r3
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d094:	429a      	cmp	r2, r3
 800d096:	d907      	bls.n	800d0a8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d09c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e1a4      	b.n	800d3f2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	2203      	movs	r2, #3
 800d0ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d002      	beq.n	800d0c6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800d0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0c2:	025b      	lsls	r3, r3, #9
 800d0c4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d0c6:	f04f 33ff 	mov.w	r3, #4294967295
 800d0ca:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	025b      	lsls	r3, r3, #9
 800d0d0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d0d2:	2390      	movs	r3, #144	; 0x90
 800d0d4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d0d6:	2302      	movs	r3, #2
 800d0d8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f107 0214 	add.w	r2, r7, #20
 800d0ea:	4611      	mov	r1, r2
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f002 f948 	bl	800f382 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d90a      	bls.n	800d10e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d104:	4618      	mov	r0, r3
 800d106:	f002 f9ac 	bl	800f462 <SDMMC_CmdReadMultiBlock>
 800d10a:	6478      	str	r0, [r7, #68]	; 0x44
 800d10c:	e009      	b.n	800d122 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	2201      	movs	r2, #1
 800d112:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d11a:	4618      	mov	r0, r3
 800d11c:	f002 f97f 	bl	800f41e <SDMMC_CmdReadSingleBlock>
 800d120:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d122:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d124:	2b00      	cmp	r3, #0
 800d126:	d012      	beq.n	800d14e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4a7a      	ldr	r2, [pc, #488]	; (800d318 <HAL_SD_ReadBlocks+0x2d4>)
 800d12e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d136:	431a      	orrs	r2, r3
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	2201      	movs	r2, #1
 800d140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	2200      	movs	r2, #0
 800d148:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d14a:	2301      	movs	r3, #1
 800d14c:	e151      	b.n	800d3f2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800d14e:	69bb      	ldr	r3, [r7, #24]
 800d150:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d152:	e061      	b.n	800d218 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d15a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d03c      	beq.n	800d1dc <HAL_SD_ReadBlocks+0x198>
 800d162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d164:	2b00      	cmp	r3, #0
 800d166:	d039      	beq.n	800d1dc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800d168:	2300      	movs	r3, #0
 800d16a:	643b      	str	r3, [r7, #64]	; 0x40
 800d16c:	e033      	b.n	800d1d6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4618      	mov	r0, r3
 800d174:	f002 f881 	bl	800f27a <SDIO_ReadFIFO>
 800d178:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d180:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d184:	3301      	adds	r3, #1
 800d186:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d18a:	3b01      	subs	r3, #1
 800d18c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d18e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d190:	0a1b      	lsrs	r3, r3, #8
 800d192:	b2da      	uxtb	r2, r3
 800d194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d196:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d19a:	3301      	adds	r3, #1
 800d19c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d19e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1a0:	3b01      	subs	r3, #1
 800d1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a6:	0c1b      	lsrs	r3, r3, #16
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ac:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d1ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1bc:	0e1b      	lsrs	r3, r3, #24
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d1ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1cc:	3b01      	subs	r3, #1
 800d1ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800d1d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	643b      	str	r3, [r7, #64]	; 0x40
 800d1d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1d8:	2b07      	cmp	r3, #7
 800d1da:	d9c8      	bls.n	800d16e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d1dc:	f7f9 fdc0 	bl	8006d60 <HAL_GetTick>
 800d1e0:	4602      	mov	r2, r0
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d902      	bls.n	800d1f2 <HAL_SD_ReadBlocks+0x1ae>
 800d1ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d112      	bne.n	800d218 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a48      	ldr	r2, [pc, #288]	; (800d318 <HAL_SD_ReadBlocks+0x2d4>)
 800d1f8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1fe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2201      	movs	r2, #1
 800d20a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	2200      	movs	r2, #0
 800d212:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d214:	2303      	movs	r3, #3
 800d216:	e0ec      	b.n	800d3f2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d21e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d222:	2b00      	cmp	r3, #0
 800d224:	d096      	beq.n	800d154 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d22c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d230:	2b00      	cmp	r3, #0
 800d232:	d022      	beq.n	800d27a <HAL_SD_ReadBlocks+0x236>
 800d234:	683b      	ldr	r3, [r7, #0]
 800d236:	2b01      	cmp	r3, #1
 800d238:	d91f      	bls.n	800d27a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d01b      	beq.n	800d27a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	4618      	mov	r0, r3
 800d248:	f002 f972 	bl	800f530 <SDMMC_CmdStopTransfer>
 800d24c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d24e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d250:	2b00      	cmp	r3, #0
 800d252:	d012      	beq.n	800d27a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	4a2f      	ldr	r2, [pc, #188]	; (800d318 <HAL_SD_ReadBlocks+0x2d4>)
 800d25a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d262:	431a      	orrs	r2, r3
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	2201      	movs	r2, #1
 800d26c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	2200      	movs	r2, #0
 800d274:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d276:	2301      	movs	r3, #1
 800d278:	e0bb      	b.n	800d3f2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d280:	f003 0308 	and.w	r3, r3, #8
 800d284:	2b00      	cmp	r3, #0
 800d286:	d012      	beq.n	800d2ae <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a22      	ldr	r2, [pc, #136]	; (800d318 <HAL_SD_ReadBlocks+0x2d4>)
 800d28e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d294:	f043 0208 	orr.w	r2, r3, #8
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	2201      	movs	r2, #1
 800d2a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e0a1      	b.n	800d3f2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b4:	f003 0302 	and.w	r3, r3, #2
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d012      	beq.n	800d2e2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a15      	ldr	r2, [pc, #84]	; (800d318 <HAL_SD_ReadBlocks+0x2d4>)
 800d2c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2c8:	f043 0202 	orr.w	r2, r3, #2
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	2200      	movs	r2, #0
 800d2dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	e087      	b.n	800d3f2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e8:	f003 0320 	and.w	r3, r3, #32
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d064      	beq.n	800d3ba <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	4a08      	ldr	r2, [pc, #32]	; (800d318 <HAL_SD_ReadBlocks+0x2d4>)
 800d2f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2fc:	f043 0220 	orr.w	r2, r3, #32
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	2201      	movs	r2, #1
 800d308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2200      	movs	r2, #0
 800d310:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d312:	2301      	movs	r3, #1
 800d314:	e06d      	b.n	800d3f2 <HAL_SD_ReadBlocks+0x3ae>
 800d316:	bf00      	nop
 800d318:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	4618      	mov	r0, r3
 800d322:	f001 ffaa 	bl	800f27a <SDIO_ReadFIFO>
 800d326:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32a:	b2da      	uxtb	r2, r3
 800d32c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d32e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d332:	3301      	adds	r3, #1
 800d334:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d338:	3b01      	subs	r3, #1
 800d33a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33e:	0a1b      	lsrs	r3, r3, #8
 800d340:	b2da      	uxtb	r2, r3
 800d342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d344:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d348:	3301      	adds	r3, #1
 800d34a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d34c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34e:	3b01      	subs	r3, #1
 800d350:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d354:	0c1b      	lsrs	r3, r3, #16
 800d356:	b2da      	uxtb	r2, r3
 800d358:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d35e:	3301      	adds	r3, #1
 800d360:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d364:	3b01      	subs	r3, #1
 800d366:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36a:	0e1b      	lsrs	r3, r3, #24
 800d36c:	b2da      	uxtb	r2, r3
 800d36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d370:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800d372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d374:	3301      	adds	r3, #1
 800d376:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800d378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d37a:	3b01      	subs	r3, #1
 800d37c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d37e:	f7f9 fcef 	bl	8006d60 <HAL_GetTick>
 800d382:	4602      	mov	r2, r0
 800d384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d38a:	429a      	cmp	r2, r3
 800d38c:	d902      	bls.n	800d394 <HAL_SD_ReadBlocks+0x350>
 800d38e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d390:	2b00      	cmp	r3, #0
 800d392:	d112      	bne.n	800d3ba <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	4a18      	ldr	r2, [pc, #96]	; (800d3fc <HAL_SD_ReadBlocks+0x3b8>)
 800d39a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2201      	movs	r2, #1
 800d3ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	e01b      	b.n	800d3f2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d002      	beq.n	800d3ce <HAL_SD_ReadBlocks+0x38a>
 800d3c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d1a6      	bne.n	800d31c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f240 523a 	movw	r2, #1338	; 0x53a
 800d3d6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2201      	movs	r2, #1
 800d3dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	e006      	b.n	800d3f2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d3f0:	2301      	movs	r3, #1
  }
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3748      	adds	r7, #72	; 0x48
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	004005ff 	.word	0x004005ff

0800d400 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d400:	b580      	push	{r7, lr}
 800d402:	b092      	sub	sp, #72	; 0x48
 800d404:	af00      	add	r7, sp, #0
 800d406:	60f8      	str	r0, [r7, #12]
 800d408:	60b9      	str	r1, [r7, #8]
 800d40a:	607a      	str	r2, [r7, #4]
 800d40c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d40e:	f7f9 fca7 	bl	8006d60 <HAL_GetTick>
 800d412:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d107      	bne.n	800d432 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d426:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d42e:	2301      	movs	r3, #1
 800d430:	e165      	b.n	800d6fe <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d438:	b2db      	uxtb	r3, r3
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	f040 8158 	bne.w	800d6f0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2200      	movs	r2, #0
 800d444:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d446:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	441a      	add	r2, r3
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d450:	429a      	cmp	r2, r3
 800d452:	d907      	bls.n	800d464 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d458:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	e14c      	b.n	800d6fe <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2203      	movs	r2, #3
 800d468:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	681b      	ldr	r3, [r3, #0]
 800d470:	2200      	movs	r2, #0
 800d472:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d002      	beq.n	800d482 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d47c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d47e:	025b      	lsls	r3, r3, #9
 800d480:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d482:	f04f 33ff 	mov.w	r3, #4294967295
 800d486:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	025b      	lsls	r3, r3, #9
 800d48c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d48e:	2390      	movs	r3, #144	; 0x90
 800d490:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800d492:	2300      	movs	r3, #0
 800d494:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d496:	2300      	movs	r3, #0
 800d498:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800d49a:	2301      	movs	r3, #1
 800d49c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f107 0218 	add.w	r2, r7, #24
 800d4a6:	4611      	mov	r1, r2
 800d4a8:	4618      	mov	r0, r3
 800d4aa:	f001 ff6a 	bl	800f382 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2b01      	cmp	r3, #1
 800d4b2:	d90a      	bls.n	800d4ca <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	2220      	movs	r2, #32
 800d4b8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f002 f812 	bl	800f4ea <SDMMC_CmdWriteMultiBlock>
 800d4c6:	6478      	str	r0, [r7, #68]	; 0x44
 800d4c8:	e009      	b.n	800d4de <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2210      	movs	r2, #16
 800d4ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f001 ffe5 	bl	800f4a6 <SDMMC_CmdWriteSingleBlock>
 800d4dc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d012      	beq.n	800d50a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	4a87      	ldr	r2, [pc, #540]	; (800d708 <HAL_SD_WriteBlocks+0x308>)
 800d4ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4f2:	431a      	orrs	r2, r3
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	2200      	movs	r2, #0
 800d504:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	e0f9      	b.n	800d6fe <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d50e:	e065      	b.n	800d5dc <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d040      	beq.n	800d5a0 <HAL_SD_WriteBlocks+0x1a0>
 800d51e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d520:	2b00      	cmp	r3, #0
 800d522:	d03d      	beq.n	800d5a0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d524:	2300      	movs	r3, #0
 800d526:	643b      	str	r3, [r7, #64]	; 0x40
 800d528:	e037      	b.n	800d59a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800d52a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d532:	3301      	adds	r3, #1
 800d534:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d538:	3b01      	subs	r3, #1
 800d53a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	021a      	lsls	r2, r3, #8
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	4313      	orrs	r3, r2
 800d546:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d54a:	3301      	adds	r3, #1
 800d54c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d550:	3b01      	subs	r3, #1
 800d552:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	041a      	lsls	r2, r3, #16
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	4313      	orrs	r3, r2
 800d55e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d562:	3301      	adds	r3, #1
 800d564:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d568:	3b01      	subs	r3, #1
 800d56a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d56c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d56e:	781b      	ldrb	r3, [r3, #0]
 800d570:	061a      	lsls	r2, r3, #24
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	4313      	orrs	r3, r2
 800d576:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d57a:	3301      	adds	r3, #1
 800d57c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800d57e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d580:	3b01      	subs	r3, #1
 800d582:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	f107 0214 	add.w	r2, r7, #20
 800d58c:	4611      	mov	r1, r2
 800d58e:	4618      	mov	r0, r3
 800d590:	f001 fe80 	bl	800f294 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d594:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d596:	3301      	adds	r3, #1
 800d598:	643b      	str	r3, [r7, #64]	; 0x40
 800d59a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d59c:	2b07      	cmp	r3, #7
 800d59e:	d9c4      	bls.n	800d52a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d5a0:	f7f9 fbde 	bl	8006d60 <HAL_GetTick>
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5a8:	1ad3      	subs	r3, r2, r3
 800d5aa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d5ac:	429a      	cmp	r2, r3
 800d5ae:	d902      	bls.n	800d5b6 <HAL_SD_WriteBlocks+0x1b6>
 800d5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d112      	bne.n	800d5dc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	4a53      	ldr	r2, [pc, #332]	; (800d708 <HAL_SD_WriteBlocks+0x308>)
 800d5bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5c4:	431a      	orrs	r2, r3
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d5d8:	2303      	movs	r3, #3
 800d5da:	e090      	b.n	800d6fe <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d092      	beq.n	800d510 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d022      	beq.n	800d63e <HAL_SD_WriteBlocks+0x23e>
 800d5f8:	683b      	ldr	r3, [r7, #0]
 800d5fa:	2b01      	cmp	r3, #1
 800d5fc:	d91f      	bls.n	800d63e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d602:	2b03      	cmp	r3, #3
 800d604:	d01b      	beq.n	800d63e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4618      	mov	r0, r3
 800d60c:	f001 ff90 	bl	800f530 <SDMMC_CmdStopTransfer>
 800d610:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d612:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d614:	2b00      	cmp	r3, #0
 800d616:	d012      	beq.n	800d63e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	681b      	ldr	r3, [r3, #0]
 800d61c:	4a3a      	ldr	r2, [pc, #232]	; (800d708 <HAL_SD_WriteBlocks+0x308>)
 800d61e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d624:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d626:	431a      	orrs	r2, r3
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d63a:	2301      	movs	r3, #1
 800d63c:	e05f      	b.n	800d6fe <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d644:	f003 0308 	and.w	r3, r3, #8
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d012      	beq.n	800d672 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a2d      	ldr	r2, [pc, #180]	; (800d708 <HAL_SD_WriteBlocks+0x308>)
 800d652:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d658:	f043 0208 	orr.w	r2, r3, #8
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	2201      	movs	r2, #1
 800d664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d66e:	2301      	movs	r3, #1
 800d670:	e045      	b.n	800d6fe <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d678:	f003 0302 	and.w	r3, r3, #2
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d012      	beq.n	800d6a6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	4a20      	ldr	r2, [pc, #128]	; (800d708 <HAL_SD_WriteBlocks+0x308>)
 800d686:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d68c:	f043 0202 	orr.w	r2, r3, #2
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2201      	movs	r2, #1
 800d698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d6a2:	2301      	movs	r3, #1
 800d6a4:	e02b      	b.n	800d6fe <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ac:	f003 0310 	and.w	r3, r3, #16
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d012      	beq.n	800d6da <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	4a13      	ldr	r2, [pc, #76]	; (800d708 <HAL_SD_WriteBlocks+0x308>)
 800d6ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6c0:	f043 0210 	orr.w	r2, r3, #16
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	e011      	b.n	800d6fe <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f240 523a 	movw	r2, #1338	; 0x53a
 800d6e2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2201      	movs	r2, #1
 800d6e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	e006      	b.n	800d6fe <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d6fc:	2301      	movs	r3, #1
  }
}
 800d6fe:	4618      	mov	r0, r3
 800d700:	3748      	adds	r7, #72	; 0x48
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	004005ff 	.word	0x004005ff

0800d70c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	b08c      	sub	sp, #48	; 0x30
 800d710:	af00      	add	r7, sp, #0
 800d712:	60f8      	str	r0, [r7, #12]
 800d714:	60b9      	str	r1, [r7, #8]
 800d716:	607a      	str	r2, [r7, #4]
 800d718:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d71e:	68bb      	ldr	r3, [r7, #8]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d107      	bne.n	800d734 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d728:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d730:	2301      	movs	r3, #1
 800d732:	e0be      	b.n	800d8b2 <HAL_SD_ReadBlocks_DMA+0x1a6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	2b01      	cmp	r3, #1
 800d73e:	f040 80b7 	bne.w	800d8b0 <HAL_SD_ReadBlocks_DMA+0x1a4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	2200      	movs	r2, #0
 800d746:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d748:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	441a      	add	r2, r3
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d752:	429a      	cmp	r2, r3
 800d754:	d907      	bls.n	800d766 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d75a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d762:	2301      	movs	r3, #1
 800d764:	e0a5      	b.n	800d8b2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2203      	movs	r2, #3
 800d76a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2200      	movs	r2, #0
 800d774:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d784:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d78a:	4a4c      	ldr	r2, [pc, #304]	; (800d8bc <HAL_SD_ReadBlocks_DMA+0x1b0>)
 800d78c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d792:	4a4b      	ldr	r2, [pc, #300]	; (800d8c0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 800d794:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d79a:	2200      	movs	r2, #0
 800d79c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7b6:	689a      	ldr	r2, [r3, #8]
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	430a      	orrs	r2, r1
 800d7c0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	3380      	adds	r3, #128	; 0x80
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	68ba      	ldr	r2, [r7, #8]
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	025b      	lsls	r3, r3, #9
 800d7d4:	089b      	lsrs	r3, r3, #2
 800d7d6:	f7fa ff93 	bl	8008700 <HAL_DMA_Start_IT>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d017      	beq.n	800d810 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800d7ee:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	4a33      	ldr	r2, [pc, #204]	; (800d8c4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d7f6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d80c:	2301      	movs	r3, #1
 800d80e:	e050      	b.n	800d8b2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800d810:	4b2d      	ldr	r3, [pc, #180]	; (800d8c8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800d812:	2201      	movs	r2, #1
 800d814:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d002      	beq.n	800d824 <HAL_SD_ReadBlocks_DMA+0x118>
      {
        add *= 512U;
 800d81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d820:	025b      	lsls	r3, r3, #9
 800d822:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d824:	f04f 33ff 	mov.w	r3, #4294967295
 800d828:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	025b      	lsls	r3, r3, #9
 800d82e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800d830:	2390      	movs	r3, #144	; 0x90
 800d832:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800d834:	2302      	movs	r3, #2
 800d836:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800d838:	2300      	movs	r3, #0
 800d83a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800d83c:	2301      	movs	r3, #1
 800d83e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	f107 0210 	add.w	r2, r7, #16
 800d848:	4611      	mov	r1, r2
 800d84a:	4618      	mov	r0, r3
 800d84c:	f001 fd99 	bl	800f382 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d90a      	bls.n	800d86c <HAL_SD_ReadBlocks_DMA+0x160>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2282      	movs	r2, #130	; 0x82
 800d85a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d862:	4618      	mov	r0, r3
 800d864:	f001 fdfd 	bl	800f462 <SDMMC_CmdReadMultiBlock>
 800d868:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d86a:	e009      	b.n	800d880 <HAL_SD_ReadBlocks_DMA+0x174>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	2281      	movs	r2, #129	; 0x81
 800d870:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d878:	4618      	mov	r0, r3
 800d87a:	f001 fdd0 	bl	800f41e <SDMMC_CmdReadSingleBlock>
 800d87e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800d880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d882:	2b00      	cmp	r3, #0
 800d884:	d012      	beq.n	800d8ac <HAL_SD_ReadBlocks_DMA+0x1a0>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	4a0e      	ldr	r2, [pc, #56]	; (800d8c4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800d88c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d894:	431a      	orrs	r2, r3
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2201      	movs	r2, #1
 800d89e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	e002      	b.n	800d8b2 <HAL_SD_ReadBlocks_DMA+0x1a6>
      }

      return HAL_OK;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	e000      	b.n	800d8b2 <HAL_SD_ReadBlocks_DMA+0x1a6>
    }
  }
  else
  {
    return HAL_BUSY;
 800d8b0:	2302      	movs	r3, #2
  }
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3730      	adds	r7, #48	; 0x30
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	0800e2cf 	.word	0x0800e2cf
 800d8c0:	0800e341 	.word	0x0800e341
 800d8c4:	004005ff 	.word	0x004005ff
 800d8c8:	4225858c 	.word	0x4225858c

0800d8cc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08c      	sub	sp, #48	; 0x30
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
 800d8d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d107      	bne.n	800d8f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	e0c1      	b.n	800da78 <HAL_SD_WriteBlocks_DMA+0x1ac>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8fa:	b2db      	uxtb	r3, r3
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	f040 80ba 	bne.w	800da76 <HAL_SD_WriteBlocks_DMA+0x1aa>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	2200      	movs	r2, #0
 800d906:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d908:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	441a      	add	r2, r3
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d912:	429a      	cmp	r2, r3
 800d914:	d907      	bls.n	800d926 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d91a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d922:	2301      	movs	r3, #1
 800d924:	e0a8      	b.n	800da78 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2203      	movs	r2, #3
 800d92a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2200      	movs	r2, #0
 800d934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	f042 021a 	orr.w	r2, r2, #26
 800d944:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d94a:	4a4d      	ldr	r2, [pc, #308]	; (800da80 <HAL_SD_WriteBlocks_DMA+0x1b4>)
 800d94c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d952:	4a4c      	ldr	r2, [pc, #304]	; (800da84 <HAL_SD_WriteBlocks_DMA+0x1b8>)
 800d954:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800d956:	68fb      	ldr	r3, [r7, #12]
 800d958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d95a:	2200      	movs	r2, #0
 800d95c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d962:	2b01      	cmp	r3, #1
 800d964:	d002      	beq.n	800d96c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800d966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d968:	025b      	lsls	r3, r3, #9
 800d96a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d90a      	bls.n	800d988 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	22a0      	movs	r2, #160	; 0xa0
 800d976:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d97e:	4618      	mov	r0, r3
 800d980:	f001 fdb3 	bl	800f4ea <SDMMC_CmdWriteMultiBlock>
 800d984:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d986:	e009      	b.n	800d99c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	2290      	movs	r2, #144	; 0x90
 800d98c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d994:	4618      	mov	r0, r3
 800d996:	f001 fd86 	bl	800f4a6 <SDMMC_CmdWriteSingleBlock>
 800d99a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d012      	beq.n	800d9c8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	4a38      	ldr	r2, [pc, #224]	; (800da88 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800d9a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9b0:	431a      	orrs	r2, r3
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	2201      	movs	r2, #1
 800d9ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e057      	b.n	800da78 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800d9c8:	4b30      	ldr	r3, [pc, #192]	; (800da8c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800d9ca:	2201      	movs	r2, #1
 800d9cc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9d2:	2240      	movs	r2, #64	; 0x40
 800d9d4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9e6:	689a      	ldr	r2, [r3, #8]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	430a      	orrs	r2, r1
 800d9f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d9f6:	68b9      	ldr	r1, [r7, #8]
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	3380      	adds	r3, #128	; 0x80
 800d9fe:	461a      	mov	r2, r3
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	025b      	lsls	r3, r3, #9
 800da04:	089b      	lsrs	r3, r3, #2
 800da06:	f7fa fe7b 	bl	8008700 <HAL_DMA_Start_IT>
 800da0a:	4603      	mov	r3, r0
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d01a      	beq.n	800da46 <HAL_SD_WriteBlocks_DMA+0x17a>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	f022 021a 	bic.w	r2, r2, #26
 800da1e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a18      	ldr	r2, [pc, #96]	; (800da88 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800da26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2201      	movs	r2, #1
 800da38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2200      	movs	r2, #0
 800da40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800da42:	2301      	movs	r3, #1
 800da44:	e018      	b.n	800da78 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da46:	f04f 33ff 	mov.w	r3, #4294967295
 800da4a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800da4c:	683b      	ldr	r3, [r7, #0]
 800da4e:	025b      	lsls	r3, r3, #9
 800da50:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800da52:	2390      	movs	r3, #144	; 0x90
 800da54:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800da56:	2300      	movs	r3, #0
 800da58:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800da5a:	2300      	movs	r3, #0
 800da5c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800da5e:	2301      	movs	r3, #1
 800da60:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	f107 0210 	add.w	r2, r7, #16
 800da6a:	4611      	mov	r1, r2
 800da6c:	4618      	mov	r0, r3
 800da6e:	f001 fc88 	bl	800f382 <SDIO_ConfigData>

      return HAL_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	e000      	b.n	800da78 <HAL_SD_WriteBlocks_DMA+0x1ac>
    }
  }
  else
  {
    return HAL_BUSY;
 800da76:	2302      	movs	r3, #2
  }
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3730      	adds	r7, #48	; 0x30
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}
 800da80:	0800e2a5 	.word	0x0800e2a5
 800da84:	0800e341 	.word	0x0800e341
 800da88:	004005ff 	.word	0x004005ff
 800da8c:	4225858c 	.word	0x4225858c

0800da90 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b084      	sub	sp, #16
 800da94:	af00      	add	r7, sp, #0
 800da96:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da9c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d008      	beq.n	800dabe <HAL_SD_IRQHandler+0x2e>
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	f003 0308 	and.w	r3, r3, #8
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d003      	beq.n	800dabe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 ffef 	bl	800ea9a <SD_Read_IT>
 800dabc:	e155      	b.n	800dd6a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 808f 	beq.w	800dbec <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dad6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dade:	687a      	ldr	r2, [r7, #4]
 800dae0:	6812      	ldr	r2, [r2, #0]
 800dae2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800dae6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800daea:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f022 0201 	bic.w	r2, r2, #1
 800dafa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f003 0308 	and.w	r3, r3, #8
 800db02:	2b00      	cmp	r3, #0
 800db04:	d039      	beq.n	800db7a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	f003 0302 	and.w	r3, r3, #2
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d104      	bne.n	800db1a <HAL_SD_IRQHandler+0x8a>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f003 0320 	and.w	r3, r3, #32
 800db16:	2b00      	cmp	r3, #0
 800db18:	d011      	beq.n	800db3e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	4618      	mov	r0, r3
 800db20:	f001 fd06 	bl	800f530 <SDMMC_CmdStopTransfer>
 800db24:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d008      	beq.n	800db3e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	431a      	orrs	r2, r3
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 f91f 	bl	800dd7c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	f240 523a 	movw	r2, #1338	; 0x53a
 800db46:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2201      	movs	r2, #1
 800db4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2200      	movs	r2, #0
 800db54:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	f003 0301 	and.w	r3, r3, #1
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d104      	bne.n	800db6a <HAL_SD_IRQHandler+0xda>
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f003 0302 	and.w	r3, r3, #2
 800db66:	2b00      	cmp	r3, #0
 800db68:	d003      	beq.n	800db72 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f003 fde8 	bl	8011740 <HAL_SD_RxCpltCallback>
 800db70:	e0fb      	b.n	800dd6a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800db72:	6878      	ldr	r0, [r7, #4]
 800db74:	f003 fdda 	bl	801172c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800db78:	e0f7      	b.n	800dd6a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db80:	2b00      	cmp	r3, #0
 800db82:	f000 80f2 	beq.w	800dd6a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	f003 0320 	and.w	r3, r3, #32
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d011      	beq.n	800dbb4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4618      	mov	r0, r3
 800db96:	f001 fccb 	bl	800f530 <SDMMC_CmdStopTransfer>
 800db9a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d008      	beq.n	800dbb4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	431a      	orrs	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 f8e4 	bl	800dd7c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	f003 0301 	and.w	r3, r3, #1
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	f040 80d5 	bne.w	800dd6a <HAL_SD_IRQHandler+0x2da>
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f003 0302 	and.w	r3, r3, #2
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	f040 80cf 	bne.w	800dd6a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f022 0208 	bic.w	r2, r2, #8
 800dbda:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2201      	movs	r2, #1
 800dbe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800dbe4:	6878      	ldr	r0, [r7, #4]
 800dbe6:	f003 fda1 	bl	801172c <HAL_SD_TxCpltCallback>
}
 800dbea:	e0be      	b.n	800dd6a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d008      	beq.n	800dc0c <HAL_SD_IRQHandler+0x17c>
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	f003 0308 	and.w	r3, r3, #8
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d003      	beq.n	800dc0c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	f000 ff99 	bl	800eb3c <SD_Write_IT>
 800dc0a:	e0ae      	b.n	800dd6a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc12:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f000 80a7 	beq.w	800dd6a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc22:	f003 0302 	and.w	r3, r3, #2
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d005      	beq.n	800dc36 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc2e:	f043 0202 	orr.w	r2, r3, #2
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc3c:	f003 0308 	and.w	r3, r3, #8
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d005      	beq.n	800dc50 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc48:	f043 0208 	orr.w	r2, r3, #8
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc56:	f003 0320 	and.w	r3, r3, #32
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d005      	beq.n	800dc6a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc62:	f043 0220 	orr.w	r2, r3, #32
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc70:	f003 0310 	and.w	r3, r3, #16
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d005      	beq.n	800dc84 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7c:	f043 0210 	orr.w	r2, r3, #16
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	f240 523a 	movw	r2, #1338	; 0x53a
 800dc8c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dc9c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	4618      	mov	r0, r3
 800dca4:	f001 fc44 	bl	800f530 <SDMMC_CmdStopTransfer>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcae:	431a      	orrs	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f003 0308 	and.w	r3, r3, #8
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d00a      	beq.n	800dcd4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2201      	movs	r2, #1
 800dcc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 f855 	bl	800dd7c <HAL_SD_ErrorCallback>
}
 800dcd2:	e04a      	b.n	800dd6a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d045      	beq.n	800dd6a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	f003 0310 	and.w	r3, r3, #16
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d104      	bne.n	800dcf2 <HAL_SD_IRQHandler+0x262>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f003 0320 	and.w	r3, r3, #32
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d011      	beq.n	800dd16 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcf6:	4a1f      	ldr	r2, [pc, #124]	; (800dd74 <HAL_SD_IRQHandler+0x2e4>)
 800dcf8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcfe:	4618      	mov	r0, r3
 800dd00:	f7fa fd56 	bl	80087b0 <HAL_DMA_Abort_IT>
 800dd04:	4603      	mov	r3, r0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d02f      	beq.n	800dd6a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd0e:	4618      	mov	r0, r3
 800dd10:	f000 fb68 	bl	800e3e4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800dd14:	e029      	b.n	800dd6a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	f003 0301 	and.w	r3, r3, #1
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d104      	bne.n	800dd2a <HAL_SD_IRQHandler+0x29a>
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f003 0302 	and.w	r3, r3, #2
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d011      	beq.n	800dd4e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd2e:	4a12      	ldr	r2, [pc, #72]	; (800dd78 <HAL_SD_IRQHandler+0x2e8>)
 800dd30:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd36:	4618      	mov	r0, r3
 800dd38:	f7fa fd3a 	bl	80087b0 <HAL_DMA_Abort_IT>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d013      	beq.n	800dd6a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 fb83 	bl	800e452 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800dd4c:	e00d      	b.n	800dd6a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2201      	movs	r2, #1
 800dd58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	2200      	movs	r2, #0
 800dd60:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f003 fcd8 	bl	8011718 <HAL_SD_AbortCallback>
}
 800dd68:	e7ff      	b.n	800dd6a <HAL_SD_IRQHandler+0x2da>
 800dd6a:	bf00      	nop
 800dd6c:	3710      	adds	r7, #16
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	0800e3e5 	.word	0x0800e3e5
 800dd78:	0800e453 	.word	0x0800e453

0800dd7c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b083      	sub	sp, #12
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800dd84:	bf00      	nop
 800dd86:	370c      	adds	r7, #12
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd8e:	4770      	bx	lr

0800dd90 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800dd90:	b480      	push	{r7}
 800dd92:	b083      	sub	sp, #12
 800dd94:	af00      	add	r7, sp, #0
 800dd96:	6078      	str	r0, [r7, #4]
 800dd98:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd9e:	0f9b      	lsrs	r3, r3, #30
 800dda0:	b2da      	uxtb	r2, r3
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddaa:	0e9b      	lsrs	r3, r3, #26
 800ddac:	b2db      	uxtb	r3, r3
 800ddae:	f003 030f 	and.w	r3, r3, #15
 800ddb2:	b2da      	uxtb	r2, r3
 800ddb4:	683b      	ldr	r3, [r7, #0]
 800ddb6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddbc:	0e1b      	lsrs	r3, r3, #24
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	f003 0303 	and.w	r3, r3, #3
 800ddc4:	b2da      	uxtb	r2, r3
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddce:	0c1b      	lsrs	r3, r3, #16
 800ddd0:	b2da      	uxtb	r2, r3
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ddda:	0a1b      	lsrs	r3, r3, #8
 800dddc:	b2da      	uxtb	r2, r3
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dde6:	b2da      	uxtb	r2, r3
 800dde8:	683b      	ldr	r3, [r7, #0]
 800ddea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ddf0:	0d1b      	lsrs	r3, r3, #20
 800ddf2:	b29a      	uxth	r2, r3
 800ddf4:	683b      	ldr	r3, [r7, #0]
 800ddf6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ddfc:	0c1b      	lsrs	r3, r3, #16
 800ddfe:	b2db      	uxtb	r3, r3
 800de00:	f003 030f 	and.w	r3, r3, #15
 800de04:	b2da      	uxtb	r2, r3
 800de06:	683b      	ldr	r3, [r7, #0]
 800de08:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de0e:	0bdb      	lsrs	r3, r3, #15
 800de10:	b2db      	uxtb	r3, r3
 800de12:	f003 0301 	and.w	r3, r3, #1
 800de16:	b2da      	uxtb	r2, r3
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de20:	0b9b      	lsrs	r3, r3, #14
 800de22:	b2db      	uxtb	r3, r3
 800de24:	f003 0301 	and.w	r3, r3, #1
 800de28:	b2da      	uxtb	r2, r3
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de32:	0b5b      	lsrs	r3, r3, #13
 800de34:	b2db      	uxtb	r3, r3
 800de36:	f003 0301 	and.w	r3, r3, #1
 800de3a:	b2da      	uxtb	r2, r3
 800de3c:	683b      	ldr	r3, [r7, #0]
 800de3e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de44:	0b1b      	lsrs	r3, r3, #12
 800de46:	b2db      	uxtb	r3, r3
 800de48:	f003 0301 	and.w	r3, r3, #1
 800de4c:	b2da      	uxtb	r2, r3
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	2200      	movs	r2, #0
 800de56:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d163      	bne.n	800df28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800de64:	009a      	lsls	r2, r3, #2
 800de66:	f640 73fc 	movw	r3, #4092	; 0xffc
 800de6a:	4013      	ands	r3, r2
 800de6c:	687a      	ldr	r2, [r7, #4]
 800de6e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800de70:	0f92      	lsrs	r2, r2, #30
 800de72:	431a      	orrs	r2, r3
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de7c:	0edb      	lsrs	r3, r3, #27
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	f003 0307 	and.w	r3, r3, #7
 800de84:	b2da      	uxtb	r2, r3
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de8e:	0e1b      	lsrs	r3, r3, #24
 800de90:	b2db      	uxtb	r3, r3
 800de92:	f003 0307 	and.w	r3, r3, #7
 800de96:	b2da      	uxtb	r2, r3
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dea0:	0d5b      	lsrs	r3, r3, #21
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	f003 0307 	and.w	r3, r3, #7
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800deb2:	0c9b      	lsrs	r3, r3, #18
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	f003 0307 	and.w	r3, r3, #7
 800deba:	b2da      	uxtb	r2, r3
 800debc:	683b      	ldr	r3, [r7, #0]
 800debe:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dec4:	0bdb      	lsrs	r3, r3, #15
 800dec6:	b2db      	uxtb	r3, r3
 800dec8:	f003 0307 	and.w	r3, r3, #7
 800decc:	b2da      	uxtb	r2, r3
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	691b      	ldr	r3, [r3, #16]
 800ded6:	1c5a      	adds	r2, r3, #1
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	7e1b      	ldrb	r3, [r3, #24]
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	f003 0307 	and.w	r3, r3, #7
 800dee6:	3302      	adds	r3, #2
 800dee8:	2201      	movs	r2, #1
 800deea:	fa02 f303 	lsl.w	r3, r2, r3
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800def2:	fb03 f202 	mul.w	r2, r3, r2
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800defa:	683b      	ldr	r3, [r7, #0]
 800defc:	7a1b      	ldrb	r3, [r3, #8]
 800defe:	b2db      	uxtb	r3, r3
 800df00:	f003 030f 	and.w	r3, r3, #15
 800df04:	2201      	movs	r2, #1
 800df06:	409a      	lsls	r2, r3
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df10:	687a      	ldr	r2, [r7, #4]
 800df12:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800df14:	0a52      	lsrs	r2, r2, #9
 800df16:	fb03 f202 	mul.w	r2, r3, r2
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df24:	661a      	str	r2, [r3, #96]	; 0x60
 800df26:	e031      	b.n	800df8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d11d      	bne.n	800df6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800df34:	041b      	lsls	r3, r3, #16
 800df36:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df3e:	0c1b      	lsrs	r3, r3, #16
 800df40:	431a      	orrs	r2, r3
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	691b      	ldr	r3, [r3, #16]
 800df4a:	3301      	adds	r3, #1
 800df4c:	029a      	lsls	r2, r3, #10
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df60:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	661a      	str	r2, [r3, #96]	; 0x60
 800df6a:	e00f      	b.n	800df8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	4a58      	ldr	r2, [pc, #352]	; (800e0d4 <HAL_SD_GetCardCSD+0x344>)
 800df72:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df78:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2201      	movs	r2, #1
 800df84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800df88:	2301      	movs	r3, #1
 800df8a:	e09d      	b.n	800e0c8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df90:	0b9b      	lsrs	r3, r3, #14
 800df92:	b2db      	uxtb	r3, r3
 800df94:	f003 0301 	and.w	r3, r3, #1
 800df98:	b2da      	uxtb	r2, r3
 800df9a:	683b      	ldr	r3, [r7, #0]
 800df9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfa2:	09db      	lsrs	r3, r3, #7
 800dfa4:	b2db      	uxtb	r3, r3
 800dfa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfaa:	b2da      	uxtb	r2, r3
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfb4:	b2db      	uxtb	r3, r3
 800dfb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfc4:	0fdb      	lsrs	r3, r3, #31
 800dfc6:	b2da      	uxtb	r2, r3
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfd0:	0f5b      	lsrs	r3, r3, #29
 800dfd2:	b2db      	uxtb	r3, r3
 800dfd4:	f003 0303 	and.w	r3, r3, #3
 800dfd8:	b2da      	uxtb	r2, r3
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfe2:	0e9b      	lsrs	r3, r3, #26
 800dfe4:	b2db      	uxtb	r3, r3
 800dfe6:	f003 0307 	and.w	r3, r3, #7
 800dfea:	b2da      	uxtb	r2, r3
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dff4:	0d9b      	lsrs	r3, r3, #22
 800dff6:	b2db      	uxtb	r3, r3
 800dff8:	f003 030f 	and.w	r3, r3, #15
 800dffc:	b2da      	uxtb	r2, r3
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e006:	0d5b      	lsrs	r3, r3, #21
 800e008:	b2db      	uxtb	r3, r3
 800e00a:	f003 0301 	and.w	r3, r3, #1
 800e00e:	b2da      	uxtb	r2, r3
 800e010:	683b      	ldr	r3, [r7, #0]
 800e012:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e016:	683b      	ldr	r3, [r7, #0]
 800e018:	2200      	movs	r2, #0
 800e01a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e022:	0c1b      	lsrs	r3, r3, #16
 800e024:	b2db      	uxtb	r3, r3
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e036:	0bdb      	lsrs	r3, r3, #15
 800e038:	b2db      	uxtb	r3, r3
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	b2da      	uxtb	r2, r3
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e04a:	0b9b      	lsrs	r3, r3, #14
 800e04c:	b2db      	uxtb	r3, r3
 800e04e:	f003 0301 	and.w	r3, r3, #1
 800e052:	b2da      	uxtb	r2, r3
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e05e:	0b5b      	lsrs	r3, r3, #13
 800e060:	b2db      	uxtb	r3, r3
 800e062:	f003 0301 	and.w	r3, r3, #1
 800e066:	b2da      	uxtb	r2, r3
 800e068:	683b      	ldr	r3, [r7, #0]
 800e06a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e072:	0b1b      	lsrs	r3, r3, #12
 800e074:	b2db      	uxtb	r3, r3
 800e076:	f003 0301 	and.w	r3, r3, #1
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e086:	0a9b      	lsrs	r3, r3, #10
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	f003 0303 	and.w	r3, r3, #3
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e09a:	0a1b      	lsrs	r3, r3, #8
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	f003 0303 	and.w	r3, r3, #3
 800e0a2:	b2da      	uxtb	r2, r3
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ae:	085b      	lsrs	r3, r3, #1
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e0c6:	2300      	movs	r3, #0
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	370c      	adds	r7, #12
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	004005ff 	.word	0x004005ff

0800e0d8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e0d8:	b480      	push	{r7}
 800e0da:	b083      	sub	sp, #12
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e122:	2300      	movs	r3, #0
}
 800e124:	4618      	mov	r0, r3
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e12e:	4770      	bx	lr

0800e130 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e130:	b5b0      	push	{r4, r5, r7, lr}
 800e132:	b08e      	sub	sp, #56	; 0x38
 800e134:	af04      	add	r7, sp, #16
 800e136:	6078      	str	r0, [r7, #4]
 800e138:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e13a:	2300      	movs	r3, #0
 800e13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2203      	movs	r2, #3
 800e144:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e14c:	2b03      	cmp	r3, #3
 800e14e:	d02e      	beq.n	800e1ae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800e150:	683b      	ldr	r3, [r7, #0]
 800e152:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e156:	d106      	bne.n	800e166 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e15c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	639a      	str	r2, [r3, #56]	; 0x38
 800e164:	e029      	b.n	800e1ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800e166:	683b      	ldr	r3, [r7, #0]
 800e168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e16c:	d10a      	bne.n	800e184 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e16e:	6878      	ldr	r0, [r7, #4]
 800e170:	f000 fb2a 	bl	800e7c8 <SD_WideBus_Enable>
 800e174:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e17a:	6a3b      	ldr	r3, [r7, #32]
 800e17c:	431a      	orrs	r2, r3
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	639a      	str	r2, [r3, #56]	; 0x38
 800e182:	e01a      	b.n	800e1ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800e184:	683b      	ldr	r3, [r7, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	d10a      	bne.n	800e1a0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 fb67 	bl	800e85e <SD_WideBus_Disable>
 800e190:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e196:	6a3b      	ldr	r3, [r7, #32]
 800e198:	431a      	orrs	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	639a      	str	r2, [r3, #56]	; 0x38
 800e19e:	e00c      	b.n	800e1ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	639a      	str	r2, [r3, #56]	; 0x38
 800e1ac:	e005      	b.n	800e1ba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1b2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d00b      	beq.n	800e1da <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	4a26      	ldr	r2, [pc, #152]	; (800e260 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e1c8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e1d2:	2301      	movs	r3, #1
 800e1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e1d8:	e01f      	b.n	800e21a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685b      	ldr	r3, [r3, #4]
 800e1de:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	689b      	ldr	r3, [r3, #8]
 800e1e4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	68db      	ldr	r3, [r3, #12]
 800e1ea:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	695b      	ldr	r3, [r3, #20]
 800e1f4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	699b      	ldr	r3, [r3, #24]
 800e1fa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681d      	ldr	r5, [r3, #0]
 800e200:	466c      	mov	r4, sp
 800e202:	f107 0314 	add.w	r3, r7, #20
 800e206:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e20a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e20e:	f107 0308 	add.w	r3, r7, #8
 800e212:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e214:	4628      	mov	r0, r5
 800e216:	f001 f805 	bl	800f224 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e222:	4618      	mov	r0, r3
 800e224:	f001 f8d9 	bl	800f3da <SDMMC_CmdBlockLength>
 800e228:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d00c      	beq.n	800e24a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	4a0a      	ldr	r2, [pc, #40]	; (800e260 <HAL_SD_ConfigWideBusOperation+0x130>)
 800e236:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e23c:	6a3b      	ldr	r3, [r7, #32]
 800e23e:	431a      	orrs	r2, r3
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e244:	2301      	movs	r3, #1
 800e246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	2201      	movs	r2, #1
 800e24e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e256:	4618      	mov	r0, r3
 800e258:	3728      	adds	r7, #40	; 0x28
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bdb0      	pop	{r4, r5, r7, pc}
 800e25e:	bf00      	nop
 800e260:	004005ff 	.word	0x004005ff

0800e264 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e264:	b580      	push	{r7, lr}
 800e266:	b086      	sub	sp, #24
 800e268:	af00      	add	r7, sp, #0
 800e26a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e26c:	2300      	movs	r3, #0
 800e26e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e270:	f107 030c 	add.w	r3, r7, #12
 800e274:	4619      	mov	r1, r3
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 fa7e 	bl	800e778 <SD_SendStatus>
 800e27c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e27e:	697b      	ldr	r3, [r7, #20]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d005      	beq.n	800e290 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	431a      	orrs	r2, r3
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	0a5b      	lsrs	r3, r3, #9
 800e294:	f003 030f 	and.w	r3, r3, #15
 800e298:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e29a:	693b      	ldr	r3, [r7, #16]
}
 800e29c:	4618      	mov	r0, r3
 800e29e:	3718      	adds	r7, #24
 800e2a0:	46bd      	mov	sp, r7
 800e2a2:	bd80      	pop	{r7, pc}

0800e2a4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2b0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e2c0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800e2c2:	bf00      	nop
 800e2c4:	3714      	adds	r7, #20
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2cc:	4770      	bx	lr

0800e2ce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e2ce:	b580      	push	{r7, lr}
 800e2d0:	b084      	sub	sp, #16
 800e2d2:	af00      	add	r7, sp, #0
 800e2d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e2da:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2e0:	2b82      	cmp	r3, #130	; 0x82
 800e2e2:	d111      	bne.n	800e308 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f001 f921 	bl	800f530 <SDMMC_CmdStopTransfer>
 800e2ee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e2f0:	68bb      	ldr	r3, [r7, #8]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d008      	beq.n	800e308 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	431a      	orrs	r2, r3
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800e302:	68f8      	ldr	r0, [r7, #12]
 800e304:	f7ff fd3a 	bl	800dd7c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	f022 0208 	bic.w	r2, r2, #8
 800e316:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	f240 523a 	movw	r2, #1338	; 0x53a
 800e320:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2201      	movs	r2, #1
 800e326:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	2200      	movs	r2, #0
 800e32e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800e330:	68f8      	ldr	r0, [r7, #12]
 800e332:	f003 fa05 	bl	8011740 <HAL_SD_RxCpltCallback>
#endif
}
 800e336:	bf00      	nop
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
	...

0800e340 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e34c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e34e:	6878      	ldr	r0, [r7, #4]
 800e350:	f7fa fbda 	bl	8008b08 <HAL_DMA_GetError>
 800e354:	4603      	mov	r3, r0
 800e356:	2b02      	cmp	r3, #2
 800e358:	d03e      	beq.n	800e3d8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e35e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e360:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e368:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d002      	beq.n	800e376 <SD_DMAError+0x36>
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	2b01      	cmp	r3, #1
 800e374:	d12d      	bne.n	800e3d2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800e376:	697b      	ldr	r3, [r7, #20]
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	4a19      	ldr	r2, [pc, #100]	; (800e3e0 <SD_DMAError+0xa0>)
 800e37c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e38c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800e38e:	697b      	ldr	r3, [r7, #20]
 800e390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e392:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e396:	697b      	ldr	r3, [r7, #20]
 800e398:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800e39a:	6978      	ldr	r0, [r7, #20]
 800e39c:	f7ff ff62 	bl	800e264 <HAL_SD_GetCardState>
 800e3a0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	2b06      	cmp	r3, #6
 800e3a6:	d002      	beq.n	800e3ae <SD_DMAError+0x6e>
 800e3a8:	68bb      	ldr	r3, [r7, #8]
 800e3aa:	2b05      	cmp	r3, #5
 800e3ac:	d10a      	bne.n	800e3c4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e3ae:	697b      	ldr	r3, [r7, #20]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f001 f8bc 	bl	800f530 <SDMMC_CmdStopTransfer>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3be:	431a      	orrs	r2, r3
 800e3c0:	697b      	ldr	r3, [r7, #20]
 800e3c2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800e3c4:	697b      	ldr	r3, [r7, #20]
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e3cc:	697b      	ldr	r3, [r7, #20]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800e3d2:	6978      	ldr	r0, [r7, #20]
 800e3d4:	f7ff fcd2 	bl	800dd7c <HAL_SD_ErrorCallback>
#endif
  }
}
 800e3d8:	bf00      	nop
 800e3da:	3718      	adds	r7, #24
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	004005ff 	.word	0x004005ff

0800e3e4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f240 523a 	movw	r2, #1338	; 0x53a
 800e3fa:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e3fc:	68f8      	ldr	r0, [r7, #12]
 800e3fe:	f7ff ff31 	bl	800e264 <HAL_SD_GetCardState>
 800e402:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	2201      	movs	r2, #1
 800e408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e40c:	68fb      	ldr	r3, [r7, #12]
 800e40e:	2200      	movs	r2, #0
 800e410:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e412:	68bb      	ldr	r3, [r7, #8]
 800e414:	2b06      	cmp	r3, #6
 800e416:	d002      	beq.n	800e41e <SD_DMATxAbort+0x3a>
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	2b05      	cmp	r3, #5
 800e41c:	d10a      	bne.n	800e434 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	4618      	mov	r0, r3
 800e424:	f001 f884 	bl	800f530 <SDMMC_CmdStopTransfer>
 800e428:	4602      	mov	r2, r0
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e42e:	431a      	orrs	r2, r3
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d103      	bne.n	800e444 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e43c:	68f8      	ldr	r0, [r7, #12]
 800e43e:	f003 f96b 	bl	8011718 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e442:	e002      	b.n	800e44a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f7ff fc99 	bl	800dd7c <HAL_SD_ErrorCallback>
}
 800e44a:	bf00      	nop
 800e44c:	3710      	adds	r7, #16
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b084      	sub	sp, #16
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e45e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f240 523a 	movw	r2, #1338	; 0x53a
 800e468:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7ff fefa 	bl	800e264 <HAL_SD_GetCardState>
 800e470:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	2201      	movs	r2, #1
 800e476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	2200      	movs	r2, #0
 800e47e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	2b06      	cmp	r3, #6
 800e484:	d002      	beq.n	800e48c <SD_DMARxAbort+0x3a>
 800e486:	68bb      	ldr	r3, [r7, #8]
 800e488:	2b05      	cmp	r3, #5
 800e48a:	d10a      	bne.n	800e4a2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4618      	mov	r0, r3
 800e492:	f001 f84d 	bl	800f530 <SDMMC_CmdStopTransfer>
 800e496:	4602      	mov	r2, r0
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49c:	431a      	orrs	r2, r3
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d103      	bne.n	800e4b2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f003 f934 	bl	8011718 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800e4b0:	e002      	b.n	800e4b8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800e4b2:	68f8      	ldr	r0, [r7, #12]
 800e4b4:	f7ff fc62 	bl	800dd7c <HAL_SD_ErrorCallback>
}
 800e4b8:	bf00      	nop
 800e4ba:	3710      	adds	r7, #16
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	bd80      	pop	{r7, pc}

0800e4c0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e4c0:	b5b0      	push	{r4, r5, r7, lr}
 800e4c2:	b094      	sub	sp, #80	; 0x50
 800e4c4:	af04      	add	r7, sp, #16
 800e4c6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4618      	mov	r0, r3
 800e4d2:	f000 fefe 	bl	800f2d2 <SDIO_GetPowerState>
 800e4d6:	4603      	mov	r3, r0
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d102      	bne.n	800e4e2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e4e0:	e0b8      	b.n	800e654 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4e6:	2b03      	cmp	r3, #3
 800e4e8:	d02f      	beq.n	800e54a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f001 f928 	bl	800f744 <SDMMC_CmdSendCID>
 800e4f4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e4f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <SD_InitCard+0x40>
    {
      return errorstate;
 800e4fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e4fe:	e0a9      	b.n	800e654 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2100      	movs	r1, #0
 800e506:	4618      	mov	r0, r3
 800e508:	f000 ff28 	bl	800f35c <SDIO_GetResponse>
 800e50c:	4602      	mov	r2, r0
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	2104      	movs	r1, #4
 800e518:	4618      	mov	r0, r3
 800e51a:	f000 ff1f 	bl	800f35c <SDIO_GetResponse>
 800e51e:	4602      	mov	r2, r0
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2108      	movs	r1, #8
 800e52a:	4618      	mov	r0, r3
 800e52c:	f000 ff16 	bl	800f35c <SDIO_GetResponse>
 800e530:	4602      	mov	r2, r0
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	210c      	movs	r1, #12
 800e53c:	4618      	mov	r0, r3
 800e53e:	f000 ff0d 	bl	800f35c <SDIO_GetResponse>
 800e542:	4602      	mov	r2, r0
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e54e:	2b03      	cmp	r3, #3
 800e550:	d00d      	beq.n	800e56e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	f107 020e 	add.w	r2, r7, #14
 800e55a:	4611      	mov	r1, r2
 800e55c:	4618      	mov	r0, r3
 800e55e:	f001 f92e 	bl	800f7be <SDMMC_CmdSetRelAdd>
 800e562:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e566:	2b00      	cmp	r3, #0
 800e568:	d001      	beq.n	800e56e <SD_InitCard+0xae>
    {
      return errorstate;
 800e56a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e56c:	e072      	b.n	800e654 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e572:	2b03      	cmp	r3, #3
 800e574:	d036      	beq.n	800e5e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e576:	89fb      	ldrh	r3, [r7, #14]
 800e578:	461a      	mov	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681a      	ldr	r2, [r3, #0]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e586:	041b      	lsls	r3, r3, #16
 800e588:	4619      	mov	r1, r3
 800e58a:	4610      	mov	r0, r2
 800e58c:	f001 f8f8 	bl	800f780 <SDMMC_CmdSendCSD>
 800e590:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e594:	2b00      	cmp	r3, #0
 800e596:	d001      	beq.n	800e59c <SD_InitCard+0xdc>
    {
      return errorstate;
 800e598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e59a:	e05b      	b.n	800e654 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	2100      	movs	r1, #0
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	f000 feda 	bl	800f35c <SDIO_GetResponse>
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2104      	movs	r1, #4
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f000 fed1 	bl	800f35c <SDIO_GetResponse>
 800e5ba:	4602      	mov	r2, r0
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	2108      	movs	r1, #8
 800e5c6:	4618      	mov	r0, r3
 800e5c8:	f000 fec8 	bl	800f35c <SDIO_GetResponse>
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	210c      	movs	r1, #12
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f000 febf 	bl	800f35c <SDIO_GetResponse>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2104      	movs	r1, #4
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f000 feb6 	bl	800f35c <SDIO_GetResponse>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	0d1a      	lsrs	r2, r3, #20
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e5f8:	f107 0310 	add.w	r3, r7, #16
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	6878      	ldr	r0, [r7, #4]
 800e600:	f7ff fbc6 	bl	800dd90 <HAL_SD_GetCardCSD>
 800e604:	4603      	mov	r3, r0
 800e606:	2b00      	cmp	r3, #0
 800e608:	d002      	beq.n	800e610 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e60a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e60e:	e021      	b.n	800e654 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6819      	ldr	r1, [r3, #0]
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e618:	041b      	lsls	r3, r3, #16
 800e61a:	2200      	movs	r2, #0
 800e61c:	461c      	mov	r4, r3
 800e61e:	4615      	mov	r5, r2
 800e620:	4622      	mov	r2, r4
 800e622:	462b      	mov	r3, r5
 800e624:	4608      	mov	r0, r1
 800e626:	f000 ffa5 	bl	800f574 <SDMMC_CmdSelDesel>
 800e62a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d001      	beq.n	800e636 <SD_InitCard+0x176>
  {
    return errorstate;
 800e632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e634:	e00e      	b.n	800e654 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	681d      	ldr	r5, [r3, #0]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	466c      	mov	r4, sp
 800e63e:	f103 0210 	add.w	r2, r3, #16
 800e642:	ca07      	ldmia	r2, {r0, r1, r2}
 800e644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e648:	3304      	adds	r3, #4
 800e64a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e64c:	4628      	mov	r0, r5
 800e64e:	f000 fde9 	bl	800f224 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e652:	2300      	movs	r3, #0
}
 800e654:	4618      	mov	r0, r3
 800e656:	3740      	adds	r7, #64	; 0x40
 800e658:	46bd      	mov	sp, r7
 800e65a:	bdb0      	pop	{r4, r5, r7, pc}

0800e65c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b086      	sub	sp, #24
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e664:	2300      	movs	r3, #0
 800e666:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800e668:	2300      	movs	r3, #0
 800e66a:	617b      	str	r3, [r7, #20]
 800e66c:	2300      	movs	r3, #0
 800e66e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4618      	mov	r0, r3
 800e676:	f000 ffa0 	bl	800f5ba <SDMMC_CmdGoIdleState>
 800e67a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d001      	beq.n	800e686 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	e072      	b.n	800e76c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 ffb3 	bl	800f5f6 <SDMMC_CmdOperCond>
 800e690:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d00d      	beq.n	800e6b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2200      	movs	r2, #0
 800e69c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f000 ff89 	bl	800f5ba <SDMMC_CmdGoIdleState>
 800e6a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d004      	beq.n	800e6ba <SD_PowerON+0x5e>
    {
      return errorstate;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	e05b      	b.n	800e76c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d137      	bne.n	800e732 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f000 ffb3 	bl	800f634 <SDMMC_CmdAppCommand>
 800e6ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d02d      	beq.n	800e732 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e6d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e6da:	e047      	b.n	800e76c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	2100      	movs	r1, #0
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f000 ffa6 	bl	800f634 <SDMMC_CmdAppCommand>
 800e6e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d001      	beq.n	800e6f4 <SD_PowerON+0x98>
    {
      return errorstate;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	e03b      	b.n	800e76c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	491e      	ldr	r1, [pc, #120]	; (800e774 <SD_PowerON+0x118>)
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f000 ffbc 	bl	800f678 <SDMMC_CmdAppOperCommand>
 800e700:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d002      	beq.n	800e70e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e708:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e70c:	e02e      	b.n	800e76c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2100      	movs	r1, #0
 800e714:	4618      	mov	r0, r3
 800e716:	f000 fe21 	bl	800f35c <SDIO_GetResponse>
 800e71a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e71c:	697b      	ldr	r3, [r7, #20]
 800e71e:	0fdb      	lsrs	r3, r3, #31
 800e720:	2b01      	cmp	r3, #1
 800e722:	d101      	bne.n	800e728 <SD_PowerON+0xcc>
 800e724:	2301      	movs	r3, #1
 800e726:	e000      	b.n	800e72a <SD_PowerON+0xce>
 800e728:	2300      	movs	r3, #0
 800e72a:	613b      	str	r3, [r7, #16]

    count++;
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	3301      	adds	r3, #1
 800e730:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e738:	4293      	cmp	r3, r2
 800e73a:	d802      	bhi.n	800e742 <SD_PowerON+0xe6>
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d0cc      	beq.n	800e6dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e748:	4293      	cmp	r3, r2
 800e74a:	d902      	bls.n	800e752 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e74c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e750:	e00c      	b.n	800e76c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e752:	697b      	ldr	r3, [r7, #20]
 800e754:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d003      	beq.n	800e764 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2201      	movs	r2, #1
 800e760:	645a      	str	r2, [r3, #68]	; 0x44
 800e762:	e002      	b.n	800e76a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2200      	movs	r2, #0
 800e768:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800e76a:	2300      	movs	r3, #0
}
 800e76c:	4618      	mov	r0, r3
 800e76e:	3718      	adds	r7, #24
 800e770:	46bd      	mov	sp, r7
 800e772:	bd80      	pop	{r7, pc}
 800e774:	c1100000 	.word	0xc1100000

0800e778 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
 800e780:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e782:	683b      	ldr	r3, [r7, #0]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d102      	bne.n	800e78e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e788:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e78c:	e018      	b.n	800e7c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681a      	ldr	r2, [r3, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e796:	041b      	lsls	r3, r3, #16
 800e798:	4619      	mov	r1, r3
 800e79a:	4610      	mov	r0, r2
 800e79c:	f001 f830 	bl	800f800 <SDMMC_CmdSendStatus>
 800e7a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d001      	beq.n	800e7ac <SD_SendStatus+0x34>
  {
    return errorstate;
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	e009      	b.n	800e7c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	2100      	movs	r1, #0
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f000 fdd2 	bl	800f35c <SDIO_GetResponse>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	683b      	ldr	r3, [r7, #0]
 800e7bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e7be:	2300      	movs	r3, #0
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3710      	adds	r7, #16
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	60fb      	str	r3, [r7, #12]
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2100      	movs	r1, #0
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f000 fdbc 	bl	800f35c <SDIO_GetResponse>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e7ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e7ee:	d102      	bne.n	800e7f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e7f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e7f4:	e02f      	b.n	800e856 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e7f6:	f107 030c 	add.w	r3, r7, #12
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 f879 	bl	800e8f4 <SD_FindSCR>
 800e802:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e804:	697b      	ldr	r3, [r7, #20]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d001      	beq.n	800e80e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e80a:	697b      	ldr	r3, [r7, #20]
 800e80c:	e023      	b.n	800e856 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e814:	2b00      	cmp	r3, #0
 800e816:	d01c      	beq.n	800e852 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e820:	041b      	lsls	r3, r3, #16
 800e822:	4619      	mov	r1, r3
 800e824:	4610      	mov	r0, r2
 800e826:	f000 ff05 	bl	800f634 <SDMMC_CmdAppCommand>
 800e82a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d001      	beq.n	800e836 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	e00f      	b.n	800e856 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2102      	movs	r1, #2
 800e83c:	4618      	mov	r0, r3
 800e83e:	f000 ff3e 	bl	800f6be <SDMMC_CmdBusWidth>
 800e842:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e844:	697b      	ldr	r3, [r7, #20]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d001      	beq.n	800e84e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e84a:	697b      	ldr	r3, [r7, #20]
 800e84c:	e003      	b.n	800e856 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e84e:	2300      	movs	r3, #0
 800e850:	e001      	b.n	800e856 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e852:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e856:	4618      	mov	r0, r3
 800e858:	3718      	adds	r7, #24
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}

0800e85e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e85e:	b580      	push	{r7, lr}
 800e860:	b086      	sub	sp, #24
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800e866:	2300      	movs	r3, #0
 800e868:	60fb      	str	r3, [r7, #12]
 800e86a:	2300      	movs	r3, #0
 800e86c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	2100      	movs	r1, #0
 800e874:	4618      	mov	r0, r3
 800e876:	f000 fd71 	bl	800f35c <SDIO_GetResponse>
 800e87a:	4603      	mov	r3, r0
 800e87c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e880:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e884:	d102      	bne.n	800e88c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e886:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e88a:	e02f      	b.n	800e8ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e88c:	f107 030c 	add.w	r3, r7, #12
 800e890:	4619      	mov	r1, r3
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	f000 f82e 	bl	800e8f4 <SD_FindSCR>
 800e898:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e89a:	697b      	ldr	r3, [r7, #20]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d001      	beq.n	800e8a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	e023      	b.n	800e8ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d01c      	beq.n	800e8e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	681a      	ldr	r2, [r3, #0]
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8b6:	041b      	lsls	r3, r3, #16
 800e8b8:	4619      	mov	r1, r3
 800e8ba:	4610      	mov	r0, r2
 800e8bc:	f000 feba 	bl	800f634 <SDMMC_CmdAppCommand>
 800e8c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8c2:	697b      	ldr	r3, [r7, #20]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d001      	beq.n	800e8cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e8c8:	697b      	ldr	r3, [r7, #20]
 800e8ca:	e00f      	b.n	800e8ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	2100      	movs	r1, #0
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fef3 	bl	800f6be <SDMMC_CmdBusWidth>
 800e8d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d001      	beq.n	800e8e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e8e0:	697b      	ldr	r3, [r7, #20]
 800e8e2:	e003      	b.n	800e8ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	e001      	b.n	800e8ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e8e8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	3718      	adds	r7, #24
 800e8f0:	46bd      	mov	sp, r7
 800e8f2:	bd80      	pop	{r7, pc}

0800e8f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e8f4:	b590      	push	{r4, r7, lr}
 800e8f6:	b08f      	sub	sp, #60	; 0x3c
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
 800e8fc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e8fe:	f7f8 fa2f 	bl	8006d60 <HAL_GetTick>
 800e902:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e904:	2300      	movs	r3, #0
 800e906:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800e908:	2300      	movs	r3, #0
 800e90a:	60bb      	str	r3, [r7, #8]
 800e90c:	2300      	movs	r3, #0
 800e90e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	2108      	movs	r1, #8
 800e91a:	4618      	mov	r0, r3
 800e91c:	f000 fd5d 	bl	800f3da <SDMMC_CmdBlockLength>
 800e920:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e924:	2b00      	cmp	r3, #0
 800e926:	d001      	beq.n	800e92c <SD_FindSCR+0x38>
  {
    return errorstate;
 800e928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e92a:	e0b2      	b.n	800ea92 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681a      	ldr	r2, [r3, #0]
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e934:	041b      	lsls	r3, r3, #16
 800e936:	4619      	mov	r1, r3
 800e938:	4610      	mov	r0, r2
 800e93a:	f000 fe7b 	bl	800f634 <SDMMC_CmdAppCommand>
 800e93e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e942:	2b00      	cmp	r3, #0
 800e944:	d001      	beq.n	800e94a <SD_FindSCR+0x56>
  {
    return errorstate;
 800e946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e948:	e0a3      	b.n	800ea92 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e94a:	f04f 33ff 	mov.w	r3, #4294967295
 800e94e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e950:	2308      	movs	r3, #8
 800e952:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800e954:	2330      	movs	r3, #48	; 0x30
 800e956:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800e958:	2302      	movs	r3, #2
 800e95a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800e95c:	2300      	movs	r3, #0
 800e95e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800e960:	2301      	movs	r3, #1
 800e962:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	f107 0210 	add.w	r2, r7, #16
 800e96c:	4611      	mov	r1, r2
 800e96e:	4618      	mov	r0, r3
 800e970:	f000 fd07 	bl	800f382 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	4618      	mov	r0, r3
 800e97a:	f000 fec2 	bl	800f702 <SDMMC_CmdSendSCR>
 800e97e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e982:	2b00      	cmp	r3, #0
 800e984:	d02a      	beq.n	800e9dc <SD_FindSCR+0xe8>
  {
    return errorstate;
 800e986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e988:	e083      	b.n	800ea92 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e990:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00f      	beq.n	800e9b8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6819      	ldr	r1, [r3, #0]
 800e99c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e99e:	009b      	lsls	r3, r3, #2
 800e9a0:	f107 0208 	add.w	r2, r7, #8
 800e9a4:	18d4      	adds	r4, r2, r3
 800e9a6:	4608      	mov	r0, r1
 800e9a8:	f000 fc67 	bl	800f27a <SDIO_ReadFIFO>
 800e9ac:	4603      	mov	r3, r0
 800e9ae:	6023      	str	r3, [r4, #0]
      index++;
 800e9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	637b      	str	r3, [r7, #52]	; 0x34
 800e9b6:	e006      	b.n	800e9c6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d012      	beq.n	800e9ec <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e9c6:	f7f8 f9cb 	bl	8006d60 <HAL_GetTick>
 800e9ca:	4602      	mov	r2, r0
 800e9cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9ce:	1ad3      	subs	r3, r2, r3
 800e9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d4:	d102      	bne.n	800e9dc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e9d6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9da:	e05a      	b.n	800ea92 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9e2:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d0cf      	beq.n	800e98a <SD_FindSCR+0x96>
 800e9ea:	e000      	b.n	800e9ee <SD_FindSCR+0xfa>
      break;
 800e9ec:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f4:	f003 0308 	and.w	r3, r3, #8
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d005      	beq.n	800ea08 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	2208      	movs	r2, #8
 800ea02:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ea04:	2308      	movs	r3, #8
 800ea06:	e044      	b.n	800ea92 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea0e:	f003 0302 	and.w	r3, r3, #2
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d005      	beq.n	800ea22 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	2202      	movs	r2, #2
 800ea1c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ea1e:	2302      	movs	r3, #2
 800ea20:	e037      	b.n	800ea92 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea28:	f003 0320 	and.w	r3, r3, #32
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d005      	beq.n	800ea3c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	2220      	movs	r2, #32
 800ea36:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ea38:	2320      	movs	r3, #32
 800ea3a:	e02a      	b.n	800ea92 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	f240 523a 	movw	r2, #1338	; 0x53a
 800ea44:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	061a      	lsls	r2, r3, #24
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	021b      	lsls	r3, r3, #8
 800ea4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea52:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	0a1b      	lsrs	r3, r3, #8
 800ea58:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ea5c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	0e1b      	lsrs	r3, r3, #24
 800ea62:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ea64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea66:	601a      	str	r2, [r3, #0]
    scr++;
 800ea68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea6a:	3304      	adds	r3, #4
 800ea6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	061a      	lsls	r2, r3, #24
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	021b      	lsls	r3, r3, #8
 800ea76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ea7a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ea7c:	68bb      	ldr	r3, [r7, #8]
 800ea7e:	0a1b      	lsrs	r3, r3, #8
 800ea80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ea84:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ea86:	68bb      	ldr	r3, [r7, #8]
 800ea88:	0e1b      	lsrs	r3, r3, #24
 800ea8a:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ea8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea8e:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ea90:	2300      	movs	r3, #0
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	373c      	adds	r7, #60	; 0x3c
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd90      	pop	{r4, r7, pc}

0800ea9a <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ea9a:	b580      	push	{r7, lr}
 800ea9c:	b086      	sub	sp, #24
 800ea9e:	af00      	add	r7, sp, #0
 800eaa0:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa6:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eaac:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d03f      	beq.n	800eb34 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800eab4:	2300      	movs	r3, #0
 800eab6:	617b      	str	r3, [r7, #20]
 800eab8:	e033      	b.n	800eb22 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	4618      	mov	r0, r3
 800eac0:	f000 fbdb 	bl	800f27a <SDIO_ReadFIFO>
 800eac4:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	b2da      	uxtb	r2, r3
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	3301      	adds	r3, #1
 800ead2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	3b01      	subs	r3, #1
 800ead8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800eada:	68bb      	ldr	r3, [r7, #8]
 800eadc:	0a1b      	lsrs	r3, r3, #8
 800eade:	b2da      	uxtb	r2, r3
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	3301      	adds	r3, #1
 800eae8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eaea:	693b      	ldr	r3, [r7, #16]
 800eaec:	3b01      	subs	r3, #1
 800eaee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800eaf0:	68bb      	ldr	r3, [r7, #8]
 800eaf2:	0c1b      	lsrs	r3, r3, #16
 800eaf4:	b2da      	uxtb	r2, r3
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	3301      	adds	r3, #1
 800eafe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eb00:	693b      	ldr	r3, [r7, #16]
 800eb02:	3b01      	subs	r3, #1
 800eb04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800eb06:	68bb      	ldr	r3, [r7, #8]
 800eb08:	0e1b      	lsrs	r3, r3, #24
 800eb0a:	b2da      	uxtb	r2, r3
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	3301      	adds	r3, #1
 800eb14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eb16:	693b      	ldr	r3, [r7, #16]
 800eb18:	3b01      	subs	r3, #1
 800eb1a:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	3301      	adds	r3, #1
 800eb20:	617b      	str	r3, [r7, #20]
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	2b07      	cmp	r3, #7
 800eb26:	d9c8      	bls.n	800eaba <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	693a      	ldr	r2, [r7, #16]
 800eb32:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800eb34:	bf00      	nop
 800eb36:	3718      	adds	r7, #24
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b086      	sub	sp, #24
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	6a1b      	ldr	r3, [r3, #32]
 800eb48:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb4e:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d043      	beq.n	800ebde <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800eb56:	2300      	movs	r3, #0
 800eb58:	617b      	str	r3, [r7, #20]
 800eb5a:	e037      	b.n	800ebcc <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	60bb      	str	r3, [r7, #8]
      tmp++;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	3301      	adds	r3, #1
 800eb66:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eb68:	693b      	ldr	r3, [r7, #16]
 800eb6a:	3b01      	subs	r3, #1
 800eb6c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	781b      	ldrb	r3, [r3, #0]
 800eb72:	021a      	lsls	r2, r3, #8
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	4313      	orrs	r3, r2
 800eb78:	60bb      	str	r3, [r7, #8]
      tmp++;
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	3301      	adds	r3, #1
 800eb7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	3b01      	subs	r3, #1
 800eb84:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	781b      	ldrb	r3, [r3, #0]
 800eb8a:	041a      	lsls	r2, r3, #16
 800eb8c:	68bb      	ldr	r3, [r7, #8]
 800eb8e:	4313      	orrs	r3, r2
 800eb90:	60bb      	str	r3, [r7, #8]
      tmp++;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	3301      	adds	r3, #1
 800eb96:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	3b01      	subs	r3, #1
 800eb9c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	061a      	lsls	r2, r3, #24
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	4313      	orrs	r3, r2
 800eba8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	3301      	adds	r3, #1
 800ebae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ebb0:	693b      	ldr	r3, [r7, #16]
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f107 0208 	add.w	r2, r7, #8
 800ebbe:	4611      	mov	r1, r2
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f000 fb67 	bl	800f294 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	617b      	str	r3, [r7, #20]
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	2b07      	cmp	r3, #7
 800ebd0:	d9c4      	bls.n	800eb5c <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	68fa      	ldr	r2, [r7, #12]
 800ebd6:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	693a      	ldr	r2, [r7, #16]
 800ebdc:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800ebde:	bf00      	nop
 800ebe0:	3718      	adds	r7, #24
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b082      	sub	sp, #8
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d101      	bne.n	800ebf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	e041      	b.n	800ec7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7f7 ff21 	bl	8006a54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2202      	movs	r2, #2
 800ec16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681a      	ldr	r2, [r3, #0]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	3304      	adds	r3, #4
 800ec22:	4619      	mov	r1, r3
 800ec24:	4610      	mov	r0, r2
 800ec26:	f000 f9cd 	bl	800efc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2201      	movs	r2, #1
 800ec36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2201      	movs	r2, #1
 800ec3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	2201      	movs	r2, #1
 800ec46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	2201      	movs	r2, #1
 800ec4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	2201      	movs	r2, #1
 800ec56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	2201      	movs	r2, #1
 800ec5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2201      	movs	r2, #1
 800ec66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec7a:	2300      	movs	r3, #0
}
 800ec7c:	4618      	mov	r0, r3
 800ec7e:	3708      	adds	r7, #8
 800ec80:	46bd      	mov	sp, r7
 800ec82:	bd80      	pop	{r7, pc}

0800ec84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b085      	sub	sp, #20
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec92:	b2db      	uxtb	r3, r3
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d001      	beq.n	800ec9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ec98:	2301      	movs	r3, #1
 800ec9a:	e04e      	b.n	800ed3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2202      	movs	r2, #2
 800eca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	68da      	ldr	r2, [r3, #12]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	f042 0201 	orr.w	r2, r2, #1
 800ecb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	4a23      	ldr	r2, [pc, #140]	; (800ed48 <HAL_TIM_Base_Start_IT+0xc4>)
 800ecba:	4293      	cmp	r3, r2
 800ecbc:	d022      	beq.n	800ed04 <HAL_TIM_Base_Start_IT+0x80>
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecc6:	d01d      	beq.n	800ed04 <HAL_TIM_Base_Start_IT+0x80>
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	4a1f      	ldr	r2, [pc, #124]	; (800ed4c <HAL_TIM_Base_Start_IT+0xc8>)
 800ecce:	4293      	cmp	r3, r2
 800ecd0:	d018      	beq.n	800ed04 <HAL_TIM_Base_Start_IT+0x80>
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	4a1e      	ldr	r2, [pc, #120]	; (800ed50 <HAL_TIM_Base_Start_IT+0xcc>)
 800ecd8:	4293      	cmp	r3, r2
 800ecda:	d013      	beq.n	800ed04 <HAL_TIM_Base_Start_IT+0x80>
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	4a1c      	ldr	r2, [pc, #112]	; (800ed54 <HAL_TIM_Base_Start_IT+0xd0>)
 800ece2:	4293      	cmp	r3, r2
 800ece4:	d00e      	beq.n	800ed04 <HAL_TIM_Base_Start_IT+0x80>
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	4a1b      	ldr	r2, [pc, #108]	; (800ed58 <HAL_TIM_Base_Start_IT+0xd4>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d009      	beq.n	800ed04 <HAL_TIM_Base_Start_IT+0x80>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	681b      	ldr	r3, [r3, #0]
 800ecf4:	4a19      	ldr	r2, [pc, #100]	; (800ed5c <HAL_TIM_Base_Start_IT+0xd8>)
 800ecf6:	4293      	cmp	r3, r2
 800ecf8:	d004      	beq.n	800ed04 <HAL_TIM_Base_Start_IT+0x80>
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	4a18      	ldr	r2, [pc, #96]	; (800ed60 <HAL_TIM_Base_Start_IT+0xdc>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d111      	bne.n	800ed28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	689b      	ldr	r3, [r3, #8]
 800ed0a:	f003 0307 	and.w	r3, r3, #7
 800ed0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	2b06      	cmp	r3, #6
 800ed14:	d010      	beq.n	800ed38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	f042 0201 	orr.w	r2, r2, #1
 800ed24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ed26:	e007      	b.n	800ed38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	f042 0201 	orr.w	r2, r2, #1
 800ed36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3714      	adds	r7, #20
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	40010000 	.word	0x40010000
 800ed4c:	40000400 	.word	0x40000400
 800ed50:	40000800 	.word	0x40000800
 800ed54:	40000c00 	.word	0x40000c00
 800ed58:	40010400 	.word	0x40010400
 800ed5c:	40014000 	.word	0x40014000
 800ed60:	40001800 	.word	0x40001800

0800ed64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b082      	sub	sp, #8
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	f003 0302 	and.w	r3, r3, #2
 800ed76:	2b02      	cmp	r3, #2
 800ed78:	d122      	bne.n	800edc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	68db      	ldr	r3, [r3, #12]
 800ed80:	f003 0302 	and.w	r3, r3, #2
 800ed84:	2b02      	cmp	r3, #2
 800ed86:	d11b      	bne.n	800edc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	f06f 0202 	mvn.w	r2, #2
 800ed90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2201      	movs	r2, #1
 800ed96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	699b      	ldr	r3, [r3, #24]
 800ed9e:	f003 0303 	and.w	r3, r3, #3
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d003      	beq.n	800edae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800eda6:	6878      	ldr	r0, [r7, #4]
 800eda8:	f000 f8ee 	bl	800ef88 <HAL_TIM_IC_CaptureCallback>
 800edac:	e005      	b.n	800edba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800edae:	6878      	ldr	r0, [r7, #4]
 800edb0:	f000 f8e0 	bl	800ef74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f000 f8f1 	bl	800ef9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	2200      	movs	r2, #0
 800edbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	691b      	ldr	r3, [r3, #16]
 800edc6:	f003 0304 	and.w	r3, r3, #4
 800edca:	2b04      	cmp	r3, #4
 800edcc:	d122      	bne.n	800ee14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	68db      	ldr	r3, [r3, #12]
 800edd4:	f003 0304 	and.w	r3, r3, #4
 800edd8:	2b04      	cmp	r3, #4
 800edda:	d11b      	bne.n	800ee14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f06f 0204 	mvn.w	r2, #4
 800ede4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2202      	movs	r2, #2
 800edea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	699b      	ldr	r3, [r3, #24]
 800edf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d003      	beq.n	800ee02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edfa:	6878      	ldr	r0, [r7, #4]
 800edfc:	f000 f8c4 	bl	800ef88 <HAL_TIM_IC_CaptureCallback>
 800ee00:	e005      	b.n	800ee0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee02:	6878      	ldr	r0, [r7, #4]
 800ee04:	f000 f8b6 	bl	800ef74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee08:	6878      	ldr	r0, [r7, #4]
 800ee0a:	f000 f8c7 	bl	800ef9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	2200      	movs	r2, #0
 800ee12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	681b      	ldr	r3, [r3, #0]
 800ee18:	691b      	ldr	r3, [r3, #16]
 800ee1a:	f003 0308 	and.w	r3, r3, #8
 800ee1e:	2b08      	cmp	r3, #8
 800ee20:	d122      	bne.n	800ee68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	68db      	ldr	r3, [r3, #12]
 800ee28:	f003 0308 	and.w	r3, r3, #8
 800ee2c:	2b08      	cmp	r3, #8
 800ee2e:	d11b      	bne.n	800ee68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	f06f 0208 	mvn.w	r2, #8
 800ee38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2204      	movs	r2, #4
 800ee3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	69db      	ldr	r3, [r3, #28]
 800ee46:	f003 0303 	and.w	r3, r3, #3
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d003      	beq.n	800ee56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee4e:	6878      	ldr	r0, [r7, #4]
 800ee50:	f000 f89a 	bl	800ef88 <HAL_TIM_IC_CaptureCallback>
 800ee54:	e005      	b.n	800ee62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f000 f88c 	bl	800ef74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f000 f89d 	bl	800ef9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	691b      	ldr	r3, [r3, #16]
 800ee6e:	f003 0310 	and.w	r3, r3, #16
 800ee72:	2b10      	cmp	r3, #16
 800ee74:	d122      	bne.n	800eebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	f003 0310 	and.w	r3, r3, #16
 800ee80:	2b10      	cmp	r3, #16
 800ee82:	d11b      	bne.n	800eebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	f06f 0210 	mvn.w	r2, #16
 800ee8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	2208      	movs	r2, #8
 800ee92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	69db      	ldr	r3, [r3, #28]
 800ee9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d003      	beq.n	800eeaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eea2:	6878      	ldr	r0, [r7, #4]
 800eea4:	f000 f870 	bl	800ef88 <HAL_TIM_IC_CaptureCallback>
 800eea8:	e005      	b.n	800eeb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	f000 f862 	bl	800ef74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f000 f873 	bl	800ef9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2200      	movs	r2, #0
 800eeba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	691b      	ldr	r3, [r3, #16]
 800eec2:	f003 0301 	and.w	r3, r3, #1
 800eec6:	2b01      	cmp	r3, #1
 800eec8:	d10e      	bne.n	800eee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	68db      	ldr	r3, [r3, #12]
 800eed0:	f003 0301 	and.w	r3, r3, #1
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d107      	bne.n	800eee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	f06f 0201 	mvn.w	r2, #1
 800eee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f7f7 fa48 	bl	8006378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eef2:	2b80      	cmp	r3, #128	; 0x80
 800eef4:	d10e      	bne.n	800ef14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ef00:	2b80      	cmp	r3, #128	; 0x80
 800ef02:	d107      	bne.n	800ef14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ef0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ef0e:	6878      	ldr	r0, [r7, #4]
 800ef10:	f000 f97e 	bl	800f210 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	691b      	ldr	r3, [r3, #16]
 800ef1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef1e:	2b40      	cmp	r3, #64	; 0x40
 800ef20:	d10e      	bne.n	800ef40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef2c:	2b40      	cmp	r3, #64	; 0x40
 800ef2e:	d107      	bne.n	800ef40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ef38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	f000 f838 	bl	800efb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	f003 0320 	and.w	r3, r3, #32
 800ef4a:	2b20      	cmp	r3, #32
 800ef4c:	d10e      	bne.n	800ef6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	f003 0320 	and.w	r3, r3, #32
 800ef58:	2b20      	cmp	r3, #32
 800ef5a:	d107      	bne.n	800ef6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f06f 0220 	mvn.w	r2, #32
 800ef64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ef66:	6878      	ldr	r0, [r7, #4]
 800ef68:	f000 f948 	bl	800f1fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ef6c:	bf00      	nop
 800ef6e:	3708      	adds	r7, #8
 800ef70:	46bd      	mov	sp, r7
 800ef72:	bd80      	pop	{r7, pc}

0800ef74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ef7c:	bf00      	nop
 800ef7e:	370c      	adds	r7, #12
 800ef80:	46bd      	mov	sp, r7
 800ef82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef86:	4770      	bx	lr

0800ef88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ef88:	b480      	push	{r7}
 800ef8a:	b083      	sub	sp, #12
 800ef8c:	af00      	add	r7, sp, #0
 800ef8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ef90:	bf00      	nop
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800efa4:	bf00      	nop
 800efa6:	370c      	adds	r7, #12
 800efa8:	46bd      	mov	sp, r7
 800efaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efae:	4770      	bx	lr

0800efb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efb8:	bf00      	nop
 800efba:	370c      	adds	r7, #12
 800efbc:	46bd      	mov	sp, r7
 800efbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc2:	4770      	bx	lr

0800efc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800efc4:	b480      	push	{r7}
 800efc6:	b085      	sub	sp, #20
 800efc8:	af00      	add	r7, sp, #0
 800efca:	6078      	str	r0, [r7, #4]
 800efcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a40      	ldr	r2, [pc, #256]	; (800f0d8 <TIM_Base_SetConfig+0x114>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d013      	beq.n	800f004 <TIM_Base_SetConfig+0x40>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efe2:	d00f      	beq.n	800f004 <TIM_Base_SetConfig+0x40>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a3d      	ldr	r2, [pc, #244]	; (800f0dc <TIM_Base_SetConfig+0x118>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d00b      	beq.n	800f004 <TIM_Base_SetConfig+0x40>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4a3c      	ldr	r2, [pc, #240]	; (800f0e0 <TIM_Base_SetConfig+0x11c>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d007      	beq.n	800f004 <TIM_Base_SetConfig+0x40>
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4a3b      	ldr	r2, [pc, #236]	; (800f0e4 <TIM_Base_SetConfig+0x120>)
 800eff8:	4293      	cmp	r3, r2
 800effa:	d003      	beq.n	800f004 <TIM_Base_SetConfig+0x40>
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	4a3a      	ldr	r2, [pc, #232]	; (800f0e8 <TIM_Base_SetConfig+0x124>)
 800f000:	4293      	cmp	r3, r2
 800f002:	d108      	bne.n	800f016 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f00a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	4313      	orrs	r3, r2
 800f014:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4a2f      	ldr	r2, [pc, #188]	; (800f0d8 <TIM_Base_SetConfig+0x114>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d02b      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f024:	d027      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4a2c      	ldr	r2, [pc, #176]	; (800f0dc <TIM_Base_SetConfig+0x118>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d023      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4a2b      	ldr	r2, [pc, #172]	; (800f0e0 <TIM_Base_SetConfig+0x11c>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d01f      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	4a2a      	ldr	r2, [pc, #168]	; (800f0e4 <TIM_Base_SetConfig+0x120>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d01b      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4a29      	ldr	r2, [pc, #164]	; (800f0e8 <TIM_Base_SetConfig+0x124>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d017      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4a28      	ldr	r2, [pc, #160]	; (800f0ec <TIM_Base_SetConfig+0x128>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d013      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	4a27      	ldr	r2, [pc, #156]	; (800f0f0 <TIM_Base_SetConfig+0x12c>)
 800f052:	4293      	cmp	r3, r2
 800f054:	d00f      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4a26      	ldr	r2, [pc, #152]	; (800f0f4 <TIM_Base_SetConfig+0x130>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d00b      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	4a25      	ldr	r2, [pc, #148]	; (800f0f8 <TIM_Base_SetConfig+0x134>)
 800f062:	4293      	cmp	r3, r2
 800f064:	d007      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	4a24      	ldr	r2, [pc, #144]	; (800f0fc <TIM_Base_SetConfig+0x138>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d003      	beq.n	800f076 <TIM_Base_SetConfig+0xb2>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4a23      	ldr	r2, [pc, #140]	; (800f100 <TIM_Base_SetConfig+0x13c>)
 800f072:	4293      	cmp	r3, r2
 800f074:	d108      	bne.n	800f088 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f07c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	68db      	ldr	r3, [r3, #12]
 800f082:	68fa      	ldr	r2, [r7, #12]
 800f084:	4313      	orrs	r3, r2
 800f086:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	695b      	ldr	r3, [r3, #20]
 800f092:	4313      	orrs	r3, r2
 800f094:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	68fa      	ldr	r2, [r7, #12]
 800f09a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f09c:	683b      	ldr	r3, [r7, #0]
 800f09e:	689a      	ldr	r2, [r3, #8]
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	681a      	ldr	r2, [r3, #0]
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	4a0a      	ldr	r2, [pc, #40]	; (800f0d8 <TIM_Base_SetConfig+0x114>)
 800f0b0:	4293      	cmp	r3, r2
 800f0b2:	d003      	beq.n	800f0bc <TIM_Base_SetConfig+0xf8>
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4a0c      	ldr	r2, [pc, #48]	; (800f0e8 <TIM_Base_SetConfig+0x124>)
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d103      	bne.n	800f0c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	691a      	ldr	r2, [r3, #16]
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	615a      	str	r2, [r3, #20]
}
 800f0ca:	bf00      	nop
 800f0cc:	3714      	adds	r7, #20
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d4:	4770      	bx	lr
 800f0d6:	bf00      	nop
 800f0d8:	40010000 	.word	0x40010000
 800f0dc:	40000400 	.word	0x40000400
 800f0e0:	40000800 	.word	0x40000800
 800f0e4:	40000c00 	.word	0x40000c00
 800f0e8:	40010400 	.word	0x40010400
 800f0ec:	40014000 	.word	0x40014000
 800f0f0:	40014400 	.word	0x40014400
 800f0f4:	40014800 	.word	0x40014800
 800f0f8:	40001800 	.word	0x40001800
 800f0fc:	40001c00 	.word	0x40001c00
 800f100:	40002000 	.word	0x40002000

0800f104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f104:	b480      	push	{r7}
 800f106:	b085      	sub	sp, #20
 800f108:	af00      	add	r7, sp, #0
 800f10a:	6078      	str	r0, [r7, #4]
 800f10c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f114:	2b01      	cmp	r3, #1
 800f116:	d101      	bne.n	800f11c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f118:	2302      	movs	r3, #2
 800f11a:	e05a      	b.n	800f1d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2201      	movs	r2, #1
 800f120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	2202      	movs	r2, #2
 800f128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	685b      	ldr	r3, [r3, #4]
 800f132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	689b      	ldr	r3, [r3, #8]
 800f13a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	681b      	ldr	r3, [r3, #0]
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	4313      	orrs	r3, r2
 800f14c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	68fa      	ldr	r2, [r7, #12]
 800f154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	4a21      	ldr	r2, [pc, #132]	; (800f1e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f15c:	4293      	cmp	r3, r2
 800f15e:	d022      	beq.n	800f1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f168:	d01d      	beq.n	800f1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	4a1d      	ldr	r2, [pc, #116]	; (800f1e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d018      	beq.n	800f1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	4a1b      	ldr	r2, [pc, #108]	; (800f1e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d013      	beq.n	800f1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	4a1a      	ldr	r2, [pc, #104]	; (800f1ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f184:	4293      	cmp	r3, r2
 800f186:	d00e      	beq.n	800f1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	4a18      	ldr	r2, [pc, #96]	; (800f1f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d009      	beq.n	800f1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	681b      	ldr	r3, [r3, #0]
 800f196:	4a17      	ldr	r2, [pc, #92]	; (800f1f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f198:	4293      	cmp	r3, r2
 800f19a:	d004      	beq.n	800f1a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	4a15      	ldr	r2, [pc, #84]	; (800f1f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d10c      	bne.n	800f1c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f1ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	68ba      	ldr	r2, [r7, #8]
 800f1b4:	4313      	orrs	r3, r2
 800f1b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	68ba      	ldr	r2, [r7, #8]
 800f1be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2201      	movs	r2, #1
 800f1c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	2200      	movs	r2, #0
 800f1cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f1d0:	2300      	movs	r3, #0
}
 800f1d2:	4618      	mov	r0, r3
 800f1d4:	3714      	adds	r7, #20
 800f1d6:	46bd      	mov	sp, r7
 800f1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1dc:	4770      	bx	lr
 800f1de:	bf00      	nop
 800f1e0:	40010000 	.word	0x40010000
 800f1e4:	40000400 	.word	0x40000400
 800f1e8:	40000800 	.word	0x40000800
 800f1ec:	40000c00 	.word	0x40000c00
 800f1f0:	40010400 	.word	0x40010400
 800f1f4:	40014000 	.word	0x40014000
 800f1f8:	40001800 	.word	0x40001800

0800f1fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f1fc:	b480      	push	{r7}
 800f1fe:	b083      	sub	sp, #12
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f204:	bf00      	nop
 800f206:	370c      	adds	r7, #12
 800f208:	46bd      	mov	sp, r7
 800f20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f20e:	4770      	bx	lr

0800f210 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f210:	b480      	push	{r7}
 800f212:	b083      	sub	sp, #12
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f218:	bf00      	nop
 800f21a:	370c      	adds	r7, #12
 800f21c:	46bd      	mov	sp, r7
 800f21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f222:	4770      	bx	lr

0800f224 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800f224:	b084      	sub	sp, #16
 800f226:	b480      	push	{r7}
 800f228:	b085      	sub	sp, #20
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
 800f22e:	f107 001c 	add.w	r0, r7, #28
 800f232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800f236:	2300      	movs	r3, #0
 800f238:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800f23a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800f23c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800f23e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800f240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800f242:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800f244:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800f246:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800f248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800f24a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800f24c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800f24e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	4313      	orrs	r3, r2
 800f254:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800f25e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f262:	68fa      	ldr	r2, [r7, #12]
 800f264:	431a      	orrs	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800f26a:	2300      	movs	r3, #0
}
 800f26c:	4618      	mov	r0, r3
 800f26e:	3714      	adds	r7, #20
 800f270:	46bd      	mov	sp, r7
 800f272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f276:	b004      	add	sp, #16
 800f278:	4770      	bx	lr

0800f27a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800f27a:	b480      	push	{r7}
 800f27c:	b083      	sub	sp, #12
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800f288:	4618      	mov	r0, r3
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800f294:	b480      	push	{r7}
 800f296:	b083      	sub	sp, #12
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	681a      	ldr	r2, [r3, #0]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f2a8:	2300      	movs	r3, #0
}
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	370c      	adds	r7, #12
 800f2ae:	46bd      	mov	sp, r7
 800f2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b4:	4770      	bx	lr

0800f2b6 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800f2b6:	b480      	push	{r7}
 800f2b8:	b083      	sub	sp, #12
 800f2ba:	af00      	add	r7, sp, #0
 800f2bc:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2203      	movs	r2, #3
 800f2c2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800f2c4:	2300      	movs	r3, #0
}
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	370c      	adds	r7, #12
 800f2ca:	46bd      	mov	sp, r7
 800f2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d0:	4770      	bx	lr

0800f2d2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800f2d2:	b480      	push	{r7}
 800f2d4:	b083      	sub	sp, #12
 800f2d6:	af00      	add	r7, sp, #0
 800f2d8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	f003 0303 	and.w	r3, r3, #3
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	370c      	adds	r7, #12
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b085      	sub	sp, #20
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	6078      	str	r0, [r7, #4]
 800f2f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	681a      	ldr	r2, [r3, #0]
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f30c:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800f312:	431a      	orrs	r2, r3
                       Command->CPSM);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800f318:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800f31a:	68fa      	ldr	r2, [r7, #12]
 800f31c:	4313      	orrs	r3, r2
 800f31e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f328:	f023 030f 	bic.w	r3, r3, #15
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	431a      	orrs	r2, r3
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800f334:	2300      	movs	r3, #0
}
 800f336:	4618      	mov	r0, r3
 800f338:	3714      	adds	r7, #20
 800f33a:	46bd      	mov	sp, r7
 800f33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f340:	4770      	bx	lr

0800f342 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800f342:	b480      	push	{r7}
 800f344:	b083      	sub	sp, #12
 800f346:	af00      	add	r7, sp, #0
 800f348:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	691b      	ldr	r3, [r3, #16]
 800f34e:	b2db      	uxtb	r3, r3
}
 800f350:	4618      	mov	r0, r3
 800f352:	370c      	adds	r7, #12
 800f354:	46bd      	mov	sp, r7
 800f356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35a:	4770      	bx	lr

0800f35c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800f35c:	b480      	push	{r7}
 800f35e:	b085      	sub	sp, #20
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	3314      	adds	r3, #20
 800f36a:	461a      	mov	r2, r3
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	4413      	add	r3, r2
 800f370:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
}  
 800f376:	4618      	mov	r0, r3
 800f378:	3714      	adds	r7, #20
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr

0800f382 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800f382:	b480      	push	{r7}
 800f384:	b085      	sub	sp, #20
 800f386:	af00      	add	r7, sp, #0
 800f388:	6078      	str	r0, [r7, #4]
 800f38a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800f38c:	2300      	movs	r3, #0
 800f38e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800f390:	683b      	ldr	r3, [r7, #0]
 800f392:	681a      	ldr	r2, [r3, #0]
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	685a      	ldr	r2, [r3, #4]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f3a8:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f3ae:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f3b4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f3b6:	68fa      	ldr	r2, [r7, #12]
 800f3b8:	4313      	orrs	r3, r2
 800f3ba:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f3c0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	431a      	orrs	r2, r3
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f3cc:	2300      	movs	r3, #0

}
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	3714      	adds	r7, #20
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr

0800f3da <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800f3da:	b580      	push	{r7, lr}
 800f3dc:	b088      	sub	sp, #32
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]
 800f3e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f3e4:	683b      	ldr	r3, [r7, #0]
 800f3e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f3e8:	2310      	movs	r3, #16
 800f3ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f3ec:	2340      	movs	r3, #64	; 0x40
 800f3ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f3f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f3fa:	f107 0308 	add.w	r3, r7, #8
 800f3fe:	4619      	mov	r1, r3
 800f400:	6878      	ldr	r0, [r7, #4]
 800f402:	f7ff ff74 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800f406:	f241 3288 	movw	r2, #5000	; 0x1388
 800f40a:	2110      	movs	r1, #16
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f000 fa19 	bl	800f844 <SDMMC_GetCmdResp1>
 800f412:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f414:	69fb      	ldr	r3, [r7, #28]
}
 800f416:	4618      	mov	r0, r3
 800f418:	3720      	adds	r7, #32
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f41e:	b580      	push	{r7, lr}
 800f420:	b088      	sub	sp, #32
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]
 800f426:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f42c:	2311      	movs	r3, #17
 800f42e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f430:	2340      	movs	r3, #64	; 0x40
 800f432:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f434:	2300      	movs	r3, #0
 800f436:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f438:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f43c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f43e:	f107 0308 	add.w	r3, r7, #8
 800f442:	4619      	mov	r1, r3
 800f444:	6878      	ldr	r0, [r7, #4]
 800f446:	f7ff ff52 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f44a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f44e:	2111      	movs	r1, #17
 800f450:	6878      	ldr	r0, [r7, #4]
 800f452:	f000 f9f7 	bl	800f844 <SDMMC_GetCmdResp1>
 800f456:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f458:	69fb      	ldr	r3, [r7, #28]
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3720      	adds	r7, #32
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}

0800f462 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800f462:	b580      	push	{r7, lr}
 800f464:	b088      	sub	sp, #32
 800f466:	af00      	add	r7, sp, #0
 800f468:	6078      	str	r0, [r7, #4]
 800f46a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f46c:	683b      	ldr	r3, [r7, #0]
 800f46e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f470:	2312      	movs	r3, #18
 800f472:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f474:	2340      	movs	r3, #64	; 0x40
 800f476:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f478:	2300      	movs	r3, #0
 800f47a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f47c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f480:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f482:	f107 0308 	add.w	r3, r7, #8
 800f486:	4619      	mov	r1, r3
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f7ff ff30 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f48e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f492:	2112      	movs	r1, #18
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 f9d5 	bl	800f844 <SDMMC_GetCmdResp1>
 800f49a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f49c:	69fb      	ldr	r3, [r7, #28]
}
 800f49e:	4618      	mov	r0, r3
 800f4a0:	3720      	adds	r7, #32
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	bd80      	pop	{r7, pc}

0800f4a6 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f4a6:	b580      	push	{r7, lr}
 800f4a8:	b088      	sub	sp, #32
 800f4aa:	af00      	add	r7, sp, #0
 800f4ac:	6078      	str	r0, [r7, #4]
 800f4ae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f4b0:	683b      	ldr	r3, [r7, #0]
 800f4b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f4b4:	2318      	movs	r3, #24
 800f4b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f4b8:	2340      	movs	r3, #64	; 0x40
 800f4ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f4c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f4c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f4c6:	f107 0308 	add.w	r3, r7, #8
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	6878      	ldr	r0, [r7, #4]
 800f4ce:	f7ff ff0e 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800f4d2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4d6:	2118      	movs	r1, #24
 800f4d8:	6878      	ldr	r0, [r7, #4]
 800f4da:	f000 f9b3 	bl	800f844 <SDMMC_GetCmdResp1>
 800f4de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4e0:	69fb      	ldr	r3, [r7, #28]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3720      	adds	r7, #32
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}

0800f4ea <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b088      	sub	sp, #32
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	6078      	str	r0, [r7, #4]
 800f4f2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f4f8:	2319      	movs	r3, #25
 800f4fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f4fc:	2340      	movs	r3, #64	; 0x40
 800f4fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f500:	2300      	movs	r3, #0
 800f502:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f504:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f508:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f50a:	f107 0308 	add.w	r3, r7, #8
 800f50e:	4619      	mov	r1, r3
 800f510:	6878      	ldr	r0, [r7, #4]
 800f512:	f7ff feec 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800f516:	f241 3288 	movw	r2, #5000	; 0x1388
 800f51a:	2119      	movs	r1, #25
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f991 	bl	800f844 <SDMMC_GetCmdResp1>
 800f522:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f524:	69fb      	ldr	r3, [r7, #28]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3720      	adds	r7, #32
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
	...

0800f530 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b088      	sub	sp, #32
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f538:	2300      	movs	r3, #0
 800f53a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f53c:	230c      	movs	r3, #12
 800f53e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f540:	2340      	movs	r3, #64	; 0x40
 800f542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f544:	2300      	movs	r3, #0
 800f546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f54c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f54e:	f107 0308 	add.w	r3, r7, #8
 800f552:	4619      	mov	r1, r3
 800f554:	6878      	ldr	r0, [r7, #4]
 800f556:	f7ff feca 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800f55a:	4a05      	ldr	r2, [pc, #20]	; (800f570 <SDMMC_CmdStopTransfer+0x40>)
 800f55c:	210c      	movs	r1, #12
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f000 f970 	bl	800f844 <SDMMC_GetCmdResp1>
 800f564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f566:	69fb      	ldr	r3, [r7, #28]
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3720      	adds	r7, #32
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}
 800f570:	05f5e100 	.word	0x05f5e100

0800f574 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b08a      	sub	sp, #40	; 0x28
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f580:	683b      	ldr	r3, [r7, #0]
 800f582:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f584:	2307      	movs	r3, #7
 800f586:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f588:	2340      	movs	r3, #64	; 0x40
 800f58a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f58c:	2300      	movs	r3, #0
 800f58e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f594:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f596:	f107 0310 	add.w	r3, r7, #16
 800f59a:	4619      	mov	r1, r3
 800f59c:	68f8      	ldr	r0, [r7, #12]
 800f59e:	f7ff fea6 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800f5a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5a6:	2107      	movs	r1, #7
 800f5a8:	68f8      	ldr	r0, [r7, #12]
 800f5aa:	f000 f94b 	bl	800f844 <SDMMC_GetCmdResp1>
 800f5ae:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3728      	adds	r7, #40	; 0x28
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}

0800f5ba <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800f5ba:	b580      	push	{r7, lr}
 800f5bc:	b088      	sub	sp, #32
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f5d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f5d8:	f107 0308 	add.w	r3, r7, #8
 800f5dc:	4619      	mov	r1, r3
 800f5de:	6878      	ldr	r0, [r7, #4]
 800f5e0:	f7ff fe85 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f000 fb65 	bl	800fcb4 <SDMMC_GetCmdError>
 800f5ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f5ec:	69fb      	ldr	r3, [r7, #28]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3720      	adds	r7, #32
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b088      	sub	sp, #32
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f5fe:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f602:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f604:	2308      	movs	r3, #8
 800f606:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f608:	2340      	movs	r3, #64	; 0x40
 800f60a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f60c:	2300      	movs	r3, #0
 800f60e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f610:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f614:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f616:	f107 0308 	add.w	r3, r7, #8
 800f61a:	4619      	mov	r1, r3
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f7ff fe66 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f000 faf8 	bl	800fc18 <SDMMC_GetCmdResp7>
 800f628:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f62a:	69fb      	ldr	r3, [r7, #28]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3720      	adds	r7, #32
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b088      	sub	sp, #32
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f642:	2337      	movs	r3, #55	; 0x37
 800f644:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f646:	2340      	movs	r3, #64	; 0x40
 800f648:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f64a:	2300      	movs	r3, #0
 800f64c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f64e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f652:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f654:	f107 0308 	add.w	r3, r7, #8
 800f658:	4619      	mov	r1, r3
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f7ff fe47 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800f660:	f241 3288 	movw	r2, #5000	; 0x1388
 800f664:	2137      	movs	r1, #55	; 0x37
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 f8ec 	bl	800f844 <SDMMC_GetCmdResp1>
 800f66c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f66e:	69fb      	ldr	r3, [r7, #28]
}
 800f670:	4618      	mov	r0, r3
 800f672:	3720      	adds	r7, #32
 800f674:	46bd      	mov	sp, r7
 800f676:	bd80      	pop	{r7, pc}

0800f678 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b088      	sub	sp, #32
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f682:	683b      	ldr	r3, [r7, #0]
 800f684:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f688:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f68c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f68e:	2329      	movs	r3, #41	; 0x29
 800f690:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f692:	2340      	movs	r3, #64	; 0x40
 800f694:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f696:	2300      	movs	r3, #0
 800f698:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f69a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f69e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f6a0:	f107 0308 	add.w	r3, r7, #8
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f7ff fe21 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800f6ac:	6878      	ldr	r0, [r7, #4]
 800f6ae:	f000 f9ff 	bl	800fab0 <SDMMC_GetCmdResp3>
 800f6b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6b4:	69fb      	ldr	r3, [r7, #28]
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3720      	adds	r7, #32
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}

0800f6be <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800f6be:	b580      	push	{r7, lr}
 800f6c0:	b088      	sub	sp, #32
 800f6c2:	af00      	add	r7, sp, #0
 800f6c4:	6078      	str	r0, [r7, #4]
 800f6c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f6c8:	683b      	ldr	r3, [r7, #0]
 800f6ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f6cc:	2306      	movs	r3, #6
 800f6ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f6d0:	2340      	movs	r3, #64	; 0x40
 800f6d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f6d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f6dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f6de:	f107 0308 	add.w	r3, r7, #8
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	f7ff fe02 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800f6ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6ee:	2106      	movs	r1, #6
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	f000 f8a7 	bl	800f844 <SDMMC_GetCmdResp1>
 800f6f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f6f8:	69fb      	ldr	r3, [r7, #28]
}
 800f6fa:	4618      	mov	r0, r3
 800f6fc:	3720      	adds	r7, #32
 800f6fe:	46bd      	mov	sp, r7
 800f700:	bd80      	pop	{r7, pc}

0800f702 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f702:	b580      	push	{r7, lr}
 800f704:	b088      	sub	sp, #32
 800f706:	af00      	add	r7, sp, #0
 800f708:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f70a:	2300      	movs	r3, #0
 800f70c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f70e:	2333      	movs	r3, #51	; 0x33
 800f710:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f712:	2340      	movs	r3, #64	; 0x40
 800f714:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f716:	2300      	movs	r3, #0
 800f718:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f71a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f71e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f720:	f107 0308 	add.w	r3, r7, #8
 800f724:	4619      	mov	r1, r3
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f7ff fde1 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f72c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f730:	2133      	movs	r1, #51	; 0x33
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f886 	bl	800f844 <SDMMC_GetCmdResp1>
 800f738:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f73a:	69fb      	ldr	r3, [r7, #28]
}
 800f73c:	4618      	mov	r0, r3
 800f73e:	3720      	adds	r7, #32
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f744:	b580      	push	{r7, lr}
 800f746:	b088      	sub	sp, #32
 800f748:	af00      	add	r7, sp, #0
 800f74a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f74c:	2300      	movs	r3, #0
 800f74e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f750:	2302      	movs	r3, #2
 800f752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f754:	23c0      	movs	r3, #192	; 0xc0
 800f756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f758:	2300      	movs	r3, #0
 800f75a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f75c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f760:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f762:	f107 0308 	add.w	r3, r7, #8
 800f766:	4619      	mov	r1, r3
 800f768:	6878      	ldr	r0, [r7, #4]
 800f76a:	f7ff fdc0 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f76e:	6878      	ldr	r0, [r7, #4]
 800f770:	f000 f956 	bl	800fa20 <SDMMC_GetCmdResp2>
 800f774:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f776:	69fb      	ldr	r3, [r7, #28]
}
 800f778:	4618      	mov	r0, r3
 800f77a:	3720      	adds	r7, #32
 800f77c:	46bd      	mov	sp, r7
 800f77e:	bd80      	pop	{r7, pc}

0800f780 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b088      	sub	sp, #32
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f78e:	2309      	movs	r3, #9
 800f790:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f792:	23c0      	movs	r3, #192	; 0xc0
 800f794:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f796:	2300      	movs	r3, #0
 800f798:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f79a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f79e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7a0:	f107 0308 	add.w	r3, r7, #8
 800f7a4:	4619      	mov	r1, r3
 800f7a6:	6878      	ldr	r0, [r7, #4]
 800f7a8:	f7ff fda1 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 f937 	bl	800fa20 <SDMMC_GetCmdResp2>
 800f7b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7b4:	69fb      	ldr	r3, [r7, #28]
}
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	3720      	adds	r7, #32
 800f7ba:	46bd      	mov	sp, r7
 800f7bc:	bd80      	pop	{r7, pc}

0800f7be <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f7be:	b580      	push	{r7, lr}
 800f7c0:	b088      	sub	sp, #32
 800f7c2:	af00      	add	r7, sp, #0
 800f7c4:	6078      	str	r0, [r7, #4]
 800f7c6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f7c8:	2300      	movs	r3, #0
 800f7ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f7cc:	2303      	movs	r3, #3
 800f7ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f7d0:	2340      	movs	r3, #64	; 0x40
 800f7d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f7d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f7de:	f107 0308 	add.w	r3, r7, #8
 800f7e2:	4619      	mov	r1, r3
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f7ff fd82 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f7ea:	683a      	ldr	r2, [r7, #0]
 800f7ec:	2103      	movs	r1, #3
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 f99c 	bl	800fb2c <SDMMC_GetCmdResp6>
 800f7f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f7f6:	69fb      	ldr	r3, [r7, #28]
}
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	3720      	adds	r7, #32
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}

0800f800 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f800:	b580      	push	{r7, lr}
 800f802:	b088      	sub	sp, #32
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
 800f808:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f80e:	230d      	movs	r3, #13
 800f810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f812:	2340      	movs	r3, #64	; 0x40
 800f814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f816:	2300      	movs	r3, #0
 800f818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f81a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f81e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f820:	f107 0308 	add.w	r3, r7, #8
 800f824:	4619      	mov	r1, r3
 800f826:	6878      	ldr	r0, [r7, #4]
 800f828:	f7ff fd61 	bl	800f2ee <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800f82c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f830:	210d      	movs	r1, #13
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f000 f806 	bl	800f844 <SDMMC_GetCmdResp1>
 800f838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f83a:	69fb      	ldr	r3, [r7, #28]
}
 800f83c:	4618      	mov	r0, r3
 800f83e:	3720      	adds	r7, #32
 800f840:	46bd      	mov	sp, r7
 800f842:	bd80      	pop	{r7, pc}

0800f844 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b088      	sub	sp, #32
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	460b      	mov	r3, r1
 800f84e:	607a      	str	r2, [r7, #4]
 800f850:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f852:	4b70      	ldr	r3, [pc, #448]	; (800fa14 <SDMMC_GetCmdResp1+0x1d0>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	4a70      	ldr	r2, [pc, #448]	; (800fa18 <SDMMC_GetCmdResp1+0x1d4>)
 800f858:	fba2 2303 	umull	r2, r3, r2, r3
 800f85c:	0a5a      	lsrs	r2, r3, #9
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	fb02 f303 	mul.w	r3, r2, r3
 800f864:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800f866:	69fb      	ldr	r3, [r7, #28]
 800f868:	1e5a      	subs	r2, r3, #1
 800f86a:	61fa      	str	r2, [r7, #28]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d102      	bne.n	800f876 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f870:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f874:	e0c9      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800f876:	68fb      	ldr	r3, [r7, #12]
 800f878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f87a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f87c:	69bb      	ldr	r3, [r7, #24]
 800f87e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f882:	2b00      	cmp	r3, #0
 800f884:	d0ef      	beq.n	800f866 <SDMMC_GetCmdResp1+0x22>
 800f886:	69bb      	ldr	r3, [r7, #24]
 800f888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1ea      	bne.n	800f866 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f894:	f003 0304 	and.w	r3, r3, #4
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d004      	beq.n	800f8a6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	2204      	movs	r2, #4
 800f8a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f8a2:	2304      	movs	r3, #4
 800f8a4:	e0b1      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8aa:	f003 0301 	and.w	r3, r3, #1
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d004      	beq.n	800f8bc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	2201      	movs	r2, #1
 800f8b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	e0a6      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	22c5      	movs	r2, #197	; 0xc5
 800f8c0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	f7ff fd3d 	bl	800f342 <SDIO_GetCommandResponse>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	7afb      	ldrb	r3, [r7, #11]
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d001      	beq.n	800f8d6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	e099      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f8d6:	2100      	movs	r1, #0
 800f8d8:	68f8      	ldr	r0, [r7, #12]
 800f8da:	f7ff fd3f 	bl	800f35c <SDIO_GetResponse>
 800f8de:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f8e0:	697a      	ldr	r2, [r7, #20]
 800f8e2:	4b4e      	ldr	r3, [pc, #312]	; (800fa1c <SDMMC_GetCmdResp1+0x1d8>)
 800f8e4:	4013      	ands	r3, r2
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d101      	bne.n	800f8ee <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	e08d      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	da02      	bge.n	800f8fa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f8f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f8f8:	e087      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f900:	2b00      	cmp	r3, #0
 800f902:	d001      	beq.n	800f908 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f904:	2340      	movs	r3, #64	; 0x40
 800f906:	e080      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d001      	beq.n	800f916 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f912:	2380      	movs	r3, #128	; 0x80
 800f914:	e079      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d002      	beq.n	800f926 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f920:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f924:	e071      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f926:	697b      	ldr	r3, [r7, #20]
 800f928:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d002      	beq.n	800f936 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f930:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f934:	e069      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f936:	697b      	ldr	r3, [r7, #20]
 800f938:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d002      	beq.n	800f946 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f940:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f944:	e061      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d002      	beq.n	800f956 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f950:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f954:	e059      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d002      	beq.n	800f966 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f960:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f964:	e051      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d002      	beq.n	800f976 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f970:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f974:	e049      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d002      	beq.n	800f986 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f980:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f984:	e041      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f986:	697b      	ldr	r3, [r7, #20]
 800f988:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d002      	beq.n	800f996 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800f990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f994:	e039      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d002      	beq.n	800f9a6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f9a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f9a4:	e031      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d002      	beq.n	800f9b6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f9b0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f9b4:	e029      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f9b6:	697b      	ldr	r3, [r7, #20]
 800f9b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d002      	beq.n	800f9c6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f9c0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f9c4:	e021      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f9c6:	697b      	ldr	r3, [r7, #20]
 800f9c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d002      	beq.n	800f9d6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f9d0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f9d4:	e019      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d002      	beq.n	800f9e6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f9e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f9e4:	e011      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d002      	beq.n	800f9f6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f9f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f9f4:	e009      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	f003 0308 	and.w	r3, r3, #8
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d002      	beq.n	800fa06 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800fa00:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800fa04:	e001      	b.n	800fa0a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fa06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3720      	adds	r7, #32
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	20000000 	.word	0x20000000
 800fa18:	10624dd3 	.word	0x10624dd3
 800fa1c:	fdffe008 	.word	0xfdffe008

0800fa20 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800fa20:	b480      	push	{r7}
 800fa22:	b085      	sub	sp, #20
 800fa24:	af00      	add	r7, sp, #0
 800fa26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fa28:	4b1f      	ldr	r3, [pc, #124]	; (800faa8 <SDMMC_GetCmdResp2+0x88>)
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4a1f      	ldr	r2, [pc, #124]	; (800faac <SDMMC_GetCmdResp2+0x8c>)
 800fa2e:	fba2 2303 	umull	r2, r3, r2, r3
 800fa32:	0a5b      	lsrs	r3, r3, #9
 800fa34:	f241 3288 	movw	r2, #5000	; 0x1388
 800fa38:	fb02 f303 	mul.w	r3, r2, r3
 800fa3c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	1e5a      	subs	r2, r3, #1
 800fa42:	60fa      	str	r2, [r7, #12]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d102      	bne.n	800fa4e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fa48:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fa4c:	e026      	b.n	800fa9c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa52:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d0ef      	beq.n	800fa3e <SDMMC_GetCmdResp2+0x1e>
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d1ea      	bne.n	800fa3e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa6c:	f003 0304 	and.w	r3, r3, #4
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d004      	beq.n	800fa7e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	2204      	movs	r2, #4
 800fa78:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fa7a:	2304      	movs	r3, #4
 800fa7c:	e00e      	b.n	800fa9c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa82:	f003 0301 	and.w	r3, r3, #1
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d004      	beq.n	800fa94 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2201      	movs	r2, #1
 800fa8e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fa90:	2301      	movs	r3, #1
 800fa92:	e003      	b.n	800fa9c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	22c5      	movs	r2, #197	; 0xc5
 800fa98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800fa9a:	2300      	movs	r3, #0
}
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	3714      	adds	r7, #20
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr
 800faa8:	20000000 	.word	0x20000000
 800faac:	10624dd3 	.word	0x10624dd3

0800fab0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800fab0:	b480      	push	{r7}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fab8:	4b1a      	ldr	r3, [pc, #104]	; (800fb24 <SDMMC_GetCmdResp3+0x74>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a1a      	ldr	r2, [pc, #104]	; (800fb28 <SDMMC_GetCmdResp3+0x78>)
 800fabe:	fba2 2303 	umull	r2, r3, r2, r3
 800fac2:	0a5b      	lsrs	r3, r3, #9
 800fac4:	f241 3288 	movw	r2, #5000	; 0x1388
 800fac8:	fb02 f303 	mul.w	r3, r2, r3
 800facc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	1e5a      	subs	r2, r3, #1
 800fad2:	60fa      	str	r2, [r7, #12]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d102      	bne.n	800fade <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fad8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fadc:	e01b      	b.n	800fb16 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fae2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fae4:	68bb      	ldr	r3, [r7, #8]
 800fae6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800faea:	2b00      	cmp	r3, #0
 800faec:	d0ef      	beq.n	800face <SDMMC_GetCmdResp3+0x1e>
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800faf4:	2b00      	cmp	r3, #0
 800faf6:	d1ea      	bne.n	800face <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fafc:	f003 0304 	and.w	r3, r3, #4
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d004      	beq.n	800fb0e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2204      	movs	r2, #4
 800fb08:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb0a:	2304      	movs	r3, #4
 800fb0c:	e003      	b.n	800fb16 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	22c5      	movs	r2, #197	; 0xc5
 800fb12:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fb14:	2300      	movs	r3, #0
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	3714      	adds	r7, #20
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr
 800fb22:	bf00      	nop
 800fb24:	20000000 	.word	0x20000000
 800fb28:	10624dd3 	.word	0x10624dd3

0800fb2c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b088      	sub	sp, #32
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	460b      	mov	r3, r1
 800fb36:	607a      	str	r2, [r7, #4]
 800fb38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fb3a:	4b35      	ldr	r3, [pc, #212]	; (800fc10 <SDMMC_GetCmdResp6+0xe4>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	4a35      	ldr	r2, [pc, #212]	; (800fc14 <SDMMC_GetCmdResp6+0xe8>)
 800fb40:	fba2 2303 	umull	r2, r3, r2, r3
 800fb44:	0a5b      	lsrs	r3, r3, #9
 800fb46:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb4a:	fb02 f303 	mul.w	r3, r2, r3
 800fb4e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800fb50:	69fb      	ldr	r3, [r7, #28]
 800fb52:	1e5a      	subs	r2, r3, #1
 800fb54:	61fa      	str	r2, [r7, #28]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d102      	bne.n	800fb60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fb5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fb5e:	e052      	b.n	800fc06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb64:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d0ef      	beq.n	800fb50 <SDMMC_GetCmdResp6+0x24>
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d1ea      	bne.n	800fb50 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb7e:	f003 0304 	and.w	r3, r3, #4
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d004      	beq.n	800fb90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	2204      	movs	r2, #4
 800fb8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fb8c:	2304      	movs	r3, #4
 800fb8e:	e03a      	b.n	800fc06 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb94:	f003 0301 	and.w	r3, r3, #1
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d004      	beq.n	800fba6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fba2:	2301      	movs	r3, #1
 800fba4:	e02f      	b.n	800fc06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800fba6:	68f8      	ldr	r0, [r7, #12]
 800fba8:	f7ff fbcb 	bl	800f342 <SDIO_GetCommandResponse>
 800fbac:	4603      	mov	r3, r0
 800fbae:	461a      	mov	r2, r3
 800fbb0:	7afb      	ldrb	r3, [r7, #11]
 800fbb2:	4293      	cmp	r3, r2
 800fbb4:	d001      	beq.n	800fbba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fbb6:	2301      	movs	r3, #1
 800fbb8:	e025      	b.n	800fc06 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	22c5      	movs	r2, #197	; 0xc5
 800fbbe:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800fbc0:	2100      	movs	r1, #0
 800fbc2:	68f8      	ldr	r0, [r7, #12]
 800fbc4:	f7ff fbca 	bl	800f35c <SDIO_GetResponse>
 800fbc8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800fbca:	697b      	ldr	r3, [r7, #20]
 800fbcc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d106      	bne.n	800fbe2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	0c1b      	lsrs	r3, r3, #16
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	e011      	b.n	800fc06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800fbe2:	697b      	ldr	r3, [r7, #20]
 800fbe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d002      	beq.n	800fbf2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800fbec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fbf0:	e009      	b.n	800fc06 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800fbf2:	697b      	ldr	r3, [r7, #20]
 800fbf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d002      	beq.n	800fc02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800fbfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fc00:	e001      	b.n	800fc06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800fc02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800fc06:	4618      	mov	r0, r3
 800fc08:	3720      	adds	r7, #32
 800fc0a:	46bd      	mov	sp, r7
 800fc0c:	bd80      	pop	{r7, pc}
 800fc0e:	bf00      	nop
 800fc10:	20000000 	.word	0x20000000
 800fc14:	10624dd3 	.word	0x10624dd3

0800fc18 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800fc18:	b480      	push	{r7}
 800fc1a:	b085      	sub	sp, #20
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fc20:	4b22      	ldr	r3, [pc, #136]	; (800fcac <SDMMC_GetCmdResp7+0x94>)
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a22      	ldr	r2, [pc, #136]	; (800fcb0 <SDMMC_GetCmdResp7+0x98>)
 800fc26:	fba2 2303 	umull	r2, r3, r2, r3
 800fc2a:	0a5b      	lsrs	r3, r3, #9
 800fc2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fc30:	fb02 f303 	mul.w	r3, r2, r3
 800fc34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	1e5a      	subs	r2, r3, #1
 800fc3a:	60fa      	str	r2, [r7, #12]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d102      	bne.n	800fc46 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fc40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fc44:	e02c      	b.n	800fca0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc4a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc4c:	68bb      	ldr	r3, [r7, #8]
 800fc4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d0ef      	beq.n	800fc36 <SDMMC_GetCmdResp7+0x1e>
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d1ea      	bne.n	800fc36 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc64:	f003 0304 	and.w	r3, r3, #4
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d004      	beq.n	800fc76 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	2204      	movs	r2, #4
 800fc70:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800fc72:	2304      	movs	r3, #4
 800fc74:	e014      	b.n	800fca0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800fc76:	687b      	ldr	r3, [r7, #4]
 800fc78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc7a:	f003 0301 	and.w	r3, r3, #1
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d004      	beq.n	800fc8c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2201      	movs	r2, #1
 800fc86:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800fc88:	2301      	movs	r3, #1
 800fc8a:	e009      	b.n	800fca0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d002      	beq.n	800fc9e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2240      	movs	r2, #64	; 0x40
 800fc9c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800fc9e:	2300      	movs	r3, #0
  
}
 800fca0:	4618      	mov	r0, r3
 800fca2:	3714      	adds	r7, #20
 800fca4:	46bd      	mov	sp, r7
 800fca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcaa:	4770      	bx	lr
 800fcac:	20000000 	.word	0x20000000
 800fcb0:	10624dd3 	.word	0x10624dd3

0800fcb4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	b085      	sub	sp, #20
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800fcbc:	4b11      	ldr	r3, [pc, #68]	; (800fd04 <SDMMC_GetCmdError+0x50>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a11      	ldr	r2, [pc, #68]	; (800fd08 <SDMMC_GetCmdError+0x54>)
 800fcc2:	fba2 2303 	umull	r2, r3, r2, r3
 800fcc6:	0a5b      	lsrs	r3, r3, #9
 800fcc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800fccc:	fb02 f303 	mul.w	r3, r2, r3
 800fcd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	1e5a      	subs	r2, r3, #1
 800fcd6:	60fa      	str	r2, [r7, #12]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d102      	bne.n	800fce2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800fcdc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800fce0:	e009      	b.n	800fcf6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d0f1      	beq.n	800fcd2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	22c5      	movs	r2, #197	; 0xc5
 800fcf2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800fcf4:	2300      	movs	r3, #0
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3714      	adds	r7, #20
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr
 800fd02:	bf00      	nop
 800fd04:	20000000 	.word	0x20000000
 800fd08:	10624dd3 	.word	0x10624dd3

0800fd0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fd0c:	b084      	sub	sp, #16
 800fd0e:	b580      	push	{r7, lr}
 800fd10:	b084      	sub	sp, #16
 800fd12:	af00      	add	r7, sp, #0
 800fd14:	6078      	str	r0, [r7, #4]
 800fd16:	f107 001c 	add.w	r0, r7, #28
 800fd1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd20:	2b01      	cmp	r3, #1
 800fd22:	d122      	bne.n	800fd6a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd28:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	68db      	ldr	r3, [r3, #12]
 800fd34:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800fd38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fd3c:	687a      	ldr	r2, [r7, #4]
 800fd3e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	68db      	ldr	r3, [r3, #12]
 800fd44:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fd4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d105      	bne.n	800fd5e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	68db      	ldr	r3, [r3, #12]
 800fd56:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	f001 fbe8 	bl	8011534 <USB_CoreReset>
 800fd64:	4603      	mov	r3, r0
 800fd66:	73fb      	strb	r3, [r7, #15]
 800fd68:	e01a      	b.n	800fda0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fd76:	6878      	ldr	r0, [r7, #4]
 800fd78:	f001 fbdc 	bl	8011534 <USB_CoreReset>
 800fd7c:	4603      	mov	r3, r0
 800fd7e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fd80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d106      	bne.n	800fd94 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd8a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	639a      	str	r2, [r3, #56]	; 0x38
 800fd92:	e005      	b.n	800fda0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fda2:	2b01      	cmp	r3, #1
 800fda4:	d10b      	bne.n	800fdbe <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	689b      	ldr	r3, [r3, #8]
 800fdaa:	f043 0206 	orr.w	r2, r3, #6
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	689b      	ldr	r3, [r3, #8]
 800fdb6:	f043 0220 	orr.w	r2, r3, #32
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fdbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3710      	adds	r7, #16
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fdca:	b004      	add	sp, #16
 800fdcc:	4770      	bx	lr
	...

0800fdd0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fdd0:	b480      	push	{r7}
 800fdd2:	b087      	sub	sp, #28
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	60f8      	str	r0, [r7, #12]
 800fdd8:	60b9      	str	r1, [r7, #8]
 800fdda:	4613      	mov	r3, r2
 800fddc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fdde:	79fb      	ldrb	r3, [r7, #7]
 800fde0:	2b02      	cmp	r3, #2
 800fde2:	d165      	bne.n	800feb0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fde4:	68bb      	ldr	r3, [r7, #8]
 800fde6:	4a41      	ldr	r2, [pc, #260]	; (800feec <USB_SetTurnaroundTime+0x11c>)
 800fde8:	4293      	cmp	r3, r2
 800fdea:	d906      	bls.n	800fdfa <USB_SetTurnaroundTime+0x2a>
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	4a40      	ldr	r2, [pc, #256]	; (800fef0 <USB_SetTurnaroundTime+0x120>)
 800fdf0:	4293      	cmp	r3, r2
 800fdf2:	d202      	bcs.n	800fdfa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fdf4:	230f      	movs	r3, #15
 800fdf6:	617b      	str	r3, [r7, #20]
 800fdf8:	e062      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	4a3c      	ldr	r2, [pc, #240]	; (800fef0 <USB_SetTurnaroundTime+0x120>)
 800fdfe:	4293      	cmp	r3, r2
 800fe00:	d306      	bcc.n	800fe10 <USB_SetTurnaroundTime+0x40>
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	4a3b      	ldr	r2, [pc, #236]	; (800fef4 <USB_SetTurnaroundTime+0x124>)
 800fe06:	4293      	cmp	r3, r2
 800fe08:	d202      	bcs.n	800fe10 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fe0a:	230e      	movs	r3, #14
 800fe0c:	617b      	str	r3, [r7, #20]
 800fe0e:	e057      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fe10:	68bb      	ldr	r3, [r7, #8]
 800fe12:	4a38      	ldr	r2, [pc, #224]	; (800fef4 <USB_SetTurnaroundTime+0x124>)
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d306      	bcc.n	800fe26 <USB_SetTurnaroundTime+0x56>
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	4a37      	ldr	r2, [pc, #220]	; (800fef8 <USB_SetTurnaroundTime+0x128>)
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d202      	bcs.n	800fe26 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fe20:	230d      	movs	r3, #13
 800fe22:	617b      	str	r3, [r7, #20]
 800fe24:	e04c      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	4a33      	ldr	r2, [pc, #204]	; (800fef8 <USB_SetTurnaroundTime+0x128>)
 800fe2a:	4293      	cmp	r3, r2
 800fe2c:	d306      	bcc.n	800fe3c <USB_SetTurnaroundTime+0x6c>
 800fe2e:	68bb      	ldr	r3, [r7, #8]
 800fe30:	4a32      	ldr	r2, [pc, #200]	; (800fefc <USB_SetTurnaroundTime+0x12c>)
 800fe32:	4293      	cmp	r3, r2
 800fe34:	d802      	bhi.n	800fe3c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fe36:	230c      	movs	r3, #12
 800fe38:	617b      	str	r3, [r7, #20]
 800fe3a:	e041      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	4a2f      	ldr	r2, [pc, #188]	; (800fefc <USB_SetTurnaroundTime+0x12c>)
 800fe40:	4293      	cmp	r3, r2
 800fe42:	d906      	bls.n	800fe52 <USB_SetTurnaroundTime+0x82>
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	4a2e      	ldr	r2, [pc, #184]	; (800ff00 <USB_SetTurnaroundTime+0x130>)
 800fe48:	4293      	cmp	r3, r2
 800fe4a:	d802      	bhi.n	800fe52 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fe4c:	230b      	movs	r3, #11
 800fe4e:	617b      	str	r3, [r7, #20]
 800fe50:	e036      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fe52:	68bb      	ldr	r3, [r7, #8]
 800fe54:	4a2a      	ldr	r2, [pc, #168]	; (800ff00 <USB_SetTurnaroundTime+0x130>)
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d906      	bls.n	800fe68 <USB_SetTurnaroundTime+0x98>
 800fe5a:	68bb      	ldr	r3, [r7, #8]
 800fe5c:	4a29      	ldr	r2, [pc, #164]	; (800ff04 <USB_SetTurnaroundTime+0x134>)
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d802      	bhi.n	800fe68 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fe62:	230a      	movs	r3, #10
 800fe64:	617b      	str	r3, [r7, #20]
 800fe66:	e02b      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	4a26      	ldr	r2, [pc, #152]	; (800ff04 <USB_SetTurnaroundTime+0x134>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d906      	bls.n	800fe7e <USB_SetTurnaroundTime+0xae>
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	4a25      	ldr	r2, [pc, #148]	; (800ff08 <USB_SetTurnaroundTime+0x138>)
 800fe74:	4293      	cmp	r3, r2
 800fe76:	d202      	bcs.n	800fe7e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fe78:	2309      	movs	r3, #9
 800fe7a:	617b      	str	r3, [r7, #20]
 800fe7c:	e020      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	4a21      	ldr	r2, [pc, #132]	; (800ff08 <USB_SetTurnaroundTime+0x138>)
 800fe82:	4293      	cmp	r3, r2
 800fe84:	d306      	bcc.n	800fe94 <USB_SetTurnaroundTime+0xc4>
 800fe86:	68bb      	ldr	r3, [r7, #8]
 800fe88:	4a20      	ldr	r2, [pc, #128]	; (800ff0c <USB_SetTurnaroundTime+0x13c>)
 800fe8a:	4293      	cmp	r3, r2
 800fe8c:	d802      	bhi.n	800fe94 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fe8e:	2308      	movs	r3, #8
 800fe90:	617b      	str	r3, [r7, #20]
 800fe92:	e015      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fe94:	68bb      	ldr	r3, [r7, #8]
 800fe96:	4a1d      	ldr	r2, [pc, #116]	; (800ff0c <USB_SetTurnaroundTime+0x13c>)
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d906      	bls.n	800feaa <USB_SetTurnaroundTime+0xda>
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	4a1c      	ldr	r2, [pc, #112]	; (800ff10 <USB_SetTurnaroundTime+0x140>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d202      	bcs.n	800feaa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fea4:	2307      	movs	r3, #7
 800fea6:	617b      	str	r3, [r7, #20]
 800fea8:	e00a      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800feaa:	2306      	movs	r3, #6
 800feac:	617b      	str	r3, [r7, #20]
 800feae:	e007      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800feb0:	79fb      	ldrb	r3, [r7, #7]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d102      	bne.n	800febc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800feb6:	2309      	movs	r3, #9
 800feb8:	617b      	str	r3, [r7, #20]
 800feba:	e001      	b.n	800fec0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800febc:	2309      	movs	r3, #9
 800febe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	68db      	ldr	r3, [r3, #12]
 800fec4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	68da      	ldr	r2, [r3, #12]
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	029b      	lsls	r3, r3, #10
 800fed4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fed8:	431a      	orrs	r2, r3
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fede:	2300      	movs	r3, #0
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	371c      	adds	r7, #28
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr
 800feec:	00d8acbf 	.word	0x00d8acbf
 800fef0:	00e4e1c0 	.word	0x00e4e1c0
 800fef4:	00f42400 	.word	0x00f42400
 800fef8:	01067380 	.word	0x01067380
 800fefc:	011a499f 	.word	0x011a499f
 800ff00:	01312cff 	.word	0x01312cff
 800ff04:	014ca43f 	.word	0x014ca43f
 800ff08:	016e3600 	.word	0x016e3600
 800ff0c:	01a6ab1f 	.word	0x01a6ab1f
 800ff10:	01e84800 	.word	0x01e84800

0800ff14 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff14:	b480      	push	{r7}
 800ff16:	b083      	sub	sp, #12
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	689b      	ldr	r3, [r3, #8]
 800ff20:	f043 0201 	orr.w	r2, r3, #1
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ff28:	2300      	movs	r3, #0
}
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	370c      	adds	r7, #12
 800ff2e:	46bd      	mov	sp, r7
 800ff30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff34:	4770      	bx	lr

0800ff36 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ff36:	b480      	push	{r7}
 800ff38:	b083      	sub	sp, #12
 800ff3a:	af00      	add	r7, sp, #0
 800ff3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	689b      	ldr	r3, [r3, #8]
 800ff42:	f023 0201 	bic.w	r2, r3, #1
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ff4a:	2300      	movs	r3, #0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	460b      	mov	r3, r1
 800ff62:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ff64:	2300      	movs	r3, #0
 800ff66:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ff74:	78fb      	ldrb	r3, [r7, #3]
 800ff76:	2b01      	cmp	r3, #1
 800ff78:	d115      	bne.n	800ffa6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	68db      	ldr	r3, [r3, #12]
 800ff7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ff86:	2001      	movs	r0, #1
 800ff88:	f7f6 fef6 	bl	8006d78 <HAL_Delay>
      ms++;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	3301      	adds	r3, #1
 800ff90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ff92:	6878      	ldr	r0, [r7, #4]
 800ff94:	f001 fa3f 	bl	8011416 <USB_GetMode>
 800ff98:	4603      	mov	r3, r0
 800ff9a:	2b01      	cmp	r3, #1
 800ff9c:	d01e      	beq.n	800ffdc <USB_SetCurrentMode+0x84>
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2b31      	cmp	r3, #49	; 0x31
 800ffa2:	d9f0      	bls.n	800ff86 <USB_SetCurrentMode+0x2e>
 800ffa4:	e01a      	b.n	800ffdc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ffa6:	78fb      	ldrb	r3, [r7, #3]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d115      	bne.n	800ffd8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	68db      	ldr	r3, [r3, #12]
 800ffb0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ffb8:	2001      	movs	r0, #1
 800ffba:	f7f6 fedd 	bl	8006d78 <HAL_Delay>
      ms++;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f001 fa26 	bl	8011416 <USB_GetMode>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d005      	beq.n	800ffdc <USB_SetCurrentMode+0x84>
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2b31      	cmp	r3, #49	; 0x31
 800ffd4:	d9f0      	bls.n	800ffb8 <USB_SetCurrentMode+0x60>
 800ffd6:	e001      	b.n	800ffdc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	e005      	b.n	800ffe8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	2b32      	cmp	r3, #50	; 0x32
 800ffe0:	d101      	bne.n	800ffe6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	e000      	b.n	800ffe8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ffe6:	2300      	movs	r3, #0
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3710      	adds	r7, #16
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fff0:	b084      	sub	sp, #16
 800fff2:	b580      	push	{r7, lr}
 800fff4:	b086      	sub	sp, #24
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
 800fffa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fffe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010002:	2300      	movs	r3, #0
 8010004:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801000a:	2300      	movs	r3, #0
 801000c:	613b      	str	r3, [r7, #16]
 801000e:	e009      	b.n	8010024 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	693b      	ldr	r3, [r7, #16]
 8010014:	3340      	adds	r3, #64	; 0x40
 8010016:	009b      	lsls	r3, r3, #2
 8010018:	4413      	add	r3, r2
 801001a:	2200      	movs	r2, #0
 801001c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	3301      	adds	r3, #1
 8010022:	613b      	str	r3, [r7, #16]
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	2b0e      	cmp	r3, #14
 8010028:	d9f2      	bls.n	8010010 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801002a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801002c:	2b00      	cmp	r3, #0
 801002e:	d11c      	bne.n	801006a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010036:	685b      	ldr	r3, [r3, #4]
 8010038:	68fa      	ldr	r2, [r7, #12]
 801003a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801003e:	f043 0302 	orr.w	r3, r3, #2
 8010042:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010048:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	601a      	str	r2, [r3, #0]
 8010068:	e005      	b.n	8010076 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801006e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801007c:	461a      	mov	r2, r3
 801007e:	2300      	movs	r3, #0
 8010080:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010088:	4619      	mov	r1, r3
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010090:	461a      	mov	r2, r3
 8010092:	680b      	ldr	r3, [r1, #0]
 8010094:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010098:	2b01      	cmp	r3, #1
 801009a:	d10c      	bne.n	80100b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801009c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d104      	bne.n	80100ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80100a2:	2100      	movs	r1, #0
 80100a4:	6878      	ldr	r0, [r7, #4]
 80100a6:	f000 f965 	bl	8010374 <USB_SetDevSpeed>
 80100aa:	e008      	b.n	80100be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80100ac:	2101      	movs	r1, #1
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f960 	bl	8010374 <USB_SetDevSpeed>
 80100b4:	e003      	b.n	80100be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80100b6:	2103      	movs	r1, #3
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f000 f95b 	bl	8010374 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80100be:	2110      	movs	r1, #16
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f000 f8f3 	bl	80102ac <USB_FlushTxFifo>
 80100c6:	4603      	mov	r3, r0
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	d001      	beq.n	80100d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80100cc:	2301      	movs	r3, #1
 80100ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80100d0:	6878      	ldr	r0, [r7, #4]
 80100d2:	f000 f91f 	bl	8010314 <USB_FlushRxFifo>
 80100d6:	4603      	mov	r3, r0
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d001      	beq.n	80100e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80100dc:	2301      	movs	r3, #1
 80100de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100e6:	461a      	mov	r2, r3
 80100e8:	2300      	movs	r3, #0
 80100ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80100ec:	68fb      	ldr	r3, [r7, #12]
 80100ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100f2:	461a      	mov	r2, r3
 80100f4:	2300      	movs	r3, #0
 80100f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100fe:	461a      	mov	r2, r3
 8010100:	2300      	movs	r3, #0
 8010102:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010104:	2300      	movs	r3, #0
 8010106:	613b      	str	r3, [r7, #16]
 8010108:	e043      	b.n	8010192 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	015a      	lsls	r2, r3, #5
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	4413      	add	r3, r2
 8010112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801011c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010120:	d118      	bne.n	8010154 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d10a      	bne.n	801013e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010128:	693b      	ldr	r3, [r7, #16]
 801012a:	015a      	lsls	r2, r3, #5
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	4413      	add	r3, r2
 8010130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010134:	461a      	mov	r2, r3
 8010136:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801013a:	6013      	str	r3, [r2, #0]
 801013c:	e013      	b.n	8010166 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801013e:	693b      	ldr	r3, [r7, #16]
 8010140:	015a      	lsls	r2, r3, #5
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	4413      	add	r3, r2
 8010146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801014a:	461a      	mov	r2, r3
 801014c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010150:	6013      	str	r3, [r2, #0]
 8010152:	e008      	b.n	8010166 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010154:	693b      	ldr	r3, [r7, #16]
 8010156:	015a      	lsls	r2, r3, #5
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	4413      	add	r3, r2
 801015c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010160:	461a      	mov	r2, r3
 8010162:	2300      	movs	r3, #0
 8010164:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010166:	693b      	ldr	r3, [r7, #16]
 8010168:	015a      	lsls	r2, r3, #5
 801016a:	68fb      	ldr	r3, [r7, #12]
 801016c:	4413      	add	r3, r2
 801016e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010172:	461a      	mov	r2, r3
 8010174:	2300      	movs	r3, #0
 8010176:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010178:	693b      	ldr	r3, [r7, #16]
 801017a:	015a      	lsls	r2, r3, #5
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	4413      	add	r3, r2
 8010180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010184:	461a      	mov	r2, r3
 8010186:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801018a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801018c:	693b      	ldr	r3, [r7, #16]
 801018e:	3301      	adds	r3, #1
 8010190:	613b      	str	r3, [r7, #16]
 8010192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010194:	693a      	ldr	r2, [r7, #16]
 8010196:	429a      	cmp	r2, r3
 8010198:	d3b7      	bcc.n	801010a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801019a:	2300      	movs	r3, #0
 801019c:	613b      	str	r3, [r7, #16]
 801019e:	e043      	b.n	8010228 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80101a0:	693b      	ldr	r3, [r7, #16]
 80101a2:	015a      	lsls	r2, r3, #5
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	4413      	add	r3, r2
 80101a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101b6:	d118      	bne.n	80101ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d10a      	bne.n	80101d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80101be:	693b      	ldr	r3, [r7, #16]
 80101c0:	015a      	lsls	r2, r3, #5
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	4413      	add	r3, r2
 80101c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101ca:	461a      	mov	r2, r3
 80101cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80101d0:	6013      	str	r3, [r2, #0]
 80101d2:	e013      	b.n	80101fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80101d4:	693b      	ldr	r3, [r7, #16]
 80101d6:	015a      	lsls	r2, r3, #5
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	4413      	add	r3, r2
 80101dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101e0:	461a      	mov	r2, r3
 80101e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80101e6:	6013      	str	r3, [r2, #0]
 80101e8:	e008      	b.n	80101fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80101ea:	693b      	ldr	r3, [r7, #16]
 80101ec:	015a      	lsls	r2, r3, #5
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	4413      	add	r3, r2
 80101f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101f6:	461a      	mov	r2, r3
 80101f8:	2300      	movs	r3, #0
 80101fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80101fc:	693b      	ldr	r3, [r7, #16]
 80101fe:	015a      	lsls	r2, r3, #5
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	4413      	add	r3, r2
 8010204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010208:	461a      	mov	r2, r3
 801020a:	2300      	movs	r3, #0
 801020c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801020e:	693b      	ldr	r3, [r7, #16]
 8010210:	015a      	lsls	r2, r3, #5
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	4413      	add	r3, r2
 8010216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801021a:	461a      	mov	r2, r3
 801021c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010220:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010222:	693b      	ldr	r3, [r7, #16]
 8010224:	3301      	adds	r3, #1
 8010226:	613b      	str	r3, [r7, #16]
 8010228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801022a:	693a      	ldr	r2, [r7, #16]
 801022c:	429a      	cmp	r2, r3
 801022e:	d3b7      	bcc.n	80101a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010230:	68fb      	ldr	r3, [r7, #12]
 8010232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010236:	691b      	ldr	r3, [r3, #16]
 8010238:	68fa      	ldr	r2, [r7, #12]
 801023a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801023e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010242:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	2200      	movs	r2, #0
 8010248:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010250:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010254:	2b00      	cmp	r3, #0
 8010256:	d105      	bne.n	8010264 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	699b      	ldr	r3, [r3, #24]
 801025c:	f043 0210 	orr.w	r2, r3, #16
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	699a      	ldr	r2, [r3, #24]
 8010268:	4b0f      	ldr	r3, [pc, #60]	; (80102a8 <USB_DevInit+0x2b8>)
 801026a:	4313      	orrs	r3, r2
 801026c:	687a      	ldr	r2, [r7, #4]
 801026e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010272:	2b00      	cmp	r3, #0
 8010274:	d005      	beq.n	8010282 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	699b      	ldr	r3, [r3, #24]
 801027a:	f043 0208 	orr.w	r2, r3, #8
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010284:	2b01      	cmp	r3, #1
 8010286:	d107      	bne.n	8010298 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	699b      	ldr	r3, [r3, #24]
 801028c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010290:	f043 0304 	orr.w	r3, r3, #4
 8010294:	687a      	ldr	r2, [r7, #4]
 8010296:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010298:	7dfb      	ldrb	r3, [r7, #23]
}
 801029a:	4618      	mov	r0, r3
 801029c:	3718      	adds	r7, #24
 801029e:	46bd      	mov	sp, r7
 80102a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80102a4:	b004      	add	sp, #16
 80102a6:	4770      	bx	lr
 80102a8:	803c3800 	.word	0x803c3800

080102ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b085      	sub	sp, #20
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80102b6:	2300      	movs	r3, #0
 80102b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	3301      	adds	r3, #1
 80102be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	4a13      	ldr	r2, [pc, #76]	; (8010310 <USB_FlushTxFifo+0x64>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d901      	bls.n	80102cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80102c8:	2303      	movs	r3, #3
 80102ca:	e01b      	b.n	8010304 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	691b      	ldr	r3, [r3, #16]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	daf2      	bge.n	80102ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80102d4:	2300      	movs	r3, #0
 80102d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	019b      	lsls	r3, r3, #6
 80102dc:	f043 0220 	orr.w	r2, r3, #32
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	3301      	adds	r3, #1
 80102e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	4a08      	ldr	r2, [pc, #32]	; (8010310 <USB_FlushTxFifo+0x64>)
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d901      	bls.n	80102f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80102f2:	2303      	movs	r3, #3
 80102f4:	e006      	b.n	8010304 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	691b      	ldr	r3, [r3, #16]
 80102fa:	f003 0320 	and.w	r3, r3, #32
 80102fe:	2b20      	cmp	r3, #32
 8010300:	d0f0      	beq.n	80102e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010302:	2300      	movs	r3, #0
}
 8010304:	4618      	mov	r0, r3
 8010306:	3714      	adds	r7, #20
 8010308:	46bd      	mov	sp, r7
 801030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801030e:	4770      	bx	lr
 8010310:	00030d40 	.word	0x00030d40

08010314 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010314:	b480      	push	{r7}
 8010316:	b085      	sub	sp, #20
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801031c:	2300      	movs	r3, #0
 801031e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010320:	68fb      	ldr	r3, [r7, #12]
 8010322:	3301      	adds	r3, #1
 8010324:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	4a11      	ldr	r2, [pc, #68]	; (8010370 <USB_FlushRxFifo+0x5c>)
 801032a:	4293      	cmp	r3, r2
 801032c:	d901      	bls.n	8010332 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801032e:	2303      	movs	r3, #3
 8010330:	e018      	b.n	8010364 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	691b      	ldr	r3, [r3, #16]
 8010336:	2b00      	cmp	r3, #0
 8010338:	daf2      	bge.n	8010320 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801033a:	2300      	movs	r3, #0
 801033c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	2210      	movs	r2, #16
 8010342:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	3301      	adds	r3, #1
 8010348:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801034a:	68fb      	ldr	r3, [r7, #12]
 801034c:	4a08      	ldr	r2, [pc, #32]	; (8010370 <USB_FlushRxFifo+0x5c>)
 801034e:	4293      	cmp	r3, r2
 8010350:	d901      	bls.n	8010356 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010352:	2303      	movs	r3, #3
 8010354:	e006      	b.n	8010364 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	691b      	ldr	r3, [r3, #16]
 801035a:	f003 0310 	and.w	r3, r3, #16
 801035e:	2b10      	cmp	r3, #16
 8010360:	d0f0      	beq.n	8010344 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010362:	2300      	movs	r3, #0
}
 8010364:	4618      	mov	r0, r3
 8010366:	3714      	adds	r7, #20
 8010368:	46bd      	mov	sp, r7
 801036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036e:	4770      	bx	lr
 8010370:	00030d40 	.word	0x00030d40

08010374 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010374:	b480      	push	{r7}
 8010376:	b085      	sub	sp, #20
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
 801037c:	460b      	mov	r3, r1
 801037e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801038a:	681a      	ldr	r2, [r3, #0]
 801038c:	78fb      	ldrb	r3, [r7, #3]
 801038e:	68f9      	ldr	r1, [r7, #12]
 8010390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010394:	4313      	orrs	r3, r2
 8010396:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010398:	2300      	movs	r3, #0
}
 801039a:	4618      	mov	r0, r3
 801039c:	3714      	adds	r7, #20
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr

080103a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80103a6:	b480      	push	{r7}
 80103a8:	b087      	sub	sp, #28
 80103aa:	af00      	add	r7, sp, #0
 80103ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80103b2:	693b      	ldr	r3, [r7, #16]
 80103b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103b8:	689b      	ldr	r3, [r3, #8]
 80103ba:	f003 0306 	and.w	r3, r3, #6
 80103be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d102      	bne.n	80103cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80103c6:	2300      	movs	r3, #0
 80103c8:	75fb      	strb	r3, [r7, #23]
 80103ca:	e00a      	b.n	80103e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80103cc:	68fb      	ldr	r3, [r7, #12]
 80103ce:	2b02      	cmp	r3, #2
 80103d0:	d002      	beq.n	80103d8 <USB_GetDevSpeed+0x32>
 80103d2:	68fb      	ldr	r3, [r7, #12]
 80103d4:	2b06      	cmp	r3, #6
 80103d6:	d102      	bne.n	80103de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80103d8:	2302      	movs	r3, #2
 80103da:	75fb      	strb	r3, [r7, #23]
 80103dc:	e001      	b.n	80103e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80103de:	230f      	movs	r3, #15
 80103e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80103e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	371c      	adds	r7, #28
 80103e8:	46bd      	mov	sp, r7
 80103ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ee:	4770      	bx	lr

080103f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b085      	sub	sp, #20
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80103fe:	683b      	ldr	r3, [r7, #0]
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010404:	683b      	ldr	r3, [r7, #0]
 8010406:	785b      	ldrb	r3, [r3, #1]
 8010408:	2b01      	cmp	r3, #1
 801040a:	d13a      	bne.n	8010482 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010412:	69da      	ldr	r2, [r3, #28]
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	781b      	ldrb	r3, [r3, #0]
 8010418:	f003 030f 	and.w	r3, r3, #15
 801041c:	2101      	movs	r1, #1
 801041e:	fa01 f303 	lsl.w	r3, r1, r3
 8010422:	b29b      	uxth	r3, r3
 8010424:	68f9      	ldr	r1, [r7, #12]
 8010426:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801042a:	4313      	orrs	r3, r2
 801042c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801042e:	68bb      	ldr	r3, [r7, #8]
 8010430:	015a      	lsls	r2, r3, #5
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	4413      	add	r3, r2
 8010436:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010440:	2b00      	cmp	r3, #0
 8010442:	d155      	bne.n	80104f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	015a      	lsls	r2, r3, #5
 8010448:	68fb      	ldr	r3, [r7, #12]
 801044a:	4413      	add	r3, r2
 801044c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010450:	681a      	ldr	r2, [r3, #0]
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	68db      	ldr	r3, [r3, #12]
 8010456:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801045a:	683b      	ldr	r3, [r7, #0]
 801045c:	791b      	ldrb	r3, [r3, #4]
 801045e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010460:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010462:	68bb      	ldr	r3, [r7, #8]
 8010464:	059b      	lsls	r3, r3, #22
 8010466:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010468:	4313      	orrs	r3, r2
 801046a:	68ba      	ldr	r2, [r7, #8]
 801046c:	0151      	lsls	r1, r2, #5
 801046e:	68fa      	ldr	r2, [r7, #12]
 8010470:	440a      	add	r2, r1
 8010472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801047a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801047e:	6013      	str	r3, [r2, #0]
 8010480:	e036      	b.n	80104f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010488:	69da      	ldr	r2, [r3, #28]
 801048a:	683b      	ldr	r3, [r7, #0]
 801048c:	781b      	ldrb	r3, [r3, #0]
 801048e:	f003 030f 	and.w	r3, r3, #15
 8010492:	2101      	movs	r1, #1
 8010494:	fa01 f303 	lsl.w	r3, r1, r3
 8010498:	041b      	lsls	r3, r3, #16
 801049a:	68f9      	ldr	r1, [r7, #12]
 801049c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104a0:	4313      	orrs	r3, r2
 80104a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80104a4:	68bb      	ldr	r3, [r7, #8]
 80104a6:	015a      	lsls	r2, r3, #5
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	4413      	add	r3, r2
 80104ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d11a      	bne.n	80104f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80104ba:	68bb      	ldr	r3, [r7, #8]
 80104bc:	015a      	lsls	r2, r3, #5
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	4413      	add	r3, r2
 80104c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80104d0:	683b      	ldr	r3, [r7, #0]
 80104d2:	791b      	ldrb	r3, [r3, #4]
 80104d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80104d6:	430b      	orrs	r3, r1
 80104d8:	4313      	orrs	r3, r2
 80104da:	68ba      	ldr	r2, [r7, #8]
 80104dc:	0151      	lsls	r1, r2, #5
 80104de:	68fa      	ldr	r2, [r7, #12]
 80104e0:	440a      	add	r2, r1
 80104e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80104e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80104ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80104f0:	2300      	movs	r3, #0
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3714      	adds	r7, #20
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr
	...

08010500 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010500:	b480      	push	{r7}
 8010502:	b085      	sub	sp, #20
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010514:	683b      	ldr	r3, [r7, #0]
 8010516:	785b      	ldrb	r3, [r3, #1]
 8010518:	2b01      	cmp	r3, #1
 801051a:	d161      	bne.n	80105e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801051c:	68bb      	ldr	r3, [r7, #8]
 801051e:	015a      	lsls	r2, r3, #5
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	4413      	add	r3, r2
 8010524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801052e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010532:	d11f      	bne.n	8010574 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010534:	68bb      	ldr	r3, [r7, #8]
 8010536:	015a      	lsls	r2, r3, #5
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	4413      	add	r3, r2
 801053c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	68ba      	ldr	r2, [r7, #8]
 8010544:	0151      	lsls	r1, r2, #5
 8010546:	68fa      	ldr	r2, [r7, #12]
 8010548:	440a      	add	r2, r1
 801054a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801054e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010552:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	015a      	lsls	r2, r3, #5
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	4413      	add	r3, r2
 801055c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	68ba      	ldr	r2, [r7, #8]
 8010564:	0151      	lsls	r1, r2, #5
 8010566:	68fa      	ldr	r2, [r7, #12]
 8010568:	440a      	add	r2, r1
 801056a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801056e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010572:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801057a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801057c:	683b      	ldr	r3, [r7, #0]
 801057e:	781b      	ldrb	r3, [r3, #0]
 8010580:	f003 030f 	and.w	r3, r3, #15
 8010584:	2101      	movs	r1, #1
 8010586:	fa01 f303 	lsl.w	r3, r1, r3
 801058a:	b29b      	uxth	r3, r3
 801058c:	43db      	mvns	r3, r3
 801058e:	68f9      	ldr	r1, [r7, #12]
 8010590:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010594:	4013      	ands	r3, r2
 8010596:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801059e:	69da      	ldr	r2, [r3, #28]
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	781b      	ldrb	r3, [r3, #0]
 80105a4:	f003 030f 	and.w	r3, r3, #15
 80105a8:	2101      	movs	r1, #1
 80105aa:	fa01 f303 	lsl.w	r3, r1, r3
 80105ae:	b29b      	uxth	r3, r3
 80105b0:	43db      	mvns	r3, r3
 80105b2:	68f9      	ldr	r1, [r7, #12]
 80105b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80105b8:	4013      	ands	r3, r2
 80105ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	015a      	lsls	r2, r3, #5
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	4413      	add	r3, r2
 80105c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105c8:	681a      	ldr	r2, [r3, #0]
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	0159      	lsls	r1, r3, #5
 80105ce:	68fb      	ldr	r3, [r7, #12]
 80105d0:	440b      	add	r3, r1
 80105d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105d6:	4619      	mov	r1, r3
 80105d8:	4b35      	ldr	r3, [pc, #212]	; (80106b0 <USB_DeactivateEndpoint+0x1b0>)
 80105da:	4013      	ands	r3, r2
 80105dc:	600b      	str	r3, [r1, #0]
 80105de:	e060      	b.n	80106a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	015a      	lsls	r2, r3, #5
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	4413      	add	r3, r2
 80105e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80105f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80105f6:	d11f      	bne.n	8010638 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80105f8:	68bb      	ldr	r3, [r7, #8]
 80105fa:	015a      	lsls	r2, r3, #5
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	4413      	add	r3, r2
 8010600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	68ba      	ldr	r2, [r7, #8]
 8010608:	0151      	lsls	r1, r2, #5
 801060a:	68fa      	ldr	r2, [r7, #12]
 801060c:	440a      	add	r2, r1
 801060e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010612:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010616:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	015a      	lsls	r2, r3, #5
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	4413      	add	r3, r2
 8010620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	68ba      	ldr	r2, [r7, #8]
 8010628:	0151      	lsls	r1, r2, #5
 801062a:	68fa      	ldr	r2, [r7, #12]
 801062c:	440a      	add	r2, r1
 801062e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010636:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801063e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	781b      	ldrb	r3, [r3, #0]
 8010644:	f003 030f 	and.w	r3, r3, #15
 8010648:	2101      	movs	r1, #1
 801064a:	fa01 f303 	lsl.w	r3, r1, r3
 801064e:	041b      	lsls	r3, r3, #16
 8010650:	43db      	mvns	r3, r3
 8010652:	68f9      	ldr	r1, [r7, #12]
 8010654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010658:	4013      	ands	r3, r2
 801065a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010662:	69da      	ldr	r2, [r3, #28]
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	781b      	ldrb	r3, [r3, #0]
 8010668:	f003 030f 	and.w	r3, r3, #15
 801066c:	2101      	movs	r1, #1
 801066e:	fa01 f303 	lsl.w	r3, r1, r3
 8010672:	041b      	lsls	r3, r3, #16
 8010674:	43db      	mvns	r3, r3
 8010676:	68f9      	ldr	r1, [r7, #12]
 8010678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801067c:	4013      	ands	r3, r2
 801067e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	015a      	lsls	r2, r3, #5
 8010684:	68fb      	ldr	r3, [r7, #12]
 8010686:	4413      	add	r3, r2
 8010688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801068c:	681a      	ldr	r2, [r3, #0]
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	0159      	lsls	r1, r3, #5
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	440b      	add	r3, r1
 8010696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801069a:	4619      	mov	r1, r3
 801069c:	4b05      	ldr	r3, [pc, #20]	; (80106b4 <USB_DeactivateEndpoint+0x1b4>)
 801069e:	4013      	ands	r3, r2
 80106a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80106a2:	2300      	movs	r3, #0
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3714      	adds	r7, #20
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr
 80106b0:	ec337800 	.word	0xec337800
 80106b4:	eff37800 	.word	0xeff37800

080106b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b08a      	sub	sp, #40	; 0x28
 80106bc:	af02      	add	r7, sp, #8
 80106be:	60f8      	str	r0, [r7, #12]
 80106c0:	60b9      	str	r1, [r7, #8]
 80106c2:	4613      	mov	r3, r2
 80106c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80106ca:	68bb      	ldr	r3, [r7, #8]
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	785b      	ldrb	r3, [r3, #1]
 80106d4:	2b01      	cmp	r3, #1
 80106d6:	f040 815c 	bne.w	8010992 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	699b      	ldr	r3, [r3, #24]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d132      	bne.n	8010748 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80106e2:	69bb      	ldr	r3, [r7, #24]
 80106e4:	015a      	lsls	r2, r3, #5
 80106e6:	69fb      	ldr	r3, [r7, #28]
 80106e8:	4413      	add	r3, r2
 80106ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106ee:	691b      	ldr	r3, [r3, #16]
 80106f0:	69ba      	ldr	r2, [r7, #24]
 80106f2:	0151      	lsls	r1, r2, #5
 80106f4:	69fa      	ldr	r2, [r7, #28]
 80106f6:	440a      	add	r2, r1
 80106f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80106fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010700:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010706:	69bb      	ldr	r3, [r7, #24]
 8010708:	015a      	lsls	r2, r3, #5
 801070a:	69fb      	ldr	r3, [r7, #28]
 801070c:	4413      	add	r3, r2
 801070e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010712:	691b      	ldr	r3, [r3, #16]
 8010714:	69ba      	ldr	r2, [r7, #24]
 8010716:	0151      	lsls	r1, r2, #5
 8010718:	69fa      	ldr	r2, [r7, #28]
 801071a:	440a      	add	r2, r1
 801071c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010726:	69bb      	ldr	r3, [r7, #24]
 8010728:	015a      	lsls	r2, r3, #5
 801072a:	69fb      	ldr	r3, [r7, #28]
 801072c:	4413      	add	r3, r2
 801072e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010732:	691b      	ldr	r3, [r3, #16]
 8010734:	69ba      	ldr	r2, [r7, #24]
 8010736:	0151      	lsls	r1, r2, #5
 8010738:	69fa      	ldr	r2, [r7, #28]
 801073a:	440a      	add	r2, r1
 801073c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010740:	0cdb      	lsrs	r3, r3, #19
 8010742:	04db      	lsls	r3, r3, #19
 8010744:	6113      	str	r3, [r2, #16]
 8010746:	e074      	b.n	8010832 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010748:	69bb      	ldr	r3, [r7, #24]
 801074a:	015a      	lsls	r2, r3, #5
 801074c:	69fb      	ldr	r3, [r7, #28]
 801074e:	4413      	add	r3, r2
 8010750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010754:	691b      	ldr	r3, [r3, #16]
 8010756:	69ba      	ldr	r2, [r7, #24]
 8010758:	0151      	lsls	r1, r2, #5
 801075a:	69fa      	ldr	r2, [r7, #28]
 801075c:	440a      	add	r2, r1
 801075e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010762:	0cdb      	lsrs	r3, r3, #19
 8010764:	04db      	lsls	r3, r3, #19
 8010766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010768:	69bb      	ldr	r3, [r7, #24]
 801076a:	015a      	lsls	r2, r3, #5
 801076c:	69fb      	ldr	r3, [r7, #28]
 801076e:	4413      	add	r3, r2
 8010770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010774:	691b      	ldr	r3, [r3, #16]
 8010776:	69ba      	ldr	r2, [r7, #24]
 8010778:	0151      	lsls	r1, r2, #5
 801077a:	69fa      	ldr	r2, [r7, #28]
 801077c:	440a      	add	r2, r1
 801077e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010782:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010786:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801078a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 801078c:	69bb      	ldr	r3, [r7, #24]
 801078e:	015a      	lsls	r2, r3, #5
 8010790:	69fb      	ldr	r3, [r7, #28]
 8010792:	4413      	add	r3, r2
 8010794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010798:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	6999      	ldr	r1, [r3, #24]
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	68db      	ldr	r3, [r3, #12]
 80107a2:	440b      	add	r3, r1
 80107a4:	1e59      	subs	r1, r3, #1
 80107a6:	68bb      	ldr	r3, [r7, #8]
 80107a8:	68db      	ldr	r3, [r3, #12]
 80107aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80107ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80107b0:	4b9d      	ldr	r3, [pc, #628]	; (8010a28 <USB_EPStartXfer+0x370>)
 80107b2:	400b      	ands	r3, r1
 80107b4:	69b9      	ldr	r1, [r7, #24]
 80107b6:	0148      	lsls	r0, r1, #5
 80107b8:	69f9      	ldr	r1, [r7, #28]
 80107ba:	4401      	add	r1, r0
 80107bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80107c0:	4313      	orrs	r3, r2
 80107c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80107c4:	69bb      	ldr	r3, [r7, #24]
 80107c6:	015a      	lsls	r2, r3, #5
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	4413      	add	r3, r2
 80107cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107d0:	691a      	ldr	r2, [r3, #16]
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	699b      	ldr	r3, [r3, #24]
 80107d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107da:	69b9      	ldr	r1, [r7, #24]
 80107dc:	0148      	lsls	r0, r1, #5
 80107de:	69f9      	ldr	r1, [r7, #28]
 80107e0:	4401      	add	r1, r0
 80107e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80107e6:	4313      	orrs	r3, r2
 80107e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	791b      	ldrb	r3, [r3, #4]
 80107ee:	2b01      	cmp	r3, #1
 80107f0:	d11f      	bne.n	8010832 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80107f2:	69bb      	ldr	r3, [r7, #24]
 80107f4:	015a      	lsls	r2, r3, #5
 80107f6:	69fb      	ldr	r3, [r7, #28]
 80107f8:	4413      	add	r3, r2
 80107fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107fe:	691b      	ldr	r3, [r3, #16]
 8010800:	69ba      	ldr	r2, [r7, #24]
 8010802:	0151      	lsls	r1, r2, #5
 8010804:	69fa      	ldr	r2, [r7, #28]
 8010806:	440a      	add	r2, r1
 8010808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801080c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010810:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010812:	69bb      	ldr	r3, [r7, #24]
 8010814:	015a      	lsls	r2, r3, #5
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	4413      	add	r3, r2
 801081a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801081e:	691b      	ldr	r3, [r3, #16]
 8010820:	69ba      	ldr	r2, [r7, #24]
 8010822:	0151      	lsls	r1, r2, #5
 8010824:	69fa      	ldr	r2, [r7, #28]
 8010826:	440a      	add	r2, r1
 8010828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801082c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010830:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010832:	79fb      	ldrb	r3, [r7, #7]
 8010834:	2b01      	cmp	r3, #1
 8010836:	d14b      	bne.n	80108d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010838:	68bb      	ldr	r3, [r7, #8]
 801083a:	695b      	ldr	r3, [r3, #20]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d009      	beq.n	8010854 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010840:	69bb      	ldr	r3, [r7, #24]
 8010842:	015a      	lsls	r2, r3, #5
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	4413      	add	r3, r2
 8010848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801084c:	461a      	mov	r2, r3
 801084e:	68bb      	ldr	r3, [r7, #8]
 8010850:	695b      	ldr	r3, [r3, #20]
 8010852:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010854:	68bb      	ldr	r3, [r7, #8]
 8010856:	791b      	ldrb	r3, [r3, #4]
 8010858:	2b01      	cmp	r3, #1
 801085a:	d128      	bne.n	80108ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010862:	689b      	ldr	r3, [r3, #8]
 8010864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010868:	2b00      	cmp	r3, #0
 801086a:	d110      	bne.n	801088e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801086c:	69bb      	ldr	r3, [r7, #24]
 801086e:	015a      	lsls	r2, r3, #5
 8010870:	69fb      	ldr	r3, [r7, #28]
 8010872:	4413      	add	r3, r2
 8010874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	69ba      	ldr	r2, [r7, #24]
 801087c:	0151      	lsls	r1, r2, #5
 801087e:	69fa      	ldr	r2, [r7, #28]
 8010880:	440a      	add	r2, r1
 8010882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801088a:	6013      	str	r3, [r2, #0]
 801088c:	e00f      	b.n	80108ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801088e:	69bb      	ldr	r3, [r7, #24]
 8010890:	015a      	lsls	r2, r3, #5
 8010892:	69fb      	ldr	r3, [r7, #28]
 8010894:	4413      	add	r3, r2
 8010896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801089a:	681b      	ldr	r3, [r3, #0]
 801089c:	69ba      	ldr	r2, [r7, #24]
 801089e:	0151      	lsls	r1, r2, #5
 80108a0:	69fa      	ldr	r2, [r7, #28]
 80108a2:	440a      	add	r2, r1
 80108a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80108ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80108ae:	69bb      	ldr	r3, [r7, #24]
 80108b0:	015a      	lsls	r2, r3, #5
 80108b2:	69fb      	ldr	r3, [r7, #28]
 80108b4:	4413      	add	r3, r2
 80108b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	69ba      	ldr	r2, [r7, #24]
 80108be:	0151      	lsls	r1, r2, #5
 80108c0:	69fa      	ldr	r2, [r7, #28]
 80108c2:	440a      	add	r2, r1
 80108c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80108cc:	6013      	str	r3, [r2, #0]
 80108ce:	e133      	b.n	8010b38 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80108d0:	69bb      	ldr	r3, [r7, #24]
 80108d2:	015a      	lsls	r2, r3, #5
 80108d4:	69fb      	ldr	r3, [r7, #28]
 80108d6:	4413      	add	r3, r2
 80108d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	69ba      	ldr	r2, [r7, #24]
 80108e0:	0151      	lsls	r1, r2, #5
 80108e2:	69fa      	ldr	r2, [r7, #28]
 80108e4:	440a      	add	r2, r1
 80108e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80108ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	791b      	ldrb	r3, [r3, #4]
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d015      	beq.n	8010924 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80108f8:	68bb      	ldr	r3, [r7, #8]
 80108fa:	699b      	ldr	r3, [r3, #24]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	f000 811b 	beq.w	8010b38 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010902:	69fb      	ldr	r3, [r7, #28]
 8010904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	781b      	ldrb	r3, [r3, #0]
 801090e:	f003 030f 	and.w	r3, r3, #15
 8010912:	2101      	movs	r1, #1
 8010914:	fa01 f303 	lsl.w	r3, r1, r3
 8010918:	69f9      	ldr	r1, [r7, #28]
 801091a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801091e:	4313      	orrs	r3, r2
 8010920:	634b      	str	r3, [r1, #52]	; 0x34
 8010922:	e109      	b.n	8010b38 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801092a:	689b      	ldr	r3, [r3, #8]
 801092c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010930:	2b00      	cmp	r3, #0
 8010932:	d110      	bne.n	8010956 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010934:	69bb      	ldr	r3, [r7, #24]
 8010936:	015a      	lsls	r2, r3, #5
 8010938:	69fb      	ldr	r3, [r7, #28]
 801093a:	4413      	add	r3, r2
 801093c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	69ba      	ldr	r2, [r7, #24]
 8010944:	0151      	lsls	r1, r2, #5
 8010946:	69fa      	ldr	r2, [r7, #28]
 8010948:	440a      	add	r2, r1
 801094a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801094e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010952:	6013      	str	r3, [r2, #0]
 8010954:	e00f      	b.n	8010976 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010956:	69bb      	ldr	r3, [r7, #24]
 8010958:	015a      	lsls	r2, r3, #5
 801095a:	69fb      	ldr	r3, [r7, #28]
 801095c:	4413      	add	r3, r2
 801095e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	69ba      	ldr	r2, [r7, #24]
 8010966:	0151      	lsls	r1, r2, #5
 8010968:	69fa      	ldr	r2, [r7, #28]
 801096a:	440a      	add	r2, r1
 801096c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010974:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	6919      	ldr	r1, [r3, #16]
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	781a      	ldrb	r2, [r3, #0]
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	699b      	ldr	r3, [r3, #24]
 8010982:	b298      	uxth	r0, r3
 8010984:	79fb      	ldrb	r3, [r7, #7]
 8010986:	9300      	str	r3, [sp, #0]
 8010988:	4603      	mov	r3, r0
 801098a:	68f8      	ldr	r0, [r7, #12]
 801098c:	f000 fade 	bl	8010f4c <USB_WritePacket>
 8010990:	e0d2      	b.n	8010b38 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010992:	69bb      	ldr	r3, [r7, #24]
 8010994:	015a      	lsls	r2, r3, #5
 8010996:	69fb      	ldr	r3, [r7, #28]
 8010998:	4413      	add	r3, r2
 801099a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801099e:	691b      	ldr	r3, [r3, #16]
 80109a0:	69ba      	ldr	r2, [r7, #24]
 80109a2:	0151      	lsls	r1, r2, #5
 80109a4:	69fa      	ldr	r2, [r7, #28]
 80109a6:	440a      	add	r2, r1
 80109a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109ac:	0cdb      	lsrs	r3, r3, #19
 80109ae:	04db      	lsls	r3, r3, #19
 80109b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	015a      	lsls	r2, r3, #5
 80109b6:	69fb      	ldr	r3, [r7, #28]
 80109b8:	4413      	add	r3, r2
 80109ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109be:	691b      	ldr	r3, [r3, #16]
 80109c0:	69ba      	ldr	r2, [r7, #24]
 80109c2:	0151      	lsls	r1, r2, #5
 80109c4:	69fa      	ldr	r2, [r7, #28]
 80109c6:	440a      	add	r2, r1
 80109c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80109d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80109d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	699b      	ldr	r3, [r3, #24]
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d126      	bne.n	8010a2c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80109de:	69bb      	ldr	r3, [r7, #24]
 80109e0:	015a      	lsls	r2, r3, #5
 80109e2:	69fb      	ldr	r3, [r7, #28]
 80109e4:	4413      	add	r3, r2
 80109e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109ea:	691a      	ldr	r2, [r3, #16]
 80109ec:	68bb      	ldr	r3, [r7, #8]
 80109ee:	68db      	ldr	r3, [r3, #12]
 80109f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80109f4:	69b9      	ldr	r1, [r7, #24]
 80109f6:	0148      	lsls	r0, r1, #5
 80109f8:	69f9      	ldr	r1, [r7, #28]
 80109fa:	4401      	add	r1, r0
 80109fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010a00:	4313      	orrs	r3, r2
 8010a02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010a04:	69bb      	ldr	r3, [r7, #24]
 8010a06:	015a      	lsls	r2, r3, #5
 8010a08:	69fb      	ldr	r3, [r7, #28]
 8010a0a:	4413      	add	r3, r2
 8010a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a10:	691b      	ldr	r3, [r3, #16]
 8010a12:	69ba      	ldr	r2, [r7, #24]
 8010a14:	0151      	lsls	r1, r2, #5
 8010a16:	69fa      	ldr	r2, [r7, #28]
 8010a18:	440a      	add	r2, r1
 8010a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010a22:	6113      	str	r3, [r2, #16]
 8010a24:	e03a      	b.n	8010a9c <USB_EPStartXfer+0x3e4>
 8010a26:	bf00      	nop
 8010a28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	699a      	ldr	r2, [r3, #24]
 8010a30:	68bb      	ldr	r3, [r7, #8]
 8010a32:	68db      	ldr	r3, [r3, #12]
 8010a34:	4413      	add	r3, r2
 8010a36:	1e5a      	subs	r2, r3, #1
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a40:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	68db      	ldr	r3, [r3, #12]
 8010a46:	8afa      	ldrh	r2, [r7, #22]
 8010a48:	fb03 f202 	mul.w	r2, r3, r2
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010a50:	69bb      	ldr	r3, [r7, #24]
 8010a52:	015a      	lsls	r2, r3, #5
 8010a54:	69fb      	ldr	r3, [r7, #28]
 8010a56:	4413      	add	r3, r2
 8010a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a5c:	691a      	ldr	r2, [r3, #16]
 8010a5e:	8afb      	ldrh	r3, [r7, #22]
 8010a60:	04d9      	lsls	r1, r3, #19
 8010a62:	4b38      	ldr	r3, [pc, #224]	; (8010b44 <USB_EPStartXfer+0x48c>)
 8010a64:	400b      	ands	r3, r1
 8010a66:	69b9      	ldr	r1, [r7, #24]
 8010a68:	0148      	lsls	r0, r1, #5
 8010a6a:	69f9      	ldr	r1, [r7, #28]
 8010a6c:	4401      	add	r1, r0
 8010a6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010a72:	4313      	orrs	r3, r2
 8010a74:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8010a76:	69bb      	ldr	r3, [r7, #24]
 8010a78:	015a      	lsls	r2, r3, #5
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	4413      	add	r3, r2
 8010a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a82:	691a      	ldr	r2, [r3, #16]
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	69db      	ldr	r3, [r3, #28]
 8010a88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010a8c:	69b9      	ldr	r1, [r7, #24]
 8010a8e:	0148      	lsls	r0, r1, #5
 8010a90:	69f9      	ldr	r1, [r7, #28]
 8010a92:	4401      	add	r1, r0
 8010a94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010a98:	4313      	orrs	r3, r2
 8010a9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010a9c:	79fb      	ldrb	r3, [r7, #7]
 8010a9e:	2b01      	cmp	r3, #1
 8010aa0:	d10d      	bne.n	8010abe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010aa2:	68bb      	ldr	r3, [r7, #8]
 8010aa4:	691b      	ldr	r3, [r3, #16]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d009      	beq.n	8010abe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010aaa:	68bb      	ldr	r3, [r7, #8]
 8010aac:	6919      	ldr	r1, [r3, #16]
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	015a      	lsls	r2, r3, #5
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aba:	460a      	mov	r2, r1
 8010abc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010abe:	68bb      	ldr	r3, [r7, #8]
 8010ac0:	791b      	ldrb	r3, [r3, #4]
 8010ac2:	2b01      	cmp	r3, #1
 8010ac4:	d128      	bne.n	8010b18 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d110      	bne.n	8010af8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010ad6:	69bb      	ldr	r3, [r7, #24]
 8010ad8:	015a      	lsls	r2, r3, #5
 8010ada:	69fb      	ldr	r3, [r7, #28]
 8010adc:	4413      	add	r3, r2
 8010ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	69ba      	ldr	r2, [r7, #24]
 8010ae6:	0151      	lsls	r1, r2, #5
 8010ae8:	69fa      	ldr	r2, [r7, #28]
 8010aea:	440a      	add	r2, r1
 8010aec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010af0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010af4:	6013      	str	r3, [r2, #0]
 8010af6:	e00f      	b.n	8010b18 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010af8:	69bb      	ldr	r3, [r7, #24]
 8010afa:	015a      	lsls	r2, r3, #5
 8010afc:	69fb      	ldr	r3, [r7, #28]
 8010afe:	4413      	add	r3, r2
 8010b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	69ba      	ldr	r2, [r7, #24]
 8010b08:	0151      	lsls	r1, r2, #5
 8010b0a:	69fa      	ldr	r2, [r7, #28]
 8010b0c:	440a      	add	r2, r1
 8010b0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010b18:	69bb      	ldr	r3, [r7, #24]
 8010b1a:	015a      	lsls	r2, r3, #5
 8010b1c:	69fb      	ldr	r3, [r7, #28]
 8010b1e:	4413      	add	r3, r2
 8010b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	69ba      	ldr	r2, [r7, #24]
 8010b28:	0151      	lsls	r1, r2, #5
 8010b2a:	69fa      	ldr	r2, [r7, #28]
 8010b2c:	440a      	add	r2, r1
 8010b2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010b36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b38:	2300      	movs	r3, #0
}
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3720      	adds	r7, #32
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}
 8010b42:	bf00      	nop
 8010b44:	1ff80000 	.word	0x1ff80000

08010b48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010b48:	b480      	push	{r7}
 8010b4a:	b087      	sub	sp, #28
 8010b4c:	af00      	add	r7, sp, #0
 8010b4e:	60f8      	str	r0, [r7, #12]
 8010b50:	60b9      	str	r1, [r7, #8]
 8010b52:	4613      	mov	r3, r2
 8010b54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	781b      	ldrb	r3, [r3, #0]
 8010b5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	785b      	ldrb	r3, [r3, #1]
 8010b64:	2b01      	cmp	r3, #1
 8010b66:	f040 80ce 	bne.w	8010d06 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	699b      	ldr	r3, [r3, #24]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d132      	bne.n	8010bd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010b72:	693b      	ldr	r3, [r7, #16]
 8010b74:	015a      	lsls	r2, r3, #5
 8010b76:	697b      	ldr	r3, [r7, #20]
 8010b78:	4413      	add	r3, r2
 8010b7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b7e:	691b      	ldr	r3, [r3, #16]
 8010b80:	693a      	ldr	r2, [r7, #16]
 8010b82:	0151      	lsls	r1, r2, #5
 8010b84:	697a      	ldr	r2, [r7, #20]
 8010b86:	440a      	add	r2, r1
 8010b88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010b90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010b94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010b96:	693b      	ldr	r3, [r7, #16]
 8010b98:	015a      	lsls	r2, r3, #5
 8010b9a:	697b      	ldr	r3, [r7, #20]
 8010b9c:	4413      	add	r3, r2
 8010b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ba2:	691b      	ldr	r3, [r3, #16]
 8010ba4:	693a      	ldr	r2, [r7, #16]
 8010ba6:	0151      	lsls	r1, r2, #5
 8010ba8:	697a      	ldr	r2, [r7, #20]
 8010baa:	440a      	add	r2, r1
 8010bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010bb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010bb6:	693b      	ldr	r3, [r7, #16]
 8010bb8:	015a      	lsls	r2, r3, #5
 8010bba:	697b      	ldr	r3, [r7, #20]
 8010bbc:	4413      	add	r3, r2
 8010bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bc2:	691b      	ldr	r3, [r3, #16]
 8010bc4:	693a      	ldr	r2, [r7, #16]
 8010bc6:	0151      	lsls	r1, r2, #5
 8010bc8:	697a      	ldr	r2, [r7, #20]
 8010bca:	440a      	add	r2, r1
 8010bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bd0:	0cdb      	lsrs	r3, r3, #19
 8010bd2:	04db      	lsls	r3, r3, #19
 8010bd4:	6113      	str	r3, [r2, #16]
 8010bd6:	e04e      	b.n	8010c76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010bd8:	693b      	ldr	r3, [r7, #16]
 8010bda:	015a      	lsls	r2, r3, #5
 8010bdc:	697b      	ldr	r3, [r7, #20]
 8010bde:	4413      	add	r3, r2
 8010be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010be4:	691b      	ldr	r3, [r3, #16]
 8010be6:	693a      	ldr	r2, [r7, #16]
 8010be8:	0151      	lsls	r1, r2, #5
 8010bea:	697a      	ldr	r2, [r7, #20]
 8010bec:	440a      	add	r2, r1
 8010bee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bf2:	0cdb      	lsrs	r3, r3, #19
 8010bf4:	04db      	lsls	r3, r3, #19
 8010bf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010bf8:	693b      	ldr	r3, [r7, #16]
 8010bfa:	015a      	lsls	r2, r3, #5
 8010bfc:	697b      	ldr	r3, [r7, #20]
 8010bfe:	4413      	add	r3, r2
 8010c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c04:	691b      	ldr	r3, [r3, #16]
 8010c06:	693a      	ldr	r2, [r7, #16]
 8010c08:	0151      	lsls	r1, r2, #5
 8010c0a:	697a      	ldr	r2, [r7, #20]
 8010c0c:	440a      	add	r2, r1
 8010c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010c16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010c1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010c1c:	68bb      	ldr	r3, [r7, #8]
 8010c1e:	699a      	ldr	r2, [r3, #24]
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	68db      	ldr	r3, [r3, #12]
 8010c24:	429a      	cmp	r2, r3
 8010c26:	d903      	bls.n	8010c30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	68da      	ldr	r2, [r3, #12]
 8010c2c:	68bb      	ldr	r3, [r7, #8]
 8010c2e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010c30:	693b      	ldr	r3, [r7, #16]
 8010c32:	015a      	lsls	r2, r3, #5
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	4413      	add	r3, r2
 8010c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c3c:	691b      	ldr	r3, [r3, #16]
 8010c3e:	693a      	ldr	r2, [r7, #16]
 8010c40:	0151      	lsls	r1, r2, #5
 8010c42:	697a      	ldr	r2, [r7, #20]
 8010c44:	440a      	add	r2, r1
 8010c46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010c4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	015a      	lsls	r2, r3, #5
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	4413      	add	r3, r2
 8010c58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c5c:	691a      	ldr	r2, [r3, #16]
 8010c5e:	68bb      	ldr	r3, [r7, #8]
 8010c60:	699b      	ldr	r3, [r3, #24]
 8010c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010c66:	6939      	ldr	r1, [r7, #16]
 8010c68:	0148      	lsls	r0, r1, #5
 8010c6a:	6979      	ldr	r1, [r7, #20]
 8010c6c:	4401      	add	r1, r0
 8010c6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010c72:	4313      	orrs	r3, r2
 8010c74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010c76:	79fb      	ldrb	r3, [r7, #7]
 8010c78:	2b01      	cmp	r3, #1
 8010c7a:	d11e      	bne.n	8010cba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	695b      	ldr	r3, [r3, #20]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d009      	beq.n	8010c98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	015a      	lsls	r2, r3, #5
 8010c88:	697b      	ldr	r3, [r7, #20]
 8010c8a:	4413      	add	r3, r2
 8010c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c90:	461a      	mov	r2, r3
 8010c92:	68bb      	ldr	r3, [r7, #8]
 8010c94:	695b      	ldr	r3, [r3, #20]
 8010c96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	015a      	lsls	r2, r3, #5
 8010c9c:	697b      	ldr	r3, [r7, #20]
 8010c9e:	4413      	add	r3, r2
 8010ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	693a      	ldr	r2, [r7, #16]
 8010ca8:	0151      	lsls	r1, r2, #5
 8010caa:	697a      	ldr	r2, [r7, #20]
 8010cac:	440a      	add	r2, r1
 8010cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010cb6:	6013      	str	r3, [r2, #0]
 8010cb8:	e097      	b.n	8010dea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010cba:	693b      	ldr	r3, [r7, #16]
 8010cbc:	015a      	lsls	r2, r3, #5
 8010cbe:	697b      	ldr	r3, [r7, #20]
 8010cc0:	4413      	add	r3, r2
 8010cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	693a      	ldr	r2, [r7, #16]
 8010cca:	0151      	lsls	r1, r2, #5
 8010ccc:	697a      	ldr	r2, [r7, #20]
 8010cce:	440a      	add	r2, r1
 8010cd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010cd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010cd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	699b      	ldr	r3, [r3, #24]
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	f000 8083 	beq.w	8010dea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010ce4:	697b      	ldr	r3, [r7, #20]
 8010ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010cec:	68bb      	ldr	r3, [r7, #8]
 8010cee:	781b      	ldrb	r3, [r3, #0]
 8010cf0:	f003 030f 	and.w	r3, r3, #15
 8010cf4:	2101      	movs	r1, #1
 8010cf6:	fa01 f303 	lsl.w	r3, r1, r3
 8010cfa:	6979      	ldr	r1, [r7, #20]
 8010cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010d00:	4313      	orrs	r3, r2
 8010d02:	634b      	str	r3, [r1, #52]	; 0x34
 8010d04:	e071      	b.n	8010dea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010d06:	693b      	ldr	r3, [r7, #16]
 8010d08:	015a      	lsls	r2, r3, #5
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	4413      	add	r3, r2
 8010d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d12:	691b      	ldr	r3, [r3, #16]
 8010d14:	693a      	ldr	r2, [r7, #16]
 8010d16:	0151      	lsls	r1, r2, #5
 8010d18:	697a      	ldr	r2, [r7, #20]
 8010d1a:	440a      	add	r2, r1
 8010d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d20:	0cdb      	lsrs	r3, r3, #19
 8010d22:	04db      	lsls	r3, r3, #19
 8010d24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010d26:	693b      	ldr	r3, [r7, #16]
 8010d28:	015a      	lsls	r2, r3, #5
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	4413      	add	r3, r2
 8010d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d32:	691b      	ldr	r3, [r3, #16]
 8010d34:	693a      	ldr	r2, [r7, #16]
 8010d36:	0151      	lsls	r1, r2, #5
 8010d38:	697a      	ldr	r2, [r7, #20]
 8010d3a:	440a      	add	r2, r1
 8010d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8010d44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8010d48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	699b      	ldr	r3, [r3, #24]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d003      	beq.n	8010d5a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	68da      	ldr	r2, [r3, #12]
 8010d56:	68bb      	ldr	r3, [r7, #8]
 8010d58:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	68da      	ldr	r2, [r3, #12]
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010d62:	693b      	ldr	r3, [r7, #16]
 8010d64:	015a      	lsls	r2, r3, #5
 8010d66:	697b      	ldr	r3, [r7, #20]
 8010d68:	4413      	add	r3, r2
 8010d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d6e:	691b      	ldr	r3, [r3, #16]
 8010d70:	693a      	ldr	r2, [r7, #16]
 8010d72:	0151      	lsls	r1, r2, #5
 8010d74:	697a      	ldr	r2, [r7, #20]
 8010d76:	440a      	add	r2, r1
 8010d78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010d80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8010d82:	693b      	ldr	r3, [r7, #16]
 8010d84:	015a      	lsls	r2, r3, #5
 8010d86:	697b      	ldr	r3, [r7, #20]
 8010d88:	4413      	add	r3, r2
 8010d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d8e:	691a      	ldr	r2, [r3, #16]
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	69db      	ldr	r3, [r3, #28]
 8010d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010d98:	6939      	ldr	r1, [r7, #16]
 8010d9a:	0148      	lsls	r0, r1, #5
 8010d9c:	6979      	ldr	r1, [r7, #20]
 8010d9e:	4401      	add	r1, r0
 8010da0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010da4:	4313      	orrs	r3, r2
 8010da6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8010da8:	79fb      	ldrb	r3, [r7, #7]
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d10d      	bne.n	8010dca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010dae:	68bb      	ldr	r3, [r7, #8]
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d009      	beq.n	8010dca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	6919      	ldr	r1, [r3, #16]
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	015a      	lsls	r2, r3, #5
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dc6:	460a      	mov	r2, r1
 8010dc8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010dca:	693b      	ldr	r3, [r7, #16]
 8010dcc:	015a      	lsls	r2, r3, #5
 8010dce:	697b      	ldr	r3, [r7, #20]
 8010dd0:	4413      	add	r3, r2
 8010dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	693a      	ldr	r2, [r7, #16]
 8010dda:	0151      	lsls	r1, r2, #5
 8010ddc:	697a      	ldr	r2, [r7, #20]
 8010dde:	440a      	add	r2, r1
 8010de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010de4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010de8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010dea:	2300      	movs	r3, #0
}
 8010dec:	4618      	mov	r0, r3
 8010dee:	371c      	adds	r7, #28
 8010df0:	46bd      	mov	sp, r7
 8010df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df6:	4770      	bx	lr

08010df8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b087      	sub	sp, #28
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010e02:	2300      	movs	r3, #0
 8010e04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010e06:	2300      	movs	r3, #0
 8010e08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010e0e:	683b      	ldr	r3, [r7, #0]
 8010e10:	785b      	ldrb	r3, [r3, #1]
 8010e12:	2b01      	cmp	r3, #1
 8010e14:	d14a      	bne.n	8010eac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	015a      	lsls	r2, r3, #5
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	4413      	add	r3, r2
 8010e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010e2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010e2e:	f040 8086 	bne.w	8010f3e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	781b      	ldrb	r3, [r3, #0]
 8010e36:	015a      	lsls	r2, r3, #5
 8010e38:	693b      	ldr	r3, [r7, #16]
 8010e3a:	4413      	add	r3, r2
 8010e3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	683a      	ldr	r2, [r7, #0]
 8010e44:	7812      	ldrb	r2, [r2, #0]
 8010e46:	0151      	lsls	r1, r2, #5
 8010e48:	693a      	ldr	r2, [r7, #16]
 8010e4a:	440a      	add	r2, r1
 8010e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010e54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8010e56:	683b      	ldr	r3, [r7, #0]
 8010e58:	781b      	ldrb	r3, [r3, #0]
 8010e5a:	015a      	lsls	r2, r3, #5
 8010e5c:	693b      	ldr	r3, [r7, #16]
 8010e5e:	4413      	add	r3, r2
 8010e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	683a      	ldr	r2, [r7, #0]
 8010e68:	7812      	ldrb	r2, [r2, #0]
 8010e6a:	0151      	lsls	r1, r2, #5
 8010e6c:	693a      	ldr	r2, [r7, #16]
 8010e6e:	440a      	add	r2, r1
 8010e70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010e74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010e78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	3301      	adds	r3, #1
 8010e7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010e80:	68fb      	ldr	r3, [r7, #12]
 8010e82:	f242 7210 	movw	r2, #10000	; 0x2710
 8010e86:	4293      	cmp	r3, r2
 8010e88:	d902      	bls.n	8010e90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010e8a:	2301      	movs	r3, #1
 8010e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8010e8e:	e056      	b.n	8010f3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	781b      	ldrb	r3, [r3, #0]
 8010e94:	015a      	lsls	r2, r3, #5
 8010e96:	693b      	ldr	r3, [r7, #16]
 8010e98:	4413      	add	r3, r2
 8010e9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010ea8:	d0e7      	beq.n	8010e7a <USB_EPStopXfer+0x82>
 8010eaa:	e048      	b.n	8010f3e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010eac:	683b      	ldr	r3, [r7, #0]
 8010eae:	781b      	ldrb	r3, [r3, #0]
 8010eb0:	015a      	lsls	r2, r3, #5
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	4413      	add	r3, r2
 8010eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eba:	681b      	ldr	r3, [r3, #0]
 8010ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010ec4:	d13b      	bne.n	8010f3e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	781b      	ldrb	r3, [r3, #0]
 8010eca:	015a      	lsls	r2, r3, #5
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	4413      	add	r3, r2
 8010ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	683a      	ldr	r2, [r7, #0]
 8010ed8:	7812      	ldrb	r2, [r2, #0]
 8010eda:	0151      	lsls	r1, r2, #5
 8010edc:	693a      	ldr	r2, [r7, #16]
 8010ede:	440a      	add	r2, r1
 8010ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ee4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8010ee8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010eea:	683b      	ldr	r3, [r7, #0]
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	015a      	lsls	r2, r3, #5
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	4413      	add	r3, r2
 8010ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	683a      	ldr	r2, [r7, #0]
 8010efc:	7812      	ldrb	r2, [r2, #0]
 8010efe:	0151      	lsls	r1, r2, #5
 8010f00:	693a      	ldr	r2, [r7, #16]
 8010f02:	440a      	add	r2, r1
 8010f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8010f0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	3301      	adds	r3, #1
 8010f12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	f242 7210 	movw	r2, #10000	; 0x2710
 8010f1a:	4293      	cmp	r3, r2
 8010f1c:	d902      	bls.n	8010f24 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8010f1e:	2301      	movs	r3, #1
 8010f20:	75fb      	strb	r3, [r7, #23]
          break;
 8010f22:	e00c      	b.n	8010f3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	781b      	ldrb	r3, [r3, #0]
 8010f28:	015a      	lsls	r2, r3, #5
 8010f2a:	693b      	ldr	r3, [r7, #16]
 8010f2c:	4413      	add	r3, r2
 8010f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010f38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010f3c:	d0e7      	beq.n	8010f0e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8010f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	371c      	adds	r7, #28
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010f4c:	b480      	push	{r7}
 8010f4e:	b089      	sub	sp, #36	; 0x24
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	60f8      	str	r0, [r7, #12]
 8010f54:	60b9      	str	r1, [r7, #8]
 8010f56:	4611      	mov	r1, r2
 8010f58:	461a      	mov	r2, r3
 8010f5a:	460b      	mov	r3, r1
 8010f5c:	71fb      	strb	r3, [r7, #7]
 8010f5e:	4613      	mov	r3, r2
 8010f60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8010f6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d123      	bne.n	8010fba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010f72:	88bb      	ldrh	r3, [r7, #4]
 8010f74:	3303      	adds	r3, #3
 8010f76:	089b      	lsrs	r3, r3, #2
 8010f78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	61bb      	str	r3, [r7, #24]
 8010f7e:	e018      	b.n	8010fb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010f80:	79fb      	ldrb	r3, [r7, #7]
 8010f82:	031a      	lsls	r2, r3, #12
 8010f84:	697b      	ldr	r3, [r7, #20]
 8010f86:	4413      	add	r3, r2
 8010f88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010f8c:	461a      	mov	r2, r3
 8010f8e:	69fb      	ldr	r3, [r7, #28]
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010f94:	69fb      	ldr	r3, [r7, #28]
 8010f96:	3301      	adds	r3, #1
 8010f98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010f9a:	69fb      	ldr	r3, [r7, #28]
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010fa0:	69fb      	ldr	r3, [r7, #28]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010fa6:	69fb      	ldr	r3, [r7, #28]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	3301      	adds	r3, #1
 8010fb0:	61bb      	str	r3, [r7, #24]
 8010fb2:	69ba      	ldr	r2, [r7, #24]
 8010fb4:	693b      	ldr	r3, [r7, #16]
 8010fb6:	429a      	cmp	r2, r3
 8010fb8:	d3e2      	bcc.n	8010f80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010fba:	2300      	movs	r3, #0
}
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3724      	adds	r7, #36	; 0x24
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc6:	4770      	bx	lr

08010fc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010fc8:	b480      	push	{r7}
 8010fca:	b08b      	sub	sp, #44	; 0x2c
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	60f8      	str	r0, [r7, #12]
 8010fd0:	60b9      	str	r1, [r7, #8]
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8010fde:	88fb      	ldrh	r3, [r7, #6]
 8010fe0:	089b      	lsrs	r3, r3, #2
 8010fe2:	b29b      	uxth	r3, r3
 8010fe4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010fe6:	88fb      	ldrh	r3, [r7, #6]
 8010fe8:	f003 0303 	and.w	r3, r3, #3
 8010fec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8010fee:	2300      	movs	r3, #0
 8010ff0:	623b      	str	r3, [r7, #32]
 8010ff2:	e014      	b.n	801101e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010ff4:	69bb      	ldr	r3, [r7, #24]
 8010ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010ffa:	681a      	ldr	r2, [r3, #0]
 8010ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffe:	601a      	str	r2, [r3, #0]
    pDest++;
 8011000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011002:	3301      	adds	r3, #1
 8011004:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011008:	3301      	adds	r3, #1
 801100a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801100e:	3301      	adds	r3, #1
 8011010:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8011012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011014:	3301      	adds	r3, #1
 8011016:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8011018:	6a3b      	ldr	r3, [r7, #32]
 801101a:	3301      	adds	r3, #1
 801101c:	623b      	str	r3, [r7, #32]
 801101e:	6a3a      	ldr	r2, [r7, #32]
 8011020:	697b      	ldr	r3, [r7, #20]
 8011022:	429a      	cmp	r2, r3
 8011024:	d3e6      	bcc.n	8010ff4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011026:	8bfb      	ldrh	r3, [r7, #30]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d01e      	beq.n	801106a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801102c:	2300      	movs	r3, #0
 801102e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011030:	69bb      	ldr	r3, [r7, #24]
 8011032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8011036:	461a      	mov	r2, r3
 8011038:	f107 0310 	add.w	r3, r7, #16
 801103c:	6812      	ldr	r2, [r2, #0]
 801103e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011040:	693a      	ldr	r2, [r7, #16]
 8011042:	6a3b      	ldr	r3, [r7, #32]
 8011044:	b2db      	uxtb	r3, r3
 8011046:	00db      	lsls	r3, r3, #3
 8011048:	fa22 f303 	lsr.w	r3, r2, r3
 801104c:	b2da      	uxtb	r2, r3
 801104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011050:	701a      	strb	r2, [r3, #0]
      i++;
 8011052:	6a3b      	ldr	r3, [r7, #32]
 8011054:	3301      	adds	r3, #1
 8011056:	623b      	str	r3, [r7, #32]
      pDest++;
 8011058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801105a:	3301      	adds	r3, #1
 801105c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801105e:	8bfb      	ldrh	r3, [r7, #30]
 8011060:	3b01      	subs	r3, #1
 8011062:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011064:	8bfb      	ldrh	r3, [r7, #30]
 8011066:	2b00      	cmp	r3, #0
 8011068:	d1ea      	bne.n	8011040 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801106c:	4618      	mov	r0, r3
 801106e:	372c      	adds	r7, #44	; 0x2c
 8011070:	46bd      	mov	sp, r7
 8011072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011076:	4770      	bx	lr

08011078 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011078:	b480      	push	{r7}
 801107a:	b085      	sub	sp, #20
 801107c:	af00      	add	r7, sp, #0
 801107e:	6078      	str	r0, [r7, #4]
 8011080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	785b      	ldrb	r3, [r3, #1]
 8011090:	2b01      	cmp	r3, #1
 8011092:	d12c      	bne.n	80110ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	015a      	lsls	r2, r3, #5
 8011098:	68fb      	ldr	r3, [r7, #12]
 801109a:	4413      	add	r3, r2
 801109c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	db12      	blt.n	80110cc <USB_EPSetStall+0x54>
 80110a6:	68bb      	ldr	r3, [r7, #8]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d00f      	beq.n	80110cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	015a      	lsls	r2, r3, #5
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	4413      	add	r3, r2
 80110b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	68ba      	ldr	r2, [r7, #8]
 80110bc:	0151      	lsls	r1, r2, #5
 80110be:	68fa      	ldr	r2, [r7, #12]
 80110c0:	440a      	add	r2, r1
 80110c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80110ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80110cc:	68bb      	ldr	r3, [r7, #8]
 80110ce:	015a      	lsls	r2, r3, #5
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	4413      	add	r3, r2
 80110d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80110d8:	681b      	ldr	r3, [r3, #0]
 80110da:	68ba      	ldr	r2, [r7, #8]
 80110dc:	0151      	lsls	r1, r2, #5
 80110de:	68fa      	ldr	r2, [r7, #12]
 80110e0:	440a      	add	r2, r1
 80110e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80110e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80110ea:	6013      	str	r3, [r2, #0]
 80110ec:	e02b      	b.n	8011146 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80110ee:	68bb      	ldr	r3, [r7, #8]
 80110f0:	015a      	lsls	r2, r3, #5
 80110f2:	68fb      	ldr	r3, [r7, #12]
 80110f4:	4413      	add	r3, r2
 80110f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	db12      	blt.n	8011126 <USB_EPSetStall+0xae>
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d00f      	beq.n	8011126 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011106:	68bb      	ldr	r3, [r7, #8]
 8011108:	015a      	lsls	r2, r3, #5
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	4413      	add	r3, r2
 801110e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	68ba      	ldr	r2, [r7, #8]
 8011116:	0151      	lsls	r1, r2, #5
 8011118:	68fa      	ldr	r2, [r7, #12]
 801111a:	440a      	add	r2, r1
 801111c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011120:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8011124:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011126:	68bb      	ldr	r3, [r7, #8]
 8011128:	015a      	lsls	r2, r3, #5
 801112a:	68fb      	ldr	r3, [r7, #12]
 801112c:	4413      	add	r3, r2
 801112e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011132:	681b      	ldr	r3, [r3, #0]
 8011134:	68ba      	ldr	r2, [r7, #8]
 8011136:	0151      	lsls	r1, r2, #5
 8011138:	68fa      	ldr	r2, [r7, #12]
 801113a:	440a      	add	r2, r1
 801113c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8011140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011144:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011146:	2300      	movs	r3, #0
}
 8011148:	4618      	mov	r0, r3
 801114a:	3714      	adds	r7, #20
 801114c:	46bd      	mov	sp, r7
 801114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011152:	4770      	bx	lr

08011154 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011154:	b480      	push	{r7}
 8011156:	b085      	sub	sp, #20
 8011158:	af00      	add	r7, sp, #0
 801115a:	6078      	str	r0, [r7, #4]
 801115c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	781b      	ldrb	r3, [r3, #0]
 8011166:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	785b      	ldrb	r3, [r3, #1]
 801116c:	2b01      	cmp	r3, #1
 801116e:	d128      	bne.n	80111c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	015a      	lsls	r2, r3, #5
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	4413      	add	r3, r2
 8011178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	68ba      	ldr	r2, [r7, #8]
 8011180:	0151      	lsls	r1, r2, #5
 8011182:	68fa      	ldr	r2, [r7, #12]
 8011184:	440a      	add	r2, r1
 8011186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801118a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801118e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011190:	683b      	ldr	r3, [r7, #0]
 8011192:	791b      	ldrb	r3, [r3, #4]
 8011194:	2b03      	cmp	r3, #3
 8011196:	d003      	beq.n	80111a0 <USB_EPClearStall+0x4c>
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	791b      	ldrb	r3, [r3, #4]
 801119c:	2b02      	cmp	r3, #2
 801119e:	d138      	bne.n	8011212 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	015a      	lsls	r2, r3, #5
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	4413      	add	r3, r2
 80111a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	68ba      	ldr	r2, [r7, #8]
 80111b0:	0151      	lsls	r1, r2, #5
 80111b2:	68fa      	ldr	r2, [r7, #12]
 80111b4:	440a      	add	r2, r1
 80111b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80111ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80111be:	6013      	str	r3, [r2, #0]
 80111c0:	e027      	b.n	8011212 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80111c2:	68bb      	ldr	r3, [r7, #8]
 80111c4:	015a      	lsls	r2, r3, #5
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	4413      	add	r3, r2
 80111ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	68ba      	ldr	r2, [r7, #8]
 80111d2:	0151      	lsls	r1, r2, #5
 80111d4:	68fa      	ldr	r2, [r7, #12]
 80111d6:	440a      	add	r2, r1
 80111d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80111dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80111e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	791b      	ldrb	r3, [r3, #4]
 80111e6:	2b03      	cmp	r3, #3
 80111e8:	d003      	beq.n	80111f2 <USB_EPClearStall+0x9e>
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	791b      	ldrb	r3, [r3, #4]
 80111ee:	2b02      	cmp	r3, #2
 80111f0:	d10f      	bne.n	8011212 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80111f2:	68bb      	ldr	r3, [r7, #8]
 80111f4:	015a      	lsls	r2, r3, #5
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	4413      	add	r3, r2
 80111fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	68ba      	ldr	r2, [r7, #8]
 8011202:	0151      	lsls	r1, r2, #5
 8011204:	68fa      	ldr	r2, [r7, #12]
 8011206:	440a      	add	r2, r1
 8011208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801120c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011210:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011212:	2300      	movs	r3, #0
}
 8011214:	4618      	mov	r0, r3
 8011216:	3714      	adds	r7, #20
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr

08011220 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011220:	b480      	push	{r7}
 8011222:	b085      	sub	sp, #20
 8011224:	af00      	add	r7, sp, #0
 8011226:	6078      	str	r0, [r7, #4]
 8011228:	460b      	mov	r3, r1
 801122a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011230:	68fb      	ldr	r3, [r7, #12]
 8011232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	68fa      	ldr	r2, [r7, #12]
 801123a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801123e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8011242:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801124a:	681a      	ldr	r2, [r3, #0]
 801124c:	78fb      	ldrb	r3, [r7, #3]
 801124e:	011b      	lsls	r3, r3, #4
 8011250:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8011254:	68f9      	ldr	r1, [r7, #12]
 8011256:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801125a:	4313      	orrs	r3, r2
 801125c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801125e:	2300      	movs	r3, #0
}
 8011260:	4618      	mov	r0, r3
 8011262:	3714      	adds	r7, #20
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr

0801126c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801126c:	b480      	push	{r7}
 801126e:	b085      	sub	sp, #20
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	68fa      	ldr	r2, [r7, #12]
 8011282:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011286:	f023 0303 	bic.w	r3, r3, #3
 801128a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	68fa      	ldr	r2, [r7, #12]
 8011296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801129a:	f023 0302 	bic.w	r3, r3, #2
 801129e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80112a0:	2300      	movs	r3, #0
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	3714      	adds	r7, #20
 80112a6:	46bd      	mov	sp, r7
 80112a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ac:	4770      	bx	lr

080112ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80112ae:	b480      	push	{r7}
 80112b0:	b085      	sub	sp, #20
 80112b2:	af00      	add	r7, sp, #0
 80112b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	68fa      	ldr	r2, [r7, #12]
 80112c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80112c8:	f023 0303 	bic.w	r3, r3, #3
 80112cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80112ce:	68fb      	ldr	r3, [r7, #12]
 80112d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	68fa      	ldr	r2, [r7, #12]
 80112d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80112dc:	f043 0302 	orr.w	r3, r3, #2
 80112e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80112e2:	2300      	movs	r3, #0
}
 80112e4:	4618      	mov	r0, r3
 80112e6:	3714      	adds	r7, #20
 80112e8:	46bd      	mov	sp, r7
 80112ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ee:	4770      	bx	lr

080112f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80112f0:	b480      	push	{r7}
 80112f2:	b085      	sub	sp, #20
 80112f4:	af00      	add	r7, sp, #0
 80112f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	695b      	ldr	r3, [r3, #20]
 80112fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	699b      	ldr	r3, [r3, #24]
 8011302:	68fa      	ldr	r2, [r7, #12]
 8011304:	4013      	ands	r3, r2
 8011306:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011308:	68fb      	ldr	r3, [r7, #12]
}
 801130a:	4618      	mov	r0, r3
 801130c:	3714      	adds	r7, #20
 801130e:	46bd      	mov	sp, r7
 8011310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011314:	4770      	bx	lr

08011316 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8011316:	b480      	push	{r7}
 8011318:	b085      	sub	sp, #20
 801131a:	af00      	add	r7, sp, #0
 801131c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011328:	699b      	ldr	r3, [r3, #24]
 801132a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011332:	69db      	ldr	r3, [r3, #28]
 8011334:	68ba      	ldr	r2, [r7, #8]
 8011336:	4013      	ands	r3, r2
 8011338:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	0c1b      	lsrs	r3, r3, #16
}
 801133e:	4618      	mov	r0, r3
 8011340:	3714      	adds	r7, #20
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr

0801134a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801134a:	b480      	push	{r7}
 801134c:	b085      	sub	sp, #20
 801134e:	af00      	add	r7, sp, #0
 8011350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801135c:	699b      	ldr	r3, [r3, #24]
 801135e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011366:	69db      	ldr	r3, [r3, #28]
 8011368:	68ba      	ldr	r2, [r7, #8]
 801136a:	4013      	ands	r3, r2
 801136c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801136e:	68bb      	ldr	r3, [r7, #8]
 8011370:	b29b      	uxth	r3, r3
}
 8011372:	4618      	mov	r0, r3
 8011374:	3714      	adds	r7, #20
 8011376:	46bd      	mov	sp, r7
 8011378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137c:	4770      	bx	lr

0801137e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801137e:	b480      	push	{r7}
 8011380:	b085      	sub	sp, #20
 8011382:	af00      	add	r7, sp, #0
 8011384:	6078      	str	r0, [r7, #4]
 8011386:	460b      	mov	r3, r1
 8011388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801138e:	78fb      	ldrb	r3, [r7, #3]
 8011390:	015a      	lsls	r2, r3, #5
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	4413      	add	r3, r2
 8011396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801139a:	689b      	ldr	r3, [r3, #8]
 801139c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113a4:	695b      	ldr	r3, [r3, #20]
 80113a6:	68ba      	ldr	r2, [r7, #8]
 80113a8:	4013      	ands	r3, r2
 80113aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80113ac:	68bb      	ldr	r3, [r7, #8]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3714      	adds	r7, #20
 80113b2:	46bd      	mov	sp, r7
 80113b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b8:	4770      	bx	lr

080113ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80113ba:	b480      	push	{r7}
 80113bc:	b087      	sub	sp, #28
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
 80113c2:	460b      	mov	r3, r1
 80113c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80113ca:	697b      	ldr	r3, [r7, #20]
 80113cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113d0:	691b      	ldr	r3, [r3, #16]
 80113d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80113d4:	697b      	ldr	r3, [r7, #20]
 80113d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80113da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80113dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80113de:	78fb      	ldrb	r3, [r7, #3]
 80113e0:	f003 030f 	and.w	r3, r3, #15
 80113e4:	68fa      	ldr	r2, [r7, #12]
 80113e6:	fa22 f303 	lsr.w	r3, r2, r3
 80113ea:	01db      	lsls	r3, r3, #7
 80113ec:	b2db      	uxtb	r3, r3
 80113ee:	693a      	ldr	r2, [r7, #16]
 80113f0:	4313      	orrs	r3, r2
 80113f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80113f4:	78fb      	ldrb	r3, [r7, #3]
 80113f6:	015a      	lsls	r2, r3, #5
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	4413      	add	r3, r2
 80113fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011400:	689b      	ldr	r3, [r3, #8]
 8011402:	693a      	ldr	r2, [r7, #16]
 8011404:	4013      	ands	r3, r2
 8011406:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011408:	68bb      	ldr	r3, [r7, #8]
}
 801140a:	4618      	mov	r0, r3
 801140c:	371c      	adds	r7, #28
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr

08011416 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011416:	b480      	push	{r7}
 8011418:	b083      	sub	sp, #12
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	695b      	ldr	r3, [r3, #20]
 8011422:	f003 0301 	and.w	r3, r3, #1
}
 8011426:	4618      	mov	r0, r3
 8011428:	370c      	adds	r7, #12
 801142a:	46bd      	mov	sp, r7
 801142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011430:	4770      	bx	lr

08011432 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8011432:	b480      	push	{r7}
 8011434:	b085      	sub	sp, #20
 8011436:	af00      	add	r7, sp, #0
 8011438:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	68fa      	ldr	r2, [r7, #12]
 8011448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801144c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8011450:	f023 0307 	bic.w	r3, r3, #7
 8011454:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801145c:	685b      	ldr	r3, [r3, #4]
 801145e:	68fa      	ldr	r2, [r7, #12]
 8011460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8011468:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801146a:	2300      	movs	r3, #0
}
 801146c:	4618      	mov	r0, r3
 801146e:	3714      	adds	r7, #20
 8011470:	46bd      	mov	sp, r7
 8011472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011476:	4770      	bx	lr

08011478 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8011478:	b480      	push	{r7}
 801147a:	b087      	sub	sp, #28
 801147c:	af00      	add	r7, sp, #0
 801147e:	60f8      	str	r0, [r7, #12]
 8011480:	460b      	mov	r3, r1
 8011482:	607a      	str	r2, [r7, #4]
 8011484:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	333c      	adds	r3, #60	; 0x3c
 801148e:	3304      	adds	r3, #4
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011494:	693b      	ldr	r3, [r7, #16]
 8011496:	4a26      	ldr	r2, [pc, #152]	; (8011530 <USB_EP0_OutStart+0xb8>)
 8011498:	4293      	cmp	r3, r2
 801149a:	d90a      	bls.n	80114b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801149c:	697b      	ldr	r3, [r7, #20]
 801149e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80114a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80114ac:	d101      	bne.n	80114b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80114ae:	2300      	movs	r3, #0
 80114b0:	e037      	b.n	8011522 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114b8:	461a      	mov	r2, r3
 80114ba:	2300      	movs	r3, #0
 80114bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80114be:	697b      	ldr	r3, [r7, #20]
 80114c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114c4:	691b      	ldr	r3, [r3, #16]
 80114c6:	697a      	ldr	r2, [r7, #20]
 80114c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80114cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80114d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114d8:	691b      	ldr	r3, [r3, #16]
 80114da:	697a      	ldr	r2, [r7, #20]
 80114dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80114e0:	f043 0318 	orr.w	r3, r3, #24
 80114e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80114e6:	697b      	ldr	r3, [r7, #20]
 80114e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80114ec:	691b      	ldr	r3, [r3, #16]
 80114ee:	697a      	ldr	r2, [r7, #20]
 80114f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80114f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80114f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80114fa:	7afb      	ldrb	r3, [r7, #11]
 80114fc:	2b01      	cmp	r3, #1
 80114fe:	d10f      	bne.n	8011520 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011500:	697b      	ldr	r3, [r7, #20]
 8011502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011506:	461a      	mov	r2, r3
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801150c:	697b      	ldr	r3, [r7, #20]
 801150e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	697a      	ldr	r2, [r7, #20]
 8011516:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801151a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801151e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011520:	2300      	movs	r3, #0
}
 8011522:	4618      	mov	r0, r3
 8011524:	371c      	adds	r7, #28
 8011526:	46bd      	mov	sp, r7
 8011528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop
 8011530:	4f54300a 	.word	0x4f54300a

08011534 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011534:	b480      	push	{r7}
 8011536:	b085      	sub	sp, #20
 8011538:	af00      	add	r7, sp, #0
 801153a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801153c:	2300      	movs	r3, #0
 801153e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	3301      	adds	r3, #1
 8011544:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	4a13      	ldr	r2, [pc, #76]	; (8011598 <USB_CoreReset+0x64>)
 801154a:	4293      	cmp	r3, r2
 801154c:	d901      	bls.n	8011552 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801154e:	2303      	movs	r3, #3
 8011550:	e01b      	b.n	801158a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	691b      	ldr	r3, [r3, #16]
 8011556:	2b00      	cmp	r3, #0
 8011558:	daf2      	bge.n	8011540 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801155a:	2300      	movs	r3, #0
 801155c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	691b      	ldr	r3, [r3, #16]
 8011562:	f043 0201 	orr.w	r2, r3, #1
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	3301      	adds	r3, #1
 801156e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	4a09      	ldr	r2, [pc, #36]	; (8011598 <USB_CoreReset+0x64>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d901      	bls.n	801157c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011578:	2303      	movs	r3, #3
 801157a:	e006      	b.n	801158a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	691b      	ldr	r3, [r3, #16]
 8011580:	f003 0301 	and.w	r3, r3, #1
 8011584:	2b01      	cmp	r3, #1
 8011586:	d0f0      	beq.n	801156a <USB_CoreReset+0x36>

  return HAL_OK;
 8011588:	2300      	movs	r3, #0
}
 801158a:	4618      	mov	r0, r3
 801158c:	3714      	adds	r7, #20
 801158e:	46bd      	mov	sp, r7
 8011590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011594:	4770      	bx	lr
 8011596:	bf00      	nop
 8011598:	00030d40 	.word	0x00030d40

0801159c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */
extern RTC_HandleTypeDef hrtc;
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801159c:	b580      	push	{r7, lr}
 801159e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80115a0:	4904      	ldr	r1, [pc, #16]	; (80115b4 <MX_FATFS_Init+0x18>)
 80115a2:	4805      	ldr	r0, [pc, #20]	; (80115b8 <MX_FATFS_Init+0x1c>)
 80115a4:	f005 fe3a 	bl	801721c <FATFS_LinkDriver>
 80115a8:	4603      	mov	r3, r0
 80115aa:	461a      	mov	r2, r3
 80115ac:	4b03      	ldr	r3, [pc, #12]	; (80115bc <MX_FATFS_Init+0x20>)
 80115ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80115b0:	bf00      	nop
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	20006784 	.word	0x20006784
 80115b8:	08018724 	.word	0x08018724
 80115bc:	20006780 	.word	0x20006780

080115c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80115c0:	b580      	push	{r7, lr}
 80115c2:	b088      	sub	sp, #32
 80115c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  DWORD retVal = 0;
 80115c6:	2300      	movs	r3, #0
 80115c8:	61fb      	str	r3, [r7, #28]
  RTC_DateTypeDef sDate;
  RTC_TimeTypeDef sTime;

  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80115ca:	f107 0318 	add.w	r3, r7, #24
 80115ce:	2200      	movs	r2, #0
 80115d0:	4619      	mov	r1, r3
 80115d2:	4814      	ldr	r0, [pc, #80]	; (8011624 <get_fattime+0x64>)
 80115d4:	f7fb fb48 	bl	800cc68 <HAL_RTC_GetDate>
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80115d8:	1d3b      	adds	r3, r7, #4
 80115da:	2200      	movs	r2, #0
 80115dc:	4619      	mov	r1, r3
 80115de:	4811      	ldr	r0, [pc, #68]	; (8011624 <get_fattime+0x64>)
 80115e0:	f7fb fa60 	bl	800caa4 <HAL_RTC_GetTime>

  if(sDate.Month == 0)
 80115e4:	7e7b      	ldrb	r3, [r7, #25]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d102      	bne.n	80115f0 <get_fattime+0x30>
	  retVal = 0;
 80115ea:	2300      	movs	r3, #0
 80115ec:	61fb      	str	r3, [r7, #28]
 80115ee:	e013      	b.n	8011618 <get_fattime+0x58>

  else
	  retVal = ((DWORD) (sDate.Year + 20) << 25) | ((DWORD) sDate.Month << 21) | ((DWORD) sDate.Date << 16) |
 80115f0:	7efb      	ldrb	r3, [r7, #27]
 80115f2:	3314      	adds	r3, #20
 80115f4:	065a      	lsls	r2, r3, #25
 80115f6:	7e7b      	ldrb	r3, [r7, #25]
 80115f8:	055b      	lsls	r3, r3, #21
 80115fa:	431a      	orrs	r2, r3
 80115fc:	7ebb      	ldrb	r3, [r7, #26]
 80115fe:	041b      	lsls	r3, r3, #16
 8011600:	431a      	orrs	r2, r3
	  	  	   ((DWORD) sTime.Hours << 11) | ((DWORD) sTime.Minutes << 5) | ((DWORD) sTime.Seconds >> 1);
 8011602:	793b      	ldrb	r3, [r7, #4]
 8011604:	02db      	lsls	r3, r3, #11
	  retVal = ((DWORD) (sDate.Year + 20) << 25) | ((DWORD) sDate.Month << 21) | ((DWORD) sDate.Date << 16) |
 8011606:	431a      	orrs	r2, r3
	  	  	   ((DWORD) sTime.Hours << 11) | ((DWORD) sTime.Minutes << 5) | ((DWORD) sTime.Seconds >> 1);
 8011608:	797b      	ldrb	r3, [r7, #5]
 801160a:	015b      	lsls	r3, r3, #5
 801160c:	4313      	orrs	r3, r2
 801160e:	79ba      	ldrb	r2, [r7, #6]
 8011610:	0852      	lsrs	r2, r2, #1
 8011612:	b2d2      	uxtb	r2, r2
	  retVal = ((DWORD) (sDate.Year + 20) << 25) | ((DWORD) sDate.Month << 21) | ((DWORD) sDate.Date << 16) |
 8011614:	4313      	orrs	r3, r2
 8011616:	61fb      	str	r3, [r7, #28]

  return retVal;
 8011618:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE END get_fattime */
}
 801161a:	4618      	mov	r0, r3
 801161c:	3720      	adds	r7, #32
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
 8011622:	bf00      	nop
 8011624:	20000380 	.word	0x20000380

08011628 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8011628:	b580      	push	{r7, lr}
 801162a:	b082      	sub	sp, #8
 801162c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801162e:	2300      	movs	r3, #0
 8011630:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8011632:	f000 f896 	bl	8011762 <BSP_SD_IsDetected>
 8011636:	4603      	mov	r3, r0
 8011638:	2b01      	cmp	r3, #1
 801163a:	d001      	beq.n	8011640 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801163c:	2301      	movs	r3, #1
 801163e:	e012      	b.n	8011666 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8011640:	480b      	ldr	r0, [pc, #44]	; (8011670 <BSP_SD_Init+0x48>)
 8011642:	f7fb fc4f 	bl	800cee4 <HAL_SD_Init>
 8011646:	4603      	mov	r3, r0
 8011648:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801164a:	79fb      	ldrb	r3, [r7, #7]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d109      	bne.n	8011664 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8011650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8011654:	4806      	ldr	r0, [pc, #24]	; (8011670 <BSP_SD_Init+0x48>)
 8011656:	f7fc fd6b 	bl	800e130 <HAL_SD_ConfigWideBusOperation>
 801165a:	4603      	mov	r3, r0
 801165c:	2b00      	cmp	r3, #0
 801165e:	d001      	beq.n	8011664 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011660:	2301      	movs	r3, #1
 8011662:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011664:	79fb      	ldrb	r3, [r7, #7]
}
 8011666:	4618      	mov	r0, r3
 8011668:	3708      	adds	r7, #8
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	200003a0 	.word	0x200003a0

08011674 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b086      	sub	sp, #24
 8011678:	af00      	add	r7, sp, #0
 801167a:	60f8      	str	r0, [r7, #12]
 801167c:	60b9      	str	r1, [r7, #8]
 801167e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011680:	2300      	movs	r3, #0
 8011682:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	68ba      	ldr	r2, [r7, #8]
 8011688:	68f9      	ldr	r1, [r7, #12]
 801168a:	4806      	ldr	r0, [pc, #24]	; (80116a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 801168c:	f7fc f83e 	bl	800d70c <HAL_SD_ReadBlocks_DMA>
 8011690:	4603      	mov	r3, r0
 8011692:	2b00      	cmp	r3, #0
 8011694:	d001      	beq.n	801169a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8011696:	2301      	movs	r3, #1
 8011698:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801169a:	7dfb      	ldrb	r3, [r7, #23]
}
 801169c:	4618      	mov	r0, r3
 801169e:	3718      	adds	r7, #24
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	200003a0 	.word	0x200003a0

080116a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b086      	sub	sp, #24
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	60b9      	str	r1, [r7, #8]
 80116b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80116b4:	2300      	movs	r3, #0
 80116b6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	68ba      	ldr	r2, [r7, #8]
 80116bc:	68f9      	ldr	r1, [r7, #12]
 80116be:	4806      	ldr	r0, [pc, #24]	; (80116d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80116c0:	f7fc f904 	bl	800d8cc <HAL_SD_WriteBlocks_DMA>
 80116c4:	4603      	mov	r3, r0
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d001      	beq.n	80116ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80116ca:	2301      	movs	r3, #1
 80116cc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80116ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80116d0:	4618      	mov	r0, r3
 80116d2:	3718      	adds	r7, #24
 80116d4:	46bd      	mov	sp, r7
 80116d6:	bd80      	pop	{r7, pc}
 80116d8:	200003a0 	.word	0x200003a0

080116dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80116e0:	4805      	ldr	r0, [pc, #20]	; (80116f8 <BSP_SD_GetCardState+0x1c>)
 80116e2:	f7fc fdbf 	bl	800e264 <HAL_SD_GetCardState>
 80116e6:	4603      	mov	r3, r0
 80116e8:	2b04      	cmp	r3, #4
 80116ea:	bf14      	ite	ne
 80116ec:	2301      	movne	r3, #1
 80116ee:	2300      	moveq	r3, #0
 80116f0:	b2db      	uxtb	r3, r3
}
 80116f2:	4618      	mov	r0, r3
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	200003a0 	.word	0x200003a0

080116fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b082      	sub	sp, #8
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8011704:	6879      	ldr	r1, [r7, #4]
 8011706:	4803      	ldr	r0, [pc, #12]	; (8011714 <BSP_SD_GetCardInfo+0x18>)
 8011708:	f7fc fce6 	bl	800e0d8 <HAL_SD_GetCardInfo>
}
 801170c:	bf00      	nop
 801170e:	3708      	adds	r7, #8
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	200003a0 	.word	0x200003a0

08011718 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011720:	f000 f818 	bl	8011754 <BSP_SD_AbortCallback>
}
 8011724:	bf00      	nop
 8011726:	3708      	adds	r7, #8
 8011728:	46bd      	mov	sp, r7
 801172a:	bd80      	pop	{r7, pc}

0801172c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011734:	f000 f9a8 	bl	8011a88 <BSP_SD_WriteCpltCallback>
}
 8011738:	bf00      	nop
 801173a:	3708      	adds	r7, #8
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011748:	f000 f9aa 	bl	8011aa0 <BSP_SD_ReadCpltCallback>
}
 801174c:	bf00      	nop
 801174e:	3708      	adds	r7, #8
 8011750:	46bd      	mov	sp, r7
 8011752:	bd80      	pop	{r7, pc}

08011754 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011754:	b480      	push	{r7}
 8011756:	af00      	add	r7, sp, #0

}
 8011758:	bf00      	nop
 801175a:	46bd      	mov	sp, r7
 801175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011760:	4770      	bx	lr

08011762 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011762:	b580      	push	{r7, lr}
 8011764:	b082      	sub	sp, #8
 8011766:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011768:	2301      	movs	r3, #1
 801176a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801176c:	f000 f80c 	bl	8011788 <BSP_PlatformIsDetected>
 8011770:	4603      	mov	r3, r0
 8011772:	2b00      	cmp	r3, #0
 8011774:	d101      	bne.n	801177a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8011776:	2300      	movs	r3, #0
 8011778:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801177a:	79fb      	ldrb	r3, [r7, #7]
 801177c:	b2db      	uxtb	r3, r3
}
 801177e:	4618      	mov	r0, r3
 8011780:	3708      	adds	r7, #8
 8011782:	46bd      	mov	sp, r7
 8011784:	bd80      	pop	{r7, pc}
	...

08011788 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8011788:	b580      	push	{r7, lr}
 801178a:	b082      	sub	sp, #8
 801178c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801178e:	2301      	movs	r3, #1
 8011790:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011792:	2180      	movs	r1, #128	; 0x80
 8011794:	4806      	ldr	r0, [pc, #24]	; (80117b0 <BSP_PlatformIsDetected+0x28>)
 8011796:	f7f7 fc37 	bl	8009008 <HAL_GPIO_ReadPin>
 801179a:	4603      	mov	r3, r0
 801179c:	2b00      	cmp	r3, #0
 801179e:	d001      	beq.n	80117a4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80117a0:	2300      	movs	r3, #0
 80117a2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80117a4:	79fb      	ldrb	r3, [r7, #7]
}
 80117a6:	4618      	mov	r0, r3
 80117a8:	3708      	adds	r7, #8
 80117aa:	46bd      	mov	sp, r7
 80117ac:	bd80      	pop	{r7, pc}
 80117ae:	bf00      	nop
 80117b0:	40020800 	.word	0x40020800

080117b4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b084      	sub	sp, #16
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80117bc:	f7f5 fad0 	bl	8006d60 <HAL_GetTick>
 80117c0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80117c2:	e006      	b.n	80117d2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80117c4:	f7ff ff8a 	bl	80116dc <BSP_SD_GetCardState>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d101      	bne.n	80117d2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	e009      	b.n	80117e6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80117d2:	f7f5 fac5 	bl	8006d60 <HAL_GetTick>
 80117d6:	4602      	mov	r2, r0
 80117d8:	68fb      	ldr	r3, [r7, #12]
 80117da:	1ad3      	subs	r3, r2, r3
 80117dc:	687a      	ldr	r2, [r7, #4]
 80117de:	429a      	cmp	r2, r3
 80117e0:	d8f0      	bhi.n	80117c4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80117e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80117e6:	4618      	mov	r0, r3
 80117e8:	3710      	adds	r7, #16
 80117ea:	46bd      	mov	sp, r7
 80117ec:	bd80      	pop	{r7, pc}
	...

080117f0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	4603      	mov	r3, r0
 80117f8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80117fa:	4b0b      	ldr	r3, [pc, #44]	; (8011828 <SD_CheckStatus+0x38>)
 80117fc:	2201      	movs	r2, #1
 80117fe:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8011800:	f7ff ff6c 	bl	80116dc <BSP_SD_GetCardState>
 8011804:	4603      	mov	r3, r0
 8011806:	2b00      	cmp	r3, #0
 8011808:	d107      	bne.n	801181a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801180a:	4b07      	ldr	r3, [pc, #28]	; (8011828 <SD_CheckStatus+0x38>)
 801180c:	781b      	ldrb	r3, [r3, #0]
 801180e:	b2db      	uxtb	r3, r3
 8011810:	f023 0301 	bic.w	r3, r3, #1
 8011814:	b2da      	uxtb	r2, r3
 8011816:	4b04      	ldr	r3, [pc, #16]	; (8011828 <SD_CheckStatus+0x38>)
 8011818:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801181a:	4b03      	ldr	r3, [pc, #12]	; (8011828 <SD_CheckStatus+0x38>)
 801181c:	781b      	ldrb	r3, [r3, #0]
 801181e:	b2db      	uxtb	r3, r3
}
 8011820:	4618      	mov	r0, r3
 8011822:	3708      	adds	r7, #8
 8011824:	46bd      	mov	sp, r7
 8011826:	bd80      	pop	{r7, pc}
 8011828:	20000009 	.word	0x20000009

0801182c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801182c:	b580      	push	{r7, lr}
 801182e:	b082      	sub	sp, #8
 8011830:	af00      	add	r7, sp, #0
 8011832:	4603      	mov	r3, r0
 8011834:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011836:	f7ff fef7 	bl	8011628 <BSP_SD_Init>
 801183a:	4603      	mov	r3, r0
 801183c:	2b00      	cmp	r3, #0
 801183e:	d107      	bne.n	8011850 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8011840:	79fb      	ldrb	r3, [r7, #7]
 8011842:	4618      	mov	r0, r3
 8011844:	f7ff ffd4 	bl	80117f0 <SD_CheckStatus>
 8011848:	4603      	mov	r3, r0
 801184a:	461a      	mov	r2, r3
 801184c:	4b04      	ldr	r3, [pc, #16]	; (8011860 <SD_initialize+0x34>)
 801184e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8011850:	4b03      	ldr	r3, [pc, #12]	; (8011860 <SD_initialize+0x34>)
 8011852:	781b      	ldrb	r3, [r3, #0]
 8011854:	b2db      	uxtb	r3, r3
}
 8011856:	4618      	mov	r0, r3
 8011858:	3708      	adds	r7, #8
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	20000009 	.word	0x20000009

08011864 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b082      	sub	sp, #8
 8011868:	af00      	add	r7, sp, #0
 801186a:	4603      	mov	r3, r0
 801186c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801186e:	79fb      	ldrb	r3, [r7, #7]
 8011870:	4618      	mov	r0, r3
 8011872:	f7ff ffbd 	bl	80117f0 <SD_CheckStatus>
 8011876:	4603      	mov	r3, r0
}
 8011878:	4618      	mov	r0, r3
 801187a:	3708      	adds	r7, #8
 801187c:	46bd      	mov	sp, r7
 801187e:	bd80      	pop	{r7, pc}

08011880 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011880:	b580      	push	{r7, lr}
 8011882:	b086      	sub	sp, #24
 8011884:	af00      	add	r7, sp, #0
 8011886:	60b9      	str	r1, [r7, #8]
 8011888:	607a      	str	r2, [r7, #4]
 801188a:	603b      	str	r3, [r7, #0]
 801188c:	4603      	mov	r3, r0
 801188e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011890:	2301      	movs	r3, #1
 8011892:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011894:	f247 5030 	movw	r0, #30000	; 0x7530
 8011898:	f7ff ff8c 	bl	80117b4 <SD_CheckStatusWithTimeout>
 801189c:	4603      	mov	r3, r0
 801189e:	2b00      	cmp	r3, #0
 80118a0:	da01      	bge.n	80118a6 <SD_read+0x26>
  {
    return res;
 80118a2:	7dfb      	ldrb	r3, [r7, #23]
 80118a4:	e03b      	b.n	801191e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80118a6:	683a      	ldr	r2, [r7, #0]
 80118a8:	6879      	ldr	r1, [r7, #4]
 80118aa:	68b8      	ldr	r0, [r7, #8]
 80118ac:	f7ff fee2 	bl	8011674 <BSP_SD_ReadBlocks_DMA>
 80118b0:	4603      	mov	r3, r0
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d132      	bne.n	801191c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80118b6:	4b1c      	ldr	r3, [pc, #112]	; (8011928 <SD_read+0xa8>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80118bc:	f7f5 fa50 	bl	8006d60 <HAL_GetTick>
 80118c0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80118c2:	bf00      	nop
 80118c4:	4b18      	ldr	r3, [pc, #96]	; (8011928 <SD_read+0xa8>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d108      	bne.n	80118de <SD_read+0x5e>
 80118cc:	f7f5 fa48 	bl	8006d60 <HAL_GetTick>
 80118d0:	4602      	mov	r2, r0
 80118d2:	693b      	ldr	r3, [r7, #16]
 80118d4:	1ad3      	subs	r3, r2, r3
 80118d6:	f247 522f 	movw	r2, #29999	; 0x752f
 80118da:	4293      	cmp	r3, r2
 80118dc:	d9f2      	bls.n	80118c4 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80118de:	4b12      	ldr	r3, [pc, #72]	; (8011928 <SD_read+0xa8>)
 80118e0:	681b      	ldr	r3, [r3, #0]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d102      	bne.n	80118ec <SD_read+0x6c>
      {
        res = RES_ERROR;
 80118e6:	2301      	movs	r3, #1
 80118e8:	75fb      	strb	r3, [r7, #23]
 80118ea:	e017      	b.n	801191c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80118ec:	4b0e      	ldr	r3, [pc, #56]	; (8011928 <SD_read+0xa8>)
 80118ee:	2200      	movs	r2, #0
 80118f0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80118f2:	f7f5 fa35 	bl	8006d60 <HAL_GetTick>
 80118f6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80118f8:	e007      	b.n	801190a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80118fa:	f7ff feef 	bl	80116dc <BSP_SD_GetCardState>
 80118fe:	4603      	mov	r3, r0
 8011900:	2b00      	cmp	r3, #0
 8011902:	d102      	bne.n	801190a <SD_read+0x8a>
          {
            res = RES_OK;
 8011904:	2300      	movs	r3, #0
 8011906:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8011908:	e008      	b.n	801191c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801190a:	f7f5 fa29 	bl	8006d60 <HAL_GetTick>
 801190e:	4602      	mov	r2, r0
 8011910:	693b      	ldr	r3, [r7, #16]
 8011912:	1ad3      	subs	r3, r2, r3
 8011914:	f247 522f 	movw	r2, #29999	; 0x752f
 8011918:	4293      	cmp	r3, r2
 801191a:	d9ee      	bls.n	80118fa <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 801191c:	7dfb      	ldrb	r3, [r7, #23]
}
 801191e:	4618      	mov	r0, r3
 8011920:	3718      	adds	r7, #24
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	2000678c 	.word	0x2000678c

0801192c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801192c:	b580      	push	{r7, lr}
 801192e:	b086      	sub	sp, #24
 8011930:	af00      	add	r7, sp, #0
 8011932:	60b9      	str	r1, [r7, #8]
 8011934:	607a      	str	r2, [r7, #4]
 8011936:	603b      	str	r3, [r7, #0]
 8011938:	4603      	mov	r3, r0
 801193a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801193c:	2301      	movs	r3, #1
 801193e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8011940:	4b24      	ldr	r3, [pc, #144]	; (80119d4 <SD_write+0xa8>)
 8011942:	2200      	movs	r2, #0
 8011944:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011946:	f247 5030 	movw	r0, #30000	; 0x7530
 801194a:	f7ff ff33 	bl	80117b4 <SD_CheckStatusWithTimeout>
 801194e:	4603      	mov	r3, r0
 8011950:	2b00      	cmp	r3, #0
 8011952:	da01      	bge.n	8011958 <SD_write+0x2c>
  {
    return res;
 8011954:	7dfb      	ldrb	r3, [r7, #23]
 8011956:	e038      	b.n	80119ca <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8011958:	683a      	ldr	r2, [r7, #0]
 801195a:	6879      	ldr	r1, [r7, #4]
 801195c:	68b8      	ldr	r0, [r7, #8]
 801195e:	f7ff fea3 	bl	80116a8 <BSP_SD_WriteBlocks_DMA>
 8011962:	4603      	mov	r3, r0
 8011964:	2b00      	cmp	r3, #0
 8011966:	d12f      	bne.n	80119c8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8011968:	f7f5 f9fa 	bl	8006d60 <HAL_GetTick>
 801196c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801196e:	bf00      	nop
 8011970:	4b18      	ldr	r3, [pc, #96]	; (80119d4 <SD_write+0xa8>)
 8011972:	681b      	ldr	r3, [r3, #0]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d108      	bne.n	801198a <SD_write+0x5e>
 8011978:	f7f5 f9f2 	bl	8006d60 <HAL_GetTick>
 801197c:	4602      	mov	r2, r0
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	1ad3      	subs	r3, r2, r3
 8011982:	f247 522f 	movw	r2, #29999	; 0x752f
 8011986:	4293      	cmp	r3, r2
 8011988:	d9f2      	bls.n	8011970 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801198a:	4b12      	ldr	r3, [pc, #72]	; (80119d4 <SD_write+0xa8>)
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d102      	bne.n	8011998 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8011992:	2301      	movs	r3, #1
 8011994:	75fb      	strb	r3, [r7, #23]
 8011996:	e017      	b.n	80119c8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8011998:	4b0e      	ldr	r3, [pc, #56]	; (80119d4 <SD_write+0xa8>)
 801199a:	2200      	movs	r2, #0
 801199c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801199e:	f7f5 f9df 	bl	8006d60 <HAL_GetTick>
 80119a2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80119a4:	e007      	b.n	80119b6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80119a6:	f7ff fe99 	bl	80116dc <BSP_SD_GetCardState>
 80119aa:	4603      	mov	r3, r0
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d102      	bne.n	80119b6 <SD_write+0x8a>
          {
            res = RES_OK;
 80119b0:	2300      	movs	r3, #0
 80119b2:	75fb      	strb	r3, [r7, #23]
            break;
 80119b4:	e008      	b.n	80119c8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80119b6:	f7f5 f9d3 	bl	8006d60 <HAL_GetTick>
 80119ba:	4602      	mov	r2, r0
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	f247 522f 	movw	r2, #29999	; 0x752f
 80119c4:	4293      	cmp	r3, r2
 80119c6:	d9ee      	bls.n	80119a6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80119c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3718      	adds	r7, #24
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
 80119d2:	bf00      	nop
 80119d4:	20006788 	.word	0x20006788

080119d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b08c      	sub	sp, #48	; 0x30
 80119dc:	af00      	add	r7, sp, #0
 80119de:	4603      	mov	r3, r0
 80119e0:	603a      	str	r2, [r7, #0]
 80119e2:	71fb      	strb	r3, [r7, #7]
 80119e4:	460b      	mov	r3, r1
 80119e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80119e8:	2301      	movs	r3, #1
 80119ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80119ee:	4b25      	ldr	r3, [pc, #148]	; (8011a84 <SD_ioctl+0xac>)
 80119f0:	781b      	ldrb	r3, [r3, #0]
 80119f2:	b2db      	uxtb	r3, r3
 80119f4:	f003 0301 	and.w	r3, r3, #1
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d001      	beq.n	8011a00 <SD_ioctl+0x28>
 80119fc:	2303      	movs	r3, #3
 80119fe:	e03c      	b.n	8011a7a <SD_ioctl+0xa2>

  switch (cmd)
 8011a00:	79bb      	ldrb	r3, [r7, #6]
 8011a02:	2b03      	cmp	r3, #3
 8011a04:	d834      	bhi.n	8011a70 <SD_ioctl+0x98>
 8011a06:	a201      	add	r2, pc, #4	; (adr r2, 8011a0c <SD_ioctl+0x34>)
 8011a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a0c:	08011a1d 	.word	0x08011a1d
 8011a10:	08011a25 	.word	0x08011a25
 8011a14:	08011a3d 	.word	0x08011a3d
 8011a18:	08011a57 	.word	0x08011a57
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011a22:	e028      	b.n	8011a76 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a24:	f107 030c 	add.w	r3, r7, #12
 8011a28:	4618      	mov	r0, r3
 8011a2a:	f7ff fe67 	bl	80116fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011a34:	2300      	movs	r3, #0
 8011a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011a3a:	e01c      	b.n	8011a76 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a3c:	f107 030c 	add.w	r3, r7, #12
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7ff fe5b 	bl	80116fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a48:	b29a      	uxth	r2, r3
 8011a4a:	683b      	ldr	r3, [r7, #0]
 8011a4c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011a54:	e00f      	b.n	8011a76 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011a56:	f107 030c 	add.w	r3, r7, #12
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7ff fe4e 	bl	80116fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8011a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a62:	0a5a      	lsrs	r2, r3, #9
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011a6e:	e002      	b.n	8011a76 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8011a70:	2304      	movs	r3, #4
 8011a72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011a76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3730      	adds	r7, #48	; 0x30
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}
 8011a82:	bf00      	nop
 8011a84:	20000009 	.word	0x20000009

08011a88 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011a88:	b480      	push	{r7}
 8011a8a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8011a8c:	4b03      	ldr	r3, [pc, #12]	; (8011a9c <BSP_SD_WriteCpltCallback+0x14>)
 8011a8e:	2201      	movs	r2, #1
 8011a90:	601a      	str	r2, [r3, #0]
}
 8011a92:	bf00      	nop
 8011a94:	46bd      	mov	sp, r7
 8011a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9a:	4770      	bx	lr
 8011a9c:	20006788 	.word	0x20006788

08011aa0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011aa0:	b480      	push	{r7}
 8011aa2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8011aa4:	4b03      	ldr	r3, [pc, #12]	; (8011ab4 <BSP_SD_ReadCpltCallback+0x14>)
 8011aa6:	2201      	movs	r2, #1
 8011aa8:	601a      	str	r2, [r3, #0]
}
 8011aaa:	bf00      	nop
 8011aac:	46bd      	mov	sp, r7
 8011aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab2:	4770      	bx	lr
 8011ab4:	2000678c 	.word	0x2000678c

08011ab8 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b084      	sub	sp, #16
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = (USBD_MSC_BOT_HandleTypeDef *)USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8011ac4:	f44f 701d 	mov.w	r0, #628	; 0x274
 8011ac8:	f006 f8e2 	bl	8017c90 <USBD_static_malloc>
 8011acc:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d109      	bne.n	8011ae8 <USBD_MSC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	32b0      	adds	r2, #176	; 0xb0
 8011ade:	2100      	movs	r1, #0
 8011ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011ae4:	2302      	movs	r3, #2
 8011ae6:	e06e      	b.n	8011bc6 <USBD_MSC_Init+0x10e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hmsc;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	32b0      	adds	r2, #176	; 0xb0
 8011af2:	68f9      	ldr	r1, [r7, #12]
 8011af4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	32b0      	adds	r2, #176	; 0xb0
 8011b02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	7c1b      	ldrb	r3, [r3, #16]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d12b      	bne.n	8011b6c <USBD_MSC_Init+0xb4>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011b14:	4b2e      	ldr	r3, [pc, #184]	; (8011bd0 <USBD_MSC_Init+0x118>)
 8011b16:	7819      	ldrb	r1, [r3, #0]
 8011b18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b1c:	2202      	movs	r2, #2
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	f005 ff25 	bl	801796e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011b24:	4b2a      	ldr	r3, [pc, #168]	; (8011bd0 <USBD_MSC_Init+0x118>)
 8011b26:	781b      	ldrb	r3, [r3, #0]
 8011b28:	f003 020f 	and.w	r2, r3, #15
 8011b2c:	6879      	ldr	r1, [r7, #4]
 8011b2e:	4613      	mov	r3, r2
 8011b30:	009b      	lsls	r3, r3, #2
 8011b32:	4413      	add	r3, r2
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	440b      	add	r3, r1
 8011b38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011b3c:	2201      	movs	r2, #1
 8011b3e:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8011b40:	4b24      	ldr	r3, [pc, #144]	; (8011bd4 <USBD_MSC_Init+0x11c>)
 8011b42:	7819      	ldrb	r1, [r3, #0]
 8011b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b48:	2202      	movs	r2, #2
 8011b4a:	6878      	ldr	r0, [r7, #4]
 8011b4c:	f005 ff0f 	bl	801796e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011b50:	4b20      	ldr	r3, [pc, #128]	; (8011bd4 <USBD_MSC_Init+0x11c>)
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	f003 020f 	and.w	r2, r3, #15
 8011b58:	6879      	ldr	r1, [r7, #4]
 8011b5a:	4613      	mov	r3, r2
 8011b5c:	009b      	lsls	r3, r3, #2
 8011b5e:	4413      	add	r3, r2
 8011b60:	009b      	lsls	r3, r3, #2
 8011b62:	440b      	add	r3, r1
 8011b64:	3324      	adds	r3, #36	; 0x24
 8011b66:	2201      	movs	r2, #1
 8011b68:	801a      	strh	r2, [r3, #0]
 8011b6a:	e028      	b.n	8011bbe <USBD_MSC_Init+0x106>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSCOutEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011b6c:	4b18      	ldr	r3, [pc, #96]	; (8011bd0 <USBD_MSC_Init+0x118>)
 8011b6e:	7819      	ldrb	r1, [r3, #0]
 8011b70:	2340      	movs	r3, #64	; 0x40
 8011b72:	2202      	movs	r2, #2
 8011b74:	6878      	ldr	r0, [r7, #4]
 8011b76:	f005 fefa 	bl	801796e <USBD_LL_OpenEP>
    pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 1U;
 8011b7a:	4b15      	ldr	r3, [pc, #84]	; (8011bd0 <USBD_MSC_Init+0x118>)
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	f003 020f 	and.w	r2, r3, #15
 8011b82:	6879      	ldr	r1, [r7, #4]
 8011b84:	4613      	mov	r3, r2
 8011b86:	009b      	lsls	r3, r3, #2
 8011b88:	4413      	add	r3, r2
 8011b8a:	009b      	lsls	r3, r3, #2
 8011b8c:	440b      	add	r3, r1
 8011b8e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011b92:	2201      	movs	r2, #1
 8011b94:	801a      	strh	r2, [r3, #0]

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSCInEpAdd, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8011b96:	4b0f      	ldr	r3, [pc, #60]	; (8011bd4 <USBD_MSC_Init+0x11c>)
 8011b98:	7819      	ldrb	r1, [r3, #0]
 8011b9a:	2340      	movs	r3, #64	; 0x40
 8011b9c:	2202      	movs	r2, #2
 8011b9e:	6878      	ldr	r0, [r7, #4]
 8011ba0:	f005 fee5 	bl	801796e <USBD_LL_OpenEP>
    pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 1U;
 8011ba4:	4b0b      	ldr	r3, [pc, #44]	; (8011bd4 <USBD_MSC_Init+0x11c>)
 8011ba6:	781b      	ldrb	r3, [r3, #0]
 8011ba8:	f003 020f 	and.w	r2, r3, #15
 8011bac:	6879      	ldr	r1, [r7, #4]
 8011bae:	4613      	mov	r3, r2
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	4413      	add	r3, r2
 8011bb4:	009b      	lsls	r3, r3, #2
 8011bb6:	440b      	add	r3, r1
 8011bb8:	3324      	adds	r3, #36	; 0x24
 8011bba:	2201      	movs	r2, #1
 8011bbc:	801a      	strh	r2, [r3, #0]
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f000 fa2c 	bl	801201c <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8011bc4:	2300      	movs	r3, #0
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3710      	adds	r7, #16
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	2000006f 	.word	0x2000006f
 8011bd4:	2000006e 	.word	0x2000006e

08011bd8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	460b      	mov	r3, r1
 8011be2:	70fb      	strb	r3, [r7, #3]
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSCOutEpAdd);
 8011be4:	4b26      	ldr	r3, [pc, #152]	; (8011c80 <USBD_MSC_DeInit+0xa8>)
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	4619      	mov	r1, r3
 8011bea:	6878      	ldr	r0, [r7, #4]
 8011bec:	f005 fee5 	bl	80179ba <USBD_LL_CloseEP>
  pdev->ep_out[MSCOutEpAdd & 0xFU].is_used = 0U;
 8011bf0:	4b23      	ldr	r3, [pc, #140]	; (8011c80 <USBD_MSC_DeInit+0xa8>)
 8011bf2:	781b      	ldrb	r3, [r3, #0]
 8011bf4:	f003 020f 	and.w	r2, r3, #15
 8011bf8:	6879      	ldr	r1, [r7, #4]
 8011bfa:	4613      	mov	r3, r2
 8011bfc:	009b      	lsls	r3, r3, #2
 8011bfe:	4413      	add	r3, r2
 8011c00:	009b      	lsls	r3, r3, #2
 8011c02:	440b      	add	r3, r1
 8011c04:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011c08:	2200      	movs	r2, #0
 8011c0a:	801a      	strh	r2, [r3, #0]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSCInEpAdd);
 8011c0c:	4b1d      	ldr	r3, [pc, #116]	; (8011c84 <USBD_MSC_DeInit+0xac>)
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	4619      	mov	r1, r3
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f005 fed1 	bl	80179ba <USBD_LL_CloseEP>
  pdev->ep_in[MSCInEpAdd & 0xFU].is_used = 0U;
 8011c18:	4b1a      	ldr	r3, [pc, #104]	; (8011c84 <USBD_MSC_DeInit+0xac>)
 8011c1a:	781b      	ldrb	r3, [r3, #0]
 8011c1c:	f003 020f 	and.w	r2, r3, #15
 8011c20:	6879      	ldr	r1, [r7, #4]
 8011c22:	4613      	mov	r3, r2
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	4413      	add	r3, r2
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	440b      	add	r3, r1
 8011c2c:	3324      	adds	r3, #36	; 0x24
 8011c2e:	2200      	movs	r2, #0
 8011c30:	801a      	strh	r2, [r3, #0]

  /* Free MSC Class Resources */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	32b0      	adds	r2, #176	; 0xb0
 8011c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d018      	beq.n	8011c76 <USBD_MSC_DeInit+0x9e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f000 fa67 	bl	8012118 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	32b0      	adds	r2, #176	; 0xb0
 8011c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f006 f827 	bl	8017cac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId]  = NULL;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	32b0      	adds	r2, #176	; 0xb0
 8011c68:	2100      	movs	r1, #0
 8011c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	2200      	movs	r2, #0
 8011c72:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011c76:	2300      	movs	r3, #0
}
 8011c78:	4618      	mov	r0, r3
 8011c7a:	3708      	adds	r7, #8
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	2000006f 	.word	0x2000006f
 8011c84:	2000006e 	.word	0x2000006e

08011c88 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b086      	sub	sp, #24
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
 8011c90:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	32b0      	adds	r2, #176	; 0xb0
 8011c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ca0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	81fb      	strh	r3, [r7, #14]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d101      	bne.n	8011cb4 <USBD_MSC_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8011cb0:	2303      	movs	r3, #3
 8011cb2:	e0e1      	b.n	8011e78 <USBD_MSC_Setup+0x1f0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	781b      	ldrb	r3, [r3, #0]
 8011cb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d053      	beq.n	8011d68 <USBD_MSC_Setup+0xe0>
 8011cc0:	2b20      	cmp	r3, #32
 8011cc2:	f040 80d1 	bne.w	8011e68 <USBD_MSC_Setup+0x1e0>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8011cc6:	683b      	ldr	r3, [r7, #0]
 8011cc8:	785b      	ldrb	r3, [r3, #1]
 8011cca:	2bfe      	cmp	r3, #254	; 0xfe
 8011ccc:	d002      	beq.n	8011cd4 <USBD_MSC_Setup+0x4c>
 8011cce:	2bff      	cmp	r3, #255	; 0xff
 8011cd0:	d02a      	beq.n	8011d28 <USBD_MSC_Setup+0xa0>
 8011cd2:	e041      	b.n	8011d58 <USBD_MSC_Setup+0xd0>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011cd4:	683b      	ldr	r3, [r7, #0]
 8011cd6:	885b      	ldrh	r3, [r3, #2]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	d11e      	bne.n	8011d1a <USBD_MSC_Setup+0x92>
 8011cdc:	683b      	ldr	r3, [r7, #0]
 8011cde:	88db      	ldrh	r3, [r3, #6]
 8011ce0:	2b01      	cmp	r3, #1
 8011ce2:	d11a      	bne.n	8011d1a <USBD_MSC_Setup+0x92>
              ((req->bmRequest & 0x80U) == 0x80U))
 8011ce4:	683b      	ldr	r3, [r7, #0]
 8011ce6:	781b      	ldrb	r3, [r3, #0]
 8011ce8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	da15      	bge.n	8011d1a <USBD_MSC_Setup+0x92>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetMaxLun();
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	33b0      	adds	r3, #176	; 0xb0
 8011cf8:	009b      	lsls	r3, r3, #2
 8011cfa:	4413      	add	r3, r2
 8011cfc:	685b      	ldr	r3, [r3, #4]
 8011cfe:	699b      	ldr	r3, [r3, #24]
 8011d00:	4798      	blx	r3
 8011d02:	4603      	mov	r3, r0
 8011d04:	461a      	mov	r2, r3
 8011d06:	693b      	ldr	r3, [r7, #16]
 8011d08:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8011d0a:	693b      	ldr	r3, [r7, #16]
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	4619      	mov	r1, r3
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	f003 f923 	bl	8014f5c <USBD_CtlSendData>
 8011d16:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011d18:	e025      	b.n	8011d66 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011d1a:	6839      	ldr	r1, [r7, #0]
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f003 f8ac 	bl	8014e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8011d22:	2303      	movs	r3, #3
 8011d24:	75fb      	strb	r3, [r7, #23]
          break;
 8011d26:	e01e      	b.n	8011d66 <USBD_MSC_Setup+0xde>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011d28:	683b      	ldr	r3, [r7, #0]
 8011d2a:	885b      	ldrh	r3, [r3, #2]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d10c      	bne.n	8011d4a <USBD_MSC_Setup+0xc2>
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	88db      	ldrh	r3, [r3, #6]
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d108      	bne.n	8011d4a <USBD_MSC_Setup+0xc2>
              ((req->bmRequest & 0x80U) != 0x80U))
 8011d38:	683b      	ldr	r3, [r7, #0]
 8011d3a:	781b      	ldrb	r3, [r3, #0]
 8011d3c:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	db03      	blt.n	8011d4a <USBD_MSC_Setup+0xc2>
          {
            MSC_BOT_Reset(pdev);
 8011d42:	6878      	ldr	r0, [r7, #4]
 8011d44:	f000 f9b4 	bl	80120b0 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011d48:	e00d      	b.n	8011d66 <USBD_MSC_Setup+0xde>
            USBD_CtlError(pdev, req);
 8011d4a:	6839      	ldr	r1, [r7, #0]
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f003 f894 	bl	8014e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8011d52:	2303      	movs	r3, #3
 8011d54:	75fb      	strb	r3, [r7, #23]
          break;
 8011d56:	e006      	b.n	8011d66 <USBD_MSC_Setup+0xde>

        default:
          USBD_CtlError(pdev, req);
 8011d58:	6839      	ldr	r1, [r7, #0]
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f003 f88d 	bl	8014e7a <USBD_CtlError>
          ret = USBD_FAIL;
 8011d60:	2303      	movs	r3, #3
 8011d62:	75fb      	strb	r3, [r7, #23]
          break;
 8011d64:	bf00      	nop
      }
      break;
 8011d66:	e086      	b.n	8011e76 <USBD_MSC_Setup+0x1ee>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	785b      	ldrb	r3, [r3, #1]
 8011d6c:	2b0b      	cmp	r3, #11
 8011d6e:	d872      	bhi.n	8011e56 <USBD_MSC_Setup+0x1ce>
 8011d70:	a201      	add	r2, pc, #4	; (adr r2, 8011d78 <USBD_MSC_Setup+0xf0>)
 8011d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d76:	bf00      	nop
 8011d78:	08011da9 	.word	0x08011da9
 8011d7c:	08011e25 	.word	0x08011e25
 8011d80:	08011e57 	.word	0x08011e57
 8011d84:	08011e57 	.word	0x08011e57
 8011d88:	08011e57 	.word	0x08011e57
 8011d8c:	08011e57 	.word	0x08011e57
 8011d90:	08011e57 	.word	0x08011e57
 8011d94:	08011e57 	.word	0x08011e57
 8011d98:	08011e57 	.word	0x08011e57
 8011d9c:	08011e57 	.word	0x08011e57
 8011da0:	08011dd3 	.word	0x08011dd3
 8011da4:	08011dfd 	.word	0x08011dfd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011da8:	687b      	ldr	r3, [r7, #4]
 8011daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	2b03      	cmp	r3, #3
 8011db2:	d107      	bne.n	8011dc4 <USBD_MSC_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011db4:	f107 030e 	add.w	r3, r7, #14
 8011db8:	2202      	movs	r2, #2
 8011dba:	4619      	mov	r1, r3
 8011dbc:	6878      	ldr	r0, [r7, #4]
 8011dbe:	f003 f8cd 	bl	8014f5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011dc2:	e050      	b.n	8011e66 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011dc4:	6839      	ldr	r1, [r7, #0]
 8011dc6:	6878      	ldr	r0, [r7, #4]
 8011dc8:	f003 f857 	bl	8014e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8011dcc:	2303      	movs	r3, #3
 8011dce:	75fb      	strb	r3, [r7, #23]
          break;
 8011dd0:	e049      	b.n	8011e66 <USBD_MSC_Setup+0x1de>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dd8:	b2db      	uxtb	r3, r3
 8011dda:	2b03      	cmp	r3, #3
 8011ddc:	d107      	bne.n	8011dee <USBD_MSC_Setup+0x166>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	3304      	adds	r3, #4
 8011de2:	2201      	movs	r2, #1
 8011de4:	4619      	mov	r1, r3
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f003 f8b8 	bl	8014f5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011dec:	e03b      	b.n	8011e66 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011dee:	6839      	ldr	r1, [r7, #0]
 8011df0:	6878      	ldr	r0, [r7, #4]
 8011df2:	f003 f842 	bl	8014e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8011df6:	2303      	movs	r3, #3
 8011df8:	75fb      	strb	r3, [r7, #23]
          break;
 8011dfa:	e034      	b.n	8011e66 <USBD_MSC_Setup+0x1de>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	2b03      	cmp	r3, #3
 8011e06:	d106      	bne.n	8011e16 <USBD_MSC_Setup+0x18e>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	885b      	ldrh	r3, [r3, #2]
 8011e0c:	b2db      	uxtb	r3, r3
 8011e0e:	461a      	mov	r2, r3
 8011e10:	693b      	ldr	r3, [r7, #16]
 8011e12:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011e14:	e027      	b.n	8011e66 <USBD_MSC_Setup+0x1de>
            USBD_CtlError(pdev, req);
 8011e16:	6839      	ldr	r1, [r7, #0]
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f003 f82e 	bl	8014e7a <USBD_CtlError>
            ret = USBD_FAIL;
 8011e1e:	2303      	movs	r3, #3
 8011e20:	75fb      	strb	r3, [r7, #23]
          break;
 8011e22:	e020      	b.n	8011e66 <USBD_MSC_Setup+0x1de>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e2a:	b2db      	uxtb	r3, r3
 8011e2c:	2b03      	cmp	r3, #3
 8011e2e:	d119      	bne.n	8011e64 <USBD_MSC_Setup+0x1dc>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	885b      	ldrh	r3, [r3, #2]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d115      	bne.n	8011e64 <USBD_MSC_Setup+0x1dc>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8011e38:	683b      	ldr	r3, [r7, #0]
 8011e3a:	889b      	ldrh	r3, [r3, #4]
 8011e3c:	b2db      	uxtb	r3, r3
 8011e3e:	4619      	mov	r1, r3
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f005 fdd9 	bl	80179f8 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8011e46:	683b      	ldr	r3, [r7, #0]
 8011e48:	889b      	ldrh	r3, [r3, #4]
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	4619      	mov	r1, r3
 8011e4e:	6878      	ldr	r0, [r7, #4]
 8011e50:	f000 fb2e 	bl	80124b0 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8011e54:	e006      	b.n	8011e64 <USBD_MSC_Setup+0x1dc>

        default:
          USBD_CtlError(pdev, req);
 8011e56:	6839      	ldr	r1, [r7, #0]
 8011e58:	6878      	ldr	r0, [r7, #4]
 8011e5a:	f003 f80e 	bl	8014e7a <USBD_CtlError>
          ret = USBD_FAIL;
 8011e5e:	2303      	movs	r3, #3
 8011e60:	75fb      	strb	r3, [r7, #23]
          break;
 8011e62:	e000      	b.n	8011e66 <USBD_MSC_Setup+0x1de>
          break;
 8011e64:	bf00      	nop
      }
      break;
 8011e66:	e006      	b.n	8011e76 <USBD_MSC_Setup+0x1ee>

    default:
      USBD_CtlError(pdev, req);
 8011e68:	6839      	ldr	r1, [r7, #0]
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f003 f805 	bl	8014e7a <USBD_CtlError>
      ret = USBD_FAIL;
 8011e70:	2303      	movs	r3, #3
 8011e72:	75fb      	strb	r3, [r7, #23]
      break;
 8011e74:	bf00      	nop
  }

  return (uint8_t)ret;
 8011e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3718      	adds	r7, #24
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	bd80      	pop	{r7, pc}

08011e80 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b082      	sub	sp, #8
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	460b      	mov	r3, r1
 8011e8a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8011e8c:	78fb      	ldrb	r3, [r7, #3]
 8011e8e:	4619      	mov	r1, r3
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f000 f959 	bl	8012148 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8011e96:	2300      	movs	r3, #0
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	3708      	adds	r7, #8
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	bd80      	pop	{r7, pc}

08011ea0 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b082      	sub	sp, #8
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
 8011ea8:	460b      	mov	r3, r1
 8011eaa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8011eac:	78fb      	ldrb	r3, [r7, #3]
 8011eae:	4619      	mov	r1, r3
 8011eb0:	6878      	ldr	r0, [r7, #4]
 8011eb2:	f000 f983 	bl	80121bc <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8011eb6:	2300      	movs	r3, #0
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3708      	adds	r7, #8
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011ec8:	2181      	movs	r1, #129	; 0x81
 8011eca:	4812      	ldr	r0, [pc, #72]	; (8011f14 <USBD_MSC_GetHSCfgDesc+0x54>)
 8011ecc:	f002 f972 	bl	80141b4 <USBD_GetEpDesc>
 8011ed0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011ed2:	2101      	movs	r1, #1
 8011ed4:	480f      	ldr	r0, [pc, #60]	; (8011f14 <USBD_MSC_GetHSCfgDesc+0x54>)
 8011ed6:	f002 f96d 	bl	80141b4 <USBD_GetEpDesc>
 8011eda:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d006      	beq.n	8011ef0 <USBD_MSC_GetHSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	711a      	strb	r2, [r3, #4]
 8011ee8:	2200      	movs	r2, #0
 8011eea:	f042 0202 	orr.w	r2, r2, #2
 8011eee:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011ef0:	68bb      	ldr	r3, [r7, #8]
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d006      	beq.n	8011f04 <USBD_MSC_GetHSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_HS_PACKET;
 8011ef6:	68bb      	ldr	r3, [r7, #8]
 8011ef8:	2200      	movs	r2, #0
 8011efa:	711a      	strb	r2, [r3, #4]
 8011efc:	2200      	movs	r2, #0
 8011efe:	f042 0202 	orr.w	r2, r2, #2
 8011f02:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2220      	movs	r2, #32
 8011f08:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8011f0a:	4b02      	ldr	r3, [pc, #8]	; (8011f14 <USBD_MSC_GetHSCfgDesc+0x54>)
}
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	3710      	adds	r7, #16
 8011f10:	46bd      	mov	sp, r7
 8011f12:	bd80      	pop	{r7, pc}
 8011f14:	20000044 	.word	0x20000044

08011f18 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8011f18:	b580      	push	{r7, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011f20:	2181      	movs	r1, #129	; 0x81
 8011f22:	4812      	ldr	r0, [pc, #72]	; (8011f6c <USBD_MSC_GetFSCfgDesc+0x54>)
 8011f24:	f002 f946 	bl	80141b4 <USBD_GetEpDesc>
 8011f28:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011f2a:	2101      	movs	r1, #1
 8011f2c:	480f      	ldr	r0, [pc, #60]	; (8011f6c <USBD_MSC_GetFSCfgDesc+0x54>)
 8011f2e:	f002 f941 	bl	80141b4 <USBD_GetEpDesc>
 8011f32:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011f34:	68fb      	ldr	r3, [r7, #12]
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d006      	beq.n	8011f48 <USBD_MSC_GetFSCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011f3a:	68fb      	ldr	r3, [r7, #12]
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f42:	711a      	strb	r2, [r3, #4]
 8011f44:	2200      	movs	r2, #0
 8011f46:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011f48:	68bb      	ldr	r3, [r7, #8]
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d006      	beq.n	8011f5c <USBD_MSC_GetFSCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011f4e:	68bb      	ldr	r3, [r7, #8]
 8011f50:	2200      	movs	r2, #0
 8011f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f56:	711a      	strb	r2, [r3, #4]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	2220      	movs	r2, #32
 8011f60:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8011f62:	4b02      	ldr	r3, [pc, #8]	; (8011f6c <USBD_MSC_GetFSCfgDesc+0x54>)
}
 8011f64:	4618      	mov	r0, r3
 8011f66:	3710      	adds	r7, #16
 8011f68:	46bd      	mov	sp, r7
 8011f6a:	bd80      	pop	{r7, pc}
 8011f6c:	20000044 	.word	0x20000044

08011f70 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011f70:	b580      	push	{r7, lr}
 8011f72:	b084      	sub	sp, #16
 8011f74:	af00      	add	r7, sp, #0
 8011f76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPIN_ADDR);
 8011f78:	2181      	movs	r1, #129	; 0x81
 8011f7a:	4812      	ldr	r0, [pc, #72]	; (8011fc4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8011f7c:	f002 f91a 	bl	80141b4 <USBD_GetEpDesc>
 8011f80:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_MSC_CfgDesc, MSC_EPOUT_ADDR);
 8011f82:	2101      	movs	r1, #1
 8011f84:	480f      	ldr	r0, [pc, #60]	; (8011fc4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
 8011f86:	f002 f915 	bl	80141b4 <USBD_GetEpDesc>
 8011f8a:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d006      	beq.n	8011fa0 <USBD_MSC_GetOtherSpeedCfgDesc+0x30>
  {
    pEpInDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	2200      	movs	r2, #0
 8011f96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011f9a:	711a      	strb	r2, [r3, #4]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	715a      	strb	r2, [r3, #5]
  }

  if (pEpOutDesc != NULL)
 8011fa0:	68bb      	ldr	r3, [r7, #8]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d006      	beq.n	8011fb4 <USBD_MSC_GetOtherSpeedCfgDesc+0x44>
  {
    pEpOutDesc->wMaxPacketSize = MSC_MAX_FS_PACKET;
 8011fa6:	68bb      	ldr	r3, [r7, #8]
 8011fa8:	2200      	movs	r2, #0
 8011faa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011fae:	711a      	strb	r2, [r3, #4]
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_MSC_CfgDesc);
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	2220      	movs	r2, #32
 8011fb8:	801a      	strh	r2, [r3, #0]
  return USBD_MSC_CfgDesc;
 8011fba:	4b02      	ldr	r3, [pc, #8]	; (8011fc4 <USBD_MSC_GetOtherSpeedCfgDesc+0x54>)
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3710      	adds	r7, #16
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}
 8011fc4:	20000044 	.word	0x20000044

08011fc8 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011fc8:	b480      	push	{r7}
 8011fca:	b083      	sub	sp, #12
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	220a      	movs	r2, #10
 8011fd4:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8011fd6:	4b03      	ldr	r3, [pc, #12]	; (8011fe4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011fd8:	4618      	mov	r0, r3
 8011fda:	370c      	adds	r7, #12
 8011fdc:	46bd      	mov	sp, r7
 8011fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe2:	4770      	bx	lr
 8011fe4:	20000064 	.word	0x20000064

08011fe8 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8011fe8:	b480      	push	{r7}
 8011fea:	b083      	sub	sp, #12
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	6078      	str	r0, [r7, #4]
 8011ff0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011ff2:	683b      	ldr	r3, [r7, #0]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d101      	bne.n	8011ffc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011ff8:	2303      	movs	r3, #3
 8011ffa:	e009      	b.n	8012010 <USBD_MSC_RegisterStorage+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	33b0      	adds	r3, #176	; 0xb0
 8012006:	009b      	lsls	r3, r3, #2
 8012008:	4413      	add	r3, r2
 801200a:	683a      	ldr	r2, [r7, #0]
 801200c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801200e:	2300      	movs	r3, #0
}
 8012010:	4618      	mov	r0, r3
 8012012:	370c      	adds	r7, #12
 8012014:	46bd      	mov	sp, r7
 8012016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201a:	4770      	bx	lr

0801201c <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b084      	sub	sp, #16
 8012020:	af00      	add	r7, sp, #0
 8012022:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	32b0      	adds	r2, #176	; 0xb0
 801202e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012032:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	2b00      	cmp	r3, #0
 8012038:	d032      	beq.n	80120a0 <MSC_BOT_Init+0x84>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	2200      	movs	r2, #0
 801203e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8012040:	68fb      	ldr	r3, [r7, #12]
 8012042:	2200      	movs	r2, #0
 8012044:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	2200      	movs	r2, #0
 801204a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	2200      	movs	r2, #0
 8012052:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	2200      	movs	r2, #0
 801205a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Init(0U);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012064:	687a      	ldr	r2, [r7, #4]
 8012066:	33b0      	adds	r3, #176	; 0xb0
 8012068:	009b      	lsls	r3, r3, #2
 801206a:	4413      	add	r3, r2
 801206c:	685b      	ldr	r3, [r3, #4]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	2000      	movs	r0, #0
 8012072:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSCOutEpAdd);
 8012074:	4b0c      	ldr	r3, [pc, #48]	; (80120a8 <MSC_BOT_Init+0x8c>)
 8012076:	781b      	ldrb	r3, [r3, #0]
 8012078:	4619      	mov	r1, r3
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f005 fcbc 	bl	80179f8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSCInEpAdd);
 8012080:	4b0a      	ldr	r3, [pc, #40]	; (80120ac <MSC_BOT_Init+0x90>)
 8012082:	781b      	ldrb	r3, [r3, #0]
 8012084:	4619      	mov	r1, r3
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f005 fcb6 	bl	80179f8 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 801208c:	4b06      	ldr	r3, [pc, #24]	; (80120a8 <MSC_BOT_Init+0x8c>)
 801208e:	7819      	ldrb	r1, [r3, #0]
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8012096:	231f      	movs	r3, #31
 8012098:	6878      	ldr	r0, [r7, #4]
 801209a:	f005 fd76 	bl	8017b8a <USBD_LL_PrepareReceive>
 801209e:	e000      	b.n	80120a2 <MSC_BOT_Init+0x86>
    return;
 80120a0:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80120a2:	3710      	adds	r7, #16
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	2000006f 	.word	0x2000006f
 80120ac:	2000006e 	.word	0x2000006e

080120b0 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b084      	sub	sp, #16
 80120b4:	af00      	add	r7, sp, #0
 80120b6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	32b0      	adds	r2, #176	; 0xb0
 80120c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120c6:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80120c8:	68fb      	ldr	r3, [r7, #12]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d01b      	beq.n	8012106 <MSC_BOT_Reset+0x56>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	2200      	movs	r2, #0
 80120d2:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80120d4:	68fb      	ldr	r3, [r7, #12]
 80120d6:	2201      	movs	r2, #1
 80120d8:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSCInEpAdd);
 80120da:	4b0d      	ldr	r3, [pc, #52]	; (8012110 <MSC_BOT_Reset+0x60>)
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	4619      	mov	r1, r3
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f005 fcc7 	bl	8017a74 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSCOutEpAdd);
 80120e6:	4b0b      	ldr	r3, [pc, #44]	; (8012114 <MSC_BOT_Reset+0x64>)
 80120e8:	781b      	ldrb	r3, [r3, #0]
 80120ea:	4619      	mov	r1, r3
 80120ec:	6878      	ldr	r0, [r7, #4]
 80120ee:	f005 fcc1 	bl	8017a74 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 80120f2:	4b08      	ldr	r3, [pc, #32]	; (8012114 <MSC_BOT_Reset+0x64>)
 80120f4:	7819      	ldrb	r1, [r3, #0]
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80120fc:	231f      	movs	r3, #31
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f005 fd43 	bl	8017b8a <USBD_LL_PrepareReceive>
 8012104:	e000      	b.n	8012108 <MSC_BOT_Reset+0x58>
    return;
 8012106:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8012108:	3710      	adds	r7, #16
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
 801210e:	bf00      	nop
 8012110:	2000006e 	.word	0x2000006e
 8012114:	2000006f 	.word	0x2000006f

08012118 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8012118:	b480      	push	{r7}
 801211a:	b085      	sub	sp, #20
 801211c:	af00      	add	r7, sp, #0
 801211e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	32b0      	adds	r2, #176	; 0xb0
 801212a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801212e:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d002      	beq.n	801213c <MSC_BOT_DeInit+0x24>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	2200      	movs	r2, #0
 801213a:	721a      	strb	r2, [r3, #8]
  }
}
 801213c:	bf00      	nop
 801213e:	3714      	adds	r7, #20
 8012140:	46bd      	mov	sp, r7
 8012142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012146:	4770      	bx	lr

08012148 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	460b      	mov	r3, r1
 8012152:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	32b0      	adds	r2, #176	; 0xb0
 801215e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012162:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d020      	beq.n	80121ac <MSC_BOT_DataIn+0x64>
  {
    return;
  }

  switch (hmsc->bot_state)
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	7a1b      	ldrb	r3, [r3, #8]
 801216e:	2b02      	cmp	r3, #2
 8012170:	d005      	beq.n	801217e <MSC_BOT_DataIn+0x36>
 8012172:	2b02      	cmp	r3, #2
 8012174:	db1c      	blt.n	80121b0 <MSC_BOT_DataIn+0x68>
 8012176:	3b03      	subs	r3, #3
 8012178:	2b01      	cmp	r3, #1
 801217a:	d819      	bhi.n	80121b0 <MSC_BOT_DataIn+0x68>
 801217c:	e011      	b.n	80121a2 <MSC_BOT_DataIn+0x5a>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	f203 231f 	addw	r3, r3, #543	; 0x21f
 801218a:	461a      	mov	r2, r3
 801218c:	6878      	ldr	r0, [r7, #4]
 801218e:	f000 f9c9 	bl	8012524 <SCSI_ProcessCmd>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	da0d      	bge.n	80121b4 <MSC_BOT_DataIn+0x6c>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012198:	2101      	movs	r1, #1
 801219a:	6878      	ldr	r0, [r7, #4]
 801219c:	f000 f90c 	bl	80123b8 <MSC_BOT_SendCSW>
      }
      break;
 80121a0:	e008      	b.n	80121b4 <MSC_BOT_DataIn+0x6c>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80121a2:	2100      	movs	r1, #0
 80121a4:	6878      	ldr	r0, [r7, #4]
 80121a6:	f000 f907 	bl	80123b8 <MSC_BOT_SendCSW>
      break;
 80121aa:	e004      	b.n	80121b6 <MSC_BOT_DataIn+0x6e>
    return;
 80121ac:	bf00      	nop
 80121ae:	e002      	b.n	80121b6 <MSC_BOT_DataIn+0x6e>

    default:
      break;
 80121b0:	bf00      	nop
 80121b2:	e000      	b.n	80121b6 <MSC_BOT_DataIn+0x6e>
      break;
 80121b4:	bf00      	nop
  }
}
 80121b6:	3710      	adds	r7, #16
 80121b8:	46bd      	mov	sp, r7
 80121ba:	bd80      	pop	{r7, pc}

080121bc <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80121bc:	b580      	push	{r7, lr}
 80121be:	b084      	sub	sp, #16
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	460b      	mov	r3, r1
 80121c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	32b0      	adds	r2, #176	; 0xb0
 80121d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121d6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d01c      	beq.n	8012218 <MSC_BOT_DataOut+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 80121de:	68fb      	ldr	r3, [r7, #12]
 80121e0:	7a1b      	ldrb	r3, [r3, #8]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d002      	beq.n	80121ec <MSC_BOT_DataOut+0x30>
 80121e6:	2b01      	cmp	r3, #1
 80121e8:	d004      	beq.n	80121f4 <MSC_BOT_DataOut+0x38>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80121ea:	e018      	b.n	801221e <MSC_BOT_DataOut+0x62>
      MSC_BOT_CBW_Decode(pdev);
 80121ec:	6878      	ldr	r0, [r7, #4]
 80121ee:	f000 f819 	bl	8012224 <MSC_BOT_CBW_Decode>
      break;
 80121f2:	e014      	b.n	801221e <MSC_BOT_DataOut+0x62>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8012200:	461a      	mov	r2, r3
 8012202:	6878      	ldr	r0, [r7, #4]
 8012204:	f000 f98e 	bl	8012524 <SCSI_ProcessCmd>
 8012208:	4603      	mov	r3, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	da06      	bge.n	801221c <MSC_BOT_DataOut+0x60>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801220e:	2101      	movs	r1, #1
 8012210:	6878      	ldr	r0, [r7, #4]
 8012212:	f000 f8d1 	bl	80123b8 <MSC_BOT_SendCSW>
      break;
 8012216:	e001      	b.n	801221c <MSC_BOT_DataOut+0x60>
    return;
 8012218:	bf00      	nop
 801221a:	e000      	b.n	801221e <MSC_BOT_DataOut+0x62>
      break;
 801221c:	bf00      	nop
  }
}
 801221e:	3710      	adds	r7, #16
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}

08012224 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8012224:	b580      	push	{r7, lr}
 8012226:	b084      	sub	sp, #16
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	32b0      	adds	r2, #176	; 0xb0
 8012236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801223a:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d079      	beq.n	8012336 <MSC_BOT_CBW_Decode+0x112>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8012248:	68fb      	ldr	r3, [r7, #12]
 801224a:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 801225a:	4b3a      	ldr	r3, [pc, #232]	; (8012344 <MSC_BOT_CBW_Decode+0x120>)
 801225c:	781b      	ldrb	r3, [r3, #0]
 801225e:	4619      	mov	r1, r3
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f005 fcb3 	bl	8017bcc <USBD_LL_GetRxDataSize>
 8012266:	4603      	mov	r3, r0
 8012268:	2b1f      	cmp	r3, #31
 801226a:	d114      	bne.n	8012296 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSCOutEpAdd) != USBD_BOT_CBW_LENGTH) ||
 8012272:	4a35      	ldr	r2, [pc, #212]	; (8012348 <MSC_BOT_CBW_Decode+0x124>)
 8012274:	4293      	cmp	r3, r2
 8012276:	d10e      	bne.n	8012296 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801227e:	2b01      	cmp	r3, #1
 8012280:	d809      	bhi.n	8012296 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8012288:	2b00      	cmp	r3, #0
 801228a:	d004      	beq.n	8012296 <MSC_BOT_CBW_Decode+0x72>
      (hmsc->cbw.bCBLength > 16U))
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8012292:	2b10      	cmp	r3, #16
 8012294:	d90e      	bls.n	80122b4 <MSC_BOT_CBW_Decode+0x90>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801229c:	2320      	movs	r3, #32
 801229e:	2205      	movs	r2, #5
 80122a0:	6878      	ldr	r0, [r7, #4]
 80122a2:	f000 fe28 	bl	8012ef6 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	2202      	movs	r2, #2
 80122aa:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80122ac:	6878      	ldr	r0, [r7, #4]
 80122ae:	f000 f8bd 	bl	801242c <MSC_BOT_Abort>
 80122b2:	e043      	b.n	801233c <MSC_BOT_CBW_Decode+0x118>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80122c0:	461a      	mov	r2, r3
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f000 f92e 	bl	8012524 <SCSI_ProcessCmd>
 80122c8:	4603      	mov	r3, r0
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	da0c      	bge.n	80122e8 <MSC_BOT_CBW_Decode+0xc4>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	7a1b      	ldrb	r3, [r3, #8]
 80122d2:	2b05      	cmp	r3, #5
 80122d4:	d104      	bne.n	80122e0 <MSC_BOT_CBW_Decode+0xbc>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80122d6:	2101      	movs	r1, #1
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f000 f86d 	bl	80123b8 <MSC_BOT_SendCSW>
 80122de:	e02d      	b.n	801233c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80122e0:	6878      	ldr	r0, [r7, #4]
 80122e2:	f000 f8a3 	bl	801242c <MSC_BOT_Abort>
 80122e6:	e029      	b.n	801233c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	7a1b      	ldrb	r3, [r3, #8]
 80122ec:	2b02      	cmp	r3, #2
 80122ee:	d024      	beq.n	801233a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	d020      	beq.n	801233a <MSC_BOT_CBW_Decode+0x116>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80122fc:	2b03      	cmp	r3, #3
 80122fe:	d01c      	beq.n	801233a <MSC_BOT_CBW_Decode+0x116>
    {
      if (hmsc->bot_data_length > 0U)
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	68db      	ldr	r3, [r3, #12]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d009      	beq.n	801231c <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	f103 0110 	add.w	r1, r3, #16
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	68db      	ldr	r3, [r3, #12]
 8012312:	461a      	mov	r2, r3
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f000 f819 	bl	801234c <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801231a:	e00f      	b.n	801233c <MSC_BOT_CBW_Decode+0x118>
      }
      else if (hmsc->bot_data_length == 0U)
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	68db      	ldr	r3, [r3, #12]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d104      	bne.n	801232e <MSC_BOT_CBW_Decode+0x10a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8012324:	2100      	movs	r1, #0
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f000 f846 	bl	80123b8 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801232c:	e006      	b.n	801233c <MSC_BOT_CBW_Decode+0x118>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f000 f87c 	bl	801242c <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8012334:	e002      	b.n	801233c <MSC_BOT_CBW_Decode+0x118>
    return;
 8012336:	bf00      	nop
 8012338:	e000      	b.n	801233c <MSC_BOT_CBW_Decode+0x118>
      }
    }
    else
    {
      return;
 801233a:	bf00      	nop
    }
  }
}
 801233c:	3710      	adds	r7, #16
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}
 8012342:	bf00      	nop
 8012344:	2000006f 	.word	0x2000006f
 8012348:	43425355 	.word	0x43425355

0801234c <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b086      	sub	sp, #24
 8012350:	af00      	add	r7, sp, #0
 8012352:	60f8      	str	r0, [r7, #12]
 8012354:	60b9      	str	r1, [r7, #8]
 8012356:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	32b0      	adds	r2, #176	; 0xb0
 8012362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012366:	617b      	str	r3, [r7, #20]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012368:	697b      	ldr	r3, [r7, #20]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d01e      	beq.n	80123ac <MSC_BOT_SendData+0x60>
  {
    return;
  }

  length = MIN(hmsc->cbw.dDataLength, len);
 801236e:	697b      	ldr	r3, [r7, #20]
 8012370:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012374:	687a      	ldr	r2, [r7, #4]
 8012376:	4293      	cmp	r3, r2
 8012378:	bf28      	it	cs
 801237a:	4613      	movcs	r3, r2
 801237c:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	1ad2      	subs	r2, r2, r3
 8012388:	697b      	ldr	r3, [r7, #20]
 801238a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 801238e:	697b      	ldr	r3, [r7, #20]
 8012390:	2200      	movs	r2, #0
 8012392:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8012396:	697b      	ldr	r3, [r7, #20]
 8012398:	2204      	movs	r2, #4
 801239a:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, pbuf, length);
 801239c:	4b05      	ldr	r3, [pc, #20]	; (80123b4 <MSC_BOT_SendData+0x68>)
 801239e:	7819      	ldrb	r1, [r3, #0]
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	68ba      	ldr	r2, [r7, #8]
 80123a4:	68f8      	ldr	r0, [r7, #12]
 80123a6:	f005 fbcf 	bl	8017b48 <USBD_LL_Transmit>
 80123aa:	e000      	b.n	80123ae <MSC_BOT_SendData+0x62>
    return;
 80123ac:	bf00      	nop
}
 80123ae:	3718      	adds	r7, #24
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	2000006e 	.word	0x2000006e

080123b8 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b084      	sub	sp, #16
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	460b      	mov	r3, r1
 80123c2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	32b0      	adds	r2, #176	; 0xb0
 80123ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80123d2:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	2b00      	cmp	r3, #0
 80123d8:	d01d      	beq.n	8012416 <MSC_BOT_SendCSW+0x5e>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	4a10      	ldr	r2, [pc, #64]	; (8012420 <MSC_BOT_SendCSW+0x68>)
 80123de:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	78fa      	ldrb	r2, [r7, #3]
 80123e6:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	2200      	movs	r2, #0
 80123ee:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, (uint8_t *)&hmsc->csw,
 80123f0:	4b0c      	ldr	r3, [pc, #48]	; (8012424 <MSC_BOT_SendCSW+0x6c>)
 80123f2:	7819      	ldrb	r1, [r3, #0]
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80123fa:	230d      	movs	r3, #13
 80123fc:	6878      	ldr	r0, [r7, #4]
 80123fe:	f005 fba3 	bl	8017b48 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, (uint8_t *)&hmsc->cbw,
 8012402:	4b09      	ldr	r3, [pc, #36]	; (8012428 <MSC_BOT_SendCSW+0x70>)
 8012404:	7819      	ldrb	r1, [r3, #0]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	f503 7204 	add.w	r2, r3, #528	; 0x210
 801240c:	231f      	movs	r3, #31
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f005 fbbb 	bl	8017b8a <USBD_LL_PrepareReceive>
 8012414:	e000      	b.n	8012418 <MSC_BOT_SendCSW+0x60>
    return;
 8012416:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	53425355 	.word	0x53425355
 8012424:	2000006e 	.word	0x2000006e
 8012428:	2000006f 	.word	0x2000006f

0801242c <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 801242c:	b580      	push	{r7, lr}
 801242e:	b084      	sub	sp, #16
 8012430:	af00      	add	r7, sp, #0
 8012432:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	32b0      	adds	r2, #176	; 0xb0
 801243e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012442:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	2b00      	cmp	r3, #0
 8012448:	d02a      	beq.n	80124a0 <MSC_BOT_Abort+0x74>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 801244a:	68fb      	ldr	r3, [r7, #12]
 801244c:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8012450:	2b00      	cmp	r3, #0
 8012452:	d10e      	bne.n	8012472 <MSC_BOT_Abort+0x46>
      (hmsc->cbw.dDataLength != 0U) &&
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 801245a:	2b00      	cmp	r3, #0
 801245c:	d009      	beq.n	8012472 <MSC_BOT_Abort+0x46>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8012462:	2b00      	cmp	r3, #0
 8012464:	d105      	bne.n	8012472 <MSC_BOT_Abort+0x46>
  {
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8012466:	4b10      	ldr	r3, [pc, #64]	; (80124a8 <MSC_BOT_Abort+0x7c>)
 8012468:	781b      	ldrb	r3, [r3, #0]
 801246a:	4619      	mov	r1, r3
 801246c:	6878      	ldr	r0, [r7, #4]
 801246e:	f005 fae2 	bl	8017a36 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8012472:	4b0e      	ldr	r3, [pc, #56]	; (80124ac <MSC_BOT_Abort+0x80>)
 8012474:	781b      	ldrb	r3, [r3, #0]
 8012476:	4619      	mov	r1, r3
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f005 fadc 	bl	8017a36 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	7a5b      	ldrb	r3, [r3, #9]
 8012482:	2b02      	cmp	r3, #2
 8012484:	d10d      	bne.n	80124a2 <MSC_BOT_Abort+0x76>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 8012486:	4b09      	ldr	r3, [pc, #36]	; (80124ac <MSC_BOT_Abort+0x80>)
 8012488:	781b      	ldrb	r3, [r3, #0]
 801248a:	4619      	mov	r1, r3
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f005 fad2 	bl	8017a36 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 8012492:	4b05      	ldr	r3, [pc, #20]	; (80124a8 <MSC_BOT_Abort+0x7c>)
 8012494:	781b      	ldrb	r3, [r3, #0]
 8012496:	4619      	mov	r1, r3
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f005 facc 	bl	8017a36 <USBD_LL_StallEP>
 801249e:	e000      	b.n	80124a2 <MSC_BOT_Abort+0x76>
    return;
 80124a0:	bf00      	nop
  }
}
 80124a2:	3710      	adds	r7, #16
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}
 80124a8:	2000006f 	.word	0x2000006f
 80124ac:	2000006e 	.word	0x2000006e

080124b0 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b084      	sub	sp, #16
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
 80124b8:	460b      	mov	r3, r1
 80124ba:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	32b0      	adds	r2, #176	; 0xb0
 80124c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124ca:	60fb      	str	r3, [r7, #12]
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc == NULL)
 80124cc:	68fb      	ldr	r3, [r7, #12]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d01d      	beq.n	801250e <MSC_BOT_CplClrFeature+0x5e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	7a5b      	ldrb	r3, [r3, #9]
 80124d6:	2b02      	cmp	r3, #2
 80124d8:	d10c      	bne.n	80124f4 <MSC_BOT_CplClrFeature+0x44>
  {
    (void)USBD_LL_StallEP(pdev, MSCInEpAdd);
 80124da:	4b10      	ldr	r3, [pc, #64]	; (801251c <MSC_BOT_CplClrFeature+0x6c>)
 80124dc:	781b      	ldrb	r3, [r3, #0]
 80124de:	4619      	mov	r1, r3
 80124e0:	6878      	ldr	r0, [r7, #4]
 80124e2:	f005 faa8 	bl	8017a36 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSCOutEpAdd);
 80124e6:	4b0e      	ldr	r3, [pc, #56]	; (8012520 <MSC_BOT_CplClrFeature+0x70>)
 80124e8:	781b      	ldrb	r3, [r3, #0]
 80124ea:	4619      	mov	r1, r3
 80124ec:	6878      	ldr	r0, [r7, #4]
 80124ee:	f005 faa2 	bl	8017a36 <USBD_LL_StallEP>
 80124f2:	e00f      	b.n	8012514 <MSC_BOT_CplClrFeature+0x64>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80124f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	da0a      	bge.n	8012512 <MSC_BOT_CplClrFeature+0x62>
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	7a5b      	ldrb	r3, [r3, #9]
 8012500:	2b01      	cmp	r3, #1
 8012502:	d006      	beq.n	8012512 <MSC_BOT_CplClrFeature+0x62>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8012504:	2101      	movs	r1, #1
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f7ff ff56 	bl	80123b8 <MSC_BOT_SendCSW>
 801250c:	e002      	b.n	8012514 <MSC_BOT_CplClrFeature+0x64>
    return;
 801250e:	bf00      	nop
 8012510:	e000      	b.n	8012514 <MSC_BOT_CplClrFeature+0x64>
  }
  else
  {
    return;
 8012512:	bf00      	nop
  }
}
 8012514:	3710      	adds	r7, #16
 8012516:	46bd      	mov	sp, r7
 8012518:	bd80      	pop	{r7, pc}
 801251a:	bf00      	nop
 801251c:	2000006e 	.word	0x2000006e
 8012520:	2000006f 	.word	0x2000006f

08012524 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b086      	sub	sp, #24
 8012528:	af00      	add	r7, sp, #0
 801252a:	60f8      	str	r0, [r7, #12]
 801252c:	460b      	mov	r3, r1
 801252e:	607a      	str	r2, [r7, #4]
 8012530:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	32b0      	adds	r2, #176	; 0xb0
 801253c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012540:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8012542:	693b      	ldr	r3, [r7, #16]
 8012544:	2b00      	cmp	r3, #0
 8012546:	d102      	bne.n	801254e <SCSI_ProcessCmd+0x2a>
  {
    return -1;
 8012548:	f04f 33ff 	mov.w	r3, #4294967295
 801254c:	e168      	b.n	8012820 <SCSI_ProcessCmd+0x2fc>
  }

  switch (cmd[0])
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	781b      	ldrb	r3, [r3, #0]
 8012552:	2baa      	cmp	r3, #170	; 0xaa
 8012554:	f000 8144 	beq.w	80127e0 <SCSI_ProcessCmd+0x2bc>
 8012558:	2baa      	cmp	r3, #170	; 0xaa
 801255a:	f300 8153 	bgt.w	8012804 <SCSI_ProcessCmd+0x2e0>
 801255e:	2ba8      	cmp	r3, #168	; 0xa8
 8012560:	f000 812c 	beq.w	80127bc <SCSI_ProcessCmd+0x298>
 8012564:	2ba8      	cmp	r3, #168	; 0xa8
 8012566:	f300 814d 	bgt.w	8012804 <SCSI_ProcessCmd+0x2e0>
 801256a:	2b5a      	cmp	r3, #90	; 0x5a
 801256c:	f300 80c0 	bgt.w	80126f0 <SCSI_ProcessCmd+0x1cc>
 8012570:	2b00      	cmp	r3, #0
 8012572:	f2c0 8147 	blt.w	8012804 <SCSI_ProcessCmd+0x2e0>
 8012576:	2b5a      	cmp	r3, #90	; 0x5a
 8012578:	f200 8144 	bhi.w	8012804 <SCSI_ProcessCmd+0x2e0>
 801257c:	a201      	add	r2, pc, #4	; (adr r2, 8012584 <SCSI_ProcessCmd+0x60>)
 801257e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012582:	bf00      	nop
 8012584:	080126f7 	.word	0x080126f7
 8012588:	08012805 	.word	0x08012805
 801258c:	08012805 	.word	0x08012805
 8012590:	08012709 	.word	0x08012709
 8012594:	08012805 	.word	0x08012805
 8012598:	08012805 	.word	0x08012805
 801259c:	08012805 	.word	0x08012805
 80125a0:	08012805 	.word	0x08012805
 80125a4:	08012805 	.word	0x08012805
 80125a8:	08012805 	.word	0x08012805
 80125ac:	08012805 	.word	0x08012805
 80125b0:	08012805 	.word	0x08012805
 80125b4:	08012805 	.word	0x08012805
 80125b8:	08012805 	.word	0x08012805
 80125bc:	08012805 	.word	0x08012805
 80125c0:	08012805 	.word	0x08012805
 80125c4:	08012805 	.word	0x08012805
 80125c8:	08012805 	.word	0x08012805
 80125cc:	0801271b 	.word	0x0801271b
 80125d0:	08012805 	.word	0x08012805
 80125d4:	08012805 	.word	0x08012805
 80125d8:	08012805 	.word	0x08012805
 80125dc:	08012805 	.word	0x08012805
 80125e0:	08012805 	.word	0x08012805
 80125e4:	08012805 	.word	0x08012805
 80125e8:	08012805 	.word	0x08012805
 80125ec:	08012751 	.word	0x08012751
 80125f0:	0801272d 	.word	0x0801272d
 80125f4:	08012805 	.word	0x08012805
 80125f8:	08012805 	.word	0x08012805
 80125fc:	0801273f 	.word	0x0801273f
 8012600:	08012805 	.word	0x08012805
 8012604:	08012805 	.word	0x08012805
 8012608:	08012805 	.word	0x08012805
 801260c:	08012805 	.word	0x08012805
 8012610:	08012775 	.word	0x08012775
 8012614:	08012805 	.word	0x08012805
 8012618:	08012787 	.word	0x08012787
 801261c:	08012805 	.word	0x08012805
 8012620:	08012805 	.word	0x08012805
 8012624:	080127ab 	.word	0x080127ab
 8012628:	08012805 	.word	0x08012805
 801262c:	080127cf 	.word	0x080127cf
 8012630:	08012805 	.word	0x08012805
 8012634:	08012805 	.word	0x08012805
 8012638:	08012805 	.word	0x08012805
 801263c:	08012805 	.word	0x08012805
 8012640:	080127f3 	.word	0x080127f3
 8012644:	08012805 	.word	0x08012805
 8012648:	08012805 	.word	0x08012805
 801264c:	08012805 	.word	0x08012805
 8012650:	08012805 	.word	0x08012805
 8012654:	08012805 	.word	0x08012805
 8012658:	08012805 	.word	0x08012805
 801265c:	08012805 	.word	0x08012805
 8012660:	08012805 	.word	0x08012805
 8012664:	08012805 	.word	0x08012805
 8012668:	08012805 	.word	0x08012805
 801266c:	08012805 	.word	0x08012805
 8012670:	08012805 	.word	0x08012805
 8012674:	08012805 	.word	0x08012805
 8012678:	08012805 	.word	0x08012805
 801267c:	08012805 	.word	0x08012805
 8012680:	08012805 	.word	0x08012805
 8012684:	08012805 	.word	0x08012805
 8012688:	08012805 	.word	0x08012805
 801268c:	08012805 	.word	0x08012805
 8012690:	08012805 	.word	0x08012805
 8012694:	08012805 	.word	0x08012805
 8012698:	08012805 	.word	0x08012805
 801269c:	08012805 	.word	0x08012805
 80126a0:	08012805 	.word	0x08012805
 80126a4:	08012805 	.word	0x08012805
 80126a8:	08012805 	.word	0x08012805
 80126ac:	08012805 	.word	0x08012805
 80126b0:	08012805 	.word	0x08012805
 80126b4:	08012805 	.word	0x08012805
 80126b8:	08012805 	.word	0x08012805
 80126bc:	08012805 	.word	0x08012805
 80126c0:	08012805 	.word	0x08012805
 80126c4:	08012805 	.word	0x08012805
 80126c8:	08012805 	.word	0x08012805
 80126cc:	08012805 	.word	0x08012805
 80126d0:	08012805 	.word	0x08012805
 80126d4:	08012805 	.word	0x08012805
 80126d8:	08012805 	.word	0x08012805
 80126dc:	08012805 	.word	0x08012805
 80126e0:	08012805 	.word	0x08012805
 80126e4:	08012805 	.word	0x08012805
 80126e8:	08012805 	.word	0x08012805
 80126ec:	08012763 	.word	0x08012763
 80126f0:	2b9e      	cmp	r3, #158	; 0x9e
 80126f2:	d051      	beq.n	8012798 <SCSI_ProcessCmd+0x274>
 80126f4:	e086      	b.n	8012804 <SCSI_ProcessCmd+0x2e0>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80126f6:	7afb      	ldrb	r3, [r7, #11]
 80126f8:	687a      	ldr	r2, [r7, #4]
 80126fa:	4619      	mov	r1, r3
 80126fc:	68f8      	ldr	r0, [r7, #12]
 80126fe:	f000 f893 	bl	8012828 <SCSI_TestUnitReady>
 8012702:	4603      	mov	r3, r0
 8012704:	75fb      	strb	r3, [r7, #23]
      break;
 8012706:	e089      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8012708:	7afb      	ldrb	r3, [r7, #11]
 801270a:	687a      	ldr	r2, [r7, #4]
 801270c:	4619      	mov	r1, r3
 801270e:	68f8      	ldr	r0, [r7, #12]
 8012710:	f000 fb6e 	bl	8012df0 <SCSI_RequestSense>
 8012714:	4603      	mov	r3, r0
 8012716:	75fb      	strb	r3, [r7, #23]
      break;
 8012718:	e080      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 801271a:	7afb      	ldrb	r3, [r7, #11]
 801271c:	687a      	ldr	r2, [r7, #4]
 801271e:	4619      	mov	r1, r3
 8012720:	68f8      	ldr	r0, [r7, #12]
 8012722:	f000 f8db 	bl	80128dc <SCSI_Inquiry>
 8012726:	4603      	mov	r3, r0
 8012728:	75fb      	strb	r3, [r7, #23]
      break;
 801272a:	e077      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 801272c:	7afb      	ldrb	r3, [r7, #11]
 801272e:	687a      	ldr	r2, [r7, #4]
 8012730:	4619      	mov	r1, r3
 8012732:	68f8      	ldr	r0, [r7, #12]
 8012734:	f000 fc2a 	bl	8012f8c <SCSI_StartStopUnit>
 8012738:	4603      	mov	r3, r0
 801273a:	75fb      	strb	r3, [r7, #23]
      break;
 801273c:	e06e      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 801273e:	7afb      	ldrb	r3, [r7, #11]
 8012740:	687a      	ldr	r2, [r7, #4]
 8012742:	4619      	mov	r1, r3
 8012744:	68f8      	ldr	r0, [r7, #12]
 8012746:	f000 fc76 	bl	8013036 <SCSI_AllowPreventRemovable>
 801274a:	4603      	mov	r3, r0
 801274c:	75fb      	strb	r3, [r7, #23]
      break;
 801274e:	e065      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8012750:	7afb      	ldrb	r3, [r7, #11]
 8012752:	687a      	ldr	r2, [r7, #4]
 8012754:	4619      	mov	r1, r3
 8012756:	68f8      	ldr	r0, [r7, #12]
 8012758:	f000 faea 	bl	8012d30 <SCSI_ModeSense6>
 801275c:	4603      	mov	r3, r0
 801275e:	75fb      	strb	r3, [r7, #23]
      break;
 8012760:	e05c      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8012762:	7afb      	ldrb	r3, [r7, #11]
 8012764:	687a      	ldr	r2, [r7, #4]
 8012766:	4619      	mov	r1, r3
 8012768:	68f8      	ldr	r0, [r7, #12]
 801276a:	f000 fb11 	bl	8012d90 <SCSI_ModeSense10>
 801276e:	4603      	mov	r3, r0
 8012770:	75fb      	strb	r3, [r7, #23]
      break;
 8012772:	e053      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8012774:	7afb      	ldrb	r3, [r7, #11]
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	4619      	mov	r1, r3
 801277a:	68f8      	ldr	r0, [r7, #12]
 801277c:	f000 fa5d 	bl	8012c3a <SCSI_ReadFormatCapacity>
 8012780:	4603      	mov	r3, r0
 8012782:	75fb      	strb	r3, [r7, #23]
      break;
 8012784:	e04a      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8012786:	7afb      	ldrb	r3, [r7, #11]
 8012788:	687a      	ldr	r2, [r7, #4]
 801278a:	4619      	mov	r1, r3
 801278c:	68f8      	ldr	r0, [r7, #12]
 801278e:	f000 f923 	bl	80129d8 <SCSI_ReadCapacity10>
 8012792:	4603      	mov	r3, r0
 8012794:	75fb      	strb	r3, [r7, #23]
      break;
 8012796:	e041      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8012798:	7afb      	ldrb	r3, [r7, #11]
 801279a:	687a      	ldr	r2, [r7, #4]
 801279c:	4619      	mov	r1, r3
 801279e:	68f8      	ldr	r0, [r7, #12]
 80127a0:	f000 f998 	bl	8012ad4 <SCSI_ReadCapacity16>
 80127a4:	4603      	mov	r3, r0
 80127a6:	75fb      	strb	r3, [r7, #23]
      break;
 80127a8:	e038      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 80127aa:	7afb      	ldrb	r3, [r7, #11]
 80127ac:	687a      	ldr	r2, [r7, #4]
 80127ae:	4619      	mov	r1, r3
 80127b0:	68f8      	ldr	r0, [r7, #12]
 80127b2:	f000 fc6d 	bl	8013090 <SCSI_Read10>
 80127b6:	4603      	mov	r3, r0
 80127b8:	75fb      	strb	r3, [r7, #23]
      break;
 80127ba:	e02f      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 80127bc:	7afb      	ldrb	r3, [r7, #11]
 80127be:	687a      	ldr	r2, [r7, #4]
 80127c0:	4619      	mov	r1, r3
 80127c2:	68f8      	ldr	r0, [r7, #12]
 80127c4:	f000 fd0e 	bl	80131e4 <SCSI_Read12>
 80127c8:	4603      	mov	r3, r0
 80127ca:	75fb      	strb	r3, [r7, #23]
      break;
 80127cc:	e026      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80127ce:	7afb      	ldrb	r3, [r7, #11]
 80127d0:	687a      	ldr	r2, [r7, #4]
 80127d2:	4619      	mov	r1, r3
 80127d4:	68f8      	ldr	r0, [r7, #12]
 80127d6:	f000 fdb9 	bl	801334c <SCSI_Write10>
 80127da:	4603      	mov	r3, r0
 80127dc:	75fb      	strb	r3, [r7, #23]
      break;
 80127de:	e01d      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80127e0:	7afb      	ldrb	r3, [r7, #11]
 80127e2:	687a      	ldr	r2, [r7, #4]
 80127e4:	4619      	mov	r1, r3
 80127e6:	68f8      	ldr	r0, [r7, #12]
 80127e8:	f000 fe86 	bl	80134f8 <SCSI_Write12>
 80127ec:	4603      	mov	r3, r0
 80127ee:	75fb      	strb	r3, [r7, #23]
      break;
 80127f0:	e014      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80127f2:	7afb      	ldrb	r3, [r7, #11]
 80127f4:	687a      	ldr	r2, [r7, #4]
 80127f6:	4619      	mov	r1, r3
 80127f8:	68f8      	ldr	r0, [r7, #12]
 80127fa:	f000 ff63 	bl	80136c4 <SCSI_Verify10>
 80127fe:	4603      	mov	r3, r0
 8012800:	75fb      	strb	r3, [r7, #23]
      break;
 8012802:	e00b      	b.n	801281c <SCSI_ProcessCmd+0x2f8>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8012804:	7af9      	ldrb	r1, [r7, #11]
 8012806:	2320      	movs	r3, #32
 8012808:	2205      	movs	r2, #5
 801280a:	68f8      	ldr	r0, [r7, #12]
 801280c:	f000 fb73 	bl	8012ef6 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8012810:	693b      	ldr	r3, [r7, #16]
 8012812:	2202      	movs	r2, #2
 8012814:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8012816:	23ff      	movs	r3, #255	; 0xff
 8012818:	75fb      	strb	r3, [r7, #23]
      break;
 801281a:	bf00      	nop
  }

  return ret;
 801281c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012820:	4618      	mov	r0, r3
 8012822:	3718      	adds	r7, #24
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}

08012828 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b086      	sub	sp, #24
 801282c:	af00      	add	r7, sp, #0
 801282e:	60f8      	str	r0, [r7, #12]
 8012830:	460b      	mov	r3, r1
 8012832:	607a      	str	r2, [r7, #4]
 8012834:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	32b0      	adds	r2, #176	; 0xb0
 8012840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012844:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012846:	697b      	ldr	r3, [r7, #20]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d102      	bne.n	8012852 <SCSI_TestUnitReady+0x2a>
  {
    return -1;
 801284c:	f04f 33ff 	mov.w	r3, #4294967295
 8012850:	e03f      	b.n	80128d2 <SCSI_TestUnitReady+0xaa>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8012852:	697b      	ldr	r3, [r7, #20]
 8012854:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012858:	2b00      	cmp	r3, #0
 801285a:	d00a      	beq.n	8012872 <SCSI_TestUnitReady+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801285c:	697b      	ldr	r3, [r7, #20]
 801285e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012862:	2320      	movs	r3, #32
 8012864:	2205      	movs	r2, #5
 8012866:	68f8      	ldr	r0, [r7, #12]
 8012868:	f000 fb45 	bl	8012ef6 <SCSI_SenseCode>

    return -1;
 801286c:	f04f 33ff 	mov.w	r3, #4294967295
 8012870:	e02f      	b.n	80128d2 <SCSI_TestUnitReady+0xaa>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012878:	2b02      	cmp	r3, #2
 801287a:	d10b      	bne.n	8012894 <SCSI_TestUnitReady+0x6c>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801287c:	7af9      	ldrb	r1, [r7, #11]
 801287e:	233a      	movs	r3, #58	; 0x3a
 8012880:	2202      	movs	r2, #2
 8012882:	68f8      	ldr	r0, [r7, #12]
 8012884:	f000 fb37 	bl	8012ef6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	2205      	movs	r2, #5
 801288c:	721a      	strb	r2, [r3, #8]
    return -1;
 801288e:	f04f 33ff 	mov.w	r3, #4294967295
 8012892:	e01e      	b.n	80128d2 <SCSI_TestUnitReady+0xaa>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801289a:	68fa      	ldr	r2, [r7, #12]
 801289c:	33b0      	adds	r3, #176	; 0xb0
 801289e:	009b      	lsls	r3, r3, #2
 80128a0:	4413      	add	r3, r2
 80128a2:	685b      	ldr	r3, [r3, #4]
 80128a4:	689b      	ldr	r3, [r3, #8]
 80128a6:	7afa      	ldrb	r2, [r7, #11]
 80128a8:	4610      	mov	r0, r2
 80128aa:	4798      	blx	r3
 80128ac:	4603      	mov	r3, r0
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d00b      	beq.n	80128ca <SCSI_TestUnitReady+0xa2>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80128b2:	7af9      	ldrb	r1, [r7, #11]
 80128b4:	233a      	movs	r3, #58	; 0x3a
 80128b6:	2202      	movs	r2, #2
 80128b8:	68f8      	ldr	r0, [r7, #12]
 80128ba:	f000 fb1c 	bl	8012ef6 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	2205      	movs	r2, #5
 80128c2:	721a      	strb	r2, [r3, #8]

    return -1;
 80128c4:	f04f 33ff 	mov.w	r3, #4294967295
 80128c8:	e003      	b.n	80128d2 <SCSI_TestUnitReady+0xaa>
  }
  hmsc->bot_data_length = 0U;
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	2200      	movs	r2, #0
 80128ce:	60da      	str	r2, [r3, #12]

  return 0;
 80128d0:	2300      	movs	r3, #0
}
 80128d2:	4618      	mov	r0, r3
 80128d4:	3718      	adds	r7, #24
 80128d6:	46bd      	mov	sp, r7
 80128d8:	bd80      	pop	{r7, pc}
	...

080128dc <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b088      	sub	sp, #32
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	460b      	mov	r3, r1
 80128e6:	607a      	str	r2, [r7, #4]
 80128e8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	32b0      	adds	r2, #176	; 0xb0
 80128f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128f8:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80128fa:	69bb      	ldr	r3, [r7, #24]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d102      	bne.n	8012906 <SCSI_Inquiry+0x2a>
  {
    return -1;
 8012900:	f04f 33ff 	mov.w	r3, #4294967295
 8012904:	e05f      	b.n	80129c6 <SCSI_Inquiry+0xea>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012906:	69bb      	ldr	r3, [r7, #24]
 8012908:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801290c:	2b00      	cmp	r3, #0
 801290e:	d10a      	bne.n	8012926 <SCSI_Inquiry+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012910:	69bb      	ldr	r3, [r7, #24]
 8012912:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012916:	2320      	movs	r3, #32
 8012918:	2205      	movs	r2, #5
 801291a:	68f8      	ldr	r0, [r7, #12]
 801291c:	f000 faeb 	bl	8012ef6 <SCSI_SenseCode>
    return -1;
 8012920:	f04f 33ff 	mov.w	r3, #4294967295
 8012924:	e04f      	b.n	80129c6 <SCSI_Inquiry+0xea>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	3301      	adds	r3, #1
 801292a:	781b      	ldrb	r3, [r3, #0]
 801292c:	f003 0301 	and.w	r3, r3, #1
 8012930:	2b00      	cmp	r3, #0
 8012932:	d020      	beq.n	8012976 <SCSI_Inquiry+0x9a>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	3302      	adds	r3, #2
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d105      	bne.n	801294a <SCSI_Inquiry+0x6e>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801293e:	2206      	movs	r2, #6
 8012940:	4923      	ldr	r1, [pc, #140]	; (80129d0 <SCSI_Inquiry+0xf4>)
 8012942:	69b8      	ldr	r0, [r7, #24]
 8012944:	f001 f844 	bl	80139d0 <SCSI_UpdateBotData>
 8012948:	e03c      	b.n	80129c4 <SCSI_Inquiry+0xe8>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	3302      	adds	r3, #2
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	2b80      	cmp	r3, #128	; 0x80
 8012952:	d105      	bne.n	8012960 <SCSI_Inquiry+0x84>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8012954:	2208      	movs	r2, #8
 8012956:	491f      	ldr	r1, [pc, #124]	; (80129d4 <SCSI_Inquiry+0xf8>)
 8012958:	69b8      	ldr	r0, [r7, #24]
 801295a:	f001 f839 	bl	80139d0 <SCSI_UpdateBotData>
 801295e:	e031      	b.n	80129c4 <SCSI_Inquiry+0xe8>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8012960:	69bb      	ldr	r3, [r7, #24]
 8012962:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012966:	2324      	movs	r3, #36	; 0x24
 8012968:	2205      	movs	r2, #5
 801296a:	68f8      	ldr	r0, [r7, #12]
 801296c:	f000 fac3 	bl	8012ef6 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8012970:	f04f 33ff 	mov.w	r3, #4294967295
 8012974:	e027      	b.n	80129c6 <SCSI_Inquiry+0xea>
    }
  }
  else
  {

    pPage = (uint8_t *) & ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8012976:	68fb      	ldr	r3, [r7, #12]
 8012978:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801297c:	68fa      	ldr	r2, [r7, #12]
 801297e:	33b0      	adds	r3, #176	; 0xb0
 8012980:	009b      	lsls	r3, r3, #2
 8012982:	4413      	add	r3, r2
 8012984:	685b      	ldr	r3, [r3, #4]
 8012986:	69d9      	ldr	r1, [r3, #28]
 8012988:	7afa      	ldrb	r2, [r7, #11]
 801298a:	4613      	mov	r3, r2
 801298c:	00db      	lsls	r3, r3, #3
 801298e:	4413      	add	r3, r2
 8012990:	009b      	lsls	r3, r3, #2
 8012992:	440b      	add	r3, r1
 8012994:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8012996:	697b      	ldr	r3, [r7, #20]
 8012998:	3304      	adds	r3, #4
 801299a:	781b      	ldrb	r3, [r3, #0]
 801299c:	b29b      	uxth	r3, r3
 801299e:	3305      	adds	r3, #5
 80129a0:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	3304      	adds	r3, #4
 80129a6:	781b      	ldrb	r3, [r3, #0]
 80129a8:	b29b      	uxth	r3, r3
 80129aa:	8bfa      	ldrh	r2, [r7, #30]
 80129ac:	429a      	cmp	r2, r3
 80129ae:	d303      	bcc.n	80129b8 <SCSI_Inquiry+0xdc>
    {
      len = params[4];
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	3304      	adds	r3, #4
 80129b4:	781b      	ldrb	r3, [r3, #0]
 80129b6:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80129b8:	8bfb      	ldrh	r3, [r7, #30]
 80129ba:	461a      	mov	r2, r3
 80129bc:	6979      	ldr	r1, [r7, #20]
 80129be:	69b8      	ldr	r0, [r7, #24]
 80129c0:	f001 f806 	bl	80139d0 <SCSI_UpdateBotData>
  }

  return 0;
 80129c4:	2300      	movs	r3, #0
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3720      	adds	r7, #32
 80129ca:	46bd      	mov	sp, r7
 80129cc:	bd80      	pop	{r7, pc}
 80129ce:	bf00      	nop
 80129d0:	20000070 	.word	0x20000070
 80129d4:	20000078 	.word	0x20000078

080129d8 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b086      	sub	sp, #24
 80129dc:	af00      	add	r7, sp, #0
 80129de:	60f8      	str	r0, [r7, #12]
 80129e0:	460b      	mov	r3, r1
 80129e2:	607a      	str	r2, [r7, #4]
 80129e4:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80129e6:	68fb      	ldr	r3, [r7, #12]
 80129e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	32b0      	adds	r2, #176	; 0xb0
 80129f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129f4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80129f6:	697b      	ldr	r3, [r7, #20]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d102      	bne.n	8012a02 <SCSI_ReadCapacity10+0x2a>
  {
    return -1;
 80129fc:	f04f 33ff 	mov.w	r3, #4294967295
 8012a00:	e064      	b.n	8012acc <SCSI_ReadCapacity10+0xf4>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012a02:	68fb      	ldr	r3, [r7, #12]
 8012a04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012a08:	68fa      	ldr	r2, [r7, #12]
 8012a0a:	33b0      	adds	r3, #176	; 0xb0
 8012a0c:	009b      	lsls	r3, r3, #2
 8012a0e:	4413      	add	r3, r2
 8012a10:	685b      	ldr	r3, [r3, #4]
 8012a12:	685b      	ldr	r3, [r3, #4]
 8012a14:	697a      	ldr	r2, [r7, #20]
 8012a16:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8012a1a:	697a      	ldr	r2, [r7, #20]
 8012a1c:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8012a20:	7af8      	ldrb	r0, [r7, #11]
 8012a22:	4798      	blx	r3
 8012a24:	4603      	mov	r3, r0
 8012a26:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012a28:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d104      	bne.n	8012a3a <SCSI_ReadCapacity10+0x62>
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012a36:	2b02      	cmp	r3, #2
 8012a38:	d108      	bne.n	8012a4c <SCSI_ReadCapacity10+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012a3a:	7af9      	ldrb	r1, [r7, #11]
 8012a3c:	233a      	movs	r3, #58	; 0x3a
 8012a3e:	2202      	movs	r2, #2
 8012a40:	68f8      	ldr	r0, [r7, #12]
 8012a42:	f000 fa58 	bl	8012ef6 <SCSI_SenseCode>
    return -1;
 8012a46:	f04f 33ff 	mov.w	r3, #4294967295
 8012a4a:	e03f      	b.n	8012acc <SCSI_ReadCapacity10+0xf4>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012a52:	3b01      	subs	r3, #1
 8012a54:	0e1b      	lsrs	r3, r3, #24
 8012a56:	b2da      	uxtb	r2, r3
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012a62:	3b01      	subs	r3, #1
 8012a64:	0c1b      	lsrs	r3, r3, #16
 8012a66:	b2da      	uxtb	r2, r3
 8012a68:	697b      	ldr	r3, [r7, #20]
 8012a6a:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012a72:	3b01      	subs	r3, #1
 8012a74:	0a1b      	lsrs	r3, r3, #8
 8012a76:	b2da      	uxtb	r2, r3
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	3b01      	subs	r3, #1
 8012a86:	b2da      	uxtb	r2, r3
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012a8c:	697b      	ldr	r3, [r7, #20]
 8012a8e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012a92:	161b      	asrs	r3, r3, #24
 8012a94:	b2da      	uxtb	r2, r3
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012a9a:	697b      	ldr	r3, [r7, #20]
 8012a9c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012aa0:	141b      	asrs	r3, r3, #16
 8012aa2:	b2da      	uxtb	r2, r3
 8012aa4:	697b      	ldr	r3, [r7, #20]
 8012aa6:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012aae:	0a1b      	lsrs	r3, r3, #8
 8012ab0:	b29b      	uxth	r3, r3
 8012ab2:	b2da      	uxtb	r2, r3
 8012ab4:	697b      	ldr	r3, [r7, #20]
 8012ab6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012abe:	b2da      	uxtb	r2, r3
 8012ac0:	697b      	ldr	r3, [r7, #20]
 8012ac2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	2208      	movs	r2, #8
 8012ac8:	60da      	str	r2, [r3, #12]

  return 0;
 8012aca:	2300      	movs	r3, #0

}
 8012acc:	4618      	mov	r0, r3
 8012ace:	3718      	adds	r7, #24
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b088      	sub	sp, #32
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	460b      	mov	r3, r1
 8012ade:	607a      	str	r2, [r7, #4]
 8012ae0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	32b0      	adds	r2, #176	; 0xb0
 8012aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012af0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012af2:	69bb      	ldr	r3, [r7, #24]
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d102      	bne.n	8012afe <SCSI_ReadCapacity16+0x2a>
  {
    return -1;
 8012af8:	f04f 33ff 	mov.w	r3, #4294967295
 8012afc:	e099      	b.n	8012c32 <SCSI_ReadCapacity16+0x15e>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012b04:	68fa      	ldr	r2, [r7, #12]
 8012b06:	33b0      	adds	r3, #176	; 0xb0
 8012b08:	009b      	lsls	r3, r3, #2
 8012b0a:	4413      	add	r3, r2
 8012b0c:	685b      	ldr	r3, [r3, #4]
 8012b0e:	685b      	ldr	r3, [r3, #4]
 8012b10:	69ba      	ldr	r2, [r7, #24]
 8012b12:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8012b16:	69ba      	ldr	r2, [r7, #24]
 8012b18:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8012b1c:	7af8      	ldrb	r0, [r7, #11]
 8012b1e:	4798      	blx	r3
 8012b20:	4603      	mov	r3, r0
 8012b22:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d104      	bne.n	8012b36 <SCSI_ReadCapacity16+0x62>
 8012b2c:	69bb      	ldr	r3, [r7, #24]
 8012b2e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012b32:	2b02      	cmp	r3, #2
 8012b34:	d108      	bne.n	8012b48 <SCSI_ReadCapacity16+0x74>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012b36:	7af9      	ldrb	r1, [r7, #11]
 8012b38:	233a      	movs	r3, #58	; 0x3a
 8012b3a:	2202      	movs	r2, #2
 8012b3c:	68f8      	ldr	r0, [r7, #12]
 8012b3e:	f000 f9da 	bl	8012ef6 <SCSI_SenseCode>
    return -1;
 8012b42:	f04f 33ff 	mov.w	r3, #4294967295
 8012b46:	e074      	b.n	8012c32 <SCSI_ReadCapacity16+0x15e>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	330a      	adds	r3, #10
 8012b4c:	781b      	ldrb	r3, [r3, #0]
 8012b4e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	330b      	adds	r3, #11
 8012b54:	781b      	ldrb	r3, [r3, #0]
 8012b56:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012b58:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	330c      	adds	r3, #12
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012b62:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012b64:	687a      	ldr	r2, [r7, #4]
 8012b66:	320d      	adds	r2, #13
 8012b68:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012b6a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012b6c:	69bb      	ldr	r3, [r7, #24]
 8012b6e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012b70:	2300      	movs	r3, #0
 8012b72:	77fb      	strb	r3, [r7, #31]
 8012b74:	e007      	b.n	8012b86 <SCSI_ReadCapacity16+0xb2>
  {
    hmsc->bot_data[idx] = 0U;
 8012b76:	7ffb      	ldrb	r3, [r7, #31]
 8012b78:	69ba      	ldr	r2, [r7, #24]
 8012b7a:	4413      	add	r3, r2
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8012b80:	7ffb      	ldrb	r3, [r7, #31]
 8012b82:	3301      	adds	r3, #1
 8012b84:	77fb      	strb	r3, [r7, #31]
 8012b86:	7ffa      	ldrb	r2, [r7, #31]
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d3f2      	bcc.n	8012b76 <SCSI_ReadCapacity16+0xa2>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012b96:	3b01      	subs	r3, #1
 8012b98:	0e1b      	lsrs	r3, r3, #24
 8012b9a:	b2da      	uxtb	r2, r3
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8012ba0:	69bb      	ldr	r3, [r7, #24]
 8012ba2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	0c1b      	lsrs	r3, r3, #16
 8012baa:	b2da      	uxtb	r2, r3
 8012bac:	69bb      	ldr	r3, [r7, #24]
 8012bae:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8012bb0:	69bb      	ldr	r3, [r7, #24]
 8012bb2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012bb6:	3b01      	subs	r3, #1
 8012bb8:	0a1b      	lsrs	r3, r3, #8
 8012bba:	b2da      	uxtb	r2, r3
 8012bbc:	69bb      	ldr	r3, [r7, #24]
 8012bbe:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8012bc0:	69bb      	ldr	r3, [r7, #24]
 8012bc2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8012bc6:	b2db      	uxtb	r3, r3
 8012bc8:	3b01      	subs	r3, #1
 8012bca:	b2da      	uxtb	r2, r3
 8012bcc:	69bb      	ldr	r3, [r7, #24]
 8012bce:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012bd6:	161b      	asrs	r3, r3, #24
 8012bd8:	b2da      	uxtb	r2, r3
 8012bda:	69bb      	ldr	r3, [r7, #24]
 8012bdc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8012bde:	69bb      	ldr	r3, [r7, #24]
 8012be0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012be4:	141b      	asrs	r3, r3, #16
 8012be6:	b2da      	uxtb	r2, r3
 8012be8:	69bb      	ldr	r3, [r7, #24]
 8012bea:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8012bec:	69bb      	ldr	r3, [r7, #24]
 8012bee:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012bf2:	0a1b      	lsrs	r3, r3, #8
 8012bf4:	b29b      	uxth	r3, r3
 8012bf6:	b2da      	uxtb	r2, r3
 8012bf8:	69bb      	ldr	r3, [r7, #24]
 8012bfa:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8012bfc:	69bb      	ldr	r3, [r7, #24]
 8012bfe:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8012c02:	b2da      	uxtb	r2, r3
 8012c04:	69bb      	ldr	r3, [r7, #24]
 8012c06:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	330a      	adds	r3, #10
 8012c0c:	781b      	ldrb	r3, [r3, #0]
 8012c0e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	330b      	adds	r3, #11
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012c18:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	330c      	adds	r3, #12
 8012c1e:	781b      	ldrb	r3, [r3, #0]
 8012c20:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8012c22:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8012c24:	687a      	ldr	r2, [r7, #4]
 8012c26:	320d      	adds	r2, #13
 8012c28:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8012c2a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8012c2c:	69bb      	ldr	r3, [r7, #24]
 8012c2e:	60da      	str	r2, [r3, #12]

  return 0;
 8012c30:	2300      	movs	r3, #0
}
 8012c32:	4618      	mov	r0, r3
 8012c34:	3720      	adds	r7, #32
 8012c36:	46bd      	mov	sp, r7
 8012c38:	bd80      	pop	{r7, pc}

08012c3a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012c3a:	b580      	push	{r7, lr}
 8012c3c:	b088      	sub	sp, #32
 8012c3e:	af00      	add	r7, sp, #0
 8012c40:	60f8      	str	r0, [r7, #12]
 8012c42:	460b      	mov	r3, r1
 8012c44:	607a      	str	r2, [r7, #4]
 8012c46:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	32b0      	adds	r2, #176	; 0xb0
 8012c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c56:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8012c58:	69bb      	ldr	r3, [r7, #24]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d102      	bne.n	8012c64 <SCSI_ReadFormatCapacity+0x2a>
  {
    return -1;
 8012c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c62:	e061      	b.n	8012d28 <SCSI_ReadFormatCapacity+0xee>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->GetCapacity(lun, &blk_nbr, &blk_size);
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8012c6a:	68fa      	ldr	r2, [r7, #12]
 8012c6c:	33b0      	adds	r3, #176	; 0xb0
 8012c6e:	009b      	lsls	r3, r3, #2
 8012c70:	4413      	add	r3, r2
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	f107 0214 	add.w	r2, r7, #20
 8012c7a:	f107 0110 	add.w	r1, r7, #16
 8012c7e:	7af8      	ldrb	r0, [r7, #11]
 8012c80:	4798      	blx	r3
 8012c82:	4603      	mov	r3, r0
 8012c84:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8012c86:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d104      	bne.n	8012c98 <SCSI_ReadFormatCapacity+0x5e>
 8012c8e:	69bb      	ldr	r3, [r7, #24]
 8012c90:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012c94:	2b02      	cmp	r3, #2
 8012c96:	d108      	bne.n	8012caa <SCSI_ReadFormatCapacity+0x70>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8012c98:	7af9      	ldrb	r1, [r7, #11]
 8012c9a:	233a      	movs	r3, #58	; 0x3a
 8012c9c:	2202      	movs	r2, #2
 8012c9e:	68f8      	ldr	r0, [r7, #12]
 8012ca0:	f000 f929 	bl	8012ef6 <SCSI_SenseCode>
    return -1;
 8012ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ca8:	e03e      	b.n	8012d28 <SCSI_ReadFormatCapacity+0xee>
  }

  for (i = 0U; i < 12U ; i++)
 8012caa:	2300      	movs	r3, #0
 8012cac:	83fb      	strh	r3, [r7, #30]
 8012cae:	e007      	b.n	8012cc0 <SCSI_ReadFormatCapacity+0x86>
  {
    hmsc->bot_data[i] = 0U;
 8012cb0:	8bfb      	ldrh	r3, [r7, #30]
 8012cb2:	69ba      	ldr	r2, [r7, #24]
 8012cb4:	4413      	add	r3, r2
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8012cba:	8bfb      	ldrh	r3, [r7, #30]
 8012cbc:	3301      	adds	r3, #1
 8012cbe:	83fb      	strh	r3, [r7, #30]
 8012cc0:	8bfb      	ldrh	r3, [r7, #30]
 8012cc2:	2b0b      	cmp	r3, #11
 8012cc4:	d9f4      	bls.n	8012cb0 <SCSI_ReadFormatCapacity+0x76>
  }

  hmsc->bot_data[3] = 0x08U;
 8012cc6:	69bb      	ldr	r3, [r7, #24]
 8012cc8:	2208      	movs	r2, #8
 8012cca:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8012ccc:	693b      	ldr	r3, [r7, #16]
 8012cce:	3b01      	subs	r3, #1
 8012cd0:	0e1b      	lsrs	r3, r3, #24
 8012cd2:	b2da      	uxtb	r2, r3
 8012cd4:	69bb      	ldr	r3, [r7, #24]
 8012cd6:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	3b01      	subs	r3, #1
 8012cdc:	0c1b      	lsrs	r3, r3, #16
 8012cde:	b2da      	uxtb	r2, r3
 8012ce0:	69bb      	ldr	r3, [r7, #24]
 8012ce2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8012ce4:	693b      	ldr	r3, [r7, #16]
 8012ce6:	3b01      	subs	r3, #1
 8012ce8:	0a1b      	lsrs	r3, r3, #8
 8012cea:	b2da      	uxtb	r2, r3
 8012cec:	69bb      	ldr	r3, [r7, #24]
 8012cee:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8012cf0:	693b      	ldr	r3, [r7, #16]
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	b2da      	uxtb	r2, r3
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8012cfc:	69bb      	ldr	r3, [r7, #24]
 8012cfe:	2202      	movs	r2, #2
 8012d00:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8012d02:	8abb      	ldrh	r3, [r7, #20]
 8012d04:	141b      	asrs	r3, r3, #16
 8012d06:	b2da      	uxtb	r2, r3
 8012d08:	69bb      	ldr	r3, [r7, #24]
 8012d0a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8012d0c:	8abb      	ldrh	r3, [r7, #20]
 8012d0e:	0a1b      	lsrs	r3, r3, #8
 8012d10:	b29b      	uxth	r3, r3
 8012d12:	b2da      	uxtb	r2, r3
 8012d14:	69bb      	ldr	r3, [r7, #24]
 8012d16:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8012d18:	8abb      	ldrh	r3, [r7, #20]
 8012d1a:	b2da      	uxtb	r2, r3
 8012d1c:	69bb      	ldr	r3, [r7, #24]
 8012d1e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8012d20:	69bb      	ldr	r3, [r7, #24]
 8012d22:	220c      	movs	r2, #12
 8012d24:	60da      	str	r2, [r3, #12]

  return 0;
 8012d26:	2300      	movs	r3, #0
}
 8012d28:	4618      	mov	r0, r3
 8012d2a:	3720      	adds	r7, #32
 8012d2c:	46bd      	mov	sp, r7
 8012d2e:	bd80      	pop	{r7, pc}

08012d30 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b086      	sub	sp, #24
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	60f8      	str	r0, [r7, #12]
 8012d38:	460b      	mov	r3, r1
 8012d3a:	607a      	str	r2, [r7, #4]
 8012d3c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	32b0      	adds	r2, #176	; 0xb0
 8012d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d4c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8012d4e:	2317      	movs	r3, #23
 8012d50:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012d52:	693b      	ldr	r3, [r7, #16]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d102      	bne.n	8012d5e <SCSI_ModeSense6+0x2e>
  {
    return -1;
 8012d58:	f04f 33ff 	mov.w	r3, #4294967295
 8012d5c:	e011      	b.n	8012d82 <SCSI_ModeSense6+0x52>
  }

  if (params[4] <= len)
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	3304      	adds	r3, #4
 8012d62:	781b      	ldrb	r3, [r3, #0]
 8012d64:	b29b      	uxth	r3, r3
 8012d66:	8afa      	ldrh	r2, [r7, #22]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d303      	bcc.n	8012d74 <SCSI_ModeSense6+0x44>
  {
    len = params[4];
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	3304      	adds	r3, #4
 8012d70:	781b      	ldrb	r3, [r3, #0]
 8012d72:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8012d74:	8afb      	ldrh	r3, [r7, #22]
 8012d76:	461a      	mov	r2, r3
 8012d78:	4904      	ldr	r1, [pc, #16]	; (8012d8c <SCSI_ModeSense6+0x5c>)
 8012d7a:	6938      	ldr	r0, [r7, #16]
 8012d7c:	f000 fe28 	bl	80139d0 <SCSI_UpdateBotData>

  return 0;
 8012d80:	2300      	movs	r3, #0
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	3718      	adds	r7, #24
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}
 8012d8a:	bf00      	nop
 8012d8c:	20000080 	.word	0x20000080

08012d90 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b086      	sub	sp, #24
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	60f8      	str	r0, [r7, #12]
 8012d98:	460b      	mov	r3, r1
 8012d9a:	607a      	str	r2, [r7, #4]
 8012d9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	32b0      	adds	r2, #176	; 0xb0
 8012da8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dac:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8012dae:	231b      	movs	r3, #27
 8012db0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8012db2:	693b      	ldr	r3, [r7, #16]
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d102      	bne.n	8012dbe <SCSI_ModeSense10+0x2e>
  {
    return -1;
 8012db8:	f04f 33ff 	mov.w	r3, #4294967295
 8012dbc:	e011      	b.n	8012de2 <SCSI_ModeSense10+0x52>
  }

  if (params[8] <= len)
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	3308      	adds	r3, #8
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	b29b      	uxth	r3, r3
 8012dc6:	8afa      	ldrh	r2, [r7, #22]
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d303      	bcc.n	8012dd4 <SCSI_ModeSense10+0x44>
  {
    len = params[8];
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	3308      	adds	r3, #8
 8012dd0:	781b      	ldrb	r3, [r3, #0]
 8012dd2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8012dd4:	8afb      	ldrh	r3, [r7, #22]
 8012dd6:	461a      	mov	r2, r3
 8012dd8:	4904      	ldr	r1, [pc, #16]	; (8012dec <SCSI_ModeSense10+0x5c>)
 8012dda:	6938      	ldr	r0, [r7, #16]
 8012ddc:	f000 fdf8 	bl	80139d0 <SCSI_UpdateBotData>

  return 0;
 8012de0:	2300      	movs	r3, #0
}
 8012de2:	4618      	mov	r0, r3
 8012de4:	3718      	adds	r7, #24
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
 8012dea:	bf00      	nop
 8012dec:	20000098 	.word	0x20000098

08012df0 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b086      	sub	sp, #24
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	460b      	mov	r3, r1
 8012dfa:	607a      	str	r2, [r7, #4]
 8012dfc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	32b0      	adds	r2, #176	; 0xb0
 8012e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e0c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8012e0e:	693b      	ldr	r3, [r7, #16]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d102      	bne.n	8012e1a <SCSI_RequestSense+0x2a>
  {
    return -1;
 8012e14:	f04f 33ff 	mov.w	r3, #4294967295
 8012e18:	e069      	b.n	8012eee <SCSI_RequestSense+0xfe>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	d10a      	bne.n	8012e3a <SCSI_RequestSense+0x4a>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8012e24:	693b      	ldr	r3, [r7, #16]
 8012e26:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8012e2a:	2320      	movs	r3, #32
 8012e2c:	2205      	movs	r2, #5
 8012e2e:	68f8      	ldr	r0, [r7, #12]
 8012e30:	f000 f861 	bl	8012ef6 <SCSI_SenseCode>
    return -1;
 8012e34:	f04f 33ff 	mov.w	r3, #4294967295
 8012e38:	e059      	b.n	8012eee <SCSI_RequestSense+0xfe>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	75fb      	strb	r3, [r7, #23]
 8012e3e:	e007      	b.n	8012e50 <SCSI_RequestSense+0x60>
  {
    hmsc->bot_data[i] = 0U;
 8012e40:	7dfb      	ldrb	r3, [r7, #23]
 8012e42:	693a      	ldr	r2, [r7, #16]
 8012e44:	4413      	add	r3, r2
 8012e46:	2200      	movs	r2, #0
 8012e48:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8012e4a:	7dfb      	ldrb	r3, [r7, #23]
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	75fb      	strb	r3, [r7, #23]
 8012e50:	7dfb      	ldrb	r3, [r7, #23]
 8012e52:	2b11      	cmp	r3, #17
 8012e54:	d9f4      	bls.n	8012e40 <SCSI_RequestSense+0x50>
  }

  hmsc->bot_data[0] = 0x70U;
 8012e56:	693b      	ldr	r3, [r7, #16]
 8012e58:	2270      	movs	r2, #112	; 0x70
 8012e5a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	220c      	movs	r2, #12
 8012e60:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8012e62:	693b      	ldr	r3, [r7, #16]
 8012e64:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8012e68:	693b      	ldr	r3, [r7, #16]
 8012e6a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d02e      	beq.n	8012ed0 <SCSI_RequestSense+0xe0>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8012e72:	693b      	ldr	r3, [r7, #16]
 8012e74:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012e78:	461a      	mov	r2, r3
 8012e7a:	693b      	ldr	r3, [r7, #16]
 8012e7c:	3248      	adds	r2, #72	; 0x48
 8012e7e:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 8012e82:	693b      	ldr	r3, [r7, #16]
 8012e84:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012e8c:	693a      	ldr	r2, [r7, #16]
 8012e8e:	3348      	adds	r3, #72	; 0x48
 8012e90:	00db      	lsls	r3, r3, #3
 8012e92:	4413      	add	r3, r2
 8012e94:	791a      	ldrb	r2, [r3, #4]
 8012e96:	693b      	ldr	r3, [r7, #16]
 8012e98:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8012e9a:	693b      	ldr	r3, [r7, #16]
 8012e9c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012ea0:	693a      	ldr	r2, [r7, #16]
 8012ea2:	3348      	adds	r3, #72	; 0x48
 8012ea4:	00db      	lsls	r3, r3, #3
 8012ea6:	4413      	add	r3, r2
 8012ea8:	795a      	ldrb	r2, [r3, #5]
 8012eaa:	693b      	ldr	r3, [r7, #16]
 8012eac:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8012eae:	693b      	ldr	r3, [r7, #16]
 8012eb0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012eb4:	3301      	adds	r3, #1
 8012eb6:	b2da      	uxtb	r2, r3
 8012eb8:	693b      	ldr	r3, [r7, #16]
 8012eba:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8012ebe:	693b      	ldr	r3, [r7, #16]
 8012ec0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8012ec4:	2b04      	cmp	r3, #4
 8012ec6:	d103      	bne.n	8012ed0 <SCSI_RequestSense+0xe0>
    {
      hmsc->scsi_sense_head = 0U;
 8012ec8:	693b      	ldr	r3, [r7, #16]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8012ed0:	693b      	ldr	r3, [r7, #16]
 8012ed2:	2212      	movs	r2, #18
 8012ed4:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	3304      	adds	r3, #4
 8012eda:	781b      	ldrb	r3, [r3, #0]
 8012edc:	2b12      	cmp	r3, #18
 8012ede:	d805      	bhi.n	8012eec <SCSI_RequestSense+0xfc>
  {
    hmsc->bot_data_length = params[4];
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	3304      	adds	r3, #4
 8012ee4:	781b      	ldrb	r3, [r3, #0]
 8012ee6:	461a      	mov	r2, r3
 8012ee8:	693b      	ldr	r3, [r7, #16]
 8012eea:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8012eec:	2300      	movs	r3, #0
}
 8012eee:	4618      	mov	r0, r3
 8012ef0:	3718      	adds	r7, #24
 8012ef2:	46bd      	mov	sp, r7
 8012ef4:	bd80      	pop	{r7, pc}

08012ef6 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8012ef6:	b480      	push	{r7}
 8012ef8:	b085      	sub	sp, #20
 8012efa:	af00      	add	r7, sp, #0
 8012efc:	6078      	str	r0, [r7, #4]
 8012efe:	4608      	mov	r0, r1
 8012f00:	4611      	mov	r1, r2
 8012f02:	461a      	mov	r2, r3
 8012f04:	4603      	mov	r3, r0
 8012f06:	70fb      	strb	r3, [r7, #3]
 8012f08:	460b      	mov	r3, r1
 8012f0a:	70bb      	strb	r3, [r7, #2]
 8012f0c:	4613      	mov	r3, r2
 8012f0e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	32b0      	adds	r2, #176	; 0xb0
 8012f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f1e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d02c      	beq.n	8012f80 <SCSI_SenseCode+0x8a>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012f2c:	461a      	mov	r2, r3
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	3248      	adds	r2, #72	; 0x48
 8012f32:	78b9      	ldrb	r1, [r7, #2]
 8012f34:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012f3e:	68fa      	ldr	r2, [r7, #12]
 8012f40:	3348      	adds	r3, #72	; 0x48
 8012f42:	00db      	lsls	r3, r3, #3
 8012f44:	4413      	add	r3, r2
 8012f46:	787a      	ldrb	r2, [r7, #1]
 8012f48:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012f50:	68fa      	ldr	r2, [r7, #12]
 8012f52:	3348      	adds	r3, #72	; 0x48
 8012f54:	00db      	lsls	r3, r3, #3
 8012f56:	4413      	add	r3, r2
 8012f58:	2200      	movs	r2, #0
 8012f5a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012f62:	3301      	adds	r3, #1
 8012f64:	b2da      	uxtb	r2, r3
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8012f72:	2b04      	cmp	r3, #4
 8012f74:	d105      	bne.n	8012f82 <SCSI_SenseCode+0x8c>
  {
    hmsc->scsi_sense_tail = 0U;
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	2200      	movs	r2, #0
 8012f7a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 8012f7e:	e000      	b.n	8012f82 <SCSI_SenseCode+0x8c>
    return;
 8012f80:	bf00      	nop
  }
}
 8012f82:	3714      	adds	r7, #20
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr

08012f8c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b086      	sub	sp, #24
 8012f90:	af00      	add	r7, sp, #0
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	460b      	mov	r3, r1
 8012f96:	607a      	str	r2, [r7, #4]
 8012f98:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	32b0      	adds	r2, #176	; 0xb0
 8012fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fa8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8012faa:	697b      	ldr	r3, [r7, #20]
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d102      	bne.n	8012fb6 <SCSI_StartStopUnit+0x2a>
  {
    return -1;
 8012fb0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fb4:	e03b      	b.n	801302e <SCSI_StartStopUnit+0xa2>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8012fbc:	2b01      	cmp	r3, #1
 8012fbe:	d10f      	bne.n	8012fe0 <SCSI_StartStopUnit+0x54>
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	3304      	adds	r3, #4
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	f003 0303 	and.w	r3, r3, #3
 8012fca:	2b02      	cmp	r3, #2
 8012fcc:	d108      	bne.n	8012fe0 <SCSI_StartStopUnit+0x54>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8012fce:	7af9      	ldrb	r1, [r7, #11]
 8012fd0:	2324      	movs	r3, #36	; 0x24
 8012fd2:	2205      	movs	r2, #5
 8012fd4:	68f8      	ldr	r0, [r7, #12]
 8012fd6:	f7ff ff8e 	bl	8012ef6 <SCSI_SenseCode>

    return -1;
 8012fda:	f04f 33ff 	mov.w	r3, #4294967295
 8012fde:	e026      	b.n	801302e <SCSI_StartStopUnit+0xa2>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	3304      	adds	r3, #4
 8012fe4:	781b      	ldrb	r3, [r3, #0]
 8012fe6:	f003 0303 	and.w	r3, r3, #3
 8012fea:	2b01      	cmp	r3, #1
 8012fec:	d104      	bne.n	8012ff8 <SCSI_StartStopUnit+0x6c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8012ff6:	e016      	b.n	8013026 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	3304      	adds	r3, #4
 8012ffc:	781b      	ldrb	r3, [r3, #0]
 8012ffe:	f003 0303 	and.w	r3, r3, #3
 8013002:	2b02      	cmp	r3, #2
 8013004:	d104      	bne.n	8013010 <SCSI_StartStopUnit+0x84>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	2202      	movs	r2, #2
 801300a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 801300e:	e00a      	b.n	8013026 <SCSI_StartStopUnit+0x9a>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	3304      	adds	r3, #4
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	f003 0303 	and.w	r3, r3, #3
 801301a:	2b03      	cmp	r3, #3
 801301c:	d103      	bne.n	8013026 <SCSI_StartStopUnit+0x9a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801301e:	697b      	ldr	r3, [r7, #20]
 8013020:	2200      	movs	r2, #0
 8013022:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	2200      	movs	r2, #0
 801302a:	60da      	str	r2, [r3, #12]

  return 0;
 801302c:	2300      	movs	r3, #0
}
 801302e:	4618      	mov	r0, r3
 8013030:	3718      	adds	r7, #24
 8013032:	46bd      	mov	sp, r7
 8013034:	bd80      	pop	{r7, pc}

08013036 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013036:	b480      	push	{r7}
 8013038:	b087      	sub	sp, #28
 801303a:	af00      	add	r7, sp, #0
 801303c:	60f8      	str	r0, [r7, #12]
 801303e:	460b      	mov	r3, r1
 8013040:	607a      	str	r2, [r7, #4]
 8013042:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	32b0      	adds	r2, #176	; 0xb0
 801304e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013052:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013054:	697b      	ldr	r3, [r7, #20]
 8013056:	2b00      	cmp	r3, #0
 8013058:	d102      	bne.n	8013060 <SCSI_AllowPreventRemovable+0x2a>
  {
    return -1;
 801305a:	f04f 33ff 	mov.w	r3, #4294967295
 801305e:	e011      	b.n	8013084 <SCSI_AllowPreventRemovable+0x4e>
  }

  if (params[4] == 0U)
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	3304      	adds	r3, #4
 8013064:	781b      	ldrb	r3, [r3, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d104      	bne.n	8013074 <SCSI_AllowPreventRemovable+0x3e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801306a:	697b      	ldr	r3, [r7, #20]
 801306c:	2200      	movs	r2, #0
 801306e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8013072:	e003      	b.n	801307c <SCSI_AllowPreventRemovable+0x46>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	2201      	movs	r2, #1
 8013078:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 801307c:	697b      	ldr	r3, [r7, #20]
 801307e:	2200      	movs	r2, #0
 8013080:	60da      	str	r2, [r3, #12]

  return 0;
 8013082:	2300      	movs	r3, #0
}
 8013084:	4618      	mov	r0, r3
 8013086:	371c      	adds	r7, #28
 8013088:	46bd      	mov	sp, r7
 801308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308e:	4770      	bx	lr

08013090 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b086      	sub	sp, #24
 8013094:	af00      	add	r7, sp, #0
 8013096:	60f8      	str	r0, [r7, #12]
 8013098:	460b      	mov	r3, r1
 801309a:	607a      	str	r2, [r7, #4]
 801309c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	32b0      	adds	r2, #176	; 0xb0
 80130a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130ac:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80130ae:	697b      	ldr	r3, [r7, #20]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d102      	bne.n	80130ba <SCSI_Read10+0x2a>
  {
    return -1;
 80130b4:	f04f 33ff 	mov.w	r3, #4294967295
 80130b8:	e090      	b.n	80131dc <SCSI_Read10+0x14c>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80130ba:	697b      	ldr	r3, [r7, #20]
 80130bc:	7a1b      	ldrb	r3, [r3, #8]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	f040 8082 	bne.w	80131c8 <SCSI_Read10+0x138>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80130c4:	697b      	ldr	r3, [r7, #20]
 80130c6:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80130ca:	b25b      	sxtb	r3, r3
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	db0a      	blt.n	80130e6 <SCSI_Read10+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80130d0:	697b      	ldr	r3, [r7, #20]
 80130d2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80130d6:	2320      	movs	r3, #32
 80130d8:	2205      	movs	r2, #5
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f7ff ff0b 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 80130e0:	f04f 33ff 	mov.w	r3, #4294967295
 80130e4:	e07a      	b.n	80131dc <SCSI_Read10+0x14c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80130ec:	2b02      	cmp	r3, #2
 80130ee:	d108      	bne.n	8013102 <SCSI_Read10+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80130f0:	7af9      	ldrb	r1, [r7, #11]
 80130f2:	233a      	movs	r3, #58	; 0x3a
 80130f4:	2202      	movs	r2, #2
 80130f6:	68f8      	ldr	r0, [r7, #12]
 80130f8:	f7ff fefd 	bl	8012ef6 <SCSI_SenseCode>

      return -1;
 80130fc:	f04f 33ff 	mov.w	r3, #4294967295
 8013100:	e06c      	b.n	80131dc <SCSI_Read10+0x14c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013108:	68fa      	ldr	r2, [r7, #12]
 801310a:	33b0      	adds	r3, #176	; 0xb0
 801310c:	009b      	lsls	r3, r3, #2
 801310e:	4413      	add	r3, r2
 8013110:	685b      	ldr	r3, [r3, #4]
 8013112:	689b      	ldr	r3, [r3, #8]
 8013114:	7afa      	ldrb	r2, [r7, #11]
 8013116:	4610      	mov	r0, r2
 8013118:	4798      	blx	r3
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d008      	beq.n	8013132 <SCSI_Read10+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013120:	7af9      	ldrb	r1, [r7, #11]
 8013122:	233a      	movs	r3, #58	; 0x3a
 8013124:	2202      	movs	r2, #2
 8013126:	68f8      	ldr	r0, [r7, #12]
 8013128:	f7ff fee5 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 801312c:	f04f 33ff 	mov.w	r3, #4294967295
 8013130:	e054      	b.n	80131dc <SCSI_Read10+0x14c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	3302      	adds	r3, #2
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	3303      	adds	r3, #3
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013142:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	3304      	adds	r3, #4
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801314c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801314e:	687a      	ldr	r2, [r7, #4]
 8013150:	3205      	adds	r2, #5
 8013152:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8013154:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	3307      	adds	r3, #7
 8013160:	781b      	ldrb	r3, [r3, #0]
 8013162:	021b      	lsls	r3, r3, #8
 8013164:	687a      	ldr	r2, [r7, #4]
 8013166:	3208      	adds	r2, #8
 8013168:	7812      	ldrb	r2, [r2, #0]
 801316a:	431a      	orrs	r2, r3
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013172:	697b      	ldr	r3, [r7, #20]
 8013174:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013178:	697b      	ldr	r3, [r7, #20]
 801317a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801317e:	7af9      	ldrb	r1, [r7, #11]
 8013180:	68f8      	ldr	r0, [r7, #12]
 8013182:	f000 fadc 	bl	801373e <SCSI_CheckAddressRange>
 8013186:	4603      	mov	r3, r0
 8013188:	2b00      	cmp	r3, #0
 801318a:	da02      	bge.n	8013192 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801318c:	f04f 33ff 	mov.w	r3, #4294967295
 8013190:	e024      	b.n	80131dc <SCSI_Read10+0x14c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8013192:	697b      	ldr	r3, [r7, #20]
 8013194:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801319e:	6979      	ldr	r1, [r7, #20]
 80131a0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80131a4:	fb01 f303 	mul.w	r3, r1, r3
 80131a8:	429a      	cmp	r2, r3
 80131aa:	d00a      	beq.n	80131c2 <SCSI_Read10+0x132>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80131ac:	697b      	ldr	r3, [r7, #20]
 80131ae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80131b2:	2320      	movs	r3, #32
 80131b4:	2205      	movs	r2, #5
 80131b6:	68f8      	ldr	r0, [r7, #12]
 80131b8:	f7ff fe9d 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 80131bc:	f04f 33ff 	mov.w	r3, #4294967295
 80131c0:	e00c      	b.n	80131dc <SCSI_Read10+0x14c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	2202      	movs	r2, #2
 80131c6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80131c8:	697b      	ldr	r3, [r7, #20]
 80131ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80131ce:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80131d0:	7afb      	ldrb	r3, [r7, #11]
 80131d2:	4619      	mov	r1, r3
 80131d4:	68f8      	ldr	r0, [r7, #12]
 80131d6:	f000 fadf 	bl	8013798 <SCSI_ProcessRead>
 80131da:	4603      	mov	r3, r0
}
 80131dc:	4618      	mov	r0, r3
 80131de:	3718      	adds	r7, #24
 80131e0:	46bd      	mov	sp, r7
 80131e2:	bd80      	pop	{r7, pc}

080131e4 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80131e4:	b580      	push	{r7, lr}
 80131e6:	b086      	sub	sp, #24
 80131e8:	af00      	add	r7, sp, #0
 80131ea:	60f8      	str	r0, [r7, #12]
 80131ec:	460b      	mov	r3, r1
 80131ee:	607a      	str	r2, [r7, #4]
 80131f0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	32b0      	adds	r2, #176	; 0xb0
 80131fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013200:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	2b00      	cmp	r3, #0
 8013206:	d102      	bne.n	801320e <SCSI_Read12+0x2a>
  {
    return -1;
 8013208:	f04f 33ff 	mov.w	r3, #4294967295
 801320c:	e09a      	b.n	8013344 <SCSI_Read12+0x160>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	7a1b      	ldrb	r3, [r3, #8]
 8013212:	2b00      	cmp	r3, #0
 8013214:	f040 808c 	bne.w	8013330 <SCSI_Read12+0x14c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8013218:	697b      	ldr	r3, [r7, #20]
 801321a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 801321e:	b25b      	sxtb	r3, r3
 8013220:	2b00      	cmp	r3, #0
 8013222:	db0a      	blt.n	801323a <SCSI_Read12+0x56>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013224:	697b      	ldr	r3, [r7, #20]
 8013226:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801322a:	2320      	movs	r3, #32
 801322c:	2205      	movs	r2, #5
 801322e:	68f8      	ldr	r0, [r7, #12]
 8013230:	f7ff fe61 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 8013234:	f04f 33ff 	mov.w	r3, #4294967295
 8013238:	e084      	b.n	8013344 <SCSI_Read12+0x160>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801323a:	697b      	ldr	r3, [r7, #20]
 801323c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8013240:	2b02      	cmp	r3, #2
 8013242:	d108      	bne.n	8013256 <SCSI_Read12+0x72>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013244:	7af9      	ldrb	r1, [r7, #11]
 8013246:	233a      	movs	r3, #58	; 0x3a
 8013248:	2202      	movs	r2, #2
 801324a:	68f8      	ldr	r0, [r7, #12]
 801324c:	f7ff fe53 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 8013250:	f04f 33ff 	mov.w	r3, #4294967295
 8013254:	e076      	b.n	8013344 <SCSI_Read12+0x160>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801325c:	68fa      	ldr	r2, [r7, #12]
 801325e:	33b0      	adds	r3, #176	; 0xb0
 8013260:	009b      	lsls	r3, r3, #2
 8013262:	4413      	add	r3, r2
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	689b      	ldr	r3, [r3, #8]
 8013268:	7afa      	ldrb	r2, [r7, #11]
 801326a:	4610      	mov	r0, r2
 801326c:	4798      	blx	r3
 801326e:	4603      	mov	r3, r0
 8013270:	2b00      	cmp	r3, #0
 8013272:	d008      	beq.n	8013286 <SCSI_Read12+0xa2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8013274:	7af9      	ldrb	r1, [r7, #11]
 8013276:	233a      	movs	r3, #58	; 0x3a
 8013278:	2202      	movs	r2, #2
 801327a:	68f8      	ldr	r0, [r7, #12]
 801327c:	f7ff fe3b 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 8013280:	f04f 33ff 	mov.w	r3, #4294967295
 8013284:	e05e      	b.n	8013344 <SCSI_Read12+0x160>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	3302      	adds	r3, #2
 801328a:	781b      	ldrb	r3, [r3, #0]
 801328c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	3303      	adds	r3, #3
 8013292:	781b      	ldrb	r3, [r3, #0]
 8013294:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013296:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	3304      	adds	r3, #4
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80132a0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80132a2:	687a      	ldr	r2, [r7, #4]
 80132a4:	3205      	adds	r2, #5
 80132a6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80132a8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80132aa:	697b      	ldr	r3, [r7, #20]
 80132ac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	3306      	adds	r3, #6
 80132b4:	781b      	ldrb	r3, [r3, #0]
 80132b6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	3307      	adds	r3, #7
 80132bc:	781b      	ldrb	r3, [r3, #0]
 80132be:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80132c0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	3308      	adds	r3, #8
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80132ca:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80132cc:	687a      	ldr	r2, [r7, #4]
 80132ce:	3209      	adds	r2, #9
 80132d0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80132d2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80132d4:	697b      	ldr	r3, [r7, #20]
 80132d6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80132da:	697b      	ldr	r3, [r7, #20]
 80132dc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80132e0:	697b      	ldr	r3, [r7, #20]
 80132e2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80132e6:	7af9      	ldrb	r1, [r7, #11]
 80132e8:	68f8      	ldr	r0, [r7, #12]
 80132ea:	f000 fa28 	bl	801373e <SCSI_CheckAddressRange>
 80132ee:	4603      	mov	r3, r0
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	da02      	bge.n	80132fa <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80132f4:	f04f 33ff 	mov.w	r3, #4294967295
 80132f8:	e024      	b.n	8013344 <SCSI_Read12+0x160>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80132fa:	697b      	ldr	r3, [r7, #20]
 80132fc:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013306:	6979      	ldr	r1, [r7, #20]
 8013308:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 801330c:	fb01 f303 	mul.w	r3, r1, r3
 8013310:	429a      	cmp	r2, r3
 8013312:	d00a      	beq.n	801332a <SCSI_Read12+0x146>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013314:	697b      	ldr	r3, [r7, #20]
 8013316:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801331a:	2320      	movs	r3, #32
 801331c:	2205      	movs	r2, #5
 801331e:	68f8      	ldr	r0, [r7, #12]
 8013320:	f7ff fde9 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 8013324:	f04f 33ff 	mov.w	r3, #4294967295
 8013328:	e00c      	b.n	8013344 <SCSI_Read12+0x160>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801332a:	697b      	ldr	r3, [r7, #20]
 801332c:	2202      	movs	r2, #2
 801332e:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013336:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8013338:	7afb      	ldrb	r3, [r7, #11]
 801333a:	4619      	mov	r1, r3
 801333c:	68f8      	ldr	r0, [r7, #12]
 801333e:	f000 fa2b 	bl	8013798 <SCSI_ProcessRead>
 8013342:	4603      	mov	r3, r0
}
 8013344:	4618      	mov	r0, r3
 8013346:	3718      	adds	r7, #24
 8013348:	46bd      	mov	sp, r7
 801334a:	bd80      	pop	{r7, pc}

0801334c <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b086      	sub	sp, #24
 8013350:	af00      	add	r7, sp, #0
 8013352:	60f8      	str	r0, [r7, #12]
 8013354:	460b      	mov	r3, r1
 8013356:	607a      	str	r2, [r7, #4]
 8013358:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801335a:	68fb      	ldr	r3, [r7, #12]
 801335c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	32b0      	adds	r2, #176	; 0xb0
 8013364:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013368:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d102      	bne.n	8013376 <SCSI_Write10+0x2a>
  {
    return -1;
 8013370:	f04f 33ff 	mov.w	r3, #4294967295
 8013374:	e0ba      	b.n	80134ec <SCSI_Write10+0x1a0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013376:	697b      	ldr	r3, [r7, #20]
 8013378:	7a1b      	ldrb	r3, [r3, #8]
 801337a:	2b00      	cmp	r3, #0
 801337c:	f040 80b0 	bne.w	80134e0 <SCSI_Write10+0x194>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8013380:	697b      	ldr	r3, [r7, #20]
 8013382:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013386:	2b00      	cmp	r3, #0
 8013388:	d10a      	bne.n	80133a0 <SCSI_Write10+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013390:	2320      	movs	r3, #32
 8013392:	2205      	movs	r2, #5
 8013394:	68f8      	ldr	r0, [r7, #12]
 8013396:	f7ff fdae 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 801339a:	f04f 33ff 	mov.w	r3, #4294967295
 801339e:	e0a5      	b.n	80134ec <SCSI_Write10+0x1a0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80133a0:	697b      	ldr	r3, [r7, #20]
 80133a2:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80133a6:	b25b      	sxtb	r3, r3
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	da0a      	bge.n	80133c2 <SCSI_Write10+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80133ac:	697b      	ldr	r3, [r7, #20]
 80133ae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80133b2:	2320      	movs	r3, #32
 80133b4:	2205      	movs	r2, #5
 80133b6:	68f8      	ldr	r0, [r7, #12]
 80133b8:	f7ff fd9d 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 80133bc:	f04f 33ff 	mov.w	r3, #4294967295
 80133c0:	e094      	b.n	80134ec <SCSI_Write10+0x1a0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80133c8:	68fa      	ldr	r2, [r7, #12]
 80133ca:	33b0      	adds	r3, #176	; 0xb0
 80133cc:	009b      	lsls	r3, r3, #2
 80133ce:	4413      	add	r3, r2
 80133d0:	685b      	ldr	r3, [r3, #4]
 80133d2:	689b      	ldr	r3, [r3, #8]
 80133d4:	7afa      	ldrb	r2, [r7, #11]
 80133d6:	4610      	mov	r0, r2
 80133d8:	4798      	blx	r3
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d008      	beq.n	80133f2 <SCSI_Write10+0xa6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80133e0:	7af9      	ldrb	r1, [r7, #11]
 80133e2:	233a      	movs	r3, #58	; 0x3a
 80133e4:	2202      	movs	r2, #2
 80133e6:	68f8      	ldr	r0, [r7, #12]
 80133e8:	f7ff fd85 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 80133ec:	f04f 33ff 	mov.w	r3, #4294967295
 80133f0:	e07c      	b.n	80134ec <SCSI_Write10+0x1a0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80133f8:	68fa      	ldr	r2, [r7, #12]
 80133fa:	33b0      	adds	r3, #176	; 0xb0
 80133fc:	009b      	lsls	r3, r3, #2
 80133fe:	4413      	add	r3, r2
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	68db      	ldr	r3, [r3, #12]
 8013404:	7afa      	ldrb	r2, [r7, #11]
 8013406:	4610      	mov	r0, r2
 8013408:	4798      	blx	r3
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d008      	beq.n	8013422 <SCSI_Write10+0xd6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8013410:	7af9      	ldrb	r1, [r7, #11]
 8013412:	2327      	movs	r3, #39	; 0x27
 8013414:	2202      	movs	r2, #2
 8013416:	68f8      	ldr	r0, [r7, #12]
 8013418:	f7ff fd6d 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 801341c:	f04f 33ff 	mov.w	r3, #4294967295
 8013420:	e064      	b.n	80134ec <SCSI_Write10+0x1a0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	3302      	adds	r3, #2
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	3303      	adds	r3, #3
 801342e:	781b      	ldrb	r3, [r3, #0]
 8013430:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013432:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	3304      	adds	r3, #4
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801343c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801343e:	687a      	ldr	r2, [r7, #4]
 8013440:	3205      	adds	r2, #5
 8013442:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8013444:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8013446:	697b      	ldr	r3, [r7, #20]
 8013448:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	3307      	adds	r3, #7
 8013450:	781b      	ldrb	r3, [r3, #0]
 8013452:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8013454:	687a      	ldr	r2, [r7, #4]
 8013456:	3208      	adds	r2, #8
 8013458:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801345a:	431a      	orrs	r2, r3
 801345c:	697b      	ldr	r3, [r7, #20]
 801345e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013468:	697b      	ldr	r3, [r7, #20]
 801346a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801346e:	7af9      	ldrb	r1, [r7, #11]
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	f000 f964 	bl	801373e <SCSI_CheckAddressRange>
 8013476:	4603      	mov	r3, r0
 8013478:	2b00      	cmp	r3, #0
 801347a:	da02      	bge.n	8013482 <SCSI_Write10+0x136>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801347c:	f04f 33ff 	mov.w	r3, #4294967295
 8013480:	e034      	b.n	80134ec <SCSI_Write10+0x1a0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013488:	697a      	ldr	r2, [r7, #20]
 801348a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801348e:	fb02 f303 	mul.w	r3, r2, r3
 8013492:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 801349a:	693a      	ldr	r2, [r7, #16]
 801349c:	429a      	cmp	r2, r3
 801349e:	d00a      	beq.n	80134b6 <SCSI_Write10+0x16a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80134a0:	697b      	ldr	r3, [r7, #20]
 80134a2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80134a6:	2320      	movs	r3, #32
 80134a8:	2205      	movs	r2, #5
 80134aa:	68f8      	ldr	r0, [r7, #12]
 80134ac:	f7ff fd23 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 80134b0:	f04f 33ff 	mov.w	r3, #4294967295
 80134b4:	e01a      	b.n	80134ec <SCSI_Write10+0x1a0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80134bc:	bf28      	it	cs
 80134be:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80134c2:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80134c4:	697b      	ldr	r3, [r7, #20]
 80134c6:	2201      	movs	r2, #1
 80134c8:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80134ca:	4b0a      	ldr	r3, [pc, #40]	; (80134f4 <SCSI_Write10+0x1a8>)
 80134cc:	7819      	ldrb	r1, [r3, #0]
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	f103 0210 	add.w	r2, r3, #16
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	68f8      	ldr	r0, [r7, #12]
 80134d8:	f004 fb57 	bl	8017b8a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80134dc:	2300      	movs	r3, #0
 80134de:	e005      	b.n	80134ec <SCSI_Write10+0x1a0>
    return SCSI_ProcessWrite(pdev, lun);
 80134e0:	7afb      	ldrb	r3, [r7, #11]
 80134e2:	4619      	mov	r1, r3
 80134e4:	68f8      	ldr	r0, [r7, #12]
 80134e6:	f000 f9dd 	bl	80138a4 <SCSI_ProcessWrite>
 80134ea:	4603      	mov	r3, r0
}
 80134ec:	4618      	mov	r0, r3
 80134ee:	3718      	adds	r7, #24
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}
 80134f4:	2000006f 	.word	0x2000006f

080134f8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b086      	sub	sp, #24
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	460b      	mov	r3, r1
 8013502:	607a      	str	r2, [r7, #4]
 8013504:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013506:	68fb      	ldr	r3, [r7, #12]
 8013508:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801350c:	68fb      	ldr	r3, [r7, #12]
 801350e:	32b0      	adds	r2, #176	; 0xb0
 8013510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013514:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	2b00      	cmp	r3, #0
 801351a:	d102      	bne.n	8013522 <SCSI_Write12+0x2a>
  {
    return -1;
 801351c:	f04f 33ff 	mov.w	r3, #4294967295
 8013520:	e0ca      	b.n	80136b8 <SCSI_Write12+0x1c0>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8013522:	697b      	ldr	r3, [r7, #20]
 8013524:	7a1b      	ldrb	r3, [r3, #8]
 8013526:	2b00      	cmp	r3, #0
 8013528:	f040 80c0 	bne.w	80136ac <SCSI_Write12+0x1b4>
  {
    if (hmsc->cbw.dDataLength == 0U)
 801352c:	697b      	ldr	r3, [r7, #20]
 801352e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013532:	2b00      	cmp	r3, #0
 8013534:	d10a      	bne.n	801354c <SCSI_Write12+0x54>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013536:	697b      	ldr	r3, [r7, #20]
 8013538:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801353c:	2320      	movs	r3, #32
 801353e:	2205      	movs	r2, #5
 8013540:	68f8      	ldr	r0, [r7, #12]
 8013542:	f7ff fcd8 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 8013546:	f04f 33ff 	mov.w	r3, #4294967295
 801354a:	e0b5      	b.n	80136b8 <SCSI_Write12+0x1c0>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 801354c:	697b      	ldr	r3, [r7, #20]
 801354e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8013552:	b25b      	sxtb	r3, r3
 8013554:	2b00      	cmp	r3, #0
 8013556:	da0a      	bge.n	801356e <SCSI_Write12+0x76>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 801355e:	2320      	movs	r3, #32
 8013560:	2205      	movs	r2, #5
 8013562:	68f8      	ldr	r0, [r7, #12]
 8013564:	f7ff fcc7 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 8013568:	f04f 33ff 	mov.w	r3, #4294967295
 801356c:	e0a4      	b.n	80136b8 <SCSI_Write12+0x1c0>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsReady(lun) != 0)
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013574:	68fa      	ldr	r2, [r7, #12]
 8013576:	33b0      	adds	r3, #176	; 0xb0
 8013578:	009b      	lsls	r3, r3, #2
 801357a:	4413      	add	r3, r2
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	689b      	ldr	r3, [r3, #8]
 8013580:	7afa      	ldrb	r2, [r7, #11]
 8013582:	4610      	mov	r0, r2
 8013584:	4798      	blx	r3
 8013586:	4603      	mov	r3, r0
 8013588:	2b00      	cmp	r3, #0
 801358a:	d00b      	beq.n	80135a4 <SCSI_Write12+0xac>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801358c:	7af9      	ldrb	r1, [r7, #11]
 801358e:	233a      	movs	r3, #58	; 0x3a
 8013590:	2202      	movs	r2, #2
 8013592:	68f8      	ldr	r0, [r7, #12]
 8013594:	f7ff fcaf 	bl	8012ef6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8013598:	697b      	ldr	r3, [r7, #20]
 801359a:	2205      	movs	r2, #5
 801359c:	721a      	strb	r2, [r3, #8]
      return -1;
 801359e:	f04f 33ff 	mov.w	r3, #4294967295
 80135a2:	e089      	b.n	80136b8 <SCSI_Write12+0x1c0>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->IsWriteProtected(lun) != 0)
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80135aa:	68fa      	ldr	r2, [r7, #12]
 80135ac:	33b0      	adds	r3, #176	; 0xb0
 80135ae:	009b      	lsls	r3, r3, #2
 80135b0:	4413      	add	r3, r2
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	68db      	ldr	r3, [r3, #12]
 80135b6:	7afa      	ldrb	r2, [r7, #11]
 80135b8:	4610      	mov	r0, r2
 80135ba:	4798      	blx	r3
 80135bc:	4603      	mov	r3, r0
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d00b      	beq.n	80135da <SCSI_Write12+0xe2>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80135c2:	7af9      	ldrb	r1, [r7, #11]
 80135c4:	2327      	movs	r3, #39	; 0x27
 80135c6:	2202      	movs	r2, #2
 80135c8:	68f8      	ldr	r0, [r7, #12]
 80135ca:	f7ff fc94 	bl	8012ef6 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80135ce:	697b      	ldr	r3, [r7, #20]
 80135d0:	2205      	movs	r2, #5
 80135d2:	721a      	strb	r2, [r3, #8]
      return -1;
 80135d4:	f04f 33ff 	mov.w	r3, #4294967295
 80135d8:	e06e      	b.n	80136b8 <SCSI_Write12+0x1c0>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	3302      	adds	r3, #2
 80135de:	781b      	ldrb	r3, [r3, #0]
 80135e0:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	3303      	adds	r3, #3
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80135ea:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	3304      	adds	r3, #4
 80135f0:	781b      	ldrb	r3, [r3, #0]
 80135f2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80135f4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80135f6:	687a      	ldr	r2, [r7, #4]
 80135f8:	3205      	adds	r2, #5
 80135fa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80135fc:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80135fe:	697b      	ldr	r3, [r7, #20]
 8013600:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	3306      	adds	r3, #6
 8013608:	781b      	ldrb	r3, [r3, #0]
 801360a:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	3307      	adds	r3, #7
 8013610:	781b      	ldrb	r3, [r3, #0]
 8013612:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013614:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	3308      	adds	r3, #8
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 801361e:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8013620:	687a      	ldr	r2, [r7, #4]
 8013622:	3209      	adds	r2, #9
 8013624:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8013626:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801362e:	697b      	ldr	r3, [r7, #20]
 8013630:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013634:	697b      	ldr	r3, [r7, #20]
 8013636:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801363a:	7af9      	ldrb	r1, [r7, #11]
 801363c:	68f8      	ldr	r0, [r7, #12]
 801363e:	f000 f87e 	bl	801373e <SCSI_CheckAddressRange>
 8013642:	4603      	mov	r3, r0
 8013644:	2b00      	cmp	r3, #0
 8013646:	da02      	bge.n	801364e <SCSI_Write12+0x156>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8013648:	f04f 33ff 	mov.w	r3, #4294967295
 801364c:	e034      	b.n	80136b8 <SCSI_Write12+0x1c0>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 801364e:	697b      	ldr	r3, [r7, #20]
 8013650:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013654:	697a      	ldr	r2, [r7, #20]
 8013656:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801365a:	fb02 f303 	mul.w	r3, r2, r3
 801365e:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8013666:	693a      	ldr	r2, [r7, #16]
 8013668:	429a      	cmp	r2, r3
 801366a:	d00a      	beq.n	8013682 <SCSI_Write12+0x18a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801366c:	697b      	ldr	r3, [r7, #20]
 801366e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8013672:	2320      	movs	r3, #32
 8013674:	2205      	movs	r2, #5
 8013676:	68f8      	ldr	r0, [r7, #12]
 8013678:	f7ff fc3d 	bl	8012ef6 <SCSI_SenseCode>
      return -1;
 801367c:	f04f 33ff 	mov.w	r3, #4294967295
 8013680:	e01a      	b.n	80136b8 <SCSI_Write12+0x1c0>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013688:	bf28      	it	cs
 801368a:	f44f 7300 	movcs.w	r3, #512	; 0x200
 801368e:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8013690:	697b      	ldr	r3, [r7, #20]
 8013692:	2201      	movs	r2, #1
 8013694:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 8013696:	4b0a      	ldr	r3, [pc, #40]	; (80136c0 <SCSI_Write12+0x1c8>)
 8013698:	7819      	ldrb	r1, [r3, #0]
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	f103 0210 	add.w	r2, r3, #16
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	68f8      	ldr	r0, [r7, #12]
 80136a4:	f004 fa71 	bl	8017b8a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80136a8:	2300      	movs	r3, #0
 80136aa:	e005      	b.n	80136b8 <SCSI_Write12+0x1c0>
    return SCSI_ProcessWrite(pdev, lun);
 80136ac:	7afb      	ldrb	r3, [r7, #11]
 80136ae:	4619      	mov	r1, r3
 80136b0:	68f8      	ldr	r0, [r7, #12]
 80136b2:	f000 f8f7 	bl	80138a4 <SCSI_ProcessWrite>
 80136b6:	4603      	mov	r3, r0
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3718      	adds	r7, #24
 80136bc:	46bd      	mov	sp, r7
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	2000006f 	.word	0x2000006f

080136c4 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b086      	sub	sp, #24
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	60f8      	str	r0, [r7, #12]
 80136cc:	460b      	mov	r3, r1
 80136ce:	607a      	str	r2, [r7, #4]
 80136d0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	32b0      	adds	r2, #176	; 0xb0
 80136dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136e0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d102      	bne.n	80136ee <SCSI_Verify10+0x2a>
  {
    return -1;
 80136e8:	f04f 33ff 	mov.w	r3, #4294967295
 80136ec:	e023      	b.n	8013736 <SCSI_Verify10+0x72>
  }

  if ((params[1] & 0x02U) == 0x02U)
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	3301      	adds	r3, #1
 80136f2:	781b      	ldrb	r3, [r3, #0]
 80136f4:	f003 0302 	and.w	r3, r3, #2
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d008      	beq.n	801370e <SCSI_Verify10+0x4a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80136fc:	7af9      	ldrb	r1, [r7, #11]
 80136fe:	2324      	movs	r3, #36	; 0x24
 8013700:	2205      	movs	r2, #5
 8013702:	68f8      	ldr	r0, [r7, #12]
 8013704:	f7ff fbf7 	bl	8012ef6 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8013708:	f04f 33ff 	mov.w	r3, #4294967295
 801370c:	e013      	b.n	8013736 <SCSI_Verify10+0x72>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013714:	697b      	ldr	r3, [r7, #20]
 8013716:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801371a:	7af9      	ldrb	r1, [r7, #11]
 801371c:	68f8      	ldr	r0, [r7, #12]
 801371e:	f000 f80e 	bl	801373e <SCSI_CheckAddressRange>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	da02      	bge.n	801372e <SCSI_Verify10+0x6a>
  {
    return -1; /* error */
 8013728:	f04f 33ff 	mov.w	r3, #4294967295
 801372c:	e003      	b.n	8013736 <SCSI_Verify10+0x72>
  }

  hmsc->bot_data_length = 0U;
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	2200      	movs	r2, #0
 8013732:	60da      	str	r2, [r3, #12]

  return 0;
 8013734:	2300      	movs	r3, #0
}
 8013736:	4618      	mov	r0, r3
 8013738:	3718      	adds	r7, #24
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 801373e:	b580      	push	{r7, lr}
 8013740:	b086      	sub	sp, #24
 8013742:	af00      	add	r7, sp, #0
 8013744:	60f8      	str	r0, [r7, #12]
 8013746:	607a      	str	r2, [r7, #4]
 8013748:	603b      	str	r3, [r7, #0]
 801374a:	460b      	mov	r3, r1
 801374c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	32b0      	adds	r2, #176	; 0xb0
 8013758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801375c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 801375e:	697b      	ldr	r3, [r7, #20]
 8013760:	2b00      	cmp	r3, #0
 8013762:	d102      	bne.n	801376a <SCSI_CheckAddressRange+0x2c>
  {
    return -1;
 8013764:	f04f 33ff 	mov.w	r3, #4294967295
 8013768:	e011      	b.n	801378e <SCSI_CheckAddressRange+0x50>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 801376a:	687a      	ldr	r2, [r7, #4]
 801376c:	683b      	ldr	r3, [r7, #0]
 801376e:	441a      	add	r2, r3
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8013776:	429a      	cmp	r2, r3
 8013778:	d908      	bls.n	801378c <SCSI_CheckAddressRange+0x4e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 801377a:	7af9      	ldrb	r1, [r7, #11]
 801377c:	2321      	movs	r3, #33	; 0x21
 801377e:	2205      	movs	r2, #5
 8013780:	68f8      	ldr	r0, [r7, #12]
 8013782:	f7ff fbb8 	bl	8012ef6 <SCSI_SenseCode>
    return -1;
 8013786:	f04f 33ff 	mov.w	r3, #4294967295
 801378a:	e000      	b.n	801378e <SCSI_CheckAddressRange+0x50>
  }

  return 0;
 801378c:	2300      	movs	r3, #0
}
 801378e:	4618      	mov	r0, r3
 8013790:	3718      	adds	r7, #24
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}
	...

08013798 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8013798:	b590      	push	{r4, r7, lr}
 801379a:	b085      	sub	sp, #20
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	460b      	mov	r3, r1
 80137a2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	32b0      	adds	r2, #176	; 0xb0
 80137ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80137b2:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80137b4:	68fb      	ldr	r3, [r7, #12]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d102      	bne.n	80137c0 <SCSI_ProcessRead+0x28>
  {
    return -1;
 80137ba:	f04f 33ff 	mov.w	r3, #4294967295
 80137be:	e06a      	b.n	8013896 <SCSI_ProcessRead+0xfe>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80137c6:	68fa      	ldr	r2, [r7, #12]
 80137c8:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80137cc:	fb02 f303 	mul.w	r3, r2, r3
 80137d0:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80137d2:	68bb      	ldr	r3, [r7, #8]
 80137d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137d8:	bf28      	it	cs
 80137da:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80137de:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80137e6:	687a      	ldr	r2, [r7, #4]
 80137e8:	33b0      	adds	r3, #176	; 0xb0
 80137ea:	009b      	lsls	r3, r3, #2
 80137ec:	4413      	add	r3, r2
 80137ee:	685b      	ldr	r3, [r3, #4]
 80137f0:	691c      	ldr	r4, [r3, #16]
 80137f2:	68fb      	ldr	r3, [r7, #12]
 80137f4:	f103 0110 	add.w	r1, r3, #16
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                    hmsc->scsi_blk_addr,
                                                                    (len / hmsc->scsi_blk_size)) < 0)
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013804:	4618      	mov	r0, r3
 8013806:	68bb      	ldr	r3, [r7, #8]
 8013808:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Read(lun, hmsc->bot_data,
 801380c:	b29b      	uxth	r3, r3
 801380e:	78f8      	ldrb	r0, [r7, #3]
 8013810:	47a0      	blx	r4
 8013812:	4603      	mov	r3, r0
 8013814:	2b00      	cmp	r3, #0
 8013816:	da08      	bge.n	801382a <SCSI_ProcessRead+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8013818:	78f9      	ldrb	r1, [r7, #3]
 801381a:	2311      	movs	r3, #17
 801381c:	2204      	movs	r2, #4
 801381e:	6878      	ldr	r0, [r7, #4]
 8013820:	f7ff fb69 	bl	8012ef6 <SCSI_SenseCode>
    return -1;
 8013824:	f04f 33ff 	mov.w	r3, #4294967295
 8013828:	e035      	b.n	8013896 <SCSI_ProcessRead+0xfe>
  }

  (void)USBD_LL_Transmit(pdev, MSCInEpAdd, hmsc->bot_data, len);
 801382a:	4b1d      	ldr	r3, [pc, #116]	; (80138a0 <SCSI_ProcessRead+0x108>)
 801382c:	7819      	ldrb	r1, [r3, #0]
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	f103 0210 	add.w	r2, r3, #16
 8013834:	68bb      	ldr	r3, [r7, #8]
 8013836:	6878      	ldr	r0, [r7, #4]
 8013838:	f004 f986 	bl	8017b48 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801383c:	68fb      	ldr	r3, [r7, #12]
 801383e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013848:	4619      	mov	r1, r3
 801384a:	68bb      	ldr	r3, [r7, #8]
 801384c:	fbb3 f3f1 	udiv	r3, r3, r1
 8013850:	441a      	add	r2, r3
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013858:	68fb      	ldr	r3, [r7, #12]
 801385a:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013864:	4619      	mov	r1, r3
 8013866:	68bb      	ldr	r3, [r7, #8]
 8013868:	fbb3 f3f1 	udiv	r3, r3, r1
 801386c:	1ad2      	subs	r2, r2, r3
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8013874:	68fb      	ldr	r3, [r7, #12]
 8013876:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 801387a:	68bb      	ldr	r3, [r7, #8]
 801387c:	1ad2      	subs	r2, r2, r3
 801387e:	68fb      	ldr	r3, [r7, #12]
 8013880:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 801388a:	2b00      	cmp	r3, #0
 801388c:	d102      	bne.n	8013894 <SCSI_ProcessRead+0xfc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	2203      	movs	r2, #3
 8013892:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8013894:	2300      	movs	r3, #0
}
 8013896:	4618      	mov	r0, r3
 8013898:	3714      	adds	r7, #20
 801389a:	46bd      	mov	sp, r7
 801389c:	bd90      	pop	{r4, r7, pc}
 801389e:	bf00      	nop
 80138a0:	2000006e 	.word	0x2000006e

080138a4 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80138a4:	b590      	push	{r4, r7, lr}
 80138a6:	b085      	sub	sp, #20
 80138a8:	af00      	add	r7, sp, #0
 80138aa:	6078      	str	r0, [r7, #4]
 80138ac:	460b      	mov	r3, r1
 80138ae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80138b0:	687b      	ldr	r3, [r7, #4]
 80138b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	32b0      	adds	r2, #176	; 0xb0
 80138ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80138be:	60fb      	str	r3, [r7, #12]
  uint32_t len;

  if (hmsc == NULL)
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d102      	bne.n	80138cc <SCSI_ProcessWrite+0x28>
  {
    return -1;
 80138c6:	f04f 33ff 	mov.w	r3, #4294967295
 80138ca:	e07a      	b.n	80139c2 <SCSI_ProcessWrite+0x11e>
  }

  len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80138d2:	68fa      	ldr	r2, [r7, #12]
 80138d4:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 80138d8:	fb02 f303 	mul.w	r3, r2, r3
 80138dc:	60bb      	str	r3, [r7, #8]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  MSCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  len = MIN(len, MSC_MEDIA_PACKET);
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80138e4:	bf28      	it	cs
 80138e6:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80138ea:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80138f2:	687a      	ldr	r2, [r7, #4]
 80138f4:	33b0      	adds	r3, #176	; 0xb0
 80138f6:	009b      	lsls	r3, r3, #2
 80138f8:	4413      	add	r3, r2
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	695c      	ldr	r4, [r3, #20]
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	f103 0110 	add.w	r1, r3, #16
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                                     hmsc->scsi_blk_addr,
                                                                     (len / hmsc->scsi_blk_size)) < 0)
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013910:	4618      	mov	r0, r3
 8013912:	68bb      	ldr	r3, [r7, #8]
 8013914:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData[pdev->classId])->Write(lun, hmsc->bot_data,
 8013918:	b29b      	uxth	r3, r3
 801391a:	78f8      	ldrb	r0, [r7, #3]
 801391c:	47a0      	blx	r4
 801391e:	4603      	mov	r3, r0
 8013920:	2b00      	cmp	r3, #0
 8013922:	da08      	bge.n	8013936 <SCSI_ProcessWrite+0x92>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8013924:	78f9      	ldrb	r1, [r7, #3]
 8013926:	2303      	movs	r3, #3
 8013928:	2204      	movs	r2, #4
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f7ff fae3 	bl	8012ef6 <SCSI_SenseCode>
    return -1;
 8013930:	f04f 33ff 	mov.w	r3, #4294967295
 8013934:	e045      	b.n	80139c2 <SCSI_ProcessWrite+0x11e>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8013942:	4619      	mov	r1, r3
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	fbb3 f3f1 	udiv	r3, r3, r1
 801394a:	441a      	add	r2, r3
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8013958:	68fb      	ldr	r3, [r7, #12]
 801395a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 801395e:	4619      	mov	r1, r3
 8013960:	68bb      	ldr	r3, [r7, #8]
 8013962:	fbb3 f3f1 	udiv	r3, r3, r1
 8013966:	1ad2      	subs	r2, r2, r3
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801396e:	68fb      	ldr	r3, [r7, #12]
 8013970:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8013974:	68bb      	ldr	r3, [r7, #8]
 8013976:	1ad2      	subs	r2, r2, r3
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013984:	2b00      	cmp	r3, #0
 8013986:	d104      	bne.n	8013992 <SCSI_ProcessWrite+0xee>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013988:	2100      	movs	r1, #0
 801398a:	6878      	ldr	r0, [r7, #4]
 801398c:	f7fe fd14 	bl	80123b8 <MSC_BOT_SendCSW>
 8013990:	e016      	b.n	80139c0 <SCSI_ProcessWrite+0x11c>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8013998:	68fa      	ldr	r2, [r7, #12]
 801399a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 801399e:	fb02 f303 	mul.w	r3, r2, r3
 80139a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80139a6:	bf28      	it	cs
 80139a8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80139ac:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSCOutEpAdd, hmsc->bot_data, len);
 80139ae:	4b07      	ldr	r3, [pc, #28]	; (80139cc <SCSI_ProcessWrite+0x128>)
 80139b0:	7819      	ldrb	r1, [r3, #0]
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	f103 0210 	add.w	r2, r3, #16
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f004 f8e5 	bl	8017b8a <USBD_LL_PrepareReceive>
  }

  return 0;
 80139c0:	2300      	movs	r3, #0
}
 80139c2:	4618      	mov	r0, r3
 80139c4:	3714      	adds	r7, #20
 80139c6:	46bd      	mov	sp, r7
 80139c8:	bd90      	pop	{r4, r7, pc}
 80139ca:	bf00      	nop
 80139cc:	2000006f 	.word	0x2000006f

080139d0 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80139d0:	b480      	push	{r7}
 80139d2:	b087      	sub	sp, #28
 80139d4:	af00      	add	r7, sp, #0
 80139d6:	60f8      	str	r0, [r7, #12]
 80139d8:	60b9      	str	r1, [r7, #8]
 80139da:	4613      	mov	r3, r2
 80139dc:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80139de:	88fb      	ldrh	r3, [r7, #6]
 80139e0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80139e2:	68fb      	ldr	r3, [r7, #12]
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d102      	bne.n	80139ee <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 80139e8:	f04f 33ff 	mov.w	r3, #4294967295
 80139ec:	e013      	b.n	8013a16 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 80139ee:	8afa      	ldrh	r2, [r7, #22]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80139f4:	e00b      	b.n	8013a0e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 80139f6:	8afb      	ldrh	r3, [r7, #22]
 80139f8:	3b01      	subs	r3, #1
 80139fa:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80139fc:	8afb      	ldrh	r3, [r7, #22]
 80139fe:	68ba      	ldr	r2, [r7, #8]
 8013a00:	441a      	add	r2, r3
 8013a02:	8afb      	ldrh	r3, [r7, #22]
 8013a04:	7811      	ldrb	r1, [r2, #0]
 8013a06:	68fa      	ldr	r2, [r7, #12]
 8013a08:	4413      	add	r3, r2
 8013a0a:	460a      	mov	r2, r1
 8013a0c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8013a0e:	8afb      	ldrh	r3, [r7, #22]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d1f0      	bne.n	80139f6 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8013a14:	2300      	movs	r3, #0
}
 8013a16:	4618      	mov	r0, r3
 8013a18:	371c      	adds	r7, #28
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a20:	4770      	bx	lr

08013a22 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013a22:	b580      	push	{r7, lr}
 8013a24:	b086      	sub	sp, #24
 8013a26:	af00      	add	r7, sp, #0
 8013a28:	60f8      	str	r0, [r7, #12]
 8013a2a:	60b9      	str	r1, [r7, #8]
 8013a2c:	4613      	mov	r3, r2
 8013a2e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	2b00      	cmp	r3, #0
 8013a34:	d101      	bne.n	8013a3a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013a36:	2303      	movs	r3, #3
 8013a38:	e01f      	b.n	8013a7a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8013a42:	68fb      	ldr	r3, [r7, #12]
 8013a44:	2200      	movs	r2, #0
 8013a46:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2200      	movs	r2, #0
 8013a4e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d003      	beq.n	8013a60 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013a58:	68fb      	ldr	r3, [r7, #12]
 8013a5a:	68ba      	ldr	r2, [r7, #8]
 8013a5c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	2201      	movs	r2, #1
 8013a64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	79fa      	ldrb	r2, [r7, #7]
 8013a6c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8013a6e:	68f8      	ldr	r0, [r7, #12]
 8013a70:	f003 ff16 	bl	80178a0 <USBD_LL_Init>
 8013a74:	4603      	mov	r3, r0
 8013a76:	75fb      	strb	r3, [r7, #23]

  return ret;
 8013a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	3718      	adds	r7, #24
 8013a7e:	46bd      	mov	sp, r7
 8013a80:	bd80      	pop	{r7, pc}

08013a82 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013a82:	b580      	push	{r7, lr}
 8013a84:	b084      	sub	sp, #16
 8013a86:	af00      	add	r7, sp, #0
 8013a88:	6078      	str	r0, [r7, #4]
 8013a8a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d101      	bne.n	8013a9a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013a96:	2303      	movs	r3, #3
 8013a98:	e025      	b.n	8013ae6 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	683a      	ldr	r2, [r7, #0]
 8013a9e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	32ae      	adds	r2, #174	; 0xae
 8013aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d00f      	beq.n	8013ad6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	32ae      	adds	r2, #174	; 0xae
 8013ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ac6:	f107 020e 	add.w	r2, r7, #14
 8013aca:	4610      	mov	r0, r2
 8013acc:	4798      	blx	r3
 8013ace:	4602      	mov	r2, r0
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8013adc:	1c5a      	adds	r2, r3, #1
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8013ae4:	2300      	movs	r3, #0
}
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	3710      	adds	r7, #16
 8013aea:	46bd      	mov	sp, r7
 8013aec:	bd80      	pop	{r7, pc}

08013aee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013aee:	b580      	push	{r7, lr}
 8013af0:	b082      	sub	sp, #8
 8013af2:	af00      	add	r7, sp, #0
 8013af4:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013af6:	6878      	ldr	r0, [r7, #4]
 8013af8:	f003 ff1e 	bl	8017938 <USBD_LL_Start>
 8013afc:	4603      	mov	r3, r0
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	3708      	adds	r7, #8
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}

08013b06 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013b06:	b480      	push	{r7}
 8013b08:	b083      	sub	sp, #12
 8013b0a:	af00      	add	r7, sp, #0
 8013b0c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013b0e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	370c      	adds	r7, #12
 8013b14:	46bd      	mov	sp, r7
 8013b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1a:	4770      	bx	lr

08013b1c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	b084      	sub	sp, #16
 8013b20:	af00      	add	r7, sp, #0
 8013b22:	6078      	str	r0, [r7, #4]
 8013b24:	460b      	mov	r3, r1
 8013b26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b28:	2300      	movs	r3, #0
 8013b2a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013b2c:	687b      	ldr	r3, [r7, #4]
 8013b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d009      	beq.n	8013b4a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	78fa      	ldrb	r2, [r7, #3]
 8013b40:	4611      	mov	r1, r2
 8013b42:	6878      	ldr	r0, [r7, #4]
 8013b44:	4798      	blx	r3
 8013b46:	4603      	mov	r3, r0
 8013b48:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b4c:	4618      	mov	r0, r3
 8013b4e:	3710      	adds	r7, #16
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b084      	sub	sp, #16
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	460b      	mov	r3, r1
 8013b5e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013b60:	2300      	movs	r3, #0
 8013b62:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013b6a:	685b      	ldr	r3, [r3, #4]
 8013b6c:	78fa      	ldrb	r2, [r7, #3]
 8013b6e:	4611      	mov	r1, r2
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	4798      	blx	r3
 8013b74:	4603      	mov	r3, r0
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d001      	beq.n	8013b7e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8013b7a:	2303      	movs	r3, #3
 8013b7c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b80:	4618      	mov	r0, r3
 8013b82:	3710      	adds	r7, #16
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b084      	sub	sp, #16
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013b98:	6839      	ldr	r1, [r7, #0]
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	f001 f933 	bl	8014e06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	2201      	movs	r2, #1
 8013ba4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8013bae:	461a      	mov	r2, r3
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013bbc:	f003 031f 	and.w	r3, r3, #31
 8013bc0:	2b02      	cmp	r3, #2
 8013bc2:	d01a      	beq.n	8013bfa <USBD_LL_SetupStage+0x72>
 8013bc4:	2b02      	cmp	r3, #2
 8013bc6:	d822      	bhi.n	8013c0e <USBD_LL_SetupStage+0x86>
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	d002      	beq.n	8013bd2 <USBD_LL_SetupStage+0x4a>
 8013bcc:	2b01      	cmp	r3, #1
 8013bce:	d00a      	beq.n	8013be6 <USBD_LL_SetupStage+0x5e>
 8013bd0:	e01d      	b.n	8013c0e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013bd8:	4619      	mov	r1, r3
 8013bda:	6878      	ldr	r0, [r7, #4]
 8013bdc:	f000 fb60 	bl	80142a0 <USBD_StdDevReq>
 8013be0:	4603      	mov	r3, r0
 8013be2:	73fb      	strb	r3, [r7, #15]
      break;
 8013be4:	e020      	b.n	8013c28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013bec:	4619      	mov	r1, r3
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f000 fbc8 	bl	8014384 <USBD_StdItfReq>
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8013bf8:	e016      	b.n	8013c28 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8013c00:	4619      	mov	r1, r3
 8013c02:	6878      	ldr	r0, [r7, #4]
 8013c04:	f000 fc2a 	bl	801445c <USBD_StdEPReq>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8013c0c:	e00c      	b.n	8013c28 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013c14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013c18:	b2db      	uxtb	r3, r3
 8013c1a:	4619      	mov	r1, r3
 8013c1c:	6878      	ldr	r0, [r7, #4]
 8013c1e:	f003 ff0a 	bl	8017a36 <USBD_LL_StallEP>
 8013c22:	4603      	mov	r3, r0
 8013c24:	73fb      	strb	r3, [r7, #15]
      break;
 8013c26:	bf00      	nop
  }

  return ret;
 8013c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	3710      	adds	r7, #16
 8013c2e:	46bd      	mov	sp, r7
 8013c30:	bd80      	pop	{r7, pc}

08013c32 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013c32:	b580      	push	{r7, lr}
 8013c34:	b086      	sub	sp, #24
 8013c36:	af00      	add	r7, sp, #0
 8013c38:	60f8      	str	r0, [r7, #12]
 8013c3a:	460b      	mov	r3, r1
 8013c3c:	607a      	str	r2, [r7, #4]
 8013c3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8013c40:	2300      	movs	r3, #0
 8013c42:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8013c44:	7afb      	ldrb	r3, [r7, #11]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d16e      	bne.n	8013d28 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8013c50:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013c58:	2b03      	cmp	r3, #3
 8013c5a:	f040 8098 	bne.w	8013d8e <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	689a      	ldr	r2, [r3, #8]
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	68db      	ldr	r3, [r3, #12]
 8013c66:	429a      	cmp	r2, r3
 8013c68:	d913      	bls.n	8013c92 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8013c6a:	693b      	ldr	r3, [r7, #16]
 8013c6c:	689a      	ldr	r2, [r3, #8]
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	1ad2      	subs	r2, r2, r3
 8013c74:	693b      	ldr	r3, [r7, #16]
 8013c76:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8013c78:	693b      	ldr	r3, [r7, #16]
 8013c7a:	68da      	ldr	r2, [r3, #12]
 8013c7c:	693b      	ldr	r3, [r7, #16]
 8013c7e:	689b      	ldr	r3, [r3, #8]
 8013c80:	4293      	cmp	r3, r2
 8013c82:	bf28      	it	cs
 8013c84:	4613      	movcs	r3, r2
 8013c86:	461a      	mov	r2, r3
 8013c88:	6879      	ldr	r1, [r7, #4]
 8013c8a:	68f8      	ldr	r0, [r7, #12]
 8013c8c:	f001 f992 	bl	8014fb4 <USBD_CtlContinueRx>
 8013c90:	e07d      	b.n	8013d8e <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8013c98:	f003 031f 	and.w	r3, r3, #31
 8013c9c:	2b02      	cmp	r3, #2
 8013c9e:	d014      	beq.n	8013cca <USBD_LL_DataOutStage+0x98>
 8013ca0:	2b02      	cmp	r3, #2
 8013ca2:	d81d      	bhi.n	8013ce0 <USBD_LL_DataOutStage+0xae>
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d002      	beq.n	8013cae <USBD_LL_DataOutStage+0x7c>
 8013ca8:	2b01      	cmp	r3, #1
 8013caa:	d003      	beq.n	8013cb4 <USBD_LL_DataOutStage+0x82>
 8013cac:	e018      	b.n	8013ce0 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8013cae:	2300      	movs	r3, #0
 8013cb0:	75bb      	strb	r3, [r7, #22]
            break;
 8013cb2:	e018      	b.n	8013ce6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013cba:	b2db      	uxtb	r3, r3
 8013cbc:	4619      	mov	r1, r3
 8013cbe:	68f8      	ldr	r0, [r7, #12]
 8013cc0:	f000 fa5e 	bl	8014180 <USBD_CoreFindIF>
 8013cc4:	4603      	mov	r3, r0
 8013cc6:	75bb      	strb	r3, [r7, #22]
            break;
 8013cc8:	e00d      	b.n	8013ce6 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8013cd0:	b2db      	uxtb	r3, r3
 8013cd2:	4619      	mov	r1, r3
 8013cd4:	68f8      	ldr	r0, [r7, #12]
 8013cd6:	f000 fa60 	bl	801419a <USBD_CoreFindEP>
 8013cda:	4603      	mov	r3, r0
 8013cdc:	75bb      	strb	r3, [r7, #22]
            break;
 8013cde:	e002      	b.n	8013ce6 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	75bb      	strb	r3, [r7, #22]
            break;
 8013ce4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013ce6:	7dbb      	ldrb	r3, [r7, #22]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d119      	bne.n	8013d20 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013cf2:	b2db      	uxtb	r3, r3
 8013cf4:	2b03      	cmp	r3, #3
 8013cf6:	d113      	bne.n	8013d20 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013cf8:	7dba      	ldrb	r2, [r7, #22]
 8013cfa:	68fb      	ldr	r3, [r7, #12]
 8013cfc:	32ae      	adds	r2, #174	; 0xae
 8013cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d02:	691b      	ldr	r3, [r3, #16]
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d00b      	beq.n	8013d20 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013d08:	7dba      	ldrb	r2, [r7, #22]
 8013d0a:	68fb      	ldr	r3, [r7, #12]
 8013d0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8013d10:	7dba      	ldrb	r2, [r7, #22]
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	32ae      	adds	r2, #174	; 0xae
 8013d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d1a:	691b      	ldr	r3, [r3, #16]
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f001 f958 	bl	8014fd6 <USBD_CtlSendStatus>
 8013d26:	e032      	b.n	8013d8e <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013d28:	7afb      	ldrb	r3, [r7, #11]
 8013d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013d2e:	b2db      	uxtb	r3, r3
 8013d30:	4619      	mov	r1, r3
 8013d32:	68f8      	ldr	r0, [r7, #12]
 8013d34:	f000 fa31 	bl	801419a <USBD_CoreFindEP>
 8013d38:	4603      	mov	r3, r0
 8013d3a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013d3c:	7dbb      	ldrb	r3, [r7, #22]
 8013d3e:	2bff      	cmp	r3, #255	; 0xff
 8013d40:	d025      	beq.n	8013d8e <USBD_LL_DataOutStage+0x15c>
 8013d42:	7dbb      	ldrb	r3, [r7, #22]
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d122      	bne.n	8013d8e <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013d4e:	b2db      	uxtb	r3, r3
 8013d50:	2b03      	cmp	r3, #3
 8013d52:	d117      	bne.n	8013d84 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8013d54:	7dba      	ldrb	r2, [r7, #22]
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	32ae      	adds	r2, #174	; 0xae
 8013d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d5e:	699b      	ldr	r3, [r3, #24]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d00f      	beq.n	8013d84 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8013d64:	7dba      	ldrb	r2, [r7, #22]
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8013d6c:	7dba      	ldrb	r2, [r7, #22]
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	32ae      	adds	r2, #174	; 0xae
 8013d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d76:	699b      	ldr	r3, [r3, #24]
 8013d78:	7afa      	ldrb	r2, [r7, #11]
 8013d7a:	4611      	mov	r1, r2
 8013d7c:	68f8      	ldr	r0, [r7, #12]
 8013d7e:	4798      	blx	r3
 8013d80:	4603      	mov	r3, r0
 8013d82:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8013d84:	7dfb      	ldrb	r3, [r7, #23]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d001      	beq.n	8013d8e <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8013d8a:	7dfb      	ldrb	r3, [r7, #23]
 8013d8c:	e000      	b.n	8013d90 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8013d8e:	2300      	movs	r3, #0
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3718      	adds	r7, #24
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}

08013d98 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b086      	sub	sp, #24
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	60f8      	str	r0, [r7, #12]
 8013da0:	460b      	mov	r3, r1
 8013da2:	607a      	str	r2, [r7, #4]
 8013da4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8013da6:	7afb      	ldrb	r3, [r7, #11]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d16f      	bne.n	8013e8c <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	3314      	adds	r3, #20
 8013db0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8013db2:	68fb      	ldr	r3, [r7, #12]
 8013db4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8013db8:	2b02      	cmp	r3, #2
 8013dba:	d15a      	bne.n	8013e72 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013dbc:	693b      	ldr	r3, [r7, #16]
 8013dbe:	689a      	ldr	r2, [r3, #8]
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	68db      	ldr	r3, [r3, #12]
 8013dc4:	429a      	cmp	r2, r3
 8013dc6:	d914      	bls.n	8013df2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013dc8:	693b      	ldr	r3, [r7, #16]
 8013dca:	689a      	ldr	r2, [r3, #8]
 8013dcc:	693b      	ldr	r3, [r7, #16]
 8013dce:	68db      	ldr	r3, [r3, #12]
 8013dd0:	1ad2      	subs	r2, r2, r3
 8013dd2:	693b      	ldr	r3, [r7, #16]
 8013dd4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013dd6:	693b      	ldr	r3, [r7, #16]
 8013dd8:	689b      	ldr	r3, [r3, #8]
 8013dda:	461a      	mov	r2, r3
 8013ddc:	6879      	ldr	r1, [r7, #4]
 8013dde:	68f8      	ldr	r0, [r7, #12]
 8013de0:	f001 f8d7 	bl	8014f92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013de4:	2300      	movs	r3, #0
 8013de6:	2200      	movs	r2, #0
 8013de8:	2100      	movs	r1, #0
 8013dea:	68f8      	ldr	r0, [r7, #12]
 8013dec:	f003 fecd 	bl	8017b8a <USBD_LL_PrepareReceive>
 8013df0:	e03f      	b.n	8013e72 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8013df2:	693b      	ldr	r3, [r7, #16]
 8013df4:	68da      	ldr	r2, [r3, #12]
 8013df6:	693b      	ldr	r3, [r7, #16]
 8013df8:	689b      	ldr	r3, [r3, #8]
 8013dfa:	429a      	cmp	r2, r3
 8013dfc:	d11c      	bne.n	8013e38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013dfe:	693b      	ldr	r3, [r7, #16]
 8013e00:	685a      	ldr	r2, [r3, #4]
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013e06:	429a      	cmp	r2, r3
 8013e08:	d316      	bcc.n	8013e38 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	685a      	ldr	r2, [r3, #4]
 8013e0e:	68fb      	ldr	r3, [r7, #12]
 8013e10:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8013e14:	429a      	cmp	r2, r3
 8013e16:	d20f      	bcs.n	8013e38 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013e18:	2200      	movs	r2, #0
 8013e1a:	2100      	movs	r1, #0
 8013e1c:	68f8      	ldr	r0, [r7, #12]
 8013e1e:	f001 f8b8 	bl	8014f92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	2200      	movs	r2, #0
 8013e26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013e2a:	2300      	movs	r3, #0
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	2100      	movs	r1, #0
 8013e30:	68f8      	ldr	r0, [r7, #12]
 8013e32:	f003 feaa 	bl	8017b8a <USBD_LL_PrepareReceive>
 8013e36:	e01c      	b.n	8013e72 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013e3e:	b2db      	uxtb	r3, r3
 8013e40:	2b03      	cmp	r3, #3
 8013e42:	d10f      	bne.n	8013e64 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e4a:	68db      	ldr	r3, [r3, #12]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d009      	beq.n	8013e64 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	2200      	movs	r2, #0
 8013e54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013e5e:	68db      	ldr	r3, [r3, #12]
 8013e60:	68f8      	ldr	r0, [r7, #12]
 8013e62:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8013e64:	2180      	movs	r1, #128	; 0x80
 8013e66:	68f8      	ldr	r0, [r7, #12]
 8013e68:	f003 fde5 	bl	8017a36 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8013e6c:	68f8      	ldr	r0, [r7, #12]
 8013e6e:	f001 f8c5 	bl	8014ffc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d03a      	beq.n	8013ef2 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8013e7c:	68f8      	ldr	r0, [r7, #12]
 8013e7e:	f7ff fe42 	bl	8013b06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8013e82:	68fb      	ldr	r3, [r7, #12]
 8013e84:	2200      	movs	r2, #0
 8013e86:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8013e8a:	e032      	b.n	8013ef2 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8013e8c:	7afb      	ldrb	r3, [r7, #11]
 8013e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	4619      	mov	r1, r3
 8013e96:	68f8      	ldr	r0, [r7, #12]
 8013e98:	f000 f97f 	bl	801419a <USBD_CoreFindEP>
 8013e9c:	4603      	mov	r3, r0
 8013e9e:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013ea0:	7dfb      	ldrb	r3, [r7, #23]
 8013ea2:	2bff      	cmp	r3, #255	; 0xff
 8013ea4:	d025      	beq.n	8013ef2 <USBD_LL_DataInStage+0x15a>
 8013ea6:	7dfb      	ldrb	r3, [r7, #23]
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d122      	bne.n	8013ef2 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013eb2:	b2db      	uxtb	r3, r3
 8013eb4:	2b03      	cmp	r3, #3
 8013eb6:	d11c      	bne.n	8013ef2 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013eb8:	7dfa      	ldrb	r2, [r7, #23]
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	32ae      	adds	r2, #174	; 0xae
 8013ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013ec2:	695b      	ldr	r3, [r3, #20]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d014      	beq.n	8013ef2 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013ec8:	7dfa      	ldrb	r2, [r7, #23]
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8013ed0:	7dfa      	ldrb	r2, [r7, #23]
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	32ae      	adds	r2, #174	; 0xae
 8013ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013eda:	695b      	ldr	r3, [r3, #20]
 8013edc:	7afa      	ldrb	r2, [r7, #11]
 8013ede:	4611      	mov	r1, r2
 8013ee0:	68f8      	ldr	r0, [r7, #12]
 8013ee2:	4798      	blx	r3
 8013ee4:	4603      	mov	r3, r0
 8013ee6:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013ee8:	7dbb      	ldrb	r3, [r7, #22]
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d001      	beq.n	8013ef2 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013eee:	7dbb      	ldrb	r3, [r7, #22]
 8013ef0:	e000      	b.n	8013ef4 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8013ef2:	2300      	movs	r3, #0
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3718      	adds	r7, #24
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}

08013efc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013efc:	b580      	push	{r7, lr}
 8013efe:	b084      	sub	sp, #16
 8013f00:	af00      	add	r7, sp, #0
 8013f02:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8013f04:	2300      	movs	r3, #0
 8013f06:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	2201      	movs	r2, #1
 8013f0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2200      	movs	r2, #0
 8013f14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2200      	movs	r2, #0
 8013f22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	2200      	movs	r2, #0
 8013f2a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d014      	beq.n	8013f62 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f3e:	685b      	ldr	r3, [r3, #4]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d00e      	beq.n	8013f62 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8013f4a:	685b      	ldr	r3, [r3, #4]
 8013f4c:	687a      	ldr	r2, [r7, #4]
 8013f4e:	6852      	ldr	r2, [r2, #4]
 8013f50:	b2d2      	uxtb	r2, r2
 8013f52:	4611      	mov	r1, r2
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	4798      	blx	r3
 8013f58:	4603      	mov	r3, r0
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d001      	beq.n	8013f62 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8013f5e:	2303      	movs	r3, #3
 8013f60:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f62:	2340      	movs	r3, #64	; 0x40
 8013f64:	2200      	movs	r2, #0
 8013f66:	2100      	movs	r1, #0
 8013f68:	6878      	ldr	r0, [r7, #4]
 8013f6a:	f003 fd00 	bl	801796e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	2201      	movs	r2, #1
 8013f72:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	2240      	movs	r2, #64	; 0x40
 8013f7a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8013f7e:	2340      	movs	r3, #64	; 0x40
 8013f80:	2200      	movs	r2, #0
 8013f82:	2180      	movs	r1, #128	; 0x80
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f003 fcf2 	bl	801796e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	2201      	movs	r2, #1
 8013f8e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	2240      	movs	r2, #64	; 0x40
 8013f94:	621a      	str	r2, [r3, #32]

  return ret;
 8013f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8013f98:	4618      	mov	r0, r3
 8013f9a:	3710      	adds	r7, #16
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8013fa0:	b480      	push	{r7}
 8013fa2:	b083      	sub	sp, #12
 8013fa4:	af00      	add	r7, sp, #0
 8013fa6:	6078      	str	r0, [r7, #4]
 8013fa8:	460b      	mov	r3, r1
 8013faa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	78fa      	ldrb	r2, [r7, #3]
 8013fb0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8013fb2:	2300      	movs	r3, #0
}
 8013fb4:	4618      	mov	r0, r3
 8013fb6:	370c      	adds	r7, #12
 8013fb8:	46bd      	mov	sp, r7
 8013fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fbe:	4770      	bx	lr

08013fc0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8013fc0:	b480      	push	{r7}
 8013fc2:	b083      	sub	sp, #12
 8013fc4:	af00      	add	r7, sp, #0
 8013fc6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fce:	b2da      	uxtb	r2, r3
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	2204      	movs	r2, #4
 8013fda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8013fde:	2300      	movs	r3, #0
}
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	370c      	adds	r7, #12
 8013fe4:	46bd      	mov	sp, r7
 8013fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fea:	4770      	bx	lr

08013fec <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013fec:	b480      	push	{r7}
 8013fee:	b083      	sub	sp, #12
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8013ff4:	687b      	ldr	r3, [r7, #4]
 8013ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013ffa:	b2db      	uxtb	r3, r3
 8013ffc:	2b04      	cmp	r3, #4
 8013ffe:	d106      	bne.n	801400e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014006:	b2da      	uxtb	r2, r3
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801400e:	2300      	movs	r3, #0
}
 8014010:	4618      	mov	r0, r3
 8014012:	370c      	adds	r7, #12
 8014014:	46bd      	mov	sp, r7
 8014016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801401a:	4770      	bx	lr

0801401c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801401c:	b580      	push	{r7, lr}
 801401e:	b082      	sub	sp, #8
 8014020:	af00      	add	r7, sp, #0
 8014022:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801402a:	b2db      	uxtb	r3, r3
 801402c:	2b03      	cmp	r3, #3
 801402e:	d110      	bne.n	8014052 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014036:	2b00      	cmp	r3, #0
 8014038:	d00b      	beq.n	8014052 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014040:	69db      	ldr	r3, [r3, #28]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d005      	beq.n	8014052 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801404c:	69db      	ldr	r3, [r3, #28]
 801404e:	6878      	ldr	r0, [r7, #4]
 8014050:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014052:	2300      	movs	r3, #0
}
 8014054:	4618      	mov	r0, r3
 8014056:	3708      	adds	r7, #8
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}

0801405c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b082      	sub	sp, #8
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	460b      	mov	r3, r1
 8014066:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	32ae      	adds	r2, #174	; 0xae
 8014072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d101      	bne.n	801407e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801407a:	2303      	movs	r3, #3
 801407c:	e01c      	b.n	80140b8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014084:	b2db      	uxtb	r3, r3
 8014086:	2b03      	cmp	r3, #3
 8014088:	d115      	bne.n	80140b6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	32ae      	adds	r2, #174	; 0xae
 8014094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014098:	6a1b      	ldr	r3, [r3, #32]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d00b      	beq.n	80140b6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 801409e:	687b      	ldr	r3, [r7, #4]
 80140a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	32ae      	adds	r2, #174	; 0xae
 80140a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140ac:	6a1b      	ldr	r3, [r3, #32]
 80140ae:	78fa      	ldrb	r2, [r7, #3]
 80140b0:	4611      	mov	r1, r2
 80140b2:	6878      	ldr	r0, [r7, #4]
 80140b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80140b6:	2300      	movs	r3, #0
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	3708      	adds	r7, #8
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}

080140c0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b082      	sub	sp, #8
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	460b      	mov	r3, r1
 80140ca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	32ae      	adds	r2, #174	; 0xae
 80140d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140da:	2b00      	cmp	r3, #0
 80140dc:	d101      	bne.n	80140e2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80140de:	2303      	movs	r3, #3
 80140e0:	e01c      	b.n	801411c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140e8:	b2db      	uxtb	r3, r3
 80140ea:	2b03      	cmp	r3, #3
 80140ec:	d115      	bne.n	801411a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	32ae      	adds	r2, #174	; 0xae
 80140f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d00b      	beq.n	801411a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	32ae      	adds	r2, #174	; 0xae
 801410c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014112:	78fa      	ldrb	r2, [r7, #3]
 8014114:	4611      	mov	r1, r2
 8014116:	6878      	ldr	r0, [r7, #4]
 8014118:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801411a:	2300      	movs	r3, #0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3708      	adds	r7, #8
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}

08014124 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801412c:	2300      	movs	r3, #0
}
 801412e:	4618      	mov	r0, r3
 8014130:	370c      	adds	r7, #12
 8014132:	46bd      	mov	sp, r7
 8014134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014138:	4770      	bx	lr

0801413a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801413a:	b580      	push	{r7, lr}
 801413c:	b084      	sub	sp, #16
 801413e:	af00      	add	r7, sp, #0
 8014140:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8014142:	2300      	movs	r3, #0
 8014144:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	2201      	movs	r2, #1
 801414a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014154:	2b00      	cmp	r3, #0
 8014156:	d00e      	beq.n	8014176 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801415e:	685b      	ldr	r3, [r3, #4]
 8014160:	687a      	ldr	r2, [r7, #4]
 8014162:	6852      	ldr	r2, [r2, #4]
 8014164:	b2d2      	uxtb	r2, r2
 8014166:	4611      	mov	r1, r2
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	4798      	blx	r3
 801416c:	4603      	mov	r3, r0
 801416e:	2b00      	cmp	r3, #0
 8014170:	d001      	beq.n	8014176 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014172:	2303      	movs	r3, #3
 8014174:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014176:	7bfb      	ldrb	r3, [r7, #15]
}
 8014178:	4618      	mov	r0, r3
 801417a:	3710      	adds	r7, #16
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}

08014180 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014180:	b480      	push	{r7}
 8014182:	b083      	sub	sp, #12
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
 8014188:	460b      	mov	r3, r1
 801418a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801418c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801418e:	4618      	mov	r0, r3
 8014190:	370c      	adds	r7, #12
 8014192:	46bd      	mov	sp, r7
 8014194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014198:	4770      	bx	lr

0801419a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801419a:	b480      	push	{r7}
 801419c:	b083      	sub	sp, #12
 801419e:	af00      	add	r7, sp, #0
 80141a0:	6078      	str	r0, [r7, #4]
 80141a2:	460b      	mov	r3, r1
 80141a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80141a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80141a8:	4618      	mov	r0, r3
 80141aa:	370c      	adds	r7, #12
 80141ac:	46bd      	mov	sp, r7
 80141ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141b2:	4770      	bx	lr

080141b4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b086      	sub	sp, #24
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
 80141bc:	460b      	mov	r3, r1
 80141be:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80141c8:	2300      	movs	r3, #0
 80141ca:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	885b      	ldrh	r3, [r3, #2]
 80141d0:	b29a      	uxth	r2, r3
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	781b      	ldrb	r3, [r3, #0]
 80141d6:	b29b      	uxth	r3, r3
 80141d8:	429a      	cmp	r2, r3
 80141da:	d920      	bls.n	801421e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80141dc:	68fb      	ldr	r3, [r7, #12]
 80141de:	781b      	ldrb	r3, [r3, #0]
 80141e0:	b29b      	uxth	r3, r3
 80141e2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80141e4:	e013      	b.n	801420e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80141e6:	f107 030a 	add.w	r3, r7, #10
 80141ea:	4619      	mov	r1, r3
 80141ec:	6978      	ldr	r0, [r7, #20]
 80141ee:	f000 f81b 	bl	8014228 <USBD_GetNextDesc>
 80141f2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	785b      	ldrb	r3, [r3, #1]
 80141f8:	2b05      	cmp	r3, #5
 80141fa:	d108      	bne.n	801420e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80141fc:	697b      	ldr	r3, [r7, #20]
 80141fe:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	789b      	ldrb	r3, [r3, #2]
 8014204:	78fa      	ldrb	r2, [r7, #3]
 8014206:	429a      	cmp	r2, r3
 8014208:	d008      	beq.n	801421c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801420a:	2300      	movs	r3, #0
 801420c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	885b      	ldrh	r3, [r3, #2]
 8014212:	b29a      	uxth	r2, r3
 8014214:	897b      	ldrh	r3, [r7, #10]
 8014216:	429a      	cmp	r2, r3
 8014218:	d8e5      	bhi.n	80141e6 <USBD_GetEpDesc+0x32>
 801421a:	e000      	b.n	801421e <USBD_GetEpDesc+0x6a>
          break;
 801421c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801421e:	693b      	ldr	r3, [r7, #16]
}
 8014220:	4618      	mov	r0, r3
 8014222:	3718      	adds	r7, #24
 8014224:	46bd      	mov	sp, r7
 8014226:	bd80      	pop	{r7, pc}

08014228 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014228:	b480      	push	{r7}
 801422a:	b085      	sub	sp, #20
 801422c:	af00      	add	r7, sp, #0
 801422e:	6078      	str	r0, [r7, #4]
 8014230:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014236:	683b      	ldr	r3, [r7, #0]
 8014238:	881a      	ldrh	r2, [r3, #0]
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	b29b      	uxth	r3, r3
 8014240:	4413      	add	r3, r2
 8014242:	b29a      	uxth	r2, r3
 8014244:	683b      	ldr	r3, [r7, #0]
 8014246:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	781b      	ldrb	r3, [r3, #0]
 801424c:	461a      	mov	r2, r3
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	4413      	add	r3, r2
 8014252:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014254:	68fb      	ldr	r3, [r7, #12]
}
 8014256:	4618      	mov	r0, r3
 8014258:	3714      	adds	r7, #20
 801425a:	46bd      	mov	sp, r7
 801425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014260:	4770      	bx	lr

08014262 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014262:	b480      	push	{r7}
 8014264:	b087      	sub	sp, #28
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801426e:	697b      	ldr	r3, [r7, #20]
 8014270:	781b      	ldrb	r3, [r3, #0]
 8014272:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014274:	697b      	ldr	r3, [r7, #20]
 8014276:	3301      	adds	r3, #1
 8014278:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014280:	8a3b      	ldrh	r3, [r7, #16]
 8014282:	021b      	lsls	r3, r3, #8
 8014284:	b21a      	sxth	r2, r3
 8014286:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801428a:	4313      	orrs	r3, r2
 801428c:	b21b      	sxth	r3, r3
 801428e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014290:	89fb      	ldrh	r3, [r7, #14]
}
 8014292:	4618      	mov	r0, r3
 8014294:	371c      	adds	r7, #28
 8014296:	46bd      	mov	sp, r7
 8014298:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429c:	4770      	bx	lr
	...

080142a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80142a0:	b580      	push	{r7, lr}
 80142a2:	b084      	sub	sp, #16
 80142a4:	af00      	add	r7, sp, #0
 80142a6:	6078      	str	r0, [r7, #4]
 80142a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80142aa:	2300      	movs	r3, #0
 80142ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	781b      	ldrb	r3, [r3, #0]
 80142b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80142b6:	2b40      	cmp	r3, #64	; 0x40
 80142b8:	d005      	beq.n	80142c6 <USBD_StdDevReq+0x26>
 80142ba:	2b40      	cmp	r3, #64	; 0x40
 80142bc:	d857      	bhi.n	801436e <USBD_StdDevReq+0xce>
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d00f      	beq.n	80142e2 <USBD_StdDevReq+0x42>
 80142c2:	2b20      	cmp	r3, #32
 80142c4:	d153      	bne.n	801436e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	32ae      	adds	r2, #174	; 0xae
 80142d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142d4:	689b      	ldr	r3, [r3, #8]
 80142d6:	6839      	ldr	r1, [r7, #0]
 80142d8:	6878      	ldr	r0, [r7, #4]
 80142da:	4798      	blx	r3
 80142dc:	4603      	mov	r3, r0
 80142de:	73fb      	strb	r3, [r7, #15]
      break;
 80142e0:	e04a      	b.n	8014378 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80142e2:	683b      	ldr	r3, [r7, #0]
 80142e4:	785b      	ldrb	r3, [r3, #1]
 80142e6:	2b09      	cmp	r3, #9
 80142e8:	d83b      	bhi.n	8014362 <USBD_StdDevReq+0xc2>
 80142ea:	a201      	add	r2, pc, #4	; (adr r2, 80142f0 <USBD_StdDevReq+0x50>)
 80142ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142f0:	08014345 	.word	0x08014345
 80142f4:	08014359 	.word	0x08014359
 80142f8:	08014363 	.word	0x08014363
 80142fc:	0801434f 	.word	0x0801434f
 8014300:	08014363 	.word	0x08014363
 8014304:	08014323 	.word	0x08014323
 8014308:	08014319 	.word	0x08014319
 801430c:	08014363 	.word	0x08014363
 8014310:	0801433b 	.word	0x0801433b
 8014314:	0801432d 	.word	0x0801432d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014318:	6839      	ldr	r1, [r7, #0]
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f000 fa3c 	bl	8014798 <USBD_GetDescriptor>
          break;
 8014320:	e024      	b.n	801436c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8014322:	6839      	ldr	r1, [r7, #0]
 8014324:	6878      	ldr	r0, [r7, #4]
 8014326:	f000 fbcb 	bl	8014ac0 <USBD_SetAddress>
          break;
 801432a:	e01f      	b.n	801436c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801432c:	6839      	ldr	r1, [r7, #0]
 801432e:	6878      	ldr	r0, [r7, #4]
 8014330:	f000 fc0a 	bl	8014b48 <USBD_SetConfig>
 8014334:	4603      	mov	r3, r0
 8014336:	73fb      	strb	r3, [r7, #15]
          break;
 8014338:	e018      	b.n	801436c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801433a:	6839      	ldr	r1, [r7, #0]
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f000 fcad 	bl	8014c9c <USBD_GetConfig>
          break;
 8014342:	e013      	b.n	801436c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014344:	6839      	ldr	r1, [r7, #0]
 8014346:	6878      	ldr	r0, [r7, #4]
 8014348:	f000 fcde 	bl	8014d08 <USBD_GetStatus>
          break;
 801434c:	e00e      	b.n	801436c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801434e:	6839      	ldr	r1, [r7, #0]
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f000 fd0d 	bl	8014d70 <USBD_SetFeature>
          break;
 8014356:	e009      	b.n	801436c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014358:	6839      	ldr	r1, [r7, #0]
 801435a:	6878      	ldr	r0, [r7, #4]
 801435c:	f000 fd31 	bl	8014dc2 <USBD_ClrFeature>
          break;
 8014360:	e004      	b.n	801436c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014362:	6839      	ldr	r1, [r7, #0]
 8014364:	6878      	ldr	r0, [r7, #4]
 8014366:	f000 fd88 	bl	8014e7a <USBD_CtlError>
          break;
 801436a:	bf00      	nop
      }
      break;
 801436c:	e004      	b.n	8014378 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801436e:	6839      	ldr	r1, [r7, #0]
 8014370:	6878      	ldr	r0, [r7, #4]
 8014372:	f000 fd82 	bl	8014e7a <USBD_CtlError>
      break;
 8014376:	bf00      	nop
  }

  return ret;
 8014378:	7bfb      	ldrb	r3, [r7, #15]
}
 801437a:	4618      	mov	r0, r3
 801437c:	3710      	adds	r7, #16
 801437e:	46bd      	mov	sp, r7
 8014380:	bd80      	pop	{r7, pc}
 8014382:	bf00      	nop

08014384 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014384:	b580      	push	{r7, lr}
 8014386:	b084      	sub	sp, #16
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801438e:	2300      	movs	r3, #0
 8014390:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014392:	683b      	ldr	r3, [r7, #0]
 8014394:	781b      	ldrb	r3, [r3, #0]
 8014396:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801439a:	2b40      	cmp	r3, #64	; 0x40
 801439c:	d005      	beq.n	80143aa <USBD_StdItfReq+0x26>
 801439e:	2b40      	cmp	r3, #64	; 0x40
 80143a0:	d852      	bhi.n	8014448 <USBD_StdItfReq+0xc4>
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	d001      	beq.n	80143aa <USBD_StdItfReq+0x26>
 80143a6:	2b20      	cmp	r3, #32
 80143a8:	d14e      	bne.n	8014448 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143b0:	b2db      	uxtb	r3, r3
 80143b2:	3b01      	subs	r3, #1
 80143b4:	2b02      	cmp	r3, #2
 80143b6:	d840      	bhi.n	801443a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	889b      	ldrh	r3, [r3, #4]
 80143bc:	b2db      	uxtb	r3, r3
 80143be:	2b01      	cmp	r3, #1
 80143c0:	d836      	bhi.n	8014430 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	889b      	ldrh	r3, [r3, #4]
 80143c6:	b2db      	uxtb	r3, r3
 80143c8:	4619      	mov	r1, r3
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	f7ff fed8 	bl	8014180 <USBD_CoreFindIF>
 80143d0:	4603      	mov	r3, r0
 80143d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80143d4:	7bbb      	ldrb	r3, [r7, #14]
 80143d6:	2bff      	cmp	r3, #255	; 0xff
 80143d8:	d01d      	beq.n	8014416 <USBD_StdItfReq+0x92>
 80143da:	7bbb      	ldrb	r3, [r7, #14]
 80143dc:	2b00      	cmp	r3, #0
 80143de:	d11a      	bne.n	8014416 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80143e0:	7bba      	ldrb	r2, [r7, #14]
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	32ae      	adds	r2, #174	; 0xae
 80143e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143ea:	689b      	ldr	r3, [r3, #8]
 80143ec:	2b00      	cmp	r3, #0
 80143ee:	d00f      	beq.n	8014410 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80143f0:	7bba      	ldrb	r2, [r7, #14]
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80143f8:	7bba      	ldrb	r2, [r7, #14]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	32ae      	adds	r2, #174	; 0xae
 80143fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014402:	689b      	ldr	r3, [r3, #8]
 8014404:	6839      	ldr	r1, [r7, #0]
 8014406:	6878      	ldr	r0, [r7, #4]
 8014408:	4798      	blx	r3
 801440a:	4603      	mov	r3, r0
 801440c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801440e:	e004      	b.n	801441a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014410:	2303      	movs	r3, #3
 8014412:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014414:	e001      	b.n	801441a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014416:	2303      	movs	r3, #3
 8014418:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	88db      	ldrh	r3, [r3, #6]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d110      	bne.n	8014444 <USBD_StdItfReq+0xc0>
 8014422:	7bfb      	ldrb	r3, [r7, #15]
 8014424:	2b00      	cmp	r3, #0
 8014426:	d10d      	bne.n	8014444 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	f000 fdd4 	bl	8014fd6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801442e:	e009      	b.n	8014444 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014430:	6839      	ldr	r1, [r7, #0]
 8014432:	6878      	ldr	r0, [r7, #4]
 8014434:	f000 fd21 	bl	8014e7a <USBD_CtlError>
          break;
 8014438:	e004      	b.n	8014444 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801443a:	6839      	ldr	r1, [r7, #0]
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f000 fd1c 	bl	8014e7a <USBD_CtlError>
          break;
 8014442:	e000      	b.n	8014446 <USBD_StdItfReq+0xc2>
          break;
 8014444:	bf00      	nop
      }
      break;
 8014446:	e004      	b.n	8014452 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014448:	6839      	ldr	r1, [r7, #0]
 801444a:	6878      	ldr	r0, [r7, #4]
 801444c:	f000 fd15 	bl	8014e7a <USBD_CtlError>
      break;
 8014450:	bf00      	nop
  }

  return ret;
 8014452:	7bfb      	ldrb	r3, [r7, #15]
}
 8014454:	4618      	mov	r0, r3
 8014456:	3710      	adds	r7, #16
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b084      	sub	sp, #16
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
 8014464:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014466:	2300      	movs	r3, #0
 8014468:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801446a:	683b      	ldr	r3, [r7, #0]
 801446c:	889b      	ldrh	r3, [r3, #4]
 801446e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014470:	683b      	ldr	r3, [r7, #0]
 8014472:	781b      	ldrb	r3, [r3, #0]
 8014474:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014478:	2b40      	cmp	r3, #64	; 0x40
 801447a:	d007      	beq.n	801448c <USBD_StdEPReq+0x30>
 801447c:	2b40      	cmp	r3, #64	; 0x40
 801447e:	f200 817f 	bhi.w	8014780 <USBD_StdEPReq+0x324>
 8014482:	2b00      	cmp	r3, #0
 8014484:	d02a      	beq.n	80144dc <USBD_StdEPReq+0x80>
 8014486:	2b20      	cmp	r3, #32
 8014488:	f040 817a 	bne.w	8014780 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801448c:	7bbb      	ldrb	r3, [r7, #14]
 801448e:	4619      	mov	r1, r3
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f7ff fe82 	bl	801419a <USBD_CoreFindEP>
 8014496:	4603      	mov	r3, r0
 8014498:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801449a:	7b7b      	ldrb	r3, [r7, #13]
 801449c:	2bff      	cmp	r3, #255	; 0xff
 801449e:	f000 8174 	beq.w	801478a <USBD_StdEPReq+0x32e>
 80144a2:	7b7b      	ldrb	r3, [r7, #13]
 80144a4:	2b00      	cmp	r3, #0
 80144a6:	f040 8170 	bne.w	801478a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80144aa:	7b7a      	ldrb	r2, [r7, #13]
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80144b2:	7b7a      	ldrb	r2, [r7, #13]
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	32ae      	adds	r2, #174	; 0xae
 80144b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144bc:	689b      	ldr	r3, [r3, #8]
 80144be:	2b00      	cmp	r3, #0
 80144c0:	f000 8163 	beq.w	801478a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80144c4:	7b7a      	ldrb	r2, [r7, #13]
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	32ae      	adds	r2, #174	; 0xae
 80144ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80144ce:	689b      	ldr	r3, [r3, #8]
 80144d0:	6839      	ldr	r1, [r7, #0]
 80144d2:	6878      	ldr	r0, [r7, #4]
 80144d4:	4798      	blx	r3
 80144d6:	4603      	mov	r3, r0
 80144d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80144da:	e156      	b.n	801478a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80144dc:	683b      	ldr	r3, [r7, #0]
 80144de:	785b      	ldrb	r3, [r3, #1]
 80144e0:	2b03      	cmp	r3, #3
 80144e2:	d008      	beq.n	80144f6 <USBD_StdEPReq+0x9a>
 80144e4:	2b03      	cmp	r3, #3
 80144e6:	f300 8145 	bgt.w	8014774 <USBD_StdEPReq+0x318>
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	f000 809b 	beq.w	8014626 <USBD_StdEPReq+0x1ca>
 80144f0:	2b01      	cmp	r3, #1
 80144f2:	d03c      	beq.n	801456e <USBD_StdEPReq+0x112>
 80144f4:	e13e      	b.n	8014774 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	2b02      	cmp	r3, #2
 8014500:	d002      	beq.n	8014508 <USBD_StdEPReq+0xac>
 8014502:	2b03      	cmp	r3, #3
 8014504:	d016      	beq.n	8014534 <USBD_StdEPReq+0xd8>
 8014506:	e02c      	b.n	8014562 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014508:	7bbb      	ldrb	r3, [r7, #14]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d00d      	beq.n	801452a <USBD_StdEPReq+0xce>
 801450e:	7bbb      	ldrb	r3, [r7, #14]
 8014510:	2b80      	cmp	r3, #128	; 0x80
 8014512:	d00a      	beq.n	801452a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014514:	7bbb      	ldrb	r3, [r7, #14]
 8014516:	4619      	mov	r1, r3
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f003 fa8c 	bl	8017a36 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801451e:	2180      	movs	r1, #128	; 0x80
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f003 fa88 	bl	8017a36 <USBD_LL_StallEP>
 8014526:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014528:	e020      	b.n	801456c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801452a:	6839      	ldr	r1, [r7, #0]
 801452c:	6878      	ldr	r0, [r7, #4]
 801452e:	f000 fca4 	bl	8014e7a <USBD_CtlError>
              break;
 8014532:	e01b      	b.n	801456c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	885b      	ldrh	r3, [r3, #2]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d10e      	bne.n	801455a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801453c:	7bbb      	ldrb	r3, [r7, #14]
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00b      	beq.n	801455a <USBD_StdEPReq+0xfe>
 8014542:	7bbb      	ldrb	r3, [r7, #14]
 8014544:	2b80      	cmp	r3, #128	; 0x80
 8014546:	d008      	beq.n	801455a <USBD_StdEPReq+0xfe>
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	88db      	ldrh	r3, [r3, #6]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d104      	bne.n	801455a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014550:	7bbb      	ldrb	r3, [r7, #14]
 8014552:	4619      	mov	r1, r3
 8014554:	6878      	ldr	r0, [r7, #4]
 8014556:	f003 fa6e 	bl	8017a36 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801455a:	6878      	ldr	r0, [r7, #4]
 801455c:	f000 fd3b 	bl	8014fd6 <USBD_CtlSendStatus>

              break;
 8014560:	e004      	b.n	801456c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014562:	6839      	ldr	r1, [r7, #0]
 8014564:	6878      	ldr	r0, [r7, #4]
 8014566:	f000 fc88 	bl	8014e7a <USBD_CtlError>
              break;
 801456a:	bf00      	nop
          }
          break;
 801456c:	e107      	b.n	801477e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014574:	b2db      	uxtb	r3, r3
 8014576:	2b02      	cmp	r3, #2
 8014578:	d002      	beq.n	8014580 <USBD_StdEPReq+0x124>
 801457a:	2b03      	cmp	r3, #3
 801457c:	d016      	beq.n	80145ac <USBD_StdEPReq+0x150>
 801457e:	e04b      	b.n	8014618 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014580:	7bbb      	ldrb	r3, [r7, #14]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d00d      	beq.n	80145a2 <USBD_StdEPReq+0x146>
 8014586:	7bbb      	ldrb	r3, [r7, #14]
 8014588:	2b80      	cmp	r3, #128	; 0x80
 801458a:	d00a      	beq.n	80145a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801458c:	7bbb      	ldrb	r3, [r7, #14]
 801458e:	4619      	mov	r1, r3
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f003 fa50 	bl	8017a36 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014596:	2180      	movs	r1, #128	; 0x80
 8014598:	6878      	ldr	r0, [r7, #4]
 801459a:	f003 fa4c 	bl	8017a36 <USBD_LL_StallEP>
 801459e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80145a0:	e040      	b.n	8014624 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80145a2:	6839      	ldr	r1, [r7, #0]
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f000 fc68 	bl	8014e7a <USBD_CtlError>
              break;
 80145aa:	e03b      	b.n	8014624 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80145ac:	683b      	ldr	r3, [r7, #0]
 80145ae:	885b      	ldrh	r3, [r3, #2]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d136      	bne.n	8014622 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80145b4:	7bbb      	ldrb	r3, [r7, #14]
 80145b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d004      	beq.n	80145c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80145be:	7bbb      	ldrb	r3, [r7, #14]
 80145c0:	4619      	mov	r1, r3
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f003 fa56 	bl	8017a74 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f000 fd04 	bl	8014fd6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80145ce:	7bbb      	ldrb	r3, [r7, #14]
 80145d0:	4619      	mov	r1, r3
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f7ff fde1 	bl	801419a <USBD_CoreFindEP>
 80145d8:	4603      	mov	r3, r0
 80145da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80145dc:	7b7b      	ldrb	r3, [r7, #13]
 80145de:	2bff      	cmp	r3, #255	; 0xff
 80145e0:	d01f      	beq.n	8014622 <USBD_StdEPReq+0x1c6>
 80145e2:	7b7b      	ldrb	r3, [r7, #13]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d11c      	bne.n	8014622 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80145e8:	7b7a      	ldrb	r2, [r7, #13]
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80145f0:	7b7a      	ldrb	r2, [r7, #13]
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	32ae      	adds	r2, #174	; 0xae
 80145f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80145fa:	689b      	ldr	r3, [r3, #8]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d010      	beq.n	8014622 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014600:	7b7a      	ldrb	r2, [r7, #13]
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	32ae      	adds	r2, #174	; 0xae
 8014606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801460a:	689b      	ldr	r3, [r3, #8]
 801460c:	6839      	ldr	r1, [r7, #0]
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	4798      	blx	r3
 8014612:	4603      	mov	r3, r0
 8014614:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014616:	e004      	b.n	8014622 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014618:	6839      	ldr	r1, [r7, #0]
 801461a:	6878      	ldr	r0, [r7, #4]
 801461c:	f000 fc2d 	bl	8014e7a <USBD_CtlError>
              break;
 8014620:	e000      	b.n	8014624 <USBD_StdEPReq+0x1c8>
              break;
 8014622:	bf00      	nop
          }
          break;
 8014624:	e0ab      	b.n	801477e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014626:	687b      	ldr	r3, [r7, #4]
 8014628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801462c:	b2db      	uxtb	r3, r3
 801462e:	2b02      	cmp	r3, #2
 8014630:	d002      	beq.n	8014638 <USBD_StdEPReq+0x1dc>
 8014632:	2b03      	cmp	r3, #3
 8014634:	d032      	beq.n	801469c <USBD_StdEPReq+0x240>
 8014636:	e097      	b.n	8014768 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014638:	7bbb      	ldrb	r3, [r7, #14]
 801463a:	2b00      	cmp	r3, #0
 801463c:	d007      	beq.n	801464e <USBD_StdEPReq+0x1f2>
 801463e:	7bbb      	ldrb	r3, [r7, #14]
 8014640:	2b80      	cmp	r3, #128	; 0x80
 8014642:	d004      	beq.n	801464e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014644:	6839      	ldr	r1, [r7, #0]
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f000 fc17 	bl	8014e7a <USBD_CtlError>
                break;
 801464c:	e091      	b.n	8014772 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801464e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014652:	2b00      	cmp	r3, #0
 8014654:	da0b      	bge.n	801466e <USBD_StdEPReq+0x212>
 8014656:	7bbb      	ldrb	r3, [r7, #14]
 8014658:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801465c:	4613      	mov	r3, r2
 801465e:	009b      	lsls	r3, r3, #2
 8014660:	4413      	add	r3, r2
 8014662:	009b      	lsls	r3, r3, #2
 8014664:	3310      	adds	r3, #16
 8014666:	687a      	ldr	r2, [r7, #4]
 8014668:	4413      	add	r3, r2
 801466a:	3304      	adds	r3, #4
 801466c:	e00b      	b.n	8014686 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801466e:	7bbb      	ldrb	r3, [r7, #14]
 8014670:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014674:	4613      	mov	r3, r2
 8014676:	009b      	lsls	r3, r3, #2
 8014678:	4413      	add	r3, r2
 801467a:	009b      	lsls	r3, r3, #2
 801467c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	4413      	add	r3, r2
 8014684:	3304      	adds	r3, #4
 8014686:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014688:	68bb      	ldr	r3, [r7, #8]
 801468a:	2200      	movs	r2, #0
 801468c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	2202      	movs	r2, #2
 8014692:	4619      	mov	r1, r3
 8014694:	6878      	ldr	r0, [r7, #4]
 8014696:	f000 fc61 	bl	8014f5c <USBD_CtlSendData>
              break;
 801469a:	e06a      	b.n	8014772 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801469c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	da11      	bge.n	80146c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80146a4:	7bbb      	ldrb	r3, [r7, #14]
 80146a6:	f003 020f 	and.w	r2, r3, #15
 80146aa:	6879      	ldr	r1, [r7, #4]
 80146ac:	4613      	mov	r3, r2
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	4413      	add	r3, r2
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	440b      	add	r3, r1
 80146b6:	3324      	adds	r3, #36	; 0x24
 80146b8:	881b      	ldrh	r3, [r3, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d117      	bne.n	80146ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80146be:	6839      	ldr	r1, [r7, #0]
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f000 fbda 	bl	8014e7a <USBD_CtlError>
                  break;
 80146c6:	e054      	b.n	8014772 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80146c8:	7bbb      	ldrb	r3, [r7, #14]
 80146ca:	f003 020f 	and.w	r2, r3, #15
 80146ce:	6879      	ldr	r1, [r7, #4]
 80146d0:	4613      	mov	r3, r2
 80146d2:	009b      	lsls	r3, r3, #2
 80146d4:	4413      	add	r3, r2
 80146d6:	009b      	lsls	r3, r3, #2
 80146d8:	440b      	add	r3, r1
 80146da:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80146de:	881b      	ldrh	r3, [r3, #0]
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	d104      	bne.n	80146ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80146e4:	6839      	ldr	r1, [r7, #0]
 80146e6:	6878      	ldr	r0, [r7, #4]
 80146e8:	f000 fbc7 	bl	8014e7a <USBD_CtlError>
                  break;
 80146ec:	e041      	b.n	8014772 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80146ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80146f2:	2b00      	cmp	r3, #0
 80146f4:	da0b      	bge.n	801470e <USBD_StdEPReq+0x2b2>
 80146f6:	7bbb      	ldrb	r3, [r7, #14]
 80146f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80146fc:	4613      	mov	r3, r2
 80146fe:	009b      	lsls	r3, r3, #2
 8014700:	4413      	add	r3, r2
 8014702:	009b      	lsls	r3, r3, #2
 8014704:	3310      	adds	r3, #16
 8014706:	687a      	ldr	r2, [r7, #4]
 8014708:	4413      	add	r3, r2
 801470a:	3304      	adds	r3, #4
 801470c:	e00b      	b.n	8014726 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801470e:	7bbb      	ldrb	r3, [r7, #14]
 8014710:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014714:	4613      	mov	r3, r2
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	4413      	add	r3, r2
 801471a:	009b      	lsls	r3, r3, #2
 801471c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014720:	687a      	ldr	r2, [r7, #4]
 8014722:	4413      	add	r3, r2
 8014724:	3304      	adds	r3, #4
 8014726:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014728:	7bbb      	ldrb	r3, [r7, #14]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d002      	beq.n	8014734 <USBD_StdEPReq+0x2d8>
 801472e:	7bbb      	ldrb	r3, [r7, #14]
 8014730:	2b80      	cmp	r3, #128	; 0x80
 8014732:	d103      	bne.n	801473c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014734:	68bb      	ldr	r3, [r7, #8]
 8014736:	2200      	movs	r2, #0
 8014738:	601a      	str	r2, [r3, #0]
 801473a:	e00e      	b.n	801475a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801473c:	7bbb      	ldrb	r3, [r7, #14]
 801473e:	4619      	mov	r1, r3
 8014740:	6878      	ldr	r0, [r7, #4]
 8014742:	f003 f9b6 	bl	8017ab2 <USBD_LL_IsStallEP>
 8014746:	4603      	mov	r3, r0
 8014748:	2b00      	cmp	r3, #0
 801474a:	d003      	beq.n	8014754 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	2201      	movs	r2, #1
 8014750:	601a      	str	r2, [r3, #0]
 8014752:	e002      	b.n	801475a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014754:	68bb      	ldr	r3, [r7, #8]
 8014756:	2200      	movs	r2, #0
 8014758:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801475a:	68bb      	ldr	r3, [r7, #8]
 801475c:	2202      	movs	r2, #2
 801475e:	4619      	mov	r1, r3
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f000 fbfb 	bl	8014f5c <USBD_CtlSendData>
              break;
 8014766:	e004      	b.n	8014772 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014768:	6839      	ldr	r1, [r7, #0]
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f000 fb85 	bl	8014e7a <USBD_CtlError>
              break;
 8014770:	bf00      	nop
          }
          break;
 8014772:	e004      	b.n	801477e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014774:	6839      	ldr	r1, [r7, #0]
 8014776:	6878      	ldr	r0, [r7, #4]
 8014778:	f000 fb7f 	bl	8014e7a <USBD_CtlError>
          break;
 801477c:	bf00      	nop
      }
      break;
 801477e:	e005      	b.n	801478c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014780:	6839      	ldr	r1, [r7, #0]
 8014782:	6878      	ldr	r0, [r7, #4]
 8014784:	f000 fb79 	bl	8014e7a <USBD_CtlError>
      break;
 8014788:	e000      	b.n	801478c <USBD_StdEPReq+0x330>
      break;
 801478a:	bf00      	nop
  }

  return ret;
 801478c:	7bfb      	ldrb	r3, [r7, #15]
}
 801478e:	4618      	mov	r0, r3
 8014790:	3710      	adds	r7, #16
 8014792:	46bd      	mov	sp, r7
 8014794:	bd80      	pop	{r7, pc}
	...

08014798 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b084      	sub	sp, #16
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
 80147a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80147a2:	2300      	movs	r3, #0
 80147a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80147a6:	2300      	movs	r3, #0
 80147a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80147aa:	2300      	movs	r3, #0
 80147ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80147ae:	683b      	ldr	r3, [r7, #0]
 80147b0:	885b      	ldrh	r3, [r3, #2]
 80147b2:	0a1b      	lsrs	r3, r3, #8
 80147b4:	b29b      	uxth	r3, r3
 80147b6:	3b01      	subs	r3, #1
 80147b8:	2b0e      	cmp	r3, #14
 80147ba:	f200 8152 	bhi.w	8014a62 <USBD_GetDescriptor+0x2ca>
 80147be:	a201      	add	r2, pc, #4	; (adr r2, 80147c4 <USBD_GetDescriptor+0x2c>)
 80147c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147c4:	08014835 	.word	0x08014835
 80147c8:	0801484d 	.word	0x0801484d
 80147cc:	0801488d 	.word	0x0801488d
 80147d0:	08014a63 	.word	0x08014a63
 80147d4:	08014a63 	.word	0x08014a63
 80147d8:	08014a03 	.word	0x08014a03
 80147dc:	08014a2f 	.word	0x08014a2f
 80147e0:	08014a63 	.word	0x08014a63
 80147e4:	08014a63 	.word	0x08014a63
 80147e8:	08014a63 	.word	0x08014a63
 80147ec:	08014a63 	.word	0x08014a63
 80147f0:	08014a63 	.word	0x08014a63
 80147f4:	08014a63 	.word	0x08014a63
 80147f8:	08014a63 	.word	0x08014a63
 80147fc:	08014801 	.word	0x08014801
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014806:	69db      	ldr	r3, [r3, #28]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d00b      	beq.n	8014824 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014812:	69db      	ldr	r3, [r3, #28]
 8014814:	687a      	ldr	r2, [r7, #4]
 8014816:	7c12      	ldrb	r2, [r2, #16]
 8014818:	f107 0108 	add.w	r1, r7, #8
 801481c:	4610      	mov	r0, r2
 801481e:	4798      	blx	r3
 8014820:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014822:	e126      	b.n	8014a72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014824:	6839      	ldr	r1, [r7, #0]
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f000 fb27 	bl	8014e7a <USBD_CtlError>
        err++;
 801482c:	7afb      	ldrb	r3, [r7, #11]
 801482e:	3301      	adds	r3, #1
 8014830:	72fb      	strb	r3, [r7, #11]
      break;
 8014832:	e11e      	b.n	8014a72 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	687a      	ldr	r2, [r7, #4]
 801483e:	7c12      	ldrb	r2, [r2, #16]
 8014840:	f107 0108 	add.w	r1, r7, #8
 8014844:	4610      	mov	r0, r2
 8014846:	4798      	blx	r3
 8014848:	60f8      	str	r0, [r7, #12]
      break;
 801484a:	e112      	b.n	8014a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	7c1b      	ldrb	r3, [r3, #16]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d10d      	bne.n	8014870 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801485c:	f107 0208 	add.w	r2, r7, #8
 8014860:	4610      	mov	r0, r2
 8014862:	4798      	blx	r3
 8014864:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014866:	68fb      	ldr	r3, [r7, #12]
 8014868:	3301      	adds	r3, #1
 801486a:	2202      	movs	r2, #2
 801486c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801486e:	e100      	b.n	8014a72 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014878:	f107 0208 	add.w	r2, r7, #8
 801487c:	4610      	mov	r0, r2
 801487e:	4798      	blx	r3
 8014880:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014882:	68fb      	ldr	r3, [r7, #12]
 8014884:	3301      	adds	r3, #1
 8014886:	2202      	movs	r2, #2
 8014888:	701a      	strb	r2, [r3, #0]
      break;
 801488a:	e0f2      	b.n	8014a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	885b      	ldrh	r3, [r3, #2]
 8014890:	b2db      	uxtb	r3, r3
 8014892:	2b05      	cmp	r3, #5
 8014894:	f200 80ac 	bhi.w	80149f0 <USBD_GetDescriptor+0x258>
 8014898:	a201      	add	r2, pc, #4	; (adr r2, 80148a0 <USBD_GetDescriptor+0x108>)
 801489a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801489e:	bf00      	nop
 80148a0:	080148b9 	.word	0x080148b9
 80148a4:	080148ed 	.word	0x080148ed
 80148a8:	08014921 	.word	0x08014921
 80148ac:	08014955 	.word	0x08014955
 80148b0:	08014989 	.word	0x08014989
 80148b4:	080149bd 	.word	0x080149bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148be:	685b      	ldr	r3, [r3, #4]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d00b      	beq.n	80148dc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148ca:	685b      	ldr	r3, [r3, #4]
 80148cc:	687a      	ldr	r2, [r7, #4]
 80148ce:	7c12      	ldrb	r2, [r2, #16]
 80148d0:	f107 0108 	add.w	r1, r7, #8
 80148d4:	4610      	mov	r0, r2
 80148d6:	4798      	blx	r3
 80148d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80148da:	e091      	b.n	8014a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80148dc:	6839      	ldr	r1, [r7, #0]
 80148de:	6878      	ldr	r0, [r7, #4]
 80148e0:	f000 facb 	bl	8014e7a <USBD_CtlError>
            err++;
 80148e4:	7afb      	ldrb	r3, [r7, #11]
 80148e6:	3301      	adds	r3, #1
 80148e8:	72fb      	strb	r3, [r7, #11]
          break;
 80148ea:	e089      	b.n	8014a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148f2:	689b      	ldr	r3, [r3, #8]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	d00b      	beq.n	8014910 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80148fe:	689b      	ldr	r3, [r3, #8]
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	7c12      	ldrb	r2, [r2, #16]
 8014904:	f107 0108 	add.w	r1, r7, #8
 8014908:	4610      	mov	r0, r2
 801490a:	4798      	blx	r3
 801490c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801490e:	e077      	b.n	8014a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014910:	6839      	ldr	r1, [r7, #0]
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	f000 fab1 	bl	8014e7a <USBD_CtlError>
            err++;
 8014918:	7afb      	ldrb	r3, [r7, #11]
 801491a:	3301      	adds	r3, #1
 801491c:	72fb      	strb	r3, [r7, #11]
          break;
 801491e:	e06f      	b.n	8014a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	2b00      	cmp	r3, #0
 801492a:	d00b      	beq.n	8014944 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014932:	68db      	ldr	r3, [r3, #12]
 8014934:	687a      	ldr	r2, [r7, #4]
 8014936:	7c12      	ldrb	r2, [r2, #16]
 8014938:	f107 0108 	add.w	r1, r7, #8
 801493c:	4610      	mov	r0, r2
 801493e:	4798      	blx	r3
 8014940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014942:	e05d      	b.n	8014a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014944:	6839      	ldr	r1, [r7, #0]
 8014946:	6878      	ldr	r0, [r7, #4]
 8014948:	f000 fa97 	bl	8014e7a <USBD_CtlError>
            err++;
 801494c:	7afb      	ldrb	r3, [r7, #11]
 801494e:	3301      	adds	r3, #1
 8014950:	72fb      	strb	r3, [r7, #11]
          break;
 8014952:	e055      	b.n	8014a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801495a:	691b      	ldr	r3, [r3, #16]
 801495c:	2b00      	cmp	r3, #0
 801495e:	d00b      	beq.n	8014978 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014966:	691b      	ldr	r3, [r3, #16]
 8014968:	687a      	ldr	r2, [r7, #4]
 801496a:	7c12      	ldrb	r2, [r2, #16]
 801496c:	f107 0108 	add.w	r1, r7, #8
 8014970:	4610      	mov	r0, r2
 8014972:	4798      	blx	r3
 8014974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014976:	e043      	b.n	8014a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014978:	6839      	ldr	r1, [r7, #0]
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	f000 fa7d 	bl	8014e7a <USBD_CtlError>
            err++;
 8014980:	7afb      	ldrb	r3, [r7, #11]
 8014982:	3301      	adds	r3, #1
 8014984:	72fb      	strb	r3, [r7, #11]
          break;
 8014986:	e03b      	b.n	8014a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801498e:	695b      	ldr	r3, [r3, #20]
 8014990:	2b00      	cmp	r3, #0
 8014992:	d00b      	beq.n	80149ac <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801499a:	695b      	ldr	r3, [r3, #20]
 801499c:	687a      	ldr	r2, [r7, #4]
 801499e:	7c12      	ldrb	r2, [r2, #16]
 80149a0:	f107 0108 	add.w	r1, r7, #8
 80149a4:	4610      	mov	r0, r2
 80149a6:	4798      	blx	r3
 80149a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149aa:	e029      	b.n	8014a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80149ac:	6839      	ldr	r1, [r7, #0]
 80149ae:	6878      	ldr	r0, [r7, #4]
 80149b0:	f000 fa63 	bl	8014e7a <USBD_CtlError>
            err++;
 80149b4:	7afb      	ldrb	r3, [r7, #11]
 80149b6:	3301      	adds	r3, #1
 80149b8:	72fb      	strb	r3, [r7, #11]
          break;
 80149ba:	e021      	b.n	8014a00 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149c2:	699b      	ldr	r3, [r3, #24]
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d00b      	beq.n	80149e0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80149ce:	699b      	ldr	r3, [r3, #24]
 80149d0:	687a      	ldr	r2, [r7, #4]
 80149d2:	7c12      	ldrb	r2, [r2, #16]
 80149d4:	f107 0108 	add.w	r1, r7, #8
 80149d8:	4610      	mov	r0, r2
 80149da:	4798      	blx	r3
 80149dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149de:	e00f      	b.n	8014a00 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80149e0:	6839      	ldr	r1, [r7, #0]
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f000 fa49 	bl	8014e7a <USBD_CtlError>
            err++;
 80149e8:	7afb      	ldrb	r3, [r7, #11]
 80149ea:	3301      	adds	r3, #1
 80149ec:	72fb      	strb	r3, [r7, #11]
          break;
 80149ee:	e007      	b.n	8014a00 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80149f0:	6839      	ldr	r1, [r7, #0]
 80149f2:	6878      	ldr	r0, [r7, #4]
 80149f4:	f000 fa41 	bl	8014e7a <USBD_CtlError>
          err++;
 80149f8:	7afb      	ldrb	r3, [r7, #11]
 80149fa:	3301      	adds	r3, #1
 80149fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80149fe:	bf00      	nop
      }
      break;
 8014a00:	e037      	b.n	8014a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	7c1b      	ldrb	r3, [r3, #16]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d109      	bne.n	8014a1e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a12:	f107 0208 	add.w	r2, r7, #8
 8014a16:	4610      	mov	r0, r2
 8014a18:	4798      	blx	r3
 8014a1a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014a1c:	e029      	b.n	8014a72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014a1e:	6839      	ldr	r1, [r7, #0]
 8014a20:	6878      	ldr	r0, [r7, #4]
 8014a22:	f000 fa2a 	bl	8014e7a <USBD_CtlError>
        err++;
 8014a26:	7afb      	ldrb	r3, [r7, #11]
 8014a28:	3301      	adds	r3, #1
 8014a2a:	72fb      	strb	r3, [r7, #11]
      break;
 8014a2c:	e021      	b.n	8014a72 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	7c1b      	ldrb	r3, [r3, #16]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d10d      	bne.n	8014a52 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a3e:	f107 0208 	add.w	r2, r7, #8
 8014a42:	4610      	mov	r0, r2
 8014a44:	4798      	blx	r3
 8014a46:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	3301      	adds	r3, #1
 8014a4c:	2207      	movs	r2, #7
 8014a4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014a50:	e00f      	b.n	8014a72 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014a52:	6839      	ldr	r1, [r7, #0]
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	f000 fa10 	bl	8014e7a <USBD_CtlError>
        err++;
 8014a5a:	7afb      	ldrb	r3, [r7, #11]
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	72fb      	strb	r3, [r7, #11]
      break;
 8014a60:	e007      	b.n	8014a72 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8014a62:	6839      	ldr	r1, [r7, #0]
 8014a64:	6878      	ldr	r0, [r7, #4]
 8014a66:	f000 fa08 	bl	8014e7a <USBD_CtlError>
      err++;
 8014a6a:	7afb      	ldrb	r3, [r7, #11]
 8014a6c:	3301      	adds	r3, #1
 8014a6e:	72fb      	strb	r3, [r7, #11]
      break;
 8014a70:	bf00      	nop
  }

  if (err != 0U)
 8014a72:	7afb      	ldrb	r3, [r7, #11]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d11e      	bne.n	8014ab6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8014a78:	683b      	ldr	r3, [r7, #0]
 8014a7a:	88db      	ldrh	r3, [r3, #6]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	d016      	beq.n	8014aae <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8014a80:	893b      	ldrh	r3, [r7, #8]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d00e      	beq.n	8014aa4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8014a86:	683b      	ldr	r3, [r7, #0]
 8014a88:	88da      	ldrh	r2, [r3, #6]
 8014a8a:	893b      	ldrh	r3, [r7, #8]
 8014a8c:	4293      	cmp	r3, r2
 8014a8e:	bf28      	it	cs
 8014a90:	4613      	movcs	r3, r2
 8014a92:	b29b      	uxth	r3, r3
 8014a94:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014a96:	893b      	ldrh	r3, [r7, #8]
 8014a98:	461a      	mov	r2, r3
 8014a9a:	68f9      	ldr	r1, [r7, #12]
 8014a9c:	6878      	ldr	r0, [r7, #4]
 8014a9e:	f000 fa5d 	bl	8014f5c <USBD_CtlSendData>
 8014aa2:	e009      	b.n	8014ab8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8014aa4:	6839      	ldr	r1, [r7, #0]
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f000 f9e7 	bl	8014e7a <USBD_CtlError>
 8014aac:	e004      	b.n	8014ab8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8014aae:	6878      	ldr	r0, [r7, #4]
 8014ab0:	f000 fa91 	bl	8014fd6 <USBD_CtlSendStatus>
 8014ab4:	e000      	b.n	8014ab8 <USBD_GetDescriptor+0x320>
    return;
 8014ab6:	bf00      	nop
  }
}
 8014ab8:	3710      	adds	r7, #16
 8014aba:	46bd      	mov	sp, r7
 8014abc:	bd80      	pop	{r7, pc}
 8014abe:	bf00      	nop

08014ac0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b084      	sub	sp, #16
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
 8014ac8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	889b      	ldrh	r3, [r3, #4]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d131      	bne.n	8014b36 <USBD_SetAddress+0x76>
 8014ad2:	683b      	ldr	r3, [r7, #0]
 8014ad4:	88db      	ldrh	r3, [r3, #6]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d12d      	bne.n	8014b36 <USBD_SetAddress+0x76>
 8014ada:	683b      	ldr	r3, [r7, #0]
 8014adc:	885b      	ldrh	r3, [r3, #2]
 8014ade:	2b7f      	cmp	r3, #127	; 0x7f
 8014ae0:	d829      	bhi.n	8014b36 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	885b      	ldrh	r3, [r3, #2]
 8014ae6:	b2db      	uxtb	r3, r3
 8014ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014aec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	2b03      	cmp	r3, #3
 8014af8:	d104      	bne.n	8014b04 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8014afa:	6839      	ldr	r1, [r7, #0]
 8014afc:	6878      	ldr	r0, [r7, #4]
 8014afe:	f000 f9bc 	bl	8014e7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b02:	e01d      	b.n	8014b40 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	7bfa      	ldrb	r2, [r7, #15]
 8014b08:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014b0c:	7bfb      	ldrb	r3, [r7, #15]
 8014b0e:	4619      	mov	r1, r3
 8014b10:	6878      	ldr	r0, [r7, #4]
 8014b12:	f002 fffa 	bl	8017b0a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014b16:	6878      	ldr	r0, [r7, #4]
 8014b18:	f000 fa5d 	bl	8014fd6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014b1c:	7bfb      	ldrb	r3, [r7, #15]
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	d004      	beq.n	8014b2c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	2202      	movs	r2, #2
 8014b26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b2a:	e009      	b.n	8014b40 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	2201      	movs	r2, #1
 8014b30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b34:	e004      	b.n	8014b40 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014b36:	6839      	ldr	r1, [r7, #0]
 8014b38:	6878      	ldr	r0, [r7, #4]
 8014b3a:	f000 f99e 	bl	8014e7a <USBD_CtlError>
  }
}
 8014b3e:	bf00      	nop
 8014b40:	bf00      	nop
 8014b42:	3710      	adds	r7, #16
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}

08014b48 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b084      	sub	sp, #16
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
 8014b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014b52:	2300      	movs	r3, #0
 8014b54:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	885b      	ldrh	r3, [r3, #2]
 8014b5a:	b2da      	uxtb	r2, r3
 8014b5c:	4b4e      	ldr	r3, [pc, #312]	; (8014c98 <USBD_SetConfig+0x150>)
 8014b5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014b60:	4b4d      	ldr	r3, [pc, #308]	; (8014c98 <USBD_SetConfig+0x150>)
 8014b62:	781b      	ldrb	r3, [r3, #0]
 8014b64:	2b01      	cmp	r3, #1
 8014b66:	d905      	bls.n	8014b74 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014b68:	6839      	ldr	r1, [r7, #0]
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f000 f985 	bl	8014e7a <USBD_CtlError>
    return USBD_FAIL;
 8014b70:	2303      	movs	r3, #3
 8014b72:	e08c      	b.n	8014c8e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b7a:	b2db      	uxtb	r3, r3
 8014b7c:	2b02      	cmp	r3, #2
 8014b7e:	d002      	beq.n	8014b86 <USBD_SetConfig+0x3e>
 8014b80:	2b03      	cmp	r3, #3
 8014b82:	d029      	beq.n	8014bd8 <USBD_SetConfig+0x90>
 8014b84:	e075      	b.n	8014c72 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014b86:	4b44      	ldr	r3, [pc, #272]	; (8014c98 <USBD_SetConfig+0x150>)
 8014b88:	781b      	ldrb	r3, [r3, #0]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d020      	beq.n	8014bd0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8014b8e:	4b42      	ldr	r3, [pc, #264]	; (8014c98 <USBD_SetConfig+0x150>)
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	461a      	mov	r2, r3
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014b98:	4b3f      	ldr	r3, [pc, #252]	; (8014c98 <USBD_SetConfig+0x150>)
 8014b9a:	781b      	ldrb	r3, [r3, #0]
 8014b9c:	4619      	mov	r1, r3
 8014b9e:	6878      	ldr	r0, [r7, #4]
 8014ba0:	f7fe ffbc 	bl	8013b1c <USBD_SetClassConfig>
 8014ba4:	4603      	mov	r3, r0
 8014ba6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8014ba8:	7bfb      	ldrb	r3, [r7, #15]
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d008      	beq.n	8014bc0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8014bae:	6839      	ldr	r1, [r7, #0]
 8014bb0:	6878      	ldr	r0, [r7, #4]
 8014bb2:	f000 f962 	bl	8014e7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	2202      	movs	r2, #2
 8014bba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014bbe:	e065      	b.n	8014c8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014bc0:	6878      	ldr	r0, [r7, #4]
 8014bc2:	f000 fa08 	bl	8014fd6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014bc6:	687b      	ldr	r3, [r7, #4]
 8014bc8:	2203      	movs	r2, #3
 8014bca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014bce:	e05d      	b.n	8014c8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014bd0:	6878      	ldr	r0, [r7, #4]
 8014bd2:	f000 fa00 	bl	8014fd6 <USBD_CtlSendStatus>
      break;
 8014bd6:	e059      	b.n	8014c8c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8014bd8:	4b2f      	ldr	r3, [pc, #188]	; (8014c98 <USBD_SetConfig+0x150>)
 8014bda:	781b      	ldrb	r3, [r3, #0]
 8014bdc:	2b00      	cmp	r3, #0
 8014bde:	d112      	bne.n	8014c06 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	2202      	movs	r2, #2
 8014be4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8014be8:	4b2b      	ldr	r3, [pc, #172]	; (8014c98 <USBD_SetConfig+0x150>)
 8014bea:	781b      	ldrb	r3, [r3, #0]
 8014bec:	461a      	mov	r2, r3
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014bf2:	4b29      	ldr	r3, [pc, #164]	; (8014c98 <USBD_SetConfig+0x150>)
 8014bf4:	781b      	ldrb	r3, [r3, #0]
 8014bf6:	4619      	mov	r1, r3
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f7fe ffab 	bl	8013b54 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8014bfe:	6878      	ldr	r0, [r7, #4]
 8014c00:	f000 f9e9 	bl	8014fd6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014c04:	e042      	b.n	8014c8c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014c06:	4b24      	ldr	r3, [pc, #144]	; (8014c98 <USBD_SetConfig+0x150>)
 8014c08:	781b      	ldrb	r3, [r3, #0]
 8014c0a:	461a      	mov	r2, r3
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	685b      	ldr	r3, [r3, #4]
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d02a      	beq.n	8014c6a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	685b      	ldr	r3, [r3, #4]
 8014c18:	b2db      	uxtb	r3, r3
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f7fe ff99 	bl	8013b54 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8014c22:	4b1d      	ldr	r3, [pc, #116]	; (8014c98 <USBD_SetConfig+0x150>)
 8014c24:	781b      	ldrb	r3, [r3, #0]
 8014c26:	461a      	mov	r2, r3
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014c2c:	4b1a      	ldr	r3, [pc, #104]	; (8014c98 <USBD_SetConfig+0x150>)
 8014c2e:	781b      	ldrb	r3, [r3, #0]
 8014c30:	4619      	mov	r1, r3
 8014c32:	6878      	ldr	r0, [r7, #4]
 8014c34:	f7fe ff72 	bl	8013b1c <USBD_SetClassConfig>
 8014c38:	4603      	mov	r3, r0
 8014c3a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014c3c:	7bfb      	ldrb	r3, [r7, #15]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d00f      	beq.n	8014c62 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8014c42:	6839      	ldr	r1, [r7, #0]
 8014c44:	6878      	ldr	r0, [r7, #4]
 8014c46:	f000 f918 	bl	8014e7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	685b      	ldr	r3, [r3, #4]
 8014c4e:	b2db      	uxtb	r3, r3
 8014c50:	4619      	mov	r1, r3
 8014c52:	6878      	ldr	r0, [r7, #4]
 8014c54:	f7fe ff7e 	bl	8013b54 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	2202      	movs	r2, #2
 8014c5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8014c60:	e014      	b.n	8014c8c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f000 f9b7 	bl	8014fd6 <USBD_CtlSendStatus>
      break;
 8014c68:	e010      	b.n	8014c8c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014c6a:	6878      	ldr	r0, [r7, #4]
 8014c6c:	f000 f9b3 	bl	8014fd6 <USBD_CtlSendStatus>
      break;
 8014c70:	e00c      	b.n	8014c8c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8014c72:	6839      	ldr	r1, [r7, #0]
 8014c74:	6878      	ldr	r0, [r7, #4]
 8014c76:	f000 f900 	bl	8014e7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014c7a:	4b07      	ldr	r3, [pc, #28]	; (8014c98 <USBD_SetConfig+0x150>)
 8014c7c:	781b      	ldrb	r3, [r3, #0]
 8014c7e:	4619      	mov	r1, r3
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f7fe ff67 	bl	8013b54 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014c86:	2303      	movs	r3, #3
 8014c88:	73fb      	strb	r3, [r7, #15]
      break;
 8014c8a:	bf00      	nop
  }

  return ret;
 8014c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c8e:	4618      	mov	r0, r3
 8014c90:	3710      	adds	r7, #16
 8014c92:	46bd      	mov	sp, r7
 8014c94:	bd80      	pop	{r7, pc}
 8014c96:	bf00      	nop
 8014c98:	20006790 	.word	0x20006790

08014c9c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b082      	sub	sp, #8
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
 8014ca4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014ca6:	683b      	ldr	r3, [r7, #0]
 8014ca8:	88db      	ldrh	r3, [r3, #6]
 8014caa:	2b01      	cmp	r3, #1
 8014cac:	d004      	beq.n	8014cb8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8014cae:	6839      	ldr	r1, [r7, #0]
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f000 f8e2 	bl	8014e7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014cb6:	e023      	b.n	8014d00 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cbe:	b2db      	uxtb	r3, r3
 8014cc0:	2b02      	cmp	r3, #2
 8014cc2:	dc02      	bgt.n	8014cca <USBD_GetConfig+0x2e>
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	dc03      	bgt.n	8014cd0 <USBD_GetConfig+0x34>
 8014cc8:	e015      	b.n	8014cf6 <USBD_GetConfig+0x5a>
 8014cca:	2b03      	cmp	r3, #3
 8014ccc:	d00b      	beq.n	8014ce6 <USBD_GetConfig+0x4a>
 8014cce:	e012      	b.n	8014cf6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	3308      	adds	r3, #8
 8014cda:	2201      	movs	r2, #1
 8014cdc:	4619      	mov	r1, r3
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f000 f93c 	bl	8014f5c <USBD_CtlSendData>
        break;
 8014ce4:	e00c      	b.n	8014d00 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	3304      	adds	r3, #4
 8014cea:	2201      	movs	r2, #1
 8014cec:	4619      	mov	r1, r3
 8014cee:	6878      	ldr	r0, [r7, #4]
 8014cf0:	f000 f934 	bl	8014f5c <USBD_CtlSendData>
        break;
 8014cf4:	e004      	b.n	8014d00 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8014cf6:	6839      	ldr	r1, [r7, #0]
 8014cf8:	6878      	ldr	r0, [r7, #4]
 8014cfa:	f000 f8be 	bl	8014e7a <USBD_CtlError>
        break;
 8014cfe:	bf00      	nop
}
 8014d00:	bf00      	nop
 8014d02:	3708      	adds	r7, #8
 8014d04:	46bd      	mov	sp, r7
 8014d06:	bd80      	pop	{r7, pc}

08014d08 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d08:	b580      	push	{r7, lr}
 8014d0a:	b082      	sub	sp, #8
 8014d0c:	af00      	add	r7, sp, #0
 8014d0e:	6078      	str	r0, [r7, #4]
 8014d10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d18:	b2db      	uxtb	r3, r3
 8014d1a:	3b01      	subs	r3, #1
 8014d1c:	2b02      	cmp	r3, #2
 8014d1e:	d81e      	bhi.n	8014d5e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014d20:	683b      	ldr	r3, [r7, #0]
 8014d22:	88db      	ldrh	r3, [r3, #6]
 8014d24:	2b02      	cmp	r3, #2
 8014d26:	d004      	beq.n	8014d32 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014d28:	6839      	ldr	r1, [r7, #0]
 8014d2a:	6878      	ldr	r0, [r7, #4]
 8014d2c:	f000 f8a5 	bl	8014e7a <USBD_CtlError>
        break;
 8014d30:	e01a      	b.n	8014d68 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	2201      	movs	r2, #1
 8014d36:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d005      	beq.n	8014d4e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	68db      	ldr	r3, [r3, #12]
 8014d46:	f043 0202 	orr.w	r2, r3, #2
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	330c      	adds	r3, #12
 8014d52:	2202      	movs	r2, #2
 8014d54:	4619      	mov	r1, r3
 8014d56:	6878      	ldr	r0, [r7, #4]
 8014d58:	f000 f900 	bl	8014f5c <USBD_CtlSendData>
      break;
 8014d5c:	e004      	b.n	8014d68 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8014d5e:	6839      	ldr	r1, [r7, #0]
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f000 f88a 	bl	8014e7a <USBD_CtlError>
      break;
 8014d66:	bf00      	nop
  }
}
 8014d68:	bf00      	nop
 8014d6a:	3708      	adds	r7, #8
 8014d6c:	46bd      	mov	sp, r7
 8014d6e:	bd80      	pop	{r7, pc}

08014d70 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d70:	b580      	push	{r7, lr}
 8014d72:	b082      	sub	sp, #8
 8014d74:	af00      	add	r7, sp, #0
 8014d76:	6078      	str	r0, [r7, #4]
 8014d78:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	885b      	ldrh	r3, [r3, #2]
 8014d7e:	2b01      	cmp	r3, #1
 8014d80:	d107      	bne.n	8014d92 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2201      	movs	r2, #1
 8014d86:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014d8a:	6878      	ldr	r0, [r7, #4]
 8014d8c:	f000 f923 	bl	8014fd6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8014d90:	e013      	b.n	8014dba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8014d92:	683b      	ldr	r3, [r7, #0]
 8014d94:	885b      	ldrh	r3, [r3, #2]
 8014d96:	2b02      	cmp	r3, #2
 8014d98:	d10b      	bne.n	8014db2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8014d9a:	683b      	ldr	r3, [r7, #0]
 8014d9c:	889b      	ldrh	r3, [r3, #4]
 8014d9e:	0a1b      	lsrs	r3, r3, #8
 8014da0:	b29b      	uxth	r3, r3
 8014da2:	b2da      	uxtb	r2, r3
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8014daa:	6878      	ldr	r0, [r7, #4]
 8014dac:	f000 f913 	bl	8014fd6 <USBD_CtlSendStatus>
}
 8014db0:	e003      	b.n	8014dba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8014db2:	6839      	ldr	r1, [r7, #0]
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	f000 f860 	bl	8014e7a <USBD_CtlError>
}
 8014dba:	bf00      	nop
 8014dbc:	3708      	adds	r7, #8
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014dc2:	b580      	push	{r7, lr}
 8014dc4:	b082      	sub	sp, #8
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	6078      	str	r0, [r7, #4]
 8014dca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014dd2:	b2db      	uxtb	r3, r3
 8014dd4:	3b01      	subs	r3, #1
 8014dd6:	2b02      	cmp	r3, #2
 8014dd8:	d80b      	bhi.n	8014df2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	885b      	ldrh	r3, [r3, #2]
 8014dde:	2b01      	cmp	r3, #1
 8014de0:	d10c      	bne.n	8014dfc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	2200      	movs	r2, #0
 8014de6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014dea:	6878      	ldr	r0, [r7, #4]
 8014dec:	f000 f8f3 	bl	8014fd6 <USBD_CtlSendStatus>
      }
      break;
 8014df0:	e004      	b.n	8014dfc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8014df2:	6839      	ldr	r1, [r7, #0]
 8014df4:	6878      	ldr	r0, [r7, #4]
 8014df6:	f000 f840 	bl	8014e7a <USBD_CtlError>
      break;
 8014dfa:	e000      	b.n	8014dfe <USBD_ClrFeature+0x3c>
      break;
 8014dfc:	bf00      	nop
  }
}
 8014dfe:	bf00      	nop
 8014e00:	3708      	adds	r7, #8
 8014e02:	46bd      	mov	sp, r7
 8014e04:	bd80      	pop	{r7, pc}

08014e06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014e06:	b580      	push	{r7, lr}
 8014e08:	b084      	sub	sp, #16
 8014e0a:	af00      	add	r7, sp, #0
 8014e0c:	6078      	str	r0, [r7, #4]
 8014e0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8014e10:	683b      	ldr	r3, [r7, #0]
 8014e12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	781a      	ldrb	r2, [r3, #0]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	3301      	adds	r3, #1
 8014e20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	781a      	ldrb	r2, [r3, #0]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8014e30:	68f8      	ldr	r0, [r7, #12]
 8014e32:	f7ff fa16 	bl	8014262 <SWAPBYTE>
 8014e36:	4603      	mov	r3, r0
 8014e38:	461a      	mov	r2, r3
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	3301      	adds	r3, #1
 8014e42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014e44:	68fb      	ldr	r3, [r7, #12]
 8014e46:	3301      	adds	r3, #1
 8014e48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014e4a:	68f8      	ldr	r0, [r7, #12]
 8014e4c:	f7ff fa09 	bl	8014262 <SWAPBYTE>
 8014e50:	4603      	mov	r3, r0
 8014e52:	461a      	mov	r2, r3
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014e58:	68fb      	ldr	r3, [r7, #12]
 8014e5a:	3301      	adds	r3, #1
 8014e5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	3301      	adds	r3, #1
 8014e62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014e64:	68f8      	ldr	r0, [r7, #12]
 8014e66:	f7ff f9fc 	bl	8014262 <SWAPBYTE>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	461a      	mov	r2, r3
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	80da      	strh	r2, [r3, #6]
}
 8014e72:	bf00      	nop
 8014e74:	3710      	adds	r7, #16
 8014e76:	46bd      	mov	sp, r7
 8014e78:	bd80      	pop	{r7, pc}

08014e7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e7a:	b580      	push	{r7, lr}
 8014e7c:	b082      	sub	sp, #8
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014e84:	2180      	movs	r1, #128	; 0x80
 8014e86:	6878      	ldr	r0, [r7, #4]
 8014e88:	f002 fdd5 	bl	8017a36 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014e8c:	2100      	movs	r1, #0
 8014e8e:	6878      	ldr	r0, [r7, #4]
 8014e90:	f002 fdd1 	bl	8017a36 <USBD_LL_StallEP>
}
 8014e94:	bf00      	nop
 8014e96:	3708      	adds	r7, #8
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	bd80      	pop	{r7, pc}

08014e9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014e9c:	b580      	push	{r7, lr}
 8014e9e:	b086      	sub	sp, #24
 8014ea0:	af00      	add	r7, sp, #0
 8014ea2:	60f8      	str	r0, [r7, #12]
 8014ea4:	60b9      	str	r1, [r7, #8]
 8014ea6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d036      	beq.n	8014f20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8014eb2:	68fb      	ldr	r3, [r7, #12]
 8014eb4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014eb6:	6938      	ldr	r0, [r7, #16]
 8014eb8:	f000 f836 	bl	8014f28 <USBD_GetLen>
 8014ebc:	4603      	mov	r3, r0
 8014ebe:	3301      	adds	r3, #1
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	005b      	lsls	r3, r3, #1
 8014ec4:	b29a      	uxth	r2, r3
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8014eca:	7dfb      	ldrb	r3, [r7, #23]
 8014ecc:	68ba      	ldr	r2, [r7, #8]
 8014ece:	4413      	add	r3, r2
 8014ed0:	687a      	ldr	r2, [r7, #4]
 8014ed2:	7812      	ldrb	r2, [r2, #0]
 8014ed4:	701a      	strb	r2, [r3, #0]
  idx++;
 8014ed6:	7dfb      	ldrb	r3, [r7, #23]
 8014ed8:	3301      	adds	r3, #1
 8014eda:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014edc:	7dfb      	ldrb	r3, [r7, #23]
 8014ede:	68ba      	ldr	r2, [r7, #8]
 8014ee0:	4413      	add	r3, r2
 8014ee2:	2203      	movs	r2, #3
 8014ee4:	701a      	strb	r2, [r3, #0]
  idx++;
 8014ee6:	7dfb      	ldrb	r3, [r7, #23]
 8014ee8:	3301      	adds	r3, #1
 8014eea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014eec:	e013      	b.n	8014f16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8014eee:	7dfb      	ldrb	r3, [r7, #23]
 8014ef0:	68ba      	ldr	r2, [r7, #8]
 8014ef2:	4413      	add	r3, r2
 8014ef4:	693a      	ldr	r2, [r7, #16]
 8014ef6:	7812      	ldrb	r2, [r2, #0]
 8014ef8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8014efa:	693b      	ldr	r3, [r7, #16]
 8014efc:	3301      	adds	r3, #1
 8014efe:	613b      	str	r3, [r7, #16]
    idx++;
 8014f00:	7dfb      	ldrb	r3, [r7, #23]
 8014f02:	3301      	adds	r3, #1
 8014f04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8014f06:	7dfb      	ldrb	r3, [r7, #23]
 8014f08:	68ba      	ldr	r2, [r7, #8]
 8014f0a:	4413      	add	r3, r2
 8014f0c:	2200      	movs	r2, #0
 8014f0e:	701a      	strb	r2, [r3, #0]
    idx++;
 8014f10:	7dfb      	ldrb	r3, [r7, #23]
 8014f12:	3301      	adds	r3, #1
 8014f14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8014f16:	693b      	ldr	r3, [r7, #16]
 8014f18:	781b      	ldrb	r3, [r3, #0]
 8014f1a:	2b00      	cmp	r3, #0
 8014f1c:	d1e7      	bne.n	8014eee <USBD_GetString+0x52>
 8014f1e:	e000      	b.n	8014f22 <USBD_GetString+0x86>
    return;
 8014f20:	bf00      	nop
  }
}
 8014f22:	3718      	adds	r7, #24
 8014f24:	46bd      	mov	sp, r7
 8014f26:	bd80      	pop	{r7, pc}

08014f28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8014f28:	b480      	push	{r7}
 8014f2a:	b085      	sub	sp, #20
 8014f2c:	af00      	add	r7, sp, #0
 8014f2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014f30:	2300      	movs	r3, #0
 8014f32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8014f38:	e005      	b.n	8014f46 <USBD_GetLen+0x1e>
  {
    len++;
 8014f3a:	7bfb      	ldrb	r3, [r7, #15]
 8014f3c:	3301      	adds	r3, #1
 8014f3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014f40:	68bb      	ldr	r3, [r7, #8]
 8014f42:	3301      	adds	r3, #1
 8014f44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8014f46:	68bb      	ldr	r3, [r7, #8]
 8014f48:	781b      	ldrb	r3, [r3, #0]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d1f5      	bne.n	8014f3a <USBD_GetLen+0x12>
  }

  return len;
 8014f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3714      	adds	r7, #20
 8014f54:	46bd      	mov	sp, r7
 8014f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f5a:	4770      	bx	lr

08014f5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014f5c:	b580      	push	{r7, lr}
 8014f5e:	b084      	sub	sp, #16
 8014f60:	af00      	add	r7, sp, #0
 8014f62:	60f8      	str	r0, [r7, #12]
 8014f64:	60b9      	str	r1, [r7, #8]
 8014f66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014f68:	68fb      	ldr	r3, [r7, #12]
 8014f6a:	2202      	movs	r2, #2
 8014f6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8014f70:	68fb      	ldr	r3, [r7, #12]
 8014f72:	687a      	ldr	r2, [r7, #4]
 8014f74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	687a      	ldr	r2, [r7, #4]
 8014f7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	68ba      	ldr	r2, [r7, #8]
 8014f80:	2100      	movs	r1, #0
 8014f82:	68f8      	ldr	r0, [r7, #12]
 8014f84:	f002 fde0 	bl	8017b48 <USBD_LL_Transmit>

  return USBD_OK;
 8014f88:	2300      	movs	r3, #0
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3710      	adds	r7, #16
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}

08014f92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014f92:	b580      	push	{r7, lr}
 8014f94:	b084      	sub	sp, #16
 8014f96:	af00      	add	r7, sp, #0
 8014f98:	60f8      	str	r0, [r7, #12]
 8014f9a:	60b9      	str	r1, [r7, #8]
 8014f9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	68ba      	ldr	r2, [r7, #8]
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	68f8      	ldr	r0, [r7, #12]
 8014fa6:	f002 fdcf 	bl	8017b48 <USBD_LL_Transmit>

  return USBD_OK;
 8014faa:	2300      	movs	r3, #0
}
 8014fac:	4618      	mov	r0, r3
 8014fae:	3710      	adds	r7, #16
 8014fb0:	46bd      	mov	sp, r7
 8014fb2:	bd80      	pop	{r7, pc}

08014fb4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	b084      	sub	sp, #16
 8014fb8:	af00      	add	r7, sp, #0
 8014fba:	60f8      	str	r0, [r7, #12]
 8014fbc:	60b9      	str	r1, [r7, #8]
 8014fbe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	68ba      	ldr	r2, [r7, #8]
 8014fc4:	2100      	movs	r1, #0
 8014fc6:	68f8      	ldr	r0, [r7, #12]
 8014fc8:	f002 fddf 	bl	8017b8a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014fcc:	2300      	movs	r3, #0
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3710      	adds	r7, #16
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bd80      	pop	{r7, pc}

08014fd6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014fd6:	b580      	push	{r7, lr}
 8014fd8:	b082      	sub	sp, #8
 8014fda:	af00      	add	r7, sp, #0
 8014fdc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	2204      	movs	r2, #4
 8014fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014fe6:	2300      	movs	r3, #0
 8014fe8:	2200      	movs	r2, #0
 8014fea:	2100      	movs	r1, #0
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f002 fdab 	bl	8017b48 <USBD_LL_Transmit>

  return USBD_OK;
 8014ff2:	2300      	movs	r3, #0
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	3708      	adds	r7, #8
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b082      	sub	sp, #8
 8015000:	af00      	add	r7, sp, #0
 8015002:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	2205      	movs	r2, #5
 8015008:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801500c:	2300      	movs	r3, #0
 801500e:	2200      	movs	r2, #0
 8015010:	2100      	movs	r1, #0
 8015012:	6878      	ldr	r0, [r7, #4]
 8015014:	f002 fdb9 	bl	8017b8a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015018:	2300      	movs	r3, #0
}
 801501a:	4618      	mov	r0, r3
 801501c:	3708      	adds	r7, #8
 801501e:	46bd      	mov	sp, r7
 8015020:	bd80      	pop	{r7, pc}
	...

08015024 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b084      	sub	sp, #16
 8015028:	af00      	add	r7, sp, #0
 801502a:	4603      	mov	r3, r0
 801502c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 801502e:	79fb      	ldrb	r3, [r7, #7]
 8015030:	4a08      	ldr	r2, [pc, #32]	; (8015054 <disk_status+0x30>)
 8015032:	009b      	lsls	r3, r3, #2
 8015034:	4413      	add	r3, r2
 8015036:	685b      	ldr	r3, [r3, #4]
 8015038:	685b      	ldr	r3, [r3, #4]
 801503a:	79fa      	ldrb	r2, [r7, #7]
 801503c:	4905      	ldr	r1, [pc, #20]	; (8015054 <disk_status+0x30>)
 801503e:	440a      	add	r2, r1
 8015040:	7a12      	ldrb	r2, [r2, #8]
 8015042:	4610      	mov	r0, r2
 8015044:	4798      	blx	r3
 8015046:	4603      	mov	r3, r0
 8015048:	73fb      	strb	r3, [r7, #15]
  return stat;
 801504a:	7bfb      	ldrb	r3, [r7, #15]
}
 801504c:	4618      	mov	r0, r3
 801504e:	3710      	adds	r7, #16
 8015050:	46bd      	mov	sp, r7
 8015052:	bd80      	pop	{r7, pc}
 8015054:	2000679c 	.word	0x2000679c

08015058 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b084      	sub	sp, #16
 801505c:	af00      	add	r7, sp, #0
 801505e:	4603      	mov	r3, r0
 8015060:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8015062:	2300      	movs	r3, #0
 8015064:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8015066:	79fb      	ldrb	r3, [r7, #7]
 8015068:	4a0d      	ldr	r2, [pc, #52]	; (80150a0 <disk_initialize+0x48>)
 801506a:	5cd3      	ldrb	r3, [r2, r3]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d111      	bne.n	8015094 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8015070:	79fb      	ldrb	r3, [r7, #7]
 8015072:	4a0b      	ldr	r2, [pc, #44]	; (80150a0 <disk_initialize+0x48>)
 8015074:	2101      	movs	r1, #1
 8015076:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015078:	79fb      	ldrb	r3, [r7, #7]
 801507a:	4a09      	ldr	r2, [pc, #36]	; (80150a0 <disk_initialize+0x48>)
 801507c:	009b      	lsls	r3, r3, #2
 801507e:	4413      	add	r3, r2
 8015080:	685b      	ldr	r3, [r3, #4]
 8015082:	681b      	ldr	r3, [r3, #0]
 8015084:	79fa      	ldrb	r2, [r7, #7]
 8015086:	4906      	ldr	r1, [pc, #24]	; (80150a0 <disk_initialize+0x48>)
 8015088:	440a      	add	r2, r1
 801508a:	7a12      	ldrb	r2, [r2, #8]
 801508c:	4610      	mov	r0, r2
 801508e:	4798      	blx	r3
 8015090:	4603      	mov	r3, r0
 8015092:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8015094:	7bfb      	ldrb	r3, [r7, #15]
}
 8015096:	4618      	mov	r0, r3
 8015098:	3710      	adds	r7, #16
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}
 801509e:	bf00      	nop
 80150a0:	2000679c 	.word	0x2000679c

080150a4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80150a4:	b590      	push	{r4, r7, lr}
 80150a6:	b087      	sub	sp, #28
 80150a8:	af00      	add	r7, sp, #0
 80150aa:	60b9      	str	r1, [r7, #8]
 80150ac:	607a      	str	r2, [r7, #4]
 80150ae:	603b      	str	r3, [r7, #0]
 80150b0:	4603      	mov	r3, r0
 80150b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80150b4:	7bfb      	ldrb	r3, [r7, #15]
 80150b6:	4a0a      	ldr	r2, [pc, #40]	; (80150e0 <disk_read+0x3c>)
 80150b8:	009b      	lsls	r3, r3, #2
 80150ba:	4413      	add	r3, r2
 80150bc:	685b      	ldr	r3, [r3, #4]
 80150be:	689c      	ldr	r4, [r3, #8]
 80150c0:	7bfb      	ldrb	r3, [r7, #15]
 80150c2:	4a07      	ldr	r2, [pc, #28]	; (80150e0 <disk_read+0x3c>)
 80150c4:	4413      	add	r3, r2
 80150c6:	7a18      	ldrb	r0, [r3, #8]
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	687a      	ldr	r2, [r7, #4]
 80150cc:	68b9      	ldr	r1, [r7, #8]
 80150ce:	47a0      	blx	r4
 80150d0:	4603      	mov	r3, r0
 80150d2:	75fb      	strb	r3, [r7, #23]
  return res;
 80150d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	371c      	adds	r7, #28
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd90      	pop	{r4, r7, pc}
 80150de:	bf00      	nop
 80150e0:	2000679c 	.word	0x2000679c

080150e4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80150e4:	b590      	push	{r4, r7, lr}
 80150e6:	b087      	sub	sp, #28
 80150e8:	af00      	add	r7, sp, #0
 80150ea:	60b9      	str	r1, [r7, #8]
 80150ec:	607a      	str	r2, [r7, #4]
 80150ee:	603b      	str	r3, [r7, #0]
 80150f0:	4603      	mov	r3, r0
 80150f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80150f4:	7bfb      	ldrb	r3, [r7, #15]
 80150f6:	4a0a      	ldr	r2, [pc, #40]	; (8015120 <disk_write+0x3c>)
 80150f8:	009b      	lsls	r3, r3, #2
 80150fa:	4413      	add	r3, r2
 80150fc:	685b      	ldr	r3, [r3, #4]
 80150fe:	68dc      	ldr	r4, [r3, #12]
 8015100:	7bfb      	ldrb	r3, [r7, #15]
 8015102:	4a07      	ldr	r2, [pc, #28]	; (8015120 <disk_write+0x3c>)
 8015104:	4413      	add	r3, r2
 8015106:	7a18      	ldrb	r0, [r3, #8]
 8015108:	683b      	ldr	r3, [r7, #0]
 801510a:	687a      	ldr	r2, [r7, #4]
 801510c:	68b9      	ldr	r1, [r7, #8]
 801510e:	47a0      	blx	r4
 8015110:	4603      	mov	r3, r0
 8015112:	75fb      	strb	r3, [r7, #23]
  return res;
 8015114:	7dfb      	ldrb	r3, [r7, #23]
}
 8015116:	4618      	mov	r0, r3
 8015118:	371c      	adds	r7, #28
 801511a:	46bd      	mov	sp, r7
 801511c:	bd90      	pop	{r4, r7, pc}
 801511e:	bf00      	nop
 8015120:	2000679c 	.word	0x2000679c

08015124 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015124:	b580      	push	{r7, lr}
 8015126:	b084      	sub	sp, #16
 8015128:	af00      	add	r7, sp, #0
 801512a:	4603      	mov	r3, r0
 801512c:	603a      	str	r2, [r7, #0]
 801512e:	71fb      	strb	r3, [r7, #7]
 8015130:	460b      	mov	r3, r1
 8015132:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015134:	79fb      	ldrb	r3, [r7, #7]
 8015136:	4a09      	ldr	r2, [pc, #36]	; (801515c <disk_ioctl+0x38>)
 8015138:	009b      	lsls	r3, r3, #2
 801513a:	4413      	add	r3, r2
 801513c:	685b      	ldr	r3, [r3, #4]
 801513e:	691b      	ldr	r3, [r3, #16]
 8015140:	79fa      	ldrb	r2, [r7, #7]
 8015142:	4906      	ldr	r1, [pc, #24]	; (801515c <disk_ioctl+0x38>)
 8015144:	440a      	add	r2, r1
 8015146:	7a10      	ldrb	r0, [r2, #8]
 8015148:	79b9      	ldrb	r1, [r7, #6]
 801514a:	683a      	ldr	r2, [r7, #0]
 801514c:	4798      	blx	r3
 801514e:	4603      	mov	r3, r0
 8015150:	73fb      	strb	r3, [r7, #15]
  return res;
 8015152:	7bfb      	ldrb	r3, [r7, #15]
}
 8015154:	4618      	mov	r0, r3
 8015156:	3710      	adds	r7, #16
 8015158:	46bd      	mov	sp, r7
 801515a:	bd80      	pop	{r7, pc}
 801515c:	2000679c 	.word	0x2000679c

08015160 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015160:	b480      	push	{r7}
 8015162:	b085      	sub	sp, #20
 8015164:	af00      	add	r7, sp, #0
 8015166:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015168:	687b      	ldr	r3, [r7, #4]
 801516a:	3301      	adds	r3, #1
 801516c:	781b      	ldrb	r3, [r3, #0]
 801516e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8015170:	89fb      	ldrh	r3, [r7, #14]
 8015172:	021b      	lsls	r3, r3, #8
 8015174:	b21a      	sxth	r2, r3
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	781b      	ldrb	r3, [r3, #0]
 801517a:	b21b      	sxth	r3, r3
 801517c:	4313      	orrs	r3, r2
 801517e:	b21b      	sxth	r3, r3
 8015180:	81fb      	strh	r3, [r7, #14]
	return rv;
 8015182:	89fb      	ldrh	r3, [r7, #14]
}
 8015184:	4618      	mov	r0, r3
 8015186:	3714      	adds	r7, #20
 8015188:	46bd      	mov	sp, r7
 801518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801518e:	4770      	bx	lr

08015190 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015190:	b480      	push	{r7}
 8015192:	b085      	sub	sp, #20
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	3303      	adds	r3, #3
 801519c:	781b      	ldrb	r3, [r3, #0]
 801519e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	021b      	lsls	r3, r3, #8
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	3202      	adds	r2, #2
 80151a8:	7812      	ldrb	r2, [r2, #0]
 80151aa:	4313      	orrs	r3, r2
 80151ac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	021b      	lsls	r3, r3, #8
 80151b2:	687a      	ldr	r2, [r7, #4]
 80151b4:	3201      	adds	r2, #1
 80151b6:	7812      	ldrb	r2, [r2, #0]
 80151b8:	4313      	orrs	r3, r2
 80151ba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	021b      	lsls	r3, r3, #8
 80151c0:	687a      	ldr	r2, [r7, #4]
 80151c2:	7812      	ldrb	r2, [r2, #0]
 80151c4:	4313      	orrs	r3, r2
 80151c6:	60fb      	str	r3, [r7, #12]
	return rv;
 80151c8:	68fb      	ldr	r3, [r7, #12]
}
 80151ca:	4618      	mov	r0, r3
 80151cc:	3714      	adds	r7, #20
 80151ce:	46bd      	mov	sp, r7
 80151d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d4:	4770      	bx	lr

080151d6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80151d6:	b480      	push	{r7}
 80151d8:	b083      	sub	sp, #12
 80151da:	af00      	add	r7, sp, #0
 80151dc:	6078      	str	r0, [r7, #4]
 80151de:	460b      	mov	r3, r1
 80151e0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	1c5a      	adds	r2, r3, #1
 80151e6:	607a      	str	r2, [r7, #4]
 80151e8:	887a      	ldrh	r2, [r7, #2]
 80151ea:	b2d2      	uxtb	r2, r2
 80151ec:	701a      	strb	r2, [r3, #0]
 80151ee:	887b      	ldrh	r3, [r7, #2]
 80151f0:	0a1b      	lsrs	r3, r3, #8
 80151f2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	1c5a      	adds	r2, r3, #1
 80151f8:	607a      	str	r2, [r7, #4]
 80151fa:	887a      	ldrh	r2, [r7, #2]
 80151fc:	b2d2      	uxtb	r2, r2
 80151fe:	701a      	strb	r2, [r3, #0]
}
 8015200:	bf00      	nop
 8015202:	370c      	adds	r7, #12
 8015204:	46bd      	mov	sp, r7
 8015206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801520a:	4770      	bx	lr

0801520c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801520c:	b480      	push	{r7}
 801520e:	b083      	sub	sp, #12
 8015210:	af00      	add	r7, sp, #0
 8015212:	6078      	str	r0, [r7, #4]
 8015214:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	1c5a      	adds	r2, r3, #1
 801521a:	607a      	str	r2, [r7, #4]
 801521c:	683a      	ldr	r2, [r7, #0]
 801521e:	b2d2      	uxtb	r2, r2
 8015220:	701a      	strb	r2, [r3, #0]
 8015222:	683b      	ldr	r3, [r7, #0]
 8015224:	0a1b      	lsrs	r3, r3, #8
 8015226:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	1c5a      	adds	r2, r3, #1
 801522c:	607a      	str	r2, [r7, #4]
 801522e:	683a      	ldr	r2, [r7, #0]
 8015230:	b2d2      	uxtb	r2, r2
 8015232:	701a      	strb	r2, [r3, #0]
 8015234:	683b      	ldr	r3, [r7, #0]
 8015236:	0a1b      	lsrs	r3, r3, #8
 8015238:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	1c5a      	adds	r2, r3, #1
 801523e:	607a      	str	r2, [r7, #4]
 8015240:	683a      	ldr	r2, [r7, #0]
 8015242:	b2d2      	uxtb	r2, r2
 8015244:	701a      	strb	r2, [r3, #0]
 8015246:	683b      	ldr	r3, [r7, #0]
 8015248:	0a1b      	lsrs	r3, r3, #8
 801524a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	1c5a      	adds	r2, r3, #1
 8015250:	607a      	str	r2, [r7, #4]
 8015252:	683a      	ldr	r2, [r7, #0]
 8015254:	b2d2      	uxtb	r2, r2
 8015256:	701a      	strb	r2, [r3, #0]
}
 8015258:	bf00      	nop
 801525a:	370c      	adds	r7, #12
 801525c:	46bd      	mov	sp, r7
 801525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015262:	4770      	bx	lr

08015264 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015264:	b480      	push	{r7}
 8015266:	b087      	sub	sp, #28
 8015268:	af00      	add	r7, sp, #0
 801526a:	60f8      	str	r0, [r7, #12]
 801526c:	60b9      	str	r1, [r7, #8]
 801526e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8015274:	68bb      	ldr	r3, [r7, #8]
 8015276:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d00d      	beq.n	801529a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 801527e:	693a      	ldr	r2, [r7, #16]
 8015280:	1c53      	adds	r3, r2, #1
 8015282:	613b      	str	r3, [r7, #16]
 8015284:	697b      	ldr	r3, [r7, #20]
 8015286:	1c59      	adds	r1, r3, #1
 8015288:	6179      	str	r1, [r7, #20]
 801528a:	7812      	ldrb	r2, [r2, #0]
 801528c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	3b01      	subs	r3, #1
 8015292:	607b      	str	r3, [r7, #4]
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2b00      	cmp	r3, #0
 8015298:	d1f1      	bne.n	801527e <mem_cpy+0x1a>
	}
}
 801529a:	bf00      	nop
 801529c:	371c      	adds	r7, #28
 801529e:	46bd      	mov	sp, r7
 80152a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a4:	4770      	bx	lr

080152a6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80152a6:	b480      	push	{r7}
 80152a8:	b087      	sub	sp, #28
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	60f8      	str	r0, [r7, #12]
 80152ae:	60b9      	str	r1, [r7, #8]
 80152b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80152b6:	697b      	ldr	r3, [r7, #20]
 80152b8:	1c5a      	adds	r2, r3, #1
 80152ba:	617a      	str	r2, [r7, #20]
 80152bc:	68ba      	ldr	r2, [r7, #8]
 80152be:	b2d2      	uxtb	r2, r2
 80152c0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	3b01      	subs	r3, #1
 80152c6:	607b      	str	r3, [r7, #4]
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d1f3      	bne.n	80152b6 <mem_set+0x10>
}
 80152ce:	bf00      	nop
 80152d0:	bf00      	nop
 80152d2:	371c      	adds	r7, #28
 80152d4:	46bd      	mov	sp, r7
 80152d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152da:	4770      	bx	lr

080152dc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80152dc:	b480      	push	{r7}
 80152de:	b089      	sub	sp, #36	; 0x24
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	60f8      	str	r0, [r7, #12]
 80152e4:	60b9      	str	r1, [r7, #8]
 80152e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	61fb      	str	r3, [r7, #28]
 80152ec:	68bb      	ldr	r3, [r7, #8]
 80152ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80152f0:	2300      	movs	r3, #0
 80152f2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80152f4:	69fb      	ldr	r3, [r7, #28]
 80152f6:	1c5a      	adds	r2, r3, #1
 80152f8:	61fa      	str	r2, [r7, #28]
 80152fa:	781b      	ldrb	r3, [r3, #0]
 80152fc:	4619      	mov	r1, r3
 80152fe:	69bb      	ldr	r3, [r7, #24]
 8015300:	1c5a      	adds	r2, r3, #1
 8015302:	61ba      	str	r2, [r7, #24]
 8015304:	781b      	ldrb	r3, [r3, #0]
 8015306:	1acb      	subs	r3, r1, r3
 8015308:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	3b01      	subs	r3, #1
 801530e:	607b      	str	r3, [r7, #4]
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d002      	beq.n	801531c <mem_cmp+0x40>
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d0eb      	beq.n	80152f4 <mem_cmp+0x18>

	return r;
 801531c:	697b      	ldr	r3, [r7, #20]
}
 801531e:	4618      	mov	r0, r3
 8015320:	3724      	adds	r7, #36	; 0x24
 8015322:	46bd      	mov	sp, r7
 8015324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015328:	4770      	bx	lr

0801532a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801532a:	b480      	push	{r7}
 801532c:	b083      	sub	sp, #12
 801532e:	af00      	add	r7, sp, #0
 8015330:	6078      	str	r0, [r7, #4]
 8015332:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8015334:	e002      	b.n	801533c <chk_chr+0x12>
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	3301      	adds	r3, #1
 801533a:	607b      	str	r3, [r7, #4]
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	781b      	ldrb	r3, [r3, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d005      	beq.n	8015350 <chk_chr+0x26>
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	781b      	ldrb	r3, [r3, #0]
 8015348:	461a      	mov	r2, r3
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	4293      	cmp	r3, r2
 801534e:	d1f2      	bne.n	8015336 <chk_chr+0xc>
	return *str;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	781b      	ldrb	r3, [r3, #0]
}
 8015354:	4618      	mov	r0, r3
 8015356:	370c      	adds	r7, #12
 8015358:	46bd      	mov	sp, r7
 801535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535e:	4770      	bx	lr

08015360 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8015360:	b580      	push	{r7, lr}
 8015362:	b086      	sub	sp, #24
 8015364:	af00      	add	r7, sp, #0
 8015366:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8015368:	2300      	movs	r3, #0
 801536a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	78db      	ldrb	r3, [r3, #3]
 8015370:	2b00      	cmp	r3, #0
 8015372:	d034      	beq.n	80153de <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015378:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	7858      	ldrb	r0, [r3, #1]
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015384:	2301      	movs	r3, #1
 8015386:	697a      	ldr	r2, [r7, #20]
 8015388:	f7ff feac 	bl	80150e4 <disk_write>
 801538c:	4603      	mov	r3, r0
 801538e:	2b00      	cmp	r3, #0
 8015390:	d002      	beq.n	8015398 <sync_window+0x38>
			res = FR_DISK_ERR;
 8015392:	2301      	movs	r3, #1
 8015394:	73fb      	strb	r3, [r7, #15]
 8015396:	e022      	b.n	80153de <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	2200      	movs	r2, #0
 801539c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153a2:	697a      	ldr	r2, [r7, #20]
 80153a4:	1ad2      	subs	r2, r2, r3
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	69db      	ldr	r3, [r3, #28]
 80153aa:	429a      	cmp	r2, r3
 80153ac:	d217      	bcs.n	80153de <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	789b      	ldrb	r3, [r3, #2]
 80153b2:	613b      	str	r3, [r7, #16]
 80153b4:	e010      	b.n	80153d8 <sync_window+0x78>
					wsect += fs->fsize;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	69db      	ldr	r3, [r3, #28]
 80153ba:	697a      	ldr	r2, [r7, #20]
 80153bc:	4413      	add	r3, r2
 80153be:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	7858      	ldrb	r0, [r3, #1]
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80153ca:	2301      	movs	r3, #1
 80153cc:	697a      	ldr	r2, [r7, #20]
 80153ce:	f7ff fe89 	bl	80150e4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80153d2:	693b      	ldr	r3, [r7, #16]
 80153d4:	3b01      	subs	r3, #1
 80153d6:	613b      	str	r3, [r7, #16]
 80153d8:	693b      	ldr	r3, [r7, #16]
 80153da:	2b01      	cmp	r3, #1
 80153dc:	d8eb      	bhi.n	80153b6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80153de:	7bfb      	ldrb	r3, [r7, #15]
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3718      	adds	r7, #24
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}

080153e8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80153e8:	b580      	push	{r7, lr}
 80153ea:	b084      	sub	sp, #16
 80153ec:	af00      	add	r7, sp, #0
 80153ee:	6078      	str	r0, [r7, #4]
 80153f0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80153f2:	2300      	movs	r3, #0
 80153f4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153fa:	683a      	ldr	r2, [r7, #0]
 80153fc:	429a      	cmp	r2, r3
 80153fe:	d01b      	beq.n	8015438 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f7ff ffad 	bl	8015360 <sync_window>
 8015406:	4603      	mov	r3, r0
 8015408:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801540a:	7bfb      	ldrb	r3, [r7, #15]
 801540c:	2b00      	cmp	r3, #0
 801540e:	d113      	bne.n	8015438 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	7858      	ldrb	r0, [r3, #1]
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801541a:	2301      	movs	r3, #1
 801541c:	683a      	ldr	r2, [r7, #0]
 801541e:	f7ff fe41 	bl	80150a4 <disk_read>
 8015422:	4603      	mov	r3, r0
 8015424:	2b00      	cmp	r3, #0
 8015426:	d004      	beq.n	8015432 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8015428:	f04f 33ff 	mov.w	r3, #4294967295
 801542c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801542e:	2301      	movs	r3, #1
 8015430:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	683a      	ldr	r2, [r7, #0]
 8015436:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8015438:	7bfb      	ldrb	r3, [r7, #15]
}
 801543a:	4618      	mov	r0, r3
 801543c:	3710      	adds	r7, #16
 801543e:	46bd      	mov	sp, r7
 8015440:	bd80      	pop	{r7, pc}
	...

08015444 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8015444:	b580      	push	{r7, lr}
 8015446:	b084      	sub	sp, #16
 8015448:	af00      	add	r7, sp, #0
 801544a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801544c:	6878      	ldr	r0, [r7, #4]
 801544e:	f7ff ff87 	bl	8015360 <sync_window>
 8015452:	4603      	mov	r3, r0
 8015454:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015456:	7bfb      	ldrb	r3, [r7, #15]
 8015458:	2b00      	cmp	r3, #0
 801545a:	d159      	bne.n	8015510 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	781b      	ldrb	r3, [r3, #0]
 8015460:	2b03      	cmp	r3, #3
 8015462:	d149      	bne.n	80154f8 <sync_fs+0xb4>
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	791b      	ldrb	r3, [r3, #4]
 8015468:	2b01      	cmp	r3, #1
 801546a:	d145      	bne.n	80154f8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	899b      	ldrh	r3, [r3, #12]
 8015476:	461a      	mov	r2, r3
 8015478:	2100      	movs	r1, #0
 801547a:	f7ff ff14 	bl	80152a6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	3334      	adds	r3, #52	; 0x34
 8015482:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8015486:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801548a:	4618      	mov	r0, r3
 801548c:	f7ff fea3 	bl	80151d6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	3334      	adds	r3, #52	; 0x34
 8015494:	4921      	ldr	r1, [pc, #132]	; (801551c <sync_fs+0xd8>)
 8015496:	4618      	mov	r0, r3
 8015498:	f7ff feb8 	bl	801520c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	3334      	adds	r3, #52	; 0x34
 80154a0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80154a4:	491e      	ldr	r1, [pc, #120]	; (8015520 <sync_fs+0xdc>)
 80154a6:	4618      	mov	r0, r3
 80154a8:	f7ff feb0 	bl	801520c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	3334      	adds	r3, #52	; 0x34
 80154b0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	695b      	ldr	r3, [r3, #20]
 80154b8:	4619      	mov	r1, r3
 80154ba:	4610      	mov	r0, r2
 80154bc:	f7ff fea6 	bl	801520c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	3334      	adds	r3, #52	; 0x34
 80154c4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	691b      	ldr	r3, [r3, #16]
 80154cc:	4619      	mov	r1, r3
 80154ce:	4610      	mov	r0, r2
 80154d0:	f7ff fe9c 	bl	801520c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6a1b      	ldr	r3, [r3, #32]
 80154d8:	1c5a      	adds	r2, r3, #1
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	7858      	ldrb	r0, [r3, #1]
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80154ec:	2301      	movs	r3, #1
 80154ee:	f7ff fdf9 	bl	80150e4 <disk_write>
			fs->fsi_flag = 0;
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	2200      	movs	r2, #0
 80154f6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	785b      	ldrb	r3, [r3, #1]
 80154fc:	2200      	movs	r2, #0
 80154fe:	2100      	movs	r1, #0
 8015500:	4618      	mov	r0, r3
 8015502:	f7ff fe0f 	bl	8015124 <disk_ioctl>
 8015506:	4603      	mov	r3, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	d001      	beq.n	8015510 <sync_fs+0xcc>
 801550c:	2301      	movs	r3, #1
 801550e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8015510:	7bfb      	ldrb	r3, [r7, #15]
}
 8015512:	4618      	mov	r0, r3
 8015514:	3710      	adds	r7, #16
 8015516:	46bd      	mov	sp, r7
 8015518:	bd80      	pop	{r7, pc}
 801551a:	bf00      	nop
 801551c:	41615252 	.word	0x41615252
 8015520:	61417272 	.word	0x61417272

08015524 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8015524:	b480      	push	{r7}
 8015526:	b083      	sub	sp, #12
 8015528:	af00      	add	r7, sp, #0
 801552a:	6078      	str	r0, [r7, #4]
 801552c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801552e:	683b      	ldr	r3, [r7, #0]
 8015530:	3b02      	subs	r3, #2
 8015532:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	699b      	ldr	r3, [r3, #24]
 8015538:	3b02      	subs	r3, #2
 801553a:	683a      	ldr	r2, [r7, #0]
 801553c:	429a      	cmp	r2, r3
 801553e:	d301      	bcc.n	8015544 <clust2sect+0x20>
 8015540:	2300      	movs	r3, #0
 8015542:	e008      	b.n	8015556 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	895b      	ldrh	r3, [r3, #10]
 8015548:	461a      	mov	r2, r3
 801554a:	683b      	ldr	r3, [r7, #0]
 801554c:	fb03 f202 	mul.w	r2, r3, r2
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015554:	4413      	add	r3, r2
}
 8015556:	4618      	mov	r0, r3
 8015558:	370c      	adds	r7, #12
 801555a:	46bd      	mov	sp, r7
 801555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015560:	4770      	bx	lr

08015562 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8015562:	b580      	push	{r7, lr}
 8015564:	b086      	sub	sp, #24
 8015566:	af00      	add	r7, sp, #0
 8015568:	6078      	str	r0, [r7, #4]
 801556a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	2b01      	cmp	r3, #1
 8015576:	d904      	bls.n	8015582 <get_fat+0x20>
 8015578:	693b      	ldr	r3, [r7, #16]
 801557a:	699b      	ldr	r3, [r3, #24]
 801557c:	683a      	ldr	r2, [r7, #0]
 801557e:	429a      	cmp	r2, r3
 8015580:	d302      	bcc.n	8015588 <get_fat+0x26>
		val = 1;	/* Internal error */
 8015582:	2301      	movs	r3, #1
 8015584:	617b      	str	r3, [r7, #20]
 8015586:	e0bb      	b.n	8015700 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8015588:	f04f 33ff 	mov.w	r3, #4294967295
 801558c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	2b03      	cmp	r3, #3
 8015594:	f000 8083 	beq.w	801569e <get_fat+0x13c>
 8015598:	2b03      	cmp	r3, #3
 801559a:	f300 80a7 	bgt.w	80156ec <get_fat+0x18a>
 801559e:	2b01      	cmp	r3, #1
 80155a0:	d002      	beq.n	80155a8 <get_fat+0x46>
 80155a2:	2b02      	cmp	r3, #2
 80155a4:	d056      	beq.n	8015654 <get_fat+0xf2>
 80155a6:	e0a1      	b.n	80156ec <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80155a8:	683b      	ldr	r3, [r7, #0]
 80155aa:	60fb      	str	r3, [r7, #12]
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	085b      	lsrs	r3, r3, #1
 80155b0:	68fa      	ldr	r2, [r7, #12]
 80155b2:	4413      	add	r3, r2
 80155b4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	899b      	ldrh	r3, [r3, #12]
 80155be:	4619      	mov	r1, r3
 80155c0:	68fb      	ldr	r3, [r7, #12]
 80155c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80155c6:	4413      	add	r3, r2
 80155c8:	4619      	mov	r1, r3
 80155ca:	6938      	ldr	r0, [r7, #16]
 80155cc:	f7ff ff0c 	bl	80153e8 <move_window>
 80155d0:	4603      	mov	r3, r0
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	f040 808d 	bne.w	80156f2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80155d8:	68fb      	ldr	r3, [r7, #12]
 80155da:	1c5a      	adds	r2, r3, #1
 80155dc:	60fa      	str	r2, [r7, #12]
 80155de:	693a      	ldr	r2, [r7, #16]
 80155e0:	8992      	ldrh	r2, [r2, #12]
 80155e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80155e6:	fb01 f202 	mul.w	r2, r1, r2
 80155ea:	1a9b      	subs	r3, r3, r2
 80155ec:	693a      	ldr	r2, [r7, #16]
 80155ee:	4413      	add	r3, r2
 80155f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80155f4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80155fa:	693b      	ldr	r3, [r7, #16]
 80155fc:	899b      	ldrh	r3, [r3, #12]
 80155fe:	4619      	mov	r1, r3
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	fbb3 f3f1 	udiv	r3, r3, r1
 8015606:	4413      	add	r3, r2
 8015608:	4619      	mov	r1, r3
 801560a:	6938      	ldr	r0, [r7, #16]
 801560c:	f7ff feec 	bl	80153e8 <move_window>
 8015610:	4603      	mov	r3, r0
 8015612:	2b00      	cmp	r3, #0
 8015614:	d16f      	bne.n	80156f6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	899b      	ldrh	r3, [r3, #12]
 801561a:	461a      	mov	r2, r3
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	fbb3 f1f2 	udiv	r1, r3, r2
 8015622:	fb01 f202 	mul.w	r2, r1, r2
 8015626:	1a9b      	subs	r3, r3, r2
 8015628:	693a      	ldr	r2, [r7, #16]
 801562a:	4413      	add	r3, r2
 801562c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8015630:	021b      	lsls	r3, r3, #8
 8015632:	461a      	mov	r2, r3
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	4313      	orrs	r3, r2
 8015638:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801563a:	683b      	ldr	r3, [r7, #0]
 801563c:	f003 0301 	and.w	r3, r3, #1
 8015640:	2b00      	cmp	r3, #0
 8015642:	d002      	beq.n	801564a <get_fat+0xe8>
 8015644:	68bb      	ldr	r3, [r7, #8]
 8015646:	091b      	lsrs	r3, r3, #4
 8015648:	e002      	b.n	8015650 <get_fat+0xee>
 801564a:	68bb      	ldr	r3, [r7, #8]
 801564c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015650:	617b      	str	r3, [r7, #20]
			break;
 8015652:	e055      	b.n	8015700 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8015654:	693b      	ldr	r3, [r7, #16]
 8015656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015658:	693b      	ldr	r3, [r7, #16]
 801565a:	899b      	ldrh	r3, [r3, #12]
 801565c:	085b      	lsrs	r3, r3, #1
 801565e:	b29b      	uxth	r3, r3
 8015660:	4619      	mov	r1, r3
 8015662:	683b      	ldr	r3, [r7, #0]
 8015664:	fbb3 f3f1 	udiv	r3, r3, r1
 8015668:	4413      	add	r3, r2
 801566a:	4619      	mov	r1, r3
 801566c:	6938      	ldr	r0, [r7, #16]
 801566e:	f7ff febb 	bl	80153e8 <move_window>
 8015672:	4603      	mov	r3, r0
 8015674:	2b00      	cmp	r3, #0
 8015676:	d140      	bne.n	80156fa <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8015678:	693b      	ldr	r3, [r7, #16]
 801567a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	005b      	lsls	r3, r3, #1
 8015682:	693a      	ldr	r2, [r7, #16]
 8015684:	8992      	ldrh	r2, [r2, #12]
 8015686:	fbb3 f0f2 	udiv	r0, r3, r2
 801568a:	fb00 f202 	mul.w	r2, r0, r2
 801568e:	1a9b      	subs	r3, r3, r2
 8015690:	440b      	add	r3, r1
 8015692:	4618      	mov	r0, r3
 8015694:	f7ff fd64 	bl	8015160 <ld_word>
 8015698:	4603      	mov	r3, r0
 801569a:	617b      	str	r3, [r7, #20]
			break;
 801569c:	e030      	b.n	8015700 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801569e:	693b      	ldr	r3, [r7, #16]
 80156a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80156a2:	693b      	ldr	r3, [r7, #16]
 80156a4:	899b      	ldrh	r3, [r3, #12]
 80156a6:	089b      	lsrs	r3, r3, #2
 80156a8:	b29b      	uxth	r3, r3
 80156aa:	4619      	mov	r1, r3
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80156b2:	4413      	add	r3, r2
 80156b4:	4619      	mov	r1, r3
 80156b6:	6938      	ldr	r0, [r7, #16]
 80156b8:	f7ff fe96 	bl	80153e8 <move_window>
 80156bc:	4603      	mov	r3, r0
 80156be:	2b00      	cmp	r3, #0
 80156c0:	d11d      	bne.n	80156fe <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80156c2:	693b      	ldr	r3, [r7, #16]
 80156c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80156c8:	683b      	ldr	r3, [r7, #0]
 80156ca:	009b      	lsls	r3, r3, #2
 80156cc:	693a      	ldr	r2, [r7, #16]
 80156ce:	8992      	ldrh	r2, [r2, #12]
 80156d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80156d4:	fb00 f202 	mul.w	r2, r0, r2
 80156d8:	1a9b      	subs	r3, r3, r2
 80156da:	440b      	add	r3, r1
 80156dc:	4618      	mov	r0, r3
 80156de:	f7ff fd57 	bl	8015190 <ld_dword>
 80156e2:	4603      	mov	r3, r0
 80156e4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80156e8:	617b      	str	r3, [r7, #20]
			break;
 80156ea:	e009      	b.n	8015700 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80156ec:	2301      	movs	r3, #1
 80156ee:	617b      	str	r3, [r7, #20]
 80156f0:	e006      	b.n	8015700 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80156f2:	bf00      	nop
 80156f4:	e004      	b.n	8015700 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80156f6:	bf00      	nop
 80156f8:	e002      	b.n	8015700 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80156fa:	bf00      	nop
 80156fc:	e000      	b.n	8015700 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80156fe:	bf00      	nop
		}
	}

	return val;
 8015700:	697b      	ldr	r3, [r7, #20]
}
 8015702:	4618      	mov	r0, r3
 8015704:	3718      	adds	r7, #24
 8015706:	46bd      	mov	sp, r7
 8015708:	bd80      	pop	{r7, pc}

0801570a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801570a:	b590      	push	{r4, r7, lr}
 801570c:	b089      	sub	sp, #36	; 0x24
 801570e:	af00      	add	r7, sp, #0
 8015710:	60f8      	str	r0, [r7, #12]
 8015712:	60b9      	str	r1, [r7, #8]
 8015714:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8015716:	2302      	movs	r3, #2
 8015718:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801571a:	68bb      	ldr	r3, [r7, #8]
 801571c:	2b01      	cmp	r3, #1
 801571e:	f240 8102 	bls.w	8015926 <put_fat+0x21c>
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	699b      	ldr	r3, [r3, #24]
 8015726:	68ba      	ldr	r2, [r7, #8]
 8015728:	429a      	cmp	r2, r3
 801572a:	f080 80fc 	bcs.w	8015926 <put_fat+0x21c>
		switch (fs->fs_type) {
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	781b      	ldrb	r3, [r3, #0]
 8015732:	2b03      	cmp	r3, #3
 8015734:	f000 80b6 	beq.w	80158a4 <put_fat+0x19a>
 8015738:	2b03      	cmp	r3, #3
 801573a:	f300 80fd 	bgt.w	8015938 <put_fat+0x22e>
 801573e:	2b01      	cmp	r3, #1
 8015740:	d003      	beq.n	801574a <put_fat+0x40>
 8015742:	2b02      	cmp	r3, #2
 8015744:	f000 8083 	beq.w	801584e <put_fat+0x144>
 8015748:	e0f6      	b.n	8015938 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801574a:	68bb      	ldr	r3, [r7, #8]
 801574c:	61bb      	str	r3, [r7, #24]
 801574e:	69bb      	ldr	r3, [r7, #24]
 8015750:	085b      	lsrs	r3, r3, #1
 8015752:	69ba      	ldr	r2, [r7, #24]
 8015754:	4413      	add	r3, r2
 8015756:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	899b      	ldrh	r3, [r3, #12]
 8015760:	4619      	mov	r1, r3
 8015762:	69bb      	ldr	r3, [r7, #24]
 8015764:	fbb3 f3f1 	udiv	r3, r3, r1
 8015768:	4413      	add	r3, r2
 801576a:	4619      	mov	r1, r3
 801576c:	68f8      	ldr	r0, [r7, #12]
 801576e:	f7ff fe3b 	bl	80153e8 <move_window>
 8015772:	4603      	mov	r3, r0
 8015774:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015776:	7ffb      	ldrb	r3, [r7, #31]
 8015778:	2b00      	cmp	r3, #0
 801577a:	f040 80d6 	bne.w	801592a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801577e:	68fb      	ldr	r3, [r7, #12]
 8015780:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015784:	69bb      	ldr	r3, [r7, #24]
 8015786:	1c5a      	adds	r2, r3, #1
 8015788:	61ba      	str	r2, [r7, #24]
 801578a:	68fa      	ldr	r2, [r7, #12]
 801578c:	8992      	ldrh	r2, [r2, #12]
 801578e:	fbb3 f0f2 	udiv	r0, r3, r2
 8015792:	fb00 f202 	mul.w	r2, r0, r2
 8015796:	1a9b      	subs	r3, r3, r2
 8015798:	440b      	add	r3, r1
 801579a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801579c:	68bb      	ldr	r3, [r7, #8]
 801579e:	f003 0301 	and.w	r3, r3, #1
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d00d      	beq.n	80157c2 <put_fat+0xb8>
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	781b      	ldrb	r3, [r3, #0]
 80157aa:	b25b      	sxtb	r3, r3
 80157ac:	f003 030f 	and.w	r3, r3, #15
 80157b0:	b25a      	sxtb	r2, r3
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	b2db      	uxtb	r3, r3
 80157b6:	011b      	lsls	r3, r3, #4
 80157b8:	b25b      	sxtb	r3, r3
 80157ba:	4313      	orrs	r3, r2
 80157bc:	b25b      	sxtb	r3, r3
 80157be:	b2db      	uxtb	r3, r3
 80157c0:	e001      	b.n	80157c6 <put_fat+0xbc>
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	b2db      	uxtb	r3, r3
 80157c6:	697a      	ldr	r2, [r7, #20]
 80157c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80157ca:	68fb      	ldr	r3, [r7, #12]
 80157cc:	2201      	movs	r2, #1
 80157ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80157d0:	68fb      	ldr	r3, [r7, #12]
 80157d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	899b      	ldrh	r3, [r3, #12]
 80157d8:	4619      	mov	r1, r3
 80157da:	69bb      	ldr	r3, [r7, #24]
 80157dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80157e0:	4413      	add	r3, r2
 80157e2:	4619      	mov	r1, r3
 80157e4:	68f8      	ldr	r0, [r7, #12]
 80157e6:	f7ff fdff 	bl	80153e8 <move_window>
 80157ea:	4603      	mov	r3, r0
 80157ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80157ee:	7ffb      	ldrb	r3, [r7, #31]
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	f040 809c 	bne.w	801592e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80157fc:	68fb      	ldr	r3, [r7, #12]
 80157fe:	899b      	ldrh	r3, [r3, #12]
 8015800:	461a      	mov	r2, r3
 8015802:	69bb      	ldr	r3, [r7, #24]
 8015804:	fbb3 f0f2 	udiv	r0, r3, r2
 8015808:	fb00 f202 	mul.w	r2, r0, r2
 801580c:	1a9b      	subs	r3, r3, r2
 801580e:	440b      	add	r3, r1
 8015810:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	f003 0301 	and.w	r3, r3, #1
 8015818:	2b00      	cmp	r3, #0
 801581a:	d003      	beq.n	8015824 <put_fat+0x11a>
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	091b      	lsrs	r3, r3, #4
 8015820:	b2db      	uxtb	r3, r3
 8015822:	e00e      	b.n	8015842 <put_fat+0x138>
 8015824:	697b      	ldr	r3, [r7, #20]
 8015826:	781b      	ldrb	r3, [r3, #0]
 8015828:	b25b      	sxtb	r3, r3
 801582a:	f023 030f 	bic.w	r3, r3, #15
 801582e:	b25a      	sxtb	r2, r3
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	0a1b      	lsrs	r3, r3, #8
 8015834:	b25b      	sxtb	r3, r3
 8015836:	f003 030f 	and.w	r3, r3, #15
 801583a:	b25b      	sxtb	r3, r3
 801583c:	4313      	orrs	r3, r2
 801583e:	b25b      	sxtb	r3, r3
 8015840:	b2db      	uxtb	r3, r3
 8015842:	697a      	ldr	r2, [r7, #20]
 8015844:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	2201      	movs	r2, #1
 801584a:	70da      	strb	r2, [r3, #3]
			break;
 801584c:	e074      	b.n	8015938 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	899b      	ldrh	r3, [r3, #12]
 8015856:	085b      	lsrs	r3, r3, #1
 8015858:	b29b      	uxth	r3, r3
 801585a:	4619      	mov	r1, r3
 801585c:	68bb      	ldr	r3, [r7, #8]
 801585e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015862:	4413      	add	r3, r2
 8015864:	4619      	mov	r1, r3
 8015866:	68f8      	ldr	r0, [r7, #12]
 8015868:	f7ff fdbe 	bl	80153e8 <move_window>
 801586c:	4603      	mov	r3, r0
 801586e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8015870:	7ffb      	ldrb	r3, [r7, #31]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d15d      	bne.n	8015932 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801587c:	68bb      	ldr	r3, [r7, #8]
 801587e:	005b      	lsls	r3, r3, #1
 8015880:	68fa      	ldr	r2, [r7, #12]
 8015882:	8992      	ldrh	r2, [r2, #12]
 8015884:	fbb3 f0f2 	udiv	r0, r3, r2
 8015888:	fb00 f202 	mul.w	r2, r0, r2
 801588c:	1a9b      	subs	r3, r3, r2
 801588e:	440b      	add	r3, r1
 8015890:	687a      	ldr	r2, [r7, #4]
 8015892:	b292      	uxth	r2, r2
 8015894:	4611      	mov	r1, r2
 8015896:	4618      	mov	r0, r3
 8015898:	f7ff fc9d 	bl	80151d6 <st_word>
			fs->wflag = 1;
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	2201      	movs	r2, #1
 80158a0:	70da      	strb	r2, [r3, #3]
			break;
 80158a2:	e049      	b.n	8015938 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80158a8:	68fb      	ldr	r3, [r7, #12]
 80158aa:	899b      	ldrh	r3, [r3, #12]
 80158ac:	089b      	lsrs	r3, r3, #2
 80158ae:	b29b      	uxth	r3, r3
 80158b0:	4619      	mov	r1, r3
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	fbb3 f3f1 	udiv	r3, r3, r1
 80158b8:	4413      	add	r3, r2
 80158ba:	4619      	mov	r1, r3
 80158bc:	68f8      	ldr	r0, [r7, #12]
 80158be:	f7ff fd93 	bl	80153e8 <move_window>
 80158c2:	4603      	mov	r3, r0
 80158c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80158c6:	7ffb      	ldrb	r3, [r7, #31]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d134      	bne.n	8015936 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80158d2:	68fb      	ldr	r3, [r7, #12]
 80158d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80158d8:	68bb      	ldr	r3, [r7, #8]
 80158da:	009b      	lsls	r3, r3, #2
 80158dc:	68fa      	ldr	r2, [r7, #12]
 80158de:	8992      	ldrh	r2, [r2, #12]
 80158e0:	fbb3 f0f2 	udiv	r0, r3, r2
 80158e4:	fb00 f202 	mul.w	r2, r0, r2
 80158e8:	1a9b      	subs	r3, r3, r2
 80158ea:	440b      	add	r3, r1
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7ff fc4f 	bl	8015190 <ld_dword>
 80158f2:	4603      	mov	r3, r0
 80158f4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80158f8:	4323      	orrs	r3, r4
 80158fa:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015902:	68bb      	ldr	r3, [r7, #8]
 8015904:	009b      	lsls	r3, r3, #2
 8015906:	68fa      	ldr	r2, [r7, #12]
 8015908:	8992      	ldrh	r2, [r2, #12]
 801590a:	fbb3 f0f2 	udiv	r0, r3, r2
 801590e:	fb00 f202 	mul.w	r2, r0, r2
 8015912:	1a9b      	subs	r3, r3, r2
 8015914:	440b      	add	r3, r1
 8015916:	6879      	ldr	r1, [r7, #4]
 8015918:	4618      	mov	r0, r3
 801591a:	f7ff fc77 	bl	801520c <st_dword>
			fs->wflag = 1;
 801591e:	68fb      	ldr	r3, [r7, #12]
 8015920:	2201      	movs	r2, #1
 8015922:	70da      	strb	r2, [r3, #3]
			break;
 8015924:	e008      	b.n	8015938 <put_fat+0x22e>
		}
	}
 8015926:	bf00      	nop
 8015928:	e006      	b.n	8015938 <put_fat+0x22e>
			if (res != FR_OK) break;
 801592a:	bf00      	nop
 801592c:	e004      	b.n	8015938 <put_fat+0x22e>
			if (res != FR_OK) break;
 801592e:	bf00      	nop
 8015930:	e002      	b.n	8015938 <put_fat+0x22e>
			if (res != FR_OK) break;
 8015932:	bf00      	nop
 8015934:	e000      	b.n	8015938 <put_fat+0x22e>
			if (res != FR_OK) break;
 8015936:	bf00      	nop
	return res;
 8015938:	7ffb      	ldrb	r3, [r7, #31]
}
 801593a:	4618      	mov	r0, r3
 801593c:	3724      	adds	r7, #36	; 0x24
 801593e:	46bd      	mov	sp, r7
 8015940:	bd90      	pop	{r4, r7, pc}

08015942 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8015942:	b580      	push	{r7, lr}
 8015944:	b088      	sub	sp, #32
 8015946:	af00      	add	r7, sp, #0
 8015948:	60f8      	str	r0, [r7, #12]
 801594a:	60b9      	str	r1, [r7, #8]
 801594c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801594e:	2300      	movs	r3, #0
 8015950:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8015952:	68fb      	ldr	r3, [r7, #12]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8015958:	68bb      	ldr	r3, [r7, #8]
 801595a:	2b01      	cmp	r3, #1
 801595c:	d904      	bls.n	8015968 <remove_chain+0x26>
 801595e:	69bb      	ldr	r3, [r7, #24]
 8015960:	699b      	ldr	r3, [r3, #24]
 8015962:	68ba      	ldr	r2, [r7, #8]
 8015964:	429a      	cmp	r2, r3
 8015966:	d301      	bcc.n	801596c <remove_chain+0x2a>
 8015968:	2302      	movs	r3, #2
 801596a:	e04b      	b.n	8015a04 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	2b00      	cmp	r3, #0
 8015970:	d00c      	beq.n	801598c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8015972:	f04f 32ff 	mov.w	r2, #4294967295
 8015976:	6879      	ldr	r1, [r7, #4]
 8015978:	69b8      	ldr	r0, [r7, #24]
 801597a:	f7ff fec6 	bl	801570a <put_fat>
 801597e:	4603      	mov	r3, r0
 8015980:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8015982:	7ffb      	ldrb	r3, [r7, #31]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d001      	beq.n	801598c <remove_chain+0x4a>
 8015988:	7ffb      	ldrb	r3, [r7, #31]
 801598a:	e03b      	b.n	8015a04 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801598c:	68b9      	ldr	r1, [r7, #8]
 801598e:	68f8      	ldr	r0, [r7, #12]
 8015990:	f7ff fde7 	bl	8015562 <get_fat>
 8015994:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8015996:	697b      	ldr	r3, [r7, #20]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d031      	beq.n	8015a00 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801599c:	697b      	ldr	r3, [r7, #20]
 801599e:	2b01      	cmp	r3, #1
 80159a0:	d101      	bne.n	80159a6 <remove_chain+0x64>
 80159a2:	2302      	movs	r3, #2
 80159a4:	e02e      	b.n	8015a04 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159ac:	d101      	bne.n	80159b2 <remove_chain+0x70>
 80159ae:	2301      	movs	r3, #1
 80159b0:	e028      	b.n	8015a04 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80159b2:	2200      	movs	r2, #0
 80159b4:	68b9      	ldr	r1, [r7, #8]
 80159b6:	69b8      	ldr	r0, [r7, #24]
 80159b8:	f7ff fea7 	bl	801570a <put_fat>
 80159bc:	4603      	mov	r3, r0
 80159be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80159c0:	7ffb      	ldrb	r3, [r7, #31]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d001      	beq.n	80159ca <remove_chain+0x88>
 80159c6:	7ffb      	ldrb	r3, [r7, #31]
 80159c8:	e01c      	b.n	8015a04 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80159ca:	69bb      	ldr	r3, [r7, #24]
 80159cc:	695a      	ldr	r2, [r3, #20]
 80159ce:	69bb      	ldr	r3, [r7, #24]
 80159d0:	699b      	ldr	r3, [r3, #24]
 80159d2:	3b02      	subs	r3, #2
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d20b      	bcs.n	80159f0 <remove_chain+0xae>
			fs->free_clst++;
 80159d8:	69bb      	ldr	r3, [r7, #24]
 80159da:	695b      	ldr	r3, [r3, #20]
 80159dc:	1c5a      	adds	r2, r3, #1
 80159de:	69bb      	ldr	r3, [r7, #24]
 80159e0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80159e2:	69bb      	ldr	r3, [r7, #24]
 80159e4:	791b      	ldrb	r3, [r3, #4]
 80159e6:	f043 0301 	orr.w	r3, r3, #1
 80159ea:	b2da      	uxtb	r2, r3
 80159ec:	69bb      	ldr	r3, [r7, #24]
 80159ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80159f0:	697b      	ldr	r3, [r7, #20]
 80159f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80159f4:	69bb      	ldr	r3, [r7, #24]
 80159f6:	699b      	ldr	r3, [r3, #24]
 80159f8:	68ba      	ldr	r2, [r7, #8]
 80159fa:	429a      	cmp	r2, r3
 80159fc:	d3c6      	bcc.n	801598c <remove_chain+0x4a>
 80159fe:	e000      	b.n	8015a02 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8015a00:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8015a02:	2300      	movs	r3, #0
}
 8015a04:	4618      	mov	r0, r3
 8015a06:	3720      	adds	r7, #32
 8015a08:	46bd      	mov	sp, r7
 8015a0a:	bd80      	pop	{r7, pc}

08015a0c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8015a0c:	b580      	push	{r7, lr}
 8015a0e:	b088      	sub	sp, #32
 8015a10:	af00      	add	r7, sp, #0
 8015a12:	6078      	str	r0, [r7, #4]
 8015a14:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d10d      	bne.n	8015a3e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	691b      	ldr	r3, [r3, #16]
 8015a26:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d004      	beq.n	8015a38 <create_chain+0x2c>
 8015a2e:	693b      	ldr	r3, [r7, #16]
 8015a30:	699b      	ldr	r3, [r3, #24]
 8015a32:	69ba      	ldr	r2, [r7, #24]
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d31b      	bcc.n	8015a70 <create_chain+0x64>
 8015a38:	2301      	movs	r3, #1
 8015a3a:	61bb      	str	r3, [r7, #24]
 8015a3c:	e018      	b.n	8015a70 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8015a3e:	6839      	ldr	r1, [r7, #0]
 8015a40:	6878      	ldr	r0, [r7, #4]
 8015a42:	f7ff fd8e 	bl	8015562 <get_fat>
 8015a46:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8015a48:	68fb      	ldr	r3, [r7, #12]
 8015a4a:	2b01      	cmp	r3, #1
 8015a4c:	d801      	bhi.n	8015a52 <create_chain+0x46>
 8015a4e:	2301      	movs	r3, #1
 8015a50:	e070      	b.n	8015b34 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8015a52:	68fb      	ldr	r3, [r7, #12]
 8015a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a58:	d101      	bne.n	8015a5e <create_chain+0x52>
 8015a5a:	68fb      	ldr	r3, [r7, #12]
 8015a5c:	e06a      	b.n	8015b34 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8015a5e:	693b      	ldr	r3, [r7, #16]
 8015a60:	699b      	ldr	r3, [r3, #24]
 8015a62:	68fa      	ldr	r2, [r7, #12]
 8015a64:	429a      	cmp	r2, r3
 8015a66:	d201      	bcs.n	8015a6c <create_chain+0x60>
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	e063      	b.n	8015b34 <create_chain+0x128>
		scl = clst;
 8015a6c:	683b      	ldr	r3, [r7, #0]
 8015a6e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8015a70:	69bb      	ldr	r3, [r7, #24]
 8015a72:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8015a74:	69fb      	ldr	r3, [r7, #28]
 8015a76:	3301      	adds	r3, #1
 8015a78:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8015a7a:	693b      	ldr	r3, [r7, #16]
 8015a7c:	699b      	ldr	r3, [r3, #24]
 8015a7e:	69fa      	ldr	r2, [r7, #28]
 8015a80:	429a      	cmp	r2, r3
 8015a82:	d307      	bcc.n	8015a94 <create_chain+0x88>
				ncl = 2;
 8015a84:	2302      	movs	r3, #2
 8015a86:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8015a88:	69fa      	ldr	r2, [r7, #28]
 8015a8a:	69bb      	ldr	r3, [r7, #24]
 8015a8c:	429a      	cmp	r2, r3
 8015a8e:	d901      	bls.n	8015a94 <create_chain+0x88>
 8015a90:	2300      	movs	r3, #0
 8015a92:	e04f      	b.n	8015b34 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8015a94:	69f9      	ldr	r1, [r7, #28]
 8015a96:	6878      	ldr	r0, [r7, #4]
 8015a98:	f7ff fd63 	bl	8015562 <get_fat>
 8015a9c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d00e      	beq.n	8015ac2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8015aa4:	68fb      	ldr	r3, [r7, #12]
 8015aa6:	2b01      	cmp	r3, #1
 8015aa8:	d003      	beq.n	8015ab2 <create_chain+0xa6>
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015ab0:	d101      	bne.n	8015ab6 <create_chain+0xaa>
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	e03e      	b.n	8015b34 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8015ab6:	69fa      	ldr	r2, [r7, #28]
 8015ab8:	69bb      	ldr	r3, [r7, #24]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d1da      	bne.n	8015a74 <create_chain+0x68>
 8015abe:	2300      	movs	r3, #0
 8015ac0:	e038      	b.n	8015b34 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8015ac2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8015ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8015ac8:	69f9      	ldr	r1, [r7, #28]
 8015aca:	6938      	ldr	r0, [r7, #16]
 8015acc:	f7ff fe1d 	bl	801570a <put_fat>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8015ad4:	7dfb      	ldrb	r3, [r7, #23]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	d109      	bne.n	8015aee <create_chain+0xe2>
 8015ada:	683b      	ldr	r3, [r7, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d006      	beq.n	8015aee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8015ae0:	69fa      	ldr	r2, [r7, #28]
 8015ae2:	6839      	ldr	r1, [r7, #0]
 8015ae4:	6938      	ldr	r0, [r7, #16]
 8015ae6:	f7ff fe10 	bl	801570a <put_fat>
 8015aea:	4603      	mov	r3, r0
 8015aec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8015aee:	7dfb      	ldrb	r3, [r7, #23]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	d116      	bne.n	8015b22 <create_chain+0x116>
		fs->last_clst = ncl;
 8015af4:	693b      	ldr	r3, [r7, #16]
 8015af6:	69fa      	ldr	r2, [r7, #28]
 8015af8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8015afa:	693b      	ldr	r3, [r7, #16]
 8015afc:	695a      	ldr	r2, [r3, #20]
 8015afe:	693b      	ldr	r3, [r7, #16]
 8015b00:	699b      	ldr	r3, [r3, #24]
 8015b02:	3b02      	subs	r3, #2
 8015b04:	429a      	cmp	r2, r3
 8015b06:	d804      	bhi.n	8015b12 <create_chain+0x106>
 8015b08:	693b      	ldr	r3, [r7, #16]
 8015b0a:	695b      	ldr	r3, [r3, #20]
 8015b0c:	1e5a      	subs	r2, r3, #1
 8015b0e:	693b      	ldr	r3, [r7, #16]
 8015b10:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8015b12:	693b      	ldr	r3, [r7, #16]
 8015b14:	791b      	ldrb	r3, [r3, #4]
 8015b16:	f043 0301 	orr.w	r3, r3, #1
 8015b1a:	b2da      	uxtb	r2, r3
 8015b1c:	693b      	ldr	r3, [r7, #16]
 8015b1e:	711a      	strb	r2, [r3, #4]
 8015b20:	e007      	b.n	8015b32 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8015b22:	7dfb      	ldrb	r3, [r7, #23]
 8015b24:	2b01      	cmp	r3, #1
 8015b26:	d102      	bne.n	8015b2e <create_chain+0x122>
 8015b28:	f04f 33ff 	mov.w	r3, #4294967295
 8015b2c:	e000      	b.n	8015b30 <create_chain+0x124>
 8015b2e:	2301      	movs	r3, #1
 8015b30:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8015b32:	69fb      	ldr	r3, [r7, #28]
}
 8015b34:	4618      	mov	r0, r3
 8015b36:	3720      	adds	r7, #32
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	bd80      	pop	{r7, pc}

08015b3c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8015b3c:	b480      	push	{r7}
 8015b3e:	b087      	sub	sp, #28
 8015b40:	af00      	add	r7, sp, #0
 8015b42:	6078      	str	r0, [r7, #4]
 8015b44:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b50:	3304      	adds	r3, #4
 8015b52:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	899b      	ldrh	r3, [r3, #12]
 8015b58:	461a      	mov	r2, r3
 8015b5a:	683b      	ldr	r3, [r7, #0]
 8015b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b60:	68fa      	ldr	r2, [r7, #12]
 8015b62:	8952      	ldrh	r2, [r2, #10]
 8015b64:	fbb3 f3f2 	udiv	r3, r3, r2
 8015b68:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015b6a:	693b      	ldr	r3, [r7, #16]
 8015b6c:	1d1a      	adds	r2, r3, #4
 8015b6e:	613a      	str	r2, [r7, #16]
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d101      	bne.n	8015b7e <clmt_clust+0x42>
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	e010      	b.n	8015ba0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8015b7e:	697a      	ldr	r2, [r7, #20]
 8015b80:	68bb      	ldr	r3, [r7, #8]
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d307      	bcc.n	8015b96 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8015b86:	697a      	ldr	r2, [r7, #20]
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	1ad3      	subs	r3, r2, r3
 8015b8c:	617b      	str	r3, [r7, #20]
 8015b8e:	693b      	ldr	r3, [r7, #16]
 8015b90:	3304      	adds	r3, #4
 8015b92:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8015b94:	e7e9      	b.n	8015b6a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8015b96:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8015b98:	693b      	ldr	r3, [r7, #16]
 8015b9a:	681a      	ldr	r2, [r3, #0]
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	4413      	add	r3, r2
}
 8015ba0:	4618      	mov	r0, r3
 8015ba2:	371c      	adds	r7, #28
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr

08015bac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b086      	sub	sp, #24
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	6078      	str	r0, [r7, #4]
 8015bb4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015bc2:	d204      	bcs.n	8015bce <dir_sdi+0x22>
 8015bc4:	683b      	ldr	r3, [r7, #0]
 8015bc6:	f003 031f 	and.w	r3, r3, #31
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d001      	beq.n	8015bd2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8015bce:	2302      	movs	r3, #2
 8015bd0:	e071      	b.n	8015cb6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	683a      	ldr	r2, [r7, #0]
 8015bd6:	611a      	str	r2, [r3, #16]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	689b      	ldr	r3, [r3, #8]
 8015bdc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d106      	bne.n	8015bf2 <dir_sdi+0x46>
 8015be4:	693b      	ldr	r3, [r7, #16]
 8015be6:	781b      	ldrb	r3, [r3, #0]
 8015be8:	2b02      	cmp	r3, #2
 8015bea:	d902      	bls.n	8015bf2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8015bec:	693b      	ldr	r3, [r7, #16]
 8015bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bf0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d10c      	bne.n	8015c12 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8015bf8:	683b      	ldr	r3, [r7, #0]
 8015bfa:	095b      	lsrs	r3, r3, #5
 8015bfc:	693a      	ldr	r2, [r7, #16]
 8015bfe:	8912      	ldrh	r2, [r2, #8]
 8015c00:	4293      	cmp	r3, r2
 8015c02:	d301      	bcc.n	8015c08 <dir_sdi+0x5c>
 8015c04:	2302      	movs	r3, #2
 8015c06:	e056      	b.n	8015cb6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8015c08:	693b      	ldr	r3, [r7, #16]
 8015c0a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	619a      	str	r2, [r3, #24]
 8015c10:	e02d      	b.n	8015c6e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8015c12:	693b      	ldr	r3, [r7, #16]
 8015c14:	895b      	ldrh	r3, [r3, #10]
 8015c16:	461a      	mov	r2, r3
 8015c18:	693b      	ldr	r3, [r7, #16]
 8015c1a:	899b      	ldrh	r3, [r3, #12]
 8015c1c:	fb02 f303 	mul.w	r3, r2, r3
 8015c20:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015c22:	e019      	b.n	8015c58 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	6979      	ldr	r1, [r7, #20]
 8015c28:	4618      	mov	r0, r3
 8015c2a:	f7ff fc9a 	bl	8015562 <get_fat>
 8015c2e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015c30:	697b      	ldr	r3, [r7, #20]
 8015c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c36:	d101      	bne.n	8015c3c <dir_sdi+0x90>
 8015c38:	2301      	movs	r3, #1
 8015c3a:	e03c      	b.n	8015cb6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8015c3c:	697b      	ldr	r3, [r7, #20]
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	d904      	bls.n	8015c4c <dir_sdi+0xa0>
 8015c42:	693b      	ldr	r3, [r7, #16]
 8015c44:	699b      	ldr	r3, [r3, #24]
 8015c46:	697a      	ldr	r2, [r7, #20]
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d301      	bcc.n	8015c50 <dir_sdi+0xa4>
 8015c4c:	2302      	movs	r3, #2
 8015c4e:	e032      	b.n	8015cb6 <dir_sdi+0x10a>
			ofs -= csz;
 8015c50:	683a      	ldr	r2, [r7, #0]
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	1ad3      	subs	r3, r2, r3
 8015c56:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8015c58:	683a      	ldr	r2, [r7, #0]
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	429a      	cmp	r2, r3
 8015c5e:	d2e1      	bcs.n	8015c24 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8015c60:	6979      	ldr	r1, [r7, #20]
 8015c62:	6938      	ldr	r0, [r7, #16]
 8015c64:	f7ff fc5e 	bl	8015524 <clust2sect>
 8015c68:	4602      	mov	r2, r0
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	619a      	str	r2, [r3, #24]
	}
	dp->clust = clst;					/* Current cluster# */
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	697a      	ldr	r2, [r7, #20]
 8015c72:	615a      	str	r2, [r3, #20]
	if (!dp->sect) return FR_INT_ERR;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	699b      	ldr	r3, [r3, #24]
 8015c78:	2b00      	cmp	r3, #0
 8015c7a:	d101      	bne.n	8015c80 <dir_sdi+0xd4>
 8015c7c:	2302      	movs	r3, #2
 8015c7e:	e01a      	b.n	8015cb6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	699a      	ldr	r2, [r3, #24]
 8015c84:	693b      	ldr	r3, [r7, #16]
 8015c86:	899b      	ldrh	r3, [r3, #12]
 8015c88:	4619      	mov	r1, r3
 8015c8a:	683b      	ldr	r3, [r7, #0]
 8015c8c:	fbb3 f3f1 	udiv	r3, r3, r1
 8015c90:	441a      	add	r2, r3
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	619a      	str	r2, [r3, #24]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8015c96:	693b      	ldr	r3, [r7, #16]
 8015c98:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	899b      	ldrh	r3, [r3, #12]
 8015ca0:	461a      	mov	r2, r3
 8015ca2:	683b      	ldr	r3, [r7, #0]
 8015ca4:	fbb3 f0f2 	udiv	r0, r3, r2
 8015ca8:	fb00 f202 	mul.w	r2, r0, r2
 8015cac:	1a9b      	subs	r3, r3, r2
 8015cae:	18ca      	adds	r2, r1, r3
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8015cb4:	2300      	movs	r3, #0
}
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	3718      	adds	r7, #24
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bd80      	pop	{r7, pc}

08015cbe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8015cbe:	b580      	push	{r7, lr}
 8015cc0:	b086      	sub	sp, #24
 8015cc2:	af00      	add	r7, sp, #0
 8015cc4:	6078      	str	r0, [r7, #4]
 8015cc6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	681b      	ldr	r3, [r3, #0]
 8015ccc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	691b      	ldr	r3, [r3, #16]
 8015cd2:	3320      	adds	r3, #32
 8015cd4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	699b      	ldr	r3, [r3, #24]
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d003      	beq.n	8015ce6 <dir_next+0x28>
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015ce4:	d301      	bcc.n	8015cea <dir_next+0x2c>
 8015ce6:	2304      	movs	r3, #4
 8015ce8:	e0bb      	b.n	8015e62 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8015cea:	68fb      	ldr	r3, [r7, #12]
 8015cec:	899b      	ldrh	r3, [r3, #12]
 8015cee:	461a      	mov	r2, r3
 8015cf0:	68bb      	ldr	r3, [r7, #8]
 8015cf2:	fbb3 f1f2 	udiv	r1, r3, r2
 8015cf6:	fb01 f202 	mul.w	r2, r1, r2
 8015cfa:	1a9b      	subs	r3, r3, r2
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	f040 809d 	bne.w	8015e3c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8015d02:	687b      	ldr	r3, [r7, #4]
 8015d04:	699b      	ldr	r3, [r3, #24]
 8015d06:	1c5a      	adds	r2, r3, #1
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	619a      	str	r2, [r3, #24]

		if (!dp->clust) {		/* Static table */
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	695b      	ldr	r3, [r3, #20]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d10b      	bne.n	8015d2c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8015d14:	68bb      	ldr	r3, [r7, #8]
 8015d16:	095b      	lsrs	r3, r3, #5
 8015d18:	68fa      	ldr	r2, [r7, #12]
 8015d1a:	8912      	ldrh	r2, [r2, #8]
 8015d1c:	4293      	cmp	r3, r2
 8015d1e:	f0c0 808d 	bcc.w	8015e3c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	2200      	movs	r2, #0
 8015d26:	619a      	str	r2, [r3, #24]
 8015d28:	2304      	movs	r3, #4
 8015d2a:	e09a      	b.n	8015e62 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	899b      	ldrh	r3, [r3, #12]
 8015d30:	461a      	mov	r2, r3
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	fbb3 f3f2 	udiv	r3, r3, r2
 8015d38:	68fa      	ldr	r2, [r7, #12]
 8015d3a:	8952      	ldrh	r2, [r2, #10]
 8015d3c:	3a01      	subs	r2, #1
 8015d3e:	4013      	ands	r3, r2
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d17b      	bne.n	8015e3c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8015d44:	687a      	ldr	r2, [r7, #4]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	695b      	ldr	r3, [r3, #20]
 8015d4a:	4619      	mov	r1, r3
 8015d4c:	4610      	mov	r0, r2
 8015d4e:	f7ff fc08 	bl	8015562 <get_fat>
 8015d52:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8015d54:	697b      	ldr	r3, [r7, #20]
 8015d56:	2b01      	cmp	r3, #1
 8015d58:	d801      	bhi.n	8015d5e <dir_next+0xa0>
 8015d5a:	2302      	movs	r3, #2
 8015d5c:	e081      	b.n	8015e62 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8015d5e:	697b      	ldr	r3, [r7, #20]
 8015d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d64:	d101      	bne.n	8015d6a <dir_next+0xac>
 8015d66:	2301      	movs	r3, #1
 8015d68:	e07b      	b.n	8015e62 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8015d6a:	68fb      	ldr	r3, [r7, #12]
 8015d6c:	699b      	ldr	r3, [r3, #24]
 8015d6e:	697a      	ldr	r2, [r7, #20]
 8015d70:	429a      	cmp	r2, r3
 8015d72:	d359      	bcc.n	8015e28 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8015d74:	683b      	ldr	r3, [r7, #0]
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d104      	bne.n	8015d84 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	619a      	str	r2, [r3, #24]
 8015d80:	2304      	movs	r3, #4
 8015d82:	e06e      	b.n	8015e62 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8015d84:	687a      	ldr	r2, [r7, #4]
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	695b      	ldr	r3, [r3, #20]
 8015d8a:	4619      	mov	r1, r3
 8015d8c:	4610      	mov	r0, r2
 8015d8e:	f7ff fe3d 	bl	8015a0c <create_chain>
 8015d92:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8015d94:	697b      	ldr	r3, [r7, #20]
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	d101      	bne.n	8015d9e <dir_next+0xe0>
 8015d9a:	2307      	movs	r3, #7
 8015d9c:	e061      	b.n	8015e62 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8015d9e:	697b      	ldr	r3, [r7, #20]
 8015da0:	2b01      	cmp	r3, #1
 8015da2:	d101      	bne.n	8015da8 <dir_next+0xea>
 8015da4:	2302      	movs	r3, #2
 8015da6:	e05c      	b.n	8015e62 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015dae:	d101      	bne.n	8015db4 <dir_next+0xf6>
 8015db0:	2301      	movs	r3, #1
 8015db2:	e056      	b.n	8015e62 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8015db4:	68f8      	ldr	r0, [r7, #12]
 8015db6:	f7ff fad3 	bl	8015360 <sync_window>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d001      	beq.n	8015dc4 <dir_next+0x106>
 8015dc0:	2301      	movs	r3, #1
 8015dc2:	e04e      	b.n	8015e62 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8015dc4:	68fb      	ldr	r3, [r7, #12]
 8015dc6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	899b      	ldrh	r3, [r3, #12]
 8015dce:	461a      	mov	r2, r3
 8015dd0:	2100      	movs	r1, #0
 8015dd2:	f7ff fa68 	bl	80152a6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015dd6:	2300      	movs	r3, #0
 8015dd8:	613b      	str	r3, [r7, #16]
 8015dda:	6979      	ldr	r1, [r7, #20]
 8015ddc:	68f8      	ldr	r0, [r7, #12]
 8015dde:	f7ff fba1 	bl	8015524 <clust2sect>
 8015de2:	4602      	mov	r2, r0
 8015de4:	68fb      	ldr	r3, [r7, #12]
 8015de6:	631a      	str	r2, [r3, #48]	; 0x30
 8015de8:	e012      	b.n	8015e10 <dir_next+0x152>
						fs->wflag = 1;
 8015dea:	68fb      	ldr	r3, [r7, #12]
 8015dec:	2201      	movs	r2, #1
 8015dee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8015df0:	68f8      	ldr	r0, [r7, #12]
 8015df2:	f7ff fab5 	bl	8015360 <sync_window>
 8015df6:	4603      	mov	r3, r0
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d001      	beq.n	8015e00 <dir_next+0x142>
 8015dfc:	2301      	movs	r3, #1
 8015dfe:	e030      	b.n	8015e62 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	3301      	adds	r3, #1
 8015e04:	613b      	str	r3, [r7, #16]
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e0a:	1c5a      	adds	r2, r3, #1
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	895b      	ldrh	r3, [r3, #10]
 8015e14:	461a      	mov	r2, r3
 8015e16:	693b      	ldr	r3, [r7, #16]
 8015e18:	4293      	cmp	r3, r2
 8015e1a:	d3e6      	bcc.n	8015dea <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	1ad2      	subs	r2, r2, r3
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	697a      	ldr	r2, [r7, #20]
 8015e2c:	615a      	str	r2, [r3, #20]
				dp->sect = clust2sect(fs, clst);
 8015e2e:	6979      	ldr	r1, [r7, #20]
 8015e30:	68f8      	ldr	r0, [r7, #12]
 8015e32:	f7ff fb77 	bl	8015524 <clust2sect>
 8015e36:	4602      	mov	r2, r0
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	619a      	str	r2, [r3, #24]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	68ba      	ldr	r2, [r7, #8]
 8015e40:	611a      	str	r2, [r3, #16]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8015e48:	68fb      	ldr	r3, [r7, #12]
 8015e4a:	899b      	ldrh	r3, [r3, #12]
 8015e4c:	461a      	mov	r2, r3
 8015e4e:	68bb      	ldr	r3, [r7, #8]
 8015e50:	fbb3 f0f2 	udiv	r0, r3, r2
 8015e54:	fb00 f202 	mul.w	r2, r0, r2
 8015e58:	1a9b      	subs	r3, r3, r2
 8015e5a:	18ca      	adds	r2, r1, r3
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	61da      	str	r2, [r3, #28]

	return FR_OK;
 8015e60:	2300      	movs	r3, #0
}
 8015e62:	4618      	mov	r0, r3
 8015e64:	3718      	adds	r7, #24
 8015e66:	46bd      	mov	sp, r7
 8015e68:	bd80      	pop	{r7, pc}

08015e6a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8015e6a:	b580      	push	{r7, lr}
 8015e6c:	b086      	sub	sp, #24
 8015e6e:	af00      	add	r7, sp, #0
 8015e70:	6078      	str	r0, [r7, #4]
 8015e72:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8015e74:	687b      	ldr	r3, [r7, #4]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8015e7a:	2100      	movs	r1, #0
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f7ff fe95 	bl	8015bac <dir_sdi>
 8015e82:	4603      	mov	r3, r0
 8015e84:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015e86:	7dfb      	ldrb	r3, [r7, #23]
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d12b      	bne.n	8015ee4 <dir_alloc+0x7a>
		n = 0;
 8015e8c:	2300      	movs	r3, #0
 8015e8e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8015e90:	687b      	ldr	r3, [r7, #4]
 8015e92:	699b      	ldr	r3, [r3, #24]
 8015e94:	4619      	mov	r1, r3
 8015e96:	68f8      	ldr	r0, [r7, #12]
 8015e98:	f7ff faa6 	bl	80153e8 <move_window>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8015ea0:	7dfb      	ldrb	r3, [r7, #23]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d11d      	bne.n	8015ee2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	69db      	ldr	r3, [r3, #28]
 8015eaa:	781b      	ldrb	r3, [r3, #0]
 8015eac:	2be5      	cmp	r3, #229	; 0xe5
 8015eae:	d004      	beq.n	8015eba <dir_alloc+0x50>
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	69db      	ldr	r3, [r3, #28]
 8015eb4:	781b      	ldrb	r3, [r3, #0]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d107      	bne.n	8015eca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8015eba:	693b      	ldr	r3, [r7, #16]
 8015ebc:	3301      	adds	r3, #1
 8015ebe:	613b      	str	r3, [r7, #16]
 8015ec0:	693a      	ldr	r2, [r7, #16]
 8015ec2:	683b      	ldr	r3, [r7, #0]
 8015ec4:	429a      	cmp	r2, r3
 8015ec6:	d102      	bne.n	8015ece <dir_alloc+0x64>
 8015ec8:	e00c      	b.n	8015ee4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8015eca:	2300      	movs	r3, #0
 8015ecc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8015ece:	2101      	movs	r1, #1
 8015ed0:	6878      	ldr	r0, [r7, #4]
 8015ed2:	f7ff fef4 	bl	8015cbe <dir_next>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8015eda:	7dfb      	ldrb	r3, [r7, #23]
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d0d7      	beq.n	8015e90 <dir_alloc+0x26>
 8015ee0:	e000      	b.n	8015ee4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8015ee2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8015ee4:	7dfb      	ldrb	r3, [r7, #23]
 8015ee6:	2b04      	cmp	r3, #4
 8015ee8:	d101      	bne.n	8015eee <dir_alloc+0x84>
 8015eea:	2307      	movs	r3, #7
 8015eec:	75fb      	strb	r3, [r7, #23]
	return res;
 8015eee:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	3718      	adds	r7, #24
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	bd80      	pop	{r7, pc}

08015ef8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b084      	sub	sp, #16
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
 8015f00:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	331a      	adds	r3, #26
 8015f06:	4618      	mov	r0, r3
 8015f08:	f7ff f92a 	bl	8015160 <ld_word>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	781b      	ldrb	r3, [r3, #0]
 8015f14:	2b03      	cmp	r3, #3
 8015f16:	d109      	bne.n	8015f2c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8015f18:	683b      	ldr	r3, [r7, #0]
 8015f1a:	3314      	adds	r3, #20
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7ff f91f 	bl	8015160 <ld_word>
 8015f22:	4603      	mov	r3, r0
 8015f24:	041b      	lsls	r3, r3, #16
 8015f26:	68fa      	ldr	r2, [r7, #12]
 8015f28:	4313      	orrs	r3, r2
 8015f2a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8015f2c:	68fb      	ldr	r3, [r7, #12]
}
 8015f2e:	4618      	mov	r0, r3
 8015f30:	3710      	adds	r7, #16
 8015f32:	46bd      	mov	sp, r7
 8015f34:	bd80      	pop	{r7, pc}

08015f36 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8015f36:	b580      	push	{r7, lr}
 8015f38:	b084      	sub	sp, #16
 8015f3a:	af00      	add	r7, sp, #0
 8015f3c:	60f8      	str	r0, [r7, #12]
 8015f3e:	60b9      	str	r1, [r7, #8]
 8015f40:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8015f42:	68bb      	ldr	r3, [r7, #8]
 8015f44:	331a      	adds	r3, #26
 8015f46:	687a      	ldr	r2, [r7, #4]
 8015f48:	b292      	uxth	r2, r2
 8015f4a:	4611      	mov	r1, r2
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7ff f942 	bl	80151d6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8015f52:	68fb      	ldr	r3, [r7, #12]
 8015f54:	781b      	ldrb	r3, [r3, #0]
 8015f56:	2b03      	cmp	r3, #3
 8015f58:	d109      	bne.n	8015f6e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8015f5a:	68bb      	ldr	r3, [r7, #8]
 8015f5c:	f103 0214 	add.w	r2, r3, #20
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	0c1b      	lsrs	r3, r3, #16
 8015f64:	b29b      	uxth	r3, r3
 8015f66:	4619      	mov	r1, r3
 8015f68:	4610      	mov	r0, r2
 8015f6a:	f7ff f934 	bl	80151d6 <st_word>
	}
}
 8015f6e:	bf00      	nop
 8015f70:	3710      	adds	r7, #16
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}

08015f76 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8015f76:	b580      	push	{r7, lr}
 8015f78:	b086      	sub	sp, #24
 8015f7a:	af00      	add	r7, sp, #0
 8015f7c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8015f84:	2100      	movs	r1, #0
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f7ff fe10 	bl	8015bac <dir_sdi>
 8015f8c:	4603      	mov	r3, r0
 8015f8e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8015f90:	7dfb      	ldrb	r3, [r7, #23]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d001      	beq.n	8015f9a <dir_find+0x24>
 8015f96:	7dfb      	ldrb	r3, [r7, #23]
 8015f98:	e03e      	b.n	8016018 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	699b      	ldr	r3, [r3, #24]
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	6938      	ldr	r0, [r7, #16]
 8015fa2:	f7ff fa21 	bl	80153e8 <move_window>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8015faa:	7dfb      	ldrb	r3, [r7, #23]
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d12f      	bne.n	8016010 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	69db      	ldr	r3, [r3, #28]
 8015fb4:	781b      	ldrb	r3, [r3, #0]
 8015fb6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8015fb8:	7bfb      	ldrb	r3, [r7, #15]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d102      	bne.n	8015fc4 <dir_find+0x4e>
 8015fbe:	2304      	movs	r3, #4
 8015fc0:	75fb      	strb	r3, [r7, #23]
 8015fc2:	e028      	b.n	8016016 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	69db      	ldr	r3, [r3, #28]
 8015fc8:	330b      	adds	r3, #11
 8015fca:	781b      	ldrb	r3, [r3, #0]
 8015fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015fd0:	b2da      	uxtb	r2, r3
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	69db      	ldr	r3, [r3, #28]
 8015fda:	330b      	adds	r3, #11
 8015fdc:	781b      	ldrb	r3, [r3, #0]
 8015fde:	f003 0308 	and.w	r3, r3, #8
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d10a      	bne.n	8015ffc <dir_find+0x86>
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	69d8      	ldr	r0, [r3, #28]
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	3320      	adds	r3, #32
 8015fee:	220b      	movs	r2, #11
 8015ff0:	4619      	mov	r1, r3
 8015ff2:	f7ff f973 	bl	80152dc <mem_cmp>
 8015ff6:	4603      	mov	r3, r0
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d00b      	beq.n	8016014 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8015ffc:	2100      	movs	r1, #0
 8015ffe:	6878      	ldr	r0, [r7, #4]
 8016000:	f7ff fe5d 	bl	8015cbe <dir_next>
 8016004:	4603      	mov	r3, r0
 8016006:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8016008:	7dfb      	ldrb	r3, [r7, #23]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d0c5      	beq.n	8015f9a <dir_find+0x24>
 801600e:	e002      	b.n	8016016 <dir_find+0xa0>
		if (res != FR_OK) break;
 8016010:	bf00      	nop
 8016012:	e000      	b.n	8016016 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8016014:	bf00      	nop

	return res;
 8016016:	7dfb      	ldrb	r3, [r7, #23]
}
 8016018:	4618      	mov	r0, r3
 801601a:	3718      	adds	r7, #24
 801601c:	46bd      	mov	sp, r7
 801601e:	bd80      	pop	{r7, pc}

08016020 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b084      	sub	sp, #16
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801602e:	2101      	movs	r1, #1
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f7ff ff1a 	bl	8015e6a <dir_alloc>
 8016036:	4603      	mov	r3, r0
 8016038:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801603a:	7bfb      	ldrb	r3, [r7, #15]
 801603c:	2b00      	cmp	r3, #0
 801603e:	d11c      	bne.n	801607a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	699b      	ldr	r3, [r3, #24]
 8016044:	4619      	mov	r1, r3
 8016046:	68b8      	ldr	r0, [r7, #8]
 8016048:	f7ff f9ce 	bl	80153e8 <move_window>
 801604c:	4603      	mov	r3, r0
 801604e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8016050:	7bfb      	ldrb	r3, [r7, #15]
 8016052:	2b00      	cmp	r3, #0
 8016054:	d111      	bne.n	801607a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	69db      	ldr	r3, [r3, #28]
 801605a:	2220      	movs	r2, #32
 801605c:	2100      	movs	r1, #0
 801605e:	4618      	mov	r0, r3
 8016060:	f7ff f921 	bl	80152a6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	69d8      	ldr	r0, [r3, #28]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	3320      	adds	r3, #32
 801606c:	220b      	movs	r2, #11
 801606e:	4619      	mov	r1, r3
 8016070:	f7ff f8f8 	bl	8015264 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8016074:	68bb      	ldr	r3, [r7, #8]
 8016076:	2201      	movs	r2, #1
 8016078:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801607a:	7bfb      	ldrb	r3, [r7, #15]
}
 801607c:	4618      	mov	r0, r3
 801607e:	3710      	adds	r7, #16
 8016080:	46bd      	mov	sp, r7
 8016082:	bd80      	pop	{r7, pc}

08016084 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8016084:	b580      	push	{r7, lr}
 8016086:	b088      	sub	sp, #32
 8016088:	af00      	add	r7, sp, #0
 801608a:	6078      	str	r0, [r7, #4]
 801608c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801608e:	683b      	ldr	r3, [r7, #0]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	60fb      	str	r3, [r7, #12]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	3320      	adds	r3, #32
 8016098:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801609a:	220b      	movs	r2, #11
 801609c:	2120      	movs	r1, #32
 801609e:	68b8      	ldr	r0, [r7, #8]
 80160a0:	f7ff f901 	bl	80152a6 <mem_set>
	si = i = 0; ni = 8;
 80160a4:	2300      	movs	r3, #0
 80160a6:	613b      	str	r3, [r7, #16]
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	61fb      	str	r3, [r7, #28]
 80160ac:	2308      	movs	r3, #8
 80160ae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80160b0:	69fb      	ldr	r3, [r7, #28]
 80160b2:	1c5a      	adds	r2, r3, #1
 80160b4:	61fa      	str	r2, [r7, #28]
 80160b6:	68fa      	ldr	r2, [r7, #12]
 80160b8:	4413      	add	r3, r2
 80160ba:	781b      	ldrb	r3, [r3, #0]
 80160bc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80160be:	7efb      	ldrb	r3, [r7, #27]
 80160c0:	2b20      	cmp	r3, #32
 80160c2:	d94e      	bls.n	8016162 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80160c4:	7efb      	ldrb	r3, [r7, #27]
 80160c6:	2b2f      	cmp	r3, #47	; 0x2f
 80160c8:	d006      	beq.n	80160d8 <create_name+0x54>
 80160ca:	7efb      	ldrb	r3, [r7, #27]
 80160cc:	2b5c      	cmp	r3, #92	; 0x5c
 80160ce:	d110      	bne.n	80160f2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80160d0:	e002      	b.n	80160d8 <create_name+0x54>
 80160d2:	69fb      	ldr	r3, [r7, #28]
 80160d4:	3301      	adds	r3, #1
 80160d6:	61fb      	str	r3, [r7, #28]
 80160d8:	68fa      	ldr	r2, [r7, #12]
 80160da:	69fb      	ldr	r3, [r7, #28]
 80160dc:	4413      	add	r3, r2
 80160de:	781b      	ldrb	r3, [r3, #0]
 80160e0:	2b2f      	cmp	r3, #47	; 0x2f
 80160e2:	d0f6      	beq.n	80160d2 <create_name+0x4e>
 80160e4:	68fa      	ldr	r2, [r7, #12]
 80160e6:	69fb      	ldr	r3, [r7, #28]
 80160e8:	4413      	add	r3, r2
 80160ea:	781b      	ldrb	r3, [r3, #0]
 80160ec:	2b5c      	cmp	r3, #92	; 0x5c
 80160ee:	d0f0      	beq.n	80160d2 <create_name+0x4e>
			break;
 80160f0:	e038      	b.n	8016164 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80160f2:	7efb      	ldrb	r3, [r7, #27]
 80160f4:	2b2e      	cmp	r3, #46	; 0x2e
 80160f6:	d003      	beq.n	8016100 <create_name+0x7c>
 80160f8:	693a      	ldr	r2, [r7, #16]
 80160fa:	697b      	ldr	r3, [r7, #20]
 80160fc:	429a      	cmp	r2, r3
 80160fe:	d30c      	bcc.n	801611a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8016100:	697b      	ldr	r3, [r7, #20]
 8016102:	2b0b      	cmp	r3, #11
 8016104:	d002      	beq.n	801610c <create_name+0x88>
 8016106:	7efb      	ldrb	r3, [r7, #27]
 8016108:	2b2e      	cmp	r3, #46	; 0x2e
 801610a:	d001      	beq.n	8016110 <create_name+0x8c>
 801610c:	2306      	movs	r3, #6
 801610e:	e044      	b.n	801619a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8016110:	2308      	movs	r3, #8
 8016112:	613b      	str	r3, [r7, #16]
 8016114:	230b      	movs	r3, #11
 8016116:	617b      	str	r3, [r7, #20]
			continue;
 8016118:	e022      	b.n	8016160 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801611a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801611e:	2b00      	cmp	r3, #0
 8016120:	da04      	bge.n	801612c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8016122:	7efb      	ldrb	r3, [r7, #27]
 8016124:	3b80      	subs	r3, #128	; 0x80
 8016126:	4a1f      	ldr	r2, [pc, #124]	; (80161a4 <create_name+0x120>)
 8016128:	5cd3      	ldrb	r3, [r2, r3]
 801612a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801612c:	7efb      	ldrb	r3, [r7, #27]
 801612e:	4619      	mov	r1, r3
 8016130:	481d      	ldr	r0, [pc, #116]	; (80161a8 <create_name+0x124>)
 8016132:	f7ff f8fa 	bl	801532a <chk_chr>
 8016136:	4603      	mov	r3, r0
 8016138:	2b00      	cmp	r3, #0
 801613a:	d001      	beq.n	8016140 <create_name+0xbc>
 801613c:	2306      	movs	r3, #6
 801613e:	e02c      	b.n	801619a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8016140:	7efb      	ldrb	r3, [r7, #27]
 8016142:	2b60      	cmp	r3, #96	; 0x60
 8016144:	d905      	bls.n	8016152 <create_name+0xce>
 8016146:	7efb      	ldrb	r3, [r7, #27]
 8016148:	2b7a      	cmp	r3, #122	; 0x7a
 801614a:	d802      	bhi.n	8016152 <create_name+0xce>
 801614c:	7efb      	ldrb	r3, [r7, #27]
 801614e:	3b20      	subs	r3, #32
 8016150:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8016152:	693b      	ldr	r3, [r7, #16]
 8016154:	1c5a      	adds	r2, r3, #1
 8016156:	613a      	str	r2, [r7, #16]
 8016158:	68ba      	ldr	r2, [r7, #8]
 801615a:	4413      	add	r3, r2
 801615c:	7efa      	ldrb	r2, [r7, #27]
 801615e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8016160:	e7a6      	b.n	80160b0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8016162:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8016164:	68fa      	ldr	r2, [r7, #12]
 8016166:	69fb      	ldr	r3, [r7, #28]
 8016168:	441a      	add	r2, r3
 801616a:	683b      	ldr	r3, [r7, #0]
 801616c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801616e:	693b      	ldr	r3, [r7, #16]
 8016170:	2b00      	cmp	r3, #0
 8016172:	d101      	bne.n	8016178 <create_name+0xf4>
 8016174:	2306      	movs	r3, #6
 8016176:	e010      	b.n	801619a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8016178:	68bb      	ldr	r3, [r7, #8]
 801617a:	781b      	ldrb	r3, [r3, #0]
 801617c:	2be5      	cmp	r3, #229	; 0xe5
 801617e:	d102      	bne.n	8016186 <create_name+0x102>
 8016180:	68bb      	ldr	r3, [r7, #8]
 8016182:	2205      	movs	r2, #5
 8016184:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8016186:	7efb      	ldrb	r3, [r7, #27]
 8016188:	2b20      	cmp	r3, #32
 801618a:	d801      	bhi.n	8016190 <create_name+0x10c>
 801618c:	2204      	movs	r2, #4
 801618e:	e000      	b.n	8016192 <create_name+0x10e>
 8016190:	2200      	movs	r2, #0
 8016192:	68bb      	ldr	r3, [r7, #8]
 8016194:	330b      	adds	r3, #11
 8016196:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8016198:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 801619a:	4618      	mov	r0, r3
 801619c:	3720      	adds	r7, #32
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}
 80161a2:	bf00      	nop
 80161a4:	08018738 	.word	0x08018738
 80161a8:	08018680 	.word	0x08018680

080161ac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80161ac:	b580      	push	{r7, lr}
 80161ae:	b086      	sub	sp, #24
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
 80161b4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80161ba:	693b      	ldr	r3, [r7, #16]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80161c0:	e002      	b.n	80161c8 <follow_path+0x1c>
 80161c2:	683b      	ldr	r3, [r7, #0]
 80161c4:	3301      	adds	r3, #1
 80161c6:	603b      	str	r3, [r7, #0]
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	781b      	ldrb	r3, [r3, #0]
 80161cc:	2b2f      	cmp	r3, #47	; 0x2f
 80161ce:	d0f8      	beq.n	80161c2 <follow_path+0x16>
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	781b      	ldrb	r3, [r3, #0]
 80161d4:	2b5c      	cmp	r3, #92	; 0x5c
 80161d6:	d0f4      	beq.n	80161c2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80161d8:	693b      	ldr	r3, [r7, #16]
 80161da:	2200      	movs	r2, #0
 80161dc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	781b      	ldrb	r3, [r3, #0]
 80161e2:	2b1f      	cmp	r3, #31
 80161e4:	d80a      	bhi.n	80161fc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	2280      	movs	r2, #128	; 0x80
 80161ea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
		res = dir_sdi(dp, 0);
 80161ee:	2100      	movs	r1, #0
 80161f0:	6878      	ldr	r0, [r7, #4]
 80161f2:	f7ff fcdb 	bl	8015bac <dir_sdi>
 80161f6:	4603      	mov	r3, r0
 80161f8:	75fb      	strb	r3, [r7, #23]
 80161fa:	e048      	b.n	801628e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80161fc:	463b      	mov	r3, r7
 80161fe:	4619      	mov	r1, r3
 8016200:	6878      	ldr	r0, [r7, #4]
 8016202:	f7ff ff3f 	bl	8016084 <create_name>
 8016206:	4603      	mov	r3, r0
 8016208:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801620a:	7dfb      	ldrb	r3, [r7, #23]
 801620c:	2b00      	cmp	r3, #0
 801620e:	d139      	bne.n	8016284 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8016210:	6878      	ldr	r0, [r7, #4]
 8016212:	f7ff feb0 	bl	8015f76 <dir_find>
 8016216:	4603      	mov	r3, r0
 8016218:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8016220:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8016222:	7dfb      	ldrb	r3, [r7, #23]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d00a      	beq.n	801623e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8016228:	7dfb      	ldrb	r3, [r7, #23]
 801622a:	2b04      	cmp	r3, #4
 801622c:	d12c      	bne.n	8016288 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801622e:	7afb      	ldrb	r3, [r7, #11]
 8016230:	f003 0304 	and.w	r3, r3, #4
 8016234:	2b00      	cmp	r3, #0
 8016236:	d127      	bne.n	8016288 <follow_path+0xdc>
 8016238:	2305      	movs	r3, #5
 801623a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801623c:	e024      	b.n	8016288 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801623e:	7afb      	ldrb	r3, [r7, #11]
 8016240:	f003 0304 	and.w	r3, r3, #4
 8016244:	2b00      	cmp	r3, #0
 8016246:	d121      	bne.n	801628c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8016248:	693b      	ldr	r3, [r7, #16]
 801624a:	799b      	ldrb	r3, [r3, #6]
 801624c:	f003 0310 	and.w	r3, r3, #16
 8016250:	2b00      	cmp	r3, #0
 8016252:	d102      	bne.n	801625a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8016254:	2305      	movs	r3, #5
 8016256:	75fb      	strb	r3, [r7, #23]
 8016258:	e019      	b.n	801628e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801625a:	68fb      	ldr	r3, [r7, #12]
 801625c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	691b      	ldr	r3, [r3, #16]
 8016264:	68fa      	ldr	r2, [r7, #12]
 8016266:	8992      	ldrh	r2, [r2, #12]
 8016268:	fbb3 f0f2 	udiv	r0, r3, r2
 801626c:	fb00 f202 	mul.w	r2, r0, r2
 8016270:	1a9b      	subs	r3, r3, r2
 8016272:	440b      	add	r3, r1
 8016274:	4619      	mov	r1, r3
 8016276:	68f8      	ldr	r0, [r7, #12]
 8016278:	f7ff fe3e 	bl	8015ef8 <ld_clust>
 801627c:	4602      	mov	r2, r0
 801627e:	693b      	ldr	r3, [r7, #16]
 8016280:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8016282:	e7bb      	b.n	80161fc <follow_path+0x50>
			if (res != FR_OK) break;
 8016284:	bf00      	nop
 8016286:	e002      	b.n	801628e <follow_path+0xe2>
				break;
 8016288:	bf00      	nop
 801628a:	e000      	b.n	801628e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801628c:	bf00      	nop
			}
		}
	}

	return res;
 801628e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016290:	4618      	mov	r0, r3
 8016292:	3718      	adds	r7, #24
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}

08016298 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8016298:	b480      	push	{r7}
 801629a:	b087      	sub	sp, #28
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80162a0:	f04f 33ff 	mov.w	r3, #4294967295
 80162a4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d031      	beq.n	8016312 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	617b      	str	r3, [r7, #20]
 80162b4:	e002      	b.n	80162bc <get_ldnumber+0x24>
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	3301      	adds	r3, #1
 80162ba:	617b      	str	r3, [r7, #20]
 80162bc:	697b      	ldr	r3, [r7, #20]
 80162be:	781b      	ldrb	r3, [r3, #0]
 80162c0:	2b20      	cmp	r3, #32
 80162c2:	d903      	bls.n	80162cc <get_ldnumber+0x34>
 80162c4:	697b      	ldr	r3, [r7, #20]
 80162c6:	781b      	ldrb	r3, [r3, #0]
 80162c8:	2b3a      	cmp	r3, #58	; 0x3a
 80162ca:	d1f4      	bne.n	80162b6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80162cc:	697b      	ldr	r3, [r7, #20]
 80162ce:	781b      	ldrb	r3, [r3, #0]
 80162d0:	2b3a      	cmp	r3, #58	; 0x3a
 80162d2:	d11c      	bne.n	801630e <get_ldnumber+0x76>
			tp = *path;
 80162d4:	687b      	ldr	r3, [r7, #4]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80162da:	68fb      	ldr	r3, [r7, #12]
 80162dc:	1c5a      	adds	r2, r3, #1
 80162de:	60fa      	str	r2, [r7, #12]
 80162e0:	781b      	ldrb	r3, [r3, #0]
 80162e2:	3b30      	subs	r3, #48	; 0x30
 80162e4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80162e6:	68bb      	ldr	r3, [r7, #8]
 80162e8:	2b09      	cmp	r3, #9
 80162ea:	d80e      	bhi.n	801630a <get_ldnumber+0x72>
 80162ec:	68fa      	ldr	r2, [r7, #12]
 80162ee:	697b      	ldr	r3, [r7, #20]
 80162f0:	429a      	cmp	r2, r3
 80162f2:	d10a      	bne.n	801630a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80162f4:	68bb      	ldr	r3, [r7, #8]
 80162f6:	2b00      	cmp	r3, #0
 80162f8:	d107      	bne.n	801630a <get_ldnumber+0x72>
					vol = (int)i;
 80162fa:	68bb      	ldr	r3, [r7, #8]
 80162fc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80162fe:	697b      	ldr	r3, [r7, #20]
 8016300:	3301      	adds	r3, #1
 8016302:	617b      	str	r3, [r7, #20]
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	697a      	ldr	r2, [r7, #20]
 8016308:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801630a:	693b      	ldr	r3, [r7, #16]
 801630c:	e002      	b.n	8016314 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801630e:	2300      	movs	r3, #0
 8016310:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8016312:	693b      	ldr	r3, [r7, #16]
}
 8016314:	4618      	mov	r0, r3
 8016316:	371c      	adds	r7, #28
 8016318:	46bd      	mov	sp, r7
 801631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801631e:	4770      	bx	lr

08016320 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8016320:	b580      	push	{r7, lr}
 8016322:	b082      	sub	sp, #8
 8016324:	af00      	add	r7, sp, #0
 8016326:	6078      	str	r0, [r7, #4]
 8016328:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	2200      	movs	r2, #0
 801632e:	70da      	strb	r2, [r3, #3]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	f04f 32ff 	mov.w	r2, #4294967295
 8016336:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8016338:	6839      	ldr	r1, [r7, #0]
 801633a:	6878      	ldr	r0, [r7, #4]
 801633c:	f7ff f854 	bl	80153e8 <move_window>
 8016340:	4603      	mov	r3, r0
 8016342:	2b00      	cmp	r3, #0
 8016344:	d001      	beq.n	801634a <check_fs+0x2a>
 8016346:	2304      	movs	r3, #4
 8016348:	e038      	b.n	80163bc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	3334      	adds	r3, #52	; 0x34
 801634e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016352:	4618      	mov	r0, r3
 8016354:	f7fe ff04 	bl	8015160 <ld_word>
 8016358:	4603      	mov	r3, r0
 801635a:	461a      	mov	r2, r3
 801635c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016360:	429a      	cmp	r2, r3
 8016362:	d001      	beq.n	8016368 <check_fs+0x48>
 8016364:	2303      	movs	r3, #3
 8016366:	e029      	b.n	80163bc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801636e:	2be9      	cmp	r3, #233	; 0xe9
 8016370:	d009      	beq.n	8016386 <check_fs+0x66>
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016378:	2beb      	cmp	r3, #235	; 0xeb
 801637a:	d11e      	bne.n	80163ba <check_fs+0x9a>
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8016382:	2b90      	cmp	r3, #144	; 0x90
 8016384:	d119      	bne.n	80163ba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	3334      	adds	r3, #52	; 0x34
 801638a:	3336      	adds	r3, #54	; 0x36
 801638c:	4618      	mov	r0, r3
 801638e:	f7fe feff 	bl	8015190 <ld_dword>
 8016392:	4603      	mov	r3, r0
 8016394:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8016398:	4a0a      	ldr	r2, [pc, #40]	; (80163c4 <check_fs+0xa4>)
 801639a:	4293      	cmp	r3, r2
 801639c:	d101      	bne.n	80163a2 <check_fs+0x82>
 801639e:	2300      	movs	r3, #0
 80163a0:	e00c      	b.n	80163bc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	3334      	adds	r3, #52	; 0x34
 80163a6:	3352      	adds	r3, #82	; 0x52
 80163a8:	4618      	mov	r0, r3
 80163aa:	f7fe fef1 	bl	8015190 <ld_dword>
 80163ae:	4603      	mov	r3, r0
 80163b0:	4a05      	ldr	r2, [pc, #20]	; (80163c8 <check_fs+0xa8>)
 80163b2:	4293      	cmp	r3, r2
 80163b4:	d101      	bne.n	80163ba <check_fs+0x9a>
 80163b6:	2300      	movs	r3, #0
 80163b8:	e000      	b.n	80163bc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80163ba:	2302      	movs	r3, #2
}
 80163bc:	4618      	mov	r0, r3
 80163be:	3708      	adds	r7, #8
 80163c0:	46bd      	mov	sp, r7
 80163c2:	bd80      	pop	{r7, pc}
 80163c4:	00544146 	.word	0x00544146
 80163c8:	33544146 	.word	0x33544146

080163cc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80163cc:	b580      	push	{r7, lr}
 80163ce:	b096      	sub	sp, #88	; 0x58
 80163d0:	af00      	add	r7, sp, #0
 80163d2:	60f8      	str	r0, [r7, #12]
 80163d4:	60b9      	str	r1, [r7, #8]
 80163d6:	4613      	mov	r3, r2
 80163d8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80163da:	68bb      	ldr	r3, [r7, #8]
 80163dc:	2200      	movs	r2, #0
 80163de:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80163e0:	68f8      	ldr	r0, [r7, #12]
 80163e2:	f7ff ff59 	bl	8016298 <get_ldnumber>
 80163e6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80163e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163ea:	2b00      	cmp	r3, #0
 80163ec:	da01      	bge.n	80163f2 <find_volume+0x26>
 80163ee:	230b      	movs	r3, #11
 80163f0:	e25f      	b.n	80168b2 <find_volume+0x4e6>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80163f2:	4a9f      	ldr	r2, [pc, #636]	; (8016670 <find_volume+0x2a4>)
 80163f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80163f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80163fa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80163fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163fe:	2b00      	cmp	r3, #0
 8016400:	d101      	bne.n	8016406 <find_volume+0x3a>
 8016402:	230c      	movs	r3, #12
 8016404:	e255      	b.n	80168b2 <find_volume+0x4e6>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8016406:	68bb      	ldr	r3, [r7, #8]
 8016408:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801640a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801640c:	79fb      	ldrb	r3, [r7, #7]
 801640e:	f023 0301 	bic.w	r3, r3, #1
 8016412:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8016414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016416:	781b      	ldrb	r3, [r3, #0]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d01a      	beq.n	8016452 <find_volume+0x86>
		stat = disk_status(fs->drv);
 801641c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801641e:	785b      	ldrb	r3, [r3, #1]
 8016420:	4618      	mov	r0, r3
 8016422:	f7fe fdff 	bl	8015024 <disk_status>
 8016426:	4603      	mov	r3, r0
 8016428:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801642c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016430:	f003 0301 	and.w	r3, r3, #1
 8016434:	2b00      	cmp	r3, #0
 8016436:	d10c      	bne.n	8016452 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8016438:	79fb      	ldrb	r3, [r7, #7]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d007      	beq.n	801644e <find_volume+0x82>
 801643e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016442:	f003 0304 	and.w	r3, r3, #4
 8016446:	2b00      	cmp	r3, #0
 8016448:	d001      	beq.n	801644e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 801644a:	230a      	movs	r3, #10
 801644c:	e231      	b.n	80168b2 <find_volume+0x4e6>
			}
			return FR_OK;				/* The file system object is valid */
 801644e:	2300      	movs	r3, #0
 8016450:	e22f      	b.n	80168b2 <find_volume+0x4e6>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8016452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016454:	2200      	movs	r2, #0
 8016456:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8016458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801645a:	b2da      	uxtb	r2, r3
 801645c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801645e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8016460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016462:	785b      	ldrb	r3, [r3, #1]
 8016464:	4618      	mov	r0, r3
 8016466:	f7fe fdf7 	bl	8015058 <disk_initialize>
 801646a:	4603      	mov	r3, r0
 801646c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8016470:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8016474:	f003 0301 	and.w	r3, r3, #1
 8016478:	2b00      	cmp	r3, #0
 801647a:	d001      	beq.n	8016480 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 801647c:	2303      	movs	r3, #3
 801647e:	e218      	b.n	80168b2 <find_volume+0x4e6>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8016480:	79fb      	ldrb	r3, [r7, #7]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d007      	beq.n	8016496 <find_volume+0xca>
 8016486:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801648a:	f003 0304 	and.w	r3, r3, #4
 801648e:	2b00      	cmp	r3, #0
 8016490:	d001      	beq.n	8016496 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8016492:	230a      	movs	r3, #10
 8016494:	e20d      	b.n	80168b2 <find_volume+0x4e6>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8016496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016498:	7858      	ldrb	r0, [r3, #1]
 801649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801649c:	330c      	adds	r3, #12
 801649e:	461a      	mov	r2, r3
 80164a0:	2102      	movs	r1, #2
 80164a2:	f7fe fe3f 	bl	8015124 <disk_ioctl>
 80164a6:	4603      	mov	r3, r0
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d001      	beq.n	80164b0 <find_volume+0xe4>
 80164ac:	2301      	movs	r3, #1
 80164ae:	e200      	b.n	80168b2 <find_volume+0x4e6>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80164b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164b2:	899b      	ldrh	r3, [r3, #12]
 80164b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80164b8:	d80d      	bhi.n	80164d6 <find_volume+0x10a>
 80164ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164bc:	899b      	ldrh	r3, [r3, #12]
 80164be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164c2:	d308      	bcc.n	80164d6 <find_volume+0x10a>
 80164c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164c6:	899b      	ldrh	r3, [r3, #12]
 80164c8:	461a      	mov	r2, r3
 80164ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164cc:	899b      	ldrh	r3, [r3, #12]
 80164ce:	3b01      	subs	r3, #1
 80164d0:	4013      	ands	r3, r2
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d001      	beq.n	80164da <find_volume+0x10e>
 80164d6:	2301      	movs	r3, #1
 80164d8:	e1eb      	b.n	80168b2 <find_volume+0x4e6>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80164da:	2300      	movs	r3, #0
 80164dc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80164de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80164e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80164e2:	f7ff ff1d 	bl	8016320 <check_fs>
 80164e6:	4603      	mov	r3, r0
 80164e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80164ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80164f0:	2b02      	cmp	r3, #2
 80164f2:	d149      	bne.n	8016588 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80164f4:	2300      	movs	r3, #0
 80164f6:	643b      	str	r3, [r7, #64]	; 0x40
 80164f8:	e01e      	b.n	8016538 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80164fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80164fc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8016500:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016502:	011b      	lsls	r3, r3, #4
 8016504:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8016508:	4413      	add	r3, r2
 801650a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801650c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801650e:	3304      	adds	r3, #4
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d006      	beq.n	8016524 <find_volume+0x158>
 8016516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016518:	3308      	adds	r3, #8
 801651a:	4618      	mov	r0, r3
 801651c:	f7fe fe38 	bl	8015190 <ld_dword>
 8016520:	4602      	mov	r2, r0
 8016522:	e000      	b.n	8016526 <find_volume+0x15a>
 8016524:	2200      	movs	r2, #0
 8016526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016528:	009b      	lsls	r3, r3, #2
 801652a:	3358      	adds	r3, #88	; 0x58
 801652c:	443b      	add	r3, r7
 801652e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8016532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016534:	3301      	adds	r3, #1
 8016536:	643b      	str	r3, [r7, #64]	; 0x40
 8016538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801653a:	2b03      	cmp	r3, #3
 801653c:	d9dd      	bls.n	80164fa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801653e:	2300      	movs	r3, #0
 8016540:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8016542:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016544:	2b00      	cmp	r3, #0
 8016546:	d002      	beq.n	801654e <find_volume+0x182>
 8016548:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801654a:	3b01      	subs	r3, #1
 801654c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801654e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016550:	009b      	lsls	r3, r3, #2
 8016552:	3358      	adds	r3, #88	; 0x58
 8016554:	443b      	add	r3, r7
 8016556:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801655a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801655e:	2b00      	cmp	r3, #0
 8016560:	d005      	beq.n	801656e <find_volume+0x1a2>
 8016562:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016564:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8016566:	f7ff fedb 	bl	8016320 <check_fs>
 801656a:	4603      	mov	r3, r0
 801656c:	e000      	b.n	8016570 <find_volume+0x1a4>
 801656e:	2303      	movs	r3, #3
 8016570:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8016574:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016578:	2b01      	cmp	r3, #1
 801657a:	d905      	bls.n	8016588 <find_volume+0x1bc>
 801657c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801657e:	3301      	adds	r3, #1
 8016580:	643b      	str	r3, [r7, #64]	; 0x40
 8016582:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016584:	2b03      	cmp	r3, #3
 8016586:	d9e2      	bls.n	801654e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8016588:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801658c:	2b04      	cmp	r3, #4
 801658e:	d101      	bne.n	8016594 <find_volume+0x1c8>
 8016590:	2301      	movs	r3, #1
 8016592:	e18e      	b.n	80168b2 <find_volume+0x4e6>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8016594:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016598:	2b01      	cmp	r3, #1
 801659a:	d901      	bls.n	80165a0 <find_volume+0x1d4>
 801659c:	230d      	movs	r3, #13
 801659e:	e188      	b.n	80168b2 <find_volume+0x4e6>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80165a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165a2:	3334      	adds	r3, #52	; 0x34
 80165a4:	330b      	adds	r3, #11
 80165a6:	4618      	mov	r0, r3
 80165a8:	f7fe fdda 	bl	8015160 <ld_word>
 80165ac:	4603      	mov	r3, r0
 80165ae:	461a      	mov	r2, r3
 80165b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165b2:	899b      	ldrh	r3, [r3, #12]
 80165b4:	429a      	cmp	r2, r3
 80165b6:	d001      	beq.n	80165bc <find_volume+0x1f0>
 80165b8:	230d      	movs	r3, #13
 80165ba:	e17a      	b.n	80168b2 <find_volume+0x4e6>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80165bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165be:	3334      	adds	r3, #52	; 0x34
 80165c0:	3316      	adds	r3, #22
 80165c2:	4618      	mov	r0, r3
 80165c4:	f7fe fdcc 	bl	8015160 <ld_word>
 80165c8:	4603      	mov	r3, r0
 80165ca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80165cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d106      	bne.n	80165e0 <find_volume+0x214>
 80165d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165d4:	3334      	adds	r3, #52	; 0x34
 80165d6:	3324      	adds	r3, #36	; 0x24
 80165d8:	4618      	mov	r0, r3
 80165da:	f7fe fdd9 	bl	8015190 <ld_dword>
 80165de:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80165e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80165e4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80165e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165e8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80165ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165ee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80165f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165f2:	789b      	ldrb	r3, [r3, #2]
 80165f4:	2b01      	cmp	r3, #1
 80165f6:	d005      	beq.n	8016604 <find_volume+0x238>
 80165f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80165fa:	789b      	ldrb	r3, [r3, #2]
 80165fc:	2b02      	cmp	r3, #2
 80165fe:	d001      	beq.n	8016604 <find_volume+0x238>
 8016600:	230d      	movs	r3, #13
 8016602:	e156      	b.n	80168b2 <find_volume+0x4e6>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8016604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016606:	789b      	ldrb	r3, [r3, #2]
 8016608:	461a      	mov	r2, r3
 801660a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801660c:	fb02 f303 	mul.w	r3, r2, r3
 8016610:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8016612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016614:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8016618:	b29a      	uxth	r2, r3
 801661a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801661c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801661e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016620:	895b      	ldrh	r3, [r3, #10]
 8016622:	2b00      	cmp	r3, #0
 8016624:	d008      	beq.n	8016638 <find_volume+0x26c>
 8016626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016628:	895b      	ldrh	r3, [r3, #10]
 801662a:	461a      	mov	r2, r3
 801662c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801662e:	895b      	ldrh	r3, [r3, #10]
 8016630:	3b01      	subs	r3, #1
 8016632:	4013      	ands	r3, r2
 8016634:	2b00      	cmp	r3, #0
 8016636:	d001      	beq.n	801663c <find_volume+0x270>
 8016638:	230d      	movs	r3, #13
 801663a:	e13a      	b.n	80168b2 <find_volume+0x4e6>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801663c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801663e:	3334      	adds	r3, #52	; 0x34
 8016640:	3311      	adds	r3, #17
 8016642:	4618      	mov	r0, r3
 8016644:	f7fe fd8c 	bl	8015160 <ld_word>
 8016648:	4603      	mov	r3, r0
 801664a:	461a      	mov	r2, r3
 801664c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801664e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8016650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016652:	891b      	ldrh	r3, [r3, #8]
 8016654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016656:	8992      	ldrh	r2, [r2, #12]
 8016658:	0952      	lsrs	r2, r2, #5
 801665a:	b292      	uxth	r2, r2
 801665c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016660:	fb01 f202 	mul.w	r2, r1, r2
 8016664:	1a9b      	subs	r3, r3, r2
 8016666:	b29b      	uxth	r3, r3
 8016668:	2b00      	cmp	r3, #0
 801666a:	d003      	beq.n	8016674 <find_volume+0x2a8>
 801666c:	230d      	movs	r3, #13
 801666e:	e120      	b.n	80168b2 <find_volume+0x4e6>
 8016670:	20006794 	.word	0x20006794

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8016674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016676:	3334      	adds	r3, #52	; 0x34
 8016678:	3313      	adds	r3, #19
 801667a:	4618      	mov	r0, r3
 801667c:	f7fe fd70 	bl	8015160 <ld_word>
 8016680:	4603      	mov	r3, r0
 8016682:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8016684:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016686:	2b00      	cmp	r3, #0
 8016688:	d106      	bne.n	8016698 <find_volume+0x2cc>
 801668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801668c:	3334      	adds	r3, #52	; 0x34
 801668e:	3320      	adds	r3, #32
 8016690:	4618      	mov	r0, r3
 8016692:	f7fe fd7d 	bl	8015190 <ld_dword>
 8016696:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8016698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801669a:	3334      	adds	r3, #52	; 0x34
 801669c:	330e      	adds	r3, #14
 801669e:	4618      	mov	r0, r3
 80166a0:	f7fe fd5e 	bl	8015160 <ld_word>
 80166a4:	4603      	mov	r3, r0
 80166a6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80166a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d101      	bne.n	80166b2 <find_volume+0x2e6>
 80166ae:	230d      	movs	r3, #13
 80166b0:	e0ff      	b.n	80168b2 <find_volume+0x4e6>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80166b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80166b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166b6:	4413      	add	r3, r2
 80166b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166ba:	8911      	ldrh	r1, [r2, #8]
 80166bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166be:	8992      	ldrh	r2, [r2, #12]
 80166c0:	0952      	lsrs	r2, r2, #5
 80166c2:	b292      	uxth	r2, r2
 80166c4:	fbb1 f2f2 	udiv	r2, r1, r2
 80166c8:	b292      	uxth	r2, r2
 80166ca:	4413      	add	r3, r2
 80166cc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80166ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80166d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166d2:	429a      	cmp	r2, r3
 80166d4:	d201      	bcs.n	80166da <find_volume+0x30e>
 80166d6:	230d      	movs	r3, #13
 80166d8:	e0eb      	b.n	80168b2 <find_volume+0x4e6>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80166da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80166dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166de:	1ad3      	subs	r3, r2, r3
 80166e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80166e2:	8952      	ldrh	r2, [r2, #10]
 80166e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80166e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80166ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d101      	bne.n	80166f4 <find_volume+0x328>
 80166f0:	230d      	movs	r3, #13
 80166f2:	e0de      	b.n	80168b2 <find_volume+0x4e6>
		fmt = FS_FAT32;
 80166f4:	2303      	movs	r3, #3
 80166f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80166fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166fc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8016700:	4293      	cmp	r3, r2
 8016702:	d802      	bhi.n	801670a <find_volume+0x33e>
 8016704:	2302      	movs	r3, #2
 8016706:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801670c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8016710:	4293      	cmp	r3, r2
 8016712:	d802      	bhi.n	801671a <find_volume+0x34e>
 8016714:	2301      	movs	r3, #1
 8016716:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801671a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801671c:	1c9a      	adds	r2, r3, #2
 801671e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016720:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8016722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016724:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016726:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8016728:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801672a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801672c:	441a      	add	r2, r3
 801672e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016730:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8016732:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8016734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016736:	441a      	add	r2, r3
 8016738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801673a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801673c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8016740:	2b03      	cmp	r3, #3
 8016742:	d11e      	bne.n	8016782 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8016744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016746:	3334      	adds	r3, #52	; 0x34
 8016748:	332a      	adds	r3, #42	; 0x2a
 801674a:	4618      	mov	r0, r3
 801674c:	f7fe fd08 	bl	8015160 <ld_word>
 8016750:	4603      	mov	r3, r0
 8016752:	2b00      	cmp	r3, #0
 8016754:	d001      	beq.n	801675a <find_volume+0x38e>
 8016756:	230d      	movs	r3, #13
 8016758:	e0ab      	b.n	80168b2 <find_volume+0x4e6>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801675c:	891b      	ldrh	r3, [r3, #8]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d001      	beq.n	8016766 <find_volume+0x39a>
 8016762:	230d      	movs	r3, #13
 8016764:	e0a5      	b.n	80168b2 <find_volume+0x4e6>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8016766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016768:	3334      	adds	r3, #52	; 0x34
 801676a:	332c      	adds	r3, #44	; 0x2c
 801676c:	4618      	mov	r0, r3
 801676e:	f7fe fd0f 	bl	8015190 <ld_dword>
 8016772:	4602      	mov	r2, r0
 8016774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016776:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8016778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801677a:	699b      	ldr	r3, [r3, #24]
 801677c:	009b      	lsls	r3, r3, #2
 801677e:	647b      	str	r3, [r7, #68]	; 0x44
 8016780:	e01f      	b.n	80167c2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8016782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016784:	891b      	ldrh	r3, [r3, #8]
 8016786:	2b00      	cmp	r3, #0
 8016788:	d101      	bne.n	801678e <find_volume+0x3c2>
 801678a:	230d      	movs	r3, #13
 801678c:	e091      	b.n	80168b2 <find_volume+0x4e6>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801678e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016790:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016794:	441a      	add	r2, r3
 8016796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016798:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801679a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801679e:	2b02      	cmp	r3, #2
 80167a0:	d103      	bne.n	80167aa <find_volume+0x3de>
 80167a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167a4:	699b      	ldr	r3, [r3, #24]
 80167a6:	005b      	lsls	r3, r3, #1
 80167a8:	e00a      	b.n	80167c0 <find_volume+0x3f4>
 80167aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ac:	699a      	ldr	r2, [r3, #24]
 80167ae:	4613      	mov	r3, r2
 80167b0:	005b      	lsls	r3, r3, #1
 80167b2:	4413      	add	r3, r2
 80167b4:	085a      	lsrs	r2, r3, #1
 80167b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167b8:	699b      	ldr	r3, [r3, #24]
 80167ba:	f003 0301 	and.w	r3, r3, #1
 80167be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80167c0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80167c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c4:	69da      	ldr	r2, [r3, #28]
 80167c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167c8:	899b      	ldrh	r3, [r3, #12]
 80167ca:	4619      	mov	r1, r3
 80167cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80167ce:	440b      	add	r3, r1
 80167d0:	3b01      	subs	r3, #1
 80167d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80167d4:	8989      	ldrh	r1, [r1, #12]
 80167d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80167da:	429a      	cmp	r2, r3
 80167dc:	d201      	bcs.n	80167e2 <find_volume+0x416>
 80167de:	230d      	movs	r3, #13
 80167e0:	e067      	b.n	80168b2 <find_volume+0x4e6>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80167e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167e4:	f04f 32ff 	mov.w	r2, #4294967295
 80167e8:	615a      	str	r2, [r3, #20]
 80167ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167ec:	695a      	ldr	r2, [r3, #20]
 80167ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167f0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80167f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80167f4:	2280      	movs	r2, #128	; 0x80
 80167f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80167f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80167fc:	2b03      	cmp	r3, #3
 80167fe:	d149      	bne.n	8016894 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8016800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016802:	3334      	adds	r3, #52	; 0x34
 8016804:	3330      	adds	r3, #48	; 0x30
 8016806:	4618      	mov	r0, r3
 8016808:	f7fe fcaa 	bl	8015160 <ld_word>
 801680c:	4603      	mov	r3, r0
 801680e:	2b01      	cmp	r3, #1
 8016810:	d140      	bne.n	8016894 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8016812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016814:	3301      	adds	r3, #1
 8016816:	4619      	mov	r1, r3
 8016818:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801681a:	f7fe fde5 	bl	80153e8 <move_window>
 801681e:	4603      	mov	r3, r0
 8016820:	2b00      	cmp	r3, #0
 8016822:	d137      	bne.n	8016894 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8016824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016826:	2200      	movs	r2, #0
 8016828:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801682a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801682c:	3334      	adds	r3, #52	; 0x34
 801682e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016832:	4618      	mov	r0, r3
 8016834:	f7fe fc94 	bl	8015160 <ld_word>
 8016838:	4603      	mov	r3, r0
 801683a:	461a      	mov	r2, r3
 801683c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8016840:	429a      	cmp	r2, r3
 8016842:	d127      	bne.n	8016894 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8016844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016846:	3334      	adds	r3, #52	; 0x34
 8016848:	4618      	mov	r0, r3
 801684a:	f7fe fca1 	bl	8015190 <ld_dword>
 801684e:	4603      	mov	r3, r0
 8016850:	4a1a      	ldr	r2, [pc, #104]	; (80168bc <find_volume+0x4f0>)
 8016852:	4293      	cmp	r3, r2
 8016854:	d11e      	bne.n	8016894 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8016856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016858:	3334      	adds	r3, #52	; 0x34
 801685a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801685e:	4618      	mov	r0, r3
 8016860:	f7fe fc96 	bl	8015190 <ld_dword>
 8016864:	4603      	mov	r3, r0
 8016866:	4a16      	ldr	r2, [pc, #88]	; (80168c0 <find_volume+0x4f4>)
 8016868:	4293      	cmp	r3, r2
 801686a:	d113      	bne.n	8016894 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801686c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801686e:	3334      	adds	r3, #52	; 0x34
 8016870:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8016874:	4618      	mov	r0, r3
 8016876:	f7fe fc8b 	bl	8015190 <ld_dword>
 801687a:	4602      	mov	r2, r0
 801687c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801687e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8016880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016882:	3334      	adds	r3, #52	; 0x34
 8016884:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8016888:	4618      	mov	r0, r3
 801688a:	f7fe fc81 	bl	8015190 <ld_dword>
 801688e:	4602      	mov	r2, r0
 8016890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016892:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8016894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016896:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801689a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801689c:	4b09      	ldr	r3, [pc, #36]	; (80168c4 <find_volume+0x4f8>)
 801689e:	881b      	ldrh	r3, [r3, #0]
 80168a0:	3301      	adds	r3, #1
 80168a2:	b29a      	uxth	r2, r3
 80168a4:	4b07      	ldr	r3, [pc, #28]	; (80168c4 <find_volume+0x4f8>)
 80168a6:	801a      	strh	r2, [r3, #0]
 80168a8:	4b06      	ldr	r3, [pc, #24]	; (80168c4 <find_volume+0x4f8>)
 80168aa:	881a      	ldrh	r2, [r3, #0]
 80168ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80168ae:	80da      	strh	r2, [r3, #6]
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
 80168b0:	2300      	movs	r3, #0
}
 80168b2:	4618      	mov	r0, r3
 80168b4:	3758      	adds	r7, #88	; 0x58
 80168b6:	46bd      	mov	sp, r7
 80168b8:	bd80      	pop	{r7, pc}
 80168ba:	bf00      	nop
 80168bc:	41615252 	.word	0x41615252
 80168c0:	61417272 	.word	0x61417272
 80168c4:	20006798 	.word	0x20006798

080168c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b084      	sub	sp, #16
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80168d2:	2309      	movs	r3, #9
 80168d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d01c      	beq.n	8016916 <validate+0x4e>
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d018      	beq.n	8016916 <validate+0x4e>
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	781b      	ldrb	r3, [r3, #0]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d013      	beq.n	8016916 <validate+0x4e>
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	889a      	ldrh	r2, [r3, #4]
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	88db      	ldrh	r3, [r3, #6]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d10c      	bne.n	8016916 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	785b      	ldrb	r3, [r3, #1]
 8016902:	4618      	mov	r0, r3
 8016904:	f7fe fb8e 	bl	8015024 <disk_status>
 8016908:	4603      	mov	r3, r0
 801690a:	f003 0301 	and.w	r3, r3, #1
 801690e:	2b00      	cmp	r3, #0
 8016910:	d101      	bne.n	8016916 <validate+0x4e>
			res = FR_OK;
 8016912:	2300      	movs	r3, #0
 8016914:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8016916:	7bfb      	ldrb	r3, [r7, #15]
 8016918:	2b00      	cmp	r3, #0
 801691a:	d102      	bne.n	8016922 <validate+0x5a>
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	e000      	b.n	8016924 <validate+0x5c>
 8016922:	2300      	movs	r3, #0
 8016924:	683a      	ldr	r2, [r7, #0]
 8016926:	6013      	str	r3, [r2, #0]
	return res;
 8016928:	7bfb      	ldrb	r3, [r7, #15]
}
 801692a:	4618      	mov	r0, r3
 801692c:	3710      	adds	r7, #16
 801692e:	46bd      	mov	sp, r7
 8016930:	bd80      	pop	{r7, pc}
	...

08016934 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b088      	sub	sp, #32
 8016938:	af00      	add	r7, sp, #0
 801693a:	60f8      	str	r0, [r7, #12]
 801693c:	60b9      	str	r1, [r7, #8]
 801693e:	4613      	mov	r3, r2
 8016940:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8016942:	68bb      	ldr	r3, [r7, #8]
 8016944:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8016946:	f107 0310 	add.w	r3, r7, #16
 801694a:	4618      	mov	r0, r3
 801694c:	f7ff fca4 	bl	8016298 <get_ldnumber>
 8016950:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8016952:	69fb      	ldr	r3, [r7, #28]
 8016954:	2b00      	cmp	r3, #0
 8016956:	da01      	bge.n	801695c <f_mount+0x28>
 8016958:	230b      	movs	r3, #11
 801695a:	e028      	b.n	80169ae <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801695c:	4a16      	ldr	r2, [pc, #88]	; (80169b8 <f_mount+0x84>)
 801695e:	69fb      	ldr	r3, [r7, #28]
 8016960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016964:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8016966:	69bb      	ldr	r3, [r7, #24]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d002      	beq.n	8016972 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801696c:	69bb      	ldr	r3, [r7, #24]
 801696e:	2200      	movs	r2, #0
 8016970:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	2b00      	cmp	r3, #0
 8016976:	d002      	beq.n	801697e <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	2200      	movs	r2, #0
 801697c:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801697e:	68fa      	ldr	r2, [r7, #12]
 8016980:	490d      	ldr	r1, [pc, #52]	; (80169b8 <f_mount+0x84>)
 8016982:	69fb      	ldr	r3, [r7, #28]
 8016984:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d002      	beq.n	8016994 <f_mount+0x60>
 801698e:	79fb      	ldrb	r3, [r7, #7]
 8016990:	2b01      	cmp	r3, #1
 8016992:	d001      	beq.n	8016998 <f_mount+0x64>
 8016994:	2300      	movs	r3, #0
 8016996:	e00a      	b.n	80169ae <f_mount+0x7a>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8016998:	f107 010c 	add.w	r1, r7, #12
 801699c:	f107 0308 	add.w	r3, r7, #8
 80169a0:	2200      	movs	r2, #0
 80169a2:	4618      	mov	r0, r3
 80169a4:	f7ff fd12 	bl	80163cc <find_volume>
 80169a8:	4603      	mov	r3, r0
 80169aa:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80169ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80169ae:	4618      	mov	r0, r3
 80169b0:	3720      	adds	r7, #32
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}
 80169b6:	bf00      	nop
 80169b8:	20006794 	.word	0x20006794

080169bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80169bc:	b580      	push	{r7, lr}
 80169be:	b098      	sub	sp, #96	; 0x60
 80169c0:	af00      	add	r7, sp, #0
 80169c2:	60f8      	str	r0, [r7, #12]
 80169c4:	60b9      	str	r1, [r7, #8]
 80169c6:	4613      	mov	r3, r2
 80169c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d101      	bne.n	80169d4 <f_open+0x18>
 80169d0:	2309      	movs	r3, #9
 80169d2:	e188      	b.n	8016ce6 <f_open+0x32a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80169d4:	79fb      	ldrb	r3, [r7, #7]
 80169d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80169da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80169dc:	79fa      	ldrb	r2, [r7, #7]
 80169de:	f107 0114 	add.w	r1, r7, #20
 80169e2:	f107 0308 	add.w	r3, r7, #8
 80169e6:	4618      	mov	r0, r3
 80169e8:	f7ff fcf0 	bl	80163cc <find_volume>
 80169ec:	4603      	mov	r3, r0
 80169ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80169f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	f040 816c 	bne.w	8016cd4 <f_open+0x318>
		dj.obj.fs = fs;
 80169fc:	697b      	ldr	r3, [r7, #20]
 80169fe:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8016a00:	68ba      	ldr	r2, [r7, #8]
 8016a02:	f107 0318 	add.w	r3, r7, #24
 8016a06:	4611      	mov	r1, r2
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7ff fbcf 	bl	80161ac <follow_path>
 8016a0e:	4603      	mov	r3, r0
 8016a10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8016a14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d107      	bne.n	8016a2c <f_open+0x70>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8016a1c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016a20:	b25b      	sxtb	r3, r3
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	da02      	bge.n	8016a2c <f_open+0x70>
				res = FR_INVALID_NAME;
 8016a26:	2306      	movs	r3, #6
 8016a28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8016a2c:	79fb      	ldrb	r3, [r7, #7]
 8016a2e:	f003 031c 	and.w	r3, r3, #28
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	d078      	beq.n	8016b28 <f_open+0x16c>
			if (res != FR_OK) {					/* No file, create new */
 8016a36:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d010      	beq.n	8016a60 <f_open+0xa4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8016a3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a42:	2b04      	cmp	r3, #4
 8016a44:	d107      	bne.n	8016a56 <f_open+0x9a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8016a46:	f107 0318 	add.w	r3, r7, #24
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f7ff fae8 	bl	8016020 <dir_register>
 8016a50:	4603      	mov	r3, r0
 8016a52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8016a56:	79fb      	ldrb	r3, [r7, #7]
 8016a58:	f043 0308 	orr.w	r3, r3, #8
 8016a5c:	71fb      	strb	r3, [r7, #7]
 8016a5e:	e010      	b.n	8016a82 <f_open+0xc6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8016a60:	7fbb      	ldrb	r3, [r7, #30]
 8016a62:	f003 0311 	and.w	r3, r3, #17
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d003      	beq.n	8016a72 <f_open+0xb6>
					res = FR_DENIED;
 8016a6a:	2307      	movs	r3, #7
 8016a6c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016a70:	e007      	b.n	8016a82 <f_open+0xc6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8016a72:	79fb      	ldrb	r3, [r7, #7]
 8016a74:	f003 0304 	and.w	r3, r3, #4
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d002      	beq.n	8016a82 <f_open+0xc6>
 8016a7c:	2308      	movs	r3, #8
 8016a7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8016a82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d168      	bne.n	8016b5c <f_open+0x1a0>
 8016a8a:	79fb      	ldrb	r3, [r7, #7]
 8016a8c:	f003 0308 	and.w	r3, r3, #8
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d063      	beq.n	8016b5c <f_open+0x1a0>
				dw = GET_FATTIME();
 8016a94:	f7fa fd94 	bl	80115c0 <get_fattime>
 8016a98:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8016a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a9c:	330e      	adds	r3, #14
 8016a9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	f7fe fbb3 	bl	801520c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8016aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016aa8:	3316      	adds	r3, #22
 8016aaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016aac:	4618      	mov	r0, r3
 8016aae:	f7fe fbad 	bl	801520c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8016ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ab4:	330b      	adds	r3, #11
 8016ab6:	2220      	movs	r2, #32
 8016ab8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016abe:	4611      	mov	r1, r2
 8016ac0:	4618      	mov	r0, r3
 8016ac2:	f7ff fa19 	bl	8015ef8 <ld_clust>
 8016ac6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8016ac8:	697b      	ldr	r3, [r7, #20]
 8016aca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016acc:	2200      	movs	r2, #0
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7ff fa31 	bl	8015f36 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8016ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ad6:	331c      	adds	r3, #28
 8016ad8:	2100      	movs	r1, #0
 8016ada:	4618      	mov	r0, r3
 8016adc:	f7fe fb96 	bl	801520c <st_dword>
					fs->wflag = 1;
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	2201      	movs	r2, #1
 8016ae4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8016ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d037      	beq.n	8016b5c <f_open+0x1a0>
						dw = fs->winsect;
 8016aec:	697b      	ldr	r3, [r7, #20]
 8016aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016af0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8016af2:	f107 0318 	add.w	r3, r7, #24
 8016af6:	2200      	movs	r2, #0
 8016af8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8016afa:	4618      	mov	r0, r3
 8016afc:	f7fe ff21 	bl	8015942 <remove_chain>
 8016b00:	4603      	mov	r3, r0
 8016b02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8016b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d126      	bne.n	8016b5c <f_open+0x1a0>
							res = move_window(fs, dw);
 8016b0e:	697b      	ldr	r3, [r7, #20]
 8016b10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8016b12:	4618      	mov	r0, r3
 8016b14:	f7fe fc68 	bl	80153e8 <move_window>
 8016b18:	4603      	mov	r3, r0
 8016b1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8016b1e:	697b      	ldr	r3, [r7, #20]
 8016b20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016b22:	3a01      	subs	r2, #1
 8016b24:	611a      	str	r2, [r3, #16]
 8016b26:	e019      	b.n	8016b5c <f_open+0x1a0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8016b28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d115      	bne.n	8016b5c <f_open+0x1a0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8016b30:	7fbb      	ldrb	r3, [r7, #30]
 8016b32:	f003 0310 	and.w	r3, r3, #16
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d003      	beq.n	8016b42 <f_open+0x186>
					res = FR_NO_FILE;
 8016b3a:	2304      	movs	r3, #4
 8016b3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016b40:	e00c      	b.n	8016b5c <f_open+0x1a0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8016b42:	79fb      	ldrb	r3, [r7, #7]
 8016b44:	f003 0302 	and.w	r3, r3, #2
 8016b48:	2b00      	cmp	r3, #0
 8016b4a:	d007      	beq.n	8016b5c <f_open+0x1a0>
 8016b4c:	7fbb      	ldrb	r3, [r7, #30]
 8016b4e:	f003 0301 	and.w	r3, r3, #1
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d002      	beq.n	8016b5c <f_open+0x1a0>
						res = FR_DENIED;
 8016b56:	2307      	movs	r3, #7
 8016b58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8016b5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d10f      	bne.n	8016b84 <f_open+0x1c8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8016b64:	79fb      	ldrb	r3, [r7, #7]
 8016b66:	f003 0308 	and.w	r3, r3, #8
 8016b6a:	2b00      	cmp	r3, #0
 8016b6c:	d003      	beq.n	8016b76 <f_open+0x1ba>
				mode |= FA_MODIFIED;
 8016b6e:	79fb      	ldrb	r3, [r7, #7]
 8016b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b74:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8016b76:	697b      	ldr	r3, [r7, #20]
 8016b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016b7a:	68fb      	ldr	r3, [r7, #12]
 8016b7c:	621a      	str	r2, [r3, #32]
			fp->dir_ptr = dj.dir;
 8016b7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	625a      	str	r2, [r3, #36]	; 0x24
				}
			}
		}
#endif

		if (res == FR_OK) {
 8016b84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	f040 80a3 	bne.w	8016cd4 <f_open+0x318>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b92:	4611      	mov	r1, r2
 8016b94:	4618      	mov	r0, r3
 8016b96:	f7ff f9af 	bl	8015ef8 <ld_clust>
 8016b9a:	4602      	mov	r2, r0
 8016b9c:	68fb      	ldr	r3, [r7, #12]
 8016b9e:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8016ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ba2:	331c      	adds	r3, #28
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	f7fe faf3 	bl	8015190 <ld_dword>
 8016baa:	4602      	mov	r2, r0
 8016bac:	68fb      	ldr	r3, [r7, #12]
 8016bae:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8016bb0:	68fb      	ldr	r3, [r7, #12]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8016bb6:	697a      	ldr	r2, [r7, #20]
 8016bb8:	68fb      	ldr	r3, [r7, #12]
 8016bba:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8016bbc:	697b      	ldr	r3, [r7, #20]
 8016bbe:	88da      	ldrh	r2, [r3, #6]
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8016bc4:	68fb      	ldr	r3, [r7, #12]
 8016bc6:	79fa      	ldrb	r2, [r7, #7]
 8016bc8:	741a      	strb	r2, [r3, #16]
			fp->err = 0;			/* Clear error flag */
 8016bca:	68fb      	ldr	r3, [r7, #12]
 8016bcc:	2200      	movs	r2, #0
 8016bce:	745a      	strb	r2, [r3, #17]
			fp->sect = 0;			/* Invalidate current data sector */
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	61da      	str	r2, [r3, #28]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	2200      	movs	r2, #0
 8016bda:	615a      	str	r2, [r3, #20]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	332c      	adds	r3, #44	; 0x2c
 8016be0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8016be4:	2100      	movs	r1, #0
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7fe fb5d 	bl	80152a6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8016bec:	79fb      	ldrb	r3, [r7, #7]
 8016bee:	f003 0320 	and.w	r3, r3, #32
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d06e      	beq.n	8016cd4 <f_open+0x318>
 8016bf6:	68fb      	ldr	r3, [r7, #12]
 8016bf8:	68db      	ldr	r3, [r3, #12]
 8016bfa:	2b00      	cmp	r3, #0
 8016bfc:	d06a      	beq.n	8016cd4 <f_open+0x318>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	68da      	ldr	r2, [r3, #12]
 8016c02:	68fb      	ldr	r3, [r7, #12]
 8016c04:	615a      	str	r2, [r3, #20]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8016c06:	697b      	ldr	r3, [r7, #20]
 8016c08:	895b      	ldrh	r3, [r3, #10]
 8016c0a:	461a      	mov	r2, r3
 8016c0c:	697b      	ldr	r3, [r7, #20]
 8016c0e:	899b      	ldrh	r3, [r3, #12]
 8016c10:	fb02 f303 	mul.w	r3, r2, r3
 8016c14:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	689b      	ldr	r3, [r3, #8]
 8016c1a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	68db      	ldr	r3, [r3, #12]
 8016c20:	657b      	str	r3, [r7, #84]	; 0x54
 8016c22:	e016      	b.n	8016c52 <f_open+0x296>
					clst = get_fat(&fp->obj, clst);
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f7fe fc9a 	bl	8015562 <get_fat>
 8016c2e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8016c30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c32:	2b01      	cmp	r3, #1
 8016c34:	d802      	bhi.n	8016c3c <f_open+0x280>
 8016c36:	2302      	movs	r3, #2
 8016c38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8016c3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c42:	d102      	bne.n	8016c4a <f_open+0x28e>
 8016c44:	2301      	movs	r3, #1
 8016c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8016c4a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016c4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c4e:	1ad3      	subs	r3, r2, r3
 8016c50:	657b      	str	r3, [r7, #84]	; 0x54
 8016c52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d103      	bne.n	8016c62 <f_open+0x2a6>
 8016c5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8016c5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d8e0      	bhi.n	8016c24 <f_open+0x268>
				}
				fp->clust = clst;
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8016c66:	619a      	str	r2, [r3, #24]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8016c68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d131      	bne.n	8016cd4 <f_open+0x318>
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	899b      	ldrh	r3, [r3, #12]
 8016c74:	461a      	mov	r2, r3
 8016c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c78:	fbb3 f1f2 	udiv	r1, r3, r2
 8016c7c:	fb01 f202 	mul.w	r2, r1, r2
 8016c80:	1a9b      	subs	r3, r3, r2
 8016c82:	2b00      	cmp	r3, #0
 8016c84:	d026      	beq.n	8016cd4 <f_open+0x318>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8016c86:	697b      	ldr	r3, [r7, #20]
 8016c88:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	f7fe fc4a 	bl	8015524 <clust2sect>
 8016c90:	6478      	str	r0, [r7, #68]	; 0x44
 8016c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d103      	bne.n	8016ca0 <f_open+0x2e4>
						res = FR_INT_ERR;
 8016c98:	2302      	movs	r3, #2
 8016c9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8016c9e:	e019      	b.n	8016cd4 <f_open+0x318>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8016ca0:	697b      	ldr	r3, [r7, #20]
 8016ca2:	899b      	ldrh	r3, [r3, #12]
 8016ca4:	461a      	mov	r2, r3
 8016ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ca8:	fbb3 f2f2 	udiv	r2, r3, r2
 8016cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cae:	441a      	add	r2, r3
 8016cb0:	68fb      	ldr	r3, [r7, #12]
 8016cb2:	61da      	str	r2, [r3, #28]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	7858      	ldrb	r0, [r3, #1]
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016cbe:	68fb      	ldr	r3, [r7, #12]
 8016cc0:	69da      	ldr	r2, [r3, #28]
 8016cc2:	2301      	movs	r3, #1
 8016cc4:	f7fe f9ee 	bl	80150a4 <disk_read>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d002      	beq.n	8016cd4 <f_open+0x318>
 8016cce:	2301      	movs	r3, #1
 8016cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8016cd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d002      	beq.n	8016ce2 <f_open+0x326>
 8016cdc:	68fb      	ldr	r3, [r7, #12]
 8016cde:	2200      	movs	r2, #0
 8016ce0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8016ce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	3760      	adds	r7, #96	; 0x60
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bd80      	pop	{r7, pc}

08016cee <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8016cee:	b580      	push	{r7, lr}
 8016cf0:	b08c      	sub	sp, #48	; 0x30
 8016cf2:	af00      	add	r7, sp, #0
 8016cf4:	60f8      	str	r0, [r7, #12]
 8016cf6:	60b9      	str	r1, [r7, #8]
 8016cf8:	607a      	str	r2, [r7, #4]
 8016cfa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8016cfc:	68bb      	ldr	r3, [r7, #8]
 8016cfe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	2200      	movs	r2, #0
 8016d04:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8016d06:	68fb      	ldr	r3, [r7, #12]
 8016d08:	f107 0210 	add.w	r2, r7, #16
 8016d0c:	4611      	mov	r1, r2
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f7ff fdda 	bl	80168c8 <validate>
 8016d14:	4603      	mov	r3, r0
 8016d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8016d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d107      	bne.n	8016d32 <f_write+0x44>
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	7c5b      	ldrb	r3, [r3, #17]
 8016d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8016d2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d002      	beq.n	8016d38 <f_write+0x4a>
 8016d32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8016d36:	e16a      	b.n	801700e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	7c1b      	ldrb	r3, [r3, #16]
 8016d3c:	f003 0302 	and.w	r3, r3, #2
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d101      	bne.n	8016d48 <f_write+0x5a>
 8016d44:	2307      	movs	r3, #7
 8016d46:	e162      	b.n	801700e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	695a      	ldr	r2, [r3, #20]
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	441a      	add	r2, r3
 8016d50:	68fb      	ldr	r3, [r7, #12]
 8016d52:	695b      	ldr	r3, [r3, #20]
 8016d54:	429a      	cmp	r2, r3
 8016d56:	f080 814c 	bcs.w	8016ff2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8016d5a:	68fb      	ldr	r3, [r7, #12]
 8016d5c:	695b      	ldr	r3, [r3, #20]
 8016d5e:	43db      	mvns	r3, r3
 8016d60:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8016d62:	e146      	b.n	8016ff2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	695b      	ldr	r3, [r3, #20]
 8016d68:	693a      	ldr	r2, [r7, #16]
 8016d6a:	8992      	ldrh	r2, [r2, #12]
 8016d6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016d70:	fb01 f202 	mul.w	r2, r1, r2
 8016d74:	1a9b      	subs	r3, r3, r2
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	f040 80f1 	bne.w	8016f5e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	695b      	ldr	r3, [r3, #20]
 8016d80:	693a      	ldr	r2, [r7, #16]
 8016d82:	8992      	ldrh	r2, [r2, #12]
 8016d84:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d88:	693a      	ldr	r2, [r7, #16]
 8016d8a:	8952      	ldrh	r2, [r2, #10]
 8016d8c:	3a01      	subs	r2, #1
 8016d8e:	4013      	ands	r3, r2
 8016d90:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8016d92:	69bb      	ldr	r3, [r7, #24]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d143      	bne.n	8016e20 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	695b      	ldr	r3, [r3, #20]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d10c      	bne.n	8016dba <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8016da0:	68fb      	ldr	r3, [r7, #12]
 8016da2:	689b      	ldr	r3, [r3, #8]
 8016da4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8016da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d11a      	bne.n	8016de2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	2100      	movs	r1, #0
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7fe fe2b 	bl	8015a0c <create_chain>
 8016db6:	62b8      	str	r0, [r7, #40]	; 0x28
 8016db8:	e013      	b.n	8016de2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8016dba:	68fb      	ldr	r3, [r7, #12]
 8016dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dbe:	2b00      	cmp	r3, #0
 8016dc0:	d007      	beq.n	8016dd2 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8016dc2:	68fb      	ldr	r3, [r7, #12]
 8016dc4:	695b      	ldr	r3, [r3, #20]
 8016dc6:	4619      	mov	r1, r3
 8016dc8:	68f8      	ldr	r0, [r7, #12]
 8016dca:	f7fe feb7 	bl	8015b3c <clmt_clust>
 8016dce:	62b8      	str	r0, [r7, #40]	; 0x28
 8016dd0:	e007      	b.n	8016de2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8016dd2:	68fa      	ldr	r2, [r7, #12]
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	699b      	ldr	r3, [r3, #24]
 8016dd8:	4619      	mov	r1, r3
 8016dda:	4610      	mov	r0, r2
 8016ddc:	f7fe fe16 	bl	8015a0c <create_chain>
 8016de0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	f000 8109 	beq.w	8016ffc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8016dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dec:	2b01      	cmp	r3, #1
 8016dee:	d104      	bne.n	8016dfa <f_write+0x10c>
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	2202      	movs	r2, #2
 8016df4:	745a      	strb	r2, [r3, #17]
 8016df6:	2302      	movs	r3, #2
 8016df8:	e109      	b.n	801700e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8016dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e00:	d104      	bne.n	8016e0c <f_write+0x11e>
 8016e02:	68fb      	ldr	r3, [r7, #12]
 8016e04:	2201      	movs	r2, #1
 8016e06:	745a      	strb	r2, [r3, #17]
 8016e08:	2301      	movs	r3, #1
 8016e0a:	e100      	b.n	801700e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8016e0c:	68fb      	ldr	r3, [r7, #12]
 8016e0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e10:	619a      	str	r2, [r3, #24]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	689b      	ldr	r3, [r3, #8]
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d102      	bne.n	8016e20 <f_write+0x132>
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016e1e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8016e20:	68fb      	ldr	r3, [r7, #12]
 8016e22:	7c1b      	ldrb	r3, [r3, #16]
 8016e24:	b25b      	sxtb	r3, r3
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	da18      	bge.n	8016e5c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016e2a:	693b      	ldr	r3, [r7, #16]
 8016e2c:	7858      	ldrb	r0, [r3, #1]
 8016e2e:	68fb      	ldr	r3, [r7, #12]
 8016e30:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016e34:	68fb      	ldr	r3, [r7, #12]
 8016e36:	69da      	ldr	r2, [r3, #28]
 8016e38:	2301      	movs	r3, #1
 8016e3a:	f7fe f953 	bl	80150e4 <disk_write>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d004      	beq.n	8016e4e <f_write+0x160>
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	2201      	movs	r2, #1
 8016e48:	745a      	strb	r2, [r3, #17]
 8016e4a:	2301      	movs	r3, #1
 8016e4c:	e0df      	b.n	801700e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	7c1b      	ldrb	r3, [r3, #16]
 8016e52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016e56:	b2da      	uxtb	r2, r3
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	741a      	strb	r2, [r3, #16]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8016e5c:	693a      	ldr	r2, [r7, #16]
 8016e5e:	68fb      	ldr	r3, [r7, #12]
 8016e60:	699b      	ldr	r3, [r3, #24]
 8016e62:	4619      	mov	r1, r3
 8016e64:	4610      	mov	r0, r2
 8016e66:	f7fe fb5d 	bl	8015524 <clust2sect>
 8016e6a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8016e6c:	697b      	ldr	r3, [r7, #20]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d104      	bne.n	8016e7c <f_write+0x18e>
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	2202      	movs	r2, #2
 8016e76:	745a      	strb	r2, [r3, #17]
 8016e78:	2302      	movs	r3, #2
 8016e7a:	e0c8      	b.n	801700e <f_write+0x320>
			sect += csect;
 8016e7c:	697a      	ldr	r2, [r7, #20]
 8016e7e:	69bb      	ldr	r3, [r7, #24]
 8016e80:	4413      	add	r3, r2
 8016e82:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8016e84:	693b      	ldr	r3, [r7, #16]
 8016e86:	899b      	ldrh	r3, [r3, #12]
 8016e88:	461a      	mov	r2, r3
 8016e8a:	687b      	ldr	r3, [r7, #4]
 8016e8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016e90:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8016e92:	6a3b      	ldr	r3, [r7, #32]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d043      	beq.n	8016f20 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8016e98:	69ba      	ldr	r2, [r7, #24]
 8016e9a:	6a3b      	ldr	r3, [r7, #32]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	693a      	ldr	r2, [r7, #16]
 8016ea0:	8952      	ldrh	r2, [r2, #10]
 8016ea2:	4293      	cmp	r3, r2
 8016ea4:	d905      	bls.n	8016eb2 <f_write+0x1c4>
					cc = fs->csize - csect;
 8016ea6:	693b      	ldr	r3, [r7, #16]
 8016ea8:	895b      	ldrh	r3, [r3, #10]
 8016eaa:	461a      	mov	r2, r3
 8016eac:	69bb      	ldr	r3, [r7, #24]
 8016eae:	1ad3      	subs	r3, r2, r3
 8016eb0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8016eb2:	693b      	ldr	r3, [r7, #16]
 8016eb4:	7858      	ldrb	r0, [r3, #1]
 8016eb6:	6a3b      	ldr	r3, [r7, #32]
 8016eb8:	697a      	ldr	r2, [r7, #20]
 8016eba:	69f9      	ldr	r1, [r7, #28]
 8016ebc:	f7fe f912 	bl	80150e4 <disk_write>
 8016ec0:	4603      	mov	r3, r0
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d004      	beq.n	8016ed0 <f_write+0x1e2>
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	2201      	movs	r2, #1
 8016eca:	745a      	strb	r2, [r3, #17]
 8016ecc:	2301      	movs	r3, #1
 8016ece:	e09e      	b.n	801700e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8016ed0:	68fb      	ldr	r3, [r7, #12]
 8016ed2:	69da      	ldr	r2, [r3, #28]
 8016ed4:	697b      	ldr	r3, [r7, #20]
 8016ed6:	1ad3      	subs	r3, r2, r3
 8016ed8:	6a3a      	ldr	r2, [r7, #32]
 8016eda:	429a      	cmp	r2, r3
 8016edc:	d918      	bls.n	8016f10 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8016ede:	68fb      	ldr	r3, [r7, #12]
 8016ee0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	69da      	ldr	r2, [r3, #28]
 8016ee8:	697b      	ldr	r3, [r7, #20]
 8016eea:	1ad3      	subs	r3, r2, r3
 8016eec:	693a      	ldr	r2, [r7, #16]
 8016eee:	8992      	ldrh	r2, [r2, #12]
 8016ef0:	fb02 f303 	mul.w	r3, r2, r3
 8016ef4:	69fa      	ldr	r2, [r7, #28]
 8016ef6:	18d1      	adds	r1, r2, r3
 8016ef8:	693b      	ldr	r3, [r7, #16]
 8016efa:	899b      	ldrh	r3, [r3, #12]
 8016efc:	461a      	mov	r2, r3
 8016efe:	f7fe f9b1 	bl	8015264 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8016f02:	68fb      	ldr	r3, [r7, #12]
 8016f04:	7c1b      	ldrb	r3, [r3, #16]
 8016f06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f0a:	b2da      	uxtb	r2, r3
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	741a      	strb	r2, [r3, #16]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8016f10:	693b      	ldr	r3, [r7, #16]
 8016f12:	899b      	ldrh	r3, [r3, #12]
 8016f14:	461a      	mov	r2, r3
 8016f16:	6a3b      	ldr	r3, [r7, #32]
 8016f18:	fb02 f303 	mul.w	r3, r2, r3
 8016f1c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8016f1e:	e04b      	b.n	8016fb8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	69db      	ldr	r3, [r3, #28]
 8016f24:	697a      	ldr	r2, [r7, #20]
 8016f26:	429a      	cmp	r2, r3
 8016f28:	d016      	beq.n	8016f58 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	695a      	ldr	r2, [r3, #20]
 8016f2e:	68fb      	ldr	r3, [r7, #12]
 8016f30:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8016f32:	429a      	cmp	r2, r3
 8016f34:	d210      	bcs.n	8016f58 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8016f36:	693b      	ldr	r3, [r7, #16]
 8016f38:	7858      	ldrb	r0, [r3, #1]
 8016f3a:	68fb      	ldr	r3, [r7, #12]
 8016f3c:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016f40:	2301      	movs	r3, #1
 8016f42:	697a      	ldr	r2, [r7, #20]
 8016f44:	f7fe f8ae 	bl	80150a4 <disk_read>
 8016f48:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8016f4a:	2b00      	cmp	r3, #0
 8016f4c:	d004      	beq.n	8016f58 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8016f4e:	68fb      	ldr	r3, [r7, #12]
 8016f50:	2201      	movs	r2, #1
 8016f52:	745a      	strb	r2, [r3, #17]
 8016f54:	2301      	movs	r3, #1
 8016f56:	e05a      	b.n	801700e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	697a      	ldr	r2, [r7, #20]
 8016f5c:	61da      	str	r2, [r3, #28]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8016f5e:	693b      	ldr	r3, [r7, #16]
 8016f60:	899b      	ldrh	r3, [r3, #12]
 8016f62:	4618      	mov	r0, r3
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	695b      	ldr	r3, [r3, #20]
 8016f68:	693a      	ldr	r2, [r7, #16]
 8016f6a:	8992      	ldrh	r2, [r2, #12]
 8016f6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8016f70:	fb01 f202 	mul.w	r2, r1, r2
 8016f74:	1a9b      	subs	r3, r3, r2
 8016f76:	1ac3      	subs	r3, r0, r3
 8016f78:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8016f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f7c:	687b      	ldr	r3, [r7, #4]
 8016f7e:	429a      	cmp	r2, r3
 8016f80:	d901      	bls.n	8016f86 <f_write+0x298>
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	695b      	ldr	r3, [r3, #20]
 8016f90:	693a      	ldr	r2, [r7, #16]
 8016f92:	8992      	ldrh	r2, [r2, #12]
 8016f94:	fbb3 f0f2 	udiv	r0, r3, r2
 8016f98:	fb00 f202 	mul.w	r2, r0, r2
 8016f9c:	1a9b      	subs	r3, r3, r2
 8016f9e:	440b      	add	r3, r1
 8016fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fa2:	69f9      	ldr	r1, [r7, #28]
 8016fa4:	4618      	mov	r0, r3
 8016fa6:	f7fe f95d 	bl	8015264 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	7c1b      	ldrb	r3, [r3, #16]
 8016fae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016fb2:	b2da      	uxtb	r2, r3
 8016fb4:	68fb      	ldr	r3, [r7, #12]
 8016fb6:	741a      	strb	r2, [r3, #16]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8016fb8:	69fa      	ldr	r2, [r7, #28]
 8016fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fbc:	4413      	add	r3, r2
 8016fbe:	61fb      	str	r3, [r7, #28]
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	695a      	ldr	r2, [r3, #20]
 8016fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc6:	441a      	add	r2, r3
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	615a      	str	r2, [r3, #20]
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	68da      	ldr	r2, [r3, #12]
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	695b      	ldr	r3, [r3, #20]
 8016fd4:	429a      	cmp	r2, r3
 8016fd6:	bf38      	it	cc
 8016fd8:	461a      	movcc	r2, r3
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	60da      	str	r2, [r3, #12]
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	681a      	ldr	r2, [r3, #0]
 8016fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe4:	441a      	add	r2, r3
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	601a      	str	r2, [r3, #0]
 8016fea:	687a      	ldr	r2, [r7, #4]
 8016fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fee:	1ad3      	subs	r3, r2, r3
 8016ff0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	f47f aeb5 	bne.w	8016d64 <f_write+0x76>
 8016ffa:	e000      	b.n	8016ffe <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8016ffc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	7c1b      	ldrb	r3, [r3, #16]
 8017002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017006:	b2da      	uxtb	r2, r3
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	741a      	strb	r2, [r3, #16]

	LEAVE_FF(fs, FR_OK);
 801700c:	2300      	movs	r3, #0
}
 801700e:	4618      	mov	r0, r3
 8017010:	3730      	adds	r7, #48	; 0x30
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}

08017016 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8017016:	b580      	push	{r7, lr}
 8017018:	b086      	sub	sp, #24
 801701a:	af00      	add	r7, sp, #0
 801701c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	f107 0208 	add.w	r2, r7, #8
 8017024:	4611      	mov	r1, r2
 8017026:	4618      	mov	r0, r3
 8017028:	f7ff fc4e 	bl	80168c8 <validate>
 801702c:	4603      	mov	r3, r0
 801702e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017030:	7dfb      	ldrb	r3, [r7, #23]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d168      	bne.n	8017108 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	7c1b      	ldrb	r3, [r3, #16]
 801703a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801703e:	2b00      	cmp	r3, #0
 8017040:	d062      	beq.n	8017108 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	7c1b      	ldrb	r3, [r3, #16]
 8017046:	b25b      	sxtb	r3, r3
 8017048:	2b00      	cmp	r3, #0
 801704a:	da15      	bge.n	8017078 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801704c:	68bb      	ldr	r3, [r7, #8]
 801704e:	7858      	ldrb	r0, [r3, #1]
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	69da      	ldr	r2, [r3, #28]
 801705a:	2301      	movs	r3, #1
 801705c:	f7fe f842 	bl	80150e4 <disk_write>
 8017060:	4603      	mov	r3, r0
 8017062:	2b00      	cmp	r3, #0
 8017064:	d001      	beq.n	801706a <f_sync+0x54>
 8017066:	2301      	movs	r3, #1
 8017068:	e04f      	b.n	801710a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	7c1b      	ldrb	r3, [r3, #16]
 801706e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017072:	b2da      	uxtb	r2, r3
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	741a      	strb	r2, [r3, #16]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8017078:	f7fa faa2 	bl	80115c0 <get_fattime>
 801707c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801707e:	68ba      	ldr	r2, [r7, #8]
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	6a1b      	ldr	r3, [r3, #32]
 8017084:	4619      	mov	r1, r3
 8017086:	4610      	mov	r0, r2
 8017088:	f7fe f9ae 	bl	80153e8 <move_window>
 801708c:	4603      	mov	r3, r0
 801708e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8017090:	7dfb      	ldrb	r3, [r7, #23]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d138      	bne.n	8017108 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8017096:	687b      	ldr	r3, [r7, #4]
 8017098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801709a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	330b      	adds	r3, #11
 80170a0:	781a      	ldrb	r2, [r3, #0]
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	330b      	adds	r3, #11
 80170a6:	f042 0220 	orr.w	r2, r2, #32
 80170aa:	b2d2      	uxtb	r2, r2
 80170ac:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	6818      	ldr	r0, [r3, #0]
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	689b      	ldr	r3, [r3, #8]
 80170b6:	461a      	mov	r2, r3
 80170b8:	68f9      	ldr	r1, [r7, #12]
 80170ba:	f7fe ff3c 	bl	8015f36 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	f103 021c 	add.w	r2, r3, #28
 80170c4:	687b      	ldr	r3, [r7, #4]
 80170c6:	68db      	ldr	r3, [r3, #12]
 80170c8:	4619      	mov	r1, r3
 80170ca:	4610      	mov	r0, r2
 80170cc:	f7fe f89e 	bl	801520c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	3316      	adds	r3, #22
 80170d4:	6939      	ldr	r1, [r7, #16]
 80170d6:	4618      	mov	r0, r3
 80170d8:	f7fe f898 	bl	801520c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	3312      	adds	r3, #18
 80170e0:	2100      	movs	r1, #0
 80170e2:	4618      	mov	r0, r3
 80170e4:	f7fe f877 	bl	80151d6 <st_word>
					fs->wflag = 1;
 80170e8:	68bb      	ldr	r3, [r7, #8]
 80170ea:	2201      	movs	r2, #1
 80170ec:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	4618      	mov	r0, r3
 80170f2:	f7fe f9a7 	bl	8015444 <sync_fs>
 80170f6:	4603      	mov	r3, r0
 80170f8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	7c1b      	ldrb	r3, [r3, #16]
 80170fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017102:	b2da      	uxtb	r2, r3
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	741a      	strb	r2, [r3, #16]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8017108:	7dfb      	ldrb	r3, [r7, #23]
}
 801710a:	4618      	mov	r0, r3
 801710c:	3718      	adds	r7, #24
 801710e:	46bd      	mov	sp, r7
 8017110:	bd80      	pop	{r7, pc}

08017112 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8017112:	b580      	push	{r7, lr}
 8017114:	b084      	sub	sp, #16
 8017116:	af00      	add	r7, sp, #0
 8017118:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801711a:	6878      	ldr	r0, [r7, #4]
 801711c:	f7ff ff7b 	bl	8017016 <f_sync>
 8017120:	4603      	mov	r3, r0
 8017122:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8017124:	7bfb      	ldrb	r3, [r7, #15]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d10e      	bne.n	8017148 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	f107 0208 	add.w	r2, r7, #8
 8017130:	4611      	mov	r1, r2
 8017132:	4618      	mov	r0, r3
 8017134:	f7ff fbc8 	bl	80168c8 <validate>
 8017138:	4603      	mov	r3, r0
 801713a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801713c:	7bfb      	ldrb	r3, [r7, #15]
 801713e:	2b00      	cmp	r3, #0
 8017140:	d102      	bne.n	8017148 <f_close+0x36>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	2200      	movs	r2, #0
 8017146:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8017148:	7bfb      	ldrb	r3, [r7, #15]
}
 801714a:	4618      	mov	r0, r3
 801714c:	3710      	adds	r7, #16
 801714e:	46bd      	mov	sp, r7
 8017150:	bd80      	pop	{r7, pc}

08017152 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8017152:	b580      	push	{r7, lr}
 8017154:	b084      	sub	sp, #16
 8017156:	af00      	add	r7, sp, #0
 8017158:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	f107 0208 	add.w	r2, r7, #8
 8017160:	4611      	mov	r1, r2
 8017162:	4618      	mov	r0, r3
 8017164:	f7ff fbb0 	bl	80168c8 <validate>
 8017168:	4603      	mov	r3, r0
 801716a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801716c:	7bfb      	ldrb	r3, [r7, #15]
 801716e:	2b00      	cmp	r3, #0
 8017170:	d102      	bne.n	8017178 <f_closedir+0x26>
			res = dec_lock(dp->obj.lockid);
		}
		if (res == FR_OK)
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	2200      	movs	r2, #0
 8017176:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8017178:	7bfb      	ldrb	r3, [r7, #15]
}
 801717a:	4618      	mov	r0, r3
 801717c:	3710      	adds	r7, #16
 801717e:	46bd      	mov	sp, r7
 8017180:	bd80      	pop	{r7, pc}
	...

08017184 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8017184:	b480      	push	{r7}
 8017186:	b087      	sub	sp, #28
 8017188:	af00      	add	r7, sp, #0
 801718a:	60f8      	str	r0, [r7, #12]
 801718c:	60b9      	str	r1, [r7, #8]
 801718e:	4613      	mov	r3, r2
 8017190:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8017192:	2301      	movs	r3, #1
 8017194:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8017196:	2300      	movs	r3, #0
 8017198:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801719a:	4b1f      	ldr	r3, [pc, #124]	; (8017218 <FATFS_LinkDriverEx+0x94>)
 801719c:	7a5b      	ldrb	r3, [r3, #9]
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d131      	bne.n	8017208 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80171a4:	4b1c      	ldr	r3, [pc, #112]	; (8017218 <FATFS_LinkDriverEx+0x94>)
 80171a6:	7a5b      	ldrb	r3, [r3, #9]
 80171a8:	b2db      	uxtb	r3, r3
 80171aa:	461a      	mov	r2, r3
 80171ac:	4b1a      	ldr	r3, [pc, #104]	; (8017218 <FATFS_LinkDriverEx+0x94>)
 80171ae:	2100      	movs	r1, #0
 80171b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80171b2:	4b19      	ldr	r3, [pc, #100]	; (8017218 <FATFS_LinkDriverEx+0x94>)
 80171b4:	7a5b      	ldrb	r3, [r3, #9]
 80171b6:	b2db      	uxtb	r3, r3
 80171b8:	4a17      	ldr	r2, [pc, #92]	; (8017218 <FATFS_LinkDriverEx+0x94>)
 80171ba:	009b      	lsls	r3, r3, #2
 80171bc:	4413      	add	r3, r2
 80171be:	68fa      	ldr	r2, [r7, #12]
 80171c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80171c2:	4b15      	ldr	r3, [pc, #84]	; (8017218 <FATFS_LinkDriverEx+0x94>)
 80171c4:	7a5b      	ldrb	r3, [r3, #9]
 80171c6:	b2db      	uxtb	r3, r3
 80171c8:	461a      	mov	r2, r3
 80171ca:	4b13      	ldr	r3, [pc, #76]	; (8017218 <FATFS_LinkDriverEx+0x94>)
 80171cc:	4413      	add	r3, r2
 80171ce:	79fa      	ldrb	r2, [r7, #7]
 80171d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80171d2:	4b11      	ldr	r3, [pc, #68]	; (8017218 <FATFS_LinkDriverEx+0x94>)
 80171d4:	7a5b      	ldrb	r3, [r3, #9]
 80171d6:	b2db      	uxtb	r3, r3
 80171d8:	1c5a      	adds	r2, r3, #1
 80171da:	b2d1      	uxtb	r1, r2
 80171dc:	4a0e      	ldr	r2, [pc, #56]	; (8017218 <FATFS_LinkDriverEx+0x94>)
 80171de:	7251      	strb	r1, [r2, #9]
 80171e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80171e2:	7dbb      	ldrb	r3, [r7, #22]
 80171e4:	3330      	adds	r3, #48	; 0x30
 80171e6:	b2da      	uxtb	r2, r3
 80171e8:	68bb      	ldr	r3, [r7, #8]
 80171ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80171ec:	68bb      	ldr	r3, [r7, #8]
 80171ee:	3301      	adds	r3, #1
 80171f0:	223a      	movs	r2, #58	; 0x3a
 80171f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80171f4:	68bb      	ldr	r3, [r7, #8]
 80171f6:	3302      	adds	r3, #2
 80171f8:	222f      	movs	r2, #47	; 0x2f
 80171fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80171fc:	68bb      	ldr	r3, [r7, #8]
 80171fe:	3303      	adds	r3, #3
 8017200:	2200      	movs	r2, #0
 8017202:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8017204:	2300      	movs	r3, #0
 8017206:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8017208:	7dfb      	ldrb	r3, [r7, #23]
}
 801720a:	4618      	mov	r0, r3
 801720c:	371c      	adds	r7, #28
 801720e:	46bd      	mov	sp, r7
 8017210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017214:	4770      	bx	lr
 8017216:	bf00      	nop
 8017218:	2000679c 	.word	0x2000679c

0801721c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801721c:	b580      	push	{r7, lr}
 801721e:	b082      	sub	sp, #8
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
 8017224:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8017226:	2200      	movs	r2, #0
 8017228:	6839      	ldr	r1, [r7, #0]
 801722a:	6878      	ldr	r0, [r7, #4]
 801722c:	f7ff ffaa 	bl	8017184 <FATFS_LinkDriverEx>
 8017230:	4603      	mov	r3, r0
}
 8017232:	4618      	mov	r0, r3
 8017234:	3708      	adds	r7, #8
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
	...

0801723c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801723c:	b580      	push	{r7, lr}
 801723e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017240:	2200      	movs	r2, #0
 8017242:	4912      	ldr	r1, [pc, #72]	; (801728c <MX_USB_DEVICE_Init+0x50>)
 8017244:	4812      	ldr	r0, [pc, #72]	; (8017290 <MX_USB_DEVICE_Init+0x54>)
 8017246:	f7fc fbec 	bl	8013a22 <USBD_Init>
 801724a:	4603      	mov	r3, r0
 801724c:	2b00      	cmp	r3, #0
 801724e:	d001      	beq.n	8017254 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017250:	f7ea fce4 	bl	8001c1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8017254:	490f      	ldr	r1, [pc, #60]	; (8017294 <MX_USB_DEVICE_Init+0x58>)
 8017256:	480e      	ldr	r0, [pc, #56]	; (8017290 <MX_USB_DEVICE_Init+0x54>)
 8017258:	f7fc fc13 	bl	8013a82 <USBD_RegisterClass>
 801725c:	4603      	mov	r3, r0
 801725e:	2b00      	cmp	r3, #0
 8017260:	d001      	beq.n	8017266 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017262:	f7ea fcdb 	bl	8001c1c <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8017266:	490c      	ldr	r1, [pc, #48]	; (8017298 <MX_USB_DEVICE_Init+0x5c>)
 8017268:	4809      	ldr	r0, [pc, #36]	; (8017290 <MX_USB_DEVICE_Init+0x54>)
 801726a:	f7fa febd 	bl	8011fe8 <USBD_MSC_RegisterStorage>
 801726e:	4603      	mov	r3, r0
 8017270:	2b00      	cmp	r3, #0
 8017272:	d001      	beq.n	8017278 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017274:	f7ea fcd2 	bl	8001c1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017278:	4805      	ldr	r0, [pc, #20]	; (8017290 <MX_USB_DEVICE_Init+0x54>)
 801727a:	f7fc fc38 	bl	8013aee <USBD_Start>
 801727e:	4603      	mov	r3, r0
 8017280:	2b00      	cmp	r3, #0
 8017282:	d001      	beq.n	8017288 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017284:	f7ea fcca 	bl	8001c1c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017288:	bf00      	nop
 801728a:	bd80      	pop	{r7, pc}
 801728c:	200000b4 	.word	0x200000b4
 8017290:	200067a8 	.word	0x200067a8
 8017294:	2000000c 	.word	0x2000000c
 8017298:	20000114 	.word	0x20000114

0801729c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801729c:	b480      	push	{r7}
 801729e:	b083      	sub	sp, #12
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	4603      	mov	r3, r0
 80172a4:	6039      	str	r1, [r7, #0]
 80172a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	2212      	movs	r2, #18
 80172ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80172ae:	4b03      	ldr	r3, [pc, #12]	; (80172bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80172b0:	4618      	mov	r0, r3
 80172b2:	370c      	adds	r7, #12
 80172b4:	46bd      	mov	sp, r7
 80172b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ba:	4770      	bx	lr
 80172bc:	200000d4 	.word	0x200000d4

080172c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172c0:	b480      	push	{r7}
 80172c2:	b083      	sub	sp, #12
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	4603      	mov	r3, r0
 80172c8:	6039      	str	r1, [r7, #0]
 80172ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80172cc:	683b      	ldr	r3, [r7, #0]
 80172ce:	2204      	movs	r2, #4
 80172d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80172d2:	4b03      	ldr	r3, [pc, #12]	; (80172e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80172d4:	4618      	mov	r0, r3
 80172d6:	370c      	adds	r7, #12
 80172d8:	46bd      	mov	sp, r7
 80172da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172de:	4770      	bx	lr
 80172e0:	200000f4 	.word	0x200000f4

080172e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b082      	sub	sp, #8
 80172e8:	af00      	add	r7, sp, #0
 80172ea:	4603      	mov	r3, r0
 80172ec:	6039      	str	r1, [r7, #0]
 80172ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80172f0:	79fb      	ldrb	r3, [r7, #7]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d105      	bne.n	8017302 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80172f6:	683a      	ldr	r2, [r7, #0]
 80172f8:	4907      	ldr	r1, [pc, #28]	; (8017318 <USBD_FS_ProductStrDescriptor+0x34>)
 80172fa:	4808      	ldr	r0, [pc, #32]	; (801731c <USBD_FS_ProductStrDescriptor+0x38>)
 80172fc:	f7fd fdce 	bl	8014e9c <USBD_GetString>
 8017300:	e004      	b.n	801730c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017302:	683a      	ldr	r2, [r7, #0]
 8017304:	4904      	ldr	r1, [pc, #16]	; (8017318 <USBD_FS_ProductStrDescriptor+0x34>)
 8017306:	4805      	ldr	r0, [pc, #20]	; (801731c <USBD_FS_ProductStrDescriptor+0x38>)
 8017308:	f7fd fdc8 	bl	8014e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 801730c:	4b02      	ldr	r3, [pc, #8]	; (8017318 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801730e:	4618      	mov	r0, r3
 8017310:	3708      	adds	r7, #8
 8017312:	46bd      	mov	sp, r7
 8017314:	bd80      	pop	{r7, pc}
 8017316:	bf00      	nop
 8017318:	20006a84 	.word	0x20006a84
 801731c:	080186c4 	.word	0x080186c4

08017320 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b082      	sub	sp, #8
 8017324:	af00      	add	r7, sp, #0
 8017326:	4603      	mov	r3, r0
 8017328:	6039      	str	r1, [r7, #0]
 801732a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801732c:	683a      	ldr	r2, [r7, #0]
 801732e:	4904      	ldr	r1, [pc, #16]	; (8017340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017330:	4804      	ldr	r0, [pc, #16]	; (8017344 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017332:	f7fd fdb3 	bl	8014e9c <USBD_GetString>
  return USBD_StrDesc;
 8017336:	4b02      	ldr	r3, [pc, #8]	; (8017340 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017338:	4618      	mov	r0, r3
 801733a:	3708      	adds	r7, #8
 801733c:	46bd      	mov	sp, r7
 801733e:	bd80      	pop	{r7, pc}
 8017340:	20006a84 	.word	0x20006a84
 8017344:	080186d4 	.word	0x080186d4

08017348 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017348:	b580      	push	{r7, lr}
 801734a:	b082      	sub	sp, #8
 801734c:	af00      	add	r7, sp, #0
 801734e:	4603      	mov	r3, r0
 8017350:	6039      	str	r1, [r7, #0]
 8017352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017354:	683b      	ldr	r3, [r7, #0]
 8017356:	221a      	movs	r2, #26
 8017358:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801735a:	f000 f855 	bl	8017408 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801735e:	4b02      	ldr	r3, [pc, #8]	; (8017368 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017360:	4618      	mov	r0, r3
 8017362:	3708      	adds	r7, #8
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}
 8017368:	200000f8 	.word	0x200000f8

0801736c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b082      	sub	sp, #8
 8017370:	af00      	add	r7, sp, #0
 8017372:	4603      	mov	r3, r0
 8017374:	6039      	str	r1, [r7, #0]
 8017376:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017378:	79fb      	ldrb	r3, [r7, #7]
 801737a:	2b00      	cmp	r3, #0
 801737c:	d105      	bne.n	801738a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801737e:	683a      	ldr	r2, [r7, #0]
 8017380:	4907      	ldr	r1, [pc, #28]	; (80173a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017382:	4808      	ldr	r0, [pc, #32]	; (80173a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017384:	f7fd fd8a 	bl	8014e9c <USBD_GetString>
 8017388:	e004      	b.n	8017394 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801738a:	683a      	ldr	r2, [r7, #0]
 801738c:	4904      	ldr	r1, [pc, #16]	; (80173a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801738e:	4805      	ldr	r0, [pc, #20]	; (80173a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017390:	f7fd fd84 	bl	8014e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017394:	4b02      	ldr	r3, [pc, #8]	; (80173a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017396:	4618      	mov	r0, r3
 8017398:	3708      	adds	r7, #8
 801739a:	46bd      	mov	sp, r7
 801739c:	bd80      	pop	{r7, pc}
 801739e:	bf00      	nop
 80173a0:	20006a84 	.word	0x20006a84
 80173a4:	080186e8 	.word	0x080186e8

080173a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b082      	sub	sp, #8
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	4603      	mov	r3, r0
 80173b0:	6039      	str	r1, [r7, #0]
 80173b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80173b4:	79fb      	ldrb	r3, [r7, #7]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d105      	bne.n	80173c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80173ba:	683a      	ldr	r2, [r7, #0]
 80173bc:	4907      	ldr	r1, [pc, #28]	; (80173dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80173be:	4808      	ldr	r0, [pc, #32]	; (80173e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80173c0:	f7fd fd6c 	bl	8014e9c <USBD_GetString>
 80173c4:	e004      	b.n	80173d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80173c6:	683a      	ldr	r2, [r7, #0]
 80173c8:	4904      	ldr	r1, [pc, #16]	; (80173dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80173ca:	4805      	ldr	r0, [pc, #20]	; (80173e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80173cc:	f7fd fd66 	bl	8014e9c <USBD_GetString>
  }
  return USBD_StrDesc;
 80173d0:	4b02      	ldr	r3, [pc, #8]	; (80173dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	3708      	adds	r7, #8
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bd80      	pop	{r7, pc}
 80173da:	bf00      	nop
 80173dc:	20006a84 	.word	0x20006a84
 80173e0:	080186f4 	.word	0x080186f4

080173e4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173e4:	b480      	push	{r7}
 80173e6:	b083      	sub	sp, #12
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	4603      	mov	r3, r0
 80173ec:	6039      	str	r1, [r7, #0]
 80173ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80173f0:	683b      	ldr	r3, [r7, #0]
 80173f2:	220c      	movs	r2, #12
 80173f4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80173f6:	4b03      	ldr	r3, [pc, #12]	; (8017404 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80173f8:	4618      	mov	r0, r3
 80173fa:	370c      	adds	r7, #12
 80173fc:	46bd      	mov	sp, r7
 80173fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017402:	4770      	bx	lr
 8017404:	200000e8 	.word	0x200000e8

08017408 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017408:	b580      	push	{r7, lr}
 801740a:	b084      	sub	sp, #16
 801740c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801740e:	4b0f      	ldr	r3, [pc, #60]	; (801744c <Get_SerialNum+0x44>)
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017414:	4b0e      	ldr	r3, [pc, #56]	; (8017450 <Get_SerialNum+0x48>)
 8017416:	681b      	ldr	r3, [r3, #0]
 8017418:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801741a:	4b0e      	ldr	r3, [pc, #56]	; (8017454 <Get_SerialNum+0x4c>)
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017420:	68fa      	ldr	r2, [r7, #12]
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	4413      	add	r3, r2
 8017426:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017428:	68fb      	ldr	r3, [r7, #12]
 801742a:	2b00      	cmp	r3, #0
 801742c:	d009      	beq.n	8017442 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801742e:	2208      	movs	r2, #8
 8017430:	4909      	ldr	r1, [pc, #36]	; (8017458 <Get_SerialNum+0x50>)
 8017432:	68f8      	ldr	r0, [r7, #12]
 8017434:	f000 f814 	bl	8017460 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017438:	2204      	movs	r2, #4
 801743a:	4908      	ldr	r1, [pc, #32]	; (801745c <Get_SerialNum+0x54>)
 801743c:	68b8      	ldr	r0, [r7, #8]
 801743e:	f000 f80f 	bl	8017460 <IntToUnicode>
  }
}
 8017442:	bf00      	nop
 8017444:	3710      	adds	r7, #16
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}
 801744a:	bf00      	nop
 801744c:	1fff7a10 	.word	0x1fff7a10
 8017450:	1fff7a14 	.word	0x1fff7a14
 8017454:	1fff7a18 	.word	0x1fff7a18
 8017458:	200000fa 	.word	0x200000fa
 801745c:	2000010a 	.word	0x2000010a

08017460 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017460:	b480      	push	{r7}
 8017462:	b087      	sub	sp, #28
 8017464:	af00      	add	r7, sp, #0
 8017466:	60f8      	str	r0, [r7, #12]
 8017468:	60b9      	str	r1, [r7, #8]
 801746a:	4613      	mov	r3, r2
 801746c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801746e:	2300      	movs	r3, #0
 8017470:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017472:	2300      	movs	r3, #0
 8017474:	75fb      	strb	r3, [r7, #23]
 8017476:	e027      	b.n	80174c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	0f1b      	lsrs	r3, r3, #28
 801747c:	2b09      	cmp	r3, #9
 801747e:	d80b      	bhi.n	8017498 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	0f1b      	lsrs	r3, r3, #28
 8017484:	b2da      	uxtb	r2, r3
 8017486:	7dfb      	ldrb	r3, [r7, #23]
 8017488:	005b      	lsls	r3, r3, #1
 801748a:	4619      	mov	r1, r3
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	440b      	add	r3, r1
 8017490:	3230      	adds	r2, #48	; 0x30
 8017492:	b2d2      	uxtb	r2, r2
 8017494:	701a      	strb	r2, [r3, #0]
 8017496:	e00a      	b.n	80174ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	0f1b      	lsrs	r3, r3, #28
 801749c:	b2da      	uxtb	r2, r3
 801749e:	7dfb      	ldrb	r3, [r7, #23]
 80174a0:	005b      	lsls	r3, r3, #1
 80174a2:	4619      	mov	r1, r3
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	440b      	add	r3, r1
 80174a8:	3237      	adds	r2, #55	; 0x37
 80174aa:	b2d2      	uxtb	r2, r2
 80174ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80174ae:	68fb      	ldr	r3, [r7, #12]
 80174b0:	011b      	lsls	r3, r3, #4
 80174b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80174b4:	7dfb      	ldrb	r3, [r7, #23]
 80174b6:	005b      	lsls	r3, r3, #1
 80174b8:	3301      	adds	r3, #1
 80174ba:	68ba      	ldr	r2, [r7, #8]
 80174bc:	4413      	add	r3, r2
 80174be:	2200      	movs	r2, #0
 80174c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80174c2:	7dfb      	ldrb	r3, [r7, #23]
 80174c4:	3301      	adds	r3, #1
 80174c6:	75fb      	strb	r3, [r7, #23]
 80174c8:	7dfa      	ldrb	r2, [r7, #23]
 80174ca:	79fb      	ldrb	r3, [r7, #7]
 80174cc:	429a      	cmp	r2, r3
 80174ce:	d3d3      	bcc.n	8017478 <IntToUnicode+0x18>
  }
}
 80174d0:	bf00      	nop
 80174d2:	bf00      	nop
 80174d4:	371c      	adds	r7, #28
 80174d6:	46bd      	mov	sp, r7
 80174d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174dc:	4770      	bx	lr

080174de <STORAGE_Init_FS>:
  * @brief  Initializes the storage unit (medium) over USB FS IP
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80174de:	b480      	push	{r7}
 80174e0:	b083      	sub	sp, #12
 80174e2:	af00      	add	r7, sp, #0
 80174e4:	4603      	mov	r3, r0
 80174e6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80174e8:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80174ea:	4618      	mov	r0, r3
 80174ec:	370c      	adds	r7, #12
 80174ee:	46bd      	mov	sp, r7
 80174f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f4:	4770      	bx	lr
	...

080174f8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: Number of total block number.
  * @param  block_size: Block size.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80174f8:	b580      	push	{r7, lr}
 80174fa:	b08c      	sub	sp, #48	; 0x30
 80174fc:	af00      	add	r7, sp, #0
 80174fe:	4603      	mov	r3, r0
 8017500:	60b9      	str	r1, [r7, #8]
 8017502:	607a      	str	r2, [r7, #4]
 8017504:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  HAL_SD_CardInfoTypeDef info;

  HAL_SD_GetCardInfo(&hsd, &info);
 8017506:	f107 0310 	add.w	r3, r7, #16
 801750a:	4619      	mov	r1, r3
 801750c:	4807      	ldr	r0, [pc, #28]	; (801752c <STORAGE_GetCapacity_FS+0x34>)
 801750e:	f7f6 fde3 	bl	800e0d8 <HAL_SD_GetCardInfo>

  *block_num =  info.LogBlockNbr - 1;
 8017512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017514:	1e5a      	subs	r2, r3, #1
 8017516:	68bb      	ldr	r3, [r7, #8]
 8017518:	601a      	str	r2, [r3, #0]
  *block_size = info.LogBlockSize;
 801751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801751c:	b29a      	uxth	r2, r3
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 8017522:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017524:	4618      	mov	r0, r3
 8017526:	3730      	adds	r7, #48	; 0x30
 8017528:	46bd      	mov	sp, r7
 801752a:	bd80      	pop	{r7, pc}
 801752c:	200003a0 	.word	0x200003a0

08017530 <STORAGE_IsReady_FS>:
  * @brief   Checks whether the medium is ready.
  * @param  lun:  Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8017530:	b480      	push	{r7}
 8017532:	b083      	sub	sp, #12
 8017534:	af00      	add	r7, sp, #0
 8017536:	4603      	mov	r3, r0
 8017538:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801753a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801753c:	4618      	mov	r0, r3
 801753e:	370c      	adds	r7, #12
 8017540:	46bd      	mov	sp, r7
 8017542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017546:	4770      	bx	lr

08017548 <STORAGE_IsWriteProtected_FS>:
  * @brief  Checks whether the medium is write protected.
  * @param  lun: Logical unit number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8017548:	b480      	push	{r7}
 801754a:	b083      	sub	sp, #12
 801754c:	af00      	add	r7, sp, #0
 801754e:	4603      	mov	r3, r0
 8017550:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8017552:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017554:	4618      	mov	r0, r3
 8017556:	370c      	adds	r7, #12
 8017558:	46bd      	mov	sp, r7
 801755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755e:	4770      	bx	lr

08017560 <STORAGE_Read_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8017560:	b580      	push	{r7, lr}
 8017562:	b086      	sub	sp, #24
 8017564:	af02      	add	r7, sp, #8
 8017566:	60b9      	str	r1, [r7, #8]
 8017568:	607a      	str	r2, [r7, #4]
 801756a:	461a      	mov	r2, r3
 801756c:	4603      	mov	r3, r0
 801756e:	73fb      	strb	r3, [r7, #15]
 8017570:	4613      	mov	r3, r2
 8017572:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  HAL_SD_ReadBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8017574:	89bb      	ldrh	r3, [r7, #12]
 8017576:	f04f 32ff 	mov.w	r2, #4294967295
 801757a:	9200      	str	r2, [sp, #0]
 801757c:	687a      	ldr	r2, [r7, #4]
 801757e:	68b9      	ldr	r1, [r7, #8]
 8017580:	4807      	ldr	r0, [pc, #28]	; (80175a0 <STORAGE_Read_FS+0x40>)
 8017582:	f7f5 fd5f 	bl	800d044 <HAL_SD_ReadBlocks>
//	HAL_SD_ReadBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 8017586:	bf00      	nop
 8017588:	4805      	ldr	r0, [pc, #20]	; (80175a0 <STORAGE_Read_FS+0x40>)
 801758a:	f7f6 fe6b 	bl	800e264 <HAL_SD_GetCardState>
 801758e:	4603      	mov	r3, r0
 8017590:	2b04      	cmp	r3, #4
 8017592:	d1f9      	bne.n	8017588 <STORAGE_Read_FS+0x28>

  return (USBD_OK);
 8017594:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017596:	4618      	mov	r0, r3
 8017598:	3710      	adds	r7, #16
 801759a:	46bd      	mov	sp, r7
 801759c:	bd80      	pop	{r7, pc}
 801759e:	bf00      	nop
 80175a0:	200003a0 	.word	0x200003a0

080175a4 <STORAGE_Write_FS>:
  * @param  blk_addr: Logical block address.
  * @param  blk_len: Blocks number.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80175a4:	b580      	push	{r7, lr}
 80175a6:	b086      	sub	sp, #24
 80175a8:	af02      	add	r7, sp, #8
 80175aa:	60b9      	str	r1, [r7, #8]
 80175ac:	607a      	str	r2, [r7, #4]
 80175ae:	461a      	mov	r2, r3
 80175b0:	4603      	mov	r3, r0
 80175b2:	73fb      	strb	r3, [r7, #15]
 80175b4:	4613      	mov	r3, r2
 80175b6:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  HAL_SD_WriteBlocks(&hsd, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 80175b8:	89bb      	ldrh	r3, [r7, #12]
 80175ba:	f04f 32ff 	mov.w	r2, #4294967295
 80175be:	9200      	str	r2, [sp, #0]
 80175c0:	687a      	ldr	r2, [r7, #4]
 80175c2:	68b9      	ldr	r1, [r7, #8]
 80175c4:	4807      	ldr	r0, [pc, #28]	; (80175e4 <STORAGE_Write_FS+0x40>)
 80175c6:	f7f5 ff1b 	bl	800d400 <HAL_SD_WriteBlocks>
//	HAL_SD_WriteBlocks_DMA(&hsd, buf, blk_addr, blk_len);

  /* Wait until SD card is ready to use for new operation */
  while (HAL_SD_GetCardState(&hsd) != HAL_SD_CARD_TRANSFER);
 80175ca:	bf00      	nop
 80175cc:	4805      	ldr	r0, [pc, #20]	; (80175e4 <STORAGE_Write_FS+0x40>)
 80175ce:	f7f6 fe49 	bl	800e264 <HAL_SD_GetCardState>
 80175d2:	4603      	mov	r3, r0
 80175d4:	2b04      	cmp	r3, #4
 80175d6:	d1f9      	bne.n	80175cc <STORAGE_Write_FS+0x28>

  return (USBD_OK);
 80175d8:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80175da:	4618      	mov	r0, r3
 80175dc:	3710      	adds	r7, #16
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}
 80175e2:	bf00      	nop
 80175e4:	200003a0 	.word	0x200003a0

080175e8 <STORAGE_GetMaxLun_FS>:
  * @brief  Returns the Max Supported LUNs.
  * @param  None
  * @retval Lun(s) number.
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80175e8:	b480      	push	{r7}
 80175ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80175ec:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80175ee:	4618      	mov	r0, r3
 80175f0:	46bd      	mov	sp, r7
 80175f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175f6:	4770      	bx	lr

080175f8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b08a      	sub	sp, #40	; 0x28
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017600:	f107 0314 	add.w	r3, r7, #20
 8017604:	2200      	movs	r2, #0
 8017606:	601a      	str	r2, [r3, #0]
 8017608:	605a      	str	r2, [r3, #4]
 801760a:	609a      	str	r2, [r3, #8]
 801760c:	60da      	str	r2, [r3, #12]
 801760e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017618:	d147      	bne.n	80176aa <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801761a:	2300      	movs	r3, #0
 801761c:	613b      	str	r3, [r7, #16]
 801761e:	4b25      	ldr	r3, [pc, #148]	; (80176b4 <HAL_PCD_MspInit+0xbc>)
 8017620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017622:	4a24      	ldr	r2, [pc, #144]	; (80176b4 <HAL_PCD_MspInit+0xbc>)
 8017624:	f043 0301 	orr.w	r3, r3, #1
 8017628:	6313      	str	r3, [r2, #48]	; 0x30
 801762a:	4b22      	ldr	r3, [pc, #136]	; (80176b4 <HAL_PCD_MspInit+0xbc>)
 801762c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801762e:	f003 0301 	and.w	r3, r3, #1
 8017632:	613b      	str	r3, [r7, #16]
 8017634:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8017636:	f44f 7300 	mov.w	r3, #512	; 0x200
 801763a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801763c:	2300      	movs	r3, #0
 801763e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017640:	2300      	movs	r3, #0
 8017642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017644:	f107 0314 	add.w	r3, r7, #20
 8017648:	4619      	mov	r1, r3
 801764a:	481b      	ldr	r0, [pc, #108]	; (80176b8 <HAL_PCD_MspInit+0xc0>)
 801764c:	f7f1 fb48 	bl	8008ce0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017650:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8017654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017656:	2302      	movs	r3, #2
 8017658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801765a:	2300      	movs	r3, #0
 801765c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801765e:	2303      	movs	r3, #3
 8017660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017662:	230a      	movs	r3, #10
 8017664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017666:	f107 0314 	add.w	r3, r7, #20
 801766a:	4619      	mov	r1, r3
 801766c:	4812      	ldr	r0, [pc, #72]	; (80176b8 <HAL_PCD_MspInit+0xc0>)
 801766e:	f7f1 fb37 	bl	8008ce0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017672:	4b10      	ldr	r3, [pc, #64]	; (80176b4 <HAL_PCD_MspInit+0xbc>)
 8017674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017676:	4a0f      	ldr	r2, [pc, #60]	; (80176b4 <HAL_PCD_MspInit+0xbc>)
 8017678:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801767c:	6353      	str	r3, [r2, #52]	; 0x34
 801767e:	2300      	movs	r3, #0
 8017680:	60fb      	str	r3, [r7, #12]
 8017682:	4b0c      	ldr	r3, [pc, #48]	; (80176b4 <HAL_PCD_MspInit+0xbc>)
 8017684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017686:	4a0b      	ldr	r2, [pc, #44]	; (80176b4 <HAL_PCD_MspInit+0xbc>)
 8017688:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801768c:	6453      	str	r3, [r2, #68]	; 0x44
 801768e:	4b09      	ldr	r3, [pc, #36]	; (80176b4 <HAL_PCD_MspInit+0xbc>)
 8017690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017692:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017696:	60fb      	str	r3, [r7, #12]
 8017698:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801769a:	2200      	movs	r2, #0
 801769c:	2100      	movs	r1, #0
 801769e:	2043      	movs	r0, #67	; 0x43
 80176a0:	f7f0 ff49 	bl	8008536 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80176a4:	2043      	movs	r0, #67	; 0x43
 80176a6:	f7f0 ff62 	bl	800856e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80176aa:	bf00      	nop
 80176ac:	3728      	adds	r7, #40	; 0x28
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}
 80176b2:	bf00      	nop
 80176b4:	40023800 	.word	0x40023800
 80176b8:	40020000 	.word	0x40020000

080176bc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176bc:	b580      	push	{r7, lr}
 80176be:	b082      	sub	sp, #8
 80176c0:	af00      	add	r7, sp, #0
 80176c2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80176d0:	4619      	mov	r1, r3
 80176d2:	4610      	mov	r0, r2
 80176d4:	f7fc fa58 	bl	8013b88 <USBD_LL_SetupStage>
}
 80176d8:	bf00      	nop
 80176da:	3708      	adds	r7, #8
 80176dc:	46bd      	mov	sp, r7
 80176de:	bd80      	pop	{r7, pc}

080176e0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176e0:	b580      	push	{r7, lr}
 80176e2:	b082      	sub	sp, #8
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
 80176e8:	460b      	mov	r3, r1
 80176ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80176f2:	78fa      	ldrb	r2, [r7, #3]
 80176f4:	6879      	ldr	r1, [r7, #4]
 80176f6:	4613      	mov	r3, r2
 80176f8:	00db      	lsls	r3, r3, #3
 80176fa:	4413      	add	r3, r2
 80176fc:	009b      	lsls	r3, r3, #2
 80176fe:	440b      	add	r3, r1
 8017700:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8017704:	681a      	ldr	r2, [r3, #0]
 8017706:	78fb      	ldrb	r3, [r7, #3]
 8017708:	4619      	mov	r1, r3
 801770a:	f7fc fa92 	bl	8013c32 <USBD_LL_DataOutStage>
}
 801770e:	bf00      	nop
 8017710:	3708      	adds	r7, #8
 8017712:	46bd      	mov	sp, r7
 8017714:	bd80      	pop	{r7, pc}

08017716 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017716:	b580      	push	{r7, lr}
 8017718:	b082      	sub	sp, #8
 801771a:	af00      	add	r7, sp, #0
 801771c:	6078      	str	r0, [r7, #4]
 801771e:	460b      	mov	r3, r1
 8017720:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017728:	78fa      	ldrb	r2, [r7, #3]
 801772a:	6879      	ldr	r1, [r7, #4]
 801772c:	4613      	mov	r3, r2
 801772e:	00db      	lsls	r3, r3, #3
 8017730:	4413      	add	r3, r2
 8017732:	009b      	lsls	r3, r3, #2
 8017734:	440b      	add	r3, r1
 8017736:	334c      	adds	r3, #76	; 0x4c
 8017738:	681a      	ldr	r2, [r3, #0]
 801773a:	78fb      	ldrb	r3, [r7, #3]
 801773c:	4619      	mov	r1, r3
 801773e:	f7fc fb2b 	bl	8013d98 <USBD_LL_DataInStage>
}
 8017742:	bf00      	nop
 8017744:	3708      	adds	r7, #8
 8017746:	46bd      	mov	sp, r7
 8017748:	bd80      	pop	{r7, pc}

0801774a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801774a:	b580      	push	{r7, lr}
 801774c:	b082      	sub	sp, #8
 801774e:	af00      	add	r7, sp, #0
 8017750:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017758:	4618      	mov	r0, r3
 801775a:	f7fc fc5f 	bl	801401c <USBD_LL_SOF>
}
 801775e:	bf00      	nop
 8017760:	3708      	adds	r7, #8
 8017762:	46bd      	mov	sp, r7
 8017764:	bd80      	pop	{r7, pc}

08017766 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017766:	b580      	push	{r7, lr}
 8017768:	b084      	sub	sp, #16
 801776a:	af00      	add	r7, sp, #0
 801776c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801776e:	2301      	movs	r3, #1
 8017770:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	68db      	ldr	r3, [r3, #12]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d102      	bne.n	8017780 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801777a:	2300      	movs	r3, #0
 801777c:	73fb      	strb	r3, [r7, #15]
 801777e:	e008      	b.n	8017792 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	68db      	ldr	r3, [r3, #12]
 8017784:	2b02      	cmp	r3, #2
 8017786:	d102      	bne.n	801778e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017788:	2301      	movs	r3, #1
 801778a:	73fb      	strb	r3, [r7, #15]
 801778c:	e001      	b.n	8017792 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801778e:	f7ea fa45 	bl	8001c1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017798:	7bfa      	ldrb	r2, [r7, #15]
 801779a:	4611      	mov	r1, r2
 801779c:	4618      	mov	r0, r3
 801779e:	f7fc fbff 	bl	8013fa0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80177a2:	687b      	ldr	r3, [r7, #4]
 80177a4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7fc fba7 	bl	8013efc <USBD_LL_Reset>
}
 80177ae:	bf00      	nop
 80177b0:	3710      	adds	r7, #16
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}
	...

080177b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80177c6:	4618      	mov	r0, r3
 80177c8:	f7fc fbfa 	bl	8013fc0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	687a      	ldr	r2, [r7, #4]
 80177d8:	6812      	ldr	r2, [r2, #0]
 80177da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80177de:	f043 0301 	orr.w	r3, r3, #1
 80177e2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	6a1b      	ldr	r3, [r3, #32]
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d005      	beq.n	80177f8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80177ec:	4b04      	ldr	r3, [pc, #16]	; (8017800 <HAL_PCD_SuspendCallback+0x48>)
 80177ee:	691b      	ldr	r3, [r3, #16]
 80177f0:	4a03      	ldr	r2, [pc, #12]	; (8017800 <HAL_PCD_SuspendCallback+0x48>)
 80177f2:	f043 0306 	orr.w	r3, r3, #6
 80177f6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80177f8:	bf00      	nop
 80177fa:	3708      	adds	r7, #8
 80177fc:	46bd      	mov	sp, r7
 80177fe:	bd80      	pop	{r7, pc}
 8017800:	e000ed00 	.word	0xe000ed00

08017804 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b082      	sub	sp, #8
 8017808:	af00      	add	r7, sp, #0
 801780a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017812:	4618      	mov	r0, r3
 8017814:	f7fc fbea 	bl	8013fec <USBD_LL_Resume>
}
 8017818:	bf00      	nop
 801781a:	3708      	adds	r7, #8
 801781c:	46bd      	mov	sp, r7
 801781e:	bd80      	pop	{r7, pc}

08017820 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017820:	b580      	push	{r7, lr}
 8017822:	b082      	sub	sp, #8
 8017824:	af00      	add	r7, sp, #0
 8017826:	6078      	str	r0, [r7, #4]
 8017828:	460b      	mov	r3, r1
 801782a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017832:	78fa      	ldrb	r2, [r7, #3]
 8017834:	4611      	mov	r1, r2
 8017836:	4618      	mov	r0, r3
 8017838:	f7fc fc42 	bl	80140c0 <USBD_LL_IsoOUTIncomplete>
}
 801783c:	bf00      	nop
 801783e:	3708      	adds	r7, #8
 8017840:	46bd      	mov	sp, r7
 8017842:	bd80      	pop	{r7, pc}

08017844 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b082      	sub	sp, #8
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
 801784c:	460b      	mov	r3, r1
 801784e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017856:	78fa      	ldrb	r2, [r7, #3]
 8017858:	4611      	mov	r1, r2
 801785a:	4618      	mov	r0, r3
 801785c:	f7fc fbfe 	bl	801405c <USBD_LL_IsoINIncomplete>
}
 8017860:	bf00      	nop
 8017862:	3708      	adds	r7, #8
 8017864:	46bd      	mov	sp, r7
 8017866:	bd80      	pop	{r7, pc}

08017868 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017868:	b580      	push	{r7, lr}
 801786a:	b082      	sub	sp, #8
 801786c:	af00      	add	r7, sp, #0
 801786e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017876:	4618      	mov	r0, r3
 8017878:	f7fc fc54 	bl	8014124 <USBD_LL_DevConnected>
}
 801787c:	bf00      	nop
 801787e:	3708      	adds	r7, #8
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}

08017884 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b082      	sub	sp, #8
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017892:	4618      	mov	r0, r3
 8017894:	f7fc fc51 	bl	801413a <USBD_LL_DevDisconnected>
}
 8017898:	bf00      	nop
 801789a:	3708      	adds	r7, #8
 801789c:	46bd      	mov	sp, r7
 801789e:	bd80      	pop	{r7, pc}

080178a0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80178a0:	b580      	push	{r7, lr}
 80178a2:	b082      	sub	sp, #8
 80178a4:	af00      	add	r7, sp, #0
 80178a6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	781b      	ldrb	r3, [r3, #0]
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d13c      	bne.n	801792a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80178b0:	4a20      	ldr	r2, [pc, #128]	; (8017934 <USBD_LL_Init+0x94>)
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	4a1e      	ldr	r2, [pc, #120]	; (8017934 <USBD_LL_Init+0x94>)
 80178bc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80178c0:	4b1c      	ldr	r3, [pc, #112]	; (8017934 <USBD_LL_Init+0x94>)
 80178c2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80178c6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80178c8:	4b1a      	ldr	r3, [pc, #104]	; (8017934 <USBD_LL_Init+0x94>)
 80178ca:	2206      	movs	r2, #6
 80178cc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80178ce:	4b19      	ldr	r3, [pc, #100]	; (8017934 <USBD_LL_Init+0x94>)
 80178d0:	2202      	movs	r2, #2
 80178d2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80178d4:	4b17      	ldr	r3, [pc, #92]	; (8017934 <USBD_LL_Init+0x94>)
 80178d6:	2200      	movs	r2, #0
 80178d8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80178da:	4b16      	ldr	r3, [pc, #88]	; (8017934 <USBD_LL_Init+0x94>)
 80178dc:	2202      	movs	r2, #2
 80178de:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80178e0:	4b14      	ldr	r3, [pc, #80]	; (8017934 <USBD_LL_Init+0x94>)
 80178e2:	2200      	movs	r2, #0
 80178e4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80178e6:	4b13      	ldr	r3, [pc, #76]	; (8017934 <USBD_LL_Init+0x94>)
 80178e8:	2200      	movs	r2, #0
 80178ea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80178ec:	4b11      	ldr	r3, [pc, #68]	; (8017934 <USBD_LL_Init+0x94>)
 80178ee:	2200      	movs	r2, #0
 80178f0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80178f2:	4b10      	ldr	r3, [pc, #64]	; (8017934 <USBD_LL_Init+0x94>)
 80178f4:	2201      	movs	r2, #1
 80178f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80178f8:	4b0e      	ldr	r3, [pc, #56]	; (8017934 <USBD_LL_Init+0x94>)
 80178fa:	2200      	movs	r2, #0
 80178fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80178fe:	480d      	ldr	r0, [pc, #52]	; (8017934 <USBD_LL_Init+0x94>)
 8017900:	f7f2 fb7b 	bl	8009ffa <HAL_PCD_Init>
 8017904:	4603      	mov	r3, r0
 8017906:	2b00      	cmp	r3, #0
 8017908:	d001      	beq.n	801790e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801790a:	f7ea f987 	bl	8001c1c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801790e:	2180      	movs	r1, #128	; 0x80
 8017910:	4808      	ldr	r0, [pc, #32]	; (8017934 <USBD_LL_Init+0x94>)
 8017912:	f7f3 fe34 	bl	800b57e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017916:	2240      	movs	r2, #64	; 0x40
 8017918:	2100      	movs	r1, #0
 801791a:	4806      	ldr	r0, [pc, #24]	; (8017934 <USBD_LL_Init+0x94>)
 801791c:	f7f3 fde8 	bl	800b4f0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017920:	2280      	movs	r2, #128	; 0x80
 8017922:	2101      	movs	r1, #1
 8017924:	4803      	ldr	r0, [pc, #12]	; (8017934 <USBD_LL_Init+0x94>)
 8017926:	f7f3 fde3 	bl	800b4f0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801792a:	2300      	movs	r3, #0
}
 801792c:	4618      	mov	r0, r3
 801792e:	3708      	adds	r7, #8
 8017930:	46bd      	mov	sp, r7
 8017932:	bd80      	pop	{r7, pc}
 8017934:	20006c84 	.word	0x20006c84

08017938 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	b084      	sub	sp, #16
 801793c:	af00      	add	r7, sp, #0
 801793e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017940:	2300      	movs	r3, #0
 8017942:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017944:	2300      	movs	r3, #0
 8017946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801794e:	4618      	mov	r0, r3
 8017950:	f7f2 fc77 	bl	800a242 <HAL_PCD_Start>
 8017954:	4603      	mov	r3, r0
 8017956:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017958:	7bfb      	ldrb	r3, [r7, #15]
 801795a:	4618      	mov	r0, r3
 801795c:	f000 f9b0 	bl	8017cc0 <USBD_Get_USB_Status>
 8017960:	4603      	mov	r3, r0
 8017962:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017964:	7bbb      	ldrb	r3, [r7, #14]
}
 8017966:	4618      	mov	r0, r3
 8017968:	3710      	adds	r7, #16
 801796a:	46bd      	mov	sp, r7
 801796c:	bd80      	pop	{r7, pc}

0801796e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801796e:	b580      	push	{r7, lr}
 8017970:	b084      	sub	sp, #16
 8017972:	af00      	add	r7, sp, #0
 8017974:	6078      	str	r0, [r7, #4]
 8017976:	4608      	mov	r0, r1
 8017978:	4611      	mov	r1, r2
 801797a:	461a      	mov	r2, r3
 801797c:	4603      	mov	r3, r0
 801797e:	70fb      	strb	r3, [r7, #3]
 8017980:	460b      	mov	r3, r1
 8017982:	70bb      	strb	r3, [r7, #2]
 8017984:	4613      	mov	r3, r2
 8017986:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017988:	2300      	movs	r3, #0
 801798a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801798c:	2300      	movs	r3, #0
 801798e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017990:	687b      	ldr	r3, [r7, #4]
 8017992:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017996:	78bb      	ldrb	r3, [r7, #2]
 8017998:	883a      	ldrh	r2, [r7, #0]
 801799a:	78f9      	ldrb	r1, [r7, #3]
 801799c:	f7f3 f975 	bl	800ac8a <HAL_PCD_EP_Open>
 80179a0:	4603      	mov	r3, r0
 80179a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80179a4:	7bfb      	ldrb	r3, [r7, #15]
 80179a6:	4618      	mov	r0, r3
 80179a8:	f000 f98a 	bl	8017cc0 <USBD_Get_USB_Status>
 80179ac:	4603      	mov	r3, r0
 80179ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80179b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80179b2:	4618      	mov	r0, r3
 80179b4:	3710      	adds	r7, #16
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}

080179ba <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80179ba:	b580      	push	{r7, lr}
 80179bc:	b084      	sub	sp, #16
 80179be:	af00      	add	r7, sp, #0
 80179c0:	6078      	str	r0, [r7, #4]
 80179c2:	460b      	mov	r3, r1
 80179c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179c6:	2300      	movs	r3, #0
 80179c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179ca:	2300      	movs	r3, #0
 80179cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80179d4:	78fa      	ldrb	r2, [r7, #3]
 80179d6:	4611      	mov	r1, r2
 80179d8:	4618      	mov	r0, r3
 80179da:	f7f3 f9be 	bl	800ad5a <HAL_PCD_EP_Close>
 80179de:	4603      	mov	r3, r0
 80179e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80179e2:	7bfb      	ldrb	r3, [r7, #15]
 80179e4:	4618      	mov	r0, r3
 80179e6:	f000 f96b 	bl	8017cc0 <USBD_Get_USB_Status>
 80179ea:	4603      	mov	r3, r0
 80179ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80179ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80179f0:	4618      	mov	r0, r3
 80179f2:	3710      	adds	r7, #16
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}

080179f8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b084      	sub	sp, #16
 80179fc:	af00      	add	r7, sp, #0
 80179fe:	6078      	str	r0, [r7, #4]
 8017a00:	460b      	mov	r3, r1
 8017a02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a04:	2300      	movs	r3, #0
 8017a06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a08:	2300      	movs	r3, #0
 8017a0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017a12:	78fa      	ldrb	r2, [r7, #3]
 8017a14:	4611      	mov	r1, r2
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7f3 fb81 	bl	800b11e <HAL_PCD_EP_Flush>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a20:	7bfb      	ldrb	r3, [r7, #15]
 8017a22:	4618      	mov	r0, r3
 8017a24:	f000 f94c 	bl	8017cc0 <USBD_Get_USB_Status>
 8017a28:	4603      	mov	r3, r0
 8017a2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a2e:	4618      	mov	r0, r3
 8017a30:	3710      	adds	r7, #16
 8017a32:	46bd      	mov	sp, r7
 8017a34:	bd80      	pop	{r7, pc}

08017a36 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a36:	b580      	push	{r7, lr}
 8017a38:	b084      	sub	sp, #16
 8017a3a:	af00      	add	r7, sp, #0
 8017a3c:	6078      	str	r0, [r7, #4]
 8017a3e:	460b      	mov	r3, r1
 8017a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a42:	2300      	movs	r3, #0
 8017a44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a46:	2300      	movs	r3, #0
 8017a48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017a50:	78fa      	ldrb	r2, [r7, #3]
 8017a52:	4611      	mov	r1, r2
 8017a54:	4618      	mov	r0, r3
 8017a56:	f7f3 fa77 	bl	800af48 <HAL_PCD_EP_SetStall>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a5e:	7bfb      	ldrb	r3, [r7, #15]
 8017a60:	4618      	mov	r0, r3
 8017a62:	f000 f92d 	bl	8017cc0 <USBD_Get_USB_Status>
 8017a66:	4603      	mov	r3, r0
 8017a68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	3710      	adds	r7, #16
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}

08017a74 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b084      	sub	sp, #16
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
 8017a7c:	460b      	mov	r3, r1
 8017a7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a80:	2300      	movs	r3, #0
 8017a82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a84:	2300      	movs	r3, #0
 8017a86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017a8e:	78fa      	ldrb	r2, [r7, #3]
 8017a90:	4611      	mov	r1, r2
 8017a92:	4618      	mov	r0, r3
 8017a94:	f7f3 fabc 	bl	800b010 <HAL_PCD_EP_ClrStall>
 8017a98:	4603      	mov	r3, r0
 8017a9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a9c:	7bfb      	ldrb	r3, [r7, #15]
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f000 f90e 	bl	8017cc0 <USBD_Get_USB_Status>
 8017aa4:	4603      	mov	r3, r0
 8017aa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017aa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8017aaa:	4618      	mov	r0, r3
 8017aac:	3710      	adds	r7, #16
 8017aae:	46bd      	mov	sp, r7
 8017ab0:	bd80      	pop	{r7, pc}

08017ab2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ab2:	b480      	push	{r7}
 8017ab4:	b085      	sub	sp, #20
 8017ab6:	af00      	add	r7, sp, #0
 8017ab8:	6078      	str	r0, [r7, #4]
 8017aba:	460b      	mov	r3, r1
 8017abc:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017ac4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017ac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017aca:	2b00      	cmp	r3, #0
 8017acc:	da0b      	bge.n	8017ae6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017ace:	78fb      	ldrb	r3, [r7, #3]
 8017ad0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017ad4:	68f9      	ldr	r1, [r7, #12]
 8017ad6:	4613      	mov	r3, r2
 8017ad8:	00db      	lsls	r3, r3, #3
 8017ada:	4413      	add	r3, r2
 8017adc:	009b      	lsls	r3, r3, #2
 8017ade:	440b      	add	r3, r1
 8017ae0:	333e      	adds	r3, #62	; 0x3e
 8017ae2:	781b      	ldrb	r3, [r3, #0]
 8017ae4:	e00b      	b.n	8017afe <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017ae6:	78fb      	ldrb	r3, [r7, #3]
 8017ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017aec:	68f9      	ldr	r1, [r7, #12]
 8017aee:	4613      	mov	r3, r2
 8017af0:	00db      	lsls	r3, r3, #3
 8017af2:	4413      	add	r3, r2
 8017af4:	009b      	lsls	r3, r3, #2
 8017af6:	440b      	add	r3, r1
 8017af8:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8017afc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017afe:	4618      	mov	r0, r3
 8017b00:	3714      	adds	r7, #20
 8017b02:	46bd      	mov	sp, r7
 8017b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b08:	4770      	bx	lr

08017b0a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017b0a:	b580      	push	{r7, lr}
 8017b0c:	b084      	sub	sp, #16
 8017b0e:	af00      	add	r7, sp, #0
 8017b10:	6078      	str	r0, [r7, #4]
 8017b12:	460b      	mov	r3, r1
 8017b14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b16:	2300      	movs	r3, #0
 8017b18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b1a:	2300      	movs	r3, #0
 8017b1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017b24:	78fa      	ldrb	r2, [r7, #3]
 8017b26:	4611      	mov	r1, r2
 8017b28:	4618      	mov	r0, r3
 8017b2a:	f7f3 f889 	bl	800ac40 <HAL_PCD_SetAddress>
 8017b2e:	4603      	mov	r3, r0
 8017b30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b32:	7bfb      	ldrb	r3, [r7, #15]
 8017b34:	4618      	mov	r0, r3
 8017b36:	f000 f8c3 	bl	8017cc0 <USBD_Get_USB_Status>
 8017b3a:	4603      	mov	r3, r0
 8017b3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017b3e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017b40:	4618      	mov	r0, r3
 8017b42:	3710      	adds	r7, #16
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}

08017b48 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b086      	sub	sp, #24
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	607a      	str	r2, [r7, #4]
 8017b52:	603b      	str	r3, [r7, #0]
 8017b54:	460b      	mov	r3, r1
 8017b56:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b58:	2300      	movs	r3, #0
 8017b5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017b66:	7af9      	ldrb	r1, [r7, #11]
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	687a      	ldr	r2, [r7, #4]
 8017b6c:	f7f3 f9a2 	bl	800aeb4 <HAL_PCD_EP_Transmit>
 8017b70:	4603      	mov	r3, r0
 8017b72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017b74:	7dfb      	ldrb	r3, [r7, #23]
 8017b76:	4618      	mov	r0, r3
 8017b78:	f000 f8a2 	bl	8017cc0 <USBD_Get_USB_Status>
 8017b7c:	4603      	mov	r3, r0
 8017b7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017b80:	7dbb      	ldrb	r3, [r7, #22]
}
 8017b82:	4618      	mov	r0, r3
 8017b84:	3718      	adds	r7, #24
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}

08017b8a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017b8a:	b580      	push	{r7, lr}
 8017b8c:	b086      	sub	sp, #24
 8017b8e:	af00      	add	r7, sp, #0
 8017b90:	60f8      	str	r0, [r7, #12]
 8017b92:	607a      	str	r2, [r7, #4]
 8017b94:	603b      	str	r3, [r7, #0]
 8017b96:	460b      	mov	r3, r1
 8017b98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b9e:	2300      	movs	r3, #0
 8017ba0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017ba2:	68fb      	ldr	r3, [r7, #12]
 8017ba4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017ba8:	7af9      	ldrb	r1, [r7, #11]
 8017baa:	683b      	ldr	r3, [r7, #0]
 8017bac:	687a      	ldr	r2, [r7, #4]
 8017bae:	f7f3 f91e 	bl	800adee <HAL_PCD_EP_Receive>
 8017bb2:	4603      	mov	r3, r0
 8017bb4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017bb6:	7dfb      	ldrb	r3, [r7, #23]
 8017bb8:	4618      	mov	r0, r3
 8017bba:	f000 f881 	bl	8017cc0 <USBD_Get_USB_Status>
 8017bbe:	4603      	mov	r3, r0
 8017bc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017bc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8017bc4:	4618      	mov	r0, r3
 8017bc6:	3718      	adds	r7, #24
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	bd80      	pop	{r7, pc}

08017bcc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017bcc:	b580      	push	{r7, lr}
 8017bce:	b082      	sub	sp, #8
 8017bd0:	af00      	add	r7, sp, #0
 8017bd2:	6078      	str	r0, [r7, #4]
 8017bd4:	460b      	mov	r3, r1
 8017bd6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017bde:	78fa      	ldrb	r2, [r7, #3]
 8017be0:	4611      	mov	r1, r2
 8017be2:	4618      	mov	r0, r3
 8017be4:	f7f3 f94e 	bl	800ae84 <HAL_PCD_EP_GetRxCount>
 8017be8:	4603      	mov	r3, r0
}
 8017bea:	4618      	mov	r0, r3
 8017bec:	3708      	adds	r7, #8
 8017bee:	46bd      	mov	sp, r7
 8017bf0:	bd80      	pop	{r7, pc}
	...

08017bf4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b082      	sub	sp, #8
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	6078      	str	r0, [r7, #4]
 8017bfc:	460b      	mov	r3, r1
 8017bfe:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8017c00:	78fb      	ldrb	r3, [r7, #3]
 8017c02:	2b00      	cmp	r3, #0
 8017c04:	d002      	beq.n	8017c0c <HAL_PCDEx_LPM_Callback+0x18>
 8017c06:	2b01      	cmp	r3, #1
 8017c08:	d01f      	beq.n	8017c4a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8017c0a:	e03b      	b.n	8017c84 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	6a1b      	ldr	r3, [r3, #32]
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d007      	beq.n	8017c24 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8017c14:	f7e9 fc6c 	bl	80014f0 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c18:	4b1c      	ldr	r3, [pc, #112]	; (8017c8c <HAL_PCDEx_LPM_Callback+0x98>)
 8017c1a:	691b      	ldr	r3, [r3, #16]
 8017c1c:	4a1b      	ldr	r2, [pc, #108]	; (8017c8c <HAL_PCDEx_LPM_Callback+0x98>)
 8017c1e:	f023 0306 	bic.w	r3, r3, #6
 8017c22:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	681b      	ldr	r3, [r3, #0]
 8017c28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017c2c:	681b      	ldr	r3, [r3, #0]
 8017c2e:	687a      	ldr	r2, [r7, #4]
 8017c30:	6812      	ldr	r2, [r2, #0]
 8017c32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017c36:	f023 0301 	bic.w	r3, r3, #1
 8017c3a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017c42:	4618      	mov	r0, r3
 8017c44:	f7fc f9d2 	bl	8013fec <USBD_LL_Resume>
    break;
 8017c48:	e01c      	b.n	8017c84 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	687a      	ldr	r2, [r7, #4]
 8017c56:	6812      	ldr	r2, [r2, #0]
 8017c58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017c5c:	f043 0301 	orr.w	r3, r3, #1
 8017c60:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8017c62:	687b      	ldr	r3, [r7, #4]
 8017c64:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7fc f9a9 	bl	8013fc0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	6a1b      	ldr	r3, [r3, #32]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d005      	beq.n	8017c82 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017c76:	4b05      	ldr	r3, [pc, #20]	; (8017c8c <HAL_PCDEx_LPM_Callback+0x98>)
 8017c78:	691b      	ldr	r3, [r3, #16]
 8017c7a:	4a04      	ldr	r2, [pc, #16]	; (8017c8c <HAL_PCDEx_LPM_Callback+0x98>)
 8017c7c:	f043 0306 	orr.w	r3, r3, #6
 8017c80:	6113      	str	r3, [r2, #16]
    break;
 8017c82:	bf00      	nop
}
 8017c84:	bf00      	nop
 8017c86:	3708      	adds	r7, #8
 8017c88:	46bd      	mov	sp, r7
 8017c8a:	bd80      	pop	{r7, pc}
 8017c8c:	e000ed00 	.word	0xe000ed00

08017c90 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017c90:	b480      	push	{r7}
 8017c92:	b083      	sub	sp, #12
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017c98:	4b03      	ldr	r3, [pc, #12]	; (8017ca8 <USBD_static_malloc+0x18>)
}
 8017c9a:	4618      	mov	r0, r3
 8017c9c:	370c      	adds	r7, #12
 8017c9e:	46bd      	mov	sp, r7
 8017ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ca4:	4770      	bx	lr
 8017ca6:	bf00      	nop
 8017ca8:	20007190 	.word	0x20007190

08017cac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017cac:	b480      	push	{r7}
 8017cae:	b083      	sub	sp, #12
 8017cb0:	af00      	add	r7, sp, #0
 8017cb2:	6078      	str	r0, [r7, #4]

}
 8017cb4:	bf00      	nop
 8017cb6:	370c      	adds	r7, #12
 8017cb8:	46bd      	mov	sp, r7
 8017cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cbe:	4770      	bx	lr

08017cc0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017cc0:	b480      	push	{r7}
 8017cc2:	b085      	sub	sp, #20
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017cca:	2300      	movs	r3, #0
 8017ccc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017cce:	79fb      	ldrb	r3, [r7, #7]
 8017cd0:	2b03      	cmp	r3, #3
 8017cd2:	d817      	bhi.n	8017d04 <USBD_Get_USB_Status+0x44>
 8017cd4:	a201      	add	r2, pc, #4	; (adr r2, 8017cdc <USBD_Get_USB_Status+0x1c>)
 8017cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017cda:	bf00      	nop
 8017cdc:	08017ced 	.word	0x08017ced
 8017ce0:	08017cf3 	.word	0x08017cf3
 8017ce4:	08017cf9 	.word	0x08017cf9
 8017ce8:	08017cff 	.word	0x08017cff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017cec:	2300      	movs	r3, #0
 8017cee:	73fb      	strb	r3, [r7, #15]
    break;
 8017cf0:	e00b      	b.n	8017d0a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017cf2:	2303      	movs	r3, #3
 8017cf4:	73fb      	strb	r3, [r7, #15]
    break;
 8017cf6:	e008      	b.n	8017d0a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017cf8:	2301      	movs	r3, #1
 8017cfa:	73fb      	strb	r3, [r7, #15]
    break;
 8017cfc:	e005      	b.n	8017d0a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017cfe:	2303      	movs	r3, #3
 8017d00:	73fb      	strb	r3, [r7, #15]
    break;
 8017d02:	e002      	b.n	8017d0a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017d04:	2303      	movs	r3, #3
 8017d06:	73fb      	strb	r3, [r7, #15]
    break;
 8017d08:	bf00      	nop
  }
  return usb_status;
 8017d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	3714      	adds	r7, #20
 8017d10:	46bd      	mov	sp, r7
 8017d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d16:	4770      	bx	lr

08017d18 <__errno>:
 8017d18:	4b01      	ldr	r3, [pc, #4]	; (8017d20 <__errno+0x8>)
 8017d1a:	6818      	ldr	r0, [r3, #0]
 8017d1c:	4770      	bx	lr
 8017d1e:	bf00      	nop
 8017d20:	20000134 	.word	0x20000134

08017d24 <__libc_init_array>:
 8017d24:	b570      	push	{r4, r5, r6, lr}
 8017d26:	4d0d      	ldr	r5, [pc, #52]	; (8017d5c <__libc_init_array+0x38>)
 8017d28:	4c0d      	ldr	r4, [pc, #52]	; (8017d60 <__libc_init_array+0x3c>)
 8017d2a:	1b64      	subs	r4, r4, r5
 8017d2c:	10a4      	asrs	r4, r4, #2
 8017d2e:	2600      	movs	r6, #0
 8017d30:	42a6      	cmp	r6, r4
 8017d32:	d109      	bne.n	8017d48 <__libc_init_array+0x24>
 8017d34:	4d0b      	ldr	r5, [pc, #44]	; (8017d64 <__libc_init_array+0x40>)
 8017d36:	4c0c      	ldr	r4, [pc, #48]	; (8017d68 <__libc_init_array+0x44>)
 8017d38:	f000 fc8e 	bl	8018658 <_init>
 8017d3c:	1b64      	subs	r4, r4, r5
 8017d3e:	10a4      	asrs	r4, r4, #2
 8017d40:	2600      	movs	r6, #0
 8017d42:	42a6      	cmp	r6, r4
 8017d44:	d105      	bne.n	8017d52 <__libc_init_array+0x2e>
 8017d46:	bd70      	pop	{r4, r5, r6, pc}
 8017d48:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d4c:	4798      	blx	r3
 8017d4e:	3601      	adds	r6, #1
 8017d50:	e7ee      	b.n	8017d30 <__libc_init_array+0xc>
 8017d52:	f855 3b04 	ldr.w	r3, [r5], #4
 8017d56:	4798      	blx	r3
 8017d58:	3601      	adds	r6, #1
 8017d5a:	e7f2      	b.n	8017d42 <__libc_init_array+0x1e>
 8017d5c:	08018818 	.word	0x08018818
 8017d60:	08018818 	.word	0x08018818
 8017d64:	08018818 	.word	0x08018818
 8017d68:	0801881c 	.word	0x0801881c

08017d6c <memset>:
 8017d6c:	4402      	add	r2, r0
 8017d6e:	4603      	mov	r3, r0
 8017d70:	4293      	cmp	r3, r2
 8017d72:	d100      	bne.n	8017d76 <memset+0xa>
 8017d74:	4770      	bx	lr
 8017d76:	f803 1b01 	strb.w	r1, [r3], #1
 8017d7a:	e7f9      	b.n	8017d70 <memset+0x4>

08017d7c <siprintf>:
 8017d7c:	b40e      	push	{r1, r2, r3}
 8017d7e:	b500      	push	{lr}
 8017d80:	b09c      	sub	sp, #112	; 0x70
 8017d82:	ab1d      	add	r3, sp, #116	; 0x74
 8017d84:	9002      	str	r0, [sp, #8]
 8017d86:	9006      	str	r0, [sp, #24]
 8017d88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017d8c:	4809      	ldr	r0, [pc, #36]	; (8017db4 <siprintf+0x38>)
 8017d8e:	9107      	str	r1, [sp, #28]
 8017d90:	9104      	str	r1, [sp, #16]
 8017d92:	4909      	ldr	r1, [pc, #36]	; (8017db8 <siprintf+0x3c>)
 8017d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d98:	9105      	str	r1, [sp, #20]
 8017d9a:	6800      	ldr	r0, [r0, #0]
 8017d9c:	9301      	str	r3, [sp, #4]
 8017d9e:	a902      	add	r1, sp, #8
 8017da0:	f000 f868 	bl	8017e74 <_svfiprintf_r>
 8017da4:	9b02      	ldr	r3, [sp, #8]
 8017da6:	2200      	movs	r2, #0
 8017da8:	701a      	strb	r2, [r3, #0]
 8017daa:	b01c      	add	sp, #112	; 0x70
 8017dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8017db0:	b003      	add	sp, #12
 8017db2:	4770      	bx	lr
 8017db4:	20000134 	.word	0x20000134
 8017db8:	ffff0208 	.word	0xffff0208

08017dbc <__ssputs_r>:
 8017dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017dc0:	688e      	ldr	r6, [r1, #8]
 8017dc2:	429e      	cmp	r6, r3
 8017dc4:	4682      	mov	sl, r0
 8017dc6:	460c      	mov	r4, r1
 8017dc8:	4690      	mov	r8, r2
 8017dca:	461f      	mov	r7, r3
 8017dcc:	d838      	bhi.n	8017e40 <__ssputs_r+0x84>
 8017dce:	898a      	ldrh	r2, [r1, #12]
 8017dd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017dd4:	d032      	beq.n	8017e3c <__ssputs_r+0x80>
 8017dd6:	6825      	ldr	r5, [r4, #0]
 8017dd8:	6909      	ldr	r1, [r1, #16]
 8017dda:	eba5 0901 	sub.w	r9, r5, r1
 8017dde:	6965      	ldr	r5, [r4, #20]
 8017de0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017de4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017de8:	3301      	adds	r3, #1
 8017dea:	444b      	add	r3, r9
 8017dec:	106d      	asrs	r5, r5, #1
 8017dee:	429d      	cmp	r5, r3
 8017df0:	bf38      	it	cc
 8017df2:	461d      	movcc	r5, r3
 8017df4:	0553      	lsls	r3, r2, #21
 8017df6:	d531      	bpl.n	8017e5c <__ssputs_r+0xa0>
 8017df8:	4629      	mov	r1, r5
 8017dfa:	f000 fb63 	bl	80184c4 <_malloc_r>
 8017dfe:	4606      	mov	r6, r0
 8017e00:	b950      	cbnz	r0, 8017e18 <__ssputs_r+0x5c>
 8017e02:	230c      	movs	r3, #12
 8017e04:	f8ca 3000 	str.w	r3, [sl]
 8017e08:	89a3      	ldrh	r3, [r4, #12]
 8017e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017e0e:	81a3      	strh	r3, [r4, #12]
 8017e10:	f04f 30ff 	mov.w	r0, #4294967295
 8017e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017e18:	6921      	ldr	r1, [r4, #16]
 8017e1a:	464a      	mov	r2, r9
 8017e1c:	f000 fabe 	bl	801839c <memcpy>
 8017e20:	89a3      	ldrh	r3, [r4, #12]
 8017e22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e2a:	81a3      	strh	r3, [r4, #12]
 8017e2c:	6126      	str	r6, [r4, #16]
 8017e2e:	6165      	str	r5, [r4, #20]
 8017e30:	444e      	add	r6, r9
 8017e32:	eba5 0509 	sub.w	r5, r5, r9
 8017e36:	6026      	str	r6, [r4, #0]
 8017e38:	60a5      	str	r5, [r4, #8]
 8017e3a:	463e      	mov	r6, r7
 8017e3c:	42be      	cmp	r6, r7
 8017e3e:	d900      	bls.n	8017e42 <__ssputs_r+0x86>
 8017e40:	463e      	mov	r6, r7
 8017e42:	6820      	ldr	r0, [r4, #0]
 8017e44:	4632      	mov	r2, r6
 8017e46:	4641      	mov	r1, r8
 8017e48:	f000 fab6 	bl	80183b8 <memmove>
 8017e4c:	68a3      	ldr	r3, [r4, #8]
 8017e4e:	1b9b      	subs	r3, r3, r6
 8017e50:	60a3      	str	r3, [r4, #8]
 8017e52:	6823      	ldr	r3, [r4, #0]
 8017e54:	4433      	add	r3, r6
 8017e56:	6023      	str	r3, [r4, #0]
 8017e58:	2000      	movs	r0, #0
 8017e5a:	e7db      	b.n	8017e14 <__ssputs_r+0x58>
 8017e5c:	462a      	mov	r2, r5
 8017e5e:	f000 fba5 	bl	80185ac <_realloc_r>
 8017e62:	4606      	mov	r6, r0
 8017e64:	2800      	cmp	r0, #0
 8017e66:	d1e1      	bne.n	8017e2c <__ssputs_r+0x70>
 8017e68:	6921      	ldr	r1, [r4, #16]
 8017e6a:	4650      	mov	r0, sl
 8017e6c:	f000 fabe 	bl	80183ec <_free_r>
 8017e70:	e7c7      	b.n	8017e02 <__ssputs_r+0x46>
	...

08017e74 <_svfiprintf_r>:
 8017e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e78:	4698      	mov	r8, r3
 8017e7a:	898b      	ldrh	r3, [r1, #12]
 8017e7c:	061b      	lsls	r3, r3, #24
 8017e7e:	b09d      	sub	sp, #116	; 0x74
 8017e80:	4607      	mov	r7, r0
 8017e82:	460d      	mov	r5, r1
 8017e84:	4614      	mov	r4, r2
 8017e86:	d50e      	bpl.n	8017ea6 <_svfiprintf_r+0x32>
 8017e88:	690b      	ldr	r3, [r1, #16]
 8017e8a:	b963      	cbnz	r3, 8017ea6 <_svfiprintf_r+0x32>
 8017e8c:	2140      	movs	r1, #64	; 0x40
 8017e8e:	f000 fb19 	bl	80184c4 <_malloc_r>
 8017e92:	6028      	str	r0, [r5, #0]
 8017e94:	6128      	str	r0, [r5, #16]
 8017e96:	b920      	cbnz	r0, 8017ea2 <_svfiprintf_r+0x2e>
 8017e98:	230c      	movs	r3, #12
 8017e9a:	603b      	str	r3, [r7, #0]
 8017e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017ea0:	e0d1      	b.n	8018046 <_svfiprintf_r+0x1d2>
 8017ea2:	2340      	movs	r3, #64	; 0x40
 8017ea4:	616b      	str	r3, [r5, #20]
 8017ea6:	2300      	movs	r3, #0
 8017ea8:	9309      	str	r3, [sp, #36]	; 0x24
 8017eaa:	2320      	movs	r3, #32
 8017eac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017eb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8017eb4:	2330      	movs	r3, #48	; 0x30
 8017eb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018060 <_svfiprintf_r+0x1ec>
 8017eba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017ebe:	f04f 0901 	mov.w	r9, #1
 8017ec2:	4623      	mov	r3, r4
 8017ec4:	469a      	mov	sl, r3
 8017ec6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017eca:	b10a      	cbz	r2, 8017ed0 <_svfiprintf_r+0x5c>
 8017ecc:	2a25      	cmp	r2, #37	; 0x25
 8017ece:	d1f9      	bne.n	8017ec4 <_svfiprintf_r+0x50>
 8017ed0:	ebba 0b04 	subs.w	fp, sl, r4
 8017ed4:	d00b      	beq.n	8017eee <_svfiprintf_r+0x7a>
 8017ed6:	465b      	mov	r3, fp
 8017ed8:	4622      	mov	r2, r4
 8017eda:	4629      	mov	r1, r5
 8017edc:	4638      	mov	r0, r7
 8017ede:	f7ff ff6d 	bl	8017dbc <__ssputs_r>
 8017ee2:	3001      	adds	r0, #1
 8017ee4:	f000 80aa 	beq.w	801803c <_svfiprintf_r+0x1c8>
 8017ee8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017eea:	445a      	add	r2, fp
 8017eec:	9209      	str	r2, [sp, #36]	; 0x24
 8017eee:	f89a 3000 	ldrb.w	r3, [sl]
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	f000 80a2 	beq.w	801803c <_svfiprintf_r+0x1c8>
 8017ef8:	2300      	movs	r3, #0
 8017efa:	f04f 32ff 	mov.w	r2, #4294967295
 8017efe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f02:	f10a 0a01 	add.w	sl, sl, #1
 8017f06:	9304      	str	r3, [sp, #16]
 8017f08:	9307      	str	r3, [sp, #28]
 8017f0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017f0e:	931a      	str	r3, [sp, #104]	; 0x68
 8017f10:	4654      	mov	r4, sl
 8017f12:	2205      	movs	r2, #5
 8017f14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f18:	4851      	ldr	r0, [pc, #324]	; (8018060 <_svfiprintf_r+0x1ec>)
 8017f1a:	f7e8 f979 	bl	8000210 <memchr>
 8017f1e:	9a04      	ldr	r2, [sp, #16]
 8017f20:	b9d8      	cbnz	r0, 8017f5a <_svfiprintf_r+0xe6>
 8017f22:	06d0      	lsls	r0, r2, #27
 8017f24:	bf44      	itt	mi
 8017f26:	2320      	movmi	r3, #32
 8017f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f2c:	0711      	lsls	r1, r2, #28
 8017f2e:	bf44      	itt	mi
 8017f30:	232b      	movmi	r3, #43	; 0x2b
 8017f32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017f36:	f89a 3000 	ldrb.w	r3, [sl]
 8017f3a:	2b2a      	cmp	r3, #42	; 0x2a
 8017f3c:	d015      	beq.n	8017f6a <_svfiprintf_r+0xf6>
 8017f3e:	9a07      	ldr	r2, [sp, #28]
 8017f40:	4654      	mov	r4, sl
 8017f42:	2000      	movs	r0, #0
 8017f44:	f04f 0c0a 	mov.w	ip, #10
 8017f48:	4621      	mov	r1, r4
 8017f4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017f4e:	3b30      	subs	r3, #48	; 0x30
 8017f50:	2b09      	cmp	r3, #9
 8017f52:	d94e      	bls.n	8017ff2 <_svfiprintf_r+0x17e>
 8017f54:	b1b0      	cbz	r0, 8017f84 <_svfiprintf_r+0x110>
 8017f56:	9207      	str	r2, [sp, #28]
 8017f58:	e014      	b.n	8017f84 <_svfiprintf_r+0x110>
 8017f5a:	eba0 0308 	sub.w	r3, r0, r8
 8017f5e:	fa09 f303 	lsl.w	r3, r9, r3
 8017f62:	4313      	orrs	r3, r2
 8017f64:	9304      	str	r3, [sp, #16]
 8017f66:	46a2      	mov	sl, r4
 8017f68:	e7d2      	b.n	8017f10 <_svfiprintf_r+0x9c>
 8017f6a:	9b03      	ldr	r3, [sp, #12]
 8017f6c:	1d19      	adds	r1, r3, #4
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	9103      	str	r1, [sp, #12]
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	bfbb      	ittet	lt
 8017f76:	425b      	neglt	r3, r3
 8017f78:	f042 0202 	orrlt.w	r2, r2, #2
 8017f7c:	9307      	strge	r3, [sp, #28]
 8017f7e:	9307      	strlt	r3, [sp, #28]
 8017f80:	bfb8      	it	lt
 8017f82:	9204      	strlt	r2, [sp, #16]
 8017f84:	7823      	ldrb	r3, [r4, #0]
 8017f86:	2b2e      	cmp	r3, #46	; 0x2e
 8017f88:	d10c      	bne.n	8017fa4 <_svfiprintf_r+0x130>
 8017f8a:	7863      	ldrb	r3, [r4, #1]
 8017f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8017f8e:	d135      	bne.n	8017ffc <_svfiprintf_r+0x188>
 8017f90:	9b03      	ldr	r3, [sp, #12]
 8017f92:	1d1a      	adds	r2, r3, #4
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	9203      	str	r2, [sp, #12]
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	bfb8      	it	lt
 8017f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017fa0:	3402      	adds	r4, #2
 8017fa2:	9305      	str	r3, [sp, #20]
 8017fa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018070 <_svfiprintf_r+0x1fc>
 8017fa8:	7821      	ldrb	r1, [r4, #0]
 8017faa:	2203      	movs	r2, #3
 8017fac:	4650      	mov	r0, sl
 8017fae:	f7e8 f92f 	bl	8000210 <memchr>
 8017fb2:	b140      	cbz	r0, 8017fc6 <_svfiprintf_r+0x152>
 8017fb4:	2340      	movs	r3, #64	; 0x40
 8017fb6:	eba0 000a 	sub.w	r0, r0, sl
 8017fba:	fa03 f000 	lsl.w	r0, r3, r0
 8017fbe:	9b04      	ldr	r3, [sp, #16]
 8017fc0:	4303      	orrs	r3, r0
 8017fc2:	3401      	adds	r4, #1
 8017fc4:	9304      	str	r3, [sp, #16]
 8017fc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fca:	4826      	ldr	r0, [pc, #152]	; (8018064 <_svfiprintf_r+0x1f0>)
 8017fcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017fd0:	2206      	movs	r2, #6
 8017fd2:	f7e8 f91d 	bl	8000210 <memchr>
 8017fd6:	2800      	cmp	r0, #0
 8017fd8:	d038      	beq.n	801804c <_svfiprintf_r+0x1d8>
 8017fda:	4b23      	ldr	r3, [pc, #140]	; (8018068 <_svfiprintf_r+0x1f4>)
 8017fdc:	bb1b      	cbnz	r3, 8018026 <_svfiprintf_r+0x1b2>
 8017fde:	9b03      	ldr	r3, [sp, #12]
 8017fe0:	3307      	adds	r3, #7
 8017fe2:	f023 0307 	bic.w	r3, r3, #7
 8017fe6:	3308      	adds	r3, #8
 8017fe8:	9303      	str	r3, [sp, #12]
 8017fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017fec:	4433      	add	r3, r6
 8017fee:	9309      	str	r3, [sp, #36]	; 0x24
 8017ff0:	e767      	b.n	8017ec2 <_svfiprintf_r+0x4e>
 8017ff2:	fb0c 3202 	mla	r2, ip, r2, r3
 8017ff6:	460c      	mov	r4, r1
 8017ff8:	2001      	movs	r0, #1
 8017ffa:	e7a5      	b.n	8017f48 <_svfiprintf_r+0xd4>
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	3401      	adds	r4, #1
 8018000:	9305      	str	r3, [sp, #20]
 8018002:	4619      	mov	r1, r3
 8018004:	f04f 0c0a 	mov.w	ip, #10
 8018008:	4620      	mov	r0, r4
 801800a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801800e:	3a30      	subs	r2, #48	; 0x30
 8018010:	2a09      	cmp	r2, #9
 8018012:	d903      	bls.n	801801c <_svfiprintf_r+0x1a8>
 8018014:	2b00      	cmp	r3, #0
 8018016:	d0c5      	beq.n	8017fa4 <_svfiprintf_r+0x130>
 8018018:	9105      	str	r1, [sp, #20]
 801801a:	e7c3      	b.n	8017fa4 <_svfiprintf_r+0x130>
 801801c:	fb0c 2101 	mla	r1, ip, r1, r2
 8018020:	4604      	mov	r4, r0
 8018022:	2301      	movs	r3, #1
 8018024:	e7f0      	b.n	8018008 <_svfiprintf_r+0x194>
 8018026:	ab03      	add	r3, sp, #12
 8018028:	9300      	str	r3, [sp, #0]
 801802a:	462a      	mov	r2, r5
 801802c:	4b0f      	ldr	r3, [pc, #60]	; (801806c <_svfiprintf_r+0x1f8>)
 801802e:	a904      	add	r1, sp, #16
 8018030:	4638      	mov	r0, r7
 8018032:	f3af 8000 	nop.w
 8018036:	1c42      	adds	r2, r0, #1
 8018038:	4606      	mov	r6, r0
 801803a:	d1d6      	bne.n	8017fea <_svfiprintf_r+0x176>
 801803c:	89ab      	ldrh	r3, [r5, #12]
 801803e:	065b      	lsls	r3, r3, #25
 8018040:	f53f af2c 	bmi.w	8017e9c <_svfiprintf_r+0x28>
 8018044:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018046:	b01d      	add	sp, #116	; 0x74
 8018048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801804c:	ab03      	add	r3, sp, #12
 801804e:	9300      	str	r3, [sp, #0]
 8018050:	462a      	mov	r2, r5
 8018052:	4b06      	ldr	r3, [pc, #24]	; (801806c <_svfiprintf_r+0x1f8>)
 8018054:	a904      	add	r1, sp, #16
 8018056:	4638      	mov	r0, r7
 8018058:	f000 f87a 	bl	8018150 <_printf_i>
 801805c:	e7eb      	b.n	8018036 <_svfiprintf_r+0x1c2>
 801805e:	bf00      	nop
 8018060:	080187dc 	.word	0x080187dc
 8018064:	080187e6 	.word	0x080187e6
 8018068:	00000000 	.word	0x00000000
 801806c:	08017dbd 	.word	0x08017dbd
 8018070:	080187e2 	.word	0x080187e2

08018074 <_printf_common>:
 8018074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018078:	4616      	mov	r6, r2
 801807a:	4699      	mov	r9, r3
 801807c:	688a      	ldr	r2, [r1, #8]
 801807e:	690b      	ldr	r3, [r1, #16]
 8018080:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018084:	4293      	cmp	r3, r2
 8018086:	bfb8      	it	lt
 8018088:	4613      	movlt	r3, r2
 801808a:	6033      	str	r3, [r6, #0]
 801808c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018090:	4607      	mov	r7, r0
 8018092:	460c      	mov	r4, r1
 8018094:	b10a      	cbz	r2, 801809a <_printf_common+0x26>
 8018096:	3301      	adds	r3, #1
 8018098:	6033      	str	r3, [r6, #0]
 801809a:	6823      	ldr	r3, [r4, #0]
 801809c:	0699      	lsls	r1, r3, #26
 801809e:	bf42      	ittt	mi
 80180a0:	6833      	ldrmi	r3, [r6, #0]
 80180a2:	3302      	addmi	r3, #2
 80180a4:	6033      	strmi	r3, [r6, #0]
 80180a6:	6825      	ldr	r5, [r4, #0]
 80180a8:	f015 0506 	ands.w	r5, r5, #6
 80180ac:	d106      	bne.n	80180bc <_printf_common+0x48>
 80180ae:	f104 0a19 	add.w	sl, r4, #25
 80180b2:	68e3      	ldr	r3, [r4, #12]
 80180b4:	6832      	ldr	r2, [r6, #0]
 80180b6:	1a9b      	subs	r3, r3, r2
 80180b8:	42ab      	cmp	r3, r5
 80180ba:	dc26      	bgt.n	801810a <_printf_common+0x96>
 80180bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80180c0:	1e13      	subs	r3, r2, #0
 80180c2:	6822      	ldr	r2, [r4, #0]
 80180c4:	bf18      	it	ne
 80180c6:	2301      	movne	r3, #1
 80180c8:	0692      	lsls	r2, r2, #26
 80180ca:	d42b      	bmi.n	8018124 <_printf_common+0xb0>
 80180cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80180d0:	4649      	mov	r1, r9
 80180d2:	4638      	mov	r0, r7
 80180d4:	47c0      	blx	r8
 80180d6:	3001      	adds	r0, #1
 80180d8:	d01e      	beq.n	8018118 <_printf_common+0xa4>
 80180da:	6823      	ldr	r3, [r4, #0]
 80180dc:	68e5      	ldr	r5, [r4, #12]
 80180de:	6832      	ldr	r2, [r6, #0]
 80180e0:	f003 0306 	and.w	r3, r3, #6
 80180e4:	2b04      	cmp	r3, #4
 80180e6:	bf08      	it	eq
 80180e8:	1aad      	subeq	r5, r5, r2
 80180ea:	68a3      	ldr	r3, [r4, #8]
 80180ec:	6922      	ldr	r2, [r4, #16]
 80180ee:	bf0c      	ite	eq
 80180f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80180f4:	2500      	movne	r5, #0
 80180f6:	4293      	cmp	r3, r2
 80180f8:	bfc4      	itt	gt
 80180fa:	1a9b      	subgt	r3, r3, r2
 80180fc:	18ed      	addgt	r5, r5, r3
 80180fe:	2600      	movs	r6, #0
 8018100:	341a      	adds	r4, #26
 8018102:	42b5      	cmp	r5, r6
 8018104:	d11a      	bne.n	801813c <_printf_common+0xc8>
 8018106:	2000      	movs	r0, #0
 8018108:	e008      	b.n	801811c <_printf_common+0xa8>
 801810a:	2301      	movs	r3, #1
 801810c:	4652      	mov	r2, sl
 801810e:	4649      	mov	r1, r9
 8018110:	4638      	mov	r0, r7
 8018112:	47c0      	blx	r8
 8018114:	3001      	adds	r0, #1
 8018116:	d103      	bne.n	8018120 <_printf_common+0xac>
 8018118:	f04f 30ff 	mov.w	r0, #4294967295
 801811c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018120:	3501      	adds	r5, #1
 8018122:	e7c6      	b.n	80180b2 <_printf_common+0x3e>
 8018124:	18e1      	adds	r1, r4, r3
 8018126:	1c5a      	adds	r2, r3, #1
 8018128:	2030      	movs	r0, #48	; 0x30
 801812a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801812e:	4422      	add	r2, r4
 8018130:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018134:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018138:	3302      	adds	r3, #2
 801813a:	e7c7      	b.n	80180cc <_printf_common+0x58>
 801813c:	2301      	movs	r3, #1
 801813e:	4622      	mov	r2, r4
 8018140:	4649      	mov	r1, r9
 8018142:	4638      	mov	r0, r7
 8018144:	47c0      	blx	r8
 8018146:	3001      	adds	r0, #1
 8018148:	d0e6      	beq.n	8018118 <_printf_common+0xa4>
 801814a:	3601      	adds	r6, #1
 801814c:	e7d9      	b.n	8018102 <_printf_common+0x8e>
	...

08018150 <_printf_i>:
 8018150:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018154:	7e0f      	ldrb	r7, [r1, #24]
 8018156:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018158:	2f78      	cmp	r7, #120	; 0x78
 801815a:	4691      	mov	r9, r2
 801815c:	4680      	mov	r8, r0
 801815e:	460c      	mov	r4, r1
 8018160:	469a      	mov	sl, r3
 8018162:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018166:	d807      	bhi.n	8018178 <_printf_i+0x28>
 8018168:	2f62      	cmp	r7, #98	; 0x62
 801816a:	d80a      	bhi.n	8018182 <_printf_i+0x32>
 801816c:	2f00      	cmp	r7, #0
 801816e:	f000 80d8 	beq.w	8018322 <_printf_i+0x1d2>
 8018172:	2f58      	cmp	r7, #88	; 0x58
 8018174:	f000 80a3 	beq.w	80182be <_printf_i+0x16e>
 8018178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801817c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018180:	e03a      	b.n	80181f8 <_printf_i+0xa8>
 8018182:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018186:	2b15      	cmp	r3, #21
 8018188:	d8f6      	bhi.n	8018178 <_printf_i+0x28>
 801818a:	a101      	add	r1, pc, #4	; (adr r1, 8018190 <_printf_i+0x40>)
 801818c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018190:	080181e9 	.word	0x080181e9
 8018194:	080181fd 	.word	0x080181fd
 8018198:	08018179 	.word	0x08018179
 801819c:	08018179 	.word	0x08018179
 80181a0:	08018179 	.word	0x08018179
 80181a4:	08018179 	.word	0x08018179
 80181a8:	080181fd 	.word	0x080181fd
 80181ac:	08018179 	.word	0x08018179
 80181b0:	08018179 	.word	0x08018179
 80181b4:	08018179 	.word	0x08018179
 80181b8:	08018179 	.word	0x08018179
 80181bc:	08018309 	.word	0x08018309
 80181c0:	0801822d 	.word	0x0801822d
 80181c4:	080182eb 	.word	0x080182eb
 80181c8:	08018179 	.word	0x08018179
 80181cc:	08018179 	.word	0x08018179
 80181d0:	0801832b 	.word	0x0801832b
 80181d4:	08018179 	.word	0x08018179
 80181d8:	0801822d 	.word	0x0801822d
 80181dc:	08018179 	.word	0x08018179
 80181e0:	08018179 	.word	0x08018179
 80181e4:	080182f3 	.word	0x080182f3
 80181e8:	682b      	ldr	r3, [r5, #0]
 80181ea:	1d1a      	adds	r2, r3, #4
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	602a      	str	r2, [r5, #0]
 80181f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80181f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80181f8:	2301      	movs	r3, #1
 80181fa:	e0a3      	b.n	8018344 <_printf_i+0x1f4>
 80181fc:	6820      	ldr	r0, [r4, #0]
 80181fe:	6829      	ldr	r1, [r5, #0]
 8018200:	0606      	lsls	r6, r0, #24
 8018202:	f101 0304 	add.w	r3, r1, #4
 8018206:	d50a      	bpl.n	801821e <_printf_i+0xce>
 8018208:	680e      	ldr	r6, [r1, #0]
 801820a:	602b      	str	r3, [r5, #0]
 801820c:	2e00      	cmp	r6, #0
 801820e:	da03      	bge.n	8018218 <_printf_i+0xc8>
 8018210:	232d      	movs	r3, #45	; 0x2d
 8018212:	4276      	negs	r6, r6
 8018214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018218:	485e      	ldr	r0, [pc, #376]	; (8018394 <_printf_i+0x244>)
 801821a:	230a      	movs	r3, #10
 801821c:	e019      	b.n	8018252 <_printf_i+0x102>
 801821e:	680e      	ldr	r6, [r1, #0]
 8018220:	602b      	str	r3, [r5, #0]
 8018222:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018226:	bf18      	it	ne
 8018228:	b236      	sxthne	r6, r6
 801822a:	e7ef      	b.n	801820c <_printf_i+0xbc>
 801822c:	682b      	ldr	r3, [r5, #0]
 801822e:	6820      	ldr	r0, [r4, #0]
 8018230:	1d19      	adds	r1, r3, #4
 8018232:	6029      	str	r1, [r5, #0]
 8018234:	0601      	lsls	r1, r0, #24
 8018236:	d501      	bpl.n	801823c <_printf_i+0xec>
 8018238:	681e      	ldr	r6, [r3, #0]
 801823a:	e002      	b.n	8018242 <_printf_i+0xf2>
 801823c:	0646      	lsls	r6, r0, #25
 801823e:	d5fb      	bpl.n	8018238 <_printf_i+0xe8>
 8018240:	881e      	ldrh	r6, [r3, #0]
 8018242:	4854      	ldr	r0, [pc, #336]	; (8018394 <_printf_i+0x244>)
 8018244:	2f6f      	cmp	r7, #111	; 0x6f
 8018246:	bf0c      	ite	eq
 8018248:	2308      	moveq	r3, #8
 801824a:	230a      	movne	r3, #10
 801824c:	2100      	movs	r1, #0
 801824e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018252:	6865      	ldr	r5, [r4, #4]
 8018254:	60a5      	str	r5, [r4, #8]
 8018256:	2d00      	cmp	r5, #0
 8018258:	bfa2      	ittt	ge
 801825a:	6821      	ldrge	r1, [r4, #0]
 801825c:	f021 0104 	bicge.w	r1, r1, #4
 8018260:	6021      	strge	r1, [r4, #0]
 8018262:	b90e      	cbnz	r6, 8018268 <_printf_i+0x118>
 8018264:	2d00      	cmp	r5, #0
 8018266:	d04d      	beq.n	8018304 <_printf_i+0x1b4>
 8018268:	4615      	mov	r5, r2
 801826a:	fbb6 f1f3 	udiv	r1, r6, r3
 801826e:	fb03 6711 	mls	r7, r3, r1, r6
 8018272:	5dc7      	ldrb	r7, [r0, r7]
 8018274:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018278:	4637      	mov	r7, r6
 801827a:	42bb      	cmp	r3, r7
 801827c:	460e      	mov	r6, r1
 801827e:	d9f4      	bls.n	801826a <_printf_i+0x11a>
 8018280:	2b08      	cmp	r3, #8
 8018282:	d10b      	bne.n	801829c <_printf_i+0x14c>
 8018284:	6823      	ldr	r3, [r4, #0]
 8018286:	07de      	lsls	r6, r3, #31
 8018288:	d508      	bpl.n	801829c <_printf_i+0x14c>
 801828a:	6923      	ldr	r3, [r4, #16]
 801828c:	6861      	ldr	r1, [r4, #4]
 801828e:	4299      	cmp	r1, r3
 8018290:	bfde      	ittt	le
 8018292:	2330      	movle	r3, #48	; 0x30
 8018294:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018298:	f105 35ff 	addle.w	r5, r5, #4294967295
 801829c:	1b52      	subs	r2, r2, r5
 801829e:	6122      	str	r2, [r4, #16]
 80182a0:	f8cd a000 	str.w	sl, [sp]
 80182a4:	464b      	mov	r3, r9
 80182a6:	aa03      	add	r2, sp, #12
 80182a8:	4621      	mov	r1, r4
 80182aa:	4640      	mov	r0, r8
 80182ac:	f7ff fee2 	bl	8018074 <_printf_common>
 80182b0:	3001      	adds	r0, #1
 80182b2:	d14c      	bne.n	801834e <_printf_i+0x1fe>
 80182b4:	f04f 30ff 	mov.w	r0, #4294967295
 80182b8:	b004      	add	sp, #16
 80182ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182be:	4835      	ldr	r0, [pc, #212]	; (8018394 <_printf_i+0x244>)
 80182c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80182c4:	6829      	ldr	r1, [r5, #0]
 80182c6:	6823      	ldr	r3, [r4, #0]
 80182c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80182cc:	6029      	str	r1, [r5, #0]
 80182ce:	061d      	lsls	r5, r3, #24
 80182d0:	d514      	bpl.n	80182fc <_printf_i+0x1ac>
 80182d2:	07df      	lsls	r7, r3, #31
 80182d4:	bf44      	itt	mi
 80182d6:	f043 0320 	orrmi.w	r3, r3, #32
 80182da:	6023      	strmi	r3, [r4, #0]
 80182dc:	b91e      	cbnz	r6, 80182e6 <_printf_i+0x196>
 80182de:	6823      	ldr	r3, [r4, #0]
 80182e0:	f023 0320 	bic.w	r3, r3, #32
 80182e4:	6023      	str	r3, [r4, #0]
 80182e6:	2310      	movs	r3, #16
 80182e8:	e7b0      	b.n	801824c <_printf_i+0xfc>
 80182ea:	6823      	ldr	r3, [r4, #0]
 80182ec:	f043 0320 	orr.w	r3, r3, #32
 80182f0:	6023      	str	r3, [r4, #0]
 80182f2:	2378      	movs	r3, #120	; 0x78
 80182f4:	4828      	ldr	r0, [pc, #160]	; (8018398 <_printf_i+0x248>)
 80182f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80182fa:	e7e3      	b.n	80182c4 <_printf_i+0x174>
 80182fc:	0659      	lsls	r1, r3, #25
 80182fe:	bf48      	it	mi
 8018300:	b2b6      	uxthmi	r6, r6
 8018302:	e7e6      	b.n	80182d2 <_printf_i+0x182>
 8018304:	4615      	mov	r5, r2
 8018306:	e7bb      	b.n	8018280 <_printf_i+0x130>
 8018308:	682b      	ldr	r3, [r5, #0]
 801830a:	6826      	ldr	r6, [r4, #0]
 801830c:	6961      	ldr	r1, [r4, #20]
 801830e:	1d18      	adds	r0, r3, #4
 8018310:	6028      	str	r0, [r5, #0]
 8018312:	0635      	lsls	r5, r6, #24
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	d501      	bpl.n	801831c <_printf_i+0x1cc>
 8018318:	6019      	str	r1, [r3, #0]
 801831a:	e002      	b.n	8018322 <_printf_i+0x1d2>
 801831c:	0670      	lsls	r0, r6, #25
 801831e:	d5fb      	bpl.n	8018318 <_printf_i+0x1c8>
 8018320:	8019      	strh	r1, [r3, #0]
 8018322:	2300      	movs	r3, #0
 8018324:	6123      	str	r3, [r4, #16]
 8018326:	4615      	mov	r5, r2
 8018328:	e7ba      	b.n	80182a0 <_printf_i+0x150>
 801832a:	682b      	ldr	r3, [r5, #0]
 801832c:	1d1a      	adds	r2, r3, #4
 801832e:	602a      	str	r2, [r5, #0]
 8018330:	681d      	ldr	r5, [r3, #0]
 8018332:	6862      	ldr	r2, [r4, #4]
 8018334:	2100      	movs	r1, #0
 8018336:	4628      	mov	r0, r5
 8018338:	f7e7 ff6a 	bl	8000210 <memchr>
 801833c:	b108      	cbz	r0, 8018342 <_printf_i+0x1f2>
 801833e:	1b40      	subs	r0, r0, r5
 8018340:	6060      	str	r0, [r4, #4]
 8018342:	6863      	ldr	r3, [r4, #4]
 8018344:	6123      	str	r3, [r4, #16]
 8018346:	2300      	movs	r3, #0
 8018348:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801834c:	e7a8      	b.n	80182a0 <_printf_i+0x150>
 801834e:	6923      	ldr	r3, [r4, #16]
 8018350:	462a      	mov	r2, r5
 8018352:	4649      	mov	r1, r9
 8018354:	4640      	mov	r0, r8
 8018356:	47d0      	blx	sl
 8018358:	3001      	adds	r0, #1
 801835a:	d0ab      	beq.n	80182b4 <_printf_i+0x164>
 801835c:	6823      	ldr	r3, [r4, #0]
 801835e:	079b      	lsls	r3, r3, #30
 8018360:	d413      	bmi.n	801838a <_printf_i+0x23a>
 8018362:	68e0      	ldr	r0, [r4, #12]
 8018364:	9b03      	ldr	r3, [sp, #12]
 8018366:	4298      	cmp	r0, r3
 8018368:	bfb8      	it	lt
 801836a:	4618      	movlt	r0, r3
 801836c:	e7a4      	b.n	80182b8 <_printf_i+0x168>
 801836e:	2301      	movs	r3, #1
 8018370:	4632      	mov	r2, r6
 8018372:	4649      	mov	r1, r9
 8018374:	4640      	mov	r0, r8
 8018376:	47d0      	blx	sl
 8018378:	3001      	adds	r0, #1
 801837a:	d09b      	beq.n	80182b4 <_printf_i+0x164>
 801837c:	3501      	adds	r5, #1
 801837e:	68e3      	ldr	r3, [r4, #12]
 8018380:	9903      	ldr	r1, [sp, #12]
 8018382:	1a5b      	subs	r3, r3, r1
 8018384:	42ab      	cmp	r3, r5
 8018386:	dcf2      	bgt.n	801836e <_printf_i+0x21e>
 8018388:	e7eb      	b.n	8018362 <_printf_i+0x212>
 801838a:	2500      	movs	r5, #0
 801838c:	f104 0619 	add.w	r6, r4, #25
 8018390:	e7f5      	b.n	801837e <_printf_i+0x22e>
 8018392:	bf00      	nop
 8018394:	080187ed 	.word	0x080187ed
 8018398:	080187fe 	.word	0x080187fe

0801839c <memcpy>:
 801839c:	440a      	add	r2, r1
 801839e:	4291      	cmp	r1, r2
 80183a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80183a4:	d100      	bne.n	80183a8 <memcpy+0xc>
 80183a6:	4770      	bx	lr
 80183a8:	b510      	push	{r4, lr}
 80183aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80183ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80183b2:	4291      	cmp	r1, r2
 80183b4:	d1f9      	bne.n	80183aa <memcpy+0xe>
 80183b6:	bd10      	pop	{r4, pc}

080183b8 <memmove>:
 80183b8:	4288      	cmp	r0, r1
 80183ba:	b510      	push	{r4, lr}
 80183bc:	eb01 0402 	add.w	r4, r1, r2
 80183c0:	d902      	bls.n	80183c8 <memmove+0x10>
 80183c2:	4284      	cmp	r4, r0
 80183c4:	4623      	mov	r3, r4
 80183c6:	d807      	bhi.n	80183d8 <memmove+0x20>
 80183c8:	1e43      	subs	r3, r0, #1
 80183ca:	42a1      	cmp	r1, r4
 80183cc:	d008      	beq.n	80183e0 <memmove+0x28>
 80183ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80183d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80183d6:	e7f8      	b.n	80183ca <memmove+0x12>
 80183d8:	4402      	add	r2, r0
 80183da:	4601      	mov	r1, r0
 80183dc:	428a      	cmp	r2, r1
 80183de:	d100      	bne.n	80183e2 <memmove+0x2a>
 80183e0:	bd10      	pop	{r4, pc}
 80183e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80183e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80183ea:	e7f7      	b.n	80183dc <memmove+0x24>

080183ec <_free_r>:
 80183ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80183ee:	2900      	cmp	r1, #0
 80183f0:	d044      	beq.n	801847c <_free_r+0x90>
 80183f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183f6:	9001      	str	r0, [sp, #4]
 80183f8:	2b00      	cmp	r3, #0
 80183fa:	f1a1 0404 	sub.w	r4, r1, #4
 80183fe:	bfb8      	it	lt
 8018400:	18e4      	addlt	r4, r4, r3
 8018402:	f000 f913 	bl	801862c <__malloc_lock>
 8018406:	4a1e      	ldr	r2, [pc, #120]	; (8018480 <_free_r+0x94>)
 8018408:	9801      	ldr	r0, [sp, #4]
 801840a:	6813      	ldr	r3, [r2, #0]
 801840c:	b933      	cbnz	r3, 801841c <_free_r+0x30>
 801840e:	6063      	str	r3, [r4, #4]
 8018410:	6014      	str	r4, [r2, #0]
 8018412:	b003      	add	sp, #12
 8018414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8018418:	f000 b90e 	b.w	8018638 <__malloc_unlock>
 801841c:	42a3      	cmp	r3, r4
 801841e:	d908      	bls.n	8018432 <_free_r+0x46>
 8018420:	6825      	ldr	r5, [r4, #0]
 8018422:	1961      	adds	r1, r4, r5
 8018424:	428b      	cmp	r3, r1
 8018426:	bf01      	itttt	eq
 8018428:	6819      	ldreq	r1, [r3, #0]
 801842a:	685b      	ldreq	r3, [r3, #4]
 801842c:	1949      	addeq	r1, r1, r5
 801842e:	6021      	streq	r1, [r4, #0]
 8018430:	e7ed      	b.n	801840e <_free_r+0x22>
 8018432:	461a      	mov	r2, r3
 8018434:	685b      	ldr	r3, [r3, #4]
 8018436:	b10b      	cbz	r3, 801843c <_free_r+0x50>
 8018438:	42a3      	cmp	r3, r4
 801843a:	d9fa      	bls.n	8018432 <_free_r+0x46>
 801843c:	6811      	ldr	r1, [r2, #0]
 801843e:	1855      	adds	r5, r2, r1
 8018440:	42a5      	cmp	r5, r4
 8018442:	d10b      	bne.n	801845c <_free_r+0x70>
 8018444:	6824      	ldr	r4, [r4, #0]
 8018446:	4421      	add	r1, r4
 8018448:	1854      	adds	r4, r2, r1
 801844a:	42a3      	cmp	r3, r4
 801844c:	6011      	str	r1, [r2, #0]
 801844e:	d1e0      	bne.n	8018412 <_free_r+0x26>
 8018450:	681c      	ldr	r4, [r3, #0]
 8018452:	685b      	ldr	r3, [r3, #4]
 8018454:	6053      	str	r3, [r2, #4]
 8018456:	4421      	add	r1, r4
 8018458:	6011      	str	r1, [r2, #0]
 801845a:	e7da      	b.n	8018412 <_free_r+0x26>
 801845c:	d902      	bls.n	8018464 <_free_r+0x78>
 801845e:	230c      	movs	r3, #12
 8018460:	6003      	str	r3, [r0, #0]
 8018462:	e7d6      	b.n	8018412 <_free_r+0x26>
 8018464:	6825      	ldr	r5, [r4, #0]
 8018466:	1961      	adds	r1, r4, r5
 8018468:	428b      	cmp	r3, r1
 801846a:	bf04      	itt	eq
 801846c:	6819      	ldreq	r1, [r3, #0]
 801846e:	685b      	ldreq	r3, [r3, #4]
 8018470:	6063      	str	r3, [r4, #4]
 8018472:	bf04      	itt	eq
 8018474:	1949      	addeq	r1, r1, r5
 8018476:	6021      	streq	r1, [r4, #0]
 8018478:	6054      	str	r4, [r2, #4]
 801847a:	e7ca      	b.n	8018412 <_free_r+0x26>
 801847c:	b003      	add	sp, #12
 801847e:	bd30      	pop	{r4, r5, pc}
 8018480:	20007408 	.word	0x20007408

08018484 <sbrk_aligned>:
 8018484:	b570      	push	{r4, r5, r6, lr}
 8018486:	4e0e      	ldr	r6, [pc, #56]	; (80184c0 <sbrk_aligned+0x3c>)
 8018488:	460c      	mov	r4, r1
 801848a:	6831      	ldr	r1, [r6, #0]
 801848c:	4605      	mov	r5, r0
 801848e:	b911      	cbnz	r1, 8018496 <sbrk_aligned+0x12>
 8018490:	f000 f8bc 	bl	801860c <_sbrk_r>
 8018494:	6030      	str	r0, [r6, #0]
 8018496:	4621      	mov	r1, r4
 8018498:	4628      	mov	r0, r5
 801849a:	f000 f8b7 	bl	801860c <_sbrk_r>
 801849e:	1c43      	adds	r3, r0, #1
 80184a0:	d00a      	beq.n	80184b8 <sbrk_aligned+0x34>
 80184a2:	1cc4      	adds	r4, r0, #3
 80184a4:	f024 0403 	bic.w	r4, r4, #3
 80184a8:	42a0      	cmp	r0, r4
 80184aa:	d007      	beq.n	80184bc <sbrk_aligned+0x38>
 80184ac:	1a21      	subs	r1, r4, r0
 80184ae:	4628      	mov	r0, r5
 80184b0:	f000 f8ac 	bl	801860c <_sbrk_r>
 80184b4:	3001      	adds	r0, #1
 80184b6:	d101      	bne.n	80184bc <sbrk_aligned+0x38>
 80184b8:	f04f 34ff 	mov.w	r4, #4294967295
 80184bc:	4620      	mov	r0, r4
 80184be:	bd70      	pop	{r4, r5, r6, pc}
 80184c0:	2000740c 	.word	0x2000740c

080184c4 <_malloc_r>:
 80184c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184c8:	1ccd      	adds	r5, r1, #3
 80184ca:	f025 0503 	bic.w	r5, r5, #3
 80184ce:	3508      	adds	r5, #8
 80184d0:	2d0c      	cmp	r5, #12
 80184d2:	bf38      	it	cc
 80184d4:	250c      	movcc	r5, #12
 80184d6:	2d00      	cmp	r5, #0
 80184d8:	4607      	mov	r7, r0
 80184da:	db01      	blt.n	80184e0 <_malloc_r+0x1c>
 80184dc:	42a9      	cmp	r1, r5
 80184de:	d905      	bls.n	80184ec <_malloc_r+0x28>
 80184e0:	230c      	movs	r3, #12
 80184e2:	603b      	str	r3, [r7, #0]
 80184e4:	2600      	movs	r6, #0
 80184e6:	4630      	mov	r0, r6
 80184e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184ec:	4e2e      	ldr	r6, [pc, #184]	; (80185a8 <_malloc_r+0xe4>)
 80184ee:	f000 f89d 	bl	801862c <__malloc_lock>
 80184f2:	6833      	ldr	r3, [r6, #0]
 80184f4:	461c      	mov	r4, r3
 80184f6:	bb34      	cbnz	r4, 8018546 <_malloc_r+0x82>
 80184f8:	4629      	mov	r1, r5
 80184fa:	4638      	mov	r0, r7
 80184fc:	f7ff ffc2 	bl	8018484 <sbrk_aligned>
 8018500:	1c43      	adds	r3, r0, #1
 8018502:	4604      	mov	r4, r0
 8018504:	d14d      	bne.n	80185a2 <_malloc_r+0xde>
 8018506:	6834      	ldr	r4, [r6, #0]
 8018508:	4626      	mov	r6, r4
 801850a:	2e00      	cmp	r6, #0
 801850c:	d140      	bne.n	8018590 <_malloc_r+0xcc>
 801850e:	6823      	ldr	r3, [r4, #0]
 8018510:	4631      	mov	r1, r6
 8018512:	4638      	mov	r0, r7
 8018514:	eb04 0803 	add.w	r8, r4, r3
 8018518:	f000 f878 	bl	801860c <_sbrk_r>
 801851c:	4580      	cmp	r8, r0
 801851e:	d13a      	bne.n	8018596 <_malloc_r+0xd2>
 8018520:	6821      	ldr	r1, [r4, #0]
 8018522:	3503      	adds	r5, #3
 8018524:	1a6d      	subs	r5, r5, r1
 8018526:	f025 0503 	bic.w	r5, r5, #3
 801852a:	3508      	adds	r5, #8
 801852c:	2d0c      	cmp	r5, #12
 801852e:	bf38      	it	cc
 8018530:	250c      	movcc	r5, #12
 8018532:	4629      	mov	r1, r5
 8018534:	4638      	mov	r0, r7
 8018536:	f7ff ffa5 	bl	8018484 <sbrk_aligned>
 801853a:	3001      	adds	r0, #1
 801853c:	d02b      	beq.n	8018596 <_malloc_r+0xd2>
 801853e:	6823      	ldr	r3, [r4, #0]
 8018540:	442b      	add	r3, r5
 8018542:	6023      	str	r3, [r4, #0]
 8018544:	e00e      	b.n	8018564 <_malloc_r+0xa0>
 8018546:	6822      	ldr	r2, [r4, #0]
 8018548:	1b52      	subs	r2, r2, r5
 801854a:	d41e      	bmi.n	801858a <_malloc_r+0xc6>
 801854c:	2a0b      	cmp	r2, #11
 801854e:	d916      	bls.n	801857e <_malloc_r+0xba>
 8018550:	1961      	adds	r1, r4, r5
 8018552:	42a3      	cmp	r3, r4
 8018554:	6025      	str	r5, [r4, #0]
 8018556:	bf18      	it	ne
 8018558:	6059      	strne	r1, [r3, #4]
 801855a:	6863      	ldr	r3, [r4, #4]
 801855c:	bf08      	it	eq
 801855e:	6031      	streq	r1, [r6, #0]
 8018560:	5162      	str	r2, [r4, r5]
 8018562:	604b      	str	r3, [r1, #4]
 8018564:	4638      	mov	r0, r7
 8018566:	f104 060b 	add.w	r6, r4, #11
 801856a:	f000 f865 	bl	8018638 <__malloc_unlock>
 801856e:	f026 0607 	bic.w	r6, r6, #7
 8018572:	1d23      	adds	r3, r4, #4
 8018574:	1af2      	subs	r2, r6, r3
 8018576:	d0b6      	beq.n	80184e6 <_malloc_r+0x22>
 8018578:	1b9b      	subs	r3, r3, r6
 801857a:	50a3      	str	r3, [r4, r2]
 801857c:	e7b3      	b.n	80184e6 <_malloc_r+0x22>
 801857e:	6862      	ldr	r2, [r4, #4]
 8018580:	42a3      	cmp	r3, r4
 8018582:	bf0c      	ite	eq
 8018584:	6032      	streq	r2, [r6, #0]
 8018586:	605a      	strne	r2, [r3, #4]
 8018588:	e7ec      	b.n	8018564 <_malloc_r+0xa0>
 801858a:	4623      	mov	r3, r4
 801858c:	6864      	ldr	r4, [r4, #4]
 801858e:	e7b2      	b.n	80184f6 <_malloc_r+0x32>
 8018590:	4634      	mov	r4, r6
 8018592:	6876      	ldr	r6, [r6, #4]
 8018594:	e7b9      	b.n	801850a <_malloc_r+0x46>
 8018596:	230c      	movs	r3, #12
 8018598:	603b      	str	r3, [r7, #0]
 801859a:	4638      	mov	r0, r7
 801859c:	f000 f84c 	bl	8018638 <__malloc_unlock>
 80185a0:	e7a1      	b.n	80184e6 <_malloc_r+0x22>
 80185a2:	6025      	str	r5, [r4, #0]
 80185a4:	e7de      	b.n	8018564 <_malloc_r+0xa0>
 80185a6:	bf00      	nop
 80185a8:	20007408 	.word	0x20007408

080185ac <_realloc_r>:
 80185ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80185b0:	4680      	mov	r8, r0
 80185b2:	4614      	mov	r4, r2
 80185b4:	460e      	mov	r6, r1
 80185b6:	b921      	cbnz	r1, 80185c2 <_realloc_r+0x16>
 80185b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80185bc:	4611      	mov	r1, r2
 80185be:	f7ff bf81 	b.w	80184c4 <_malloc_r>
 80185c2:	b92a      	cbnz	r2, 80185d0 <_realloc_r+0x24>
 80185c4:	f7ff ff12 	bl	80183ec <_free_r>
 80185c8:	4625      	mov	r5, r4
 80185ca:	4628      	mov	r0, r5
 80185cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80185d0:	f000 f838 	bl	8018644 <_malloc_usable_size_r>
 80185d4:	4284      	cmp	r4, r0
 80185d6:	4607      	mov	r7, r0
 80185d8:	d802      	bhi.n	80185e0 <_realloc_r+0x34>
 80185da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80185de:	d812      	bhi.n	8018606 <_realloc_r+0x5a>
 80185e0:	4621      	mov	r1, r4
 80185e2:	4640      	mov	r0, r8
 80185e4:	f7ff ff6e 	bl	80184c4 <_malloc_r>
 80185e8:	4605      	mov	r5, r0
 80185ea:	2800      	cmp	r0, #0
 80185ec:	d0ed      	beq.n	80185ca <_realloc_r+0x1e>
 80185ee:	42bc      	cmp	r4, r7
 80185f0:	4622      	mov	r2, r4
 80185f2:	4631      	mov	r1, r6
 80185f4:	bf28      	it	cs
 80185f6:	463a      	movcs	r2, r7
 80185f8:	f7ff fed0 	bl	801839c <memcpy>
 80185fc:	4631      	mov	r1, r6
 80185fe:	4640      	mov	r0, r8
 8018600:	f7ff fef4 	bl	80183ec <_free_r>
 8018604:	e7e1      	b.n	80185ca <_realloc_r+0x1e>
 8018606:	4635      	mov	r5, r6
 8018608:	e7df      	b.n	80185ca <_realloc_r+0x1e>
	...

0801860c <_sbrk_r>:
 801860c:	b538      	push	{r3, r4, r5, lr}
 801860e:	4d06      	ldr	r5, [pc, #24]	; (8018628 <_sbrk_r+0x1c>)
 8018610:	2300      	movs	r3, #0
 8018612:	4604      	mov	r4, r0
 8018614:	4608      	mov	r0, r1
 8018616:	602b      	str	r3, [r5, #0]
 8018618:	f7ee faca 	bl	8006bb0 <_sbrk>
 801861c:	1c43      	adds	r3, r0, #1
 801861e:	d102      	bne.n	8018626 <_sbrk_r+0x1a>
 8018620:	682b      	ldr	r3, [r5, #0]
 8018622:	b103      	cbz	r3, 8018626 <_sbrk_r+0x1a>
 8018624:	6023      	str	r3, [r4, #0]
 8018626:	bd38      	pop	{r3, r4, r5, pc}
 8018628:	20007410 	.word	0x20007410

0801862c <__malloc_lock>:
 801862c:	4801      	ldr	r0, [pc, #4]	; (8018634 <__malloc_lock+0x8>)
 801862e:	f000 b811 	b.w	8018654 <__retarget_lock_acquire_recursive>
 8018632:	bf00      	nop
 8018634:	20007414 	.word	0x20007414

08018638 <__malloc_unlock>:
 8018638:	4801      	ldr	r0, [pc, #4]	; (8018640 <__malloc_unlock+0x8>)
 801863a:	f000 b80c 	b.w	8018656 <__retarget_lock_release_recursive>
 801863e:	bf00      	nop
 8018640:	20007414 	.word	0x20007414

08018644 <_malloc_usable_size_r>:
 8018644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018648:	1f18      	subs	r0, r3, #4
 801864a:	2b00      	cmp	r3, #0
 801864c:	bfbc      	itt	lt
 801864e:	580b      	ldrlt	r3, [r1, r0]
 8018650:	18c0      	addlt	r0, r0, r3
 8018652:	4770      	bx	lr

08018654 <__retarget_lock_acquire_recursive>:
 8018654:	4770      	bx	lr

08018656 <__retarget_lock_release_recursive>:
 8018656:	4770      	bx	lr

08018658 <_init>:
 8018658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801865a:	bf00      	nop
 801865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801865e:	bc08      	pop	{r3}
 8018660:	469e      	mov	lr, r3
 8018662:	4770      	bx	lr

08018664 <_fini>:
 8018664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018666:	bf00      	nop
 8018668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801866a:	bc08      	pop	{r3}
 801866c:	469e      	mov	lr, r3
 801866e:	4770      	bx	lr
